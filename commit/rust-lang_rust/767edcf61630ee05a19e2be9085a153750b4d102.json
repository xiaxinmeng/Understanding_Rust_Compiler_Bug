{"sha": "767edcf61630ee05a19e2be9085a153750b4d102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2N2VkY2Y2MTYzMGVlMDVhMTllMmJlOTA4NWExNTM3NTBiNGQxMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T21:31:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T21:31:16Z"}, "message": "Auto merge of #88490 - GuillaumeGomez:associated-types-implementors-display, r=camelid,Manishearth\n\nDisplay associated types of implementors\n\nFixes #86631.\n\nContrary to before, it doesn't display methods. I also had to \"resurrect\" the `auto-hide-trait-implementations` setting. :3\n\nOnly question at this point: should I move the `render_impl` boolean arguments into one struct? We're starting to have quite a lot of them...\n\ncc `@cynecx`\nr? `@camelid`", "tree": {"sha": "f7fc17186de8f7ad08eab7b87b2850f2128f3e37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fc17186de8f7ad08eab7b87b2850f2128f3e37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/767edcf61630ee05a19e2be9085a153750b4d102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/767edcf61630ee05a19e2be9085a153750b4d102", "html_url": "https://github.com/rust-lang/rust/commit/767edcf61630ee05a19e2be9085a153750b4d102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/767edcf61630ee05a19e2be9085a153750b4d102/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50171c310cd15e1b2d3723766ce64e2e4d6696fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50171c310cd15e1b2d3723766ce64e2e4d6696fc", "html_url": "https://github.com/rust-lang/rust/commit/50171c310cd15e1b2d3723766ce64e2e4d6696fc"}, {"sha": "92dae39b64224ca9f706f5de8df09a72559947c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/92dae39b64224ca9f706f5de8df09a72559947c5", "html_url": "https://github.com/rust-lang/rust/commit/92dae39b64224ca9f706f5de8df09a72559947c5"}], "stats": {"total": 162, "additions": 112, "deletions": 50}, "files": [{"sha": "172fe5d164b7afc1f123971b97a2d7fa5b8b4d76", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 62, "deletions": 29, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -710,11 +710,15 @@ fn render_impls(\n                 containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n-                true,\n                 None,\n-                false,\n-                true,\n                 &[],\n+                ImplRenderingParameters {\n+                    show_def_docs: true,\n+                    is_on_foreign_type: false,\n+                    show_default_items: true,\n+                    show_non_assoc_items: true,\n+                    toggle_open_by_default: true,\n+                },\n             );\n             buffer.into_inner()\n         })\n@@ -1049,11 +1053,15 @@ fn render_assoc_items(\n                 containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                true,\n                 None,\n-                false,\n-                true,\n                 &[],\n+                ImplRenderingParameters {\n+                    show_def_docs: true,\n+                    is_on_foreign_type: false,\n+                    show_default_items: true,\n+                    show_non_assoc_items: true,\n+                    toggle_open_by_default: true,\n+                },\n             );\n         }\n     }\n@@ -1243,20 +1251,26 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     out.into_inner()\n }\n \n+#[derive(Clone, Copy, Debug)]\n+struct ImplRenderingParameters {\n+    show_def_docs: bool,\n+    is_on_foreign_type: bool,\n+    show_default_items: bool,\n+    /// Whether or not to show methods.\n+    show_non_assoc_items: bool,\n+    toggle_open_by_default: bool,\n+}\n+\n fn render_impl(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     i: &Impl,\n     parent: &clean::Item,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n-    show_def_docs: bool,\n     use_absolute: Option<bool>,\n-    is_on_foreign_type: bool,\n-    show_default_items: bool,\n-    // This argument is used to reference same type with different paths to avoid duplication\n-    // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n+    rendering_params: ImplRenderingParameters,\n ) {\n     let cache = cx.cache();\n     let traits = &cache.traits;\n@@ -1279,17 +1293,18 @@ fn render_impl(\n         render_mode: RenderMode,\n         is_default_item: bool,\n         trait_: Option<&clean::Trait>,\n-        show_def_docs: bool,\n+        rendering_params: ImplRenderingParameters,\n     ) {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n \n-        let render_method_item = match render_mode {\n-            RenderMode::Normal => true,\n-            RenderMode::ForDeref { mut_: deref_mut_ } => {\n-                should_render_item(&item, deref_mut_, cx.cache())\n-            }\n-        };\n+        let render_method_item = rendering_params.show_non_assoc_items\n+            && match render_mode {\n+                RenderMode::Normal => true,\n+                RenderMode::ForDeref { mut_: deref_mut_ } => {\n+                    should_render_item(&item, deref_mut_, cx.cache())\n+                }\n+            };\n \n         let in_trait_class = if trait_.is_some() { \" trait-impl\" } else { \"\" };\n \n@@ -1312,18 +1327,32 @@ fn render_impl(\n                         } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(&mut doc_buffer, it, cx, link, parent, show_def_docs);\n+                            document_short(\n+                                &mut doc_buffer,\n+                                it,\n+                                cx,\n+                                link,\n+                                parent,\n+                                rendering_params.show_def_docs,\n+                            );\n                         }\n                     }\n                 } else {\n                     document_item_info(&mut info_buffer, cx, item, Some(parent));\n-                    if show_def_docs {\n+                    if rendering_params.show_def_docs {\n                         document_full(&mut doc_buffer, item, cx);\n                         short_documented = false;\n                     }\n                 }\n             } else {\n-                document_short(&mut doc_buffer, item, cx, link, parent, show_def_docs);\n+                document_short(\n+                    &mut doc_buffer,\n+                    item,\n+                    cx,\n+                    link,\n+                    parent,\n+                    rendering_params.show_def_docs,\n+                );\n             }\n         }\n         let w = if short_documented && trait_.is_some() { interesting } else { boring };\n@@ -1455,7 +1484,7 @@ fn render_impl(\n             render_mode,\n             false,\n             trait_.map(|t| &t.trait_),\n-            show_def_docs,\n+            rendering_params,\n         );\n     }\n \n@@ -1468,7 +1497,7 @@ fn render_impl(\n         parent: &clean::Item,\n         containing_item: &clean::Item,\n         render_mode: RenderMode,\n-        show_def_docs: bool,\n+        rendering_params: ImplRenderingParameters,\n     ) {\n         for trait_item in &t.items {\n             let n = trait_item.name;\n@@ -1490,7 +1519,7 @@ fn render_impl(\n                 render_mode,\n                 true,\n                 Some(t),\n-                show_def_docs,\n+                rendering_params,\n             );\n         }\n     }\n@@ -1499,7 +1528,7 @@ fn render_impl(\n     // default items which weren't overridden in the implementation block.\n     // We don't emit documentation for default items if they appear in the\n     // Implementations on Foreign Types or Implementors sections.\n-    if show_default_items {\n+    if rendering_params.show_default_items {\n         if let Some(t) = trait_ {\n             render_default_items(\n                 &mut default_impl_items,\n@@ -1510,15 +1539,19 @@ fn render_impl(\n                 &i.impl_item,\n                 parent,\n                 render_mode,\n-                show_def_docs,\n+                rendering_params,\n             );\n         }\n     }\n     if render_mode == RenderMode::Normal {\n         let toggled = !(impl_items.is_empty() && default_impl_items.is_empty());\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n-            write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n+            write!(\n+                w,\n+                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\"{}>\",\n+                if rendering_params.toggle_open_by_default { \" open\" } else { \"\" }\n+            );\n             write!(w, \"<summary>\")\n         }\n         render_impl_summary(\n@@ -1527,9 +1560,9 @@ fn render_impl(\n             i,\n             parent,\n             parent,\n-            show_def_docs,\n+            rendering_params.show_def_docs,\n             use_absolute,\n-            is_on_foreign_type,\n+            rendering_params.is_on_foreign_type,\n             aliases,\n         );\n         if toggled {"}, {"sha": "39ef641a3ace2772681b7e3bea91b478aee50d4f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -16,8 +16,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n     render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_impl_summary, render_stability_since_raw, write_srclink, AssocItemLink,\n-    Context,\n+    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    ImplRenderingParameters,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n@@ -736,11 +736,15 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     it,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    false,\n                     None,\n-                    true,\n-                    false,\n                     &[],\n+                    ImplRenderingParameters {\n+                        show_def_docs: false,\n+                        is_on_foreign_type: true,\n+                        show_default_items: false,\n+                        show_non_assoc_items: true,\n+                        toggle_open_by_default: false,\n+                    },\n                 );\n             }\n         }\n@@ -1395,16 +1399,22 @@ fn render_implementor(\n         } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n-    render_impl_summary(\n+    render_impl(\n         w,\n         cx,\n         implementor,\n         trait_,\n-        trait_,\n-        false,\n+        AssocItemLink::Anchor(None),\n+        RenderMode::Normal,\n         Some(use_absolute),\n-        false,\n         aliases,\n+        ImplRenderingParameters {\n+            show_def_docs: false,\n+            is_on_foreign_type: false,\n+            show_default_items: false,\n+            show_non_assoc_items: false,\n+            toggle_open_by_default: false,\n+        },\n     );\n }\n "}, {"sha": "c9042eb4813ab8a187dfb4969ddcb8bbb8d19a76", "filename": "src/test/rustdoc-gui/implementors.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -3,14 +3,14 @@\n goto: file://|DOC_PATH|/implementors/trait.Whatever.html\n assert: \"#implementors-list\"\n // There are supposed to be two implementors listed.\n-assert-count: (\"#implementors-list > .impl\", 2)\n+assert-count: (\"#implementors-list .impl\", 2)\n // Now we check that both implementors have an anchor, an ID and a similar DOM.\n-assert: (\"#implementors-list > .impl:nth-child(1) > a.anchor\")\n-assert-attribute: (\"#implementors-list > .impl:nth-child(1)\", {\"id\": \"impl-Whatever\"})\n-assert-attribute: (\"#implementors-list > .impl:nth-child(1) > a.anchor\", {\"href\": \"#impl-Whatever\"})\n-assert: \"#implementors-list > .impl:nth-child(1) > .code-header.in-band\"\n+assert: (\"#implementors-list .impl:nth-child(1) > a.anchor\")\n+assert-attribute: (\"#implementors-list .impl:nth-child(1)\", {\"id\": \"impl-Whatever\"})\n+assert-attribute: (\"#implementors-list .impl:nth-child(1) > a.anchor\", {\"href\": \"#impl-Whatever\"})\n+assert: \"#implementors-list .impl:nth-child(1) > .code-header.in-band\"\n \n-assert: (\"#implementors-list > .impl:nth-child(2) > a.anchor\")\n-assert-attribute: (\"#implementors-list > .impl:nth-child(2)\", {\"id\": \"impl-Whatever-1\"})\n-assert-attribute: (\"#implementors-list > .impl:nth-child(2) > a.anchor\", {\"href\": \"#impl-Whatever-1\"})\n-assert: \"#implementors-list > .impl:nth-child(2) > .code-header.in-band\"\n+assert: (\"#implementors-list .impl:nth-child(2) > a.anchor\")\n+assert-attribute: (\"#implementors-list .impl:nth-child(2)\", {\"id\": \"impl-Whatever-1\"})\n+assert-attribute: (\"#implementors-list .impl:nth-child(2) > a.anchor\", {\"href\": \"#impl-Whatever-1\"})\n+assert: \"#implementors-list .impl:nth-child(2) > .code-header.in-band\""}, {"sha": "6417a6ac5af6de314d594cc47833508831e24a08", "filename": "src/test/rustdoc-gui/src/lib2/implementors/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -1,7 +1,11 @@\n pub trait Whatever {\n+    type Foo;\n+\n     fn method() {}\n }\n \n pub struct Struct;\n \n-impl Whatever for Struct {}\n+impl Whatever for Struct {\n+    type Foo = u8;\n+}"}, {"sha": "cb63a9f60022702881b01a86ac23d0299b5226f0", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -38,7 +38,9 @@ impl Trait for Foo {\n }\n \n \n-impl implementors::Whatever for Foo {}\n+impl implementors::Whatever for Foo {\n+    type Foo = u32;\n+}\n \n pub mod sub_mod {\n     /// ```txt"}, {"sha": "15521ff0f49d320381d8cb2486beee06415f1066", "filename": "src/test/rustdoc-gui/toggle-implementors.goml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-implementors.goml?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -0,0 +1,4 @@\n+// This test ensures that the implementors toggle are not open by default.\n+goto: file://|DOC_PATH|/implementors/trait.Whatever.html\n+\n+assert-attribute-false: (\"#implementors-list > details\", {\"open\": \"\"}, ALL)"}, {"sha": "4d25835bf08fd231d479e4306ac9a3ed7af15af6", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767edcf61630ee05a19e2be9085a153750b4d102/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=767edcf61630ee05a19e2be9085a153750b4d102", "patch": "@@ -1,6 +1,6 @@\n pub trait MyTrait {\n     type Assoc;\n-    const VALUE: u32;\n+    const VALUE: u32 = 12;\n     fn trait_function(&self);\n     fn defaulted(&self) {}\n     fn defaulted_override(&self) {}\n@@ -38,9 +38,11 @@ impl MyTrait for Vec<u8> {\n }\n \n impl MyTrait for MyStruct {\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n@@ -55,3 +57,10 @@ impl MyTrait for MyStruct {\n }\n \n pub struct MyStruct;\n+\n+// We check that associated items with default values aren't generated in the implementors list.\n+impl MyTrait for (u8, u8) {\n+    // @!has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-4\"]'\n+    type Assoc = bool;\n+    fn trait_function(&self) {}\n+}"}]}