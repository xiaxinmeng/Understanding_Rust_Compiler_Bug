{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzNkYjRmODBjNzVmMTU2ZGY4YTc0M2Y0NTZiZjA4N2VjODFkYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-10T13:22:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-10T13:22:12Z"}, "message": "Auto merge of #39518 - alexcrichton:update-cargo, r=arielb1\n\nrustbuild: Use copies instead of hard links\n\nThe original motivation for hard links was to speed up the various stages of\nrustbuild, but in the end this is causing problems on Windows (#39504).\n\nThis commit tweaks the build system to use copies instead of hard links\nunconditionally to ensure that the files accessed by Windows are always\ndisjoint.\n\nLocally this added .3s to a noop build, so it shouldn't be too much of a\nregression hopefully!\n\nCloses #39504", "tree": {"sha": "fa81be07dd5107bde5f51ba4d5f2b4ba1ae76293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa81be07dd5107bde5f51ba4d5f2b4ba1ae76293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aaa60611cb7d89b03da8e56653ce09b0203f81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aaa60611cb7d89b03da8e56653ce09b0203f81d", "html_url": "https://github.com/rust-lang/rust/commit/5aaa60611cb7d89b03da8e56653ce09b0203f81d"}, {"sha": "6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f431491d0c9b96858c05c0ea30edaf44f9e7c12", "html_url": "https://github.com/rust-lang/rust/commit/6f431491d0c9b96858c05c0ea30edaf44f9e7c12"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "fc63655d79b6c3b414cd2e4404dc6bfe2883b621", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=f573db4f80c75f156df8a743f456bf087ec81dc2", "patch": "@@ -20,6 +20,8 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::Instant;\n \n+use filetime::{self, FileTime};\n+\n /// Returns the `name` as the filename of a static library for `target`.\n pub fn staticlib(name: &str, target: &str) -> String {\n     if target.contains(\"windows\") {\n@@ -38,12 +40,18 @@ pub fn copy(src: &Path, dst: &Path) {\n \n     // Attempt to \"easy copy\" by creating a hard link (symlinks don't work on\n     // windows), but if that fails just fall back to a slow `copy` operation.\n-    let res = fs::hard_link(src, dst);\n-    let res = res.or_else(|_| fs::copy(src, dst).map(|_| ()));\n+    // let res = fs::hard_link(src, dst);\n+    let res = fs::copy(src, dst);\n     if let Err(e) = res {\n         panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n                dst.display(), e)\n     }\n+    let metadata = t!(src.metadata());\n+    t!(fs::set_permissions(dst, metadata.permissions()));\n+    let atime = FileTime::from_last_access_time(&metadata);\n+    let mtime = FileTime::from_last_modification_time(&metadata);\n+    t!(filetime::set_file_times(dst, atime, mtime));\n+\n }\n \n /// Copies the `src` directory recursively to `dst`. Both are assumed to exist"}, {"sha": "a6771083fc34eaf438313e920cbc78707a569ba2", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=f573db4f80c75f156df8a743f456bf087ec81dc2", "patch": "@@ -639,6 +639,34 @@ impl<'a> Context<'a> {\n                                                          lib.display()));\n                 continue;\n             }\n+\n+            // Ok so at this point we've determined that `(lib, kind)` above is\n+            // a candidate crate to load, and that `slot` is either none (this\n+            // is the first crate of its kind) or if some the previous path has\n+            // the exact same hash (e.g. it's the exact same crate).\n+            //\n+            // In principle these two candidate crates are exactly the same so\n+            // we can choose either of them to link. As a stupidly gross hack,\n+            // however, we favor crate in the sysroot.\n+            //\n+            // You can find more info in rust-lang/rust#39518 and various linked\n+            // issues, but the general gist is that during testing libstd the\n+            // compilers has two candidates to choose from: one in the sysroot\n+            // and one in the deps folder. These two crates are the exact same\n+            // crate but if the compiler chooses the one in the deps folder\n+            // it'll cause spurious errors on Windows.\n+            //\n+            // As a result, we favor the sysroot crate here. Note that the\n+            // candidates are all canonicalized, so we canonicalize the sysroot\n+            // as well.\n+            if let Some((ref prev, _)) = ret {\n+                let sysroot = self.sess.sysroot();\n+                let sysroot = sysroot.canonicalize()\n+                                     .unwrap_or(sysroot.to_path_buf());\n+                if prev.starts_with(&sysroot) {\n+                    continue\n+                }\n+            }\n             *slot = Some((hash, metadata));\n             ret = Some((lib, kind));\n         }"}, {"sha": "772029ab0c253fc571578706b069de4057765555", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f573db4f80c75f156df8a743f456bf087ec81dc2/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=f573db4f80c75f156df8a743f456bf087ec81dc2", "patch": "@@ -13,4 +13,4 @@\n # released on `$date`\n \n rustc: beta-2017-02-01\n-cargo: bfee18f73287687c543bda8c35e4e33808792715\n+cargo: 407edef22e894266eb562618cba5ca9757051946"}]}