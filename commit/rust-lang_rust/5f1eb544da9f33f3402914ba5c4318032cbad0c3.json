{"sha": "5f1eb544da9f33f3402914ba5c4318032cbad0c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWViNTQ0ZGE5ZjMzZjM0MDI5MTRiYTVjNDMxODAzMmNiYWQwYzM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-26T21:59:31Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-26T22:16:39Z"}, "message": "Apply suggestions.", "tree": {"sha": "65e6fa4a8b4f5b39d271448a39d3557b249a6c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65e6fa4a8b4f5b39d271448a39d3557b249a6c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1eb544da9f33f3402914ba5c4318032cbad0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1eb544da9f33f3402914ba5c4318032cbad0c3", "html_url": "https://github.com/rust-lang/rust/commit/5f1eb544da9f33f3402914ba5c4318032cbad0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1eb544da9f33f3402914ba5c4318032cbad0c3/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0269071283cd8d090c00f2bc1d84b4fabbe9ea87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0269071283cd8d090c00f2bc1d84b4fabbe9ea87", "html_url": "https://github.com/rust-lang/rust/commit/0269071283cd8d090c00f2bc1d84b4fabbe9ea87"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "37d8414f4e60bf6437536bda6417e178f92b964a", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f1eb544da9f33f3402914ba5c4318032cbad0c3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1eb544da9f33f3402914ba5c4318032cbad0c3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=5f1eb544da9f33f3402914ba5c4318032cbad0c3", "patch": "@@ -50,7 +50,8 @@ FLAGS:\n     -q,  --quiet      Set verbosity\n \n     --log-file <PATH> Log to the specified file instead of stderr\n-    --no-buffering    Flush log records to the file immediately\n+    --no-log-buffering\n+                      Flush log records to the file immediately\n \n     --wait-dbg        Wait until a debugger is attached to.\n                       The flag is valid for debug builds only\n@@ -139,7 +140,7 @@ impl Args {\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n         let log_file = matches.opt_value_from_str(\"--log-file\")?;\n-        let no_buffering = matches.contains(\"--no-buffering\");\n+        let no_buffering = matches.contains(\"--no-log-buffering\");\n         let wait_dbg = matches.contains(\"--wait-dbg\");\n \n         if matches.contains([\"-h\", \"--help\"]) {"}, {"sha": "14887c5ccfefb10132fe2a8ce4a50e667c3edf44", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f1eb544da9f33f3402914ba5c4318032cbad0c3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1eb544da9f33f3402914ba5c4318032cbad0c3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=5f1eb544da9f33f3402914ba5c4318032cbad0c3", "patch": "@@ -47,7 +47,8 @@ impl Log for Logger {\n         if !self.filter.matches(record) {\n             return;\n         }\n-        match &self.file {\n+\n+        let should_flush = match &self.file {\n             Some(w) => {\n                 let _ = writeln!(\n                     w.lock(),\n@@ -56,16 +57,20 @@ impl Log for Logger {\n                     record.module_path().unwrap_or_default(),\n                     record.args(),\n                 );\n+                self.no_buffering\n             }\n-            None => eprintln!(\n-                \"[{} {}] {}\",\n-                record.level(),\n-                record.module_path().unwrap_or_default(),\n-                record.args(),\n-            ),\n-        }\n+            None => {\n+                eprintln!(\n+                    \"[{} {}] {}\",\n+                    record.level(),\n+                    record.module_path().unwrap_or_default(),\n+                    record.args(),\n+                );\n+                true // flush stderr unconditionally\n+            }\n+        };\n \n-        if self.no_buffering {\n+        if should_flush {\n             self.flush();\n         }\n     }"}]}