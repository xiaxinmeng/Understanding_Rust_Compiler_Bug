{"sha": "f0f7a59eaa2a6c71487373964ffeccf539de5228", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZjdhNTllYWEyYTZjNzE0ODczNzM5NjRmZmVjY2Y1MzlkZTUyMjg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-02T14:14:11Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-23T11:07:21Z"}, "message": "Use ConstCx in more places", "tree": {"sha": "1db140fa99cfd10de86c7263555c8ef9e160f77e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1db140fa99cfd10de86c7263555c8ef9e160f77e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0f7a59eaa2a6c71487373964ffeccf539de5228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7a59eaa2a6c71487373964ffeccf539de5228", "html_url": "https://github.com/rust-lang/rust/commit/f0f7a59eaa2a6c71487373964ffeccf539de5228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7a59eaa2a6c71487373964ffeccf539de5228/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3fb269ede7d18de3597cae8d35edbb9b7c6c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3fb269ede7d18de3597cae8d35edbb9b7c6c44", "html_url": "https://github.com/rust-lang/rust/commit/6a3fb269ede7d18de3597cae8d35edbb9b7c6c44"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "e22a4b92ec52f47d5e1987c6207dd5167dd35782", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=f0f7a59eaa2a6c71487373964ffeccf539de5228", "patch": "@@ -42,7 +42,10 @@ use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations}\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::MaybeInitializedPlaces;\n use crate::dataflow::ResultsCursor;\n-use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n+use crate::transform::{\n+    check_consts::ConstCx,\n+    promote_consts::should_suggest_const_in_array_repeat_expressions_attribute,\n+};\n \n use crate::borrow_check::{\n     borrow_set::BorrowSet,\n@@ -1984,14 +1987,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let span = body.source_info(location).span;\n                         let ty = operand.ty(body, tcx);\n                         if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                            let ccx = ConstCx::new_with_param_env(\n+                                tcx,\n+                                self.mir_def_id,\n+                                body,\n+                                self.param_env,\n+                            );\n                             // To determine if `const_in_array_repeat_expressions` feature gate should\n                             // be mentioned, need to check if the rvalue is promotable.\n                             let should_suggest =\n                                 should_suggest_const_in_array_repeat_expressions_attribute(\n-                                    tcx,\n-                                    self.mir_def_id,\n-                                    body,\n-                                    operand,\n+                                    ccx, operand,\n                                 );\n                             debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n "}, {"sha": "a630c56ee977f773eadad2be2cc89aee40ee6596", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f0f7a59eaa2a6c71487373964ffeccf539de5228", "patch": "@@ -31,6 +31,15 @@ pub struct ConstCx<'mir, 'tcx> {\n impl ConstCx<'mir, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'mir mir::Body<'tcx>) -> Self {\n         let param_env = tcx.param_env(def_id);\n+        Self::new_with_param_env(tcx, def_id, body, param_env)\n+    }\n+\n+    pub fn new_with_param_env(\n+        tcx: TyCtxt<'tcx>,\n+        def_id: DefId,\n+        body: &'mir mir::Body<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Self {\n         let const_kind = ConstKind::for_item(tcx, def_id);\n \n         ConstCx { body, tcx, def_id, param_env, const_kind }"}, {"sha": "5145ad18f2a137fdab7859a758b5d9d91ec79526", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f7a59eaa2a6c71487373964ffeccf539de5228/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=f0f7a59eaa2a6c71487373964ffeccf539de5228", "patch": "@@ -1147,22 +1147,19 @@ pub fn promote_candidates<'tcx>(\n /// Feature attribute should be suggested if `operand` can be promoted and the feature is not\n /// enabled.\n crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    mir_def_id: DefId,\n-    body: &Body<'tcx>,\n+    ccx: ConstCx<'_, 'tcx>,\n     operand: &Operand<'tcx>,\n ) -> bool {\n-    let mut rpo = traversal::reverse_postorder(&body);\n-    let (temps, _) = collect_temps_and_candidates(tcx, &body, &mut rpo);\n-    let validator =\n-        Validator { ccx: ConstCx::new(tcx, mir_def_id, body), temps: &temps, explicit: false };\n+    let mut rpo = traversal::reverse_postorder(&ccx.body);\n+    let (temps, _) = collect_temps_and_candidates(ccx.tcx, &ccx.body, &mut rpo);\n+    let validator = Validator { ccx, temps: &temps, explicit: false };\n \n     let should_promote = validator.validate_operand(operand).is_ok();\n-    let feature_flag = tcx.features().const_in_array_repeat_expressions;\n+    let feature_flag = validator.ccx.tcx.features().const_in_array_repeat_expressions;\n     debug!(\n-        \"should_suggest_const_in_array_repeat_expressions_flag: mir_def_id={:?} \\\n+        \"should_suggest_const_in_array_repeat_expressions_flag: def_id={:?} \\\n             should_promote={:?} feature_flag={:?}\",\n-        mir_def_id, should_promote, feature_flag\n+        validator.ccx.def_id, should_promote, feature_flag\n     );\n     should_promote && !feature_flag\n }"}]}