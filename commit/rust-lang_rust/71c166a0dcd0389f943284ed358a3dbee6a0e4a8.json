{"sha": "71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYzE2NmEwZGNkMDM4OWY5NDMyODRlZDM1OGEzZGJlZTZhMGU0YTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-13T06:58:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T16:17:49Z"}, "message": "use NonZeroU64 for AllocId to restore old type sizes", "tree": {"sha": "55873a86d8c23e47e4a46ed38e68bf444f2ecfd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55873a86d8c23e47e4a46ed38e68bf444f2ecfd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "html_url": "https://github.com/rust-lang/rust/commit/71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "626605cea02ee5f512f5efae0cd188ae1a7007c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/626605cea02ee5f512f5efae0cd188ae1a7007c7", "html_url": "https://github.com/rust-lang/rust/commit/626605cea02ee5f512f5efae0cd188ae1a7007c7"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "f2acc601d4f62dc5b2b6d79e1fa0cdb9b4ac9d43", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -49,6 +49,7 @@\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n #![feature(try_reserve)]\n+#![feature(nonzero_ops)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "86bd35003bb1a39e150f6bfebff3700047b9036f", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -99,7 +99,7 @@ use std::convert::TryFrom;\n use std::fmt;\n use std::io;\n use std::io::{Read, Write};\n-use std::num::NonZeroU32;\n+use std::num::{NonZeroU32, NonZeroU64};\n use std::sync::atomic::{AtomicU32, Ordering};\n \n use rustc_ast::LitKind;\n@@ -177,7 +177,7 @@ pub enum LitToConstError {\n }\n \n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd)]\n-pub struct AllocId(pub u64);\n+pub struct AllocId(pub NonZeroU64);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types.\n@@ -428,7 +428,7 @@ crate struct AllocMap<'tcx> {\n \n impl<'tcx> AllocMap<'tcx> {\n     crate fn new() -> Self {\n-        AllocMap { alloc_map: Default::default(), dedup: Default::default(), next_id: AllocId(0) }\n+        AllocMap { alloc_map: Default::default(), dedup: Default::default(), next_id: AllocId(NonZeroU64::new(1).unwrap()) }\n     }\n     fn reserve(&mut self) -> AllocId {\n         let next = self.next_id;"}, {"sha": "a95e39e18113008efe6cdccdd2626e9503fe54e4", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -135,7 +135,7 @@ pub struct Pointer<Tag = AllocId> {\n     pub provenance: Tag,\n }\n \n-//FIXME static_assert_size!(Pointer, 16);\n+static_assert_size!(Pointer, 16);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types."}, {"sha": "bb6f1bb21c623c273e465ea4ab81f4eefd808754", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -136,7 +136,7 @@ pub enum Scalar<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME static_assert_size!(Scalar, 24);\n+static_assert_size!(Scalar, 24);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types.\n@@ -522,7 +522,7 @@ pub enum ScalarMaybeUninit<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME static_assert_size!(ScalarMaybeUninit, 24);\n+static_assert_size!(ScalarMaybeUninit, 24);\n \n impl<Tag> From<Scalar<Tag>> for ScalarMaybeUninit<Tag> {\n     #[inline(always)]"}, {"sha": "fefda32bfe638b12783a65c723ed447f9c50054e", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -34,7 +34,7 @@ pub enum Immediate<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(Immediate, 56);\n+rustc_data_structures::static_assert_size!(Immediate, 56);\n \n impl<Tag: Provenance> std::fmt::Debug for Immediate<Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -100,7 +100,7 @@ pub struct ImmTy<'tcx, Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n+rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n \n impl<'tcx, Tag: Provenance> std::fmt::Debug for ImmTy<'tcx, Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {"}, {"sha": "5e35a83a5b9b7fc657c1275e41b1c6810adf4cd0", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c166a0dcd0389f943284ed358a3dbee6a0e4a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=71c166a0dcd0389f943284ed358a3dbee6a0e4a8", "patch": "@@ -34,7 +34,7 @@ pub enum MemPlaceMeta<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n+rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);\n \n impl<Tag: Provenance> std::fmt::Debug for MemPlaceMeta<Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -87,7 +87,7 @@ pub struct MemPlace<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(MemPlace, 56);\n+rustc_data_structures::static_assert_size!(MemPlace, 48);\n \n impl<Tag: Provenance> std::fmt::Debug for MemPlace<Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -111,7 +111,7 @@ pub enum Place<Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(Place, 64);\n+rustc_data_structures::static_assert_size!(Place, 56);\n \n impl<Tag: Provenance> std::fmt::Debug for Place<Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -132,7 +132,7 @@ pub struct PlaceTy<'tcx, Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(PlaceTy<'_>, 80);\n+rustc_data_structures::static_assert_size!(PlaceTy<'_>, 72);\n \n impl<'tcx, Tag: Provenance> std::fmt::Debug for PlaceTy<'tcx, Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -157,7 +157,7 @@ pub struct MPlaceTy<'tcx, Tag = AllocId> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-//FIXME rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 72);\n+rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);\n \n impl<'tcx, Tag: Provenance> std::fmt::Debug for MPlaceTy<'tcx, Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {"}]}