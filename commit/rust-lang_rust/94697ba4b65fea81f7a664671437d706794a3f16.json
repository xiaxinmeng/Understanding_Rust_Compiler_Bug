{"sha": "94697ba4b65fea81f7a664671437d706794a3f16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Njk3YmE0YjY1ZmVhODFmN2E2NjQ2NzE0MzdkNzA2Nzk0YTNmMTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-20T20:32:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T17:57:55Z"}, "message": "rename `LocalWithRegion` to `LiveVar`", "tree": {"sha": "cd3d60807cb43775c946e9fda9f2aaffa18bfb3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3d60807cb43775c946e9fda9f2aaffa18bfb3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94697ba4b65fea81f7a664671437d706794a3f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94697ba4b65fea81f7a664671437d706794a3f16", "html_url": "https://github.com/rust-lang/rust/commit/94697ba4b65fea81f7a664671437d706794a3f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94697ba4b65fea81f7a664671437d706794a3f16/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437485527e56d56a9c32d462a4029dae25eb6538", "url": "https://api.github.com/repos/rust-lang/rust/commits/437485527e56d56a9c32d462a4029dae25eb6538", "html_url": "https://github.com/rust-lang/rust/commit/437485527e56d56a9c32d462a4029dae25eb6538"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "d3064d7165fb141c7ea0f9738bfd27924b37e043", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=94697ba4b65fea81f7a664671437d706794a3f16", "patch": "@@ -10,9 +10,9 @@\n \n //! For the NLL computation, we need to compute liveness, but only for those\n //! local variables whose types contain regions. The others are not of interest\n-//! to us. This file defines a new index type (LocalWithRegion) that indexes into\n+//! to us. This file defines a new index type (LiveVar) that indexes into\n //! a list of \"variables whose type contain regions\". It also defines a map from\n-//! Local to LocalWithRegion and vice versa -- this map can be given to the\n+//! Local to LiveVar and vice versa -- this map can be given to the\n //! liveness code so that it only operates over variables with regions in their\n //! types, instead of all variables.\n \n@@ -23,7 +23,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use util::liveness::LiveVariableMap;\n \n-/// Map between Local and LocalWithRegion indices: the purpose of this\n+/// Map between Local and LiveVar indices: the purpose of this\n /// map is to define the subset of local variables for which we need\n /// to do a liveness computation. We only need to compute whether a\n /// variable `X` is live if that variable contains some region `R` in\n@@ -32,18 +32,18 @@ use util::liveness::LiveVariableMap;\n crate struct NllLivenessMap {\n     /// For each local variable, contains `Some(i)` if liveness is\n     /// needed for this variable.\n-    pub from_local: IndexVec<Local, Option<LocalWithRegion>>,\n+    pub from_local: IndexVec<Local, Option<LiveVar>>,\n \n-    /// For each `LocalWithRegion`, maps back to the original `Local` index.\n-    pub to_local: IndexVec<LocalWithRegion, Local>,\n+    /// For each `LiveVar`, maps back to the original `Local` index.\n+    pub to_local: IndexVec<LiveVar, Local>,\n }\n \n impl LiveVariableMap for NllLivenessMap {\n     fn from_local(&self, local: Local) -> Option<Self::LiveVar> {\n         self.from_local[local]\n     }\n \n-    type LiveVar = LocalWithRegion;\n+    type LiveVar = LiveVar;\n \n     fn from_live_var(&self, local: Self::LiveVar) -> Local {\n         self.to_local[local]\n@@ -94,4 +94,4 @@ impl NllLivenessMap {\n }\n \n /// Index given to each local variable whose type contains a region.\n-newtype_index!(LocalWithRegion);\n+newtype_index!(LiveVar);"}, {"sha": "9cbe49bc8facf4042008412a8667cb58123b5c29", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=94697ba4b65fea81f7a664671437d706794a3f16", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LocalWithRegion, NllLivenessMap};\n+use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -27,18 +27,18 @@ crate struct LocalUseMap<'me> {\n     /// defined in `x = y` but not `y`; that first def is the head of\n     /// a linked list that lets you enumerate all places the variable\n     /// is assigned.\n-    first_def_at: IndexVec<LocalWithRegion, Option<AppearanceIndex>>,\n+    first_def_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n \n     /// Head of a linked list of **uses** of each variable -- use in\n     /// this context means that the existing value of the variable is\n     /// read or modified. e.g., `y` is used in `x = y` but not `x`.\n     /// Note that `DROP(x)` terminators are excluded from this list.\n-    first_use_at: IndexVec<LocalWithRegion, Option<AppearanceIndex>>,\n+    first_use_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n \n     /// Head of a linked list of **drops** of each variable -- these\n     /// are a special category of uses corresponding to the drop that\n     /// we add for each local variable.\n-    first_drop_at: IndexVec<LocalWithRegion, Option<AppearanceIndex>>,\n+    first_drop_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n \n     appearances: IndexVec<AppearanceIndex, Appearance>,\n }\n@@ -81,17 +81,17 @@ impl LocalUseMap<'me> {\n         local_use_map\n     }\n \n-    crate fn defs(&self, local: LocalWithRegion) -> impl Iterator<Item = PointIndex> + '_ {\n+    crate fn defs(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n         vll::iter(self.first_def_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n-    crate fn uses(&self, local: LocalWithRegion) -> impl Iterator<Item = PointIndex> + '_ {\n+    crate fn uses(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n         vll::iter(self.first_use_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n-    crate fn drops(&self, local: LocalWithRegion) -> impl Iterator<Item = PointIndex> + '_ {\n+    crate fn drops(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n         vll::iter(self.first_drop_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n@@ -103,7 +103,7 @@ struct LocalUseMapBuild<'me, 'map> {\n }\n \n impl LocalUseMapBuild<'_, '_> {\n-    fn insert_def(&mut self, local: LocalWithRegion, location: Location) {\n+    fn insert_def(&mut self, local: LiveVar, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_def_at[local],\n@@ -112,7 +112,7 @@ impl LocalUseMapBuild<'_, '_> {\n         );\n     }\n \n-    fn insert_use(&mut self, local: LocalWithRegion, location: Location) {\n+    fn insert_use(&mut self, local: LiveVar, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_use_at[local],\n@@ -121,7 +121,7 @@ impl LocalUseMapBuild<'_, '_> {\n         );\n     }\n \n-    fn insert_drop(&mut self, local: LocalWithRegion, location: Location) {\n+    fn insert_drop(&mut self, local: LiveVar, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_drop_at[local],"}, {"sha": "61c6d2636058f49a333135c2ca0757de9fc63760", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94697ba4b65fea81f7a664671437d706794a3f16/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=94697ba4b65fea81f7a664671437d706794a3f16", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n-use borrow_check::nll::type_check::liveness::liveness_map::{LocalWithRegion, NllLivenessMap};\n+use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n use borrow_check::nll::type_check::liveness::point_index_map::PointIndexMap;\n use borrow_check::nll::type_check::AtLocation;\n@@ -194,7 +194,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     }\n \n     /// Adds the definitions of `local` into `self.defs`.\n-    fn add_defs_for(&mut self, live_local: LocalWithRegion) {\n+    fn add_defs_for(&mut self, live_local: LiveVar) {\n         for def in self.cx.local_use_map.defs(live_local) {\n             debug!(\"- defined at {:?}\", def);\n             self.defs.insert(def);\n@@ -207,7 +207,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     /// find a `def` of local.\n     ///\n     /// Requires `add_defs_for(live_local)` to have been executed.\n-    fn compute_use_live_points_for(&mut self, live_local: LocalWithRegion) {\n+    fn compute_use_live_points_for(&mut self, live_local: LiveVar) {\n         debug!(\"compute_use_live_points_for(live_local={:?})\", live_local);\n \n         self.stack.extend(self.cx.local_use_map.uses(live_local));\n@@ -233,7 +233,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     ///\n     /// Requires `compute_use_live_points_for` and `add_defs_for` to\n     /// have been executed.\n-    fn compute_drop_live_points_for(&mut self, live_local: LocalWithRegion) {\n+    fn compute_drop_live_points_for(&mut self, live_local: LiveVar) {\n         debug!(\"compute_drop_live_points_for(live_local={:?})\", live_local);\n \n         let local = self.cx.liveness_map.from_live_var(live_local);"}]}