{"sha": "a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "node_id": "C_kwDOAAsO6NoAKGE4Yjc3Y2ZlNTQ2NGUyOWIyNTM4OTU5M2NlZDlkMDgwYmYwZGQ2Yzg", "commit": {"author": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2023-01-24T04:31:45Z"}, "committer": {"name": "Edward Shen", "email": "xes@meta.com", "date": "2023-01-24T04:33:04Z"}, "message": "Add suggestion to remove if in let...else block\n\nAdds an additional hint to failures where we encounter an else keyword\nwhile we're parsing an if-let block.\n\nThis is likely that the user has accidentally mixed if-let and let...else\ntogether.", "tree": {"sha": "2fae43b147645668da9ce11c1c52f7652bec936d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fae43b147645668da9ce11c1c52f7652bec936d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFBBAABCAArFiEEPdMXsaq/0+dqJ5ht1qKsVZZ2DukFAmPPX4INHHhlc0BtZXRh\nLmNvbQAKCRDWoqxVlnYO6XtPCACPzP/0LCm2SgrRLIOtnBv/KXItAgJfDDkt5r0w\nrstkSvfk7l5TT3Df1jQaHAittqT7tlQdeP4zICf+CD2E7J0AyFYlf5WhCVxlK7xU\nyHePYIuOipKvZ/H0kuT/snMdz1OKstLVFR5bXuLXDcE08gTOSFAJ3eiMl9XFZZd4\npWYmAedGozV44Aemr74OYjm7UZuICD+P9NVG56/ajZEfU+mH75W83GxvJJozd9JF\nzxi6272m+xruyBVbFyap43+PZKX5VlxGRsIcX7Ka3or1quQ4ZWj4jrepGQPm0hAH\nLacMh3kXSggKFAlqpoRIMtMZf6385OBIQGPB8yjY0Gmz0EAS\n=3Vln\n-----END PGP SIGNATURE-----", "payload": "tree 2fae43b147645668da9ce11c1c52f7652bec936d\nparent c8e6a9e8b6251bbc8276cb78cabe1998deecbed7\nauthor Edward Shen <code@eddie.sh> 1674534705 -0800\ncommitter Edward Shen <xes@meta.com> 1674534784 -0800\n\nAdd suggestion to remove if in let...else block\n\nAdds an additional hint to failures where we encounter an else keyword\nwhile we're parsing an if-let block.\n\nThis is likely that the user has accidentally mixed if-let and let...else\ntogether.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "html_url": "https://github.com/rust-lang/rust/commit/a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/comments", "author": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "html_url": "https://github.com/rust-lang/rust/commit/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "a3e2002da781c230eff39d72ab2452466bf118e2", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -238,6 +238,7 @@ parse_const_let_mutually_exclusive = `const` and `let` are mutually exclusive\n \n parse_invalid_expression_in_let_else = a `{$operator}` expression cannot be directly assigned in `let...else`\n parse_invalid_curly_in_let_else = right curly brace `{\"}\"}` before `else` in a `let...else` statement not allowed\n+parse_extra_if_in_let_else = remove the `if` if you meant to write a `let...else` statement\n \n parse_compound_assignment_expression_in_let = can't reassign to an uninitialized variable\n     .suggestion = initialize the variable"}, {"sha": "40763da0bb5470ce20924fd76da86713e47e21dd", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -337,7 +337,9 @@ pub(crate) struct IfExpressionMissingThenBlock {\n     #[primary_span]\n     pub if_span: Span,\n     #[subdiagnostic]\n-    pub sub: IfExpressionMissingThenBlockSub,\n+    pub missing_then_block_sub: IfExpressionMissingThenBlockSub,\n+    #[subdiagnostic]\n+    pub let_else_sub: Option<IfExpressionLetSomeSub>,\n }\n \n #[derive(Subdiagnostic)]\n@@ -348,6 +350,13 @@ pub(crate) enum IfExpressionMissingThenBlockSub {\n     AddThenBlock(#[primary_span] Span),\n }\n \n+#[derive(Subdiagnostic)]\n+#[help(parse_extra_if_in_let_else)]\n+pub(crate) struct IfExpressionLetSomeSub {\n+    #[primary_span]\n+    pub if_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_if_expression_missing_condition)]\n pub(crate) struct IfExpressionMissingCondition {"}, {"sha": "3225a309a319b6286ce8baf02c8a3dd63a23a4cb", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -11,15 +11,15 @@ use crate::errors::{\n     ComparisonOrShiftInterpretedAsGenericSugg, DoCatchSyntaxRemoved, DotDotDot, EqFieldInit,\n     ExpectedElseBlock, ExpectedEqForLetExpr, ExpectedExpressionFoundLet,\n     FieldExpressionWithGeneric, FloatLiteralRequiresIntegerPart, FoundExprWouldBeStmt,\n-    IfExpressionMissingCondition, IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub,\n-    InvalidBlockMacroSegment, InvalidComparisonOperator, InvalidComparisonOperatorSub,\n-    InvalidInterpolatedExpression, InvalidLiteralSuffixOnTupleIndex, InvalidLogicalOperator,\n-    InvalidLogicalOperatorSub, LabeledLoopInBreak, LeadingPlusNotSupported, LeftArrowOperator,\n-    LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath, MalformedLoopLabel,\n-    MatchArmBodyWithoutBraces, MatchArmBodyWithoutBracesSugg, MissingCommaAfterMatchArm,\n-    MissingDotDot, MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray,\n-    NoFieldsForFnCall, NotAsNegationOperator, NotAsNegationOperatorSub,\n-    OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n+    IfExpressionLetSomeSub, IfExpressionMissingCondition, IfExpressionMissingThenBlock,\n+    IfExpressionMissingThenBlockSub, InvalidBlockMacroSegment, InvalidComparisonOperator,\n+    InvalidComparisonOperatorSub, InvalidInterpolatedExpression, InvalidLiteralSuffixOnTupleIndex,\n+    InvalidLogicalOperator, InvalidLogicalOperatorSub, LabeledLoopInBreak, LeadingPlusNotSupported,\n+    LeftArrowOperator, LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath,\n+    MalformedLoopLabel, MatchArmBodyWithoutBraces, MatchArmBodyWithoutBracesSugg,\n+    MissingCommaAfterMatchArm, MissingDotDot, MissingInInForLoop, MissingInInForLoopSub,\n+    MissingSemicolonBeforeArray, NoFieldsForFnCall, NotAsNegationOperator,\n+    NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n     RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, StructLiteralNotAllowedHere,\n     StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedIfWithIf,\n     UnexpectedTokenAfterLabel, UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n@@ -2251,9 +2251,10 @@ impl<'a> Parser<'a> {\n                     if let ExprKind::Block(_, None) = right.kind => {\n                         self.sess.emit_err(IfExpressionMissingThenBlock {\n                             if_span: lo,\n-                            sub: IfExpressionMissingThenBlockSub::UnfinishedCondition(\n-                                cond_span.shrink_to_lo().to(*binop_span)\n-                            ),\n+                            missing_then_block_sub:\n+                                IfExpressionMissingThenBlockSub::UnfinishedCondition(cond_span.shrink_to_lo().to(*binop_span)),\n+                                let_else_sub: None,\n+\n                         });\n                         std::mem::replace(right, this.mk_expr_err(binop_span.shrink_to_hi()))\n                     },\n@@ -2279,9 +2280,15 @@ impl<'a> Parser<'a> {\n             if let Some(block) = recover_block_from_condition(self) {\n                 block\n             } else {\n+                let let_else_sub = matches!(cond.kind, ExprKind::Let(..))\n+                    .then(|| IfExpressionLetSomeSub { if_span: lo });\n+\n                 self.sess.emit_err(IfExpressionMissingThenBlock {\n                     if_span: lo,\n-                    sub: IfExpressionMissingThenBlockSub::AddThenBlock(cond_span.shrink_to_hi()),\n+                    missing_then_block_sub: IfExpressionMissingThenBlockSub::AddThenBlock(\n+                        cond_span.shrink_to_hi(),\n+                    ),\n+                    let_else_sub,\n                 });\n                 self.mk_block_err(cond_span.shrink_to_hi())\n             }"}, {"sha": "3fba630435c71fb68067ac4f4200aa8d63d98d27", "filename": "tests/ui/let-else/accidental-if.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Flet-else%2Faccidental-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Flet-else%2Faccidental-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Faccidental-if.rs?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let x = Some(123);\n+    if let Some(y) = x else { //~ ERROR this `if` expression is missing a block\n+        return;\n+    };\n+}"}, {"sha": "5474a67aac45a6128940aaaa61d401600ab40705", "filename": "tests/ui/let-else/accidental-if.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Faccidental-if.stderr?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -0,0 +1,19 @@\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/accidental-if.rs:3:5\n+   |\n+LL |     if let Some(y) = x else {\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/accidental-if.rs:3:23\n+   |\n+LL |     if let Some(y) = x else {\n+   |                       ^\n+help: remove the `if` if you meant to write a `let...else` statement\n+  --> $DIR/accidental-if.rs:3:5\n+   |\n+LL |     if let Some(y) = x else {\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f34ccecdd45e63bb6ded49705ced491c9c5852d4", "filename": "tests/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8b77cfe5464e29b25389593ced9d080bf0dd6c8/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "patch": "@@ -37,6 +37,11 @@ help: add a block here\n    |\n LL |     if let Some(n) = opt else {\n    |                         ^\n+help: remove the `if` if you meant to write a `let...else` statement\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:5\n+   |\n+LL |     if let Some(n) = opt else {\n+   |     ^^\n \n error: this `if` expression is missing a block after the condition\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:5"}]}