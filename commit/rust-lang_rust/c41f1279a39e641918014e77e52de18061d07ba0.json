{"sha": "c41f1279a39e641918014e77e52de18061d07ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWYxMjc5YTM5ZTY0MTkxODAxNGU3N2U1MmRlMTgwNjFkMDdiYTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T13:39:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T13:39:09Z"}, "message": "Inline name classification reference calls", "tree": {"sha": "b984329a532bd701cca0bae879fe1042dea2f84e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b984329a532bd701cca0bae879fe1042dea2f84e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41f1279a39e641918014e77e52de18061d07ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41f1279a39e641918014e77e52de18061d07ba0", "html_url": "https://github.com/rust-lang/rust/commit/c41f1279a39e641918014e77e52de18061d07ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41f1279a39e641918014e77e52de18061d07ba0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "html_url": "https://github.com/rust-lang/rust/commit/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47"}], "stats": {"total": 197, "additions": 117, "deletions": 80}, "files": [{"sha": "480adb841912764a1e3bfc9dc8800a69c516efc3", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -112,8 +112,16 @@ pub(crate) fn external_docs(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced_field())?,\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.defined_or_referenced_field())?,\n+            ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n+                NameRefClass::Definition(def) => def,\n+                NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n+                    Definition::Field(field_ref)\n+                }\n+            },\n+            ast::Name(name) => match NameClass::classify(&sema, &name)? {\n+                NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                NameClass::PatFieldShorthand { local_def: _, field_ref } => Definition::Field(field_ref),\n+            },\n             _ => return None,\n         }\n     };"}, {"sha": "9cc67b13e910b81fbd0babb8cb5db909fed2fc6f", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -23,12 +23,15 @@ pub(crate) fn goto_declaration(\n     let parent = token.parent()?;\n     let def = match_ast! {\n         match parent {\n-            ast::NameRef(name_ref) => {\n-                let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n-                name_kind.referenced_local()\n+            ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n+                NameRefClass::Definition(def) => def,\n+                NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                    Definition::Local(local_ref)\n+                }\n             },\n-            ast::Name(name) => {\n-                NameClass::classify(&sema, &name)?.defined_or_referenced_local()\n+            ast::Name(name) => match NameClass::classify(&sema, &name)? {\n+                NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n             },\n             _ => return None,\n         }"}, {"sha": "55177d77e9462f6ab1efbb577b94ae32bc11d925", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -60,11 +60,17 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, Either::Right(&name_ref))\n             },\n             ast::Name(name) => {\n-                let def = NameClass::classify(&sema, &name)?.defined_or_referenced_local();\n+                let def = match NameClass::classify(&sema, &name)? {\n+                    NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                    NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n+                };\n                 try_find_trait_item_definition(sema.db, &def).or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                let def = name_class.defined_or_referenced_local();\n+                let def = match name_class {\n+                    NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                    NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n+                };\n                 def.try_to_nav(sema.db)\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))\n@@ -139,7 +145,10 @@ pub(crate) fn reference_definition(\n         |lifetime| NameRefClass::classify_lifetime(sema, lifetime),\n         |name_ref| NameRefClass::classify(sema, name_ref),\n     )?;\n-    let def = name_kind.referenced_local();\n+    let def = match name_kind {\n+        NameRefClass::Definition(def) => def,\n+        NameRefClass::FieldShorthand { local_ref, field_ref: _ } => Definition::Local(local_ref),\n+    };\n     def.try_to_nav(sema.db)\n }\n "}, {"sha": "bde0fbd176b132393c20d1890bde23e3d0bd4cf3", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -28,11 +28,19 @@ pub(crate) fn goto_implementation(\n \n     let node = sema.find_node_at_offset_with_descend(&syntax, position.offset)?;\n     let def = match &node {\n-        ast::NameLike::Name(name) => {\n-            NameClass::classify(&sema, name).map(|class| class.defined_or_referenced_local())\n-        }\n+        ast::NameLike::Name(name) => NameClass::classify(&sema, name).map(|class| match class {\n+            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                Definition::Local(local_def)\n+            }\n+        }),\n         ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced_local())\n+            NameRefClass::classify(&sema, name_ref).map(|class| match class {\n+                NameRefClass::Definition(def) => def,\n+                NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                    Definition::Local(local_ref)\n+                }\n+            })\n         }\n         ast::NameLike::Lifetime(_) => None,\n     }?;"}, {"sha": "49a06a2851722a2fb9854fefe474a1b6a1226d76", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -96,12 +96,21 @@ pub(crate) fn hover(\n         match node {\n             // we don't use NameClass::referenced_or_defined here as we do not want to resolve\n             // field pattern shorthands to their definition\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|class| class.defined_or_referenced_local()),\n-            ast::NameRef(name_ref) => {\n-                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced_field())\n-            },\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|class| match class {\n+                NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n+            }),\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|class| match class {\n+                NameRefClass::Definition(def) => def,\n+                NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n+                    Definition::Field(field_ref)\n+                }\n+            }),\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n-                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced_local()),\n+                || NameRefClass::classify_lifetime(&sema, &lifetime).and_then(|class| match class {\n+                    NameRefClass::Definition(it) => Some(it),\n+                    _ => None,\n+                }),\n                 |d| d.defined(),\n             ),\n             _ => {"}, {"sha": "6b08212c75c8b388070eeacca6fb65d485800149", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -58,7 +58,15 @@ pub(crate) fn find_all_refs(\n \n     let (def, is_literal_search) =\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n-            (NameClass::classify(sema, &name)?.defined_or_referenced_field(), true)\n+            (\n+                match NameClass::classify(sema, &name)? {\n+                    NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+                    NameClass::PatFieldShorthand { local_def: _, field_ref } => {\n+                        Definition::Field(field_ref)\n+                    }\n+                },\n+                true,\n+            )\n         } else {\n             (find_def(sema, &syntax, position.offset)?, false)\n         };\n@@ -116,17 +124,28 @@ pub(crate) fn find_def(\n     offset: TextSize,\n ) -> Option<Definition> {\n     let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n-        ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(sema, &name_ref)?.referenced_local()\n-        }\n-        ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name)?.defined_or_referenced_local()\n-        }\n+        ast::NameLike::NameRef(name_ref) => match NameRefClass::classify(sema, &name_ref)? {\n+            NameRefClass::Definition(def) => def,\n+            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                Definition::Local(local_ref)\n+            }\n+        },\n+        ast::NameLike::Name(name) => match NameClass::classify(sema, &name)? {\n+            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                Definition::Local(local_def)\n+            }\n+        },\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced_local())\n+            .and_then(|class| match class {\n+                NameRefClass::Definition(it) => Some(it),\n+                _ => None,\n+            })\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|class| class.defined_or_referenced_local())\n+                NameClass::classify_lifetime(sema, &lifetime).and_then(|class| match class {\n+                    NameClass::Definition(it) => Some(it),\n+                    _ => None,\n+                })\n             })?,\n     };\n     Some(def)"}, {"sha": "f58be6d3fd08d4da60202505ee7fced0824e0f3e", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -107,13 +107,19 @@ fn find_definition(\n         {\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n-        ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name).map(|class| class.defined_or_referenced_local())\n-        }\n+        ast::NameLike::Name(name) => NameClass::classify(sema, &name).map(|class| match class {\n+            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                Definition::Local(local_def)\n+            }\n+        }),\n         ast::NameLike::NameRef(name_ref) => {\n-            if let Some(def) =\n-                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced_local())\n-            {\n+            if let Some(def) = NameRefClass::classify(sema, &name_ref).map(|class| match class {\n+                NameRefClass::Definition(def) => def,\n+                NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                    Definition::Local(local_ref)\n+                }\n+            }) {\n                 // if the name differs from the definitions name it has to be an alias\n                 if def.name(sema.db).map_or(false, |it| it.to_string() != name_ref.text()) {\n                     bail!(\"Renaming aliases is currently unsupported\");\n@@ -124,10 +130,15 @@ fn find_definition(\n             }\n         }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced_local())\n+            .and_then(|class| match class {\n+                NameRefClass::Definition(def) => Some(def),\n+                _ => None,\n+            })\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|it| it.defined_or_referenced_field())\n+                NameClass::classify_lifetime(sema, &lifetime).and_then(|it| match it {\n+                    NameClass::Definition(it) => Some(it),\n+                    _ => None,\n+                })\n             }),\n     }\n     .ok_or_else(|| format_err!(\"No references found at position\"))?;"}, {"sha": "4f0b1f5b79055f484432bf3ae91c241203ba13fa", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -638,7 +638,12 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n     body.descendants()\n         .filter_map(ast::NameRef::cast)\n         .filter_map(|name_ref| NameRefClass::classify(&ctx.sema, &name_ref))\n-        .map(|name_kind| name_kind.referenced_local())\n+        .map(|name_kind| match name_kind {\n+            NameRefClass::Definition(def) => def,\n+            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                Definition::Local(local_ref)\n+            }\n+        })\n         .filter_map(|definition| match definition {\n             Definition::Local(local) => Some(local),\n             _ => None,"}, {"sha": "198b568ad88226942c25243c3da626ed42462c37", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41f1279a39e641918014e77e52de18061d07ba0/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c41f1279a39e641918014e77e52de18061d07ba0", "patch": "@@ -133,26 +133,6 @@ impl NameClass {\n         Some(res)\n     }\n \n-    /// `Definition` referenced or defined by this name, in case of a shorthand this will yield the field reference.\n-    pub fn defined_or_referenced_field(self) -> Definition {\n-        match self {\n-            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::PatFieldShorthand { local_def: _, field_ref } => {\n-                Definition::Field(field_ref)\n-            }\n-        }\n-    }\n-\n-    /// `Definition` referenced or defined by this name, in case of a shorthand this will yield the local definition.\n-    pub fn defined_or_referenced_local(self) -> Definition {\n-        match self {\n-            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n-                Definition::Local(local_def)\n-            }\n-        }\n-    }\n-\n     pub fn classify(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n         let _p = profile::span(\"classify_name\");\n \n@@ -194,7 +174,12 @@ impl NameClass {\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n \n-                        Some(NameClass::Definition(name_ref_class.referenced_field()))\n+                        Some(NameClass::Definition(match name_ref_class {\n+                            NameRefClass::Definition(def) => def,\n+                            NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n+                                Definition::Field(field_ref)\n+                            }\n+                        }))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                         let krate = sema.resolve_extern_crate(&extern_crate)?;\n@@ -316,26 +301,6 @@ pub enum NameRefClass {\n }\n \n impl NameRefClass {\n-    /// `Definition`, which this name refers to with a preference for the field reference in case of a field shorthand.\n-    pub fn referenced_field(self) -> Definition {\n-        match self {\n-            NameRefClass::Definition(def) => def,\n-            NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n-                Definition::Field(field_ref)\n-            }\n-        }\n-    }\n-\n-    /// `Definition`, which this name refers to with a preference for the local reference in case of a field shorthand.\n-    pub fn referenced_local(self) -> Definition {\n-        match self {\n-            NameRefClass::Definition(def) => def,\n-            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n-                Definition::Local(local_ref)\n-            }\n-        }\n-    }\n-\n     // Note: we don't have unit-tests for this rather important function.\n     // It is primarily exercised via goto definition tests in `ide`.\n     pub fn classify("}]}