{"sha": "0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMGU3M2VlZDZlZTkxNGMwYmUzZmJjMmVkMjAwNDgyYTUxYzNmYTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-07T02:43:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-07T02:43:22Z"}, "message": "syntax::deriving: indicate from which trait type errors (etc) arise\nusing the expansion info.\n\nPreviously something like\n\n    struct NotEq;\n\n    #[deriving(Eq)]\n    struct Error {\n        foo: NotEq\n    }\n\nwould just point to the `foo` field, with no mention of the\n`deriving(Eq)`. With this patch, the compiler creates a note saying \"in\nexpansion of #[deriving(Eq)]\" pointing to the Eq.", "tree": {"sha": "a78ac17f591573cf8f5dcc5c6c24efc88b9e9560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78ac17f591573cf8f5dcc5c6c24efc88b9e9560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9", "html_url": "https://github.com/rust-lang/rust/commit/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef933647ab6adf841d8323a712101f37851eff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef933647ab6adf841d8323a712101f37851eff9", "html_url": "https://github.com/rust-lang/rust/commit/3ef933647ab6adf841d8323a712101f37851eff9"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "fefc4a9bafb6957f925f8f7dd12441af6c8d3ed5", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=0c0e73eed6ee914c0be3fbc2ed200482a51c3fa9", "patch": "@@ -899,7 +899,9 @@ impl<'self> MethodDef<'self> {\n         let summary = enum_def.variants.map(|v| {\n             let ident = v.node.name;\n             let summary = match v.node.kind {\n-                ast::tuple_variant_kind(ref args) => Unnamed(args.map(|va| va.ty.span)),\n+                ast::tuple_variant_kind(ref args) => {\n+                    Unnamed(args.map(|va| trait_.set_expn_info(va.ty.span)))\n+                }\n                 ast::struct_variant_kind(struct_def) => {\n                     trait_.summarise_struct(struct_def)\n                 }\n@@ -919,11 +921,27 @@ enum StructType {\n \n // general helper methods.\n impl<'a> TraitDef<'a> {\n+    fn set_expn_info(&self, mut to_set: Span) -> Span {\n+        let trait_name = match self.path.path.last_opt() {\n+            None => self.cx.span_bug(self.span, \"trait with empty path in generic `deriving`\"),\n+            Some(name) => *name\n+        };\n+        to_set.expn_info = Some(@codemap::ExpnInfo {\n+            call_site: to_set,\n+            callee: codemap::NameAndSpan {\n+                name: format!(\"deriving({})\", trait_name).to_managed(),\n+                format: codemap::MacroAttribute,\n+                span: Some(self.span)\n+            }\n+        });\n+        to_set\n+    }\n+\n     fn summarise_struct(&self, struct_def: &struct_def) -> StaticFields {\n         let mut named_idents = ~[];\n         let mut just_spans = ~[];\n         for field in struct_def.fields.iter(){\n-            let sp = field.span;\n+            let sp = self.set_expn_info(field.span);\n             match field.node.kind {\n                 ast::named_field(ident, _) => named_idents.push((ident, sp)),\n                 ast::unnamed_field => just_spans.push(sp),\n@@ -973,7 +991,7 @@ impl<'a> TraitDef<'a> {\n         let mut struct_type = Unknown;\n \n         for (i, struct_field) in struct_def.fields.iter().enumerate() {\n-            let sp = struct_field.span;\n+            let sp = self.set_expn_info(struct_field.span);\n             let opt_id = match struct_field.node.kind {\n                 ast::named_field(ident, _) if (struct_type == Unknown ||\n                                                struct_type == Record) => {\n@@ -1031,7 +1049,7 @@ impl<'a> TraitDef<'a> {\n                 let mut paths = ~[];\n                 let mut ident_expr = ~[];\n                 for (i, va) in variant_args.iter().enumerate() {\n-                    let sp = va.ty.span;\n+                    let sp = self.set_expn_info(va.ty.span);\n                     let path = cx.path_ident(sp, cx.ident_of(format!(\"{}_{}\", prefix, i)));\n \n                     paths.push(path.clone());"}]}