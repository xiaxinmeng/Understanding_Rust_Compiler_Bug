{"sha": "c6b6f18520a54803e818d6df519d4d6401075599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjZmMTg1MjBhNTQ4MDNlODE4ZDZkZjUxOWQ0ZDY0MDEwNzU1OTk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T12:43:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T12:44:10Z"}, "message": "Simplify Semantics::type_of_expr_with_coercion", "tree": {"sha": "6ef959af065d58661cddbfeea4a281f779ff7648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef959af065d58661cddbfeea4a281f779ff7648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b6f18520a54803e818d6df519d4d6401075599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b6f18520a54803e818d6df519d4d6401075599", "html_url": "https://github.com/rust-lang/rust/commit/c6b6f18520a54803e818d6df519d4d6401075599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b6f18520a54803e818d6df519d4d6401075599/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbeacc1d34162c92b15c9e1b798cc75038012d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbeacc1d34162c92b15c9e1b798cc75038012d6", "html_url": "https://github.com/rust-lang/rust/commit/0fbeacc1d34162c92b15c9e1b798cc75038012d6"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "cc320227f8038d3676419912888febb6d2cf241c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c6b6f18520a54803e818d6df519d4d6401075599", "patch": "@@ -216,15 +216,16 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_expr(expr)\n     }\n \n-    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n+    /// Returns true in case a coercion happened.\n+    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, bool)> {\n         self.imp.type_of_expr_with_coercion(expr)\n     }\n \n     pub fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.imp.type_of_pat(pat)\n     }\n \n-    pub fn type_of_pat_with_coercion(&self, expr: &ast::Pat) -> Option<(Type, Option<Type>)> {\n+    pub fn type_of_pat_with_coercion(&self, expr: &ast::Pat) -> Option<Type> {\n         self.imp.type_of_pat_with_coercion(expr)\n     }\n \n@@ -568,15 +569,15 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n \n-    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n+    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, bool)> {\n         self.analyze(expr.syntax()).type_of_expr_with_coercion(self.db, expr)\n     }\n \n     fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.analyze(pat.syntax()).type_of_pat(self.db, pat)\n     }\n \n-    fn type_of_pat_with_coercion(&self, pat: &ast::Pat) -> Option<(Type, Option<Type>)> {\n+    fn type_of_pat_with_coercion(&self, pat: &ast::Pat) -> Option<Type> {\n         self.analyze(pat.syntax()).type_of_pat_with_coercion(self.db, pat)\n     }\n "}, {"sha": "b1792f2ab0d1d8d0d585d3c6b29a0a02e8a80323", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=c6b6f18520a54803e818d6df519d4d6401075599", "patch": "@@ -21,7 +21,7 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Interner, Substitution, Ty, TyExt, TyLoweringContext,\n+    InferenceResult, Interner, Substitution, TyExt, TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -126,15 +126,15 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         expr: &ast::Expr,\n-    ) -> Option<(Type, Option<Type>)> {\n+    ) -> Option<(Type, bool)> {\n         let expr_id = self.expr_id(db, expr)?;\n         let infer = self.infer.as_ref()?;\n-        let coerced = infer\n+        let (ty, coerced) = infer\n             .expr_adjustments\n             .get(&expr_id)\n-            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n-        let mk_ty = |ty: &Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n-        mk_ty(&infer[expr_id]).map(|ty| (ty, coerced.and_then(mk_ty)))\n+            .and_then(|adjusts| adjusts.last().map(|adjust| (&adjust.target, true)))\n+            .unwrap_or_else(|| (&infer[expr_id], false));\n+        Type::new_with_resolver(db, &self.resolver, ty.clone()).zip(Some(coerced))\n     }\n \n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n@@ -147,15 +147,15 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         pat: &ast::Pat,\n-    ) -> Option<(Type, Option<Type>)> {\n+    ) -> Option<Type> {\n         let pat_id = self.pat_id(pat)?;\n         let infer = self.infer.as_ref()?;\n-        let coerced = infer\n+        let ty = infer\n             .pat_adjustments\n             .get(&pat_id)\n-            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n-        let mk_ty = |ty: &Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n-        mk_ty(&infer[pat_id]).map(|ty| (ty, coerced.and_then(mk_ty)))\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target))\n+            .unwrap_or_else(|| &infer[pat_id]);\n+        Type::new_with_resolver(db, &self.resolver, ty.clone())\n     }\n \n     pub(crate) fn type_of_self("}, {"sha": "b1fec65ac06e8e8b349f09e57eb24494bc2f6923", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=c6b6f18520a54803e818d6df519d4d6401075599", "patch": "@@ -55,8 +55,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n \n     // Infer type\n-    let (ty, coerced) = ctx.sema.type_of_expr_with_coercion(&expr)?;\n-    let ty = coerced.unwrap_or(ty);\n+    let (ty, _) = ctx.sema.type_of_expr_with_coercion(&expr)?;\n     if ty.contains_unknown() || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;"}, {"sha": "0ecf930cb929bc912d146aa1d9be7e19f8bea7e2", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b6f18520a54803e818d6df519d4d6401075599/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=c6b6f18520a54803e818d6df519d4d6401075599", "patch": "@@ -190,7 +190,7 @@ pub(crate) fn inline_(\n                         let ty = ctx\n                             .sema\n                             .type_of_expr_with_coercion(&expr)\n-                            .map_or(false, |(_, coerced)| coerced.is_some())\n+                            .map_or(false, |(_, coerced)| coerced)\n                             .then(|| param_ty)\n                             .flatten();\n                         body.push_front("}]}