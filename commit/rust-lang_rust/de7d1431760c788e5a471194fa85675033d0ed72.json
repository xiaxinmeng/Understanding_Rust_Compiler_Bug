{"sha": "de7d1431760c788e5a471194fa85675033d0ed72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2QxNDMxNzYwYzc4OGU1YTQ3MTE5NGZhODU2NzUwMzNkMGVkNzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-05T21:44:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-07T20:00:52Z"}, "message": "Fix existing privacy/visibility violations\n\nThis commit fixes all of the fallout of the previous commit which is an attempt\nto refine privacy. There were a few unfortunate leaks which now must be plugged,\nand the most horrible one is the current `shouldnt_be_public` module now inside\n`std::rt`. I think that this either needs a slight reorganization of the\nruntime, or otherwise it needs to just wait for the external users of these\nmodules to get replaced with their `rt` implementations.\n\nOther fixes involve making things pub which should be pub, and otherwise\nupdating error messages that now reference privacy instead of referencing an\n\"unresolved name\" (yay!).", "tree": {"sha": "2ece65f6d02061b9ed83dc19a20dc2a5401374d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ece65f6d02061b9ed83dc19a20dc2a5401374d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7d1431760c788e5a471194fa85675033d0ed72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7d1431760c788e5a471194fa85675033d0ed72", "html_url": "https://github.com/rust-lang/rust/commit/de7d1431760c788e5a471194fa85675033d0ed72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7d1431760c788e5a471194fa85675033d0ed72/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439e2770be6aec41a3961235305787a78d47fbdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/439e2770be6aec41a3961235305787a78d47fbdd", "html_url": "https://github.com/rust-lang/rust/commit/439e2770be6aec41a3961235305787a78d47fbdd"}], "stats": {"total": 279, "additions": 168, "deletions": 111}, "files": [{"sha": "cbc2f08679bb6e8dd2533b2f1c7f402e573f5918", "filename": "src/libextra/container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcontainer.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -40,7 +40,7 @@ pub trait Deque<T> : Mutable {\n }\n \n #[cfg(test)]\n-mod bench {\n+pub mod bench {\n     use std::container::MutableMap;\n     use std::{vec, rand};\n     use std::rand::Rng;"}, {"sha": "f4bc87ae76392fddd14e1b93599782c5f33c719c", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -346,7 +346,7 @@ impl <T: FixedBuffer> StandardPadding for T {\n \n \n #[cfg(test)]\n-mod test {\n+pub mod test {\n     use std::rand::{IsaacRng, Rng};\n     use std::vec;\n "}, {"sha": "9ac0d73c2ecf51a800b6f9348dddd2488b97510b", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -101,7 +101,8 @@ pub trait Stats {\n \n /// Extracted collection of all the summary statistics of a sample set.\n #[deriving(Clone, Eq)]\n-struct Summary {\n+#[allow(missing_doc)]\n+pub struct Summary {\n     sum: f64,\n     min: f64,\n     max: f64,"}, {"sha": "aaaa893c3e5c32b71de4e4ee496e8dee7c125c67", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -31,8 +31,8 @@ use syntax::ast_util::id_range;\n use syntax::codemap::Span;\n use syntax::print::pprust;\n use syntax::visit;\n-use syntax::visit::Visitor;\n-use syntax::ast::{Expr, fn_kind, fn_decl, Block, NodeId, Stmt, Pat, Local};\n+use syntax::visit::{Visitor, fn_kind};\n+use syntax::ast::{Expr, fn_decl, Block, NodeId, Stmt, Pat, Local};\n \n mod lifetime;\n mod restrictions;"}, {"sha": "3de3f99020e6549cdadeb31906bd801f6b5dcb94", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -581,7 +581,7 @@ impl Datum {\n \n         if !header && !ty::type_contents(bcx.tcx(), content_ty).contains_managed() {\n             let ptr = self.to_value_llval(bcx);\n-            let ty = type_of(bcx.ccx(), content_ty);\n+            let ty = type_of::type_of(bcx.ccx(), content_ty);\n             let body = PointerCast(bcx, ptr, ty.ptr_to());\n             Datum {val: body, ty: content_ty, mode: ByRef(ZeroMem)}\n         } else { // has a header"}, {"sha": "a6cf63449990464f49beb0982969bba43b7f805a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -1026,7 +1026,7 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n                         // which may not be equal to the enum's type for\n                         // non-C-like enums.\n                         let val = base::get_item_val(bcx.ccx(), did.node);\n-                        let pty = type_of(bcx.ccx(), const_ty).ptr_to();\n+                        let pty = type_of::type_of(bcx.ccx(), const_ty).ptr_to();\n                         PointerCast(bcx, val, pty)\n                     } else {\n                         {\n@@ -1040,7 +1040,7 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n                         }\n \n                         unsafe {\n-                            let llty = type_of(bcx.ccx(), const_ty);\n+                            let llty = type_of::type_of(bcx.ccx(), const_ty);\n                             let symbol = csearch::get_symbol(\n                                 bcx.ccx().sess.cstore,\n                                 did);\n@@ -1396,7 +1396,7 @@ fn trans_unary_datum(bcx: @mut Block,\n                         heap: heap) -> DatumBlock {\n         let _icx = push_ctxt(\"trans_boxed_expr\");\n         if heap == heap_exchange {\n-            let llty = type_of(bcx.ccx(), contents_ty);\n+            let llty = type_of::type_of(bcx.ccx(), contents_ty);\n             let size = llsize_of(bcx.ccx(), llty);\n             let Result { bcx: bcx, val: val } = malloc_raw_dyn(bcx, contents_ty,\n                                                                heap_exchange, size);"}, {"sha": "0f7e1db158328eb8d43ac0dec8b3dd627befacc0", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -203,7 +203,7 @@ pub fn lazily_emit_tydesc_glue(ccx: @mut CrateContext,\n                                field: uint,\n                                ti: @mut tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n-    let llfnty = Type::glue_fn(type_of::type_of(ccx, ti.ty).ptr_to());\n+    let llfnty = Type::glue_fn(type_of(ccx, ti.ty).ptr_to());\n \n     if lazily_emit_simplified_tydesc_glue(ccx, field, ti) {\n         return;\n@@ -345,7 +345,7 @@ pub fn make_visit_glue(bcx: @mut Block, v: ValueRef, t: ty::t) -> @mut Block {\n                 bcx.tcx().sess.fatal(s);\n             }\n         };\n-        let v = PointerCast(bcx, v, type_of::type_of(bcx.ccx(), object_ty).ptr_to());\n+        let v = PointerCast(bcx, v, type_of(bcx.ccx(), object_ty).ptr_to());\n         bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, visitor_trait.def_id);\n         // The visitor is a boxed object and needs to be dropped\n         add_clean(bcx, v, object_ty);"}, {"sha": "ae8081df7bac25c66bea8739b9ea5c566870b439", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -330,8 +330,8 @@ impl CoherenceChecker {\n \n         let impl_poly_type = ty::lookup_item_type(tcx, impl_id);\n \n-        let provided = ty::provided_trait_methods(tcx, trait_ref.def_id);\n-        for trait_method in provided.iter() {\n+        let prov = ty::provided_trait_methods(tcx, trait_ref.def_id);\n+        for trait_method in prov.iter() {\n             // Synthesize an ID.\n             let new_id = tcx.sess.next_node_id();\n             let new_did = local_def(new_id);"}, {"sha": "acb8720c786b7fa37c518e9eab7e9ce04c566f1d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -126,7 +126,7 @@ enum Implementor {\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n /// to both `Send` and `Freeze` so it may be stored in a `RWArc` instance and\n /// shared among the various rendering tasks.\n-struct Cache {\n+pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to\n     /// painfully maintain a context like this)"}, {"sha": "4ab9ac4aef5f362717aad896b30f35e1cad0cf62", "filename": "src/librusti/program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -24,7 +24,7 @@ use utils::*;\n /// This structure keeps track of the state of the world for the code being\n /// executed in rusti.\n #[deriving(Clone)]\n-struct Program {\n+pub struct Program {\n     /// All known local variables\n     local_vars: HashMap<~str, LocalVariable>,\n     /// New variables which will be present (learned from typechecking)"}, {"sha": "0c515538266d5cbc3f72b13d26c13605c0964af0", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -36,10 +36,10 @@ pub mod c_double_utils {\n         pub fn exp(n: c_double) -> c_double;\n         // rename: for consistency with underscore usage elsewhere\n         #[link_name=\"expm1\"]\n-        fn exp_m1(n: c_double) -> c_double;\n+        pub fn exp_m1(n: c_double) -> c_double;\n         pub fn exp2(n: c_double) -> c_double;\n         #[link_name=\"fabs\"]\n-        fn abs(n: c_double) -> c_double;\n+        pub fn abs(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fdim\"]\n         pub fn abs_sub(a: c_double, b: c_double) -> c_double;"}, {"sha": "2269469ee23cc224404922ff8fdba2d823bbf3ae", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -335,14 +335,15 @@ mod test {\n     // newtype struct autoderef weirdness\n     #[test]\n     fn test_buffered_stream() {\n+        use rt;\n         struct S;\n \n-        impl Writer for S {\n+        impl rt::io::Writer for S {\n             fn write(&mut self, _: &[u8]) {}\n             fn flush(&mut self) {}\n         }\n \n-        impl Reader for S {\n+        impl rt::io::Reader for S {\n             fn read(&mut self, _: &mut [u8]) -> Option<uint> { None }\n             fn eof(&mut self) -> bool { true }\n         }"}, {"sha": "a18f97930fa2f65ea3fd884c76d50028d0764d0d", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -300,7 +300,8 @@ pub mod comm_adapters;\n mod extensions;\n \n /// Non-I/O things needed by the I/O module\n-mod support;\n+// XXX: shouldn this really be pub?\n+pub mod support;\n \n /// Basic Timer\n pub mod timer;"}, {"sha": "c7c4d3fc4f6256d93518dc716fd7c24acaf5051e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -67,14 +67,27 @@ use rt::local::Local;\n use rt::sched::{Scheduler, Shutdown};\n use rt::sleeper_list::SleeperList;\n use rt::task::{Task, SchedTask, GreenTask, Sched};\n-use rt::thread::Thread;\n-use rt::work_queue::WorkQueue;\n use rt::uv::uvio::UvEventLoop;\n use unstable::atomics::{AtomicInt, SeqCst};\n use unstable::sync::UnsafeArc;\n use vec;\n use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n+use self::thread::Thread;\n+use self::work_queue::WorkQueue;\n+\n+// XXX: these probably shouldn't be public...\n+#[doc(hidden)]\n+pub mod shouldnt_be_public {\n+    pub use super::sched::Scheduler;\n+    pub use super::kill::KillHandle;\n+    pub use super::thread::Thread;\n+    pub use super::work_queue::WorkQueue;\n+    pub use super::select::SelectInner;\n+    pub use super::rtio::EventLoop;\n+    pub use super::select::{SelectInner, SelectPortInner};\n+}\n+\n /// The global (exchange) heap.\n pub mod global_heap;\n "}, {"sha": "cbffec51cc96910aea8eeb2f4cf22e13bfa7cd5e", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -803,6 +803,12 @@ impl SchedHandle {\n         self.queue.push(msg);\n         self.remote.fire();\n     }\n+    pub fn send_task_from_friend(&mut self, friend: ~Task) {\n+        self.send(TaskFromFriend(friend));\n+    }\n+    pub fn send_shutdown(&mut self) {\n+        self.send(Shutdown);\n+    }\n }\n \n struct CleanupJob {"}, {"sha": "049b301144bedcea8bc05785abcf988096e6d0bb", "filename": "src/libstd/select.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -15,10 +15,8 @@ use iter::{Iterator, DoubleEndedIterator};\n use option::*;\n // use either::{Either, Left, Right};\n // use rt::kill::BlockedTask;\n-use rt::sched::Scheduler;\n-use rt::select::{SelectInner, SelectPortInner};\n use rt::local::Local;\n-use rt::rtio::EventLoop;\n+use rt::shouldnt_be_public::{EventLoop, Scheduler, SelectInner, SelectPortInner};\n use task;\n use unstable::finally::Finally;\n use vec::{OwnedVector, MutableVector};"}, {"sha": "cb45c6f78ebf5024393d482dbe477a98f61f83de", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -551,7 +551,7 @@ pub fn deschedule() {\n     //! Yield control to the task scheduler\n \n     use rt::local::Local;\n-    use rt::sched::Scheduler;\n+    use rt::shouldnt_be_public::Scheduler;\n \n     // FIXME(#7544): Optimize this, since we know we won't block.\n     let sched: ~Scheduler = Local::take();"}, {"sha": "a801bf3328db20273a6441fd323e6df0d2f57055", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -89,11 +89,8 @@ use unstable::sync::Exclusive;\n use rt::in_green_task_context;\n use rt::local::Local;\n use rt::task::{Task, Sched};\n-use rt::kill::KillHandle;\n-use rt::sched::Scheduler;\n+use rt::shouldnt_be_public::{Scheduler, KillHandle, WorkQueue, Thread};\n use rt::uv::uvio::UvEventLoop;\n-use rt::thread::Thread;\n-use rt::work_queue::WorkQueue;\n \n #[cfg(test)] use task::default_task_opts;\n #[cfg(test)] use comm;\n@@ -556,8 +553,6 @@ fn enlist_many(child: &KillHandle, child_arc: &TaskGroupArc,\n }\n \n pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n-    use rt::sched::*;\n-\n     rtassert!(in_green_task_context());\n \n     let child_data = Cell::new(gen_child_taskgroup(opts.linked, opts.supervised));\n@@ -622,7 +617,7 @@ pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n             let mut new_sched_handle = new_sched.make_handle();\n \n             // Allow the scheduler to exit when the pinned task exits\n-            new_sched_handle.send(Shutdown);\n+            new_sched_handle.send_shutdown();\n \n             // Pin the new task to the new scheduler\n             let new_task = if opts.watched {\n@@ -660,7 +655,7 @@ pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n                 rtdebug!(\"enqueing join_task\");\n                 // Now tell the original scheduler to join with this thread\n                 // by scheduling a thread-joining task on the original scheduler\n-                orig_sched_handle.send(TaskFromFriend(join_task));\n+                orig_sched_handle.send_task_from_friend(join_task);\n \n                 // NB: We can't simply send a message from here to another task\n                 // because this code isn't running in a task and message passing doesn't"}, {"sha": "0e281f33e2a3d317836ff5a107e78b1ec6dcbe9a", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -38,7 +38,7 @@ a normal large stack.\n */\n pub fn run_in_bare_thread(f: ~fn()) {\n     use cell::Cell;\n-    use rt::thread::Thread;\n+    use rt::shouldnt_be_public::Thread;\n \n     let f_cell = Cell::new(f);\n     let (port, chan) = comm::stream();"}, {"sha": "44cfdb860576b27ea7b7673d1fa3e0aa774b3ad2", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -90,10 +90,10 @@ mod tests {\n     use super::*;\n \n     use clone::Clone;\n+    use ops::Drop;\n     use option::{None, Some};\n     use either::{Either, Left, Right};\n     use sys::size_of;\n-    use kinds::Drop;\n \n     #[test]\n     fn identity_crisis() {"}, {"sha": "d9e24e045ffd27e46fab6177d6d9f3d7cff0199a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -964,7 +964,7 @@ mod test {\n     use super::*;\n     use std::io;\n     use opt_vec;\n-    use std::hash::HashMap;\n+    use std::hashmap::HashMap;\n \n     fn ident_to_segment(id : &Ident) -> PathSegment {\n         PathSegment{identifier:id.clone(), lifetime: None, types: opt_vec::Empty}"}, {"sha": "1039ec078049ffea139cb9f2f0982d7cd5964de2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -1551,7 +1551,8 @@ mod test {\n         let varrefs = @mut ~[];\n         visit::walk_crate(&mut new_path_finder(varrefs), &renamed_ast, ());\n         match varrefs {\n-            @[Path{segments:[ref seg],_}] => assert_eq!(mtwt_resolve(seg.identifier),a2_name),\n+            @[ast::Path{segments:[ref seg],_}] =>\n+                assert_eq!(mtwt_resolve(seg.identifier),a2_name),\n             _ => assert_eq!(0,1)\n         }\n \n@@ -1565,7 +1566,8 @@ mod test {\n         let varrefs = @mut ~[];\n         visit::walk_crate(&mut new_path_finder(varrefs), &double_renamed, ());\n         match varrefs {\n-            @[Path{segments:[ref seg],_}] => assert_eq!(mtwt_resolve(seg.identifier),a3_name),\n+            @[ast::Path{segments:[ref seg],_}] =>\n+                assert_eq!(mtwt_resolve(seg.identifier),a3_name),\n             _ => assert_eq!(0,1)\n         }\n     }"}, {"sha": "3877250126d34e2fa028bfef3ca958852293a950", "filename": "src/test/compile-fail/export-import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-import.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: import\n-\n use m::unexported;\n+//~^ ERROR: is private\n \n mod m {\n     pub fn exported() { }"}, {"sha": "d92cd20485083fdb4fa6d278c88570d50c855422", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name\n-\n mod foo {\n     pub fn x() { }\n \n     enum y { y1, }\n }\n \n-fn main() { let z = foo::y1; }\n+fn main() { let z = foo::y1; } //~ ERROR: is private"}, {"sha": "61980abdfe7af882486be4e7f9a338485883ceac", "filename": "src/test/compile-fail/issue-3993-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::{duck, goose}; //~ ERROR failed to resolve import\n-                        //~^ ERROR unresolved import: found `goose` in `zoo` but it is private\n+use zoo::{duck, goose}; //~ ERROR: variant `goose` is private\n \n mod zoo {\n     pub enum bird {\n-        pub duck,\n+        pub duck, //~ ERROR: unnecessary `pub` visibility\n         priv goose\n     }\n }"}, {"sha": "fae5eb51272374b280988cdfcffee58076de906c", "filename": "src/test/compile-fail/issue-3993-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3993-3.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::fly; //~ ERROR failed to resolve import\n-              //~^ ERROR unresolved import: found `fly` in `zoo` but it is private\n+use zoo::fly; //~ ERROR: function `fly` is private\n \n mod zoo {\n-    type fly = ();\n     fn fly() {}\n }\n \n \n-fn main() {}\n+fn main() {\n+    fly();\n+}"}, {"sha": "fae5eb51272374b280988cdfcffee58076de906c", "filename": "src/test/compile-fail/issue-3993.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-3993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3993.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::fly; //~ ERROR failed to resolve import\n-              //~^ ERROR unresolved import: found `fly` in `zoo` but it is private\n+use zoo::fly; //~ ERROR: function `fly` is private\n \n mod zoo {\n     fn fly() {}\n }\n \n \n-fn main() {}\n+fn main() {\n+    fly();\n+}"}, {"sha": "4530267f35ff9175c91083ab2ed063408449635a", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// ensures that 'use foo:*' doesn't import non-public item\n+\n+use m1::*;\n+\n+mod foo {\n+    pub fn foo() {}\n+}\n+mod a {\n+    pub mod b {\n+        use foo::foo;\n+        type bar = int;\n+    }\n+    pub mod sub {\n+        use a::b::*;\n+        fn sub() -> bar { 1 }\n+        //~^ ERROR: undeclared type name\n+    }\n+}\n+\n+mod m1 {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    foo(); //~ ERROR: unresolved name\n+}\n+"}, {"sha": "e9c1092a4a55922cf8085dd5ebae446789ba0aec", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -27,15 +27,12 @@ mod a {\n     }\n     pub mod sub {\n         use a::b::*;\n-        fn sub() -> bar { foo(); 1 } //~ ERROR: unresolved name `foo`\n-        //~^ ERROR: use of undeclared type name `bar`\n+        fn sub() -> int { foo(); 1 } //~ ERROR: unresolved name `foo`\n     }\n }\n \n mod m1 {\n     fn foo() {}\n }\n \n-fn main() {\n-    foo(); //~ ERROR: unresolved name `foo`\n-}\n+fn main() {}"}, {"sha": "e87d57aaa5623cd3beaa1a6b852f5b3b9acaca69", "filename": "src/test/compile-fail/macro-local-data-key-priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fmacro-local-data-key-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fmacro-local-data-key-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-local-data-key-priv.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -18,5 +18,5 @@ mod bar {\n \n fn main() {\n     local_data::set(bar::baz, -10.0);\n-    //~^ ERROR unresolved name `bar::baz`\n+    //~^ ERROR static `baz` is private\n }"}, {"sha": "2b9e32b8f58607d460932978bfe62682828fe251", "filename": "src/test/compile-fail/private-item-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -13,5 +13,5 @@ mod a {\n }\n \n fn main() {\n-    a::f(); //~ ERROR unresolved name\n+    a::f(); //~ ERROR function `f` is private\n }"}, {"sha": "d63d04c90ccca85534cd29e993feaf6ee2ae220e", "filename": "src/test/compile-fail/private-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -17,5 +17,5 @@ mod a {\n }\n \n fn main() {\n-    let x = a::Liege;   //~ ERROR unresolved name\n+    let x = a::Liege;   //~ ERROR variant `Liege` is private\n }"}, {"sha": "f447a6c547c7bb7774eac47bd271d24b83134f31", "filename": "src/test/compile-fail/static-priv-by-default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -24,15 +24,15 @@ mod child {\n fn foo(_: int) {}\n \n fn full_ref() {\n-    foo(static_priv_by_default::private); //~ ERROR: unresolved name\n+    foo(static_priv_by_default::private); //~ ERROR: static `private` is private\n     foo(static_priv_by_default::public);\n-    foo(child::childs_child::private); //~ ERROR: unresolved name\n+    foo(child::childs_child::private); //~ ERROR: static `private` is private\n     foo(child::childs_child::public);\n }\n \n fn medium_ref() {\n     use child::childs_child;\n-    foo(childs_child::private); //~ ERROR: unresolved name\n+    foo(childs_child::private); //~ ERROR: static `private` is private\n     foo(childs_child::public);\n }\n "}, {"sha": "423d182dd69202aca3ee8c21d71ce01049477e7e", "filename": "src/test/compile-fail/static-priv-by-default2.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -19,11 +19,22 @@ mod child {\n     }\n }\n \n-fn main() {\n-    use static_priv_by_default::private; //~ ERROR: unresolved import\n-    //~^ ERROR: failed to resolve\n-    use static_priv_by_default::public;\n-    use child::childs_child::private; //~ ERROR: unresolved import\n-    //~^ ERROR: failed to resolve\n+fn foo<T>(_: T) {}\n+\n+fn test1() {\n+    use child::childs_child::private;\n+    //~^ ERROR: static `private` is private\n     use child::childs_child::public;\n+\n+    foo(private);\n+}\n+\n+fn test2() {\n+    use static_priv_by_default::private;\n+    //~^ ERROR: static `private` is private\n+    use static_priv_by_default::public;\n+\n+    foo(private);\n }\n+\n+fn main() {}"}, {"sha": "a0a411ec9b03ce4388b46e4c6332b10e9f603cb3", "filename": "src/test/compile-fail/xc-private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -15,8 +15,8 @@ extern mod xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct::static_meth_struct();\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: method `static_meth_struct` is private\n \n     let _ = xc_private_method_lib::Enum::static_meth_enum();\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: method `static_meth_enum` is private\n }"}, {"sha": "ca1221e7432f571381361fd3e4c218e250e2f332", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -10,15 +10,14 @@\n \n // aux-build:static_priv_by_default.rs\n \n-#[allow(unused_imports)];\n-#[no_std];\n+#[no_std]; // helps if debugging resolve\n \n extern mod static_priv_by_default;\n \n fn foo<T>() {}\n \n #[start]\n-fn main(_: int, _: **u8, _: *u8) -> int {\n+fn main(_: int, _: **u8) -> int {\n     // Actual public items should be public\n     static_priv_by_default::a;\n     static_priv_by_default::b;\n@@ -33,25 +32,23 @@ fn main(_: int, _: **u8, _: *u8) -> int {\n \n     // private items at the top should be inaccessible\n     static_priv_by_default::i;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: static `i` is private\n     static_priv_by_default::j;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: function `j` is private\n     static_priv_by_default::k;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: struct `k` is private\n     foo::<static_priv_by_default::l>();\n-    //~^ ERROR: use of undeclared type name\n-    //~^^ ERROR: use of undeclared type name\n+    //~^ ERROR: type `l` is private\n \n     // public items in a private mod should be inaccessible\n     static_priv_by_default::foo::a;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: static `a` is private\n     static_priv_by_default::foo::b;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: function `b` is private\n     static_priv_by_default::foo::c;\n-    //~^ ERROR: unresolved name\n+    //~^ ERROR: struct `c` is private\n     foo::<static_priv_by_default::foo::d>();\n-    //~^ ERROR: use of undeclared type name\n-    //~^^ ERROR: use of undeclared type name\n+    //~^ ERROR: type `d` is private\n \n     3\n }"}, {"sha": "8fdc9c563156d27ba4fe8e9d40453e5cf11d4ab4", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod foo {\n-    mod bar {\n+    pub mod bar {\n         pub fn y() { super::super::foo::x(); }\n     }\n "}, {"sha": "e8a9d666dcc0c2765236518fab87278789abfb15", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -17,7 +17,7 @@ mod rustrt1 {\n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     extern {\n-        fn rust_get_test_int() -> libc::intptr_t;\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n \n@@ -27,7 +27,7 @@ mod rustrt2 {\n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     extern {\n-        fn rust_get_test_int() -> libc::intptr_t;\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n "}, {"sha": "6a7ee7101efcf1beb5c975ed2471810c1473a555", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -14,7 +14,7 @@ mod rustrt {\n     use std::libc;\n \n     extern {\n-        fn rust_get_test_int() -> libc::intptr_t;\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n "}, {"sha": "53c9ed631417cb7e5c1d3b36e60c199e94b46517", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -11,7 +11,7 @@\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n-        fn uninit<T>() -> T;\n+        pub fn uninit<T>() -> T;\n     }\n }\n pub fn main() {"}, {"sha": "2ca71866db8e0d4a15d4412656ec07a00e69c888", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -17,24 +17,24 @@ extern mod extra;\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {\n-        fn ctpop8(x: i8) -> i8;\n-        fn ctpop16(x: i16) -> i16;\n-        fn ctpop32(x: i32) -> i32;\n-        fn ctpop64(x: i64) -> i64;\n-\n-        fn ctlz8(x: i8) -> i8;\n-        fn ctlz16(x: i16) -> i16;\n-        fn ctlz32(x: i32) -> i32;\n-        fn ctlz64(x: i64) -> i64;\n-\n-        fn cttz8(x: i8) -> i8;\n-        fn cttz16(x: i16) -> i16;\n-        fn cttz32(x: i32) -> i32;\n-        fn cttz64(x: i64) -> i64;\n-\n-        fn bswap16(x: i16) -> i16;\n-        fn bswap32(x: i32) -> i32;\n-        fn bswap64(x: i64) -> i64;\n+        pub fn ctpop8(x: i8) -> i8;\n+        pub fn ctpop16(x: i16) -> i16;\n+        pub fn ctpop32(x: i32) -> i32;\n+        pub fn ctpop64(x: i64) -> i64;\n+\n+        pub fn ctlz8(x: i8) -> i8;\n+        pub fn ctlz16(x: i16) -> i16;\n+        pub fn ctlz32(x: i32) -> i32;\n+        pub fn ctlz64(x: i64) -> i64;\n+\n+        pub fn cttz8(x: i8) -> i8;\n+        pub fn cttz16(x: i16) -> i16;\n+        pub fn cttz32(x: i32) -> i32;\n+        pub fn cttz64(x: i64) -> i64;\n+\n+        pub fn bswap16(x: i16) -> i16;\n+        pub fn bswap32(x: i32) -> i32;\n+        pub fn bswap64(x: i64) -> i64;\n     }\n }\n "}, {"sha": "c11b1e8c074695e5db7913f6542571cecf40cd00", "filename": "src/test/run-pass/mod_dir_simple/load_another_mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_dir_simple%2Fload_another_mod.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod test;\n+pub mod test;"}, {"sha": "e833f67b51edc1561697b7044a14d94d72a214b1", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7d1431760c788e5a471194fa85675033d0ed72/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=de7d1431760c788e5a471194fa85675033d0ed72", "patch": "@@ -46,7 +46,7 @@ mod m {\n     }\n \n     #[cfg(target_arch = \"x86_64\")]\n-    mod m {\n+    pub mod m {\n         pub fn align() -> uint { 8u }\n         pub fn size() -> uint { 16u }\n     }"}]}