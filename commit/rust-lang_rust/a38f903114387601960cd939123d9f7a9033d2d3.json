{"sha": "a38f903114387601960cd939123d9f7a9033d2d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOGY5MDMxMTQzODc2MDE5NjBjZDkzOTEyM2Q5ZjdhOTAzM2QyZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-11T17:28:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:57:03Z"}, "message": "Fix ICEs from imports of items not defined in modules", "tree": {"sha": "ccf9294311b615e11fe0bef1e7a13f81cac037ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf9294311b615e11fe0bef1e7a13f81cac037ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38f903114387601960cd939123d9f7a9033d2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f903114387601960cd939123d9f7a9033d2d3", "html_url": "https://github.com/rust-lang/rust/commit/a38f903114387601960cd939123d9f7a9033d2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38f903114387601960cd939123d9f7a9033d2d3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd762954bd2410d57950045bf5009769ac4947f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd762954bd2410d57950045bf5009769ac4947f", "html_url": "https://github.com/rust-lang/rust/commit/cfd762954bd2410d57950045bf5009769ac4947f"}], "stats": {"total": 229, "additions": 197, "deletions": 32}, "files": [{"sha": "50922ee601daf32d7dbfda2f391624cb08617020", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -261,27 +261,33 @@ impl NonMacroAttrKind {\n \n impl Def {\n     pub fn def_id(&self) -> DefId {\n+        self.opt_def_id().unwrap_or_else(|| {\n+            bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n+        })\n+    }\n+\n+    pub fn opt_def_id(&self) -> Option<DefId> {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) | Def::AssociatedExistential(id) | Def::ForeignTy(id) |\n-            Def::SelfCtor(id) => {\n-                id\n+            Def::Existential(id) | Def::AssociatedExistential(id) | Def::ForeignTy(id) => {\n+                Some(id)\n             }\n \n             Def::Local(..) |\n             Def::Upvar(..) |\n             Def::Label(..)  |\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |\n+            Def::SelfCtor(..) |\n             Def::ToolMod |\n             Def::NonMacroAttr(..) |\n             Def::Err => {\n-                bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n+                None\n             }\n         }\n     }"}, {"sha": "282b5d13e2c61067601c6705f7b62d1a7b4b042c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 self.check_def_id(def.def_id());\n             }\n             _ if self.in_pat => (),\n-            Def::PrimTy(..) | Def::SelfTy(..) |\n+            Def::PrimTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 if let Some(enum_id) = self.tcx.parent_def_id(variant_id) {"}, {"sha": "543d1053b55e60787b613258de7b13bcdf781398", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -781,10 +781,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n \n     fn visit_path(&mut self, path: &'tcx hir::Path, id: hir::HirId) {\n         let id = self.tcx.hir.hir_to_node_id(id);\n-        match path.def {\n-            Def::Local(..) | Def::Upvar(..) | Def::SelfCtor(..) |\n-            Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n-            _ => self.tcx.check_stability(path.def.def_id(), Some(id), path.span)\n+        if let Some(def_id) = path.def.opt_def_id() {\n+            self.tcx.check_stability(def_id, Some(id), path.span)\n         }\n         intravisit::walk_path(self, path)\n     }"}, {"sha": "5f8c7daea6e9bbc13024836076bf9449ec362da1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -361,9 +361,11 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             let def_id = self.tcx.hir.local_def_id(id);\n             if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n-                    if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n-                        if export.vis == ty::Visibility::Public {\n-                            self.update(node_id, Some(AccessLevel::Exported));\n+                    if export.vis == ty::Visibility::Public {\n+                        if let Some(def_id) = export.def.opt_def_id() {\n+                            if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n+                                self.update(node_id, Some(AccessLevel::Exported));\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "600bbbbf5d4dd70391a8d0d401eec67bf6f0e90d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         let binding = self.arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Def(Def::Macro(def_id, kind), false),\n             span: DUMMY_SP,\n-            vis: ty::Visibility::Invisible,\n+            vis: ty::Visibility::Public,\n             expansion: Mark::root(),\n         });\n         if self.builtin_macros.insert(ident.name, binding).is_some() {"}, {"sha": "68657fedb42a81a709d234895c9c275121899293", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -1081,8 +1081,18 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other.\n         self.per_ns(|this, ns| if let Some(binding) = result[ns].get().ok() {\n+            let mut def = binding.def();\n+            if let Def::Macro(def_id, _) = def {\n+                // `DefId`s from the \"built-in macro crate\" should not leak from resolve because\n+                // later stages are not ready to deal with them and produce lots of ICEs. Replace\n+                // them with `Def::Err` until some saner scheme is implemented for built-in macros.\n+                if def_id.krate == CrateNum::BuiltinMacros {\n+                    this.session.span_err(directive.span, \"cannot import a built-in macro\");\n+                    def = Def::Err;\n+                }\n+            }\n             let import = this.import_map.entry(directive.id).or_default();\n-            import[ns] = Some(PathResolution::new(binding.def()));\n+            import[ns] = Some(PathResolution::new(def));\n         });\n \n         debug!(\"(resolving single import) successfully resolved import\");\n@@ -1154,9 +1164,10 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             if binding.is_import() || binding.is_macro_def() {\n                 let def = binding.def();\n                 if def != Def::Err {\n-                    let def_id = def.def_id();\n-                    if !def_id.is_local() && def_id.krate != CrateNum::BuiltinMacros {\n-                        self.cstore.export_macros_untracked(def_id.krate);\n+                    if let Some(def_id) = def.opt_def_id() {\n+                        if !def_id.is_local() && def_id.krate != CrateNum::BuiltinMacros {\n+                            self.cstore.export_macros_untracked(def_id.krate);\n+                        }\n                     }\n                     reexports.push(Export {\n                         ident: ident.modern(),"}, {"sha": "92541afc0c1cec9af69415a07980ce4e973e4920", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -13,7 +13,7 @@\n // Tests that arbitrary crates (other than `core`, `std` and `meta`)\n // aren't allowed without `--extern`, even if they're in the sysroot.\n use alloc; //~ ERROR unresolved import `alloc`\n-use test; //~ ERROR unresolved import `test`\n-use proc_macro; //~ ERROR unresolved import `proc_macro`\n+use test; //~ ERROR cannot import a built-in macro\n+use proc_macro; // OK, imports the built-in `proc_macro` attribute, but not the `proc_macro` crate.\n \n fn main() {}"}, {"sha": "e70a359b5752baf1d149ade04e4146054afb5d8a", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -1,21 +1,15 @@\n+error: cannot import a built-in macro\n+  --> $DIR/not-whitelisted.rs:16:5\n+   |\n+LL | use test; //~ ERROR cannot import a built-in macro\n+   |     ^^^^\n+\n error[E0432]: unresolved import `alloc`\n   --> $DIR/not-whitelisted.rs:15:5\n    |\n LL | use alloc; //~ ERROR unresolved import `alloc`\n    |     ^^^^^ no `alloc` external crate\n \n-error[E0432]: unresolved import `test`\n-  --> $DIR/not-whitelisted.rs:16:5\n-   |\n-LL | use test; //~ ERROR unresolved import `test`\n-   |     ^^^^ no `test` external crate\n-\n-error[E0432]: unresolved import `proc_macro`\n-  --> $DIR/not-whitelisted.rs:17:5\n-   |\n-LL | use proc_macro; //~ ERROR unresolved import `proc_macro`\n-   |     ^^^^^^^^^^ no `proc_macro` external crate\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "1f722228e7da296c88dea06e79712db3e38a10dd", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -0,0 +1,44 @@\n+// edition:2018\n+\n+// For the time being `macro_rules` items are treated as *very* private...\n+\n+#![feature(underscore_imports, decl_macro)]\n+\n+mod m1 {\n+    macro_rules! legacy_macro { () => () }\n+\n+    // ... so they can't be imported by themselves, ...\n+    use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+}\n+\n+mod m2 {\n+    macro_rules! legacy_macro { () => () }\n+\n+    type legacy_macro = u8;\n+\n+    // ... but don't prevent names from other namespaces from being imported, ...\n+    use legacy_macro as _; // OK\n+}\n+\n+mod m3 {\n+    macro legacy_macro() {}\n+\n+    fn f() {\n+        macro_rules! legacy_macro { () => () }\n+\n+        // ... but still create ambiguities with other names in the same namespace.\n+        use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n+                               //~| ERROR `legacy_macro` is private, and cannot be re-exported\n+    }\n+}\n+\n+mod exported {\n+    // Exported macros are treated as private as well,\n+    // some better rules need to be figured out later.\n+    #[macro_export]\n+    macro_rules! legacy_macro { () => () }\n+\n+    use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+}\n+\n+fn main() {}"}, {"sha": "d7bb233dfe99e507746e8ac5488ee57229485a3e", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -0,0 +1,58 @@\n+error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+  --> $DIR/macro-rules.rs:11:9\n+   |\n+LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+note: consider marking `legacy_macro` as `pub` in the imported module\n+  --> $DIR/macro-rules.rs:11:9\n+   |\n+LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+  --> $DIR/macro-rules.rs:30:13\n+   |\n+LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+note: consider marking `legacy_macro` as `pub` in the imported module\n+  --> $DIR/macro-rules.rs:30:13\n+   |\n+LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+  --> $DIR/macro-rules.rs:41:9\n+   |\n+LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+note: consider marking `legacy_macro` as `pub` in the imported module\n+  --> $DIR/macro-rules.rs:41:9\n+   |\n+LL |     use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error[E0659]: `legacy_macro` is ambiguous (name vs any other name during import resolution)\n+  --> $DIR/macro-rules.rs:30:13\n+   |\n+LL |         use legacy_macro as _; //~ ERROR `legacy_macro` is ambiguous\n+   |             ^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `legacy_macro` could refer to the macro defined here\n+  --> $DIR/macro-rules.rs:27:9\n+   |\n+LL |         macro_rules! legacy_macro { () => () }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `legacy_macro` could also refer to the macro defined here\n+  --> $DIR/macro-rules.rs:24:5\n+   |\n+LL |     macro legacy_macro() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `self::legacy_macro` to refer to this macro unambiguously\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0364, E0659.\n+For more information about an error, try `rustc --explain E0364`."}, {"sha": "d717884c901b3e6efd658fc8035c3128b7a72331", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+// Built-in macro\n+use env as env_imported; //~ ERROR cannot import a built-in macro\n+\n+// Tool attribute\n+use rustfmt::skip as imported_rustfmt_skip; //~ ERROR unresolved import `rustfmt`\n+\n+fn main() {\n+    env_imported!(\"PATH\");\n+}"}, {"sha": "0ce856c3a31570aeda48244c8154b065c030ff81", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -0,0 +1,15 @@\n+error: cannot import a built-in macro\n+  --> $DIR/prelude-fail.rs:4:5\n+   |\n+LL | use env as env_imported; //~ ERROR cannot import a built-in macro\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0432]: unresolved import `rustfmt`\n+  --> $DIR/prelude-fail.rs:7:5\n+   |\n+LL | use rustfmt::skip as imported_rustfmt_skip; //~ ERROR unresolved import `rustfmt`\n+   |     ^^^^^^^ Not a module `rustfmt`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "ea2dfbb58ce61dc4d72599a99a2846cf595b6215", "filename": "src/test/ui/rust-2018/uniform-paths/prelude.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f903114387601960cd939123d9f7a9033d2d3/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs?ref=a38f903114387601960cd939123d9f7a9033d2d3", "patch": "@@ -0,0 +1,26 @@\n+// compile-pass\n+// edition:2018\n+\n+// Macro imported with `#[macro_use] extern crate`\n+use vec as imported_vec;\n+\n+// Built-in attribute\n+use inline as imported_inline;\n+\n+// Tool module\n+use rustfmt as imported_rustfmt;\n+\n+// Standard library prelude\n+use Vec as ImportedVec;\n+\n+// Built-in type\n+use u8 as imported_u8;\n+\n+type A = imported_u8;\n+\n+#[imported_inline]\n+#[imported_rustfmt::skip]\n+fn main() {\n+    imported_vec![0];\n+    ImportedVec::<u8>::new();\n+}"}]}