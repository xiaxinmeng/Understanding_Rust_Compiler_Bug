{"sha": "e3cff797a7dcc2358b37c170dc9d83d34d118725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2ZmNzk3YTdkY2MyMzU4YjM3YzE3MGRjOWQ4M2QzNGQxMTg3MjU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-30T18:41:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-31T15:42:47Z"}, "message": "normalize types in MIR typeck after erasing regions", "tree": {"sha": "587899ebc45980b541544d51c9b8326294794f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587899ebc45980b541544d51c9b8326294794f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3cff797a7dcc2358b37c170dc9d83d34d118725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cff797a7dcc2358b37c170dc9d83d34d118725", "html_url": "https://github.com/rust-lang/rust/commit/e3cff797a7dcc2358b37c170dc9d83d34d118725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3cff797a7dcc2358b37c170dc9d83d34d118725/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bfa313ecf557b9684568f6a2acd42cd67cc1bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bfa313ecf557b9684568f6a2acd42cd67cc1bc", "html_url": "https://github.com/rust-lang/rust/commit/f3bfa313ecf557b9684568f6a2acd42cd67cc1bc"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "80c56a5dc08f15a0407f4d0d97bf5d352e731102", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e3cff797a7dcc2358b37c170dc9d83d34d118725/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cff797a7dcc2358b37c170dc9d83d34d118725/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=e3cff797a7dcc2358b37c170dc9d83d34d118725", "patch": "@@ -118,10 +118,6 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.cx.infcx.tcx\n     }\n \n-    fn infcx(&self) -> &'a InferCtxt<'a, 'gcx, 'tcx> {\n-        self.cx.infcx\n-    }\n-\n     fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if ty.needs_infer() || ty.has_escaping_regions() || ty.references_error() {\n             span_mirbug_and_err!(self, parent, \"bad type {:?}\", ty)\n@@ -292,30 +288,11 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         };\n \n         if let Some(field) = variant.fields.get(field.index()) {\n-            Ok(self.normalize(field.ty(tcx, substs)))\n+            Ok(self.cx.normalize(&field.ty(tcx, substs)))\n         } else {\n             Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n         }\n     }\n-\n-    fn normalize(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let infcx = self.infcx();\n-        let mut selcx = traits::SelectionContext::new(infcx);\n-        let cause = traits::ObligationCause::misc(self.last_span, 0);\n-        let traits::Normalized { value: ty, obligations } =\n-            traits::normalize(&mut selcx, cause, &ty);\n-\n-        debug!(\"normalize: ty={:?} obligations={:?}\",\n-               ty,\n-               obligations);\n-\n-        let mut fulfill_cx = &mut self.cx.fulfillment_cx;\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(infcx, obligation);\n-        }\n-\n-        ty\n-    }\n }\n \n pub struct TypeChecker<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n@@ -373,7 +350,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_terminator(&self,\n+    fn check_terminator(&mut self,\n                         mir: &Mir<'tcx>,\n                         term: &Terminator<'tcx>) {\n         debug!(\"check_terminator: {:?}\", term);\n@@ -431,6 +408,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }\n                 };\n                 let sig = tcx.erase_late_bound_regions(&func_ty.sig);\n+                let sig = self.normalize(&sig);\n                 self.check_call_dest(mir, term, &sig, destination);\n \n                 if self.is_box_free(func) {\n@@ -558,6 +536,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+\n+    fn normalize<T>(&mut self, value: &T) -> T\n+        where T: fmt::Debug + TypeFoldable<'tcx>\n+    {\n+        let mut selcx = traits::SelectionContext::new(self.infcx);\n+        let cause = traits::ObligationCause::misc(self.last_span, 0);\n+        let traits::Normalized { value, obligations } =\n+            traits::normalize(&mut selcx, cause, value);\n+\n+        debug!(\"normalize: value={:?} obligations={:?}\",\n+               value,\n+               obligations);\n+\n+        let mut fulfill_cx = &mut self.fulfillment_cx;\n+        for obligation in obligations {\n+            fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n+        }\n+\n+        value\n+    }\n+\n     fn verify_obligations(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         if let Err(e) = self.fulfillment_cx.select_all_or_error(self.infcx) {"}, {"sha": "08401c275a52cff5dbbba98d714feae9e86a67de", "filename": "src/test/run-pass/mir_call_with_associated_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e3cff797a7dcc2358b37c170dc9d83d34d118725/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cff797a7dcc2358b37c170dc9d83d34d118725/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs?ref=e3cff797a7dcc2358b37c170dc9d83d34d118725", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+impl<'a> Trait for &'a () {\n+    type Type = u32;\n+}\n+\n+#[rustc_mir]\n+fn foo<'a>(t: <&'a () as Trait>::Type) -> <&'a () as Trait>::Type {\n+    t\n+}\n+\n+#[rustc_mir]\n+fn main() {\n+    assert_eq!(foo(4), 4);\n+}"}]}