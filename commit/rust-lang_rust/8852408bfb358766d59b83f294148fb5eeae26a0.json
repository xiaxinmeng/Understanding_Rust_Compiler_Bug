{"sha": "8852408bfb358766d59b83f294148fb5eeae26a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTI0MDhiZmIzNTg3NjZkNTliODNmMjk0MTQ4ZmI1ZWVhZTI2YTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T19:47:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T21:51:34Z"}, "message": "use arena for sysroot", "tree": {"sha": "1bca8af9f6ac8f668d8ca5a710b6677c6b90e921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bca8af9f6ac8f668d8ca5a710b6677c6b90e921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8852408bfb358766d59b83f294148fb5eeae26a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8852408bfb358766d59b83f294148fb5eeae26a0", "html_url": "https://github.com/rust-lang/rust/commit/8852408bfb358766d59b83f294148fb5eeae26a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8852408bfb358766d59b83f294148fb5eeae26a0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66fba88534039ff42a230f1ede3e0a730f61ad3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fba88534039ff42a230f1ede3e0a730f61ad3c", "html_url": "https://github.com/rust-lang/rust/commit/66fba88534039ff42a230f1ede3e0a730f61ad3c"}], "stats": {"total": 140, "additions": 90, "deletions": 50}, "files": [{"sha": "d7d5d5265c575dce3f9f7ec2cacf435d4b97d920", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8852408bfb358766d59b83f294148fb5eeae26a0/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8852408bfb358766d59b83f294148fb5eeae26a0/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=8852408bfb358766d59b83f294148fb5eeae26a0", "patch": "@@ -35,12 +35,21 @@ impl fmt::Display for RawId {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct Arena<ID: ArenaId, T> {\n     data: Vec<T>,\n     _ty: PhantomData<ID>,\n }\n \n+impl<ID: ArenaId, T: fmt::Debug> fmt::Debug for Arena<ID, T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.debug_struct(\"Arena\")\n+            .field(\"len\", &self.len())\n+            .field(\"data\", &self.data)\n+            .finish()\n+    }\n+}\n+\n #[macro_export]\n macro_rules! impl_arena_id {\n     ($name:ident) => {"}, {"sha": "6c1a1a2a392c40be60640b4b886186b37f2d5b30", "filename": "crates/ra_lsp_server/src/project_model/sysroot.rs", "status": "modified", "additions": 80, "deletions": 49, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/8852408bfb358766d59b83f294148fb5eeae26a0/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8852408bfb358766d59b83f294148fb5eeae26a0/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs?ref=8852408bfb358766d59b83f294148fb5eeae26a0", "patch": "@@ -4,13 +4,24 @@ use std::{\n };\n \n use ra_syntax::SmolStr;\n-use rustc_hash::FxHashMap;\n+use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::Result;\n \n #[derive(Debug, Clone)]\n pub struct Sysroot {\n-    crates: FxHashMap<SmolStr, PathBuf>,\n+    crates: Arena<SysrootCrate, SysrootCrateData>,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct SysrootCrate(RawId);\n+impl_arena_id!(SysrootCrate);\n+\n+#[derive(Debug, Clone)]\n+struct SysrootCrateData {\n+    name: SmolStr,\n+    path: PathBuf,\n+    deps: Vec<SysrootCrate>,\n }\n \n impl Sysroot {\n@@ -26,53 +37,73 @@ impl Sysroot {\n         let sysroot_path = Path::new(stdout.trim());\n         let src = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n \n-        let crates: &[(&str, &[&str])] = &[\n-            (\n-                \"std\",\n-                &[\n-                    \"alloc_jemalloc\",\n-                    \"alloc_system\",\n-                    \"panic_abort\",\n-                    \"rand\",\n-                    \"compiler_builtins\",\n-                    \"unwind\",\n-                    \"rustc_asan\",\n-                    \"rustc_lsan\",\n-                    \"rustc_msan\",\n-                    \"rustc_tsan\",\n-                    \"build_helper\",\n-                ],\n-            ),\n-            (\"core\", &[]),\n-            (\"alloc\", &[]),\n-            (\"collections\", &[]),\n-            (\"libc\", &[]),\n-            (\"panic_unwind\", &[]),\n-            (\"proc_macro\", &[]),\n-            (\"rustc_unicode\", &[]),\n-            (\"std_unicode\", &[]),\n-            (\"test\", &[]),\n-            // Feature gated\n-            (\"alloc_jemalloc\", &[]),\n-            (\"alloc_system\", &[]),\n-            (\"compiler_builtins\", &[]),\n-            (\"getopts\", &[]),\n-            (\"panic_unwind\", &[]),\n-            (\"panic_abort\", &[]),\n-            (\"rand\", &[]),\n-            (\"term\", &[]),\n-            (\"unwind\", &[]),\n-            // Dependencies\n-            (\"build_helper\", &[]),\n-            (\"rustc_asan\", &[]),\n-            (\"rustc_lsan\", &[]),\n-            (\"rustc_msan\", &[]),\n-            (\"rustc_tsan\", &[]),\n-            (\"syntax\", &[]),\n-        ];\n+        let mut sysroot = Sysroot {\n+            crates: Arena::default(),\n+        };\n+        for name in SYSROOT_CRATES.trim().lines() {\n+            let path = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n+            if path.exists() {\n+                sysroot.crates.alloc(SysrootCrateData {\n+                    name: name.into(),\n+                    path,\n+                    deps: Vec::new(),\n+                });\n+            }\n+        }\n+        if let Some(std) = sysroot.by_name(\"std\") {\n+            for dep in STD_DEPS.trim().lines() {\n+                if let Some(dep) = sysroot.by_name(dep) {\n+                    sysroot.crates[std].deps.push(dep)\n+                }\n+            }\n+        }\n+        Ok(sysroot)\n+    }\n \n-        Ok(Sysroot {\n-            crates: FxHashMap::default(),\n-        })\n+    fn by_name(&self, name: &str) -> Option<SysrootCrate> {\n+        self.crates\n+            .iter()\n+            .find(|(_id, data)| data.name == name)\n+            .map(|(id, _data)| id)\n     }\n }\n+\n+const SYSROOT_CRATES: &str = \"\n+std\n+core\n+alloc\n+collections\n+libc\n+panic_unwind\n+proc_macro\n+rustc_unicode\n+std_unicode\n+test\n+alloc_jemalloc\n+alloc_system\n+compiler_builtins\n+getopts\n+panic_unwind\n+panic_abort\n+rand\n+term\n+unwind\n+build_helper\n+rustc_asan\n+rustc_lsan\n+rustc_msan\n+rustc_tsan\n+syntax\";\n+\n+const STD_DEPS: &str = \"\n+alloc_jemalloc\n+alloc_system\n+panic_abort\n+rand\n+compiler_builtins\n+unwind\n+rustc_asan\n+rustc_lsan\n+rustc_msan\n+rustc_tsan\n+build_helper\";"}]}