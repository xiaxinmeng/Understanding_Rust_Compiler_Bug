{"sha": "4c9971eb0d3235888b1f7086fa12051fce509fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTk3MWViMGQzMjM1ODg4YjFmNzA4NmZhMTIwNTFmY2U1MDlmZTc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-08-05T22:29:52Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-06T13:54:43Z"}, "message": "remove struct_fields & enum_variants from the tcx", "tree": {"sha": "480f643cacc844ab71eeb6b3a462ff71ddfc674d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480f643cacc844ab71eeb6b3a462ff71ddfc674d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c9971eb0d3235888b1f7086fa12051fce509fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9971eb0d3235888b1f7086fa12051fce509fe7", "html_url": "https://github.com/rust-lang/rust/commit/4c9971eb0d3235888b1f7086fa12051fce509fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c9971eb0d3235888b1f7086fa12051fce509fe7/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3c1412ad8224e0fea0bc2b4f67894619045c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3c1412ad8224e0fea0bc2b4f67894619045c54", "html_url": "https://github.com/rust-lang/rust/commit/5f3c1412ad8224e0fea0bc2b4f67894619045c54"}], "stats": {"total": 52, "additions": 12, "deletions": 40}, "files": [{"sha": "b817dca1212e6e7c35f1031c1b354a0465a386be", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c9971eb0d3235888b1f7086fa12051fce509fe7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9971eb0d3235888b1f7086fa12051fce509fe7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4c9971eb0d3235888b1f7086fa12051fce509fe7", "patch": "@@ -872,13 +872,11 @@ pub struct ctxt<'tcx> {\n     pub rcache: RefCell<FnvHashMap<CReaderCacheKey, Ty<'tcx>>>,\n     pub tc_cache: RefCell<FnvHashMap<Ty<'tcx>, TypeContents>>,\n     pub ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n-    pub enum_var_cache: RefCell<DefIdMap<Rc<Vec<Rc<VariantInfo<'tcx>>>>>>,\n     pub ty_param_defs: RefCell<NodeMap<TypeParameterDef<'tcx>>>,\n     pub normalized_cache: RefCell<FnvHashMap<Ty<'tcx>, Ty<'tcx>>>,\n     pub lang_items: middle::lang_items::LanguageItems,\n     /// A mapping of fake provided method def_ids to the default implementation\n     pub provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n-    pub struct_fields: RefCell<DefIdMap<Rc<Vec<FieldTy>>>>,\n \n     /// Maps from def-id of a type or region parameter to its\n     /// (inferred) variance.\n@@ -3816,15 +3814,13 @@ impl<'tcx> ctxt<'tcx> {\n             rcache: RefCell::new(FnvHashMap()),\n             tc_cache: RefCell::new(FnvHashMap()),\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n-            enum_var_cache: RefCell::new(DefIdMap()),\n             impl_or_trait_items: RefCell::new(DefIdMap()),\n             trait_item_def_ids: RefCell::new(DefIdMap()),\n             trait_items_cache: RefCell::new(DefIdMap()),\n             ty_param_defs: RefCell::new(NodeMap()),\n             normalized_cache: RefCell::new(FnvHashMap()),\n             lang_items: lang_items,\n             provided_method_sources: RefCell::new(DefIdMap()),\n-            struct_fields: RefCell::new(DefIdMap()),\n             destructor_for_type: RefCell::new(DefIdMap()),\n             destructors: RefCell::new(DefIdSet()),\n             inherent_impls: RefCell::new(DefIdMap()),"}, {"sha": "4f8aeceb558dfa0973da7f607c229559d141c47e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4c9971eb0d3235888b1f7086fa12051fce509fe7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9971eb0d3235888b1f7086fa12051fce509fe7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4c9971eb0d3235888b1f7086fa12051fce509fe7", "patch": "@@ -620,9 +620,7 @@ fn convert_field<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            struct_generics: &ty::Generics<'tcx>,\n                            struct_predicates: &ty::GenericPredicates<'tcx>,\n                            v: &ast::StructField,\n-                           ty_f: &'tcx ty::FieldDef_<'tcx, 'tcx>,\n-                           origin: ast::DefId)\n-                           -> ty::FieldTy\n+                           ty_f: &'tcx ty::FieldDef_<'tcx, 'tcx>)\n {\n     let tt = ccx.icx(struct_predicates).to_ty(&ExplicitRscope, &*v.node.ty);\n     ty_f.fulfill_ty(tt);\n@@ -636,25 +634,6 @@ fn convert_field<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                });\n     ccx.tcx.predicates.borrow_mut().insert(local_def(v.node.id),\n                                            struct_predicates.clone());\n-\n-    match v.node.kind {\n-        ast::NamedField(ident, visibility) => {\n-            ty::FieldTy {\n-                name: ident.name,\n-                id: local_def(v.node.id),\n-                vis: visibility,\n-                origin: origin,\n-            }\n-        }\n-        ast::UnnamedField(visibility) => {\n-            ty::FieldTy {\n-                name: special_idents::unnamed_field.name,\n-                id: local_def(v.node.id),\n-                vis: visibility,\n-                origin: origin,\n-            }\n-        }\n-    }\n }\n \n fn convert_associated_const<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n@@ -1018,7 +997,11 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n             write_ty_to_tcx(tcx, it.id, scheme.ty);\n \n             let variant = tcx.lookup_adt_def(local_def(it.id)).struct_variant();\n-            convert_struct_variant_types(ccx, &struct_def, variant, &scheme, &predicates);\n+\n+            for (f, ty_f) in struct_def.fields.iter().zip(variant.fields.iter()) {\n+                convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n+            }\n+\n             if let Some(ctor_id) = struct_def.ctor_id {\n                 convert_variant_ctor(tcx, ctor_id, variant, scheme, predicates);\n             }\n@@ -1065,17 +1048,6 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n                            });\n }\n \n-fn convert_struct_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                                          def: &ast::StructDef,\n-                                          variant: &'tcx ty::VariantDef_<'tcx, 'tcx>,\n-                                          scheme: &ty::TypeScheme<'tcx>,\n-                                          predicates: &ty::GenericPredicates<'tcx>) {\n-    let field_tys = def.fields.iter().zip(variant.fields.iter()).map(|(f, ty_f)| {\n-        convert_field(ccx, &scheme.generics, &predicates, f, ty_f, variant.did)\n-    }).collect();\n-    ccx.tcx.struct_fields.borrow_mut().insert(variant.did, Rc::new(field_tys));\n-}\n-\n fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         def: &'tcx ty::ADTDef_<'tcx, 'tcx>,\n                                         scheme: ty::TypeScheme<'tcx>,\n@@ -1084,7 +1056,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let tcx = ccx.tcx;\n     let icx = ccx.icx(&predicates);\n \n-    // Create a set of parameter types shared among all the variants.\n+    // fill the field types\n     for (variant, ty_variant) in variants.iter().zip(def.variants.iter()) {\n         match variant.node.kind {\n             ast::TupleVariantKind(ref args) => {\n@@ -1096,10 +1068,14 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             }\n \n             ast::StructVariantKind(ref struct_def) => {\n-                convert_struct_variant_types(ccx, &struct_def, ty_variant, &scheme, &predicates);\n+                for (f, ty_f) in struct_def.fields.iter().zip(ty_variant.fields.iter()) {\n+                    convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n+                }\n             }\n         };\n \n+        // Convert the ctor, if any. This also registers the variant as\n+        // an item.\n         convert_variant_ctor(\n             tcx,\n             variant.node.id,"}]}