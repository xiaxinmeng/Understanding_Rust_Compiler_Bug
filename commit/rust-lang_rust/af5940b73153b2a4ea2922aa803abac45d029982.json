{"sha": "af5940b73153b2a4ea2922aa803abac45d029982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTk0MGI3MzE1M2IyYTRlYTI5MjJhYTgwM2FiYWM0NWQwMjk5ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-12T08:14:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-12T08:14:27Z"}, "message": "Auto merge of #5451 - xyzd:allow-uuid-format-digit-grouping, r=phansch\n\nAllow UUID style formatting for `inconsistent_digit_grouping` lint\n\nThis change adds a check to the `inconsistent_digit_grouping` to add a check for\nNumericLiterals that follow the UUID format of 8-4-4-4-12.\n\nIf the NumericLiteral matches the UUID format, no further inconsistent grouping checks\nwill be performed.\n\nCloses #5431\n\nchangelog: Allow UUID style formatting for `inconsistent_digit_grouping` lint", "tree": {"sha": "ff1465ef9ad2550fa54db05e022e80f34e6e649e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1465ef9ad2550fa54db05e022e80f34e6e649e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5940b73153b2a4ea2922aa803abac45d029982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5940b73153b2a4ea2922aa803abac45d029982", "html_url": "https://github.com/rust-lang/rust/commit/af5940b73153b2a4ea2922aa803abac45d029982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5940b73153b2a4ea2922aa803abac45d029982/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97aa8dc778031f929a9563980b7766da0f8b9cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/97aa8dc778031f929a9563980b7766da0f8b9cf5", "html_url": "https://github.com/rust-lang/rust/commit/97aa8dc778031f929a9563980b7766da0f8b9cf5"}, {"sha": "a296058e50b7c5b2613e6655e80243b7e33fcce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a296058e50b7c5b2613e6655e80243b7e33fcce9", "html_url": "https://github.com/rust-lang/rust/commit/a296058e50b7c5b2613e6655e80243b7e33fcce9"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "ec7c4531ed7169c770ddb2ce0d17dae648d9ab60", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af5940b73153b2a4ea2922aa803abac45d029982/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5940b73153b2a4ea2922aa803abac45d029982/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=af5940b73153b2a4ea2922aa803abac45d029982", "patch": "@@ -186,6 +186,9 @@ impl EarlyLintPass for LiteralDigitGrouping {\n     }\n }\n \n+// Length of each UUID hyphenated group in hex digits.\n+const UUID_GROUP_LENS: [usize; 5] = [8, 4, 4, 4, 12];\n+\n impl LiteralDigitGrouping {\n     fn check_lit(cx: &EarlyContext<'_>, lit: &Lit) {\n         if_chain! {\n@@ -196,6 +199,10 @@ impl LiteralDigitGrouping {\n                     return;\n                 }\n \n+                if Self::is_literal_uuid_formatted(&mut num_lit) {\n+                    return;\n+                }\n+\n                 let result = (|| {\n \n                     let integral_group_size = Self::get_group_size(num_lit.integer.split('_'))?;\n@@ -266,6 +273,28 @@ impl LiteralDigitGrouping {\n         }\n     }\n \n+    /// Checks whether the numeric literal matches the formatting of a UUID.\n+    ///\n+    /// Returns `true` if the radix is hexadecimal, and the groups match the\n+    /// UUID format of 8-4-4-4-12.\n+    fn is_literal_uuid_formatted(num_lit: &mut NumericLiteral<'_>) -> bool {\n+        if num_lit.radix != Radix::Hexadecimal {\n+            return false;\n+        }\n+\n+        // UUIDs should not have a fraction\n+        if num_lit.fraction.is_some() {\n+            return false;\n+        }\n+\n+        let group_sizes: Vec<usize> = num_lit.integer.split('_').map(str::len).collect();\n+        if UUID_GROUP_LENS.len() == group_sizes.len() {\n+            UUID_GROUP_LENS.iter().zip(&group_sizes).all(|(&a, &b)| a == b)\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// Given the sizes of the digit groups of both integral and fractional\n     /// parts, and the length\n     /// of both parts, determine if the digits have been grouped consistently."}, {"sha": "b75f10917df18b0a8a5968364172d63ebe9766d2", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af5940b73153b2a4ea2922aa803abac45d029982/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/af5940b73153b2a4ea2922aa803abac45d029982/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=af5940b73153b2a4ea2922aa803abac45d029982", "patch": "@@ -34,6 +34,9 @@ fn main() {\n     // Test suggestion when fraction has no digits\n     let _: f32 = 123_456.;\n \n+    // Test UUID formatted literal\n+    let _: u128 = 0x12345678_1234_1234_1234_123456789012;\n+\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();"}, {"sha": "79ce38be19bd3e877935a034929cfab0c69dc270", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af5940b73153b2a4ea2922aa803abac45d029982/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5940b73153b2a4ea2922aa803abac45d029982/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=af5940b73153b2a4ea2922aa803abac45d029982", "patch": "@@ -34,6 +34,9 @@ fn main() {\n     // Test suggestion when fraction has no digits\n     let _: f32 = 1_23_456.;\n \n+    // Test UUID formatted literal\n+    let _: u128 = 0x12345678_1234_1234_1234_123456789012;\n+\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();"}]}