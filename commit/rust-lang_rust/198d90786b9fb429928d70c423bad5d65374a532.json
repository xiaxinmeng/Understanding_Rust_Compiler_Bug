{"sha": "198d90786b9fb429928d70c423bad5d65374a532", "node_id": "C_kwDOAAsO6NoAKDE5OGQ5MDc4NmI5ZmI0Mjk5MjhkNzBjNDIzYmFkNWQ2NTM3NGE1MzI", "commit": {"author": {"name": "Marcel Hlopko", "email": "hlopko@google.com", "date": "2021-09-10T13:11:56Z"}, "committer": {"name": "Marcel Hlopko", "email": "hlopko@google.com", "date": "2021-10-01T06:06:42Z"}, "message": "Add `pie` as another `relocation-model` value", "tree": {"sha": "dfe7e0753b3e6071471f9a29075fb134b2679f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfe7e0753b3e6071471f9a29075fb134b2679f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198d90786b9fb429928d70c423bad5d65374a532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198d90786b9fb429928d70c423bad5d65374a532", "html_url": "https://github.com/rust-lang/rust/commit/198d90786b9fb429928d70c423bad5d65374a532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198d90786b9fb429928d70c423bad5d65374a532/comments", "author": {"login": "hlopko", "id": 814566, "node_id": "MDQ6VXNlcjgxNDU2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/814566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hlopko", "html_url": "https://github.com/hlopko", "followers_url": "https://api.github.com/users/hlopko/followers", "following_url": "https://api.github.com/users/hlopko/following{/other_user}", "gists_url": "https://api.github.com/users/hlopko/gists{/gist_id}", "starred_url": "https://api.github.com/users/hlopko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hlopko/subscriptions", "organizations_url": "https://api.github.com/users/hlopko/orgs", "repos_url": "https://api.github.com/users/hlopko/repos", "events_url": "https://api.github.com/users/hlopko/events{/privacy}", "received_events_url": "https://api.github.com/users/hlopko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hlopko", "id": 814566, "node_id": "MDQ6VXNlcjgxNDU2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/814566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hlopko", "html_url": "https://github.com/hlopko", "followers_url": "https://api.github.com/users/hlopko/followers", "following_url": "https://api.github.com/users/hlopko/following{/other_user}", "gists_url": "https://api.github.com/users/hlopko/gists{/gist_id}", "starred_url": "https://api.github.com/users/hlopko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hlopko/subscriptions", "organizations_url": "https://api.github.com/users/hlopko/orgs", "repos_url": "https://api.github.com/users/hlopko/repos", "events_url": "https://api.github.com/users/hlopko/events{/privacy}", "received_events_url": "https://api.github.com/users/hlopko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 155, "additions": 147, "deletions": 8}, "files": [{"sha": "e8484c24df9dbf8ff9297f2d3676392370fc2a51", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -129,7 +129,8 @@ fn to_pass_builder_opt_level(cfg: config::OptLevel) -> llvm::PassBuilderOptLevel\n fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n     match relocation_model {\n         RelocModel::Static => llvm::RelocModel::Static,\n-        RelocModel::Pic => llvm::RelocModel::PIC,\n+        // LLVM doesn't have a PIE relocation model, it represents PIE as PIC with an extra attribute.\n+        RelocModel::Pic | RelocModel::Pie => llvm::RelocModel::PIC,\n         RelocModel::DynamicNoPic => llvm::RelocModel::DynamicNoPic,\n         RelocModel::Ropi => llvm::RelocModel::ROPI,\n         RelocModel::Rwpi => llvm::RelocModel::RWPI,"}, {"sha": "e69d42c948285ded2dac71d236a4ba23bd952e4f", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -190,11 +190,14 @@ pub unsafe fn create_module(\n     let llvm_target = SmallCStr::new(&sess.target.llvm_target);\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n \n-    if sess.relocation_model() == RelocModel::Pic {\n+    let reloc_model = sess.relocation_model();\n+    if matches!(reloc_model, RelocModel::Pic | RelocModel::Pie) {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n         // PIE is potentially more effective than PIC, but can only be used in executables.\n         // If all our outputs are executables, then we can relax PIC to PIE.\n-        if sess.crate_types().iter().all(|ty| *ty == CrateType::Executable) {\n+        if reloc_model == RelocModel::Pie\n+            || sess.crate_types().iter().all(|ty| *ty == CrateType::Executable)\n+        {\n             llvm::LLVMRustSetModulePIELevel(llmod);\n         }\n     }"}, {"sha": "0b06fe8bdcf9cc6a99406675f40bacf316749d59", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -211,9 +211,16 @@ impl CodegenBackend for LlvmCodegenBackend {\n         match req {\n             PrintRequest::RelocationModels => {\n                 println!(\"Available relocation models:\");\n-                for name in\n-                    &[\"static\", \"pic\", \"dynamic-no-pic\", \"ropi\", \"rwpi\", \"ropi-rwpi\", \"default\"]\n-                {\n+                for name in &[\n+                    \"static\",\n+                    \"pic\",\n+                    \"pie\",\n+                    \"dynamic-no-pic\",\n+                    \"ropi\",\n+                    \"rwpi\",\n+                    \"ropi-rwpi\",\n+                    \"default\",\n+                ] {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "17bf55bf512fe21d7ac459e8bc23d84f27e4e5a7", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -144,6 +144,12 @@ impl CodegenCx<'ll, 'tcx> {\n             return true;\n         }\n \n+        // With pie relocation model calls of functions defined in the translation\n+        // unit can use copy relocations.\n+        if self.tcx.sess.relocation_model() == RelocModel::Pie && !is_declaration {\n+            return true;\n+        }\n+\n         return false;\n     }\n }"}, {"sha": "0dcddb693de75dda695110d02d75679e55c6c73f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -1490,9 +1490,13 @@ fn exec_linker(\n fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     let kind = match (crate_type, sess.crt_static(Some(crate_type)), sess.relocation_model()) {\n         (CrateType::Executable, _, _) if sess.is_wasi_reactor() => LinkOutputKind::WasiReactorExe,\n-        (CrateType::Executable, false, RelocModel::Pic) => LinkOutputKind::DynamicPicExe,\n+        (CrateType::Executable, false, RelocModel::Pic | RelocModel::Pie) => {\n+            LinkOutputKind::DynamicPicExe\n+        }\n         (CrateType::Executable, false, _) => LinkOutputKind::DynamicNoPicExe,\n-        (CrateType::Executable, true, RelocModel::Pic) => LinkOutputKind::StaticPicExe,\n+        (CrateType::Executable, true, RelocModel::Pic | RelocModel::Pie) => {\n+            LinkOutputKind::StaticPicExe\n+        }\n         (CrateType::Executable, true, _) => LinkOutputKind::StaticNoPicExe,\n         (_, true, _) => LinkOutputKind::StaticDylib,\n         (_, false, _) => LinkOutputKind::DynamicDylib,"}, {"sha": "44eafde30018171558dcd965cfcf11b4232f14a9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -287,6 +287,7 @@ impl ToJson for MergeFunctions {\n pub enum RelocModel {\n     Static,\n     Pic,\n+    Pie,\n     DynamicNoPic,\n     Ropi,\n     Rwpi,\n@@ -300,6 +301,7 @@ impl FromStr for RelocModel {\n         Ok(match s {\n             \"static\" => RelocModel::Static,\n             \"pic\" => RelocModel::Pic,\n+            \"pie\" => RelocModel::Pie,\n             \"dynamic-no-pic\" => RelocModel::DynamicNoPic,\n             \"ropi\" => RelocModel::Ropi,\n             \"rwpi\" => RelocModel::Rwpi,\n@@ -314,6 +316,7 @@ impl ToJson for RelocModel {\n         match *self {\n             RelocModel::Static => \"static\",\n             RelocModel::Pic => \"pic\",\n+            RelocModel::Pie => \"pie\",\n             RelocModel::DynamicNoPic => \"dynamic-no-pic\",\n             RelocModel::Ropi => \"ropi\",\n             RelocModel::Rwpi => \"rwpi\","}, {"sha": "4f8c4c66f889122f21f9d49f0cf6de7a5adff8c7", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -435,6 +435,10 @@ Equivalent to the \"uppercase\" `-fPIC` or `-fPIE` options in other compilers,\n depending on the produced crate types.  \\\n This is the default model for majority of supported targets.\n \n+- `pie` - position independent executable, relocatable code but without support for symbol\n+interpositioning (replacing symbols by name using `LD_PRELOAD` and similar). Equivalent to the \"uppercase\" `-fPIE` option in other compilers. `pie`\n+code cannot be linked into shared libraries (you'll get a linking error on attempt to do this).\n+\n #### Special relocation models\n \n - `dynamic-no-pic` - relocatable external references, non-relocatable code.  \\"}, {"sha": "72471ffcdb0cb3f1f2b129b6c50497de39617737", "filename": "src/test/assembly/pic-relocation-model.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -0,0 +1,35 @@\n+// revisions: x64\n+// assembly-output: emit-asm\n+// [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=pic\n+// [x64] needs-llvm-components: x86\n+\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+// CHECK-LABEL: call_other_fn:\n+// CHECK:       {{(jmpq|callq)}} *other_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+pub fn call_other_fn() -> u8 {\n+    unsafe {\n+        other_fn()\n+    }\n+}\n+\n+// CHECK-LABEL: other_fn:\n+// CHECK:       callq *foreign_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+#[inline(never)]\n+pub fn other_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+extern \"C\" {fn foreign_fn() -> u8;}"}, {"sha": "e40797e038d4b43f411d7e8849dd0cf7c44a056d", "filename": "src/test/assembly/pie-relocation-model.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -0,0 +1,38 @@\n+// revisions: x64\n+// assembly-output: emit-asm\n+// [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=pie\n+// [x64] needs-llvm-components: x86\n+\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+// CHECK-LABEL: call_other_fn:\n+// With PIE local functions are called \"directly\".\n+// CHECK:       {{(jmp|callq)}} other_fn\n+#[no_mangle]\n+pub fn call_other_fn() -> u8 {\n+    unsafe {\n+        other_fn()\n+    }\n+}\n+\n+// CHECK-LABEL: other_fn:\n+// External functions are still called through GOT, since we don't know if the symbol\n+// is defined in the binary or in the shared library.\n+// CHECK:       callq *foreign_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+#[inline(never)]\n+pub fn other_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+extern \"C\" {fn foreign_fn() -> u8;}"}, {"sha": "6e1d5a6c3f2712f22fca6991cd44ca62ea8f8fce", "filename": "src/test/codegen/pic-relocation-model.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -C relocation-model=pic\n+\n+#![crate_type = \"rlib\"]\n+\n+// CHECK: define i8 @call_foreign_fn()\n+#[no_mangle]\n+pub fn call_foreign_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+// CHECK: declare zeroext i8 @foreign_fn()\n+extern \"C\" {fn foreign_fn() -> u8;}\n+\n+// CHECK: !{i32 7, !\"PIC Level\", i32 2}"}, {"sha": "a843202a94f82c0bf73b34fbf48201bd4e307566", "filename": "src/test/codegen/pie-relocation-model.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198d90786b9fb429928d70c423bad5d65374a532/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs?ref=198d90786b9fb429928d70c423bad5d65374a532", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -C relocation-model=pie\n+// only-x86_64-unknown-linux-gnu\n+\n+#![crate_type = \"rlib\"]\n+\n+// With PIE we know local functions cannot be interpositioned, we can mark them\n+// as dso_local.\n+// CHECK: define dso_local i8 @call_foreign_fn()\n+#[no_mangle]\n+pub fn call_foreign_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+// External functions are still marked as non-dso_local, since we don't know if the symbol\n+// is defined in the binary or in the shared library.\n+// CHECK: declare zeroext i8 @foreign_fn()\n+extern \"C\" {fn foreign_fn() -> u8;}\n+\n+// CHECK: !{i32 7, !\"PIC Level\", i32 2}\n+// CHECK: !{i32 7, !\"PIE Level\", i32 2}"}]}