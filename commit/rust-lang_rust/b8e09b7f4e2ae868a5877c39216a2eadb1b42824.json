{"sha": "b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTA5YjdmNGUyYWU4NjhhNTg3N2MzOTIxNmEyZWFkYjFiNDI4MjQ=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-20T19:01:09Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-20T19:01:09Z"}, "message": "Inline lang items in coercion tests", "tree": {"sha": "fa97381d2f01da2f7923026562e0f3c772be6528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa97381d2f01da2f7923026562e0f3c772be6528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "html_url": "https://github.com/rust-lang/rust/commit/b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e09b7f4e2ae868a5877c39216a2eadb1b42824/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6979be77dcce37edd5f29607c5fd41252e312d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6979be77dcce37edd5f29607c5fd41252e312d", "html_url": "https://github.com/rust-lang/rust/commit/3b6979be77dcce37edd5f29607c5fd41252e312d"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "59a21092ecca7d886c82b672db5e9cb76948331a", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8e09b7f4e2ae868a5877c39216a2eadb1b42824/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e09b7f4e2ae868a5877c39216a2eadb1b42824/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "patch": "@@ -346,22 +346,8 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     }\n }\n \n-// Infer with some common definitions and impls.\n fn check_infer(ra_fixture: &str, expect: Expect) {\n-    let defs = r#\"\n-        #[lang = \"sized\"]\n-        pub trait Sized {}\n-        #[lang = \"unsize\"]\n-        pub trait Unsize<T: ?Sized> {}\n-        #[lang = \"coerce_unsized\"]\n-        pub trait CoerceUnsized<T> {}\n-\n-        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n-        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n-    \"#;\n-\n-    // Append to the end to keep positions unchanged.\n-    let mut actual = infer(&format!(\"{}{}\", ra_fixture, defs));\n+    let mut actual = infer(ra_fixture);\n     actual.push('\\n');\n     expect.assert_eq(&actual);\n }"}, {"sha": "17efd75cb6b699538c7a97f49b8e6f7013e91185", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b8e09b7f4e2ae868a5877c39216a2eadb1b42824/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e09b7f4e2ae868a5877c39216a2eadb1b42824/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=b8e09b7f4e2ae868a5877c39216a2eadb1b42824", "patch": "@@ -23,7 +23,7 @@ fn infer_block_expr_type_mismatch() {\n #[test]\n fn coerce_places() {\n     check_infer(\n-        r\"\n+        r#\"\n         struct S<T> { a: T }\n \n         fn f<T>(_: &[T]) -> T { loop {} }\n@@ -45,7 +45,17 @@ fn coerce_places() {\n             let f: [&[_]; 2] = [arr; 2];\n             let g: (&[_], &[_]) = (arr, arr);\n         }\n-        \",\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        #[lang = \"coerce_unsized\"]\n+        pub trait CoerceUnsized<T> {}\n+\n+        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+        \"#,\n         expect![[r\"\n             30..31 '_': &[T]\n             44..55 '{ loop {} }': T\n@@ -121,7 +131,7 @@ fn infer_let_stmt_coerce() {\n #[test]\n fn infer_custom_coerce_unsized() {\n     check_infer(\n-        r\"\n+        r#\"\n         struct A<T: ?Sized>(*const T);\n         struct B<T: ?Sized>(*const T);\n         struct C<T: ?Sized> { inner: *const T }\n@@ -138,7 +148,18 @@ fn infer_custom_coerce_unsized() {\n             let e = foo2(b);\n             let f = foo3(c);\n         }\n-        \",\n+\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        #[lang = \"coerce_unsized\"]\n+        pub trait CoerceUnsized<T> {}\n+\n+        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+        \"#,\n         expect![[r\"\n             257..258 'x': A<[T]>\n             278..283 '{ x }': A<[T]>\n@@ -172,7 +193,7 @@ fn infer_custom_coerce_unsized() {\n #[test]\n fn infer_if_coerce() {\n     check_infer(\n-        r\"\n+        r#\"\n         fn foo<T>(x: &[T]) -> &[T] { loop {} }\n         fn test() {\n             let x = if true {\n@@ -181,7 +202,13 @@ fn infer_if_coerce() {\n                 &[1]\n             };\n         }\n-        \",\n+\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        \"#,\n         expect![[r\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n@@ -208,7 +235,7 @@ fn infer_if_coerce() {\n #[test]\n fn infer_if_else_coerce() {\n     check_infer(\n-        r\"\n+        r#\"\n         fn foo<T>(x: &[T]) -> &[T] { loop {} }\n         fn test() {\n             let x = if true {\n@@ -217,7 +244,17 @@ fn infer_if_else_coerce() {\n                 foo(&[1])\n             };\n         }\n-        \",\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        #[lang = \"coerce_unsized\"]\n+        pub trait CoerceUnsized<T> {}\n+\n+        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+        \"#,\n         expect![[r\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n@@ -244,7 +281,7 @@ fn infer_if_else_coerce() {\n #[test]\n fn infer_match_first_coerce() {\n     check_infer(\n-        r\"\n+        r#\"\n         fn foo<T>(x: &[T]) -> &[T] { loop {} }\n         fn test(i: i32) {\n             let x = match i {\n@@ -253,7 +290,12 @@ fn infer_match_first_coerce() {\n                 _ => &[3],\n             };\n         }\n-        \",\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        \"#,\n         expect![[r\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]\n@@ -287,7 +329,7 @@ fn infer_match_first_coerce() {\n #[test]\n fn infer_match_second_coerce() {\n     check_infer(\n-        r\"\n+        r#\"\n         fn foo<T>(x: &[T]) -> &[T] { loop {} }\n         fn test(i: i32) {\n             let x = match i {\n@@ -296,7 +338,17 @@ fn infer_match_second_coerce() {\n                 _ => &[3],\n             };\n         }\n-        \",\n+\n+        #[lang = \"sized\"]\n+        pub trait Sized {}\n+        #[lang = \"unsize\"]\n+        pub trait Unsize<T: ?Sized> {}\n+        #[lang = \"coerce_unsized\"]\n+        pub trait CoerceUnsized<T> {}\n+\n+        impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+        impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n+        \"#,\n         expect![[r\"\n             10..11 'x': &[T]\n             27..38 '{ loop {} }': &[T]"}]}