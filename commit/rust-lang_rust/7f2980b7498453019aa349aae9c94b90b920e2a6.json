{"sha": "7f2980b7498453019aa349aae9c94b90b920e2a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjk4MGI3NDk4NDUzMDE5YWEzNDlhYWU5Yzk0YjkwYjkyMGUyYTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T22:57:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:10:24Z"}, "message": "rt: Remove bitrotted tests", "tree": {"sha": "df862f052a0ea170c82fcf0908079ea2ce63a551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df862f052a0ea170c82fcf0908079ea2ce63a551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2980b7498453019aa349aae9c94b90b920e2a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2980b7498453019aa349aae9c94b90b920e2a6", "html_url": "https://github.com/rust-lang/rust/commit/7f2980b7498453019aa349aae9c94b90b920e2a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2980b7498453019aa349aae9c94b90b920e2a6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f4b0587a303c742898512121edf0460d4279f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f4b0587a303c742898512121edf0460d4279f7", "html_url": "https://github.com/rust-lang/rust/commit/65f4b0587a303c742898512121edf0460d4279f7"}], "stats": {"total": 309, "additions": 0, "deletions": 309}, "files": [{"sha": "311e94f14082dc250ff2ad1eb5ccf59af942af8b", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f2980b7498453019aa349aae9c94b90b920e2a6/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7f2980b7498453019aa349aae9c94b90b920e2a6/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=7f2980b7498453019aa349aae9c94b90b920e2a6", "patch": "@@ -62,9 +62,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_debug.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n-              rt/test/rust_test_harness.cpp \\\n-              rt/test/rust_test_runtime.cpp \\\n-              rt/test/rust_test_util.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n@@ -102,9 +99,6 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_kernel.h \\\n                rt/memory_region.h \\\n                rt/memory.h \\\n-               rt/test/rust_test_harness.h \\\n-               rt/test/rust_test_runtime.h \\\n-               rt/test/rust_test_util.h \\\n                rt/arch/$$(HOST_$(1))/context.h \\\n                rt/arch/$$(HOST_$(1))/regs.h\n "}, {"sha": "ef1ad4b25a9d8d97284142af6464840895b1944f", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f2980b7498453019aa349aae9c94b90b920e2a6/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f2980b7498453019aa349aae9c94b90b920e2a6/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=7f2980b7498453019aa349aae9c94b90b920e2a6", "patch": "@@ -294,10 +294,6 @@ extern \"C\" type_desc *rust_clone_type_desc(type_desc*);\n #include \"rust_port.h\"\n #include \"memory.h\"\n \n-#include \"test/rust_test_harness.h\"\n-#include \"test/rust_test_util.h\"\n-#include \"test/rust_test_runtime.h\"\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "ec89da1ff927d37b00df20c75b54fb37d485230a", "filename": "src/rt/test/rust_test_harness.cpp", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,40 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-bool\n-rust_test::run() {\n-    return false;\n-}\n-\n-const char *\n-rust_test::name() {\n-    return \"untitled\";\n-}\n-\n-rust_test_suite::rust_test_suite() {\n-    tests.append(new rust_domain_test());\n-    tests.append(new rust_task_test(this));\n-    tests.append(new rust_array_list_test());\n-    tests.append(new rust_synchronized_indexed_list_test());\n-}\n-\n-rust_test_suite::~rust_test_suite() {\n-\n-}\n-\n-bool\n-rust_test_suite::run() {\n-    bool pass = true;\n-    for (size_t i = 0; i < tests.size(); i++) {\n-        rust_test *test = tests[i];\n-        printf(\"test: %s running ... \\n\", test->name());\n-        timer timer;\n-        bool result = tests[i]->run();\n-        printf(\"test: %s %s %.2f ms\\n\", test->name(),\n-               result ? \"PASS\" : \"FAIL\", timer.elapsed_ms());\n-        if (result == false) {\n-            pass = false;\n-        }\n-    }\n-    return pass;\n-}\n-"}, {"sha": "401015e4508900fe23010baf657cb646667718b2", "filename": "src/rt/test/rust_test_harness.h", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_harness.h", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_harness.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.h?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,22 +0,0 @@\n-#ifndef RUST_TEST_HARNESS_H\n-#define RUST_TEST_HARNESS_H\n-\n-#define CHECK(x) if ((x) == false)                               \\\n-    { printf(\"condition: %s failed at file: %s, line: %d\\n\", #x, \\\n-             __FILE__, __LINE__ ); return false; }\n-\n-class rust_test {\n-public:\n-    virtual bool run();\n-    virtual const char *name();\n-};\n-\n-class rust_test_suite : public rust_test {\n-public:\n-    array_list<rust_test*> tests;\n-    rust_test_suite();\n-    virtual ~rust_test_suite();\n-    bool run();\n-};\n-\n-#endif /* RUST_TEST_HARNESS_H */"}, {"sha": "51ec9219396c1b9672f8d57d50bb602770b997ec", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,69 +0,0 @@\n-#include \"rust_test_runtime.h\"\n-\n-rust_test_runtime::rust_test_runtime() {\n-}\n-\n-rust_test_runtime::~rust_test_runtime() {\n-}\n-\n-#define DOMAINS 32\n-#define TASKS 32\n-\n-void\n-rust_domain_test::worker::run() {\n-    for (int i = 0; i < TASKS; i++) {\n-        kernel->create_task(NULL, \"child\");\n-    }\n-    //sync::sleep(rand(&handle->rctx) % 1000);\n-}\n-\n-bool\n-rust_domain_test::run() {\n-    rust_env env;\n-    rust_srv srv(&env);\n-    rust_kernel kernel(&srv, 1);\n-\n-    array_list<worker *> workers;\n-    for (int i = 0; i < DOMAINS; i++) {\n-        worker *worker = new rust_domain_test::worker (&kernel);\n-        workers.append(worker);\n-        worker->start();\n-    }\n-\n-    // We don't join the worker threads here in order to simulate ad-hoc\n-    // termination of domains. If we join_all_domains before all domains\n-    // are actually spawned, this could crash, thus the reason for the\n-    // sleep below.\n-\n-    sync::sleep(100);\n-    return true;\n-}\n-\n-void task_entry(void *, rust_opaque_box*, void *) {\n-    printf(\"task entry\\n\");\n-}\n-\n-void\n-rust_task_test::worker::run() {\n-    rust_task_id root_id = kernel->create_task(NULL, \"main\");\n-    rust_task *root_task = kernel->get_task_by_id(root_id);\n-    root_task->start(&task_entry, NULL, NULL);\n-    root_task->sched->start_main_loop();\n-}\n-\n-bool\n-rust_task_test::run() {\n-    rust_env env;\n-    rust_srv srv(&env);\n-    rust_kernel kernel(&srv, 1);\n-\n-    array_list<worker *> workers;\n-    for (int i = 0; i < DOMAINS; i++) {\n-        worker *worker = new rust_task_test::worker (&kernel, this);\n-        workers.append(worker);\n-        worker->start();\n-    }\n-\n-    //sync::sleep(rand(&kernel.sched->rctx) % 1000);\n-    return true;\n-}"}, {"sha": "eb8ebe225c133fa8dacba77b5ac6984a9cfa1ab1", "filename": "src/rt/test/rust_test_runtime.h", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_runtime.h", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_runtime.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.h?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,48 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-#ifndef RUST_TEST_RUNTIME_H\n-#define RUST_TEST_RUNTIME_H\n-\n-class rust_test_runtime {\n-public:\n-    rust_test_runtime();\n-    virtual ~rust_test_runtime();\n-};\n-\n-\n-class rust_domain_test : public rust_test {\n-public:\n-    class worker : public rust_thread {\n-        public:\n-        rust_kernel *kernel;\n-        worker(rust_kernel *kernel) : kernel(kernel) {\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_domain_test\";\n-    }\n-};\n-\n-class rust_task_test : public rust_test {\n-public:\n-    rust_test_suite *suite;\n-    rust_task_test(rust_test_suite *suite) : suite(suite) {\n-    }\n-    class worker : public rust_thread {\n-        public:\n-        rust_kernel *kernel;\n-        rust_task_test *parent;\n-        worker(rust_kernel *kernel, rust_task_test *parent) :\n-            kernel(kernel), parent(parent) {\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_task_test\";\n-    }\n-};\n-\n-#endif /* RUST_TEST_RUNTIME_H */"}, {"sha": "9c6c5d7e2e3b54844a5feecea5e6fb042bbbba9c", "filename": "src/rt/test/rust_test_util.cpp", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.cpp?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,78 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-#define COUNT 1000\n-#define LARGE_COUNT 10000\n-#define THREADS 10\n-\n-bool\n-rust_array_list_test::run() {\n-    array_list<int> list;\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        list.append(i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list[i] == i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list.index_of(i) == i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list.replace(i, -i));\n-        CHECK (list.replace(-i, i));\n-        CHECK (list.index_of(i) == i);\n-    }\n-\n-    for (int i = COUNT - 1; i >= 0; i--) {\n-        CHECK (list.pop(NULL));\n-    }\n-\n-    return true;\n-}\n-\n-bool\n-rust_synchronized_indexed_list_test::run() {\n-    array_list<worker*> workers;\n-\n-    for (int i = 0; i < THREADS; i++) {\n-        worker *worker =\n-            new rust_synchronized_indexed_list_test::worker(this);\n-        workers.append(worker);\n-    }\n-\n-    for (uint32_t i = 0; i < workers.size(); i++) {\n-        workers[i]->start();\n-    }\n-\n-    while(workers.is_empty() == false) {\n-        worker *worker;\n-        workers.pop(&worker);\n-        worker->join();\n-        delete worker;\n-    }\n-\n-    size_t expected_items = LARGE_COUNT * THREADS;\n-\n-    CHECK(list.length() == expected_items);\n-\n-    long long sum = 0;\n-    for (size_t i = 0; i < list.length(); i++) {\n-        sum += list[i]->value;\n-    }\n-\n-    long long expected_sum = LARGE_COUNT;\n-    expected_sum = expected_sum * (expected_sum - 1) / 2 * THREADS;\n-    CHECK (sum == expected_sum);\n-    return true;\n-}\n-\n-void\n-rust_synchronized_indexed_list_test::worker::run() {\n-    for (int i = 0; i < LARGE_COUNT; i++) {\n-        parent->list.append(new indexed_list_element<int>(i));\n-    }\n-    return;\n-}"}, {"sha": "59eff04927064b384a7403393e04aecec8abc8bd", "filename": "src/rt/test/rust_test_util.h", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Ftest%2Frust_test_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.h?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -1,42 +0,0 @@\n-#ifndef RUST_TEST_UTIL_H\n-#define RUST_TEST_UTIL_H\n-\n-class rust_test_util : public rust_test {\n-public:\n-\n-};\n-\n-class rust_array_list_test : public rust_test {\n-public:\n-    bool run();\n-    const char *name() {\n-        return \"rust_array_list_test\";\n-    }\n-};\n-\n-\n-class rust_synchronized_indexed_list_test : public rust_test {\n-public:\n-    rust_env env;\n-    rust_srv srv;\n-    synchronized_indexed_list<indexed_list_element<int> > list;\n-\n-    rust_synchronized_indexed_list_test() :\n-        srv(&env)\n-    {\n-    }\n-\n-    class worker : public rust_thread {\n-    public:\n-        rust_synchronized_indexed_list_test *parent;\n-        worker(rust_synchronized_indexed_list_test *parent) : parent(parent) {\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_synchronized_indexed_list_test\";\n-    }\n-};\n-\n-#endif /* RUST_TEST_UTIL_H */"}]}