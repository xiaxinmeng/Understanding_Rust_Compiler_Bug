{"sha": "01c3303270139fea66e797e7e93e502aef1e8eb9", "node_id": "C_kwDOAAsO6NoAKDAxYzMzMDMyNzAxMzlmZWE2NmU3OTdlN2U5M2U1MDJhZWYxZThlYjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-08T11:17:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-08T11:17:56Z"}, "message": "Merge #11236\n\n11236: internal: Remove `InFile` wrapping from `DynMap` keys r=Veykril a=Veykril\n\nWe already store a `DynMap` per `(Container, HirFileId)` pair, so the `InFile` keys are already guruanteed to always be of the same file id\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "58ee25e73fdae4c11fefc2aae484aa6d68736404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ee25e73fdae4c11fefc2aae484aa6d68736404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c3303270139fea66e797e7e93e502aef1e8eb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2XLkCRBK7hj4Ov3rIwAAES0IAFf1Fz8aTd1b/atnpqzvXgrW\nj9Fctkl/RUpXVIP/5vp39pUNwY67JC2TzX5qMmBCn5yND+4G7yYoI6xVz2hUs53A\nUq/3Kjwab0tDdMLWQkaM3yzU/FEtlD5cZlnFMBml6NWG+ZTcKG9xJJbeuS1j8ydo\nXtCLhkx6JiiylLnH/TYjoYmvPVNkvyAXzEZeQTskEhCpR8h7ZMlIjRwtPzhjqPH8\n8PAdyKOg7Gc/FVuv1CAh+TxexUX5srBjdjeDGl/TzAenzJ0SNDvaxgTlpHR+u+Zt\nazk3Abof+62WYR5BVrUR9/3m/exgqL280wk9iggrxk0BzUklAzA4mxIYnaXd75E=\n=4Vjs\n-----END PGP SIGNATURE-----\n", "payload": "tree 58ee25e73fdae4c11fefc2aae484aa6d68736404\nparent 926ba99f43ec125a141ed6eedd856cd32457f0aa\nparent 47591f0fb2eb4814c488b1d72fcb00c43869104c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641640676 +0000\ncommitter GitHub <noreply@github.com> 1641640676 +0000\n\nMerge #11236\n\n11236: internal: Remove `InFile` wrapping from `DynMap` keys r=Veykril a=Veykril\n\nWe already store a `DynMap` per `(Container, HirFileId)` pair, so the `InFile` keys are already guruanteed to always be of the same file id\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c3303270139fea66e797e7e93e502aef1e8eb9", "html_url": "https://github.com/rust-lang/rust/commit/01c3303270139fea66e797e7e93e502aef1e8eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c3303270139fea66e797e7e93e502aef1e8eb9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926ba99f43ec125a141ed6eedd856cd32457f0aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/926ba99f43ec125a141ed6eedd856cd32457f0aa", "html_url": "https://github.com/rust-lang/rust/commit/926ba99f43ec125a141ed6eedd856cd32457f0aa"}, {"sha": "47591f0fb2eb4814c488b1d72fcb00c43869104c", "url": "https://api.github.com/repos/rust-lang/rust/commits/47591f0fb2eb4814c488b1d72fcb00c43869104c", "html_url": "https://github.com/rust-lang/rust/commit/47591f0fb2eb4814c488b1d72fcb00c43869104c"}], "stats": {"total": 220, "additions": 82, "deletions": 138}, "files": [{"sha": "506186123924fde02f5091a92c5468b466c98dbe", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=01c3303270139fea66e797e7e93e502aef1e8eb9", "patch": "@@ -242,7 +242,7 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn item_to_macro_call(&mut self, src: InFile<ast::Item>) -> Option<MacroCallId> {\n         let map = self.dyn_map(src.as_ref())?;\n-        map[keys::ATTR_MACRO_CALL].get(&src).copied()\n+        map[keys::ATTR_MACRO_CALL].get(&src.value).copied()\n     }\n \n     pub(super) fn attr_to_derive_macro_call(\n@@ -251,15 +251,15 @@ impl SourceToDefCtx<'_, '_> {\n         src: InFile<ast::Attr>,\n     ) -> Option<(AttrId, &[Option<MacroCallId>])> {\n         let map = self.dyn_map(item)?;\n-        map[keys::DERIVE_MACRO_CALL].get(&src).map(|(id, ids)| (*id, &**ids))\n+        map[keys::DERIVE_MACRO_CALL].get(&src.value).map(|(id, ids)| (*id, &**ids))\n     }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>(\n         &mut self,\n         src: InFile<Ast>,\n         key: Key<Ast, ID>,\n     ) -> Option<ID> {\n-        self.dyn_map(src.as_ref())?[key].get(&src).copied()\n+        self.dyn_map(src.as_ref())?[key].get(&src.value).copied()\n     }\n \n     fn dyn_map<Ast: AstNode + 'static>(&mut self, src: InFile<&Ast>) -> Option<&DynMap> {\n@@ -277,7 +277,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn type_param_to_def(&mut self, src: InFile<ast::TypeParam>) -> Option<TypeParamId> {\n         let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let dyn_map = self.cache_for(container, src.file_id);\n-        dyn_map[keys::TYPE_PARAM].get(&src).copied()\n+        dyn_map[keys::TYPE_PARAM].get(&src.value).copied()\n     }\n \n     pub(super) fn lifetime_param_to_def(\n@@ -286,7 +286,7 @@ impl SourceToDefCtx<'_, '_> {\n     ) -> Option<LifetimeParamId> {\n         let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let dyn_map = self.cache_for(container, src.file_id);\n-        dyn_map[keys::LIFETIME_PARAM].get(&src).copied()\n+        dyn_map[keys::LIFETIME_PARAM].get(&src.value).copied()\n     }\n \n     pub(super) fn const_param_to_def(\n@@ -295,7 +295,7 @@ impl SourceToDefCtx<'_, '_> {\n     ) -> Option<ConstParamId> {\n         let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let dyn_map = self.cache_for(container, src.file_id);\n-        dyn_map[keys::CONST_PARAM].get(&src).copied()\n+        dyn_map[keys::CONST_PARAM].get(&src.value).copied()\n     }\n \n     pub(super) fn generic_param_to_def(\n@@ -316,9 +316,9 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n-        let makro = self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO].get(&src).copied());\n-        if let res @ Some(_) = makro {\n-            return res;\n+        let makro = self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO].get(&src.value));\n+        if let Some(&makro) = makro {\n+            return Some(makro);\n         }\n \n         // Not all macros are recorded in the dyn map, only the ones behaving like items, so fall back"}, {"sha": "6b4abd8c44e17250dae592b98a171a78d1a4fbd2", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 55, "deletions": 114, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=01c3303270139fea66e797e7e93e502aef1e8eb9", "patch": "@@ -33,12 +33,11 @@ impl ChildBySource for TraitId {\n \n         data.attribute_calls().filter(|(ast_id, _)| ast_id.file_id == file_id).for_each(\n             |(ast_id, call_id)| {\n-                let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-                res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n+                res[keys::ATTR_MACRO_CALL].insert(ast_id.to_node(db.upcast()), call_id);\n             },\n         );\n         data.items.iter().for_each(|&(_, item)| {\n-            child_by_source_assoc_items(db, res, file_id, item);\n+            add_assoc_item(db, res, file_id, item);\n         });\n     }\n }\n@@ -48,42 +47,33 @@ impl ChildBySource for ImplId {\n         let data = db.impl_data(*self);\n         data.attribute_calls().filter(|(ast_id, _)| ast_id.file_id == file_id).for_each(\n             |(ast_id, call_id)| {\n-                let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-                res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n+                res[keys::ATTR_MACRO_CALL].insert(ast_id.to_node(db.upcast()), call_id);\n             },\n         );\n         data.items.iter().for_each(|&item| {\n-            child_by_source_assoc_items(db, res, file_id, item);\n+            add_assoc_item(db, res, file_id, item);\n         });\n     }\n }\n \n-fn child_by_source_assoc_items(\n-    db: &dyn DefDatabase,\n-    res: &mut DynMap,\n-    file_id: HirFileId,\n-    item: AssocItemId,\n-) {\n+fn add_assoc_item(db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId, item: AssocItemId) {\n     match item {\n         AssocItemId::FunctionId(func) => {\n             let loc = func.lookup(db);\n             if loc.id.file_id() == file_id {\n-                let src = loc.source(db);\n-                res[keys::FUNCTION].insert(src, func)\n+                res[keys::FUNCTION].insert(loc.source(db).value, func)\n             }\n         }\n         AssocItemId::ConstId(konst) => {\n             let loc = konst.lookup(db);\n             if loc.id.file_id() == file_id {\n-                let src = loc.source(db);\n-                res[keys::CONST].insert(src, konst)\n+                res[keys::CONST].insert(loc.source(db).value, konst)\n             }\n         }\n         AssocItemId::TypeAliasId(ty) => {\n             let loc = ty.lookup(db);\n             if loc.id.file_id() == file_id {\n-                let src = loc.source(db);\n-                res[keys::TYPE_ALIAS].insert(src, ty)\n+                res[keys::TYPE_ALIAS].insert(loc.source(db).value, ty)\n             }\n         }\n     }\n@@ -99,120 +89,75 @@ impl ChildBySource for ModuleId {\n \n impl ChildBySource for ItemScope {\n     fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n-        self.declarations().for_each(|item| add_module_def(db, file_id, res, item));\n+        self.declarations().for_each(|item| add_module_def(db, res, file_id, item));\n+        self.impls().for_each(|imp| add_impl(db, res, file_id, imp));\n+        self.unnamed_consts().for_each(|konst| {\n+            let loc = konst.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                res[keys::CONST].insert(loc.source(db).value, konst);\n+            }\n+        });\n         self.macros().for_each(|(_, makro)| {\n             let ast_id = makro.ast_id();\n             if ast_id.either(|it| it.file_id, |it| it.file_id) == file_id {\n                 let src = match ast_id {\n-                    Either::Left(ast_id) => ast_id.with_value(ast_id.to_node(db.upcast())),\n+                    Either::Left(ast_id) => ast_id.to_node(db.upcast()),\n                     // FIXME: Do we need to add proc-macros into a PROCMACRO dynmap here?\n                     Either::Right(_fn) => return,\n                 };\n                 res[keys::MACRO].insert(src, makro);\n             }\n         });\n-        self.unnamed_consts().for_each(|konst| {\n-            let loc = konst.lookup(db);\n-            if loc.id.file_id() == file_id {\n-                let src = loc.source(db);\n-                res[keys::CONST].insert(src, konst);\n-            }\n-        });\n-        self.impls().for_each(|imp| add_impl(db, file_id, res, imp));\n-        self.attr_macro_invocs().for_each(|(ast_id, call_id)| {\n-            if ast_id.file_id == file_id {\n-                let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n-                res[keys::ATTR_MACRO_CALL].insert(item, call_id);\n-            }\n-        });\n-        self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n-            if ast_id.file_id != file_id {\n-                return;\n-            }\n-            let adt = ast_id.to_node(db.upcast());\n-            for (attr_id, calls) in calls {\n-                if let Some(Either::Right(attr)) =\n-                    adt.doc_comments_and_attrs().nth(attr_id.ast_index as usize)\n-                {\n-                    res[keys::DERIVE_MACRO_CALL]\n-                        .insert(ast_id.with_value(attr), (attr_id, calls.into()));\n-                }\n-            }\n-        });\n+        self.attr_macro_invocs().filter(|(id, _)| id.file_id == file_id).for_each(\n+            |(ast_id, call_id)| {\n+                res[keys::ATTR_MACRO_CALL].insert(ast_id.to_node(db.upcast()), call_id);\n+            },\n+        );\n+        self.derive_macro_invocs().filter(|(id, _)| id.file_id == file_id).for_each(\n+            |(ast_id, calls)| {\n+                let adt = ast_id.to_node(db.upcast());\n+                calls.for_each(|(attr_id, calls)| {\n+                    if let Some(Either::Right(attr)) =\n+                        adt.doc_comments_and_attrs().nth(attr_id.ast_index as usize)\n+                    {\n+                        res[keys::DERIVE_MACRO_CALL].insert(attr, (attr_id, calls.into()));\n+                    }\n+                });\n+            },\n+        );\n \n         fn add_module_def(\n             db: &dyn DefDatabase,\n-            file_id: HirFileId,\n             map: &mut DynMap,\n+            file_id: HirFileId,\n             item: ModuleDefId,\n         ) {\n-            match item {\n-                ModuleDefId::FunctionId(func) => {\n-                    let loc = func.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        map[keys::FUNCTION].insert(src, func)\n-                    }\n-                }\n-                ModuleDefId::ConstId(konst) => {\n-                    let loc = konst.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        map[keys::CONST].insert(src, konst)\n-                    }\n-                }\n-                ModuleDefId::StaticId(statik) => {\n-                    let loc = statik.lookup(db);\n+            macro_rules! insert {\n+                ($map:ident[$key:path].$insert:ident($id:ident)) => {{\n+                    let loc = $id.lookup(db);\n                     if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        map[keys::STATIC].insert(src, statik)\n+                        $map[$key].$insert(loc.source(db).value, $id)\n                     }\n-                }\n-                ModuleDefId::TypeAliasId(ty) => {\n-                    let loc = ty.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        map[keys::TYPE_ALIAS].insert(src, ty)\n-                    }\n-                }\n-                ModuleDefId::TraitId(trait_) => {\n-                    let loc = trait_.lookup(db);\n-                    if loc.id.file_id() == file_id {\n-                        let src = loc.source(db);\n-                        map[keys::TRAIT].insert(src, trait_)\n-                    }\n-                }\n+                }};\n+            }\n+            match item {\n+                ModuleDefId::FunctionId(id) => insert!(map[keys::FUNCTION].insert(id)),\n+                ModuleDefId::ConstId(id) => insert!(map[keys::CONST].insert(id)),\n+                ModuleDefId::StaticId(id) => insert!(map[keys::STATIC].insert(id)),\n+                ModuleDefId::TypeAliasId(id) => insert!(map[keys::TYPE_ALIAS].insert(id)),\n+                ModuleDefId::TraitId(id) => insert!(map[keys::TRAIT].insert(id)),\n                 ModuleDefId::AdtId(adt) => match adt {\n-                    AdtId::StructId(strukt) => {\n-                        let loc = strukt.lookup(db);\n-                        if loc.id.file_id() == file_id {\n-                            let src = loc.source(db);\n-                            map[keys::STRUCT].insert(src, strukt)\n-                        }\n-                    }\n-                    AdtId::UnionId(union_) => {\n-                        let loc = union_.lookup(db);\n-                        if loc.id.file_id() == file_id {\n-                            let src = loc.source(db);\n-                            map[keys::UNION].insert(src, union_)\n-                        }\n-                    }\n-                    AdtId::EnumId(enum_) => {\n-                        let loc = enum_.lookup(db);\n-                        if loc.id.file_id() == file_id {\n-                            let src = loc.source(db);\n-                            map[keys::ENUM].insert(src, enum_)\n-                        }\n-                    }\n+                    AdtId::StructId(id) => insert!(map[keys::STRUCT].insert(id)),\n+                    AdtId::UnionId(id) => insert!(map[keys::UNION].insert(id)),\n+                    AdtId::EnumId(id) => insert!(map[keys::ENUM].insert(id)),\n                 },\n                 _ => (),\n             }\n         }\n-        fn add_impl(db: &dyn DefDatabase, file_id: HirFileId, map: &mut DynMap, imp: ImplId) {\n+        fn add_impl(db: &dyn DefDatabase, map: &mut DynMap, file_id: HirFileId, imp: ImplId) {\n             let loc = imp.lookup(db);\n             if loc.id.file_id() == file_id {\n-                let src = loc.source(db);\n-                map[keys::IMPL].insert(src, imp)\n+                map[keys::IMPL].insert(loc.source(db).value, imp)\n             }\n         }\n     }\n@@ -226,12 +171,8 @@ impl ChildBySource for VariantId {\n         for (local_id, source) in arena_map.value.iter() {\n             let id = FieldId { parent, local_id };\n             match source.clone() {\n-                Either::Left(source) => {\n-                    res[keys::TUPLE_FIELD].insert(arena_map.with_value(source), id)\n-                }\n-                Either::Right(source) => {\n-                    res[keys::RECORD_FIELD].insert(arena_map.with_value(source), id)\n-                }\n+                Either::Left(source) => res[keys::TUPLE_FIELD].insert(source, id),\n+                Either::Right(source) => res[keys::RECORD_FIELD].insert(source, id),\n             }\n         }\n     }\n@@ -243,7 +184,7 @@ impl ChildBySource for EnumId {\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n             let id = EnumVariantId { parent: *self, local_id };\n-            res[keys::VARIANT].insert(arena_map.with_value(source.clone()), id)\n+            res[keys::VARIANT].insert(source.clone(), id)\n         }\n     }\n }"}, {"sha": "7febf1b5e86e6fc6f866e4b7b2d3375b843b6baa", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=01c3303270139fea66e797e7e93e502aef1e8eb9", "patch": "@@ -454,14 +454,17 @@ impl HasChildSource<LocalConstParamId> for GenericDefId {\n }\n \n impl ChildBySource for GenericDefId {\n-    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, _: HirFileId) {\n+    fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n+        let (gfile_id, generic_params_list) = file_id_and_params_of(*self, db);\n+        if gfile_id != file_id {\n+            return;\n+        }\n+\n         let generic_params = db.generic_params(*self);\n         let mut types_idx_iter = generic_params.types.iter().map(|(idx, _)| idx);\n         let lts_idx_iter = generic_params.lifetimes.iter().map(|(idx, _)| idx);\n         let consts_idx_iter = generic_params.consts.iter().map(|(idx, _)| idx);\n \n-        let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n-\n         // For traits the first type index is `Self`, skip it.\n         if let GenericDefId::TraitId(_) = *self {\n             types_idx_iter.next().unwrap(); // advance_by(1);\n@@ -470,15 +473,15 @@ impl ChildBySource for GenericDefId {\n         if let Some(generic_params_list) = generic_params_list {\n             for (local_id, ast_param) in types_idx_iter.zip(generic_params_list.type_params()) {\n                 let id = TypeParamId { parent: *self, local_id };\n-                res[keys::TYPE_PARAM].insert(InFile::new(file_id, ast_param), id);\n+                res[keys::TYPE_PARAM].insert(ast_param, id);\n             }\n             for (local_id, ast_param) in lts_idx_iter.zip(generic_params_list.lifetime_params()) {\n                 let id = LifetimeParamId { parent: *self, local_id };\n-                res[keys::LIFETIME_PARAM].insert(InFile::new(file_id, ast_param), id);\n+                res[keys::LIFETIME_PARAM].insert(ast_param, id);\n             }\n             for (local_id, ast_param) in consts_idx_iter.zip(generic_params_list.const_params()) {\n                 let id = ConstParamId { parent: *self, local_id };\n-                res[keys::CONST_PARAM].insert(InFile::new(file_id, ast_param), id);\n+                res[keys::CONST_PARAM].insert(ast_param, id);\n             }\n         }\n     }"}, {"sha": "93c92c1b9c94f347e51b9884ac5e3606b0d7ea09", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c3303270139fea66e797e7e93e502aef1e8eb9/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=01c3303270139fea66e797e7e93e502aef1e8eb9", "patch": "@@ -2,7 +2,7 @@\n \n use std::marker::PhantomData;\n \n-use hir_expand::{InFile, MacroCallId, MacroDefId};\n+use hir_expand::{MacroCallId, MacroDefId};\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n \n@@ -13,7 +13,7 @@ use crate::{\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n \n-pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n+pub type Key<K, V> = crate::dyn_map::Key<K, V, AstPtrPolicy<K, V>>;\n \n pub const FUNCTION: Key<ast::Fn, FunctionId> = Key::new();\n pub const CONST: Key<ast::Const, ConstId> = Key::new();\n@@ -47,17 +47,17 @@ pub struct AstPtrPolicy<AST, ID> {\n }\n \n impl<AST: AstNode + 'static, ID: 'static> Policy for AstPtrPolicy<AST, ID> {\n-    type K = InFile<AST>;\n+    type K = AST;\n     type V = ID;\n-    fn insert(map: &mut DynMap, key: InFile<AST>, value: ID) {\n-        let key = key.as_ref().map(AstPtr::new);\n+    fn insert(map: &mut DynMap, key: AST, value: ID) {\n+        let key = AstPtr::new(&key);\n         map.map\n-            .entry::<FxHashMap<InFile<AstPtr<AST>>, ID>>()\n+            .entry::<FxHashMap<AstPtr<AST>, ID>>()\n             .or_insert_with(Default::default)\n             .insert(key, value);\n     }\n-    fn get<'a>(map: &'a DynMap, key: &InFile<AST>) -> Option<&'a ID> {\n-        let key = key.as_ref().map(AstPtr::new);\n-        map.map.get::<FxHashMap<InFile<AstPtr<AST>>, ID>>()?.get(&key)\n+    fn get<'a>(map: &'a DynMap, key: &AST) -> Option<&'a ID> {\n+        let key = AstPtr::new(key);\n+        map.map.get::<FxHashMap<AstPtr<AST>, ID>>()?.get(&key)\n     }\n }"}]}