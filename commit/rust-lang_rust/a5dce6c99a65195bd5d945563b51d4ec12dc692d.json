{"sha": "a5dce6c99a65195bd5d945563b51d4ec12dc692d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGNlNmM5OWE2NTE5NWJkNWQ5NDU1NjNiNTFkNGVjMTJkYzY5MmQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-17T21:41:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T21:41:00Z"}, "message": "Rollup merge of #86357 - de-vri-es:simplify-repeated-cfg-ifs, r=m-ou-se\n\nRely on libc for correct integer types in os/unix/net/ancillary.rs.\n\nThis PR is a small maintainability improvement. It simplifies `unix/net/ancillary.rs` in `std` by removing the `cfg_ifs` for casting to the correct integer type, and just rely on libc to define the struct correctly.", "tree": {"sha": "68ad655bd615223039677e3014cd70713f7a1471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ad655bd615223039677e3014cd70713f7a1471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5dce6c99a65195bd5d945563b51d4ec12dc692d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy8FsCRBK7hj4Ov3rIwAADkQIACnicZXgK87UflFBgoTdEyeP\nRL7jnDbo33BNF2l6SfVxAk/ejUp2A1UMGjC2qoMmeMF7wsZgHkPa1yFxSSGOB+Hr\nMcovMcYUiyCP47qjyoTEk2061QKYyww0RLAPUvs6JeNQ1XNHix/nxVU/Wzs/cwyT\nGs8aQhtkriYzML3qJiwmPuqCscm2hTGAca30D6+K+OqM8v2BuKpuLmi0WiOsP4hu\n7226cTGxjcWQ7tyYXfhA2qBq5WGR0uFv+iAXKZgKD68HTU7XOylrIDY46nHeju5W\nsz39kFWnWAQJyJVmGC2aj5wRAkab3nUj/WnxbXyB9Ek2GnFfOj8Pu1XS9DrqiRM=\n=LNtg\n-----END PGP SIGNATURE-----\n", "payload": "tree 68ad655bd615223039677e3014cd70713f7a1471\nparent b7dd942e150d1ac58ca03d316ce5b5f69d46988c\nparent 259bf5f47a7247c3ecf7100845953859d02562b4\nauthor Mara Bos <m-ou.se@m-ou.se> 1623966060 +0200\ncommitter GitHub <noreply@github.com> 1623966060 +0200\n\nRollup merge of #86357 - de-vri-es:simplify-repeated-cfg-ifs, r=m-ou-se\n\nRely on libc for correct integer types in os/unix/net/ancillary.rs.\n\nThis PR is a small maintainability improvement. It simplifies `unix/net/ancillary.rs` in `std` by removing the `cfg_ifs` for casting to the correct integer type, and just rely on libc to define the struct correctly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dce6c99a65195bd5d945563b51d4ec12dc692d", "html_url": "https://github.com/rust-lang/rust/commit/a5dce6c99a65195bd5d945563b51d4ec12dc692d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5dce6c99a65195bd5d945563b51d4ec12dc692d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "html_url": "https://github.com/rust-lang/rust/commit/b7dd942e150d1ac58ca03d316ce5b5f69d46988c"}, {"sha": "259bf5f47a7247c3ecf7100845953859d02562b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/259bf5f47a7247c3ecf7100845953859d02562b4", "html_url": "https://github.com/rust-lang/rust/commit/259bf5f47a7247c3ecf7100845953859d02562b4"}], "stats": {"total": 110, "additions": 10, "deletions": 100}, "files": [{"sha": "cd429d1426937e60dff18ce8ad96af2e5ac27fed", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 10, "deletions": 100, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a5dce6c99a65195bd5d945563b51d4ec12dc692d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dce6c99a65195bd5d945563b51d4ec12dc692d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=a5dce6c99a65195bd5d945563b51d4ec12dc692d", "patch": "@@ -32,23 +32,8 @@ pub(super) fn recv_vectored_with_ancillary_from(\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = size_of::<libc::sockaddr_un>() as libc::socklen_t;\n         msg.msg_iov = bufs.as_mut_ptr().cast();\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_iovlen = bufs.len() as libc::size_t;\n-                msg.msg_controllen = ancillary.buffer.len() as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_iovlen = bufs.len() as libc::c_int;\n-                msg.msg_controllen = ancillary.buffer.len() as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_iovlen = bufs.len() as _;\n+        msg.msg_controllen = ancillary.buffer.len() as _;\n         // macos requires that the control pointer is null when the len is 0.\n         if msg.msg_controllen > 0 {\n             msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n@@ -80,23 +65,8 @@ pub(super) fn send_vectored_with_ancillary_to(\n         msg.msg_name = &mut msg_name as *mut _ as *mut _;\n         msg.msg_namelen = msg_namelen;\n         msg.msg_iov = bufs.as_ptr() as *mut _;\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_iovlen = bufs.len() as libc::size_t;\n-                msg.msg_controllen = ancillary.length as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_iovlen = bufs.len() as libc::c_int;\n-                msg.msg_controllen = ancillary.length as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_iovlen = bufs.len() as _;\n+        msg.msg_controllen = ancillary.length as _;\n         // macos requires that the control pointer is null when the len is 0.\n         if msg.msg_controllen > 0 {\n             msg.msg_control = ancillary.buffer.as_mut_ptr().cast();\n@@ -144,21 +114,7 @@ fn add_to_ancillary_data<T>(\n \n         let mut msg: libc::msghdr = zeroed();\n         msg.msg_control = buffer.as_mut_ptr().cast();\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                msg.msg_controllen = *length as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                msg.msg_controllen = *length as libc::socklen_t;\n-            }\n-        }\n+        msg.msg_controllen = *length as _;\n \n         let mut cmsg = libc::CMSG_FIRSTHDR(&msg);\n         let mut previous_cmsg = cmsg;\n@@ -180,21 +136,7 @@ fn add_to_ancillary_data<T>(\n \n         (*previous_cmsg).cmsg_level = cmsg_level;\n         (*previous_cmsg).cmsg_type = cmsg_type;\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as libc::size_t;\n-            } else if #[cfg(any(\n-                          target_os = \"dragonfly\",\n-                          target_os = \"emscripten\",\n-                          target_os = \"freebsd\",\n-                          all(target_os = \"linux\", target_env = \"musl\",),\n-                          target_os = \"macos\",\n-                          target_os = \"netbsd\",\n-                          target_os = \"openbsd\",\n-                      ))] {\n-                (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as libc::socklen_t;\n-            }\n-        }\n+        (*previous_cmsg).cmsg_len = libc::CMSG_LEN(source_len) as _;\n \n         let data = libc::CMSG_DATA(previous_cmsg).cast();\n \n@@ -364,28 +306,10 @@ impl<'a> AncillaryData<'a> {\n \n     fn try_from_cmsghdr(cmsg: &'a libc::cmsghdr) -> Result<Self, AncillaryError> {\n         unsafe {\n-            cfg_if::cfg_if! {\n-                if #[cfg(any(\n-                        target_os = \"android\",\n-                        all(target_os = \"linux\", target_env = \"gnu\"),\n-                        all(target_os = \"linux\", target_env = \"uclibc\"),\n-                   ))] {\n-                    let cmsg_len_zero = libc::CMSG_LEN(0) as libc::size_t;\n-                } else if #[cfg(any(\n-                              target_os = \"dragonfly\",\n-                              target_os = \"emscripten\",\n-                              target_os = \"freebsd\",\n-                              all(target_os = \"linux\", target_env = \"musl\",),\n-                              target_os = \"macos\",\n-                              target_os = \"netbsd\",\n-                              target_os = \"openbsd\",\n-                          ))] {\n-                    let cmsg_len_zero = libc::CMSG_LEN(0) as libc::socklen_t;\n-                }\n-            }\n-            let data_len = (*cmsg).cmsg_len - cmsg_len_zero;\n+            let cmsg_len_zero = libc::CMSG_LEN(0) as usize;\n+            let data_len = (*cmsg).cmsg_len as usize - cmsg_len_zero;\n             let data = libc::CMSG_DATA(cmsg).cast();\n-            let data = from_raw_parts(data, data_len as usize);\n+            let data = from_raw_parts(data, data_len);\n \n             match (*cmsg).cmsg_level {\n                 libc::SOL_SOCKET => match (*cmsg).cmsg_type {\n@@ -419,21 +343,7 @@ impl<'a> Iterator for Messages<'a> {\n         unsafe {\n             let mut msg: libc::msghdr = zeroed();\n             msg.msg_control = self.buffer.as_ptr() as *mut _;\n-            cfg_if::cfg_if! {\n-                if #[cfg(any(target_os = \"android\", all(target_os = \"linux\", target_env = \"gnu\")))] {\n-                    msg.msg_controllen = self.buffer.len() as libc::size_t;\n-                } else if #[cfg(any(\n-                              target_os = \"dragonfly\",\n-                              target_os = \"emscripten\",\n-                              target_os = \"freebsd\",\n-                              all(target_os = \"linux\", target_env = \"musl\",),\n-                              target_os = \"macos\",\n-                              target_os = \"netbsd\",\n-                              target_os = \"openbsd\",\n-                          ))] {\n-                    msg.msg_controllen = self.buffer.len() as libc::socklen_t;\n-                }\n-            }\n+            msg.msg_controllen = self.buffer.len() as _;\n \n             let cmsg = if let Some(current) = self.current {\n                 libc::CMSG_NXTHDR(&msg, current)"}]}