{"sha": "cdbbce0a9e5c839295cf9a8714798af45d541e20", "node_id": "C_kwDOAAsO6NoAKGNkYmJjZTBhOWU1YzgzOTI5NWNmOWE4NzE0Nzk4YWY0NWQ1NDFlMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T23:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T23:20:30Z"}, "message": "Auto merge of #108095 - soc:drop-contains, r=Amanieu\n\nDrop unstable `Option::contains`, `Result::contains`, `Result::contains_err`\n\nThis is a proposal to drop the three functions `Option::contains`, `Result::contains` and `Result::contains_err`.\n\nThe discovery of `Option::is_some_with`/`Result::is_ok_with`/`Result::is_err_with` in https://github.com/rust-lang/rust/pull/93051 obviates the need for these methods (non-stabilization tracked in https://github.com/rust-lang/rust/issues/62358).\n\nAn additional benefit of change is that it avoids spurious error messages in IDEs, when `contains` is supplied by a third-party library:\n![option-result-unstable](https://user-images.githubusercontent.com/42493/219127961-13cb559e-6ee8-4449-8dc9-d28d07270ad5.png)", "tree": {"sha": "765dce46b33eb265e709d5415f7f7258f8d6ce3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765dce46b33eb265e709d5415f7f7258f8d6ce3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbbce0a9e5c839295cf9a8714798af45d541e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbbce0a9e5c839295cf9a8714798af45d541e20", "html_url": "https://github.com/rust-lang/rust/commit/cdbbce0a9e5c839295cf9a8714798af45d541e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbbce0a9e5c839295cf9a8714798af45d541e20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cbb42b730ba4739351b72ce2aa928e78e2f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/478cbb42b730ba4739351b72ce2aa928e78e2f81", "html_url": "https://github.com/rust-lang/rust/commit/478cbb42b730ba4739351b72ce2aa928e78e2f81"}, {"sha": "3aa9f76a3a27e901e478203e00d17fe26a645c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa9f76a3a27e901e478203e00d17fe26a645c66", "html_url": "https://github.com/rust-lang/rust/commit/3aa9f76a3a27e901e478203e00d17fe26a645c66"}], "stats": {"total": 93, "additions": 0, "deletions": 93}, "files": [{"sha": "fcf9707b74d45f35c305f3a049ef02ad5e93b393", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=cdbbce0a9e5c839295cf9a8714798af45d541e20", "patch": "@@ -1780,36 +1780,6 @@ impl<T> Option<T> {\n         mem::replace(self, Some(value))\n     }\n \n-    /// Returns `true` if the option is a [`Some`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Option<u32> = Some(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Option<u32> = None;\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: ~const PartialEq<T>,\n-    {\n-        match self {\n-            Some(y) => x.eq(y),\n-            None => false,\n-        }\n-    }\n-\n     /// Zips `self` with another `Option`.\n     ///\n     /// If `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some((s, o))`."}, {"sha": "76d9b0385d0f2a560b17f8201e879854723c9ca1", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=cdbbce0a9e5c839295cf9a8714798af45d541e20", "patch": "@@ -1531,68 +1531,6 @@ impl<T, E> Result<T, E> {\n             Err(e) => e,\n         }\n     }\n-\n-    /////////////////////////////////////////////////////////////////////////\n-    // Misc or niche\n-    /////////////////////////////////////////////////////////////////////////\n-\n-    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Result<u32, &str> = Ok(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    pub fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: PartialEq<T>,\n-    {\n-        match self {\n-            Ok(y) => x == y,\n-            Err(_) => false,\n-        }\n-    }\n-\n-    /// Returns `true` if the result is an [`Err`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_contains_err)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n-    pub fn contains_err<F>(&self, f: &F) -> bool\n-    where\n-        F: PartialEq<E>,\n-    {\n-        match self {\n-            Ok(_) => false,\n-            Err(e) => f == e,\n-        }\n-    }\n }\n \n impl<T, E> Result<&T, E> {"}, {"sha": "108210b65734bca9eeee45f984635005305be7a8", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbbce0a9e5c839295cf9a8714798af45d541e20/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=cdbbce0a9e5c839295cf9a8714798af45d541e20", "patch": "@@ -95,7 +95,6 @@\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n-#![feature(option_result_contains)]\n #![feature(unsized_tuple_coercion)]\n #![feature(const_option)]\n #![feature(const_option_ext)]"}]}