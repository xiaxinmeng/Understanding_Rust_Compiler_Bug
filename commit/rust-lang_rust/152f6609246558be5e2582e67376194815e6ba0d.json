{"sha": "152f6609246558be5e2582e67376194815e6ba0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MmY2NjA5MjQ2NTU4YmU1ZTI1ODJlNjczNzYxOTQ4MTVlNmJhMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T19:39:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T19:39:58Z"}, "message": "Auto merge of #82235 - GuillaumeGomez:rollup-oflxc08, r=GuillaumeGomez\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79981 (Add 'consider using' message to overflowing_literals)\n - #82094 (To digit simplification)\n - #82105 (Don't fail to remove files if they are missing)\n - #82136 (Fix ICE: Use delay_span_bug for mismatched subst/hir arg)\n - #82169 (Document that `assert!` format arguments are evaluated lazily)\n - #82174 (Replace File::create and write_all with fs::write)\n - #82196 (Add caveat to Path::display() about lossiness)\n - #82198 (Use internal iteration in Iterator::is_sorted_by)\n - #82204 (Update books)\n - #82207 (rustdoc: treat edition 2021 as unstable)\n - #82231 (Add long explanation for E0543)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2ff1f32fc6c1440a034dc09c11ca80613489e1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff1f32fc6c1440a034dc09c11ca80613489e1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152f6609246558be5e2582e67376194815e6ba0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152f6609246558be5e2582e67376194815e6ba0d", "html_url": "https://github.com/rust-lang/rust/commit/152f6609246558be5e2582e67376194815e6ba0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152f6609246558be5e2582e67376194815e6ba0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "html_url": "https://github.com/rust-lang/rust/commit/5ef21063f0c0fd5b973bfa8cb88c0b70982da977"}, {"sha": "03477e9a26fb1d600e21dc33116063f71ba295ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/03477e9a26fb1d600e21dc33116063f71ba295ef", "html_url": "https://github.com/rust-lang/rust/commit/03477e9a26fb1d600e21dc33116063f71ba295ef"}], "stats": {"total": 385, "additions": 280, "deletions": 105}, "files": [{"sha": "5f8a11ab94e666798184c3b3f9c51f04649a3028", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -11,6 +11,7 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n+use rustc_codegen_ssa::back::link::ensure_removed;\n use rustc_codegen_ssa::back::write::{\n     BitcodeSection, CodegenContext, EmitObj, ModuleConfig, TargetMachineFactoryConfig,\n     TargetMachineFactoryFn,\n@@ -879,9 +880,7 @@ pub(crate) unsafe fn codegen(\n \n                 if !config.emit_bc {\n                     debug!(\"removing_bitcode {:?}\", bc_out);\n-                    if let Err(e) = fs::remove_file(&bc_out) {\n-                        diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n-                    }\n+                    ensure_removed(diag_handler, &bc_out);\n                 }\n             }\n "}, {"sha": "972b9bbfe1caff56a00a5c271ebaa9fb52827c9a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n+use rustc_errors::Handler;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n@@ -34,9 +35,11 @@ use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n \n-pub fn remove(sess: &Session, path: &Path) {\n+pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n-        sess.err(&format!(\"failed to remove {}: {}\", path.display(), e));\n+        if e.kind() != io::ErrorKind::NotFound {\n+            diag_handler.err(&format!(\"failed to remove {}: {}\", path.display(), e));\n+        }\n     }\n }\n \n@@ -112,11 +115,11 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n         if !sess.opts.cg.save_temps {\n             let remove_temps_from_module = |module: &CompiledModule| {\n                 if let Some(ref obj) = module.object {\n-                    remove(sess, obj);\n+                    ensure_removed(sess.diagnostic(), obj);\n                 }\n \n                 if let Some(ref obj) = module.dwarf_object {\n-                    remove(sess, obj);\n+                    ensure_removed(sess.diagnostic(), obj);\n                 }\n             };\n "}, {"sha": "b0aed812460071fc4712268e0a527d6512e99d4d", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1,4 +1,4 @@\n-use super::link::{self, remove};\n+use super::link::{self, ensure_removed};\n use super::linker::LinkerInfo;\n use super::lto::{self, SerializedModule};\n use super::symbol_export::symbol_name_for_instance_in_crate;\n@@ -543,7 +543,7 @@ fn produce_final_output_artifacts(\n             copy_gracefully(&path, &crate_output.path(output_type));\n             if !sess.opts.cg.save_temps && !keep_numbered {\n                 // The user just wants `foo.x`, not `foo.#module-name#.x`.\n-                remove(sess, &path);\n+                ensure_removed(sess.diagnostic(), &path);\n             }\n         } else {\n             let ext = crate_output\n@@ -642,33 +642,33 @@ fn produce_final_output_artifacts(\n         for module in compiled_modules.modules.iter() {\n             if let Some(ref path) = module.object {\n                 if !keep_numbered_objects {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n \n             if let Some(ref path) = module.dwarf_object {\n                 if !keep_numbered_objects {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n \n             if let Some(ref path) = module.bytecode {\n                 if !keep_numbered_bitcode {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n         }\n \n         if !user_wants_bitcode {\n             if let Some(ref metadata_module) = compiled_modules.metadata_module {\n                 if let Some(ref path) = metadata_module.bytecode {\n-                    remove(sess, &path);\n+                    ensure_removed(sess.diagnostic(), &path);\n                 }\n             }\n \n             if let Some(ref allocator_module) = compiled_modules.allocator_module {\n                 if let Some(ref path) = allocator_module.bytecode {\n-                    remove(sess, path);\n+                    ensure_removed(sess.diagnostic(), path);\n                 }\n             }\n         }"}, {"sha": "17d2b3386f5febc5264658a7a983fc10cbfc1cf4", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -15,8 +15,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n-use std::fs::File;\n-use std::io::Write;\n use std::path::Path;\n \n pub use self::PpMode::*;\n@@ -375,13 +373,14 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     (src, src_name)\n }\n \n-fn write_output(out: Vec<u8>, ofile: Option<&Path>) {\n+fn write_or_print(out: &str, ofile: Option<&Path>) {\n     match ofile {\n-        None => print!(\"{}\", String::from_utf8(out).unwrap()),\n-        Some(p) => match File::create(p) {\n-            Ok(mut w) => w.write_all(&out).unwrap(),\n-            Err(e) => panic!(\"print-print failed to open {} due to {}\", p.display(), e),\n-        },\n+        None => print!(\"{}\", out),\n+        Some(p) => {\n+            if let Err(e) = std::fs::write(p, out) {\n+                panic!(\"print-print failed to write {} due to {}\", p.display(), e);\n+            }\n+        }\n     }\n }\n \n@@ -417,7 +416,7 @@ pub fn print_after_parsing(\n         unreachable!();\n     };\n \n-    write_output(out.into_bytes(), ofile);\n+    write_or_print(&out, ofile);\n }\n \n pub fn print_after_hir_lowering<'tcx>(\n@@ -477,7 +476,7 @@ pub fn print_after_hir_lowering<'tcx>(\n         _ => unreachable!(),\n     }\n \n-    write_output(out.into_bytes(), ofile);\n+    write_or_print(&out, ofile);\n }\n \n // In an ideal world, this would be a public function called by the driver after\n@@ -503,7 +502,8 @@ fn print_with_analysis(\n     }\n     .unwrap();\n \n-    write_output(out, ofile);\n+    let out = std::str::from_utf8(&out).unwrap();\n+    write_or_print(out, ofile);\n \n     Ok(())\n }"}, {"sha": "8944711f38f4f68819bfcca193e2ef079a22c209", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -286,6 +286,7 @@ E0538: include_str!(\"./error_codes/E0538.md\"),\n E0539: include_str!(\"./error_codes/E0539.md\"),\n E0541: include_str!(\"./error_codes/E0541.md\"),\n E0542: include_str!(\"./error_codes/E0542.md\"),\n+E0543: include_str!(\"./error_codes/E0543.md\"),\n E0545: include_str!(\"./error_codes/E0545.md\"),\n E0546: include_str!(\"./error_codes/E0546.md\"),\n E0547: include_str!(\"./error_codes/E0547.md\"),\n@@ -605,7 +606,6 @@ E0781: include_str!(\"./error_codes/E0781.md\"),\n     E0523,\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes\n-    E0543, // missing 'reason'\n     E0544, // multiple stability levels\n //  E0548, // replaced with a generic attribute input check\n     // rustc_deprecated attribute must be paired with either stable or unstable"}, {"sha": "ba26f92e89f5e3f0b3204524c416a355a6f57251", "filename": "compiler/rustc_error_codes/src/error_codes/E0543.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0543.md?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,35 @@\n+The `reason` value is missing in a stability attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0543\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[stable(since = \"0.1.0\", feature = \"_deprecated_fn\")]\n+#[rustc_deprecated(\n+    since = \"1.0.0\"\n+)] // invalid\n+fn _deprecated_fn() {}\n+```\n+\n+To fix this issue, you need to provide the `reason` field. Example:\n+\n+```\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[stable(since = \"0.1.0\", feature = \"_deprecated_fn\")]\n+#[rustc_deprecated(\n+    since = \"1.0.0\",\n+    reason = \"explanation for deprecation\"\n+)] // ok!\n+fn _deprecated_fn() {}\n+```\n+\n+See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix\n+of the Book and the [Stability attributes][stability-attributes] section of the\n+Rustc Dev Guide for more details.\n+\n+[how-rust-made-nightly]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+[stability-attributes]: https://rustc-dev-guide.rust-lang.org/stability.html"}, {"sha": "792655ff35a54ec32a4bdfc83d72c2173cc750f4", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -225,7 +225,7 @@ fn report_bin_hex_error(\n                 (t.name_str(), actually.to_string())\n             }\n         };\n-        let mut err = lint.build(&format!(\"literal out of range for {}\", t));\n+        let mut err = lint.build(&format!(\"literal out of range for `{}`\", t));\n         err.note(&format!(\n             \"the literal `{}` (decimal `{}`) does not fit into \\\n              the type `{}` and will become `{}{}`\",\n@@ -238,12 +238,12 @@ fn report_bin_hex_error(\n                 let (sans_suffix, _) = repr_str.split_at(pos);\n                 err.span_suggestion(\n                     expr.span,\n-                    &format!(\"consider using `{}` instead\", sugg_ty),\n+                    &format!(\"consider using the type `{}` instead\", sugg_ty),\n                     format!(\"{}{}\", sans_suffix, sugg_ty),\n                     Applicability::MachineApplicable,\n                 );\n             } else {\n-                err.help(&format!(\"consider using `{}` instead\", sugg_ty));\n+                err.help(&format!(\"consider using the type `{}` instead\", sugg_ty));\n             }\n         }\n         err.emit();\n@@ -338,18 +338,23 @@ fn lint_int_literal<'tcx>(\n         }\n \n         cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-            lint.build(&format!(\"literal out of range for `{}`\", t.name_str()))\n-                .note(&format!(\n-                    \"the literal `{}` does not fit into the type `{}` whose range is `{}..={}`\",\n-                    cx.sess()\n-                        .source_map()\n-                        .span_to_snippet(lit.span)\n-                        .expect(\"must get snippet from literal\"),\n-                    t.name_str(),\n-                    min,\n-                    max,\n-                ))\n-                .emit();\n+            let mut err = lint.build(&format!(\"literal out of range for `{}`\", t.name_str()));\n+            err.note(&format!(\n+                \"the literal `{}` does not fit into the type `{}` whose range is `{}..={}`\",\n+                cx.sess()\n+                    .source_map()\n+                    .span_to_snippet(lit.span)\n+                    .expect(\"must get snippet from literal\"),\n+                t.name_str(),\n+                min,\n+                max,\n+            ));\n+            if let Some(sugg_ty) =\n+                get_type_suggestion(&cx.typeck_results().node_type(e.hir_id), v, negative)\n+            {\n+                err.help(&format!(\"consider using the type `{}` instead\", sugg_ty));\n+            }\n+            err.emit();\n         });\n     }\n }"}, {"sha": "03738f1b40a1c0538dcf1fadbb255e083046c325", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -634,14 +634,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     | GenericArgKind::Const(_),\n                     _,\n                 ) => {\n-                    // I *think* that HIR lowering should ensure this\n-                    // doesn't happen, even in erroneous\n-                    // programs. Else we should use delay-span-bug.\n-                    span_bug!(\n+                    // HIR lowering sometimes doesn't catch this in erroneous\n+                    // programs, so we need to use delay_span_bug here. See #82126.\n+                    self.infcx.tcx.sess.delay_span_bug(\n                         hir_arg.span(),\n-                        \"unmatched subst and hir arg: found {:?} vs {:?}\",\n-                        kind,\n-                        hir_arg,\n+                        &format!(\"unmatched subst and hir arg: found {:?} vs {:?}\", kind, hir_arg),\n                     );\n                 }\n             }"}, {"sha": "4533b37f10b422711455ca5443d879443151dca4", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1350,7 +1350,7 @@ pub fn parse_error_format(\n     error_format\n }\n \n-fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n+pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n     let edition = match matches.opt_str(\"edition\") {\n         Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_| {\n             early_error("}, {"sha": "64ae7db0d9b53c7882839ce4f38b97ea475f6fa1", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1,5 +1,6 @@\n //! impl char {}\n \n+use crate::intrinsics::likely;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -330,16 +331,13 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n+        assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // the code is split up here to improve execution speed for cases where\n         // the `radix` is constant and 10 or smaller\n-        let val = if radix <= 10 {\n-            match self {\n-                '0'..='9' => self as u32 - '0' as u32,\n-                _ => return None,\n-            }\n+        let val = if likely(radix <= 10) {\n+            // If not a digit, a number greater than radix will be created.\n+            (self as u32).wrapping_sub('0' as u32)\n         } else {\n-            assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n-\n             match self {\n                 '0'..='9' => self as u32 - '0' as u32,\n                 'a'..='z' => self as u32 - 'a' as u32 + 10,"}, {"sha": "a38b35a5b5c748cfab1214868aed3ecb2d811ebe", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -3327,24 +3327,31 @@ pub trait Iterator {\n     ///\n     /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n-    fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n+    fn is_sorted_by<F>(mut self, compare: F) -> bool\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,\n     {\n+        #[inline]\n+        fn check<'a, T>(\n+            last: &'a mut T,\n+            mut compare: impl FnMut(&T, &T) -> Option<Ordering> + 'a,\n+        ) -> impl FnMut(T) -> bool + 'a {\n+            move |curr| {\n+                if let Some(Ordering::Greater) | None = compare(&last, &curr) {\n+                    return false;\n+                }\n+                *last = curr;\n+                true\n+            }\n+        }\n+\n         let mut last = match self.next() {\n             Some(e) => e,\n             None => return true,\n         };\n \n-        while let Some(curr) = self.next() {\n-            if let Some(Ordering::Greater) | None = compare(&last, &curr) {\n-                return false;\n-            }\n-            last = curr;\n-        }\n-\n-        true\n+        self.all(check(&mut last, compare))\n     }\n \n     /// Checks if the elements of this iterator are sorted using the given key extraction"}, {"sha": "97315769957d5f30dc73bb8526cf24146354fd1b", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1209,7 +1209,8 @@ pub(crate) mod builtin {\n     ///\n     /// This macro has a second form, where a custom panic message can\n     /// be provided with or without arguments for formatting. See [`std::fmt`]\n-    /// for syntax for this form.\n+    /// for syntax for this form. Expressions used as format arguments will only\n+    /// be evaluated if the assertion fails.\n     ///\n     /// [`std::fmt`]: ../std/fmt/index.html\n     ///"}, {"sha": "581c09e23dfa613012599d28a565b3e3d46a6f63", "filename": "library/std/src/path.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -2321,7 +2321,9 @@ impl Path {\n     }\n \n     /// Returns an object that implements [`Display`] for safely printing paths\n-    /// that may contain non-Unicode data.\n+    /// that may contain non-Unicode data. This may perform lossy conversion,\n+    /// depending on the platform.  If you would like an implementation which\n+    /// escapes the path please use [`Debug`] instead.\n     ///\n     /// [`Display`]: fmt::Display\n     ///\n@@ -2555,7 +2557,9 @@ impl fmt::Debug for Path {\n ///\n /// A [`Path`] might contain non-Unicode data. This `struct` implements the\n /// [`Display`] trait in a way that mitigates that. It is created by the\n-/// [`display`](Path::display) method on [`Path`].\n+/// [`display`](Path::display) method on [`Path`]. This may perform lossy\n+/// conversion, depending on the platform. If you would like an implementation\n+/// which escapes the path please use [`Debug`] instead.\n ///\n /// # Examples\n ///"}, {"sha": "db5e8a5105aa22979490dce30e33b68d8645761d", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit e724bd826580ff95df48a8533af7dec1080693d4\n+Subproject commit db5e8a5105aa22979490dce30e33b68d8645761d"}, {"sha": "1da3c411f17adb1ba5de1683bb6acee83362b54a", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit b91a9a881ee007c12e74e844460ec407cf07a50f\n+Subproject commit 1da3c411f17adb1ba5de1683bb6acee83362b54a"}, {"sha": "4cf7981696a85c3e633076c6401611bd3f6346c4", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit ceec19e873be87c6ee5666b030c6bb612f889a96\n+Subproject commit 4cf7981696a85c3e633076c6401611bd3f6346c4"}, {"sha": "adca786547d08fe676b2fc7a6f08c2ed5280ca38", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit bbf06ad39d1f45654047e9596b750cc6e6d1b693\n+Subproject commit adca786547d08fe676b2fc7a6f08c2ed5280ca38"}, {"sha": "361367c126290ac17cb4089f8d38fd8b2ac43f98", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit f02b09eb6e8af340ad1256a54adb7aae2ff3163e\n+Subproject commit 361367c126290ac17cb4089f8d38fd8b2ac43f98"}, {"sha": "551cc4bc8394feccea6acd21f86d9a4e1d2271a0", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -1 +1 @@\n-Subproject commit f633769acef68574427a6fae6c06f13bc2199573\n+Subproject commit 551cc4bc8394feccea6acd21f86d9a4e1d2271a0"}, {"sha": "1478437cefaa3af0513e3056874856d632f7b21c", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -16,7 +16,7 @@ use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, E\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n-use rustc_span::edition::{Edition, DEFAULT_EDITION};\n+use rustc_span::edition::Edition;\n use rustc_target::spec::TargetTriple;\n \n use crate::core::new_handler;\n@@ -469,17 +469,7 @@ impl Options {\n             }\n         }\n \n-        let edition = if let Some(e) = matches.opt_str(\"edition\") {\n-            match e.parse() {\n-                Ok(e) => e,\n-                Err(_) => {\n-                    diag.struct_err(\"could not parse edition\").emit();\n-                    return Err(1);\n-                }\n-            }\n-        } else {\n-            DEFAULT_EDITION\n-        };\n+        let edition = config::parse_crate_edition(&matches);\n \n         let mut id_map = html::markdown::IdMap::new();\n         id_map.populate(&html::render::INITIAL_IDS);"}, {"sha": "2e6b88a4beba8ccbcf4ecb5ce7f4f1fadecf549b", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for #82126. Checks that mismatched lifetimes and types are\n+// properly handled.\n+\n+// edition:2018\n+\n+use std::sync::Mutex;\n+\n+struct MarketMultiplier {}\n+\n+impl MarketMultiplier {\n+    fn buy(&mut self) -> &mut usize {\n+        todo!()\n+    }\n+}\n+\n+async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^^ ERROR this struct takes 1 type argument but 0 type arguments were supplied\n+    LockedMarket(generator.lock().unwrap().buy())\n+    //~^ ERROR cannot return value referencing temporary value\n+}\n+\n+struct LockedMarket<T>(T);\n+\n+fn main() {}"}, {"sha": "b6844f50488e106f7a37415619fa4d489455cc7c", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,43 @@\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+   |                                                           ^^^^^^^^^^^^---- help: remove these generics\n+   |                                                           |\n+   |                                                           expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+   |\n+LL | struct LockedMarket<T>(T);\n+   |        ^^^^^^^^^^^^\n+\n+error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n+   |                                                           ^^^^^^^^^^^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+   |\n+LL | struct LockedMarket<T>(T);\n+   |        ^^^^^^^^^^^^ -\n+help: add missing type argument\n+   |\n+LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n+   |                                                                          ^^^\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5\n+   |\n+LL |     LockedMarket(generator.lock().unwrap().buy())\n+   |     ^^^^^^^^^^^^^-------------------------^^^^^^^\n+   |     |            |\n+   |     |            temporary value created here\n+   |     returns a value referencing data owned by the current function\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0515.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "043011b3316a7c195f3e8817df0de3fc73f8e45a", "filename": "src/test/ui/debuginfo-emit-llvm-ir-and-split-debuginfo.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,7 @@\n+// build-pass\n+//\n+// compile-flags: -g --emit=llvm-ir -Zunstable-options -Csplit-debuginfo=unpacked\n+//\n+// Make sure that we don't explode with an error if we don't actually end up emitting any `dwo`s,\n+// as would be the case if we don't actually codegen anything.\n+#![crate_type=\"rlib\"]"}, {"sha": "43830679535de59b8bf79dac384098adb20f398e", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -10,6 +10,7 @@ note: the lint level is defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12\n@@ -18,6 +19,7 @@ LL |     Ci16 = 55555,\n    |            ^^^^^\n    |\n    = note: the literal `55555` does not fit into the type `i16` whose range is `-32768..=32767`\n+   = help: consider using the type `u16` instead\n \n error: literal out of range for `i32`\n   --> $DIR/enum-discrim-too-small2.rs:22:12\n@@ -26,6 +28,7 @@ LL |     Ci32 = 3_000_000_000,\n    |            ^^^^^^^^^^^^^\n    |\n    = note: the literal `3_000_000_000` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i64`\n   --> $DIR/enum-discrim-too-small2.rs:29:12\n@@ -34,6 +37,7 @@ LL |     Ci64 = 9223372036854775809,\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n+   = help: consider using the type `u64` instead\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e9725a027d379fce2ef3304e11ab7c772e7543d3", "filename": "src/test/ui/issues/issue-79744.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let elem = 6i8;\n+    let e2 = 230;\n+    //~^ ERROR literal out of range for `i8`\n+    //~| HELP consider using the type `u8` instead\n+\n+    let mut vec = Vec::new();\n+\n+    vec.push(e2);\n+    vec.push(elem);\n+\n+    println!(\"{:?}\", vec);\n+}"}, {"sha": "6f6dd44d2369e644c957e9d86c583561294c6248", "filename": "src/test/ui/issues/issue-79744.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,12 @@\n+error: literal out of range for `i8`\n+  --> $DIR/issue-79744.rs:3:14\n+   |\n+LL |     let e2 = 230;\n+   |              ^^^\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+   = note: the literal `230` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "3562cb440a661403abfd8c5439e955fba75f7fc7", "filename": "src/test/ui/lint/lint-type-limits2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -18,6 +18,7 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "823d1a4c76fd6407939e7d56a73aa8cf40b73dc5", "filename": "src/test/ui/lint/lint-type-limits3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -18,6 +18,7 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `200` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "1bb1ec5477609bbd62f94b1f5c9816bb1fedd1ca", "filename": "src/test/ui/lint/lint-type-overflow.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -26,6 +26,7 @@ LL |     let x1: i8 = 128;\n    |                  ^^^\n    |\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:18:19\n@@ -34,6 +35,7 @@ LL |     let x3: i8 = -129;\n    |                   ^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:19:19\n@@ -42,6 +44,7 @@ LL |     let x3: i8 = -(129);\n    |                   ^^^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:20:20\n@@ -50,6 +53,7 @@ LL |     let x3: i8 = -{129};\n    |                    ^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:22:10\n@@ -58,6 +62,7 @@ LL |     test(1000);\n    |          ^^^^\n    |\n    = note: the literal `1000` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:24:13\n@@ -66,6 +71,7 @@ LL |     let x = 128_i8;\n    |             ^^^^^^\n    |\n    = note: the literal `128_i8` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:28:14\n@@ -74,6 +80,7 @@ LL |     let x = -129_i8;\n    |              ^^^^^^\n    |\n    = note: the literal `129_i8` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:32:18\n@@ -82,6 +89,7 @@ LL |     let x: i32 = 2147483648;\n    |                  ^^^^^^^^^^\n    |\n    = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:33:13\n@@ -90,6 +98,7 @@ LL |     let x = 2147483648_i32;\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: the literal `2147483648_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:36:19\n@@ -98,6 +107,7 @@ LL |     let x: i32 = -2147483649;\n    |                   ^^^^^^^^^^\n    |\n    = note: the literal `2147483649` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `i64` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:37:14\n@@ -106,6 +116,7 @@ LL |     let x = -2147483649_i32;\n    |              ^^^^^^^^^^^^^^\n    |\n    = note: the literal `2147483649_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `i64` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:38:13\n@@ -114,6 +125,7 @@ LL |     let x = 2147483648;\n    |             ^^^^^^^^^^\n    |\n    = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:40:13\n@@ -122,6 +134,7 @@ LL |     let x = 9223372036854775808_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775808_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n+   = help: consider using the type `u64` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:42:13\n@@ -130,6 +143,7 @@ LL |     let x = 18446744073709551615_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `18446744073709551615_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n+   = help: consider using the type `u64` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:43:19\n@@ -138,6 +152,7 @@ LL |     let x: i64 = -9223372036854775809;\n    |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n+   = help: consider using the type `i128` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:44:14\n@@ -146,6 +161,7 @@ LL |     let x = -9223372036854775809_i64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n+   = help: consider using the type `i128` instead\n \n error: aborting due to 18 previous errors\n "}, {"sha": "3d40cdf96efdb0937b7ce1c26694c908177f2f1c", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -10,6 +10,7 @@ note: the lint level is defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:9:14"}, {"sha": "6234b794c1f48ce8a053609b486cf69303efe974", "filename": "src/test/ui/lint/type-overflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -7,16 +7,16 @@ fn main() {\n     let ok = 0b1000_0001; // should be ok -> i32\n     let ok = 0b0111_1111i8; // should be ok -> 127i8\n \n-    let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n+    let fail = 0b1000_0001i8; //~WARNING literal out of range for `i8`\n \n-    let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n+    let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for `i64`\n \n-    let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n+    let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for `u32`\n \n     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n-    //~^ WARNING literal out of range for i128\n+    //~^ WARNING literal out of range for `i128`\n \n-    let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n+    let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for `i32`\n \n-    let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n+    let fail = -0b1111_1111i8; //~WARNING literal out of range for `i8`\n }"}, {"sha": "521223e325650b637d5f679d8b620aa348192b50", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -10,54 +10,55 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `255i8` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:10:16\n    |\n LL |     let fail = 0b1000_0001i8;\n-   |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n+   |                ^^^^^^^^^^^^^ help: consider using the type `u8` instead: `0b1000_0001u8`\n    |\n    = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into the type `i8` and will become `-127i8`\n \n-warning: literal out of range for i64\n+warning: literal out of range for `i64`\n   --> $DIR/type-overflow.rs:12:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x8000_0000_0000_0000u64`\n    |\n    = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into the type `i64` and will become `-9223372036854775808i64`\n \n-warning: literal out of range for u32\n+warning: literal out of range for `u32`\n   --> $DIR/type-overflow.rs:14:16\n    |\n LL |     let fail = 0x1_FFFF_FFFFu32;\n-   |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n+   |                ^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x1_FFFF_FFFFu64`\n    |\n    = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into the type `u32` and will become `4294967295u32`\n \n-warning: literal out of range for i128\n+warning: literal out of range for `i128`\n   --> $DIR/type-overflow.rs:16:22\n    |\n LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into the type `i128` and will become `-170141183460469231731687303715884105728i128`\n-   = help: consider using `u128` instead\n+   = help: consider using the type `u128` instead\n \n-warning: literal out of range for i32\n+warning: literal out of range for `i32`\n   --> $DIR/type-overflow.rs:19:16\n    |\n LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE;\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into the type `i32` and will become `-2i32`\n-   = help: consider using `i128` instead\n+   = help: consider using the type `i128` instead\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:21:17\n    |\n LL |     let fail = -0b1111_1111i8;\n-   |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`\n+   |                 ^^^^^^^^^^^^^ help: consider using the type `i16` instead: `0b1111_1111i16`\n    |\n    = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into the type `i8` and will become `-1i8`\n "}, {"sha": "c7f05d763b7a45597fa73cfcf2f287be376ce4e0", "filename": "src/test/ui/macros/assert-format-lazy.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+// compile-flags: -C debug_assertions=yes\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    assert!(true, \"Failed: {:?}\", panic!(\"assert! evaluated format expressions\"));\n+    debug_assert!(true, \"Failed: {:?}\", panic!(\"debug_assert! evaluated format expressions\"));\n+    assert_eq!(1, 1, \"Failed: {:?}\", panic!(\"assert_eq! evaluated format expressions\"));\n+    debug_assert_eq!(1, 1, \"Failed: {:?}\", panic!(\"debug_assert_eq! evaluated format expressions\"));\n+    assert_ne!(1, 2, \"Failed: {:?}\", panic!(\"assert_ne! evaluated format expressions\"));\n+    debug_assert_ne!(1, 2, \"Failed: {:?}\", panic!(\"debug_assert_ne! evaluated format expressions\"));\n+}"}, {"sha": "715eb00974ee27a8102d06f4ac24dba9b87a9a99", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152f6609246558be5e2582e67376194815e6ba0d/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=152f6609246558be5e2582e67376194815e6ba0d", "patch": "@@ -116,5 +116,5 @@ LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n \n error: aborting due to 19 previous errors\n \n-Some errors have detailed explanations: E0539, E0541, E0542, E0546, E0547, E0550.\n+Some errors have detailed explanations: E0539, E0541, E0542, E0543, E0546, E0547, E0550.\n For more information about an error, try `rustc --explain E0539`."}]}