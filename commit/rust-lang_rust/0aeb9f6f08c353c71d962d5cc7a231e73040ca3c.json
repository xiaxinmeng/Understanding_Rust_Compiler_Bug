{"sha": "0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWI5ZjZmMDhjMzUzYzcxZDk2MmQ1Y2M3YTIzMWU3MzA0MGNhM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T08:42:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-04T08:42:22Z"}, "message": "Auto merge of #26002 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25900, #25987, #25988, #25990, #25994, #26000\n- Failed merges:", "tree": {"sha": "37ac7efa631a9ffd2a32c330b3223135d3c711fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37ac7efa631a9ffd2a32c330b3223135d3c711fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "html_url": "https://github.com/rust-lang/rust/commit/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d08a37b6215a59ecce042f36ad446c5357b543", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d08a37b6215a59ecce042f36ad446c5357b543", "html_url": "https://github.com/rust-lang/rust/commit/80d08a37b6215a59ecce042f36ad446c5357b543"}, {"sha": "fd3b6ca508ed99004a11291ef1d2c64104102a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3b6ca508ed99004a11291ef1d2c64104102a41", "html_url": "https://github.com/rust-lang/rust/commit/fd3b6ca508ed99004a11291ef1d2c64104102a41"}], "stats": {"total": 195, "additions": 183, "deletions": 12}, "files": [{"sha": "f398388574780596bbc8ddb6422af08f6d4ec107", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -338,7 +338,7 @@ Hajime Morrita <omo@dodgson.org>\n Hanno Braun <mail@hannobraun.de>\n Harry Marr <harry.marr@gmail.com>\n Heather <heather@cynede.net>\n-Heejong Ahn <heejongahn@gmail.com\n+Heejong Ahn <heejongahn@gmail.com>\n Henrik Schopmans <h.schopmans@googlemail.com>\n Herman J. Radtke III <herman@hermanradtke.com>\n HeroesGrave <heroesgrave@gmail.com>"}, {"sha": "d56ecb360cfed3ccd675813feaee24f0b7547518", "filename": "src/doc/reference.md", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -3599,6 +3599,147 @@ The notation `&self` is a shorthand for `self: &Self`. In this case,\n in the impl, `Self` refers to the value of type `String` that is the\n receiver for a call to the method `make_string`.\n \n+## Subtyping\n+\n+Subtyping is implicit and can occur at any stage in type checking or\n+inference. Subtyping in Rust is very restricted and occurs only due to\n+variance with respect to lifetimes and between types with higher ranked\n+lifetimes. If we were to erase lifetimes from types, then the only subtyping\n+would be due to type equality.\n+\n+Consider the following example: string literals always have `'static`\n+lifetime. Nevertheless, we can assign `s` to `t`:\n+\n+```\n+fn bar<'a>() {\n+    let s: &'static str = \"hi\";\n+    let t: &'a str = s;\n+}\n+```\n+Since `'static` \"lives longer\" than `'a`, `&'static str` is a subtype of\n+`&'a str`.\n+\n+## Type coercions\n+\n+Coercions are defined in [RFC401]. A coercion is implicit and has no syntax.\n+\n+[RFC401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+\n+### Coercion sites\n+\n+A coercion can only occur at certain coercion sites in a program; these are\n+typically places where the desired type is explicit or can be dervied by\n+propagation from explicit types (without type inference). Possible coercion\n+sites are:\n+\n+* `let` statements where an explicit type is given.\n+\n+    In `let _: U = e;`, `e` is coerced to have type `U`.\n+\n+* `static` and `const` statements (similar to `let` statements).\n+\n+* arguments for function calls.\n+\n+    The value being coerced is the\n+    actual parameter and it is coerced to the type of the formal parameter. For\n+    example, let `foo` be defined as `fn foo(x: U) { ... }` and call it as\n+    `foo(e);`. Then `e` is coerced to have type `U`;\n+\n+* instantiations of struct or variant fields.\n+\n+    Assume we have a `struct\n+    Foo { x: U }` and instantiate it as `Foo { x: e }`. Then `e` is coerced to\n+    have type `U`.\n+\n+* function results (either the final line of a block if it is not semicolon\n+terminated or any expression in a `return` statement).\n+\n+    In `fn foo() -> U { e }`, `e` is coerced to to have type `U`.\n+\n+If the expression in one of these coercion sites is a coercion-propagating\n+expression, then the relevant sub-expressions in that expression are also\n+coercion sites. Propagation recurses from these new coercion sites.\n+Propagating expressions and their relevant sub-expressions are:\n+\n+* array literals, where the array has type `[U; n]`. Each sub-expression in\n+the array literal is a coercion site for coercion to type `U`.\n+\n+* array literals with repeating syntax, where the array has type `[U; n]`. The\n+repeated sub-expression is a coercion site for coercion to type `U`.\n+\n+* tuples, where a tuple is a coercion site to type `(U_0, U_1, ..., U_n)`.\n+Each sub-expression is a coercion site to the respective type, e.g. the\n+zeroth sub-expression is a coercion site to type `U_0`.\n+\n+* parenthesised sub-expressions (`(e)`). If the expression has type `U`, then\n+the sub-expression is a coercion site to `U`.\n+\n+* blocks. If a block has type `U`, then the last expression in the block (if\n+it is not semicolon-terminated) is a coercion site to `U`. This includes\n+blocks which are part of control flow statements, such as `if`/`else`, if\n+the block has a known type.\n+\n+### Coercion types\n+\n+Coercion is allowed between the following types:\n+\n+* `T` to `U` if `T` is a subtype of `U` (*reflexive case*).\n+\n+* `T_1` to `T_3` where `T_1` coerces to `T_2` and `T_2` coerces to `T_3`\n+(*transitive case*).\n+\n+    Note that this is not fully supported yet\n+\n+* `&mut T` to `&T`.\n+\n+* `*mut T` to `*const T`.\n+\n+* `&T` to `*const T`.\n+\n+* `&mut T` to `*mut T`.\n+\n+* `&T` to `&U` if `T` implements `Deref<Target = U>`. For example:\n+\n+```rust\n+use std::ops::Deref;\n+\n+struct CharContainer {\n+    value: char\n+}\n+\n+impl Deref for CharContainer {\n+    type Target = char;\n+\n+    fn deref<'a>(&'a self) -> &'a char {\n+        &self.value\n+    }\n+}\n+\n+fn foo(arg: &char) {}\n+\n+fn main() {\n+    let x = &mut CharContainer { value: 'y' };\n+    foo(x); //&mut CharContainer is coerced to &char.\n+}\n+```\n+* `&mut T` to `&mut U` if `T` implements `DerefMut<Target = U>`.\n+\n+* TyCtor(`T`) to TyCtor(coerce_inner(`T`)), where TyCtor(`T`) is one of\n+    - `&T`\n+    - `&mut T`\n+    - `*const T`\n+    - `*mut T`\n+    - `Box<T>`\n+\n+    and where\n+    - coerce_inner(`[T, ..n]`) = `[T]`\n+    - coerce_inner(`T`) = `U` where `T` is a concrete type which implements the\n+    trait `U`.\n+\n+    In the future, coerce_inner will be recursively extended to tuples and\n+    structs. In addition, coercions from sub-traits to super-traits will be\n+    added. See [RFC401] for more details.\n+\n # Special traits\n \n Several traits define special evaluation behavior."}, {"sha": "003c4b2b78c5ccc8e3f790b4c4f298e5758b4859", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -223,7 +223,9 @@\n //! }\n //! ```\n //!\n-//! `try!` is imported by the prelude, and is available everywhere.\n+//! `try!` is imported by the prelude and is available everywhere, but it can only\n+//! be used in functions that return `Result` because of the early return of\n+//! `Err` that it provides.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "28e48cb6f2544f6c4db7a9aef09d67b39f097d03", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -238,14 +238,12 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n /// Let `v` be some value (either temporary or named) and 'a be some\n /// lifetime (scope). If the type of `v` owns data of type `D`, where\n ///\n-///   (1.) `D` has a lifetime- or type-parametric Drop implementation, and\n-///   (2.) the structure of `D` can reach a reference of type `&'a _`, and\n-///   (3.) either:\n-///\n-///     (A.) the Drop impl for `D` instantiates `D` at 'a directly,\n+/// * (1.) `D` has a lifetime- or type-parametric Drop implementation, and\n+/// * (2.) the structure of `D` can reach a reference of type `&'a _`, and\n+/// * (3.) either:\n+///   * (A.) the Drop impl for `D` instantiates `D` at 'a directly,\n ///          i.e. `D<'a>`, or,\n-///\n-///     (B.) the Drop impl for `D` has some type parameter with a\n+///   * (B.) the Drop impl for `D` has some type parameter with a\n ///          trait bound `T` where `T` is a trait that has at least\n ///          one method,\n ///"}, {"sha": "706571b67c9ac4b0108470f01eb1353adcafd139", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -117,7 +117,34 @@ macro_rules! println {\n }\n \n /// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`.\n+/// error if the value of the expression is `Err`. Can only be used in\n+/// functions that return `Result` because of the early return of `Err` that\n+/// it provides.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::io;\n+/// use std::fs::File;\n+/// use std::io::prelude::*;\n+///\n+/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     try!(file.write_all(b\"This is a list of my best friends.\"));\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// // This is equivalent to:\n+/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     match file.write_all(b\"This is a list of my best friends.\") {\n+///         Ok(_) => (),\n+///         Err(e) => return Err(e),\n+///     }\n+///     println!(\"I wrote to the file\");\n+///     Ok(())\n+/// }\n+/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! try {"}, {"sha": "857d8889b7c25dfe9e2e9b705f721325035ba03a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -24,6 +24,10 @@ use sys_common::rwlock as sys;\n /// of the underlying data (exclusive access) and the read portion of this lock\n /// typically allows for read-only access (shared access).\n ///\n+/// The priority policy of the lock is dependent on the underlying operating\n+/// system's implementation, and this type does not guarantee that any\n+/// particular policy will be used.\n+///\n /// The type parameter `T` represents the data that this lock protects. It is\n /// required that `T` satisfies `Send` to be shared across threads and `Sync` to\n /// allow concurrent access through readers. The RAII guards returned from the"}, {"sha": "420b27b83957b57c7606050d5ccc178cf6a0c455", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0aeb9f6f08c353c71d962d5cc7a231e73040ca3c", "patch": "@@ -2070,10 +2070,9 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 if try!(self.eat_lt()){\n-\n                     let (qself, path) =\n                         try!(self.parse_qualified_path(LifetimeAndTypesWithColons));\n-\n+                    hi = path.span.hi;\n                     return Ok(self.mk_expr(lo, hi, ExprPath(Some(qself), path)));\n                 }\n                 if try!(self.eat_keyword(keywords::Move) ){"}]}