{"sha": "1ba6140891cb1ecaddcb097d22007938bbb34dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYTYxNDA4OTFjYjFlY2FkZGNiMDk3ZDIyMDA3OTM4YmJiMzRkY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-25T19:22:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-25T19:22:06Z"}, "message": "rustup", "tree": {"sha": "fdfc3cf9b4567c2c8e55eb4c5f6e6c13e101d48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdfc3cf9b4567c2c8e55eb4c5f6e6c13e101d48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ba6140891cb1ecaddcb097d22007938bbb34dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba6140891cb1ecaddcb097d22007938bbb34dcd", "html_url": "https://github.com/rust-lang/rust/commit/1ba6140891cb1ecaddcb097d22007938bbb34dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ba6140891cb1ecaddcb097d22007938bbb34dcd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823837922bfc55c715a170fda3aa5823ead2e235", "url": "https://api.github.com/repos/rust-lang/rust/commits/823837922bfc55c715a170fda3aa5823ead2e235", "html_url": "https://github.com/rust-lang/rust/commit/823837922bfc55c715a170fda3aa5823ead2e235"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "6847d8e546f363835f94a5bec8708b0457d37491", "filename": "src/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ba6140891cb1ecaddcb097d22007938bbb34dcd/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba6140891cb1ecaddcb097d22007938bbb34dcd/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=1ba6140891cb1ecaddcb097d22007938bbb34dcd", "patch": "@@ -4,7 +4,7 @@ use rustc::ty;\n \n use rustc::mir::interpret::{EvalResult, Scalar, ScalarMaybeUndef};\n use rustc_mir::interpret::{\n-    PlaceExtra, PlaceTy, EvalContext, OpTy, Value\n+    PlaceTy, EvalContext, OpTy, Value\n };\n \n use super::{ScalarExt, FalibleScalarExt, OperatorEvalContextExt};\n@@ -293,7 +293,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                         _ => {\n                             // Do it in memory\n                             let mplace = self.force_allocation(dest)?;\n-                            assert_eq!(mplace.extra, PlaceExtra::None);\n+                            assert!(mplace.extra.is_none());\n                             self.memory.write_repeat(mplace.ptr, 0, dest.layout.size)?;\n                         }\n                     }\n@@ -550,7 +550,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                         _ => {\n                             // Do it in memory\n                             let mplace = self.force_allocation(dest)?;\n-                            assert_eq!(mplace.extra, PlaceExtra::None);\n+                            assert!(mplace.extra.is_none());\n                             self.memory.mark_definedness(mplace.ptr.to_ptr()?, dest.layout.size, false)?;\n                         }\n                     }"}, {"sha": "b0148c16f3e858dc27ccd86ba4a0b3c20d2acf86", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ba6140891cb1ecaddcb097d22007938bbb34dcd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba6140891cb1ecaddcb097d22007938bbb34dcd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1ba6140891cb1ecaddcb097d22007938bbb34dcd", "patch": "@@ -315,7 +315,7 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     ) -> EvalResult<'tcx, &'m mut Allocation> {\n         // Make a copy, use that.\n         mem.deep_copy_static(id, MiriMemoryKind::MutStatic.into())?;\n-        mem.get_mut(id) // this is recursive, but now we know that `id` is in `alloc_map`\n+        mem.get_mut(id) // this is recursive, but now we know that `id` is in `alloc_map` now\n     }\n \n     fn box_alloc<'a>("}]}