{"sha": "4cd0ee9343da86d9770bf0a514a682d240e0dce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDBlZTkzNDNkYTg2ZDk3NzBiZjBhNTE0YTY4MmQyNDBlMGRjZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T07:01:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-16T07:01:59Z"}, "message": "Auto merge of #74388 - Manishearth:rollup-i7iueu8, r=Manishearth\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #73421 (Clarify effect of orphan rule changes on From/Into)\n - #74037 (Update reference to CONTRIBUTING.md)\n - #74203 (Enforce the static symbol order.)\n - #74295 (Add and fix BTreeMap comments)\n - #74352 (Use local links in the alloc docs.)\n - #74377 (Move libstd's default feature to libtest)\n - #74381 (Update docs for str::as_bytes_mut.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b47df8dd7e6cd3c15ea3dc06e71037ddf1c32e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47df8dd7e6cd3c15ea3dc06e71037ddf1c32e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd0ee9343da86d9770bf0a514a682d240e0dce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd0ee9343da86d9770bf0a514a682d240e0dce8", "html_url": "https://github.com/rust-lang/rust/commit/4cd0ee9343da86d9770bf0a514a682d240e0dce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd0ee9343da86d9770bf0a514a682d240e0dce8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e29de5e8a2908260d54182638241ff086a26c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e29de5e8a2908260d54182638241ff086a26c2", "html_url": "https://github.com/rust-lang/rust/commit/e2e29de5e8a2908260d54182638241ff086a26c2"}, {"sha": "a77813b8d0866a474a9a853d5a479ebc052bef06", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77813b8d0866a474a9a853d5a479ebc052bef06", "html_url": "https://github.com/rust-lang/rust/commit/a77813b8d0866a474a9a853d5a479ebc052bef06"}], "stats": {"total": 399, "additions": 217, "deletions": 182}, "files": [{"sha": "2a4c42ea0a456555e9afb33d57d17272985f355f", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -4,5 +4,12 @@ Thank you for your interest in contributing to Rust!\n \n To get started, read the [Getting Started] guide in the [rustc-dev-guide].\n \n+## Bug reports\n+\n+Did a compiler error message tell you to come here? If you want to create an ICE report,\n+refer to [this section][contributing-bug-reports] and [open an issue][issue template].\n+\n [Getting Started]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n+[contributing-bug-reports]: https://rustc-dev-guide.rust-lang.org/contributing.html#bug-reports\n+[issue template]: https://github.com/rust-lang/rust/issues/new/choose"}, {"sha": "f6060ac14e75ebafb23b42c3e0114929846e52fb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -773,7 +773,8 @@ impl<'a> Builder<'a> {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n                 Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n-                _ => self.crate_doc_out(target),\n+                Mode::Std => out_dir.join(target).join(\"doc\"),\n+                _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n             let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);"}, {"sha": "3121690285868a21f163e6618948f9afff41aaf4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -417,34 +417,16 @@ impl Step for Std {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std).join(target).join(\"doc\");\n \n-        // Here what we're doing is creating a *symlink* (directory junction on\n-        // Windows) to the final output location. This is not done as an\n-        // optimization but rather for correctness. We've got three trees of\n-        // documentation, one for std, one for test, and one for rustc. It's then\n-        // our job to merge them all together.\n-        //\n-        // Unfortunately rustbuild doesn't know nearly as well how to merge doc\n-        // trees as rustdoc does itself, so instead of actually having three\n-        // separate trees we just have rustdoc output to the same location across\n-        // all of them.\n-        //\n-        // This way rustdoc generates output directly into the output, and rustdoc\n-        // will also directly handle merging.\n-        let my_out = builder.crate_doc_out(target);\n-        t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo =\n                 builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n             compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n-            cargo.arg(\"-p\").arg(package);\n-            // Create all crate output directories first to make sure rustdoc uses\n-            // relative links.\n-            // FIXME: Cargo should probably do this itself.\n-            t!(fs::create_dir_all(out_dir.join(package)));\n             cargo\n+                .arg(\"-p\")\n+                .arg(package)\n                 .arg(\"--\")\n                 .arg(\"--markdown-css\")\n                 .arg(\"rust.css\")\n@@ -462,11 +444,17 @@ impl Step for Std {\n         // folder structure, that would also build internal crates that we do\n         // not want to show in documentation. These crates will later be visited\n         // by the rustc step, so internal documentation will show them.\n-        let krates = [\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"];\n+        //\n+        // Note that the order here is important! The crates need to be\n+        // processed starting from the leaves, otherwise rustdoc will not\n+        // create correct links between crates because rustdoc depends on the\n+        // existence of the output directories to know if it should be a local\n+        // or remote link.\n+        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }\n-        builder.cp_r(&my_out, &out);\n+        builder.cp_r(&out_dir, &out);\n \n         // Look for src/libstd, src/libcore etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n@@ -529,8 +517,11 @@ impl Step for Rustc {\n         // Build rustc.\n         builder.ensure(compile::Rustc { compiler, target });\n \n-        // We do not symlink to the same shared folder that already contains std library\n-        // documentation from previous steps as we do not want to include that.\n+        // This uses a shared directory so that librustdoc documentation gets\n+        // correctly built and merged with the rustc documentation. This is\n+        // needed because rustdoc is built in a different directory from\n+        // rustc. rustdoc needs to be able to see everything, for example when\n+        // merging the search index, or generating local (relative) links.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n "}, {"sha": "9ca9e338d55c5ae373166511e7f8261c7e60a267", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -612,13 +612,6 @@ impl Build {\n         INTERNER.intern_path(self.out.join(&*target).join(\"md-doc\"))\n     }\n \n-    /// Output directory for all crate documentation for a target (temporary)\n-    ///\n-    /// The artifacts here are then copied into `doc_out` above.\n-    fn crate_doc_out(&self, target: Interned<String>) -> PathBuf {\n-        self.out.join(&*target).join(\"crate-docs\")\n-    }\n-\n     /// Returns `true` if no custom `llvm-config` is set for the specified target.\n     ///\n     /// If no custom `llvm-config` was specified then Rust's llvm will be used."}, {"sha": "f3781db1cf784ef9b32654f29cf7632d9f6a9135", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -1697,6 +1697,8 @@ where\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n }\n+/// Most of the implementation of DrainFilter, independent of the type\n+/// of the predicate, thus also serving for BTreeSet::DrainFilter.\n pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n     length: &'a mut usize,\n     cur_leaf_edge: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,"}, {"sha": "44f0e25bbd79888e770eaf1c98131a63750bbebf", "filename": "src/liballoc/collections/btree/navigate.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -161,15 +161,16 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n impl<K, V> Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge> {\n     /// Moves the leaf edge handle to the next leaf edge and returns the key and value\n     /// in between, while deallocating any node left behind.\n-    /// Unsafe for three reasons:\n+    /// Unsafe for two reasons:\n     /// - The caller must ensure that the leaf edge is not the last one in the tree\n     ///   and is not a handle previously resulting from counterpart `next_back_unchecked`.\n-    /// - If the leaf edge is the last edge of a node, that node and possibly ancestors\n+    /// - Further use of the updated leaf edge handle is very dangerous. In particular,\n+    ///   if the leaf edge is the last edge of a node, that node and possibly ancestors\n     ///   will be deallocated, while the reference to those nodes in the surviving ancestor\n-    ///   is left dangling; thus further use of the leaf edge handle is dangerous.\n-    ///   It is, however, safe to call this method again on the updated handle.\n-    ///   if the two preconditions above hold.\n-    /// - Using the updated handle may well invalidate the returned references.\n+    ///   is left dangling.\n+    ///   The only safe way to proceed with the updated handle is to compare it, drop it,\n+    ///   call this method again subject to both preconditions listed in the first point,\n+    ///   or call counterpart `next_back_unchecked` subject to its preconditions.\n     pub unsafe fn next_unchecked(&mut self) -> (K, V) {\n         unsafe {\n             replace(self, |leaf_edge| {\n@@ -183,15 +184,16 @@ impl<K, V> Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge> {\n \n     /// Moves the leaf edge handle to the previous leaf edge and returns the key\n     /// and value in between, while deallocating any node left behind.\n-    /// Unsafe for three reasons:\n+    /// Unsafe for two reasons:\n     /// - The caller must ensure that the leaf edge is not the first one in the tree\n     ///   and is not a handle previously resulting from counterpart `next_unchecked`.\n-    /// - If the lead edge is the first edge of a node, that node and possibly ancestors\n+    /// - Further use of the updated leaf edge handle is very dangerous. In particular,\n+    ///   if the leaf edge is the first edge of a node, that node and possibly ancestors\n     ///   will be deallocated, while the reference to those nodes in the surviving ancestor\n-    ///   is left dangling; thus further use of the leaf edge handle is dangerous.\n-    ///   It is, however, safe to call this method again on the updated handle.\n-    ///   if the two preconditions above hold.\n-    /// - Using the updated handle may well invalidate the returned references.\n+    ///   is left dangling.\n+    ///   The only safe way to proceed with the updated handle is to compare it, drop it,\n+    ///   call this method again subject to both preconditions listed in the first point,\n+    ///   or call counterpart `next_unchecked` subject to its preconditions.\n     pub unsafe fn next_back_unchecked(&mut self) -> (K, V) {\n         unsafe {\n             replace(self, |leaf_edge| {"}, {"sha": "ce74d4f8ee688ec1e1933642d3f1f2f4fd1a1417", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -94,7 +94,8 @@ struct InternalNode<K, V> {\n     data: LeafNode<K, V>,\n \n     /// The pointers to the children of this node. `len + 1` of these are considered\n-    /// initialized and valid.\n+    /// initialized and valid. Although during the process of `into_iter` or `drop`,\n+    /// some pointers are dangling while others still need to be traversed.\n     edges: [MaybeUninit<BoxedNode<K, V>>; 2 * B],\n }\n \n@@ -408,7 +409,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n \n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Unsafely asserts to the compiler some static information about whether this\n-    /// node is a `Leaf`.\n+    /// node is a `Leaf` or an `Internal`.\n     unsafe fn cast_unchecked<NewType>(&mut self) -> NodeRef<marker::Mut<'_>, K, V, NewType> {\n         NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n     }\n@@ -515,7 +516,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n-    /// Adds a key/value pair the end of the node.\n+    /// Adds a key/value pair to the end of the node.\n     pub fn push(&mut self, key: K, val: V) {\n         assert!(self.len() < CAPACITY);\n \n@@ -602,8 +603,10 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key/value pair from the end of this node. If this is an internal node,\n-    /// also removes the edge that was to the right of that pair.\n+    /// Removes a key/value pair from the end of this node and returns the pair.\n+    /// If this is an internal node, also removes the edge that was to the right\n+    /// of that pair and returns the orphaned node that this edge owned with its\n+    /// parent erased.\n     pub fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         assert!(self.len() > 0);\n \n@@ -883,7 +886,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n     }\n \n     /// Unsafely asserts to the compiler some static information about whether the underlying\n-    /// node of this handle is a `Leaf`.\n+    /// node of this handle is a `Leaf` or an `Internal`.\n     unsafe fn cast_unchecked<NewType>(\n         &mut self,\n     ) -> Handle<NodeRef<marker::Mut<'_>, K, V, NewType>, marker::Edge> {"}, {"sha": "94f7ff5c1f7fe7864f6bf1fd0399ae7d8b568eef", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -18,8 +18,9 @@\n //! [`TryFrom<T>`][`TryFrom`] rather than [`Into<U>`][`Into`] or [`TryInto<U>`][`TryInto`],\n //! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n //! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n-//! blanket implementation in the standard library. Only implement [`Into`] or [`TryInto`]\n-//! when a conversion to a type outside the current crate is required.\n+//! blanket implementation in the standard library. When targeting a version prior to Rust 1.41, it\n+//! may be necessary to implement [`Into`] or [`TryInto`] directly when converting to a type\n+//! outside the current crate.\n //!\n //! # Generic Implementations\n //!\n@@ -298,8 +299,10 @@ pub trait Into<T>: Sized {\n /// because implementing `From` automatically provides one with an implementation of [`Into`]\n /// thanks to the blanket implementation in the standard library.\n ///\n-/// Only implement [`Into`] if a conversion to a type outside the current crate is required.\n-/// `From` cannot do these type of conversions because of Rust's orphaning rules.\n+/// Only implement [`Into`] when targeting a version prior to Rust 1.41 and converting to a type\n+/// outside the current crate.\n+/// `From` was not able to do these types of conversions in earlier versions because of Rust's\n+/// orphaning rules.\n /// See [`Into`] for more details.\n ///\n /// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function."}, {"sha": "86e8d5c42b7adae3c150099d87a0eac112ea6372", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -2374,11 +2374,14 @@ impl str {\n         unsafe { Slices { str: self }.slice }\n     }\n \n-    /// Converts a mutable string slice to a mutable byte slice. To convert the\n-    /// mutable byte slice back into a mutable string slice, use the\n-    /// [`str::from_utf8_mut`] function.\n+    /// Converts a mutable string slice to a mutable byte slice.\n     ///\n-    /// [`str::from_utf8_mut`]: ./str/fn.from_utf8_mut.html\n+    /// # Safety\n+    ///\n+    /// The caller must ensure that the content of the slice is valid UTF-8\n+    /// before the borrow ends and the underlying `str` is used.\n+    ///\n+    /// Use of a `str` whose contents are not valid UTF-8 is undefined behavior.\n     ///\n     /// # Examples\n     ///"}, {"sha": "982a615dd919513e12ee5ff9567e81c1115b11ab", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -65,8 +65,8 @@ pub const EXIT_SUCCESS: i32 = 0;\n /// Exit status code used for compilation failures and invalid flags.\n pub const EXIT_FAILURE: i32 = 1;\n \n-const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n-                              md#bug-reports\";\n+const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n+    ?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\";\n \n const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"Z\", \"C\", \"crate-type\"];\n "}, {"sha": "2e9b3a2a2562f276ee8fcd99ca7b9fe06d962f04", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -87,18 +87,29 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n     let mut prefill_stream = quote! {};\n     let mut counter = 0u32;\n     let mut keys = HashSet::<String>::new();\n+    let mut prev_key: Option<String> = None;\n+    let mut errors = Vec::<String>::new();\n \n-    let mut check_dup = |str: &str| {\n+    let mut check_dup = |str: &str, errors: &mut Vec<String>| {\n         if !keys.insert(str.to_string()) {\n-            panic!(\"Symbol `{}` is duplicated\", str);\n+            errors.push(format!(\"Symbol `{}` is duplicated\", str));\n         }\n     };\n \n+    let mut check_order = |str: &str, errors: &mut Vec<String>| {\n+        if let Some(ref prev_str) = prev_key {\n+            if str < prev_str {\n+                errors.push(format!(\"Symbol `{}` must precede `{}`\", str, prev_str));\n+            }\n+        }\n+        prev_key = Some(str.to_string());\n+    };\n+\n     // Generate the listed keywords.\n     for keyword in &input.keywords.0 {\n         let name = &keyword.name;\n         let value = &keyword.value;\n-        check_dup(&value.value());\n+        check_dup(&value.value(), &mut errors);\n         prefill_stream.extend(quote! {\n             #value,\n         });\n@@ -116,7 +127,8 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             Some(value) => value.value(),\n             None => name.to_string(),\n         };\n-        check_dup(&value);\n+        check_dup(&value, &mut errors);\n+        check_order(&name.to_string(), &mut errors);\n         prefill_stream.extend(quote! {\n             #value,\n         });\n@@ -131,7 +143,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n     // Generate symbols for the strings \"0\", \"1\", ..., \"9\".\n     for n in 0..10 {\n         let n = n.to_string();\n-        check_dup(&n);\n+        check_dup(&n, &mut errors);\n         prefill_stream.extend(quote! {\n             #n,\n         });\n@@ -141,6 +153,13 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         counter += 1;\n     }\n \n+    if !errors.is_empty() {\n+        for error in errors.into_iter() {\n+            eprintln!(\"error: {}\", error)\n+        }\n+        panic!(\"errors in `Keywords` and/or `Symbols`\");\n+    }\n+\n     let tt = TokenStream::from(quote! {\n         macro_rules! keywords {\n             () => {"}, {"sha": "75f588918a020185b84f1338f35e90c2fdc06fd6", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 117, "deletions": 108, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -19,6 +19,7 @@ use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n #[cfg(test)]\n mod tests;\n \n+// The proc macro code for this is in `src/librustc_macros/src/symbols.rs`.\n symbols! {\n     // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,\n     // this should be rarely necessary though if the keywords are kept in alphabetic order.\n@@ -113,8 +114,79 @@ symbols! {\n     // As well as the symbols listed, there are symbols for the the strings\n     // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.\n     //\n-    // Keep this list in sorted order, as defined by the Unix `sort` utility.\n+    // The proc macro will abort if symbols are not in alphabetical order (as\n+    // defined by `impl Ord for str`) or if any symbols are duplicated. Vim\n+    // users can sort the list by selecting it and executing the command\n+    // `:'<,'>!LC_ALL=C sort`.\n+    //\n+    // There is currently no checking that all symbols are used; that would be\n+    // nice to have.\n     Symbols {\n+        Arc,\n+        ArgumentV1,\n+        Arguments,\n+        C,\n+        Clone,\n+        Copy,\n+        Debug,\n+        Decodable,\n+        Default,\n+        Encodable,\n+        Eq,\n+        Equal,\n+        Err,\n+        From,\n+        Future,\n+        FxHashMap,\n+        FxHashSet,\n+        GlobalAlloc,\n+        Hash,\n+        HashMap,\n+        HashSet,\n+        Input,\n+        IntoIterator,\n+        ItemContext,\n+        Iterator,\n+        Layout,\n+        LintPass,\n+        None,\n+        Ok,\n+        Option,\n+        Ord,\n+        Ordering,\n+        Output,\n+        PartialEq,\n+        PartialOrd,\n+        Pending,\n+        Pin,\n+        Poll,\n+        ProcMacroHack,\n+        ProceduralMasqueradeDummyType,\n+        Range,\n+        RangeFrom,\n+        RangeFull,\n+        RangeInclusive,\n+        RangeTo,\n+        RangeToInclusive,\n+        Rc,\n+        Ready,\n+        Result,\n+        Return,\n+        RustcDecodable,\n+        RustcEncodable,\n+        Send,\n+        Some,\n+        Sync,\n+        Target,\n+        Try,\n+        Ty,\n+        TyCtxt,\n+        TyKind,\n+        Vec,\n+        Yield,\n+        _Self,\n+        __next,\n+        _task_context,\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n@@ -131,8 +203,8 @@ symbols! {\n         aborts,\n         add,\n         add_assign,\n-        address,\n         add_with_overflow,\n+        address,\n         advanced_slice_patterns,\n         adx_target_feature,\n         alias,\n@@ -141,28 +213,26 @@ symbols! {\n         alignstack,\n         all,\n         alloc,\n-        allocator,\n-        allocator_internals,\n         alloc_error_handler,\n         alloc_layout,\n         alloc_zeroed,\n+        allocator,\n+        allocator_internals,\n         allow,\n-        allowed,\n         allow_fail,\n         allow_internal_unsafe,\n         allow_internal_unstable,\n         allow_internal_unstable_backcompat_hack,\n+        allowed,\n         always,\n         and,\n         any,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n-        Arc,\n-        Arguments,\n-        ArgumentV1,\n         arith_offset,\n         arm_target_feature,\n         array,\n+        as_str,\n         asm,\n         assert,\n         assert_inhabited,\n@@ -173,16 +243,15 @@ symbols! {\n         associated_type_bounds,\n         associated_type_defaults,\n         associated_types,\n-        as_str,\n         assume,\n         assume_init,\n         async_await,\n         async_closure,\n         atomics,\n+        att_syntax,\n         attr,\n-        attributes,\n         attr_literals,\n-        att_syntax,\n+        attributes,\n         augmented_assignments,\n         automatically_derived,\n         avx512_target_feature,\n@@ -210,11 +279,11 @@ symbols! {\n         braced_empty_structs,\n         breakpoint,\n         bswap,\n-        C,\n+        c_variadic,\n         call,\n-        caller_location,\n         call_mut,\n         call_once,\n+        caller_location,\n         cdylib,\n         ceilf32,\n         ceilf64,\n@@ -232,7 +301,6 @@ symbols! {\n         char,\n         clippy,\n         clone,\n-        Clone,\n         clone_closures,\n         clone_from,\n         closure_to_fn_coercion,\n@@ -274,7 +342,6 @@ symbols! {\n         context,\n         convert,\n         copy,\n-        Copy,\n         copy_closures,\n         copy_nonoverlapping,\n         copysignf32,\n@@ -303,18 +370,14 @@ symbols! {\n         custom_derive,\n         custom_inner_attributes,\n         custom_test_frameworks,\n-        c_variadic,\n         dead_code,\n         dealloc,\n         debug,\n-        Debug,\n         debug_assertions,\n         debug_trait,\n-        declare_lint_pass,\n         decl_macro,\n-        Decodable,\n+        declare_lint_pass,\n         decode,\n-        Default,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n         default_type_params,\n@@ -339,8 +402,8 @@ symbols! {\n         doc_masked,\n         doctest,\n         document_private_items,\n-        dotdoteq_in_patterns,\n         dotdot_in_tuple_patterns,\n+        dotdoteq_in_patterns,\n         double_braced_closure: \"{{closure}}\",\n         double_braced_constant: \"{{constant}}\",\n         double_braced_constructor: \"{{constructor}}\",\n@@ -349,24 +412,20 @@ symbols! {\n         double_braced_misc: \"{{misc}}\",\n         double_braced_opaque: \"{{opaque}}\",\n         drop,\n-        dropck_eyepatch,\n-        dropck_parametricity,\n         drop_in_place,\n         drop_types_in_const,\n+        dropck_eyepatch,\n+        dropck_parametricity,\n         dylib,\n         dyn_trait,\n         eh_catch_typeinfo,\n         eh_personality,\n         enable,\n         enclosing_scope,\n-        Encodable,\n         encode,\n         env,\n         eq,\n-        Eq,\n-        Equal,\n         err,\n-        Err,\n         exact_div,\n         except,\n         exchange_malloc,\n@@ -382,12 +441,12 @@ symbols! {\n         export_name,\n         expr,\n         extern_absolute_paths,\n-        external_doc,\n         extern_crate_item_prelude,\n         extern_crate_self,\n         extern_in_paths,\n         extern_prelude,\n         extern_types,\n+        external_doc,\n         f16c_target_feature,\n         f32,\n         f32_runtime,\n@@ -424,7 +483,6 @@ symbols! {\n         freeze,\n         frem_fast,\n         from,\n-        From,\n         from_desugaring,\n         from_error,\n         from_generator,\n@@ -436,29 +494,22 @@ symbols! {\n         fsub_fast,\n         fundamental,\n         future,\n-        Future,\n         future_trait,\n-        FxHashMap,\n-        FxHashSet,\n         ge,\n+        gen_future,\n+        gen_kill,\n         generator,\n-        generators,\n         generator_state,\n+        generators,\n         generic_associated_types,\n         generic_param_attrs,\n-        gen_future,\n-        gen_kill,\n         get_context,\n-        GlobalAlloc,\n         global_allocator,\n         global_asm,\n         globs,\n         gt,\n         half_open_range_patterns,\n         hash,\n-        Hash,\n-        HashMap,\n-        HashSet,\n         hexagon_target_feature,\n         hidden,\n         homogeneous_aggregate,\n@@ -493,10 +544,8 @@ symbols! {\n         inlateout,\n         inline,\n         inout,\n-        Input,\n         intel,\n         into_iter,\n-        IntoIterator,\n         into_result,\n         intrinsics,\n         irrefutable_let_patterns,\n@@ -505,18 +554,15 @@ symbols! {\n         issue_5723_bootstrap,\n         issue_tracker_base_url,\n         item,\n-        item_context: \"ItemContext\",\n         item_like_imports,\n         iter,\n-        Iterator,\n         keyword,\n         kind,\n         label,\n         label_break_value,\n         lang,\n         lang_items,\n         lateout,\n-        Layout,\n         lazy_normalization_consts,\n         le,\n         let_chains,\n@@ -527,14 +573,13 @@ symbols! {\n         likely,\n         line,\n         link,\n-        linkage,\n         link_args,\n         link_cfg,\n         link_llvm_intrinsics,\n         link_name,\n         link_ordinal,\n         link_section,\n-        LintPass,\n+        linkage,\n         lint_reasons,\n         literal,\n         llvm_asm,\n@@ -543,9 +588,9 @@ symbols! {\n         log10f64,\n         log2f32,\n         log2f64,\n+        log_syntax,\n         logf32,\n         logf64,\n-        log_syntax,\n         loop_break_value,\n         lt,\n         macro_at_most_once_rep,\n@@ -554,9 +599,9 @@ symbols! {\n         macro_lifetime_matcher,\n         macro_literal_matcher,\n         macro_reexport,\n-        macros_in_extern,\n         macro_use,\n         macro_vis_matcher,\n+        macros_in_extern,\n         main,\n         managed_boxes,\n         manually_drop,\n@@ -567,23 +612,23 @@ symbols! {\n         match_default_bindings,\n         maxnumf32,\n         maxnumf64,\n+        may_dangle,\n         maybe_uninit,\n         maybe_uninit_uninit,\n         maybe_uninit_zeroed,\n-        may_dangle,\n-        member_constraints,\n-        memory,\n         mem_uninitialized,\n         mem_zeroed,\n+        member_constraints,\n+        memory,\n         message,\n         meta,\n         min_align_of,\n         min_align_of_val,\n         min_const_fn,\n         min_const_unsafe_fn,\n+        min_specialization,\n         minnumf32,\n         minnumf64,\n-        min_specialization,\n         mips_target_feature,\n         miri_start_panic,\n         mmx_target_feature,\n@@ -615,7 +660,6 @@ symbols! {\n         never_type,\n         never_type_fallback,\n         new,\n-        __next,\n         next,\n         nll,\n         no,\n@@ -629,47 +673,41 @@ symbols! {\n         no_link,\n         no_main,\n         no_mangle,\n+        no_niche,\n+        no_sanitize,\n+        no_stack_check,\n+        no_start,\n+        no_std,\n         nomem,\n         non_ascii_idents,\n-        None,\n-        none_error,\n         non_exhaustive,\n-        no_niche,\n         non_modrs_mods,\n+        none_error,\n         nontemporal_store,\n         nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n         noreturn,\n-        no_sanitize,\n         nostack,\n-        no_stack_check,\n-        no_start,\n-        no_std,\n         not,\n         note,\n         object_safe_for_dispatch,\n         offset,\n-        Ok,\n         omit_gdb_pretty_printer_section,\n         on,\n         on_unimplemented,\n         oom,\n         opaque,\n         ops,\n+        opt_out_copy,\n         optimize,\n         optimize_attribute,\n         optin_builtin_traits,\n         option,\n-        Option,\n         option_env,\n-        options,\n         option_type,\n-        opt_out_copy,\n+        options,\n         or,\n-        Ord,\n-        Ordering,\n         or_patterns,\n         out,\n-        Output,\n         overlapping_marker_traits,\n         owned_box,\n         packed,\n@@ -686,33 +724,28 @@ symbols! {\n         param_attrs,\n         parent_trait,\n         partial_cmp,\n-        PartialEq,\n         partial_ord,\n-        PartialOrd,\n         passes,\n         pat,\n         path,\n         pattern_parentheses,\n-        Pending,\n         phantom_data,\n         pin,\n-        Pin,\n         pinned,\n         platform_intrinsics,\n         plugin,\n         plugin_registrar,\n         plugins,\n         pointer,\n         poll,\n-        Poll,\n         post_dash_lto: \"post-lto\",\n         powerpc_target_feature,\n         powf32,\n         powf64,\n         powif32,\n         powif64,\n-        precise_pointer_size_matching,\n         pre_dash_lto: \"pre-lto\",\n+        precise_pointer_size_matching,\n         pref_align_of,\n         prefetch_read_data,\n         prefetch_read_instruction,\n@@ -723,14 +756,12 @@ symbols! {\n         preserves_flags,\n         primitive,\n         proc_dash_macro: \"proc-macro\",\n-        ProceduralMasqueradeDummyType,\n         proc_macro,\n         proc_macro_attribute,\n         proc_macro_def_site,\n         proc_macro_derive,\n         proc_macro_expr,\n         proc_macro_gen,\n-        ProcMacroHack,\n         proc_macro_hygiene,\n         proc_macro_internals,\n         proc_macro_mod,\n@@ -747,18 +778,11 @@ symbols! {\n         quad_precision_float,\n         question_mark,\n         quote,\n-        Range,\n-        RangeFrom,\n-        RangeFull,\n-        RangeInclusive,\n-        RangeTo,\n-        RangeToInclusive,\n         raw_dylib,\n         raw_identifiers,\n         raw_ref_op,\n-        Rc,\n+        re_rebalance_coherence,\n         readonly,\n-        Ready,\n         realloc,\n         reason,\n         receiver,\n@@ -779,11 +803,8 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n-        re_rebalance_coherence,\n         result,\n-        Result,\n         result_type,\n-        Return,\n         rhs,\n         rintf32,\n         rintf64,\n@@ -799,6 +820,10 @@ symbols! {\n         rust_2015_preview,\n         rust_2018_preview,\n         rust_begin_unwind,\n+        rust_eh_personality,\n+        rust_eh_register_frames,\n+        rust_eh_unregister_frames,\n+        rust_oom,\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n@@ -810,7 +835,6 @@ symbols! {\n         rustc_const_stable,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n-        RustcDecodable,\n         rustc_def_path,\n         rustc_deprecated,\n         rustc_diagnostic_item,\n@@ -820,7 +844,6 @@ symbols! {\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n-        RustcEncodable,\n         rustc_error,\n         rustc_expected_cgu_reuse,\n         rustc_if_this_changed,\n@@ -857,19 +880,15 @@ symbols! {\n         rustc_then_this_would_need,\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n-        rust_eh_personality,\n         rustfmt,\n-        rust_oom,\n         rvalue_static_promotion,\n         sanitize,\n         sanitizer_runtime,\n         saturating_add,\n         saturating_sub,\n-        _Self,\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n-        Send,\n         send_trait,\n         shl,\n         shl_assign,\n@@ -937,17 +956,16 @@ symbols! {\n         sinf32,\n         sinf64,\n         size,\n-        sized,\n         size_of,\n         size_of_val,\n+        sized,\n         slice,\n         slice_alloc,\n         slice_patterns,\n         slice_u8,\n         slice_u8_alloc,\n         slicing_syntax,\n         soft,\n-        Some,\n         specialization,\n         speed,\n         sqrtf32,\n@@ -957,9 +975,9 @@ symbols! {\n         staged_api,\n         start,\n         static_in_const,\n-        staticlib,\n         static_nobundle,\n         static_recursion,\n+        staticlib,\n         std,\n         std_inject,\n         stmt,\n@@ -970,20 +988,18 @@ symbols! {\n         stringify,\n         struct_field_attributes,\n         struct_inherit,\n+        struct_variant,\n         structural_match,\n         structural_peq,\n         structural_teq,\n-        struct_variant,\n         sty,\n         sub,\n         sub_assign,\n         sub_with_overflow,\n         suggestion,\n         sym,\n         sync,\n-        Sync,\n         sync_trait,\n-        Target,\n         target_arch,\n         target_endian,\n         target_env,\n@@ -998,7 +1014,6 @@ symbols! {\n         target_thread_local,\n         target_vendor,\n         task,\n-        _task_context,\n         tbm_target_feature,\n         termination,\n         termination_trait,\n@@ -1024,17 +1039,13 @@ symbols! {\n         trivial_bounds,\n         truncf32,\n         truncf64,\n-        Try,\n         try_blocks,\n         try_trait,\n         tt,\n         tuple,\n         tuple_indexing,\n         two_phase,\n         ty,\n-        Ty,\n-        TyCtxt,\n-        TyKind,\n         type_alias_enum_variants,\n         type_alias_impl_trait,\n         type_ascription,\n@@ -1082,21 +1093,20 @@ symbols! {\n         unwind,\n         unwind_attributes,\n         unwrap_or,\n-        used,\n         use_extern_macros,\n         use_nested_groups,\n+        used,\n         usize,\n         v1,\n         va_arg,\n         va_copy,\n         va_end,\n-        val,\n         va_list,\n+        va_start,\n+        val,\n         var,\n         variant_count,\n-        va_start,\n         vec,\n-        Vec,\n         vec_type,\n         version,\n         vis,\n@@ -1117,7 +1127,6 @@ symbols! {\n         wrapping_mul,\n         wrapping_sub,\n         write_bytes,\n-        Yield,\n     }\n }\n "}, {"sha": "d2b9f84af33ae3e100e2818cbffa13c3414ed1a8", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let mut flags = vec![];\n         flags.push((\n-            sym::item_context,\n+            sym::ItemContext,\n             self.describe_enclosure(obligation.cause.body_id).map(|s| s.to_owned()),\n         ));\n "}, {"sha": "deb33708681fa3ba8e9b1781f7d4100477fd54cf", "filename": "src/librustc_trait_selection/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -286,7 +286,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     // `{from_desugaring}` is allowed\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::item_context => (),\n+                    Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n@@ -350,7 +350,7 @@ impl<'tcx> OnUnimplementedFormatString {\n \n         let s = self.0.as_str();\n         let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n-        let item_context = (options.get(&sym::item_context)).unwrap_or(&empty_string);\n+        let item_context = (options.get(&sym::ItemContext)).unwrap_or(&empty_string);\n         parser\n             .map(|p| match p {\n                 Piece::String(s) => s,\n@@ -364,7 +364,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                             } else if s == sym::from_desugaring || s == sym::from_method {\n                                 // don't break messages using these two arguments incorrectly\n                                 &empty_string\n-                            } else if s == sym::item_context {\n+                            } else if s == sym::ItemContext {\n                                 &item_context\n                             } else {\n                                 bug!("}, {"sha": "29893bd12f1f7ced0cf13e841006473de17e7257", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -47,8 +47,6 @@ hermit-abi = { version = \"0.1.14\", features = ['rustc-dep-of-std'] }\n wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }\n \n [features]\n-default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n-\n backtrace = [\n   \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n   \"backtrace_rs/libbacktrace\",     # symbolize on most platforms"}, {"sha": "4fd5e238eea11f24868f82369863160cc42c25bd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -85,8 +85,9 @@\n //! # Contributing changes to the documentation\n //!\n //! Check out the rust contribution guidelines [here](\n-//! https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md).\n-//! The source for this documentation can be found on [Github](https://github.com/rust-lang).\n+//! https://rustc-dev-guide.rust-lang.org/getting-started.html).\n+//! The source for this documentation can be found on\n+//! [GitHub](https://github.com/rust-lang/rust).\n //! To contribute changes, make sure you read the guidelines first, then submit\n //! pull-requests for your suggested changes.\n //!"}, {"sha": "1667334871d5e4570f13e203feb932c134137093", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -23,9 +23,12 @@ proc_macro = { path = \"../libproc_macro\" }\n \n # Forward features to the `std` crate as necessary\n [features]\n+default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n backtrace = [\"std/backtrace\"]\n compiler-builtins-c = [\"std/compiler-builtins-c\"]\n llvm-libunwind = [\"std/llvm-libunwind\"]\n panic-unwind = [\"std/panic_unwind\"]\n panic_immediate_abort = [\"std/panic_immediate_abort\"]\n profiler = [\"std/profiler\"]\n+std_detect_file_io = [\"std/std_detect_file_io\"]\n+std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]"}, {"sha": "6e87e5c6912c3b925c82a3c3a46c4547e025be36", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cd0ee9343da86d9770bf0a514a682d240e0dce8/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=4cd0ee9343da86d9770bf0a514a682d240e0dce8", "patch": "@@ -5,7 +5,7 @@ error: internal compiler error: unexpected panic\n \n note: the compiler unexpectedly panicked. this is a bug.\n \n-note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n \n note: rustc VERSION running on TARGET\n "}]}