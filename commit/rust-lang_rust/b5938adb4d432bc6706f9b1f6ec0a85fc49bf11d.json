{"sha": "b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OTM4YWRiNGQ0MzJiYzY3MDZmOWIxZjZlYzBhODVmYzQ5YmYxMWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:51:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:51:27Z"}, "message": "adjust Miri to needs of changed unwinding strategy", "tree": {"sha": "173e34d36163d17693d6adc7c1aef83cefd5b013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/173e34d36163d17693d6adc7c1aef83cefd5b013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "html_url": "https://github.com/rust-lang/rust/commit/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445284372082c1e760bc8cc0fac1d69644f27606", "url": "https://api.github.com/repos/rust-lang/rust/commits/445284372082c1e760bc8cc0fac1d69644f27606", "html_url": "https://github.com/rust-lang/rust/commit/445284372082c1e760bc8cc0fac1d69644f27606"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "0d43e4759f795855e53e2aa518de49687cec782e", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "patch": "@@ -21,7 +21,7 @@ use rustc_span::source_map::{self, Span, DUMMY_SP};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n-    ScalarMaybeUndef, StackPopInfo,\n+    ScalarMaybeUndef, StackPopJump,\n };\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n@@ -623,31 +623,24 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n-        let stack_pop_info = M::stack_pop(self, frame.extra, unwinding)?;\n-        if let (false, StackPopInfo::StopUnwinding) = (unwinding, stack_pop_info) {\n-            bug!(\"Attempted to stop unwinding while there is no unwinding!\");\n-        }\n \n         // Now where do we jump next?\n \n-        // Determine if we leave this function normally or via unwinding.\n-        let cur_unwinding =\n-            if let StackPopInfo::StopUnwinding = stack_pop_info { false } else { unwinding };\n-\n         // Usually we want to clean up (deallocate locals), but in a few rare cases we don't.\n         // In that case, we return early. We also avoid validation in that case,\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n         let (cleanup, next_block) = match frame.return_to_block {\n             StackPopCleanup::Goto { ret, unwind } => {\n-                (true, Some(if cur_unwinding { unwind } else { ret }))\n+                (true, Some(if unwinding { unwind } else { ret }))\n             }\n             StackPopCleanup::None { cleanup, .. } => (cleanup, None),\n         };\n \n         if !cleanup {\n             assert!(self.stack.is_empty(), \"only the topmost frame should ever be leaked\");\n             assert!(next_block.is_none(), \"tried to skip cleanup when we have a next block!\");\n-            // Leak the locals, skip validation.\n+            assert!(!unwinding, \"tried to skip cleanup during unwinding\");\n+            // Leak the locals, skip validation, skip machine hook.\n             return Ok(());\n         }\n \n@@ -656,13 +649,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.deallocate_local(local.value)?;\n         }\n \n-        trace!(\n-            \"StackPopCleanup: {:?} StackPopInfo: {:?} cur_unwinding = {:?}\",\n-            frame.return_to_block,\n-            stack_pop_info,\n-            cur_unwinding\n-        );\n-        if cur_unwinding {\n+        if M::stack_pop(self, frame.extra, unwinding)? == StackPopJump::NoJump {\n+            // The hook already did everything.\n+            // We want to skip the `trace!` below, hence early return.\n+            return Ok(());\n+        }\n+        // Normal return.\n+        if unwinding {\n             // Follow the unwind edge.\n             let unwind = next_block.expect(\"Encountered StackPopCleanup::None when unwinding!\");\n             self.unwind_to_block(unwind);\n@@ -697,7 +690,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 \"CONTINUING({}) {} (unwinding = {})\",\n                 self.cur_frame(),\n                 self.frame().instance,\n-                cur_unwinding\n+                unwinding\n             );\n         }\n "}, {"sha": "0e70e54ad85af12b6e7dbe496c17a807fc897a8d", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "patch": "@@ -17,16 +17,16 @@ use super::{\n /// Data returned by Machine::stack_pop,\n /// to provide further control over the popping of the stack frame\n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n-pub enum StackPopInfo {\n+pub enum StackPopJump {\n     /// Indicates that no special handling should be\n     /// done - we'll either return normally or unwind\n     /// based on the terminator for the function\n     /// we're leaving.\n     Normal,\n \n-    /// Indicates that we should stop unwinding,\n-    /// as we've reached a catch frame\n-    StopUnwinding,\n+    /// Indicates that we should *not* jump to the return/unwind address, as the callback already\n+    /// took care of everything.\n+    NoJump,\n }\n \n /// Whether this kind of memory is allowed to leak\n@@ -276,9 +276,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _extra: Self::FrameExtra,\n         _unwinding: bool,\n-    ) -> InterpResult<'tcx, StackPopInfo> {\n+    ) -> InterpResult<'tcx, StackPopJump> {\n         // By default, we do not support unwinding from panics\n-        Ok(StackPopInfo::Normal)\n+        Ok(StackPopJump::Normal)\n     }\n \n     fn int_to_ptr("}, {"sha": "c3fd968276577241207408783545216fca5fe308", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=b5938adb4d432bc6706f9b1f6ec0a85fc49bf11d", "patch": "@@ -24,7 +24,7 @@ pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n \n pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n \n-pub use self::machine::{AllocMap, Machine, MayLeak, StackPopInfo};\n+pub use self::machine::{AllocMap, Machine, MayLeak, StackPopJump};\n \n pub use self::operand::{ImmTy, Immediate, OpTy, Operand, ScalarMaybeUndef};\n "}]}