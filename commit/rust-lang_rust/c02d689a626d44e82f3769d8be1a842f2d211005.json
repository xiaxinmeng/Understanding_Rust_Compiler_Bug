{"sha": "c02d689a626d44e82f3769d8be1a842f2d211005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmQ2ODlhNjI2ZDQ0ZTgyZjM3NjlkOGJlMWE4NDJmMmQyMTEwMDU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-18T05:00:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-18T05:07:25Z"}, "message": "Inline `Symbol::decode` and `Interner::intern`.", "tree": {"sha": "d38d8da86d2145ef2dd378a98e7f2d574a719e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38d8da86d2145ef2dd378a98e7f2d574a719e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02d689a626d44e82f3769d8be1a842f2d211005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02d689a626d44e82f3769d8be1a842f2d211005", "html_url": "https://github.com/rust-lang/rust/commit/c02d689a626d44e82f3769d8be1a842f2d211005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02d689a626d44e82f3769d8be1a842f2d211005/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab906179ccd6254f51f0d254479c9b211b0276b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab906179ccd6254f51f0d254479c9b211b0276b1", "html_url": "https://github.com/rust-lang/rust/commit/ab906179ccd6254f51f0d254479c9b211b0276b1"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "b7285cc94920cd0c7cb2c714c89106d4299a5da9", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02d689a626d44e82f3769d8be1a842f2d211005/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02d689a626d44e82f3769d8be1a842f2d211005/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=c02d689a626d44e82f3769d8be1a842f2d211005", "patch": "@@ -993,6 +993,7 @@ impl Encodable for Symbol {\n }\n \n impl Decodable for Symbol {\n+    #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Symbol, D::Error> {\n         Ok(Symbol::intern(&d.read_str()?))\n     }\n@@ -1031,6 +1032,7 @@ impl Interner {\n         }\n     }\n \n+    #[inline]\n     pub fn intern(&mut self, string: &str) -> Symbol {\n         if let Some(&name) = self.names.get(string) {\n             return name;"}]}