{"sha": "6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "node_id": "C_kwDOAAsO6NoAKDZhZmU1NDcxY2YzY2M3OGI1Y2U4NWQxYmJiMTNhMDEwNTE2YzUwMGU", "commit": {"author": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-17T17:22:52Z"}, "committer": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-18T00:02:37Z"}, "message": "Add lint `transmute_null_to_fn`", "tree": {"sha": "a3aa931fecf34b709d246048b9eb838f08c92099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3aa931fecf34b709d246048b9eb838f08c92099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "html_url": "https://github.com/rust-lang/rust/commit/6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/comments", "author": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bdfb0741dbcecd5279a2635c3280726db0604b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdfb0741dbcecd5279a2635c3280726db0604b5", "html_url": "https://github.com/rust-lang/rust/commit/4bdfb0741dbcecd5279a2635c3280726db0604b5"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "3c2801cfb5e3b99acf154bc625ca6d4359692e7f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -4590,6 +4590,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n [`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref"}, {"sha": "5bae62ce24f002cd0a950edbba431d611d483d3c", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -568,6 +568,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_NULL_TO_FN_INFO,\n     crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_REF_INFO,"}, {"sha": "7a2ab2bb4c4098f2f0507d851c005baea11453e3", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_null_to_fn;\n mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n mod transmute_ptr_to_ref;\n@@ -409,6 +410,34 @@ declare_clippy_lint! {\n     \"transmutes from a null pointer to a reference, which is undefined behavior\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for null function pointer creation through transmute.\n+    ///\n+    /// ### Why is this bad?\n+    /// Creating a null function pointer is undefined behavior.\n+    ///\n+    /// More info: https://doc.rust-lang.org/nomicon/ffi.html#the-nullable-pointer-optimization\n+    ///\n+    /// ### Known problems\n+    /// Not all cases can be detected at the moment of this writing.\n+    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n+    /// call, aren't detectable yet.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let null_fn: fn() = unsafe { std::mem::transmute( std::ptr::null() ) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let null_fn: Option<fn()> = None;\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub TRANSMUTE_NULL_TO_FN,\n+    correctness,\n+    \"transmute results in a null function pointer, which is undefined behavior\"\n+}\n+\n pub struct Transmute {\n     msrv: Msrv,\n }\n@@ -428,6 +457,7 @@ impl_lint_pass!(Transmute => [\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     TRANSMUTE_UNDEFINED_REPR,\n     TRANSMUTING_NULL,\n+    TRANSMUTE_NULL_TO_FN,\n ]);\n impl Transmute {\n     #[must_use]\n@@ -461,6 +491,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmuting_null::check(cx, e, arg, to_ty)\n+                    | transmute_null_to_fn::check(cx, e, arg, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, &self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)"}, {"sha": "db89078f657e0bcd80104ee4b0bea0da7c647cf8", "filename": "clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -0,0 +1,62 @@\n+use clippy_utils::consts::{constant_context, Constant};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_span::symbol::sym;\n+\n+use super::TRANSMUTE_NULL_TO_FN;\n+\n+const LINT_MSG: &str = \"transmuting a known null pointer into a function pointer\";\n+const NOTE_MSG: &str = \"this transmute results in a null function pointer\";\n+const HELP_MSG: &str =\n+    \"try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\";\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'tcx Expr<'_>, to_ty: Ty<'tcx>) -> bool {\n+    if !to_ty.is_fn() {\n+        return false;\n+    }\n+\n+    // Catching transmute over constants that resolve to `null`.\n+    let mut const_eval_context = constant_context(cx, cx.typeck_results());\n+    if let ExprKind::Path(ref _qpath) = arg.kind &&\n+        let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg) &&\n+        x == 0\n+    {\n+        span_lint_and_then(cx, TRANSMUTE_NULL_TO_FN, expr.span, LINT_MSG, |diag| {\n+            diag.span_label(expr.span, NOTE_MSG);\n+            diag.help(HELP_MSG);\n+        });\n+        return true;\n+    }\n+\n+    // Catching:\n+    // `std::mem::transmute(0 as *const i32)`\n+    if let ExprKind::Cast(inner_expr, _cast_ty) = arg.kind && is_integer_literal(inner_expr, 0) {\n+        span_lint_and_then(cx, TRANSMUTE_NULL_TO_FN, expr.span, LINT_MSG, |diag| {\n+            diag.span_label(expr.span, NOTE_MSG);\n+            diag.help(HELP_MSG);\n+        });\n+        return true;\n+    }\n+\n+    // Catching:\n+    // `std::mem::transmute(std::ptr::null::<i32>())`\n+    if let ExprKind::Call(func1, []) = arg.kind &&\n+        is_path_diagnostic_item(cx, func1, sym::ptr_null)\n+    {\n+        span_lint_and_then(cx, TRANSMUTE_NULL_TO_FN, expr.span, LINT_MSG, |diag| {\n+            diag.span_label(expr.span, NOTE_MSG);\n+            diag.help(HELP_MSG);\n+        });\n+        return true;\n+    }\n+\n+    // FIXME:\n+    // Also catch transmutations of variables which are known nulls.\n+    // To do this, MIR const propagation seems to be the better tool.\n+    // Whenever MIR const prop routines are more developed, this will\n+    // become available. As of this writing (25/03/19) it is not yet.\n+    false\n+}"}, {"sha": "b3ea3d9039e088b7ec974a5f3abfd5358d64443b", "filename": "tests/ui/transmute_null_to_fn.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/tests%2Fui%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/tests%2Fui%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.rs?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -0,0 +1,28 @@\n+#![allow(dead_code)]\n+#![warn(clippy::transmute_null_to_fn)]\n+#![allow(clippy::zero_ptr)]\n+\n+// Easy to lint because these only span one line.\n+fn one_liners() {\n+    unsafe {\n+        let _: fn() = std::mem::transmute(0 as *const ());\n+        let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+    }\n+}\n+\n+pub const ZPTR: *const usize = 0 as *const _;\n+pub const NOT_ZPTR: *const usize = 1 as *const _;\n+\n+fn transmute_const() {\n+    unsafe {\n+        // Should raise a lint.\n+        let _: fn() = std::mem::transmute(ZPTR);\n+        // Should NOT raise a lint.\n+        let _: fn() = std::mem::transmute(NOT_ZPTR);\n+    }\n+}\n+\n+fn main() {\n+    one_liners();\n+    transmute_const();\n+}"}, {"sha": "f0c65497d750edb32c01442443f3d2bfddba003c", "filename": "tests/ui/transmute_null_to_fn.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/tests%2Fui%2Ftransmute_null_to_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6afe5471cf3cc78b5ce85d1bbb13a010516c500e/tests%2Fui%2Ftransmute_null_to_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_null_to_fn.stderr?ref=6afe5471cf3cc78b5ce85d1bbb13a010516c500e", "patch": "@@ -0,0 +1,27 @@\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:8:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(0 as *const ());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+   = note: `-D clippy::transmute-null-to-fn` implied by `-D warnings`\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:9:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(std::ptr::null::<()>());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: transmuting a known null pointer into a function pointer\n+  --> $DIR/transmute_null_to_fn.rs:19:23\n+   |\n+LL |         let _: fn() = std::mem::transmute(ZPTR);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ this transmute results in undefined behavior\n+   |\n+   = help: try wrapping your function pointer type in `Option<T>` instead, and using `None` as a null pointer value\n+\n+error: aborting due to 3 previous errors\n+"}]}