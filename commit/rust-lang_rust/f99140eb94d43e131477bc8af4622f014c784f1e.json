{"sha": "f99140eb94d43e131477bc8af4622f014c784f1e", "node_id": "C_kwDOAAsO6NoAKGY5OTE0MGViOTRkNDNlMTMxNDc3YmM4YWY0NjIyZjAxNGM3ODRmMWU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T19:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-27T19:30:24Z"}, "message": "Merge pull request #1297 from bjorn3/aarch64_simd\n\nImplement some AArch64 SIMD intrinsics", "tree": {"sha": "ac96f55287173d198f6523729ed6f9954e572ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac96f55287173d198f6523729ed6f9954e572ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99140eb94d43e131477bc8af4622f014c784f1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjg7rQCRBK7hj4Ov3rIwAABZcIAC7SLtxenHEmha3/I0ZZNRk+\nkMpU1WtjQq73OhoOvng9+Q8bApSuDd40dQApnNWcojee2sCfijgYQ0QWbbouuW3J\n8InOvBatteD+MOo1pJ+vJqH9J5kmrXeG1WbCjPj08v/ZXrPsD3BbtcaxTlTkI9pz\nXAAbtpi3Omxx4ebT2dn4GjcM507n8XyewURg9Sb5Lt6aHxkMIhLLGWjm64t9zjC0\nhvR9/7N7HZoOB71aQhw0RWnABWR7/DbpYgabAiTnWZS4bn113x9KsJOuitQ7Cv4X\nUbcMG6Qj1rg25AtG2011QL9g8kLL76xLaZh/P7OFJEDGLcAluU8Y60nYkyYR/xk=\n=xDNP\n-----END PGP SIGNATURE-----\n", "payload": "tree ac96f55287173d198f6523729ed6f9954e572ec6\nparent 24ebf425ae3b9c3f95d5b8f239d18a2d7e66b540\nparent f851dfacfe92284124e0c5419ebd054d39ff5dc3\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1669577424 +0100\ncommitter GitHub <noreply@github.com> 1669577424 +0100\n\nMerge pull request #1297 from bjorn3/aarch64_simd\n\nImplement some AArch64 SIMD intrinsics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99140eb94d43e131477bc8af4622f014c784f1e", "html_url": "https://github.com/rust-lang/rust/commit/f99140eb94d43e131477bc8af4622f014c784f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99140eb94d43e131477bc8af4622f014c784f1e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ebf425ae3b9c3f95d5b8f239d18a2d7e66b540", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ebf425ae3b9c3f95d5b8f239d18a2d7e66b540", "html_url": "https://github.com/rust-lang/rust/commit/24ebf425ae3b9c3f95d5b8f239d18a2d7e66b540"}, {"sha": "f851dfacfe92284124e0c5419ebd054d39ff5dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f851dfacfe92284124e0c5419ebd054d39ff5dc3", "html_url": "https://github.com/rust-lang/rust/commit/f851dfacfe92284124e0c5419ebd054d39ff5dc3"}], "stats": {"total": 593, "additions": 434, "deletions": 159}, "files": [{"sha": "f722e52284fe8205f269103a620fec33015ef9a4", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 17, "deletions": 159, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=f99140eb94d43e131477bc8af4622f014c784f1e", "patch": "@@ -8,135 +8,37 @@ use rustc_middle::ty::subst::SubstsRef;\n pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: &str,\n-    _substs: SubstsRef<'tcx>,\n+    substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n-    match intrinsic {\n-        \"llvm.x86.sse2.pause\" | \"llvm.aarch64.isb\" => {\n-            // Spin loop hint\n-        }\n+    if intrinsic.starts_with(\"llvm.aarch64\") {\n+        return llvm_aarch64::codegen_aarch64_llvm_intrinsic_call(\n+            fx, intrinsic, substs, args, ret, target,\n+        );\n+    }\n+    if intrinsic.starts_with(\"llvm.x86\") {\n+        return llvm_x86::codegen_x86_llvm_intrinsic_call(fx, intrinsic, substs, args, ret, target);\n+    }\n \n-        // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n-        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+    match intrinsic {\n+        _ if intrinsic.starts_with(\"llvm.ctlz.v\") => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n-            let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n-            let lane_ty = fx.clif_type(lane_ty).unwrap();\n-            assert!(lane_count <= 32);\n-\n-            let mut res = fx.bcx.ins().iconst(types::I32, 0);\n-\n-            for lane in (0..lane_count).rev() {\n-                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n-\n-                // cast float to int\n-                let a_lane = match lane_ty {\n-                    types::F32 => fx.bcx.ins().bitcast(types::I32, a_lane),\n-                    types::F64 => fx.bcx.ins().bitcast(types::I64, a_lane),\n-                    _ => a_lane,\n-                };\n-\n-                // extract sign bit of an int\n-                let a_lane_sign = fx.bcx.ins().ushr_imm(a_lane, i64::from(lane_ty.bits() - 1));\n-\n-                // shift sign bit into result\n-                let a_lane_sign = clif_intcast(fx, a_lane_sign, types::I32, false);\n-                res = fx.bcx.ins().ishl_imm(res, 1);\n-                res = fx.bcx.ins().bor(res, a_lane_sign);\n-            }\n-\n-            let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n-            ret.write_cvalue(fx, res);\n-        }\n-        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\" => {\n-            let (x, y, kind) = match args {\n-                [x, y, kind] => (x, y, kind),\n-                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n-            };\n-            let x = codegen_operand(fx, x);\n-            let y = codegen_operand(fx, y);\n-            let kind = crate::constant::mir_operand_get_const_val(fx, kind)\n-                .expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-\n-            let flt_cc = match kind\n-                .try_to_bits(Size::from_bytes(1))\n-                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind))\n-            {\n-                0 => FloatCC::Equal,\n-                1 => FloatCC::LessThan,\n-                2 => FloatCC::LessThanOrEqual,\n-                7 => FloatCC::Ordered,\n-                3 => FloatCC::Unordered,\n-                4 => FloatCC::NotEqual,\n-                5 => FloatCC::UnorderedOrGreaterThanOrEqual,\n-                6 => FloatCC::UnorderedOrGreaterThan,\n-                kind => unreachable!(\"kind {:?}\", kind),\n-            };\n-\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n-                let res_lane = match lane_ty.kind() {\n-                    ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_ty),\n-                };\n-                bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().clz(lane)\n             });\n         }\n-        \"llvm.x86.sse2.psrli.d\" => {\n-            let (a, imm8) = match args {\n-                [a, imm8] => (a, imm8),\n-                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n-            };\n-            let a = codegen_operand(fx, a);\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n-                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n \n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n-                .try_to_bits(Size::from_bytes(4))\n-                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n-            {\n-                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n-                _ => fx.bcx.ins().iconst(types::I32, 0),\n-            });\n-        }\n-        \"llvm.x86.sse2.pslli.d\" => {\n-            let (a, imm8) = match args {\n-                [a, imm8] => (a, imm8),\n-                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n-            };\n-            let a = codegen_operand(fx, a);\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n-                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+        _ if intrinsic.starts_with(\"llvm.ctpop.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n-                .try_to_bits(Size::from_bytes(4))\n-                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n-            {\n-                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n-                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().popcnt(lane)\n             });\n         }\n-        \"llvm.x86.sse2.storeu.dq\" => {\n-            intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n-            let mem_addr = mem_addr.load_scalar(fx);\n-\n-            // FIXME correctly handle the unalignment\n-            let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n-            dest.write_cvalue(fx, a);\n-        }\n-        \"llvm.x86.addcarry.64\" => {\n-            intrinsic_args!(fx, args => (c_in, a, b); intrinsic);\n-            let c_in = c_in.load_scalar(fx);\n-\n-            llvm_add_sub(fx, BinOp::Add, ret, c_in, a, b);\n-        }\n-        \"llvm.x86.subborrow.64\" => {\n-            intrinsic_args!(fx, args => (b_in, a, b); intrinsic);\n-            let b_in = b_in.load_scalar(fx);\n \n-            llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n-        }\n         _ => {\n             fx.tcx\n                 .sess\n@@ -150,47 +52,3 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     let ret_block = fx.get_block(dest);\n     fx.bcx.ins().jump(ret_block, &[]);\n }\n-\n-// llvm.x86.avx2.vperm2i128\n-// llvm.x86.ssse3.pshuf.b.128\n-// llvm.x86.avx2.pshuf.b\n-// llvm.x86.avx2.psrli.w\n-// llvm.x86.sse2.psrli.w\n-\n-fn llvm_add_sub<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    bin_op: BinOp,\n-    ret: CPlace<'tcx>,\n-    cb_in: Value,\n-    a: CValue<'tcx>,\n-    b: CValue<'tcx>,\n-) {\n-    assert_eq!(\n-        a.layout().ty,\n-        fx.tcx.types.u64,\n-        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\"\n-    );\n-    assert_eq!(\n-        b.layout().ty,\n-        fx.tcx.types.u64,\n-        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\"\n-    );\n-\n-    // c + carry -> c + first intermediate carry or borrow respectively\n-    let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n-    let c = int0.value_field(fx, mir::Field::new(0));\n-    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n-\n-    // c + carry -> c + second intermediate carry or borrow respectively\n-    let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);\n-    let cb_in_as_u64 = CValue::by_val(cb_in_as_u64, fx.layout_of(fx.tcx.types.u64));\n-    let int1 = crate::num::codegen_checked_int_binop(fx, bin_op, c, cb_in_as_u64);\n-    let (c, cb1) = int1.load_scalar_pair(fx);\n-\n-    // carry0 | carry1 -> carry or borrow respectively\n-    let cb_out = fx.bcx.ins().bor(cb0, cb1);\n-\n-    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n-    let val = CValue::by_val_pair(cb_out, c, layout);\n-    ret.write_cvalue(fx, val);\n-}"}, {"sha": "7959176ac85df470037730690e555f178e322b2a", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=f99140eb94d43e131477bc8af4622f014c784f1e", "patch": "@@ -0,0 +1,218 @@\n+//! Emulate AArch64 LLVM intrinsics\n+\n+use crate::intrinsics::*;\n+use crate::prelude::*;\n+\n+use rustc_middle::ty::subst::SubstsRef;\n+\n+pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    intrinsic: &str,\n+    _substs: SubstsRef<'tcx>,\n+    args: &[mir::Operand<'tcx>],\n+    ret: CPlace<'tcx>,\n+    target: Option<BasicBlock>,\n+) {\n+    // llvm.aarch64.neon.sqshl.v*i*\n+\n+    match intrinsic {\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.abs.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().iabs(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.cls.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().cls(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.rbit.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().bitrev(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqadd.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane_typed(fx, x, y, ret, &|fx, x_lane, y_lane| {\n+                crate::num::codegen_saturating_int_binop(fx, BinOp::Add, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqsub.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane_typed(fx, x, y, ret, &|fx, x_lane, y_lane| {\n+                crate::num::codegen_saturating_int_binop(fx, BinOp::Sub, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smax.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umax.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smaxv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umaxv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.smin.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.umin.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane(\n+                fx,\n+                x,\n+                y,\n+                ret,\n+                &|fx, _lane_ty, _res_lane_ty, x_lane, y_lane| {\n+                    let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane);\n+                    fx.bcx.ins().select(gt, x_lane, y_lane)\n+                },\n+            );\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sminv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.uminv.i\") => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| {\n+                let gt = fx.bcx.ins().icmp(IntCC::UnsignedLessThan, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        }\n+\n+        /*\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sshl.v\")\n+            || intrinsic.starts_with(\"llvm.aarch64.neon.sqshl.v\")\n+            // FIXME split this one out once saturating is implemented\n+            || intrinsic.starts_with(\"llvm.aarch64.neon.sqshlu.v\") =>\n+        {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, a, b, ret, &|fx, _lane_ty, _res_lane_ty, a, b| {\n+                // FIXME saturate?\n+                fx.bcx.ins().ishl(a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqshrn.v\") => {\n+            let (a, imm32) = match args {\n+                [a, imm32] => (a, imm32),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm32 = crate::constant::mir_operand_get_const_val(fx, imm32)\n+                .expect(\"llvm.aarch64.neon.sqshrn.v* imm32 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm32\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm32 not scalar: {:?}\", imm32))\n+            {\n+                imm32 if imm32 < 32 => fx.bcx.ins().sshr_imm(lane, i64::from(imm32 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqshrun.v\") => {\n+            let (a, imm32) = match args {\n+                [a, imm32] => (a, imm32),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm32 = crate::constant::mir_operand_get_const_val(fx, imm32)\n+                .expect(\"llvm.aarch64.neon.sqshrn.v* imm32 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm32\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm32 not scalar: {:?}\", imm32))\n+            {\n+                imm32 if imm32 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm32 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        */\n+        _ => {\n+            fx.tcx.sess.warn(&format!(\n+                \"unsupported AArch64 llvm intrinsic {}; replacing with trap\",\n+                intrinsic\n+            ));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+            return;\n+        }\n+    }\n+\n+    let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");\n+    let ret_block = fx.get_block(dest);\n+    fx.bcx.ins().jump(ret_block, &[]);\n+}"}, {"sha": "7bc161fbe55236a1b03ad08db5a80e274f94d7f8", "filename": "src/intrinsics/llvm_x86.rs", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=f99140eb94d43e131477bc8af4622f014c784f1e", "patch": "@@ -0,0 +1,197 @@\n+//! Emulate x86 LLVM intrinsics\n+\n+use crate::intrinsics::*;\n+use crate::prelude::*;\n+\n+use rustc_middle::ty::subst::SubstsRef;\n+\n+pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    intrinsic: &str,\n+    _substs: SubstsRef<'tcx>,\n+    args: &[mir::Operand<'tcx>],\n+    ret: CPlace<'tcx>,\n+    target: Option<BasicBlock>,\n+) {\n+    match intrinsic {\n+        \"llvm.x86.sse2.pause\" | \"llvm.aarch64.isb\" => {\n+            // Spin loop hint\n+        }\n+\n+        // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n+        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n+            let lane_ty = fx.clif_type(lane_ty).unwrap();\n+            assert!(lane_count <= 32);\n+\n+            let mut res = fx.bcx.ins().iconst(types::I32, 0);\n+\n+            for lane in (0..lane_count).rev() {\n+                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n+\n+                // cast float to int\n+                let a_lane = match lane_ty {\n+                    types::F32 => fx.bcx.ins().bitcast(types::I32, a_lane),\n+                    types::F64 => fx.bcx.ins().bitcast(types::I64, a_lane),\n+                    _ => a_lane,\n+                };\n+\n+                // extract sign bit of an int\n+                let a_lane_sign = fx.bcx.ins().ushr_imm(a_lane, i64::from(lane_ty.bits() - 1));\n+\n+                // shift sign bit into result\n+                let a_lane_sign = clif_intcast(fx, a_lane_sign, types::I32, false);\n+                res = fx.bcx.ins().ishl_imm(res, 1);\n+                res = fx.bcx.ins().bor(res, a_lane_sign);\n+            }\n+\n+            let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n+            ret.write_cvalue(fx, res);\n+        }\n+        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\" => {\n+            let (x, y, kind) = match args {\n+                [x, y, kind] => (x, y, kind),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+            let kind = crate::constant::mir_operand_get_const_val(fx, kind)\n+                .expect(\"llvm.x86.sse2.cmp.* kind not const\");\n+\n+            let flt_cc = match kind\n+                .try_to_bits(Size::from_bytes(1))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind))\n+            {\n+                0 => FloatCC::Equal,\n+                1 => FloatCC::LessThan,\n+                2 => FloatCC::LessThanOrEqual,\n+                7 => FloatCC::Ordered,\n+                3 => FloatCC::Unordered,\n+                4 => FloatCC::NotEqual,\n+                5 => FloatCC::UnorderedOrGreaterThanOrEqual,\n+                6 => FloatCC::UnorderedOrGreaterThan,\n+                kind => unreachable!(\"kind {:?}\", kind),\n+            };\n+\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n+                let res_lane = match lane_ty.kind() {\n+                    ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                };\n+                bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n+            });\n+        }\n+        \"llvm.x86.sse2.psrli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.sse2.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.sse2.storeu.dq\" => {\n+            intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n+            let mem_addr = mem_addr.load_scalar(fx);\n+\n+            // FIXME correctly handle the unalignment\n+            let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n+            dest.write_cvalue(fx, a);\n+        }\n+        \"llvm.x86.addcarry.64\" => {\n+            intrinsic_args!(fx, args => (c_in, a, b); intrinsic);\n+            let c_in = c_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Add, ret, c_in, a, b);\n+        }\n+        \"llvm.x86.subborrow.64\" => {\n+            intrinsic_args!(fx, args => (b_in, a, b); intrinsic);\n+            let b_in = b_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n+        }\n+        _ => {\n+            fx.tcx.sess.warn(&format!(\n+                \"unsupported x86 llvm intrinsic {}; replacing with trap\",\n+                intrinsic\n+            ));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+            return;\n+        }\n+    }\n+\n+    let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");\n+    let ret_block = fx.get_block(dest);\n+    fx.bcx.ins().jump(ret_block, &[]);\n+}\n+\n+// llvm.x86.avx2.vperm2i128\n+// llvm.x86.ssse3.pshuf.b.128\n+// llvm.x86.avx2.pshuf.b\n+// llvm.x86.avx2.psrli.w\n+// llvm.x86.sse2.psrli.w\n+\n+fn llvm_add_sub<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    bin_op: BinOp,\n+    ret: CPlace<'tcx>,\n+    cb_in: Value,\n+    a: CValue<'tcx>,\n+    b: CValue<'tcx>,\n+) {\n+    assert_eq!(\n+        a.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\"\n+    );\n+    assert_eq!(\n+        b.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\"\n+    );\n+\n+    // c + carry -> c + first intermediate carry or borrow respectively\n+    let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n+    let c = int0.value_field(fx, mir::Field::new(0));\n+    let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n+\n+    // c + carry -> c + second intermediate carry or borrow respectively\n+    let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);\n+    let cb_in_as_u64 = CValue::by_val(cb_in_as_u64, fx.layout_of(fx.tcx.types.u64));\n+    let int1 = crate::num::codegen_checked_int_binop(fx, bin_op, c, cb_in_as_u64);\n+    let (c, cb1) = int1.load_scalar_pair(fx);\n+\n+    // carry0 | carry1 -> carry or borrow respectively\n+    let cb_out = fx.bcx.ins().bor(cb0, cb1);\n+\n+    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let val = CValue::by_val_pair(cb_out, c, layout);\n+    ret.write_cvalue(fx, val);\n+}"}, {"sha": "8f13af8154e9ec8d97be33b4f145da31568eb2b1", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99140eb94d43e131477bc8af4622f014c784f1e/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=f99140eb94d43e131477bc8af4622f014c784f1e", "patch": "@@ -14,6 +14,8 @@ macro_rules! intrinsic_args {\n \n mod cpuid;\n mod llvm;\n+mod llvm_aarch64;\n+mod llvm_x86;\n mod simd;\n \n pub(crate) use cpuid::codegen_cpuid_call;"}]}