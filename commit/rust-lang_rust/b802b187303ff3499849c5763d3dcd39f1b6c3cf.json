{"sha": "b802b187303ff3499849c5763d3dcd39f1b6c3cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MDJiMTg3MzAzZmYzNDk5ODQ5YzU3NjNkM2RjZDM5ZjFiNmMzY2Y=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-19T07:50:48Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-19T12:25:35Z"}, "message": "Don't call drop when taking the address of unsized fields\n\nWhen taking the address of an unsized field we generate a rvalue datum\nfor the field and then convert it to an lvalue datum. At that point,\ncleanup is scheduled for the field, leading to multiple drop calls.\n\nThe problem is that we generate an rvalue datum for the field, since the\npointer does not own the data and there's already cleanup scheduled\nelsewhere by the true owner. Instead, an lvalue datum must be created.\n\nThanks to @eddyb for identifying the underlying cause and suggesting the\ncorrect fix.\n\nFixes #25549\nFixes #25515", "tree": {"sha": "487080328072a479e7e36c1b4620c4604d077d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487080328072a479e7e36c1b4620c4604d077d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b802b187303ff3499849c5763d3dcd39f1b6c3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b802b187303ff3499849c5763d3dcd39f1b6c3cf", "html_url": "https://github.com/rust-lang/rust/commit/b802b187303ff3499849c5763d3dcd39f1b6c3cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b802b187303ff3499849c5763d3dcd39f1b6c3cf/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b1e084862c08c19c36f0cf1f3698343c8ba7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b1e084862c08c19c36f0cf1f3698343c8ba7fa", "html_url": "https://github.com/rust-lang/rust/commit/84b1e084862c08c19c36f0cf1f3698343c8ba7fa"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "1c812a820b118c333d09f9b0d6251d177c96bc01", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b802b187303ff3499849c5763d3dcd39f1b6c3cf", "patch": "@@ -730,8 +730,9 @@ fn trans_field<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             let info = Load(bcx, get_len(bcx, base_datum.val));\n             Store(bcx, info, get_len(bcx, scratch.val));\n \n-            DatumBlock::new(bcx, scratch.to_expr_datum())\n-\n+            // Always generate an lvalue datum, because this pointer doesn't own\n+            // the data and cleanup is scheduled elsewhere.\n+            DatumBlock::new(bcx, Datum::new(scratch.val, scratch.ty, LvalueExpr))\n         }\n     })\n "}, {"sha": "d1746ec01910253628fd48dafd6de0d5c6227394", "filename": "src/test/run-pass/issue-25515.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Ftest%2Frun-pass%2Fissue-25515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Ftest%2Frun-pass%2Fissue-25515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-25515.rs?ref=b802b187303ff3499849c5763d3dcd39f1b6c3cf", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::rc::Rc;\n+\n+struct Foo<'r>(&'r mut i32);\n+\n+impl<'r> Drop for Foo<'r> {\n+    fn drop(&mut self) {\n+        *self.0 += 1;\n+    }\n+}\n+\n+fn main() {\n+    let mut drops = 0;\n+\n+    {\n+        let _: Rc<Send> = Rc::new(Foo(&mut drops));\n+    }\n+\n+    assert_eq!(1, drops);\n+}"}, {"sha": "5280891677e376987a6c3755669418f86e777250", "filename": "src/test/run-pass/issue-25549-multiple-drop.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Ftest%2Frun-pass%2Fissue-25549-multiple-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b802b187303ff3499849c5763d3dcd39f1b6c3cf/src%2Ftest%2Frun-pass%2Fissue-25549-multiple-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-25549-multiple-drop.rs?ref=b802b187303ff3499849c5763d3dcd39f1b6c3cf", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'r>(&'r mut i32);\n+\n+impl<'r> Drop for Foo<'r> {\n+    fn drop(&mut self) {\n+        *self.0 += 1;\n+    }\n+}\n+\n+trait Trait {}\n+impl<'r> Trait for Foo<'r> {}\n+\n+struct Holder<T: ?Sized>(T);\n+\n+fn main() {\n+    let mut drops = 0;\n+\n+    {\n+        let y = &Holder([Foo(&mut drops)]) as &Holder<[Foo]>;\n+        // this used to cause an extra drop of the Foo instance\n+        let x = &y.0;\n+    }\n+    assert_eq!(1, drops);\n+\n+    drops = 0;\n+    {\n+        let y = &Holder(Foo(&mut drops)) as &Holder<Trait>;\n+        // this used to cause an extra drop of the Foo instance\n+        let x = &y.0;\n+    }\n+    assert_eq!(1, drops);\n+}"}]}