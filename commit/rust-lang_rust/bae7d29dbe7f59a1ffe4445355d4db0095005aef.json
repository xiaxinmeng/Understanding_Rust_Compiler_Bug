{"sha": "bae7d29dbe7f59a1ffe4445355d4db0095005aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTdkMjlkYmU3ZjU5YTFmZmU0NDQ1MzU1ZDRkYjAwOTUwMDVhZWY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-16T19:46:07Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-16T19:46:07Z"}, "message": "Add run-rustfix for len_zero lint\n\n* Extracts len_without_is_empty into separate file\n* Adds `// run-rustfix` to `tests/ui/len_zero.rs`", "tree": {"sha": "7abcb4b67bb5eef024e1c90b5b0946bddfd6c592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abcb4b67bb5eef024e1c90b5b0946bddfd6c592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae7d29dbe7f59a1ffe4445355d4db0095005aef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAly2MTYQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5o/xEADUAmsZYjWrnH6RUs2HSrIT6YEAG5sUhPXU\nLB3eQin+qLoOFEPxW9QCZDqmgrUGBbXI0i/Uuwhog6E1+ZPsB2xGrgkdiBApM3B0\n1pWDFdI+4sDYS0l2pPcAe/Bl5DZNIRtiB3tHkj2ZOBv0zU/PJ516GmyUMXRSXrzO\nboOT5pi7WSxV/R1iGuUkKohJZTh7rPiYGbj2104ufrw63EWWNfX/REGVUCyrYz80\noVYfK7Ai5dOrlWoxfYUNzu0sz0zs3ZcFXc2QGwHkl6PtWhsmbSkwC5Zy5yT7nH0u\nLpPRfjvprzOiGhIMVZCI0dHOv95eHtWRwcXnERGnm/Kr2tpGsu3XW0KtRegs+fek\ngRIZoujvE5nAbtIC+baWUpmuE8qghDvpG3V1nJg3x6HeMxIgY3Wf92CCWltbdvcg\nJmfVkZ1rVNYN35FATQkOGzdbjww137M0ZSL16l63TgfjUFNWiz7mdG2MJmSo1V7p\nIVUmkfU4T4bf72gY6hUXsPKH844xIALqUAeeZJ0JyEBTuHGX3N88P9Uif27Qbyud\n0yrYb3N3B5SIfeBiR2UPEoY1PpB92vB03S72XcIu50/ZGr3mglcPxChoNWGbGdlH\n3QWPUCduGGUYNU5dbObLz5tj95lqoJaoE9cZTnK6qNEcL1t1xGRt5mP2XKxzexKK\nrfetjAiljw==\n=/aXa\n-----END PGP SIGNATURE-----", "payload": "tree 7abcb4b67bb5eef024e1c90b5b0946bddfd6c592\nparent d516925ec8ff4d39e32830442959fad16407e87e\nauthor Philipp Hansch <dev@phansch.net> 1555443967 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1555443967 +0200\n\nAdd run-rustfix for len_zero lint\n\n* Extracts len_without_is_empty into separate file\n* Adds `// run-rustfix` to `tests/ui/len_zero.rs`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae7d29dbe7f59a1ffe4445355d4db0095005aef", "html_url": "https://github.com/rust-lang/rust/commit/bae7d29dbe7f59a1ffe4445355d4db0095005aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae7d29dbe7f59a1ffe4445355d4db0095005aef/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d516925ec8ff4d39e32830442959fad16407e87e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d516925ec8ff4d39e32830442959fad16407e87e", "html_url": "https://github.com/rust-lang/rust/commit/d516925ec8ff4d39e32830442959fad16407e87e"}], "stats": {"total": 530, "additions": 367, "deletions": 163}, "files": [{"sha": "3ef29dd63880b7f62757d82ab6a2f6bdf2dfc341", "filename": "tests/ui/len_without_is_empty.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=bae7d29dbe7f59a1ffe4445355d4db0095005aef", "patch": "@@ -0,0 +1,145 @@\n+#![warn(clippy::len_without_is_empty)]\n+#![allow(dead_code, unused)]\n+\n+pub struct PubOne;\n+\n+impl PubOne {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+}\n+\n+impl PubOne {\n+    // A second impl for this struct -- the error span shouldn't mention this.\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+// Identical to `PubOne`, but with an `allow` attribute on the impl complaining `len`.\n+pub struct PubAllowed;\n+\n+#[allow(clippy::len_without_is_empty)]\n+impl PubAllowed {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+}\n+\n+// No `allow` attribute on this impl block, but that doesn't matter -- we only require one on the\n+// impl containing `len`.\n+impl PubAllowed {\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+pub trait PubTraitsToo {\n+    fn len(self: &Self) -> isize;\n+}\n+\n+impl PubTraitsToo for One {\n+    fn len(self: &Self) -> isize {\n+        0\n+    }\n+}\n+\n+pub struct HasIsEmpty;\n+\n+impl HasIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+pub struct HasWrongIsEmpty;\n+\n+impl HasWrongIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    pub fn is_empty(self: &Self, x: u32) -> bool {\n+        false\n+    }\n+}\n+\n+struct NotPubOne;\n+\n+impl NotPubOne {\n+    pub fn len(self: &Self) -> isize {\n+        // No error; `len` is pub but `NotPubOne` is not exported anyway.\n+        1\n+    }\n+}\n+\n+struct One;\n+\n+impl One {\n+    fn len(self: &Self) -> isize {\n+        // No error; `len` is private; see issue #1085.\n+        1\n+    }\n+}\n+\n+trait TraitsToo {\n+    fn len(self: &Self) -> isize;\n+    // No error; `len` is private; see issue #1085.\n+}\n+\n+impl TraitsToo for One {\n+    fn len(self: &Self) -> isize {\n+        0\n+    }\n+}\n+\n+struct HasPrivateIsEmpty;\n+\n+impl HasPrivateIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+struct Wither;\n+\n+pub trait WithIsEmpty {\n+    fn len(self: &Self) -> isize;\n+    fn is_empty(self: &Self) -> bool;\n+}\n+\n+impl WithIsEmpty for Wither {\n+    fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+pub trait Empty {\n+    fn is_empty(&self) -> bool;\n+}\n+\n+pub trait InheritingEmpty: Empty {\n+    // Must not trigger `LEN_WITHOUT_IS_EMPTY`.\n+    fn len(&self) -> isize;\n+}\n+\n+// This used to ICE.\n+pub trait Foo: Sized {}\n+\n+pub trait DependsOnFoo: Foo {\n+    fn len(&mut self) -> usize;\n+}\n+\n+fn main() {}"}, {"sha": "4493b17a4b4e5672a0a494165ee78788955bc206", "filename": "tests/ui/len_without_is_empty.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=bae7d29dbe7f59a1ffe4445355d4db0095005aef", "patch": "@@ -0,0 +1,54 @@\n+error: item `PubOne` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:6:1\n+   |\n+LL | / impl PubOne {\n+LL | |     pub fn len(self: &Self) -> isize {\n+LL | |         1\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::len-without-is-empty` implied by `-D warnings`\n+\n+error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:37:1\n+   |\n+LL | / pub trait PubTraitsToo {\n+LL | |     fn len(self: &Self) -> isize;\n+LL | | }\n+   | |_^\n+\n+error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:49:1\n+   |\n+LL | / impl HasIsEmpty {\n+LL | |     pub fn len(self: &Self) -> isize {\n+LL | |         1\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:61:1\n+   |\n+LL | / impl HasWrongIsEmpty {\n+LL | |     pub fn len(self: &Self) -> isize {\n+LL | |         1\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n+  --> $DIR/len_without_is_empty.rs:141:1\n+   |\n+LL | / pub trait DependsOnFoo: Foo {\n+LL | |     fn len(&mut self) -> usize;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "56109a0fa5fbdc6ca1a3afcdcc60fb27b5fc0601", "filename": "tests/ui/len_zero.fixed", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=bae7d29dbe7f59a1ffe4445355d4db0095005aef", "patch": "@@ -0,0 +1,143 @@\n+// run-rustfix\n+\n+#![warn(clippy::len_zero)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty)]\n+\n+pub struct One;\n+struct Wither;\n+\n+trait TraitsToo {\n+    fn len(self: &Self) -> isize;\n+    // No error; `len` is private; see issue #1085.\n+}\n+\n+impl TraitsToo for One {\n+    fn len(self: &Self) -> isize {\n+        0\n+    }\n+}\n+\n+pub struct HasIsEmpty;\n+\n+impl HasIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+pub struct HasWrongIsEmpty;\n+\n+impl HasWrongIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    pub fn is_empty(self: &Self, x: u32) -> bool {\n+        false\n+    }\n+}\n+\n+pub trait WithIsEmpty {\n+    fn len(self: &Self) -> isize;\n+    fn is_empty(self: &Self) -> bool;\n+}\n+\n+impl WithIsEmpty for Wither {\n+    fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let x = [1, 2];\n+    if x.is_empty() {\n+        println!(\"This should not happen!\");\n+    }\n+\n+    if \"\".is_empty() {}\n+\n+    let y = One;\n+    if y.len() == 0 {\n+        // No error; `One` does not have `.is_empty()`.\n+        println!(\"This should not happen either!\");\n+    }\n+\n+    let z: &TraitsToo = &y;\n+    if z.len() > 0 {\n+        // No error; `TraitsToo` has no `.is_empty()` method.\n+        println!(\"Nor should this!\");\n+    }\n+\n+    let has_is_empty = HasIsEmpty;\n+    if has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if has_is_empty.len() > 1 {\n+        // No error.\n+        println!(\"This can happen.\");\n+    }\n+    if has_is_empty.len() <= 1 {\n+        // No error.\n+        println!(\"This can happen.\");\n+    }\n+    if has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if !has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if has_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    if 1 < has_is_empty.len() {\n+        // No error.\n+        println!(\"This can happen.\");\n+    }\n+    if 1 >= has_is_empty.len() {\n+        // No error.\n+        println!(\"This can happen.\");\n+    }\n+    assert!(!has_is_empty.is_empty());\n+\n+    let with_is_empty: &WithIsEmpty = &Wither;\n+    if with_is_empty.is_empty() {\n+        println!(\"Or this!\");\n+    }\n+    assert!(!with_is_empty.is_empty());\n+\n+    let has_wrong_is_empty = HasWrongIsEmpty;\n+    if has_wrong_is_empty.len() == 0 {\n+        // No error; `HasWrongIsEmpty` does not have `.is_empty()`.\n+        println!(\"Or this!\");\n+    }\n+}\n+\n+fn test_slice(b: &[u8]) {\n+    if !b.is_empty() {}\n+}"}, {"sha": "0a77f1194621db3101fd0ed16416749349f6576f", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 10, "deletions": 96, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=bae7d29dbe7f59a1ffe4445355d4db0095005aef", "patch": "@@ -1,66 +1,10 @@\n-#![warn(clippy::len_without_is_empty, clippy::len_zero)]\n-#![allow(dead_code, unused)]\n+// run-rustfix\n \n-pub struct PubOne;\n+#![warn(clippy::len_zero)]\n+#![allow(dead_code, unused, clippy::len_without_is_empty)]\n \n-impl PubOne {\n-    pub fn len(self: &Self) -> isize {\n-        1\n-    }\n-}\n-\n-impl PubOne {\n-    // A second impl for this struct -- the error span shouldn't mention this.\n-    pub fn irrelevant(self: &Self) -> bool {\n-        false\n-    }\n-}\n-\n-// Identical to `PubOne`, but with an `allow` attribute on the impl complaining `len`.\n-pub struct PubAllowed;\n-\n-#[allow(clippy::len_without_is_empty)]\n-impl PubAllowed {\n-    pub fn len(self: &Self) -> isize {\n-        1\n-    }\n-}\n-\n-// No `allow` attribute on this impl block, but that doesn't matter -- we only require one on the\n-// impl containing `len`.\n-impl PubAllowed {\n-    pub fn irrelevant(self: &Self) -> bool {\n-        false\n-    }\n-}\n-\n-struct NotPubOne;\n-\n-impl NotPubOne {\n-    pub fn len(self: &Self) -> isize {\n-        // No error; `len` is pub but `NotPubOne` is not exported anyway.\n-        1\n-    }\n-}\n-\n-struct One;\n-\n-impl One {\n-    fn len(self: &Self) -> isize {\n-        // No error; `len` is private; see issue #1085.\n-        1\n-    }\n-}\n-\n-pub trait PubTraitsToo {\n-    fn len(self: &Self) -> isize;\n-}\n-\n-impl PubTraitsToo for One {\n-    fn len(self: &Self) -> isize {\n-        0\n-    }\n-}\n+pub struct One;\n+struct Wither;\n \n trait TraitsToo {\n     fn len(self: &Self) -> isize;\n@@ -73,9 +17,9 @@ impl TraitsToo for One {\n     }\n }\n \n-struct HasPrivateIsEmpty;\n+pub struct HasIsEmpty;\n \n-impl HasPrivateIsEmpty {\n+impl HasIsEmpty {\n     pub fn len(self: &Self) -> isize {\n         1\n     }\n@@ -85,20 +29,18 @@ impl HasPrivateIsEmpty {\n     }\n }\n \n-pub struct HasIsEmpty;\n+pub struct HasWrongIsEmpty;\n \n-impl HasIsEmpty {\n+impl HasWrongIsEmpty {\n     pub fn len(self: &Self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    pub fn is_empty(self: &Self, x: u32) -> bool {\n         false\n     }\n }\n \n-struct Wither;\n-\n pub trait WithIsEmpty {\n     fn len(self: &Self) -> isize;\n     fn is_empty(self: &Self) -> bool;\n@@ -114,27 +56,6 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n-pub struct HasWrongIsEmpty;\n-\n-impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n-        1\n-    }\n-\n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n-        false\n-    }\n-}\n-\n-pub trait Empty {\n-    fn is_empty(&self) -> bool;\n-}\n-\n-pub trait InheritingEmpty: Empty {\n-    // Must not trigger `LEN_WITHOUT_IS_EMPTY`.\n-    fn len(&self) -> isize;\n-}\n-\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {\n@@ -220,10 +141,3 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if b.len() != 0 {}\n }\n-\n-// This used to ICE.\n-pub trait Foo: Sized {}\n-\n-pub trait DependsOnFoo: Foo {\n-    fn len(&mut self) -> usize;\n-}"}, {"sha": "9a472b31e215fd4de0f1e4cd0f78dc0be73a0df4", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 15, "deletions": 67, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bae7d29dbe7f59a1ffe4445355d4db0095005aef/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=bae7d29dbe7f59a1ffe4445355d4db0095005aef", "patch": "@@ -1,140 +1,88 @@\n-error: item `PubOne` has a public `len` method but no corresponding `is_empty` method\n-  --> $DIR/len_zero.rs:6:1\n-   |\n-LL | / impl PubOne {\n-LL | |     pub fn len(self: &Self) -> isize {\n-LL | |         1\n-LL | |     }\n-LL | | }\n-   | |_^\n-   |\n-   = note: `-D clippy::len-without-is-empty` implied by `-D warnings`\n-\n-error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_empty` method\n-  --> $DIR/len_zero.rs:55:1\n-   |\n-LL | / pub trait PubTraitsToo {\n-LL | |     fn len(self: &Self) -> isize;\n-LL | | }\n-   | |_^\n-\n-error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n-  --> $DIR/len_zero.rs:90:1\n-   |\n-LL | / impl HasIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n-LL | |         1\n-LL | |     }\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n-  --> $DIR/len_zero.rs:119:1\n-   |\n-LL | / impl HasWrongIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n-LL | |         1\n-LL | |     }\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n error: length comparison to zero\n-  --> $DIR/len_zero.rs:140:8\n+  --> $DIR/len_zero.rs:61:8\n    |\n LL |     if x.len() == 0 {\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `x.is_empty()`\n    |\n    = note: `-D clippy::len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:144:8\n+  --> $DIR/len_zero.rs:65:8\n    |\n LL |     if \"\".len() == 0 {}\n    |        ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `\"\".is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:159:8\n+  --> $DIR/len_zero.rs:80:8\n    |\n LL |     if has_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:162:8\n+  --> $DIR/len_zero.rs:83:8\n    |\n LL |     if has_is_empty.len() != 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:165:8\n+  --> $DIR/len_zero.rs:86:8\n    |\n LL |     if has_is_empty.len() > 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:168:8\n+  --> $DIR/len_zero.rs:89:8\n    |\n LL |     if has_is_empty.len() < 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:171:8\n+  --> $DIR/len_zero.rs:92:8\n    |\n LL |     if has_is_empty.len() >= 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:182:8\n+  --> $DIR/len_zero.rs:103:8\n    |\n LL |     if 0 == has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:185:8\n+  --> $DIR/len_zero.rs:106:8\n    |\n LL |     if 0 != has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:188:8\n+  --> $DIR/len_zero.rs:109:8\n    |\n LL |     if 0 < has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:191:8\n+  --> $DIR/len_zero.rs:112:8\n    |\n LL |     if 1 <= has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:194:8\n+  --> $DIR/len_zero.rs:115:8\n    |\n LL |     if 1 > has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:208:8\n+  --> $DIR/len_zero.rs:129:8\n    |\n LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:221:8\n+  --> $DIR/len_zero.rs:142:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!b.is_empty()`\n \n-error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n-  --> $DIR/len_zero.rs:227:1\n-   |\n-LL | / pub trait DependsOnFoo: Foo {\n-LL | |     fn len(&mut self) -> usize;\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 19 previous errors\n+error: aborting due to 14 previous errors\n "}]}