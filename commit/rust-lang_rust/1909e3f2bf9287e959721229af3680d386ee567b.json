{"sha": "1909e3f2bf9287e959721229af3680d386ee567b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDllM2YyYmY5Mjg3ZTk1OTcyMTIyOWFmMzY4MGQzODZlZTU2N2I=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T10:31:53Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "`Constructor::display` was only needed for displaying `IntRange`\n\nI'm planning to stop using `ConstantRange`/`ConstantValue` for integral\ntypes, so going through `Constructor` will soon not be relevant.", "tree": {"sha": "19ab259127cadd9e5dd1fd30a19b8d24a2b5172b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ab259127cadd9e5dd1fd30a19b8d24a2b5172b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1909e3f2bf9287e959721229af3680d386ee567b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1909e3f2bf9287e959721229af3680d386ee567b", "html_url": "https://github.com/rust-lang/rust/commit/1909e3f2bf9287e959721229af3680d386ee567b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1909e3f2bf9287e959721229af3680d386ee567b/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a50886aa17e4b22841c9eafdd3506b3b92e62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a50886aa17e4b22841c9eafdd3506b3b92e62b", "html_url": "https://github.com/rust-lang/rust/commit/75a50886aa17e4b22841c9eafdd3506b3b92e62b"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "1e80dbd2b38d8eaebfe2aba891b2eaced8b468a4", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1909e3f2bf9287e959721229af3680d386ee567b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909e3f2bf9287e959721229af3680d386ee567b/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1909e3f2bf9287e959721229af3680d386ee567b", "patch": "@@ -655,25 +655,6 @@ impl<'tcx> Constructor<'tcx> {\n         }\n     }\n \n-    fn display(&self, tcx: TyCtxt<'tcx>) -> String {\n-        match self {\n-            Constructor::ConstantValue(val, _) => format!(\"{}\", val),\n-            Constructor::ConstantRange(lo, hi, ty, range_end, _) => {\n-                // Get the right sign on the output:\n-                let ty = ty::ParamEnv::empty().and(*ty);\n-                format!(\n-                    \"{}{}{}\",\n-                    ty::Const::from_bits(tcx, *lo, ty),\n-                    range_end,\n-                    ty::Const::from_bits(tcx, *hi, ty),\n-                )\n-            }\n-            Constructor::FixedLenSlice(val) => format!(\"[{}]\", val),\n-            Constructor::VarLenSlice(prefix, suffix) => format!(\"[{}, .., {}]\", prefix, suffix),\n-            _ => bug!(\"bad constructor being displayed: `{:?}\", self),\n-        }\n-    }\n-\n     // Returns the set of constructors covered by `self` but not by\n     // anything in `other_ctors`.\n     fn subtract_ctors(\n@@ -1473,6 +1454,23 @@ impl<'tcx> IntRange<'tcx> {\n         let (other_lo, other_hi) = (*other.range.start(), *other.range.end());\n         (lo == other_hi || hi == other_lo)\n     }\n+\n+    fn display(&self, tcx: TyCtxt<'tcx>) -> String {\n+        let (lo, hi) = (self.range.start(), self.range.end());\n+\n+        let bias = IntRange::signed_bias(tcx, self.ty);\n+        let (lo, hi) = (lo ^ bias, hi ^ bias);\n+\n+        let ty = ty::ParamEnv::empty().and(self.ty);\n+        let lo_const = ty::Const::from_bits(tcx, lo, ty);\n+        let hi_const = ty::Const::from_bits(tcx, hi, ty);\n+\n+        if lo == hi {\n+            format!(\"{}\", lo_const)\n+        } else {\n+            format!(\"{}{}{}\", lo_const, RangeEnd::Included, hi_const)\n+        }\n+    }\n }\n \n // Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n@@ -2118,9 +2116,7 @@ fn lint_overlapping_patterns(\n                 int_range.span,\n                 &format!(\n                     \"this range overlaps on `{}`\",\n-                    IntRange { range: int_range.range, ty, span: DUMMY_SP }\n-                        .into_ctor(tcx)\n-                        .display(tcx),\n+                    IntRange { range: int_range.range, ty, span: DUMMY_SP }.display(tcx),\n                 ),\n             );\n         }"}]}