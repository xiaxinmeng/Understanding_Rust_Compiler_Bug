{"sha": "90e0fedb5622e2043042927f9accde4aa5ed1e9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTBmZWRiNTYyMmUyMDQzMDQyOTI3ZjlhY2NkZTRhYTVlZDFlOWQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T09:16:57Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-10T13:52:56Z"}, "message": "Clean up check_full_res", "tree": {"sha": "0373d7cd4d74d9d6c6a555af1513bea8e730e971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0373d7cd4d74d9d6c6a555af1513bea8e730e971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e0fedb5622e2043042927f9accde4aa5ed1e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e0fedb5622e2043042927f9accde4aa5ed1e9d", "html_url": "https://github.com/rust-lang/rust/commit/90e0fedb5622e2043042927f9accde4aa5ed1e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e0fedb5622e2043042927f9accde4aa5ed1e9d/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8ca69602fac58362df66a3fc9028211c6d6f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8ca69602fac58362df66a3fc9028211c6d6f2a", "html_url": "https://github.com/rust-lang/rust/commit/9a8ca69602fac58362df66a3fc9028211c6d6f2a"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "d3efbc3f53466264b31a1b4a8a234f2aac5b440a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/90e0fedb5622e2043042927f9accde4aa5ed1e9d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e0fedb5622e2043042927f9accde4aa5ed1e9d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=90e0fedb5622e2043042927f9accde4aa5ed1e9d", "patch": "@@ -571,30 +571,21 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         current_item: &Option<String>,\n         extra_fragment: &Option<String>,\n     ) -> Option<Res> {\n-        let check_full_res_inner = |this: &Self, result: Result<Res, ErrorKind<'_>>| {\n-            let res = match result {\n-                Ok(res) => Some(res),\n-                Err(ErrorKind::Resolve(box kind)) => kind.full_res(),\n-                Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res))) => {\n-                    Some(res)\n-                }\n-                Err(ErrorKind::AnchorFailure(AnchorFailure::MultipleAnchors)) => None,\n-            };\n-            this.kind_side_channel.take().map(|(kind, id)| Res::Def(kind, id)).or(res)\n-        };\n-        // cannot be used for macro namespace\n-        let check_full_res = |this: &Self, ns| {\n-            let result = this.resolve(path_str, ns, current_item, module_id, extra_fragment);\n-            check_full_res_inner(this, result.map(|(res, _)| res))\n+        // resolve can't be used for macro namespace\n+        let result = match ns {\n+            Namespace::MacroNS => self.macro_resolve(path_str, module_id).map_err(ErrorKind::from),\n+            Namespace::TypeNS | Namespace::ValueNS => self\n+                .resolve(path_str, ns, current_item, module_id, extra_fragment)\n+                .map(|(res, _)| res),\n         };\n-        let check_full_res_macro = |this: &Self| {\n-            let result = this.macro_resolve(path_str, module_id);\n-            check_full_res_inner(this, result.map_err(ErrorKind::from))\n+\n+        let res = match result {\n+            Ok(res) => Some(res),\n+            Err(ErrorKind::Resolve(box kind)) => kind.full_res(),\n+            Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res))) => Some(res),\n+            Err(ErrorKind::AnchorFailure(AnchorFailure::MultipleAnchors)) => None,\n         };\n-        match ns {\n-            Namespace::MacroNS => check_full_res_macro(self),\n-            Namespace::TypeNS | Namespace::ValueNS => check_full_res(self, ns),\n-        }\n+        self.kind_side_channel.take().map(|(kind, id)| Res::Def(kind, id)).or(res)\n     }\n }\n "}]}