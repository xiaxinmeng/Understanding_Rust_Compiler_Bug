{"sha": "b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTViN2I0M2I1ODEyYTA3YjhmYTdlZDAyMmIyZjBmMDEyYTQ5NTA=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-28T17:10:12Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-28T17:10:12Z"}, "message": "restore old behaviour", "tree": {"sha": "8de5392f10b2f296c149ea0f9963c453a7f66b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de5392f10b2f296c149ea0f9963c453a7f66b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "html_url": "https://github.com/rust-lang/rust/commit/b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b795b7b43b5812a07b8fa7ed022b2f0f012a4950/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "html_url": "https://github.com/rust-lang/rust/commit/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7"}], "stats": {"total": 19, "additions": 1, "deletions": 18}, "files": [{"sha": "91b348fb5d6776e96d90bc5377badb388c1e6478", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b795b7b43b5812a07b8fa7ed022b2f0f012a4950/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795b7b43b5812a07b8fa7ed022b2f0f012a4950/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b795b7b43b5812a07b8fa7ed022b2f0f012a4950", "patch": "@@ -499,24 +499,6 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        let len = size_of::<T>();\n-\n-        if len < 128 {\n-            // Give ourselves some scratch space to work with\n-            let mut t: T = uninitialized();\n-   \n-            // Perform the swap, `&mut` pointers never alias\n-            ptr::copy_nonoverlapping(&*x, &mut t, 1);\n-            ptr::copy_nonoverlapping(&*y, x, 1);\n-            ptr::copy_nonoverlapping(&t, y, 1);\n-   \n-            // y and t now point to the same thing, but we need to completely\n-            // forget `t` because we do not want to run the destructor for `T`\n-            // on its value, which is still owned somewhere outside this function.\n-            forget(t);\n-            return;\n-        }\n-\n         // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n         // that swapping either 32 bytes or 64 bytes at a time is most efficient for intel\n         // Haswell E processors. LLVM is more able to optimize if we give a struct a\n@@ -534,6 +516,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // Loop through x & y, copying them `Block` at a time\n         // The optimizer should unroll the loop fully for most types\n         // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively\n+        let len = size_of::<T>();\n         let mut i = 0;\n         while i + block_size <= len {\n             // Create some uninitialized memory as scratch space"}]}