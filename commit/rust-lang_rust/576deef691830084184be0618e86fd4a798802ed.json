{"sha": "576deef691830084184be0618e86fd4a798802ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmRlZWY2OTE4MzAwODQxODRiZTA2MThlODZmZDRhNzk4ODAyZWQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T12:02:32Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T10:23:24Z"}, "message": "mir: rename `should_monomorphize_locally`\n\nThis commit renames `should_monomorphize_locally` to\n`should_codegen_locally` which better describes what the function\ndetermines once polymorphization is added.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "ef65b975f5e92866a0d0696574e8d6b27bd2b3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef65b975f5e92866a0d0696574e8d6b27bd2b3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576deef691830084184be0618e86fd4a798802ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8VcJwACgkQJZLnbIc4\nH9k9SA//dezsUHdqWRVTUHY5ibDnQPCR2BW9oY3ITmje79QVMjY/mp+DdeTUqIPE\nFcs53gzbeXcvTv2nJCdeQDK1ItstkwzSgS35VpHi5XXAlv2TMOKsc+6AirlIjcjQ\nowoBD2/YWCNX+SwLk8VHegxRrRUFeWPVL01bzamWxl8aG+H6YByjMJ86i4YRWAdF\nmK5vTr77wXRqry2Ad3xz6Q9oUxw6zZBcXtCdGLtRn/oO1xz77gSFmTDlxpSR+agO\n5WM19E5Z8a3Z+W6D7EnFBEskD794L3M5E1ZSiWSZn6LutDcewv19eoqclN/5a0sA\nRz1h9EkMesrlazb/qpXLKG9+/6ZvRJapMZEtiUW4/i3jRyIILUBbq9Ur2uZ4Oy+8\nZqNPuFzXZiHHJn0D0Vzy80dxWnS7lUy9YuqYCvoFTOLn0bxHlwIqUOdwGNVLD+mz\nj7LDJXB048ccI0BWUVXLKEBMsuUR3QEl4vQ2jkIiTDRg/6Q2Dmrh/3yeZK1cQ2v9\nTPzTbNnBMBZKEorhMqUk4I0hY1hcyEAKhPyJxnOv1MPqjCvxGbbgPC4rNerKV+4n\niS7y8Pbff/cjPYHyiFoBq1nafnfeEd7VeO5JZDucKfspVmqrT1XETt9HcNnhHFiP\nrYn7F/540Tv/9h6zEXJG9tAXeXTZhY8D7bRzR00xfzAPt+kGd4Q=\n=WwsT\n-----END PGP SIGNATURE-----", "payload": "tree ef65b975f5e92866a0d0696574e8d6b27bd2b3ea\nparent 996bc9abb53fca2c55ecd77b60d200687ad82da4\nauthor David Wood <david@davidtw.co> 1592827352 +0100\ncommitter David Wood <david@davidtw.co> 1595240604 +0100\n\nmir: rename `should_monomorphize_locally`\n\nThis commit renames `should_monomorphize_locally` to\n`should_codegen_locally` which better describes what the function\ndetermines once polymorphization is added.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576deef691830084184be0618e86fd4a798802ed", "html_url": "https://github.com/rust-lang/rust/commit/576deef691830084184be0618e86fd4a798802ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576deef691830084184be0618e86fd4a798802ed/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996bc9abb53fca2c55ecd77b60d200687ad82da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/996bc9abb53fca2c55ecd77b60d200687ad82da4", "html_url": "https://github.com/rust-lang/rust/commit/996bc9abb53fca2c55ecd77b60d200687ad82da4"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "4f998b6806f310abe706fe2ba449308e8b4ec8ed", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/576deef691830084184be0618e86fd4a798802ed/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576deef691830084184be0618e86fd4a798802ed/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=576deef691830084184be0618e86fd4a798802ed", "patch": "@@ -358,7 +358,7 @@ fn collect_items_rec<'tcx>(\n             let instance = Instance::mono(tcx, def_id);\n \n             // Sanity check whether this ended up being collected accidentally\n-            debug_assert!(should_monomorphize_locally(tcx, &instance));\n+            debug_assert!(should_codegen_locally(tcx, &instance));\n \n             let ty = instance.monomorphic_ty(tcx);\n             visit_drop_use(tcx, ty, true, starting_point.span, &mut neighbors);\n@@ -371,7 +371,7 @@ fn collect_items_rec<'tcx>(\n         }\n         MonoItem::Fn(instance) => {\n             // Sanity check whether this ended up being collected accidentally\n-            debug_assert!(should_monomorphize_locally(tcx, &instance));\n+            debug_assert!(should_codegen_locally(tcx, &instance));\n \n             // Keep track of the monomorphization recursion depth\n             recursion_depth_reset =\n@@ -584,7 +584,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                             substs,\n                             ty::ClosureKind::FnOnce,\n                         );\n-                        if should_monomorphize_locally(self.tcx, &instance) {\n+                        if should_codegen_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance, span));\n                         }\n                     }\n@@ -596,14 +596,14 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let exchange_malloc_fn_def_id =\n                     tcx.require_lang_item(ExchangeMallocFnLangItem, None);\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n-                if should_monomorphize_locally(tcx, &instance) {\n+                if should_codegen_locally(tcx, &instance) {\n                     self.output.push(create_fn_mono_item(instance, span));\n                 }\n             }\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(self.tcx.is_thread_local_static(def_id));\n                 let instance = Instance::mono(self.tcx, def_id);\n-                if should_monomorphize_locally(self.tcx, &instance) {\n+                if should_codegen_locally(self.tcx, &instance) {\n                     trace!(\"collecting thread-local static {:?}\", def_id);\n                     self.output.push(respan(span, MonoItem::Static(def_id)));\n                 }\n@@ -664,7 +664,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         }\n                         mir::InlineAsmOperand::SymStatic { def_id } => {\n                             let instance = Instance::mono(self.tcx, def_id);\n-                            if should_monomorphize_locally(self.tcx, &instance) {\n+                            if should_codegen_locally(self.tcx, &instance) {\n                                 trace!(\"collecting asm sym static {:?}\", def_id);\n                                 self.output.push(respan(source, MonoItem::Static(def_id)));\n                             }\n@@ -735,7 +735,7 @@ fn visit_instance_use<'tcx>(\n     output: &mut Vec<Spanned<MonoItem<'tcx>>>,\n ) {\n     debug!(\"visit_item_use({:?}, is_direct_call={:?})\", instance, is_direct_call);\n-    if !should_monomorphize_locally(tcx, &instance) {\n+    if !should_codegen_locally(tcx, &instance) {\n         return;\n     }\n \n@@ -766,7 +766,7 @@ fn visit_instance_use<'tcx>(\n // Returns `true` if we should codegen an instance in the local crate.\n // Returns `false` if we can just link to the upstream crate and therefore don't\n // need a mono item.\n-fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n+fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def) => def.did,\n         ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n@@ -944,7 +944,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n                     )\n                     .unwrap()\n                 })\n-                .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n+                .filter(|&instance| should_codegen_locally(tcx, &instance))\n                 .map(|item| create_fn_mono_item(item, source));\n             output.extend(methods);\n         }\n@@ -1164,8 +1164,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n                         .unwrap();\n \n                     let mono_item = create_fn_mono_item(instance, DUMMY_SP);\n-                    if mono_item.node.is_instantiable(tcx)\n-                        && should_monomorphize_locally(tcx, &instance)\n+                    if mono_item.node.is_instantiable(tcx) && should_codegen_locally(tcx, &instance)\n                     {\n                         output.push(mono_item);\n                     }\n@@ -1186,7 +1185,7 @@ fn collect_miri<'tcx>(\n         GlobalAlloc::Static(def_id) => {\n             assert!(!tcx.is_thread_local_static(def_id));\n             let instance = Instance::mono(tcx, def_id);\n-            if should_monomorphize_locally(tcx, &instance) {\n+            if should_codegen_locally(tcx, &instance) {\n                 trace!(\"collecting static {:?}\", def_id);\n                 output.push(dummy_spanned(MonoItem::Static(def_id)));\n             }\n@@ -1200,7 +1199,7 @@ fn collect_miri<'tcx>(\n             }\n         }\n         GlobalAlloc::Function(fn_instance) => {\n-            if should_monomorphize_locally(tcx, &fn_instance) {\n+            if should_codegen_locally(tcx, &fn_instance) {\n                 trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n                 output.push(create_fn_mono_item(fn_instance, DUMMY_SP));\n             }"}]}