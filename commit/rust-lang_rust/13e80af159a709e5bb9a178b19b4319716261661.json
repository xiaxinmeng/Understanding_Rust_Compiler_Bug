{"sha": "13e80af159a709e5bb9a178b19b4319716261661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTgwYWYxNTlhNzA5ZTViYjlhMTc4YjE5YjQzMTk3MTYyNjE2NjE=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-10-24T09:55:57Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-07T18:31:39Z"}, "message": "support `default impl` for specialization\n\na default impl should never be considered as implementing the\ntrait on its own -- regardless of whether it contains all items\nor not", "tree": {"sha": "a220ff64b4520ee6a2c4191c425f40379b3a54bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a220ff64b4520ee6a2c4191c425f40379b3a54bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e80af159a709e5bb9a178b19b4319716261661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e80af159a709e5bb9a178b19b4319716261661", "html_url": "https://github.com/rust-lang/rust/commit/13e80af159a709e5bb9a178b19b4319716261661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e80af159a709e5bb9a178b19b4319716261661/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c55ff379913b7acca2ae032120e74aaa4dd822", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c55ff379913b7acca2ae032120e74aaa4dd822", "html_url": "https://github.com/rust-lang/rust/commit/f5c55ff379913b7acca2ae032120e74aaa4dd822"}], "stats": {"total": 1591, "additions": 66, "deletions": 1525}, "files": [{"sha": "107779ec3fa155cfc588b36c71aca00842c25196", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -218,8 +218,7 @@ impl_stable_hash_for!(enum ty::Visibility {\n });\n \n impl_stable_hash_for!(struct ty::TraitRef<'tcx> { def_id, substs });\n-impl_stable_hash_for!(enum ty::DefaultImplCheck { Yes, No });\n-impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref, default_impl_check });\n+impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref });\n impl_stable_hash_for!(tuple_struct ty::EquatePredicate<'tcx> { t1, t2 });\n impl_stable_hash_for!(struct ty::SubtypePredicate<'tcx> { a_is_expected, a, b });\n "}, {"sha": "4ed25646d436d03671852d1d3a0fcd0f625e9c85", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1083,39 +1083,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     // Treat negative impls as unimplemented\n-    fn filter_negative_and_default_impls<'o>(&self,\n-                                             candidate: SelectionCandidate<'tcx>,\n-                                             stack: &TraitObligationStack<'o, 'tcx>)\n-                                             -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n-\n+    fn filter_negative_impls(&self, candidate: SelectionCandidate<'tcx>)\n+                             -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         if let ImplCandidate(def_id) = candidate {\n             if self.tcx().impl_polarity(def_id) == hir::ImplPolarity::Negative {\n                 return Err(Unimplemented)\n             }\n-\n-            // if def_id is a default impl and it doesn't implement all the trait items,\n-            // the impl doesn't implement the trait.\n-            // An `Unimplemented` error is returned only if the default_impl_check is\n-            // applicable to the trait predicate or the cause of the predicate is an\n-            // `ObjectCastObligation`\n-            if self.tcx().impl_is_default(def_id) &&\n-               !self.tcx().default_impl_implement_all_methods(def_id){\n-                match stack.obligation.cause.code {\n-                    ObligationCauseCode::ObjectCastObligation(_) =>  {\n-                        return Err(Unimplemented)\n-                    },\n-                    ObligationCauseCode::ItemObligation(..) |\n-                    ObligationCauseCode::MiscObligation =>  {\n-                        if let ty::DefaultImplCheck::Yes = stack.obligation\n-                                                                .predicate\n-                                                                .skip_binder()\n-                                                                .default_impl_check {\n-                            return Err(Unimplemented)\n-                        }\n-                    },\n-                    _ => {}\n-                }\n-            }\n         }\n         Ok(Some(candidate))\n     }\n@@ -1205,8 +1178,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // Instead, we select the right impl now but report `Bar does\n         // not implement Clone`.\n         if candidates.len() == 1 {\n-            return self.filter_negative_and_default_impls(candidates.pop().unwrap(), stack);\n+            return self.filter_negative_impls(candidates.pop().unwrap());\n         }\n+\n         // Winnow, but record the exact outcome of evaluation, which\n         // is needed for specialization.\n         let mut candidates: Vec<_> = candidates.into_iter().filter_map(|c| {\n@@ -1265,7 +1239,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         // Just one candidate left.\n-        self.filter_negative_and_default_impls(candidates.pop().unwrap().candidate, stack)\n+        self.filter_negative_impls(candidates.pop().unwrap().candidate)\n     }\n \n     fn is_knowable<'o>(&mut self,"}, {"sha": "898accb90215934e4006b3e81a982fa494e4bb75", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -22,11 +22,8 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                        pred: &ty::Predicate<'tcx>)\n                                        -> ty::Predicate<'tcx> {\n     match *pred {\n-        ty::Predicate::Trait(ref data) => {\n-            let anonymized_pred = ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data));\n-            anonymized_pred.change_default_impl_check(ty::DefaultImplCheck::No)\n-                           .unwrap_or(anonymized_pred)\n-        }\n+        ty::Predicate::Trait(ref data) =>\n+            ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data)),\n \n         ty::Predicate::Equate(ref data) =>\n             ty::Predicate::Equate(tcx.anonymize_late_bound_regions(data)),\n@@ -557,24 +554,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn impl_item_is_final(self, node_item: &NodeItem<hir::Defaultness>) -> bool {\n         node_item.item.is_final() && !self.impl_is_default(node_item.node.def_id())\n     }\n-\n-    pub fn default_impl_implement_all_methods(self, node_item_def_id: DefId) -> bool {\n-        if let Some(impl_trait_ref) = self.impl_trait_ref(node_item_def_id) {\n-            let trait_def = self.trait_def(impl_trait_ref.def_id);\n-            for trait_item in self.associated_items(impl_trait_ref.def_id) {\n-                let is_implemented = trait_def.ancestors(self, node_item_def_id)\n-                    .defs(self, trait_item.name, trait_item.kind, impl_trait_ref.def_id)\n-                    .next()\n-                    .map(|node_item| !node_item.node.is_from_trait())\n-                    .unwrap_or(false);\n-\n-                if !is_implemented {\n-                    return false;\n-                }\n-            }\n-        }\n-        true\n-    }\n }\n \n pub enum TupleArgumentsFlag { Yes, No }"}, {"sha": "6c727c94f58c5778783b7ef7fb1f897d95efcd1a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 118, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -9,19 +9,14 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs, TyCtxt, AssociatedKind, AssociatedItemContainer};\n+use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n use ty::subst::{Kind, Subst};\n use traits;\n use syntax::abi::Abi;\n use util::ppaux;\n \n use std::fmt;\n \n-use syntax_pos::{BytePos, Span};\n-use syntax::ext::hygiene::SyntaxContext;\n-use hir::map::Node::NodeTraitItem;\n-use hir;\n-\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n@@ -265,13 +260,6 @@ fn resolve_associated_item<'a, 'tcx>(\n         traits::VtableImpl(impl_data) => {\n             let (def_id, substs) = traits::find_associated_item(\n                 tcx, trait_item, rcvr_substs, &impl_data);\n-\n-            check_unimplemented_trait_item(tcx,\n-                                           impl_data.impl_def_id,\n-                                           def_id,\n-                                           trait_id,\n-                                           trait_item);\n-\n             let substs = tcx.erase_regions(&substs);\n             Some(ty::Instance::new(def_id, substs))\n         }\n@@ -375,108 +363,3 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }\n }\n-\n-fn check_unimplemented_trait_item<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    impl_def_id: DefId,\n-    trait_item_def_id: DefId,\n-    trait_id: DefId,\n-    trait_item: &ty::AssociatedItem)\n-{\n-    // if trait_item_def_id is a trait item and it doesn't have a default trait implementation\n-    // the resolution has found an unimplemented trait item inside a default impl\n-    if tcx.impl_is_default(impl_def_id) {\n-        let is_unimplemented_trait_item = match tcx.hir.as_local_node_id(trait_item_def_id) {\n-            Some(node_id) =>\n-                match tcx.hir.find(node_id) {\n-                    Some(NodeTraitItem(item)) => {\n-                        if let hir::TraitItemKind::Method(_,\n-                                                          hir::TraitMethod::Provided(_))\n-                                                          = item.node {\n-                            false\n-                        } else {\n-                            true\n-                        }\n-                    },\n-                    _ => false\n-                }\n-            None => {\n-                let item = tcx.global_tcx().associated_item(trait_item_def_id);\n-                match item.kind {\n-                    AssociatedKind::Method => match item.container {\n-                        AssociatedItemContainer::TraitContainer(_) => {\n-                            !item.defaultness.has_value()\n-                        }\n-                        _ => false\n-                    }\n-                    _ => false\n-                }\n-            }\n-        };\n-\n-        if is_unimplemented_trait_item {\n-            let mut err = tcx.sess.struct_err(&format!(\"the trait method `{}` \\\n-                                                        is not implemented\",\n-                                               trait_item.name));\n-\n-            let mut help_messages = Vec::new();\n-            help_messages.push(\n-                if impl_def_id.is_local() {\n-                    let item = tcx.hir\n-                                  .expect_item(\n-                                    tcx.hir\n-                                       .as_local_node_id(impl_def_id).unwrap()\n-                                  );\n-                    (item.span, format!(\"implement it inside this `default impl`\"))\n-                } else {\n-                    (Span::new (\n-                        BytePos(0),\n-                        BytePos(0),\n-                        SyntaxContext::empty()\n-                    ),\n-                    format!(\"implement it inside the {} `default impl`\",\n-                            tcx.item_path_str(impl_def_id)))\n-                }\n-            );\n-\n-            help_messages.push(\n-                if trait_id.is_local() {\n-                    let trait_item = tcx.hir\n-                                        .expect_item(\n-                                          tcx.hir\n-                                             .as_local_node_id(trait_id).unwrap()\n-                                        );\n-                    (trait_item.span, format!(\"provide a default method implementation \\\n-                                             inside this `trait`\"))\n-                } else {\n-                    (Span::new (\n-                        BytePos(0),\n-                        BytePos(0),\n-                        SyntaxContext::empty()\n-                    ),\n-                    format!(\"provide a default method implementation \\\n-                             inside the {} `trait`\",\n-                            tcx.item_path_str(trait_id)))\n-                }\n-            );\n-\n-            help_messages.sort_by(|&(a,_), &(b,_)| a.partial_cmp(&b).unwrap());\n-\n-            let mut cnjs = vec![\"or \", \"either \"];\n-            help_messages.iter().for_each(|&(span, ref msg)| {\n-                let mut help_msg = String::from(cnjs.pop().unwrap_or(\"\"));\n-                help_msg.push_str(&msg);\n-\n-                if span.data().lo == BytePos(0) && span.data().hi == BytePos(0) {\n-                    err.help(&help_msg);\n-                } else {\n-                    err.span_help(span, &help_msg);\n-                }\n-            });\n-\n-            err.note(&format!(\"a `default impl` doesn't need to include all \\\n-                               items from the trait\"));\n-            err.emit();\n-        }\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "f52f2ea0f9fc8258b9d93964c6694a1da0cb9e9a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1070,13 +1070,9 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum DefaultImplCheck { Yes, No, }\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct TraitPredicate<'tcx> {\n-    pub trait_ref: TraitRef<'tcx>,\n-    pub default_impl_check: DefaultImplCheck\n+    pub trait_ref: TraitRef<'tcx>\n }\n pub type PolyTraitPredicate<'tcx> = ty::Binder<TraitPredicate<'tcx>>;\n \n@@ -1184,8 +1180,7 @@ impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n         assert!(!self.has_escaping_regions());\n \n         ty::Predicate::Trait(ty::Binder(ty::TraitPredicate {\n-            trait_ref: self.clone(),\n-            default_impl_check: DefaultImplCheck::No\n+            trait_ref: self.clone()\n         }))\n     }\n }\n@@ -1303,36 +1298,6 @@ impl<'tcx> Predicate<'tcx> {\n             }\n         }\n     }\n-\n-    pub fn change_default_impl_check(&self, default_impl_check: ty::DefaultImplCheck)\n-        -> Option<Predicate<'tcx>> {\n-        match *self {\n-            Predicate::Trait(ref t) => {\n-                if t.skip_binder().default_impl_check != default_impl_check {\n-                    Some(\n-                        Predicate::Trait(ty::Binder(ty::TraitPredicate {\n-                            trait_ref: t.skip_binder().trait_ref,\n-                            default_impl_check: default_impl_check\n-                        }))\n-                    )\n-                } else {\n-                    None\n-                }\n-            }\n-            Predicate::Trait(..) |\n-            Predicate::Projection(..) |\n-            Predicate::Equate(..) |\n-            Predicate::Subtype(..) |\n-            Predicate::RegionOutlives(..) |\n-            Predicate::WellFormed(..) |\n-            Predicate::ObjectSafe(..) |\n-            Predicate::ClosureKind(..) |\n-            Predicate::TypeOutlives(..) |\n-            Predicate::ConstEvaluatable(..) => {\n-                None\n-            }\n-        }\n-    }\n }\n \n /// Represents the bounds declared on a particular set of type"}, {"sha": "0dc1338fff8600c0782a8f83e5ad1b6c877350e5", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -278,8 +278,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n-            trait_ref: trait_ref,\n-            default_impl_check: self.default_impl_check\n+            trait_ref,\n         })\n     }\n }\n@@ -1128,8 +1127,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::SubtypePredicate<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitPredicate {\n-            trait_ref: self.trait_ref.fold_with(folder),\n-            default_impl_check: self.default_impl_check\n+            trait_ref: self.trait_ref.fold_with(folder)\n         }\n     }\n "}, {"sha": "1593b452cdffc3c4541819d71e1e8cb36a2d58d1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -582,10 +582,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n \n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         // Note that we preserve binding levels\n-        Binder(ty::TraitPredicate {\n-            trait_ref: self.0.clone(),\n-            default_impl_check: ty::DefaultImplCheck::No\n-        })\n+        Binder(ty::TraitPredicate { trait_ref: self.0.clone() })\n     }\n }\n "}, {"sha": "33972df97fb68771c5ee3b271408e87682ec5a6d", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -92,10 +92,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                                    self_ty: Ty<'tcx>,\n                                                    mut f: F)\n     {\n+        let mut emit_impl = |impl_def_id: DefId| {\n+            if !self.impl_is_default(impl_def_id) {\n+                f(impl_def_id);\n+            }\n+        };\n+\n         let impls = self.trait_impls_of(def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n-            f(impl_def_id);\n+            emit_impl(impl_def_id);\n         }\n \n         // simplify_type(.., false) basically replaces type parameters and\n@@ -126,13 +132,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n-                    f(impl_def_id);\n+                    emit_impl(impl_def_id);\n                 }\n             }\n         } else {\n             for v in impls.non_blanket_impls.values() {\n                 for &impl_def_id in v {\n-                    f(impl_def_id);\n+                    emit_impl(impl_def_id);\n                 }\n             }\n         }"}, {"sha": "37d1c568515b546e82bfb848300bc57e2c411df3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1230,12 +1230,8 @@ define_print! {\n define_print! {\n     ('tcx) ty::TraitPredicate<'tcx>, (self, f, cx) {\n         debug {\n-            let default_impl_check_value = match self.default_impl_check {\n-                ty::DefaultImplCheck::Yes => \"default_impl_check: yes\",\n-                ty::DefaultImplCheck::No => \"default_impl_check: no\",\n-            };\n-            write!(f, \"TraitPredicate({:?}, {})\",\n-               self.trait_ref, default_impl_check_value)\n+            write!(f, \"TraitPredicate({:?})\",\n+                   self.trait_ref)\n         }\n         display {\n             print!(f, cx, print(self.trait_ref.self_ty()), write(\": \"), print(self.trait_ref))"}, {"sha": "f16187797d4e5127d2f6544683207a8cc244cb5c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -618,18 +618,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                        self.output);\n                 } else {\n                     visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n-\n-                    if tcx.sess.has_errors() {\n-                        match func {\n-                            &mir::Operand::Consume(_) => {}\n-                            &mir::Operand::Constant(ref cst) => {\n-                                tcx.sess\n-                                   .span_note_without_error(cst.span,\n-                                                            \"the function call is here\");\n-                            }\n-                        }\n-                        tcx.sess.abort_if_errors();\n-                    }\n                 }\n             }\n             mir::TerminatorKind::Drop { ref location, .. } |\n@@ -690,10 +678,7 @@ fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              ty::ParamEnv::empty(traits::Reveal::All),\n                                              def_id,\n                                              substs).unwrap();\n-        if !tcx.sess.has_errors() {\n-            // continue only if no errors are encountered during monomorphization\n-            visit_instance_use(tcx, instance, is_direct_call, output);\n-        }\n+        visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }\n "}, {"sha": "1139ea5fbd364074c33abdf2c47d2fe2b12388e8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1378,10 +1378,7 @@ pub struct Bounds<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n-    pub fn predicates(&self,\n-                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                      param_ty: Ty<'tcx>,\n-                      default_impl_check: ty::DefaultImplCheck)\n+    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, param_ty: Ty<'tcx>)\n                       -> Vec<ty::Predicate<'tcx>>\n     {\n         let mut vec = Vec::new();\n@@ -1405,16 +1402,7 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n         }\n \n         for bound_trait_ref in &self.trait_bounds {\n-            vec.push(\n-                if bound_trait_ref.skip_binder().def_id !=\n-                   tcx.lang_items().sized_trait().unwrap() {\n-                    bound_trait_ref.to_predicate()\n-                                   .change_default_impl_check(default_impl_check)\n-                                   .unwrap_or(bound_trait_ref.to_predicate())\n-                } else {\n-                    bound_trait_ref.to_predicate()\n-                }\n-            );\n+            vec.push(bound_trait_ref.to_predicate());\n         }\n \n         for projection in &self.projection_bounds {"}, {"sha": "4aed688027f767783bc65355b87936b28cade11a", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -189,13 +189,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     let generic_assumptions = tcx.predicates_of(self_type_did);\n \n     let assumptions_in_impl_context = generic_assumptions.instantiate(tcx, &self_to_impl_substs);\n-    let assumptions_in_impl_context: Vec<ty::Predicate> =\n-        assumptions_in_impl_context.predicates\n-                                   .iter()\n-                                   .map(|predicate| {\n-                                       predicate.change_default_impl_check(ty::DefaultImplCheck::No)\n-                                                .unwrap_or(predicate.clone())\n-                                   }).collect();\n+    let assumptions_in_impl_context = assumptions_in_impl_context.predicates;\n \n     // An earlier version of this code attempted to do this checking\n     // via the traits::fulfill machinery. However, it ran into trouble\n@@ -217,9 +211,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n         // the analysis together via the fulfill , rather than the\n         // repeated `contains` calls.\n \n-        if !assumptions_in_impl_context.contains(\n-                &predicate.change_default_impl_check(ty::DefaultImplCheck::No)\n-                          .unwrap_or(predicate.clone())) {\n+        if !assumptions_in_impl_context.contains(&predicate) {\n             let item_span = tcx.hir.span(self_type_node_id);\n             struct_span_err!(tcx.sess, drop_impl_span, E0367,\n                              \"The requirement `{}` is added only by the Drop impl.\", predicate)"}, {"sha": "78113bdcc0e4b48a9e2138e5d86734f2fa741d94", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -25,7 +25,6 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n-use rustc::ty::TypeFoldable;\n \n pub struct CheckTypeWellFormedVisitor<'a, 'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -346,28 +345,10 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                                   ast_trait_ref.path.span);\n \n                     // not registering predicates associcated with a `default impl`\n-                    // that doesn't implement all the trait items.\n-                    // it's left to the trait selection to select those trait predicates\n-                    // and trigger an `Unimplemented` error in case the defaul_impl_check\n-                    // is applicable\n-                    let impl_not_implement_trait =\n-                        if fcx.tcx.impl_is_default(item_def_id) &&\n-                           !fcx.tcx.default_impl_implement_all_methods(item_def_id) {\n-                            true\n-                        } else {\n-                            false\n-                        };\n-\n+                    let impl_is_default = fcx.tcx.impl_is_default(item_def_id);\n                     for obligation in obligations {\n                         let register = match obligation.predicate {\n-                            ty::Predicate::Trait(..)  => {\n-                                if impl_not_implement_trait &&\n-                                   !obligation.predicate.has_param_types() {\n-                                    false\n-                                } else {\n-                                    true\n-                                }\n-                            }\n+                            ty::Predicate::Trait(..)  => !impl_is_default,\n                             _ => true\n                         };\n "}, {"sha": "d5328a18c22400f52c5f5fb9b7e0ecede732a13b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 43, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -677,7 +677,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       SizedByDefault::No,\n                                       item.span);\n \n-    let superbounds1 = superbounds1.predicates(tcx, self_param_ty, ty::DefaultImplCheck::No);\n+    let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n     // Convert any explicit superbounds in the where clause,\n     // e.g. `trait Foo where Self : Bar`:\n@@ -694,11 +694,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     ty::GenericPredicates {\n         parent: None,\n-        predicates: superbounds.iter()\n-                               .map(|predicate| {\n-                                   predicate.change_default_impl_check(ty::DefaultImplCheck::Yes)\n-                                            .unwrap_or(predicate.clone())\n-                                }).collect()\n+        predicates: superbounds\n     }\n }\n \n@@ -1368,39 +1364,17 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node = tcx.hir.get(node_id);\n \n     let mut is_trait = None;\n-    let mut default_impl_check = ty::DefaultImplCheck::No;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => {\n-                    default_impl_check = ty::DefaultImplCheck::Yes;\n-                    &item.generics\n-                },\n-                _ => &item.generics\n-            }\n-        }\n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => {\n-                    default_impl_check = ty::DefaultImplCheck::Yes;\n-                    &item.generics\n-                },\n-                _ => &item.generics\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {\n                 ItemFn(.., ref generics, _) |\n                 ItemImpl(_, _, _, ref generics, ..) |\n-                ItemStruct(_, ref generics) => {\n-                    default_impl_check = ty::DefaultImplCheck::Yes;\n-                    generics\n-                }\n-\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n@@ -1441,7 +1415,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             debug!(\"explicit_predicates_of: bounds={:?}\", bounds);\n \n-            let predicates = bounds.predicates(tcx, anon_ty, ty::DefaultImplCheck::No);\n+            let predicates = bounds.predicates(tcx, anon_ty);\n \n             debug!(\"explicit_predicates_of: predicates={:?}\", predicates);\n \n@@ -1502,7 +1476,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     &param.bounds,\n                                     SizedByDefault::Yes,\n                                     param.span);\n-        predicates.extend(bounds.predicates(tcx, param_ty, default_impl_check));\n+        predicates.extend(bounds.predicates(tcx, param_ty));\n     }\n \n     // Add in the bounds that appear in the where-clause\n@@ -1522,16 +1496,8 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                                     poly_trait_ref,\n                                                                     ty,\n                                                                     &mut projections);\n-                            predicates.push(\n-                               if trait_ref.skip_binder().def_id !=\n-                                  tcx.lang_items().sized_trait().unwrap() {\n-                                   trait_ref.to_predicate()\n-                                            .change_default_impl_check(default_impl_check)\n-                                            .unwrap_or(trait_ref.to_predicate())\n-                               } else {\n-                                   trait_ref.to_predicate()\n-                               }\n-                            );\n+\n+                            predicates.push(trait_ref.to_predicate());\n \n                             for projection in &projections {\n                                 predicates.push(projection.to_predicate());\n@@ -1586,7 +1552,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         SizedByDefault::Yes,\n                                         trait_item.span);\n \n-            bounds.predicates(tcx, assoc_ty, ty::DefaultImplCheck::No).into_iter()\n+            bounds.predicates(tcx, assoc_ty).into_iter()\n         }))\n     }\n "}, {"sha": "263f316f3c8f14b607ce25ffa184ae15f74f318a", "filename": "src/test/compile-fail/specialization/defaultimpl/auxiliary/foo_trait.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-pub trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str;\n-}"}, {"sha": "ad55f44255b48eec4d3896f532ccd9c4893acf2e", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-projection.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Make sure we can't project defaulted associated types\n-\n-trait Foo {\n-    type Assoc;\n-}\n-\n-default impl<T> Foo for T {\n-    type Assoc = ();\n-}\n-\n-impl Foo for u8 {\n-    type Assoc = String;\n-}\n-\n-fn generic<T>() -> <T as Foo>::Assoc {\n-    // `T` could be some downstream crate type that specializes (or,\n-    // for that matter, `u8`).\n-\n-    () //~ ERROR mismatched types\n-}\n-\n-fn monomorphic() -> () {\n-    // Even though we know that `()` is not specialized in a\n-    // downstream crate, typeck refuses to project here.\n-\n-    generic::<()>() //~ ERROR mismatched types\n-}\n-\n-fn main() {\n-    // No error here, we CAN project from `u8`, as there is no `default`\n-    // in that impl.\n-    let s: String = generic::<u8>();\n-    println!(\"{}\", s); // bad news if this all compiles\n-}"}, {"sha": "7353f7ac8c5c0c38bed49d14b7e70d24f7874660", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-types.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// It should not be possible to use the concrete value of a defaulted\n-// associated type in the impl defining it -- otherwise, what happens\n-// if it's overridden?\n-\n-#![feature(specialization)]\n-\n-trait Example {\n-    type Output;\n-    fn generate(self) -> Self::Output;\n-}\n-\n-default impl<T> Example for T {\n-    type Output = Box<T>;\n-    fn generate(self) -> Self::Output {\n-        Box::new(self) //~ ERROR mismatched types\n-    }\n-}\n-\n-impl Example for bool {\n-    type Output = bool;\n-    fn generate(self) -> bool { self }\n-}\n-\n-fn trouble<T>(t: T) -> Box<T> {\n-    Example::generate(t) //~ ERROR mismatched types\n-}\n-\n-fn weaponize() -> bool {\n-    let b: Box<bool> = trouble(true);\n-    *b\n-}\n-\n-fn main() {\n-    weaponize();\n-}"}, {"sha": "54f6690aa9f19992a842efa304a79cebfb09ed1d", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented-cross-crate-impl.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate-impl.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:foo_trait_default_impl.rs\n-\n-#![feature(specialization)]\n-\n-extern crate foo_trait_default_impl;\n-\n-use foo_trait_default_impl::*;\n-\n-struct MyStruct;\n-\n-fn main() {\n-    MyStruct.foo_two(); //~ NOTE the function call is here\n-}"}, {"sha": "8e2de42a09953c6107a2310fbf51072f7f3067e6", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented-cross-crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:foo_trait.rs\n-\n-#![feature(specialization)]\n-\n-extern crate foo_trait;\n-\n-use foo_trait::{Foo};\n-\n-struct MyStruct;\n-\n-default impl Foo for MyStruct {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-//~^^^^^ HELP implement it inside this `default impl`\n-\n-fn main() {\n-    MyStruct.foo_two(); //~ NOTE the function call is here\n-}"}, {"sha": "d0db6e996d81d1de4e7f25d0dae91eabee3c4ecf", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-method-not-implemented.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-method-not-implemented.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str;\n-}\n-//~^^^^ HELP provide a default method implementation inside this `trait`\n-\n-default impl<T> Foo for T {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-//~^^^^^ HELP implement it inside this `default impl`\n-\n-struct MyStruct;\n-\n-fn  main() {\n-    MyStruct.foo_two(); //~ NOTE the function call is here\n-}"}, {"sha": "81b85f58998cbe019eb5b75d4018b1212b61f0b1", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-casting.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-casting.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: the trait bound `MyStruct: Draw` is not satisfied\n-\n-#![feature(specialization)]\n-\n-trait Draw {\n-    fn draw(&self);\n-    fn draw2(&self);\n-}\n-\n-struct Screen {\n-    pub components: Vec<Box<Draw>>,\n-}\n-\n-impl Screen {\n-    pub fn run(&self) {\n-        for component in self.components.iter() {\n-            component.draw();\n-        }\n-    }\n-}\n-\n-default impl<T> Draw for T {\n-    fn draw(&self) {\n-        println!(\"draw\");\n-    }\n-}\n-\n-struct MyStruct;\n-\n-fn main() {\n-    let screen = Screen {\n-        components: vec![\n-            Box::new(MyStruct)\n-        ]\n-    };\n-    screen.run();\n-}"}, {"sha": "51a6a9e2c6bfb56d56c9dad6d81ff21f0d0217f5", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-impl-item.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-impl-item.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: the trait bound `MyStruct: Foo` is not satisfied\n-\n-#![feature(specialization)]\n-\n-trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-struct FooS;\n-\n-impl FooS{\n-    fn foo<T: Foo>(&self, x: T) -> &'static str{\n-        x.foo_one()\n-    }\n-}\n-\n-struct MyStruct;\n-\n-fn main() {\n-    println!(\"{:?}\", FooS.foo(MyStruct));\n-}\n\\ No newline at end of file"}, {"sha": "3444dea39c20bcc281bedccb472c0d75575a4004", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-super-trait.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-super-trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: the trait bound `MyStruct: SuperFoo` is not satisfied\n-\n-#![feature(specialization)]\n-\n-trait SuperFoo {\n-    fn super_foo_one(&self) -> &'static str;\n-    fn super_foo_two(&self) -> &'static str;\n-}\n-\n-trait Foo: SuperFoo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default impl<T> SuperFoo for T {\n-    fn super_foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-struct MyStruct;\n-\n-impl Foo for MyStruct {\n-    fn foo(&self) -> &'static str {\n-        \"foo\"\n-    }\n-}\n-\n-fn main() {\n-    println!(\"{:?}\", MyStruct.foo());\n-}\n\\ No newline at end of file"}, {"sha": "6af69e89316a0951f9bf138f37fb1c86c7536e01", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-trait-item.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-trait-item.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-trait Foo<T> {\n-    fn dummy(&self, t: T);\n-}\n-\n-trait Bar<A> {\n-    fn method<B>(&self) where A: Foo<B>;\n-}\n-\n-struct S;\n-struct X;\n-\n-default impl Foo<X> for X {}\n-\n-impl Bar<X> for isize {\n-    fn method<U>(&self) where X: Foo<U> {\n-    }\n-}\n-\n-fn main() {\n-    1.method::<X>();\n-    //~^ ERROR the trait bound `X: Foo<X>` is not satisfied\n-}"}, {"sha": "a2ea087220fbc2ea81bbccbcbc324fc441f411e9", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-vec.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds-vec.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: the trait bound `MyStruct: Draw` is not satisfied\n-\n-#![feature(specialization)]\n-\n-trait Draw {\n-    fn draw(&self);\n-    fn draw2(&self);\n-}\n-\n-struct Screen<T: Draw> {\n-    pub components: Vec<T>,\n-}\n-\n-impl<T> Screen<T>\n-    where T: Draw {\n-    pub fn run(&self) {\n-        for component in self.components.iter() {\n-            component.draw();\n-        }\n-    }\n-}\n-\n-default impl Draw for MyStruct {\n-    fn draw(&self) {\n-        println!(\"draw\");\n-    }\n-}\n-\n-struct MyStruct;\n-\n-fn main() {\n-    let screen = Screen {\n-        components: vec![\n-            MyStruct\n-        ]\n-    };\n-    screen.run();\n-}"}, {"sha": "323ff7b2db9d3ae385ba8324a59029aa0b162d68", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "renamed", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,27 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: the trait bound `MyStruct: Foo` is not satisfied\n-\n #![feature(specialization)]\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;\n     fn foo_two(&self) -> &'static str;\n }\n \n+struct MyStruct;\n+\n default impl<T> Foo for T {\n     fn foo_one(&self) -> &'static str {\n         \"generic\"\n     }\n }\n \n-fn foo<T: Foo>(x: T) -> &'static str {\n-    x.foo_one()\n-}\n-\n-struct MyStruct;\n+impl Foo for MyStruct {}\n+//~^ ERROR not all trait items implemented, missing: `foo_two` [E0046]\n \n fn main() {\n-    println!(\"{:?}\", foo(MyStruct));\n-}\n+    println!(\"{}\", MyStruct.foo_one());\n+}\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-bounds-fn.rs"}, {"sha": "36945e98b0884f05b315cbefae4b1da5946085f3", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "renamed", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,13 +10,21 @@\n \n #![feature(specialization)]\n \n-pub trait Foo {\n+trait Foo {\n     fn foo_one(&self) -> &'static str;\n     fn foo_two(&self) -> &'static str;\n }\n \n+struct MyStruct;\n+\n default impl<T> Foo for T {\n     fn foo_one(&self) -> &'static str {\n         \"generic\"\n     }\n }\n+\n+\n+fn main() {\n+    println!(\"{}\", MyStruct.foo_one());\n+    //~^ ERROR no method named `foo_one` found for type `MyStruct` in the current scope\n+}\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/specialization/defaultimpl/auxiliary/foo_trait_default_impl.rs"}, {"sha": "b99ba3d0f1c931987f4e5ec228c085eea8481568", "filename": "src/test/run-pass/specialization/defaultimpl/assoc-fns.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fassoc-fns.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that non-method associated functions can be specialized\n-\n-#![feature(specialization)]\n-\n-trait Foo {\n-    fn mk() -> Self;\n-}\n-\n-default impl<T: Default> Foo for T {\n-    fn mk() -> T {\n-        T::default()\n-    }\n-}\n-\n-impl Foo for Vec<u8> {\n-    fn mk() -> Vec<u8> {\n-        vec![0]\n-    }\n-}\n-\n-fn main() {\n-    let v1: Vec<i32> = Foo::mk();\n-    let v2: Vec<u8> = Foo::mk();\n-\n-    assert!(v1.len() == 0);\n-    assert!(v2.len() == 1);\n-}"}, {"sha": "71dd7c99009ea5a0920c0e35bf943e69c4316b55", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,82 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-pub trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-pub trait MyMarker {}\n-default impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}"}, {"sha": "9d0ea64fed428d6cefe7beb02a8ddd0ee5f1ad4d", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate_defaults.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(specialization)]\n-\n-// First, test only use of explicit `default` items:\n-\n-pub trait Foo {\n-    fn foo(&self) -> bool;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> bool { false }\n-}\n-\n-impl Foo for i32 {}\n-\n-impl Foo for i64 {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-// Next, test mixture of explicit `default` and provided methods:\n-\n-pub trait Bar {\n-    fn bar(&self) -> i32 { 0 }\n-}\n-\n-impl<T> Bar for T {} // use the provided method\n-\n-impl Bar for i32 {\n-    fn bar(&self) -> i32 { 1 }\n-}\n-impl<'a> Bar for &'a str {}\n-\n-default impl<T> Bar for Vec<T> {\n-    fn bar(&self) -> i32 { 2 }\n-}\n-impl Bar for Vec<i32> {}\n-impl Bar for Vec<i64> {\n-    fn bar(&self) -> i32 { 3 }\n-}"}, {"sha": "752b0190ea6c0b5deb960013e387723993d94c56", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/foo_trait.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Ffoo_trait.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-pub trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str {\n-        \"generic Trait\"\n-    }\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo_two(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "7daecc842f3f9fd8a2140a3785db00b2f34cbffc", "filename": "src/test/run-pass/specialization/defaultimpl/basics-unsafe.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Tests a variety of basic specialization scenarios and method\n-// dispatch for them.\n-\n-unsafe trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default unsafe impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default unsafe impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default unsafe impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default unsafe impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-default unsafe impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-default unsafe impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-default unsafe impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-struct NotClone;\n-\n-unsafe trait MyMarker {}\n-default unsafe impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-unsafe impl MyMarker for MarkedAndClone {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-}"}, {"sha": "594f1e4fcdfc26b834c9bea5f57cd3482653b6d0", "filename": "src/test/run-pass/specialization/defaultimpl/basics.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Tests a variety of basic specialization scenarios and method\n-// dispatch for them.\n-\n-trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-struct NotClone;\n-\n-trait MyMarker {}\n-default impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-impl MyMarker for MarkedAndClone {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-}"}, {"sha": "19e1af15bdd5627ce8bd0f7dc7f5e26e716d21f8", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-defaults.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cross_crate_defaults.rs\n-\n-#![feature(specialization)]\n-\n-extern crate cross_crate_defaults;\n-\n-use cross_crate_defaults::*;\n-\n-struct LocalDefault;\n-struct LocalOverride;\n-\n-impl Foo for LocalDefault {}\n-\n-impl Foo for LocalOverride {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-fn test_foo() {\n-    assert!(!0i8.foo());\n-    assert!(!0i32.foo());\n-    assert!(0i64.foo());\n-\n-    assert!(!LocalDefault.foo());\n-    assert!(LocalOverride.foo());\n-}\n-\n-fn test_bar() {\n-    assert!(0u8.bar() == 0);\n-    assert!(0i32.bar() == 1);\n-    assert!(\"hello\".bar() == 0);\n-    assert!(vec![()].bar() == 2);\n-    assert!(vec![0i32].bar() == 2);\n-    assert!(vec![0i64].bar() == 3);\n-}\n-\n-fn main() {\n-    test_foo();\n-    test_bar();\n-}"}, {"sha": "67cc694ae12c7087121c76cacbf2a749273923a5", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-no-gate.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that specialization works even if only the upstream crate enables it\n-\n-// aux-build:cross_crate.rs\n-\n-extern crate cross_crate;\n-\n-use cross_crate::*;\n-\n-fn  main() {\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-}"}, {"sha": "f1ad105db8f7c2bcd49476daca8e1ac14dedfbf0", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cross_crate.rs\n-\n-#![feature(specialization)]\n-\n-extern crate cross_crate;\n-\n-use cross_crate::*;\n-\n-struct NotClone;\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-impl MyMarker for MarkedAndClone {}\n-\n-struct MyType<T>(T);\n-default impl<T> Foo for MyType<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic MyType\"\n-    }\n-}\n-\n-impl Foo for MyType<u8> {\n-    fn foo(&self) -> &'static str {\n-        \"MyType<u8>\"\n-    }\n-}\n-\n-struct MyOtherType;\n-impl Foo for MyOtherType {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-\n-    assert!(MyType(()).foo() == \"generic MyType\");\n-    assert!(MyType(0u8).foo() == \"MyType<u8>\");\n-    assert!(MyOtherType.foo() == \"generic\");\n-}"}, {"sha": "4ac9afc1c897fa27e4fcfe357475985563a4f588", "filename": "src/test/run-pass/specialization/defaultimpl/default-methods.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Test that default methods are cascaded correctly\n-\n-// First, test only use of explicit `default` items:\n-\n-trait Foo {\n-    fn foo(&self) -> bool;\n-}\n-\n-// Specialization tree for Foo:\n-//\n-//        T\n-//       / \\\n-//    i32   i64\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> bool { false }\n-}\n-\n-impl Foo for i32 {}\n-\n-impl Foo for i64 {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-fn test_foo() {\n-    assert!(!0i8.foo());\n-    assert!(!0i32.foo());\n-    assert!(0i64.foo());\n-}\n-\n-// Next, test mixture of explicit `default` and provided methods:\n-\n-trait Bar {\n-    fn bar(&self) -> i32 { 0 }\n-}\n-\n-// Specialization tree for Bar.\n-// Uses of $ designate that method is provided\n-//\n-//           $Bar   (the trait)\n-//             |\n-//             T\n-//            /|\\\n-//           / | \\\n-//          /  |  \\\n-//         /   |   \\\n-//        /    |    \\\n-//       /     |     \\\n-//     $i32   &str  $Vec<T>\n-//                    /\\\n-//                   /  \\\n-//            Vec<i32>  $Vec<i64>\n-\n-// use the provided method\n-impl<T> Bar for T {}\n-\n-impl Bar for i32 {\n-    fn bar(&self) -> i32 { 1 }\n-}\n-impl<'a> Bar for &'a str {}\n-\n-default impl<T> Bar for Vec<T> {\n-    fn bar(&self) -> i32 { 2 }\n-}\n-impl Bar for Vec<i32> {}\n-impl Bar for Vec<i64> {\n-    fn bar(&self) -> i32 { 3 }\n-}\n-\n-fn test_bar() {\n-    assert!(0u8.bar() == 0);\n-    assert!(0i32.bar() == 1);\n-    assert!(\"hello\".bar() == 0);\n-    assert!(vec![()].bar() == 2);\n-    assert!(vec![0i32].bar() == 2);\n-    assert!(vec![0i64].bar() == 3);\n-}\n-\n-fn main() {\n-    test_foo();\n-    test_bar();\n-}"}, {"sha": "2397c3e2bff5dbd5bde7a67a0ad79e168d5ea5cd", "filename": "src/test/run-pass/specialization/defaultimpl/projection-alias.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fprojection-alias.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Regression test for ICE when combining specialized associated types and type\n-// aliases\n-\n-trait Id_ {\n-    type Out;\n-}\n-\n-type Id<T> = <T as Id_>::Out;\n-\n-default impl<T> Id_ for T {\n-    type Out = T;\n-}\n-\n-fn test_proection() {\n-    let x: Id<bool> = panic!();\n-}\n-\n-fn main() {\n-\n-}"}, {"sha": "4ed37b311ef022259de35c2b5035a421b023284a", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-bounds.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-bounds.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic one\"\n-    }\n-    fn foo_two(&self) -> &'static str {\n-        \"generic two\"\n-    }\n-}\n-\n-fn foo_one<T: Foo>(x: T) -> &'static str {\n-    x.foo_one()\n-}\n-\n-fn foo_two<T: Foo>(x: T) -> &'static str {\n-    x.foo_two()\n-}\n-\n-struct MyStruct;\n-\n-fn main() {\n-    assert!(foo_one(MyStruct) == \"generic one\");\n-    assert!(foo_two(MyStruct) == \"generic two\");\n-}"}, {"sha": "f8eb57bad770b608b130357252b182b05f355dae", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e80af159a709e5bb9a178b19b4319716261661/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=13e80af159a709e5bb9a178b19b4319716261661", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,21 +15,20 @@ trait Foo {\n     fn foo_two(&self) -> &'static str;\n }\n \n+struct MyStruct;\n+\n default impl<T> Foo for T {\n     fn foo_one(&self) -> &'static str {\n         \"generic\"\n     }\n }\n \n-default impl<T: Clone> Foo for T {\n+impl Foo for MyStruct {\n     fn foo_two(&self) -> &'static str {\n-        \"generic Clone\"\n+        self.foo_one()\n     }\n }\n \n-struct MyStruct;\n-\n-fn  main() {\n-    assert!(MyStruct.foo_one() == \"generic\");\n-    assert!(0u8.foo_two() == \"generic Clone\");\n-}\n+fn main() {\n+    assert!(MyStruct.foo_two() == \"generic\");\n+}\n\\ No newline at end of file", "previous_filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl.rs"}, {"sha": "5c0547b034147481e7296b00843b00c3040c1f13", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl-default-method-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method-cross-crate.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:foo_trait.rs\n-\n-#![feature(specialization)]\n-\n-extern crate foo_trait;\n-\n-use foo_trait::*;\n-\n-struct MyStruct;\n-\n-fn  main() {\n-    assert!(MyStruct.foo_one() == \"generic\");\n-    assert!(0u8.foo_two() == \"generic Clone\");\n-    assert!(MyStruct.foo_two() == \"generic Trait\");\n-}"}, {"sha": "254d3bebb90325dd2468ec39c8034ec1ac955956", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-traits-impl-default-method.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c55ff379913b7acca2ae032120e74aaa4dd822/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-traits-impl-default-method.rs?ref=f5c55ff379913b7acca2ae032120e74aaa4dd822", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-trait Foo {\n-    fn foo_one(&self) -> &'static str;\n-    fn foo_two(&self) -> &'static str {\n-        \"generic Trait\"\n-    }\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo_one(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo_two(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-struct MyStruct;\n-\n-fn  main() {\n-    assert!(MyStruct.foo_one() == \"generic\");\n-    assert!(0u8.foo_two() == \"generic Clone\");\n-    assert!(MyStruct.foo_two() == \"generic Trait\");\n-}"}]}