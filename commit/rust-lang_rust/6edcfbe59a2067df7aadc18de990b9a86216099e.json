{"sha": "6edcfbe59a2067df7aadc18de990b9a86216099e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGNmYmU1OWEyMDY3ZGY3YWFkYzE4ZGU5OTBiOWE4NjIxNjA5OWU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-18T23:48:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-18T23:48:37Z"}, "message": "Apply formatting fixes\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "db8b925ee0160ed9141f852b664c7b29fd63a66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8b925ee0160ed9141f852b664c7b29fd63a66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edcfbe59a2067df7aadc18de990b9a86216099e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgsJVCRBK7hj4Ov3rIwAAdHIIAF2DvOsb4BhhUljMRqzMhgN9\n5LGz6+7xzLG7Sq3+a5pn9ZcYNcZS47TlDEe7onzgYQuanTSFkqQxHBIVxooRJ2IY\n8tHB+NmEFaR5PuM9vxXaLItitSgt9AztzGI9kxpWLnQUDeOrKw1bkxg/bk+rh8lW\nXI1CGS159OL21BsNBZ/ZRvGMB01L0TQh65mKh5DauquR6SG/kjkbLrq2zqA4Hcfm\nSPg+IAeT+oDIRR79YZ9lnIem+I99LmzY6DtNu+PXtkVTr3cxj8zOrhQ8y/Yyu0eP\nkJDBAPPuBNPYPL6toae7NXgiAhzfWI4R/PRqYtcbsWg74boQrjYbg/QnzwU2cRo=\n=E/8r\n-----END PGP SIGNATURE-----\n", "payload": "tree db8b925ee0160ed9141f852b664c7b29fd63a66c\nparent 9e777eb45de2bf972bbf7f2075fa491e22d2d071\nauthor Aaron Hill <aa1ronham@gmail.com> 1568850517 -0400\ncommitter GitHub <noreply@github.com> 1568850517 -0400\n\nApply formatting fixes\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edcfbe59a2067df7aadc18de990b9a86216099e", "html_url": "https://github.com/rust-lang/rust/commit/6edcfbe59a2067df7aadc18de990b9a86216099e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edcfbe59a2067df7aadc18de990b9a86216099e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e777eb45de2bf972bbf7f2075fa491e22d2d071", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e777eb45de2bf972bbf7f2075fa491e22d2d071", "html_url": "https://github.com/rust-lang/rust/commit/9e777eb45de2bf972bbf7f2075fa491e22d2d071"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "034cba0f12a6272719d016bdfa15de41ad8e4f4d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6edcfbe59a2067df7aadc18de990b9a86216099e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edcfbe59a2067df7aadc18de990b9a86216099e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=6edcfbe59a2067df7aadc18de990b9a86216099e", "patch": "@@ -170,12 +170,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             prior_arm_ty = Some(arm_ty);\n         }\n \n-        // If all of the arms in the 'match' diverge,\n-        // and we're dealing with an actual 'match' block\n-        // (as opposed to a 'match' desugared from something else'),\n+        // If all of the arms in the `match` diverge,\n+        // and we're dealing with an actual `match` block\n+        // (as opposed to a `match` desugared from something else'),\n         // we can emit a better note. Rather than pointing\n         // at a diverging expression in an arbitrary arm,\n-        // we can point at the entire 'match' expression\n+        // we can point at the entire `match` expression\n         match (all_arms_diverge, match_src) {\n             (Diverges::Always { .. }, hir::MatchSource::Normal) => {\n                 all_arms_diverge = Diverges::Always {"}, {"sha": "e424aa679088d66f930d530fec19352dc2e08799", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6edcfbe59a2067df7aadc18de990b9a86216099e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edcfbe59a2067df7aadc18de990b9a86216099e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6edcfbe59a2067df7aadc18de990b9a86216099e", "patch": "@@ -453,15 +453,15 @@ pub enum Diverges {\n     Always {\n         /// The `Span` points to the expression\n         /// that caused us to diverge\n-        /// (e.g. `return`, `break`, etc)\n+        /// (e.g. `return`, `break`, etc).\n         span: Span,\n-        /// In some cases (e.g. a 'match' expression\n+        /// In some cases (e.g. a `match` expression\n         /// where all arms diverge), we may be\n         /// able to provide a more informative\n         /// message to the user.\n-        /// If this is None, a default messsage\n+        /// If this is `None`, a default messsage\n         /// will be generated, which is suitable\n-        /// for most cases\n+        /// for most cases.\n         custom_note: Option<&'static str>\n     },\n \n@@ -502,7 +502,7 @@ impl Diverges {\n     fn always(self) -> bool {\n         // Enum comparison ignores the\n         // contents of fields, so we just\n-        // fill them in with garbage here\n+        // fill them in with garbage here.\n         self >= Diverges::Always {\n             span: DUMMY_SP,\n             custom_note: None"}]}