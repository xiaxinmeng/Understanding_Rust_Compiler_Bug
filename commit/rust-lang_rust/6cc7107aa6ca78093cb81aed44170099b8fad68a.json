{"sha": "6cc7107aa6ca78093cb81aed44170099b8fad68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYzcxMDdhYTZjYTc4MDkzY2I4MWFlZDQ0MTcwMDk5YjhmYWQ2OGE=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T15:01:53Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T15:01:53Z"}, "message": "Add Orderable trait\n\nThis is a temporary trait until we have default methods. We don't want to encumber all implementors of Ord by requiring them to implement these functions, but at the same time we want to be able to take advantage of the speed of the specific numeric functions (like the `fmin` and `fmax` intrinsics).", "tree": {"sha": "79d6adbe48a7de966c1a15c24a6859a71cc67170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79d6adbe48a7de966c1a15c24a6859a71cc67170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc7107aa6ca78093cb81aed44170099b8fad68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc7107aa6ca78093cb81aed44170099b8fad68a", "html_url": "https://github.com/rust-lang/rust/commit/6cc7107aa6ca78093cb81aed44170099b8fad68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc7107aa6ca78093cb81aed44170099b8fad68a/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "html_url": "https://github.com/rust-lang/rust/commit/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3"}], "stats": {"total": 159, "additions": 155, "deletions": 4}, "files": [{"sha": "158da9a12fca1e4b5da715b5b6fe9e16840aaeeb", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -104,10 +104,11 @@ pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n pub use iter::{ExtendedMutableIter};\n \n pub use num::{Num, NumCast};\n-pub use num::{Signed, Unsigned, Integer};\n+pub use num::{Orderable, Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n pub use num::{Bitwise, BitCount, Bounded};\n pub use num::{Primitive, Int, Float};\n+\n pub use ptr::Ptr;\n pub use to_str::ToStr;\n pub use clone::Clone;"}, {"sha": "1e08979d79690bb76cf43fc3f421c8ea8d560bf9", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -224,6 +224,20 @@ impl Ord for f32 {\n     fn gt(&self, other: &f32) -> bool { (*self) > (*other) }\n }\n \n+impl Orderable for f32 {\n+    #[inline(always)]\n+    fn min(&self, other: &f32) -> f32 { fmin(*self, *other) }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &f32) -> f32 { fmax(*self, *other) }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &f32, mx: &f32) -> f32 {\n+        if *self > *mx { *mx } else\n+        if *self < *mn { *mn } else { *self }\n+    }\n+}\n+\n impl Zero for f32 {\n     #[inline(always)]\n     fn zero() -> f32 { 0.0 }\n@@ -768,6 +782,17 @@ mod tests {\n         num::test_num(10f32, 2f32);\n     }\n \n+    #[test]\n+    fn test_orderable() {\n+        assert_eq!(1f32.min(&2f32), 1f32);\n+        assert_eq!(2f32.min(&1f32), 1f32);\n+        assert_eq!(1f32.max(&2f32), 2f32);\n+        assert_eq!(2f32.max(&1f32), 2f32);\n+        assert_eq!(1f32.clamp(&2f32, &4f32), 2f32);\n+        assert_eq!(8f32.clamp(&2f32, &4f32), 4f32);\n+        assert_eq!(3f32.clamp(&2f32, &4f32), 3f32);\n+    }\n+\n     #[test]\n     fn test_floor() {\n         assert_fuzzy_eq!(1.0f32.floor(), 1.0f32);"}, {"sha": "a42084336bfc1bde47571ef484a69626778f7db7", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -245,6 +245,20 @@ impl Ord for f64 {\n     fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n \n+impl Orderable for f64 {\n+    #[inline(always)]\n+    fn min(&self, other: &f64) -> f64 { fmin(*self, *other) }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &f64) -> f64 { fmax(*self, *other) }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &f64, mx: &f64) -> f64 {\n+        if *self > *mx { *mx } else\n+        if *self < *mn { *mn } else { *self }\n+    }\n+}\n+\n impl Zero for f64 {\n     #[inline(always)]\n     fn zero() -> f64 { 0.0 }\n@@ -809,6 +823,17 @@ mod tests {\n         num::test_num(10f64, 2f64);\n     }\n \n+    #[test]\n+    fn test_orderable() {\n+        assert_eq!(1f64.min(&2f64), 1f64);\n+        assert_eq!(2f64.min(&1f64), 1f64);\n+        assert_eq!(1f64.max(&2f64), 2f64);\n+        assert_eq!(2f64.max(&1f64), 2f64);\n+        assert_eq!(1f64.clamp(&2f64, &4f64), 2f64);\n+        assert_eq!(8f64.clamp(&2f64, &4f64), 4f64);\n+        assert_eq!(3f64.clamp(&2f64, &4f64), 3f64);\n+    }\n+\n     #[test]\n     fn test_floor() {\n         assert_fuzzy_eq!(1.0f64.floor(), 1.0f64);"}, {"sha": "8661e7f0574cb1bd3e1ae592d47d0a9288e1ed3b", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -384,6 +384,24 @@ impl Ord for float {\n     fn gt(&self, other: &float) -> bool { (*self) > (*other) }\n }\n \n+impl Orderable for float {\n+    #[inline(always)]\n+    fn min(&self, other: &float) -> float {\n+        fmin(*self as f64, *other as f64) as float\n+    }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &float) -> float {\n+        fmax(*self as f64, *other as f64) as float\n+    }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &float, mx: &float) -> float {\n+        if *self > *mx { *mx } else\n+        if *self < *mn { *mn } else { *self }\n+    }\n+}\n+\n impl Zero for float {\n     #[inline(always)]\n     fn zero() -> float { 0.0 }\n@@ -738,6 +756,17 @@ mod tests {\n         num::test_num(10f, 2f);\n     }\n \n+    #[test]\n+    fn test_orderable() {\n+        assert_eq!(1f.min(&2f), 1f);\n+        assert_eq!(2f.min(&1f), 1f);\n+        assert_eq!(1f.max(&2f), 2f);\n+        assert_eq!(2f.max(&1f), 2f);\n+        assert_eq!(1f.clamp(&2f, &4f), 2f);\n+        assert_eq!(8f.clamp(&2f, &4f), 4f);\n+        assert_eq!(3f.clamp(&2f, &4f), 3f);\n+    }\n+\n     #[test]\n     fn test_floor() {\n         assert_fuzzy_eq!(1.0f.floor(), 1.0f);"}, {"sha": "08df820a73db82f7658e26cbb1d420af93acf536", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -152,6 +152,24 @@ impl Eq for T {\n     fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n+impl Orderable for T {\n+    #[inline(always)]\n+    fn min(&self, other: &T) -> T {\n+        if *self < *other { *self } else { *other }\n+    }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &T) -> T {\n+        if *self > *other { *self } else { *other }\n+    }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &T, mx: &T) -> T {\n+        if *self > *mx { *mx } else\n+        if *self < *mn { *mn } else { *self }\n+    }\n+}\n+\n impl Zero for T {\n     #[inline(always)]\n     fn zero() -> T { 0 }\n@@ -535,6 +553,17 @@ mod tests {\n         num::test_num(10 as T, 2 as T);\n     }\n \n+    #[test]\n+    fn test_orderable() {\n+        assert_eq!((1 as T).min(&(2 as T)), 1 as T);\n+        assert_eq!((2 as T).min(&(1 as T)), 1 as T);\n+        assert_eq!((1 as T).max(&(2 as T)), 2 as T);\n+        assert_eq!((2 as T).max(&(1 as T)), 2 as T);\n+        assert_eq!((1 as T).clamp(&(2 as T), &(4 as T)), 2 as T);\n+        assert_eq!((8 as T).clamp(&(2 as T), &(4 as T)), 4 as T);\n+        assert_eq!((3 as T).clamp(&(2 as T), &(4 as T)), 3 as T);\n+    }\n+\n     #[test]\n     pub fn test_signed() {\n         assert_eq!((1 as T).abs(), 1 as T);"}, {"sha": "759f3e9872f922a91d984b7f6643cdc526c8edcf", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -24,6 +24,9 @@ use kinds::Copy;\n \n pub mod strconv;\n \n+///\n+/// The base trait for numeric types\n+///\n pub trait Num: Eq + Zero + One\n              + Neg<Self>\n              + Add<Self,Self>\n@@ -37,6 +40,16 @@ pub trait IntConvertible {\n     fn from_int(n: int) -> Self;\n }\n \n+pub trait Orderable: Ord {\n+    // These should be methods on `Ord`, with overridable default implementations. We don't want\n+    // to encumber all implementors of Ord by requiring them to implement these functions, but at\n+    // the same time we want to be able to take advantage of the speed of the specific numeric\n+    // functions (like the `fmin` and `fmax` intrinsics).\n+    fn min(&self, other: &Self) -> Self;\n+    fn max(&self, other: &Self) -> Self;\n+    fn clamp(&self, mn: &Self, mx: &Self) -> Self;\n+}\n+\n pub trait Zero {\n     fn zero() -> Self;      // FIXME (#5527): This should be an associated constant\n     fn is_zero(&self) -> bool;\n@@ -62,7 +75,7 @@ pub fn abs<T:Ord + Zero + Neg<T>>(v: T) -> T {\n }\n \n pub trait Integer: Num\n-                 + Ord\n+                 + Orderable\n                  + Quot<Self,Self>\n                  + Rem<Self,Self> {\n     fn div(&self, other: &Self) -> Self;\n@@ -86,7 +99,7 @@ pub trait Round {\n }\n \n pub trait Fractional: Num\n-                    + Ord\n+                    + Orderable\n                     + Round\n                     + Quot<Self,Self> {\n     fn recip(&self) -> Self;"}, {"sha": "af64660ad0c5cd73085482300043f8e2107b10fe", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -117,6 +117,24 @@ impl Eq for T {\n     fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n+impl Orderable for T {\n+    #[inline(always)]\n+    fn min(&self, other: &T) -> T {\n+        if *self < *other { *self } else { *other }\n+    }\n+\n+    #[inline(always)]\n+    fn max(&self, other: &T) -> T {\n+        if *self > *other { *self } else { *other }\n+    }\n+\n+    #[inline(always)]\n+    fn clamp(&self, mn: &T, mx: &T) -> T {\n+        if *self > *mx { *mx } else\n+        if *self < *mn { *mn } else { *self }\n+    }\n+}\n+\n impl Zero for T {\n     #[inline(always)]\n     fn zero() -> T { 0 }\n@@ -367,6 +385,17 @@ mod tests {\n         num::test_num(10 as T, 2 as T);\n     }\n \n+    #[test]\n+    fn test_orderable() {\n+        assert_eq!((1 as T).min(&(2 as T)), 1 as T);\n+        assert_eq!((2 as T).min(&(1 as T)), 1 as T);\n+        assert_eq!((1 as T).max(&(2 as T)), 2 as T);\n+        assert_eq!((2 as T).max(&(1 as T)), 2 as T);\n+        assert_eq!((1 as T).clamp(&(2 as T), &(4 as T)), 2 as T);\n+        assert_eq!((8 as T).clamp(&(2 as T), &(4 as T)), 4 as T);\n+        assert_eq!((3 as T).clamp(&(2 as T), &(4 as T)), 3 as T);\n+    }\n+\n     #[test]\n     fn test_gcd() {\n         assert_eq!((10 as T).gcd(&2), 2 as T);"}, {"sha": "7e41f1b5b34e29c665f86f2a7215b74544b21908", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc7107aa6ca78093cb81aed44170099b8fad68a/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=6cc7107aa6ca78093cb81aed44170099b8fad68a", "patch": "@@ -38,7 +38,7 @@ pub use iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};\n pub use iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n pub use iter::{Times, ExtendedMutableIter};\n pub use num::{Num, NumCast};\n-pub use num::{Signed, Unsigned, Integer};\n+pub use num::{Orderable, Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n pub use num::{Bitwise, BitCount, Bounded};\n pub use num::{Primitive, Int, Float};"}]}