{"sha": "1c6a2e3de8789a70007fe9bf85d4c945e1e15a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNmEyZTNkZTg3ODlhNzAwMDdmZTliZjg1ZDRjOTQ1ZTFlMTVhOTM=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-05T15:09:17Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-08T12:48:14Z"}, "message": "rewrite_string: take care of blank lines appearing within the last line", "tree": {"sha": "c971d0dc40aca341f0c00e004b550171f0ed0c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c971d0dc40aca341f0c00e004b550171f0ed0c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlu7Ug4ACgkQbVYg2Qgh\nATMbhQgAkXa7nvE/8kscHIs8CaKhjDRTYAY2PuLtTp1QaOZfW6iXva7blg1vpa0M\nNXXSFhW7z/wYkbLz+jW/g2iU3CREaQ3j9TtLPdeMmfNgff1gNa3ptAZO+ortv5Bn\nkGtScjlAJYjkBrgIpO3teOZ7p7p99vC/7A0ZskvH3hrge+CGvURqA4lKU5HRapjr\nG1KecPuUukVvqBnJGpjelZul/2p4mu3P846D9ydjFnHF2H3+t4FkoPtqjy4kXaQF\nqi3LICkIMCGlaoROBVWeajDCHzvjRWY0MtafyblCCYG++PEDP8JB3bJm1RJ2Guuu\ndxs8rNbIP7lO7akT9F8BsYLIRxGAaA==\n=lVv6\n-----END PGP SIGNATURE-----", "payload": "tree c971d0dc40aca341f0c00e004b550171f0ed0c10\nparent 3205e17cc379684baa7ec098add6929096d28644\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1538752157 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539002894 +0200\n\nrewrite_string: take care of blank lines appearing within the last line\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93", "html_url": "https://github.com/rust-lang/rust/commit/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3205e17cc379684baa7ec098add6929096d28644", "url": "https://api.github.com/repos/rust-lang/rust/commits/3205e17cc379684baa7ec098add6929096d28644", "html_url": "https://github.com/rust-lang/rust/commit/3205e17cc379684baa7ec098add6929096d28644"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "dcedeed111427d22ecdf3797c48d82dd7008f46b", "filename": "src/string.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c6a2e3de8789a70007fe9bf85d4c945e1e15a93/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=1c6a2e3de8789a70007fe9bf85d4c945e1e15a93", "patch": "@@ -119,6 +119,10 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                 // new lines need to be indented and prefixed with line_start\n                 for grapheme in graphemes_minus_ws {\n                     if is_line_feed(grapheme) {\n+                        // take care of blank lines\n+                        if fmt.trim_end && result.ends_with(' ') {\n+                            result = result.trim_right().to_string();\n+                        }\n                         result.push_str(&indent_with_newline);\n                         result.push_str(fmt.line_start);\n                     } else {\n@@ -140,6 +144,9 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                 cur_start += len;\n             }\n             SnippetState::EndWithLineFeed(line, len) => {\n+                if line == \"\\n\" && fmt.trim_end {\n+                    result = result.trim_right().to_string();\n+                }\n                 result.push_str(&line);\n                 if is_bareline_ok {\n                     // the next line can benefit from the full width\n@@ -189,8 +196,8 @@ enum SnippetState {\n /// character is either a punctuation or a whitespace.\n fn break_string(max_chars: usize, trim_end: bool, input: &[&str]) -> SnippetState {\n     let break_at = |index /* grapheme at index is included */| {\n-        // Take in any whitespaces to the left/right of `input[index]` and\n-        // check if there is a line feed, in which case whitespaces needs to be kept.\n+        // Take in any whitespaces to the left/right of `input[index]` while\n+        // preserving line feeds\n         let index_minus_ws = input[0..=index]\n             .iter()\n             .rposition(|grapheme| !is_whitespace(grapheme))\n@@ -481,4 +488,40 @@ mod test {\n             )\n         );\n     }\n+\n+    #[test]\n+    fn blank_line_with_non_empty_line_start() {\n+        let config: Config = Default::default();\n+        let mut fmt = StringFormat {\n+            opener: \"\",\n+            closer: \"\",\n+            line_start: \"// \",\n+            line_end: \"\",\n+            shape: Shape::legacy(30, Indent::from_width(&config, 4)),\n+            trim_end: true,\n+            config: &config,\n+        };\n+\n+        let comment = \"Aenean metus. Vestibulum\\n\\nac lacus. Vivamus porttitor\";\n+        assert_eq!(\n+            rewrite_string(comment, &fmt),\n+            Some(\n+                \"Aenean metus. Vestibulum\\n    //\\n    // ac lacus. Vivamus porttitor\".to_string()\n+            )\n+        );\n+\n+        fmt.shape = Shape::legacy(15, Indent::from_width(&config, 4));\n+        let comment = \"Aenean\\n\\nmetus. Vestibulum ac lacus. Vivamus porttitor\";\n+        assert_eq!(\n+            rewrite_string(comment, &fmt),\n+            Some(\n+                r#\"Aenean\n+    //\n+    // metus. Vestibulum\n+    // ac lacus. Vivamus\n+    // porttitor\"#\n+                    .to_string()\n+            )\n+        );\n+    }\n }"}]}