{"sha": "248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGI2ZTM4YjUzM2Q0M2I4YjRhZGFmNmQ0N2VmYzYyZmU4MmVmMmE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T14:52:43Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T14:52:47Z"}, "message": "std: replace str::substr with the method.", "tree": {"sha": "de17aab317af2734727d6c752dcaf1220f68cde2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de17aab317af2734727d6c752dcaf1220f68cde2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "html_url": "https://github.com/rust-lang/rust/commit/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebefe425b962d3914cc523d7f539fdb2244cec06", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebefe425b962d3914cc523d7f539fdb2244cec06", "html_url": "https://github.com/rust-lang/rust/commit/ebefe425b962d3914cc523d7f539fdb2244cec06"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "f23a4433289e08806047b4e8084fdfa515f4b96f", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "patch": "@@ -83,9 +83,9 @@ pub fn of_str(str: @~str) -> Rope {\n  *\n  * # Return value\n  *\n- * A rope representing the same string as `str::substr(str, byte_offset,\n- * byte_len)`.  Depending on `byte_len`, this rope may be empty, flat or\n- * complex.\n+ * A rope representing the same string as `str.substr(byte_offset,\n+ * byte_len)`.  Depending on `byte_len`, this rope may be empty, flat\n+ * or complex.\n  *\n  * # Performance note\n  *"}, {"sha": "96838c32266a844e4cda1ddf28eedfe25a9f6385", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "patch": "@@ -2684,11 +2684,11 @@ impl Resolver {\n                 match self.idents_to_str(module_path).rfind(':') {\n                     Some(idx) => {\n                         self.session.span_err(span, fmt!(\"unresolved import: could not find `%s` \\\n-                                                         in `%s`\", str::substr(mpath, idx,\n-                                                                               mpath.len() - idx),\n+                                                         in `%s`\", mpath.substr(idx,\n+                                                                                mpath.len() - idx),\n                                                          // idx - 1 to account for the extra\n                                                          // colon\n-                                                         str::substr(mpath, 0, idx - 1)));\n+                                                         mpath.substr(0, idx - 1)));\n                     },\n                     None => (),\n                 };"}, {"sha": "f525c34cc472100da783d2be11964172ca60e914", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248b6e38b533d43b8b4adaf6d47efc62fe82ef2a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=248b6e38b533d43b8b4adaf6d47efc62fe82ef2a", "patch": "@@ -432,16 +432,6 @@ pub fn byte_slice_no_callback<'a>(s: &'a str) -> &'a [u8] {\n     }\n }\n \n-/**\n- * Take a substring of another.\n- *\n- * Returns a slice pointing at `n` characters starting from byte offset\n- * `begin`.\n- */\n-pub fn substr<'a>(s: &'a str, begin: uint, n: uint) -> &'a str {\n-    s.slice(begin, begin + count_bytes(s, begin, n))\n-}\n-\n /// Something that can be used to compare against a character\n pub trait CharEq {\n     /// Determine if the splitter should split at the given character\n@@ -1854,7 +1844,7 @@ impl<'self> StrSlice<'self> for &'self str {\n      */\n     #[inline]\n     fn substr(&self, begin: uint, n: uint) -> &'self str {\n-        substr(*self, begin, n)\n+        s.slice(begin, begin + count_bytes(s, begin, n))\n     }\n     /// Escape each char in `s` with char::escape_default.\n     #[inline]\n@@ -2516,11 +2506,11 @@ mod tests {\n     #[test]\n     fn test_substr() {\n         fn t(a: &str, b: &str, start: int) {\n-            assert_eq!(substr(a, start as uint, b.len()), b);\n+            assert_eq!(a.substr(start as uint, b.len()), b);\n         }\n         t(\"hello\", \"llo\", 2);\n         t(\"hello\", \"el\", 1);\n-        assert_eq!(\"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\", substr(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", 6u, 6u));\n+        assert_eq!(\"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\", \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".substr(6u, 6u));\n     }\n \n     #[test]"}]}