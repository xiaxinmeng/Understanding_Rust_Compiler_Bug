{"sha": "03efb50ae8f453dbc01f436f042eef2d253862d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZWZiNTBhZThmNDUzZGJjMDFmNDM2ZjA0MmVlZjJkMjUzODYyZDI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T19:39:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T19:39:40Z"}, "message": "Move out fn_param tests", "tree": {"sha": "eb617f65f5f2fafbfc4318e73ed8fab459be5809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb617f65f5f2fafbfc4318e73ed8fab459be5809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03efb50ae8f453dbc01f436f042eef2d253862d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03efb50ae8f453dbc01f436f042eef2d253862d2", "html_url": "https://github.com/rust-lang/rust/commit/03efb50ae8f453dbc01f436f042eef2d253862d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03efb50ae8f453dbc01f436f042eef2d253862d2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "html_url": "https://github.com/rust-lang/rust/commit/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa"}], "stats": {"total": 274, "additions": 152, "deletions": 122}, "files": [{"sha": "80ad3b9c8f65a23dfe1385c0f6dc93e9bff01884", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=03efb50ae8f453dbc01f436f042eef2d253862d2", "patch": "@@ -75,124 +75,3 @@ fn add_new_item_to_acc(\n     item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n     item.add_to(acc)\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::{tests::filtered_completion_list, CompletionKind};\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n-        expect.assert_eq(&actual);\n-    }\n-\n-    #[test]\n-    fn test_param_completion_last_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn bar(file_id: FileId) {}\n-fn baz(file$0) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_first_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn bar(file_id: FileId) {}\n-fn baz(file$0 id: u32) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_nth_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn baz(file$0, x: i32) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_trait_param() {\n-        check(\n-            r#\"\n-pub(crate) trait SourceRoot {\n-    pub fn contains(&self, file_id: FileId) -> bool;\n-    pub fn module_map(&self) -> &ModuleMap;\n-    pub fn lines(&self, file_id: FileId) -> &LineIndex;\n-    pub fn syntax(&self, file$0)\n-}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_param_in_inner_function() {\n-        check(\n-            r#\"\n-fn outer(text: String) {\n-    fn inner($0)\n-}\n-\"#,\n-            expect![[r#\"\n-                bn text: String\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_non_ident_pat_param() {\n-        check(\n-            r#\"\n-struct Bar { bar: u32 }\n-\n-fn foo(Bar { bar }: Bar) {}\n-fn foo2($0) {}\n-\"#,\n-            expect![[r#\"\n-                bn Bar { bar }: Bar\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn test_param_completion_self_param() {\n-        check(\n-            r#\"\n-                struct A {}\n-\n-                impl A {\n-                    fn foo(file_id: FileId) {}\n-                    fn new($0) {\n-                    }\n-                }\n-            \"#,\n-            expect![[r#\"\n-                bn self\n-                bn &self\n-                bn mut self\n-                bn &mut self\n-                bn file_id: FileId\n-            \"#]],\n-        )\n-    }\n-}"}, {"sha": "0b0c828617513844b453f57ddfa7d22d0de4abcd", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=03efb50ae8f453dbc01f436f042eef2d253862d2", "patch": "@@ -5,6 +5,7 @@\n //! Notable examples for completions that are being tested in this module's submodule are paths.\n \n mod attribute;\n+mod fn_param;\n mod item_list;\n mod item;\n mod pattern;"}, {"sha": "8a07aefafe34abcad7aa4cd4381f8b8205a8e500", "filename": "crates/ide_completion/src/tests/fn_param.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=03efb50ae8f453dbc01f436f042eef2d253862d2", "patch": "@@ -0,0 +1,150 @@\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual);\n+}\n+\n+#[test]\n+fn only_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(file$0) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn last_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(foo: (), file$0) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn first_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(file$0 id: u32) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn trait_param() {\n+    check(\n+        r#\"\n+pub(crate) trait SourceRoot {\n+    pub fn contains(file_id: usize) -> bool;\n+    pub fn syntax(file$0)\n+}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn in_inner_function() {\n+    check(\n+        r#\"\n+fn outer(text: &str) {\n+    fn inner($0)\n+}\n+\"#,\n+        expect![[r#\"\n+            bn text: &str\n+            kw mut\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn shows_non_ident_pat_param() {\n+    check(\n+        r#\"\n+struct Bar { bar: u32 }\n+fn foo(Bar { bar }: Bar) {}\n+fn foo2($0) {}\n+\"#,\n+        expect![[r#\"\n+            bn Bar { bar }: Bar\n+            kw mut\n+            bn Bar              Bar { bar$1 }: Bar$0\n+            st Bar\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_only_param() {\n+    check(\n+        r#\"\n+struct A {}\n+\n+impl A {\n+    fn foo(file_id: usize) {}\n+    fn new($0) {}\n+}\n+\"#,\n+        expect![[r#\"\n+            bn self\n+            bn &self\n+            bn mut self\n+            bn &mut self\n+            bn file_id: usize\n+            kw mut\n+            sp Self\n+            st A\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_after_self() {\n+    // FIXME: self completions should not be here\n+    check(\n+        r#\"\n+struct A {}\n+\n+impl A {\n+    fn foo(file_id: usize) {}\n+    fn new(self, $0) {}\n+}\n+\"#,\n+        expect![[r#\"\n+            bn self\n+            bn &self\n+            bn mut self\n+            bn &mut self\n+            bn file_id: usize\n+            kw mut\n+            sp Self\n+            st A\n+        \"#]],\n+    )\n+}"}, {"sha": "4795e25650bee16c4346aa1b2c5a24a74f8f6c7a", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03efb50ae8f453dbc01f436f042eef2d253862d2/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=03efb50ae8f453dbc01f436f042eef2d253862d2", "patch": "@@ -166,7 +166,7 @@ impl ActiveParameter {\n \n         let idx = active_parameter?;\n         let mut params = signature.params(sema.db);\n-        if params.len() <= idx {\n+        if !(idx < params.len()) {\n             cov_mark::hit!(too_many_arguments);\n             return None;\n         }"}]}