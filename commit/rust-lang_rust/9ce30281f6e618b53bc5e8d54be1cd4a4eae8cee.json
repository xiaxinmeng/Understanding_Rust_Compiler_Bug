{"sha": "9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTMwMjgxZjZlNjE4YjUzYmM1ZThkNTRiZTFjZDRhNGVhZThjZWU=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-06T22:04:14Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-06T22:04:14Z"}, "message": "Don't reuse the Chalk solver\n\nThis slows down analysis-stats a bit (~5% in my measurement), but improves\nincremental checking a lot because we can reuse trait solve results.", "tree": {"sha": "71b53390e8efd4cbc6e1170c6628a24e7d526b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b53390e8efd4cbc6e1170c6628a24e7d526b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "html_url": "https://github.com/rust-lang/rust/commit/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ae35c62e29610552167d8cfced8e7e19096576", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ae35c62e29610552167d8cfced8e7e19096576", "html_url": "https://github.com/rust-lang/rust/commit/26ae35c62e29610552167d8cfced8e7e19096576"}], "stats": {"total": 124, "additions": 29, "deletions": 95}, "files": [{"sha": "ee597cfd2e7c9af6eac8275a912e7f43a47236fa", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "patch": "@@ -18,8 +18,7 @@ pub use hir_ty::db::{\n     FieldTypesQuery, GenericDefaultsQuery, GenericPredicatesForParamQuery, GenericPredicatesQuery,\n     HirDatabase, HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery,\n     ImplsForTraitQuery, ImplsInCrateQuery, InternAssocTyValueQuery, InternChalkImplQuery,\n-    InternTypeCtorQuery, StructDatumQuery, TraitDatumQuery, TraitSolveQuery, TraitSolverQuery,\n-    TyQuery, ValueTyQuery,\n+    InternTypeCtorQuery, StructDatumQuery, TraitDatumQuery, TraitSolveQuery, TyQuery, ValueTyQuery,\n };\n \n #[test]"}, {"sha": "7db28a1f8df2a18d1921da41b36428ff896376f0", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "patch": "@@ -66,14 +66,6 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::traits::impls_for_trait_query)]\n     fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;\n \n-    /// This provides the Chalk trait solver instance. Because Chalk always\n-    /// works from a specific crate, this query is keyed on the crate; and\n-    /// because Chalk does its own internal caching, the solver is wrapped in a\n-    /// Mutex and the query does an untracked read internally, to make sure the\n-    /// cached state is thrown away when input facts change.\n-    #[salsa::invoke(crate::traits::trait_solver_query)]\n-    fn trait_solver(&self, krate: CrateId) -> crate::traits::TraitSolver;\n-\n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n     fn intern_type_ctor(&self, type_ctor: TypeCtor) -> crate::TypeCtorId;"}, {"sha": "8de588790e8eefac352013bc3c24e460cf906a68", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 28, "deletions": 84, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "patch": "@@ -1,12 +1,9 @@\n //! Trait solving using Chalk.\n-use std::{\n-    panic,\n-    sync::{Arc, Mutex},\n-};\n+use std::{panic, sync::Arc};\n \n use chalk_ir::cast::Cast;\n use hir_def::{expr::ExprId, DefWithBodyId, ImplId, TraitId, TypeAliasId};\n-use ra_db::{impl_intern_key, salsa, Canceled, CrateId};\n+use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n@@ -19,74 +16,6 @@ use self::chalk::{from_chalk, Interner, ToChalk};\n pub(crate) mod chalk;\n mod builtin;\n \n-#[derive(Debug, Clone)]\n-pub struct TraitSolver {\n-    krate: CrateId,\n-    inner: Arc<Mutex<chalk_solve::Solver<Interner>>>,\n-}\n-\n-/// We need eq for salsa\n-impl PartialEq for TraitSolver {\n-    fn eq(&self, other: &TraitSolver) -> bool {\n-        Arc::ptr_eq(&self.inner, &other.inner)\n-    }\n-}\n-\n-impl Eq for TraitSolver {}\n-\n-impl TraitSolver {\n-    fn solve(\n-        &self,\n-        db: &impl HirDatabase,\n-        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<Interner>>>,\n-    ) -> Option<chalk_solve::Solution<Interner>> {\n-        let context = ChalkContext { db, krate: self.krate };\n-        log::debug!(\"solve goal: {:?}\", goal);\n-        let mut solver = match self.inner.lock() {\n-            Ok(it) => it,\n-            // Our cancellation works via unwinding, but, as chalk is not\n-            // panic-safe, we need to make sure to propagate the cancellation.\n-            // Ideally, we should also make chalk panic-safe.\n-            Err(_) => ra_db::Canceled::throw(),\n-        };\n-\n-        let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n-\n-        let solution = panic::catch_unwind({\n-            let solver = panic::AssertUnwindSafe(&mut solver);\n-            let context = panic::AssertUnwindSafe(&context);\n-            move || {\n-                solver.0.solve_limited(context.0, goal, || {\n-                    context.0.db.check_canceled();\n-                    let remaining = fuel.get();\n-                    fuel.set(remaining - 1);\n-                    if remaining == 0 {\n-                        log::debug!(\"fuel exhausted\");\n-                    }\n-                    remaining > 0\n-                })\n-            }\n-        });\n-\n-        let solution = match solution {\n-            Ok(it) => it,\n-            Err(err) => {\n-                if err.downcast_ref::<Canceled>().is_some() {\n-                    panic::resume_unwind(err)\n-                } else {\n-                    log::error!(\"chalk panicked :-(\");\n-                    // Reset the solver, as it is not panic-safe.\n-                    *solver = create_chalk_solver();\n-                    None\n-                }\n-            }\n-        };\n-\n-        log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n-        solution\n-    }\n-}\n-\n /// This controls the maximum size of types Chalk considers. If we set this too\n /// high, we can run into slow edge cases; if we set it too low, Chalk won't\n /// find some solutions.\n@@ -100,16 +29,6 @@ struct ChalkContext<'a, DB> {\n     krate: CrateId,\n }\n \n-pub(crate) fn trait_solver_query(\n-    db: &(impl HirDatabase + salsa::Database),\n-    krate: CrateId,\n-) -> TraitSolver {\n-    db.salsa_runtime().report_untracked_read();\n-    // krate parameter is just so we cache a unique solver per crate\n-    log::debug!(\"Creating new solver for crate {:?}\", krate);\n-    TraitSolver { krate, inner: Arc::new(Mutex::new(create_chalk_solver())) }\n-}\n-\n fn create_chalk_solver() -> chalk_solve::Solver<Interner> {\n     let solver_choice =\n         chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE, expected_answers: None };\n@@ -239,10 +158,35 @@ pub(crate) fn trait_solve_query(\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n-    let solution = db.trait_solver(krate).solve(db, &u_canonical);\n+    let solution = solve(db, krate, &u_canonical);\n     solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n+fn solve(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<Interner>>>,\n+) -> Option<chalk_solve::Solution<Interner>> {\n+    let context = ChalkContext { db, krate };\n+    log::debug!(\"solve goal: {:?}\", goal);\n+    let mut solver = create_chalk_solver();\n+\n+    let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n+\n+    let solution = solver.solve_limited(&context, goal, || {\n+        context.db.check_canceled();\n+        let remaining = fuel.get();\n+        fuel.set(remaining - 1);\n+        if remaining == 0 {\n+            log::debug!(\"fuel exhausted\");\n+        }\n+        remaining > 0\n+    });\n+\n+    log::debug!(\"solve({:?}) => {:?}\", goal, solution);\n+    solution\n+}\n+\n fn solution_from_chalk(\n     db: &impl HirDatabase,\n     solution: chalk_solve::Solution<Interner>,"}, {"sha": "de5c6eb8f0766f6936ef2d7a3931f24da2b8f0c6", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=9ce30281f6e618b53bc5e8d54be1cd4a4eae8cee", "patch": "@@ -362,7 +362,6 @@ impl RootDatabase {\n             hir::db::GenericDefaultsQuery\n             hir::db::ImplsInCrateQuery\n             hir::db::ImplsForTraitQuery\n-            hir::db::TraitSolverQuery\n             hir::db::InternTypeCtorQuery\n             hir::db::InternChalkImplQuery\n             hir::db::InternAssocTyValueQuery"}]}