{"sha": "05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "node_id": "C_kwDOAAsO6NoAKDA1YmE1MTlhM2FiOGMwNmJhNDQ5ZDQxYTE0ZTg1ODRkNzg1YzFjYjk", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2023-01-04T10:23:35Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2023-01-04T22:39:46Z"}, "message": "trim paths in `default_trait_access`/`clone_on_copy` suggestions", "tree": {"sha": "8444f4ee27cd924d15ea359ec53165057f539458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8444f4ee27cd924d15ea359ec53165057f539458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "html_url": "https://github.com/rust-lang/rust/commit/05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bca8dd2547fcc46796b53d338c0734575e51c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bca8dd2547fcc46796b53d338c0734575e51c72", "html_url": "https://github.com/rust-lang/rust/commit/0bca8dd2547fcc46796b53d338c0734575e51c72"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "a04693f4637ab9697d0e14171eed47f7867cd81f", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -98,9 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             if let ty::Adt(def, ..) = expr_ty.kind();\n             if !is_from_proc_macro(cx, expr);\n             then {\n-                // TODO: Work out a way to put \"whatever the imported way of referencing\n-                // this type in this file\" rather than a fully-qualified type.\n-                let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did()));\n+                let replacement = with_forced_trimmed_paths!(format!(\"{}::default()\", cx.tcx.def_path_str(def.did())));\n                 span_lint_and_sugg(\n                     cx,\n                     DEFAULT_TRAIT_ACCESS,"}, {"sha": "3795c0ec250987c0ba4560263d6ef35231f9345f", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, adjustment::Adjust};\n+use rustc_middle::ty::{self, adjustment::Adjust, print::with_forced_trimmed_paths};\n use rustc_span::symbol::{sym, Symbol};\n \n use super::CLONE_DOUBLE_REF;\n@@ -47,10 +47,10 @@ pub(super) fn check(\n                 cx,\n                 CLONE_DOUBLE_REF,\n                 expr.span,\n-                &format!(\n+                &with_forced_trimmed_paths!(format!(\n                     \"using `clone` on a double-reference; \\\n                     this will copy the reference of type `{ty}` instead of cloning the inner type\"\n-                ),\n+                )),\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                         let mut ty = innermost;\n@@ -61,11 +61,11 @@ pub(super) fn check(\n                         }\n                         let refs = \"&\".repeat(n + 1);\n                         let derefs = \"*\".repeat(n);\n-                        let explicit = format!(\"<{refs}{ty}>::clone({snip})\");\n+                        let explicit = with_forced_trimmed_paths!(format!(\"<{refs}{ty}>::clone({snip})\"));\n                         diag.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n-                            format!(\"{refs}({derefs}{}).clone()\", snip.deref()),\n+                            with_forced_trimmed_paths!(format!(\"{refs}({derefs}{}).clone()\", snip.deref())),\n                             Applicability::MaybeIncorrect,\n                         );\n                         diag.span_suggestion(\n@@ -129,7 +129,9 @@ pub(super) fn check(\n             cx,\n             CLONE_ON_COPY,\n             expr.span,\n-            &format!(\"using `clone` on type `{ty}` which implements the `Copy` trait\"),\n+            &with_forced_trimmed_paths!(format!(\n+                \"using `clone` on type `{ty}` which implements the `Copy` trait\"\n+            )),\n             help,\n             sugg,\n             app,"}, {"sha": "862234d204be355e4fff41dbe4d4e1d474207da5", "filename": "tests/ui/clone_on_copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.stderr?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -48,7 +48,7 @@ error: using `clone` on type `i32` which implements the `Copy` trait\n LL |     vec.push(42.clone());\n    |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n \n-error: using `clone` on type `std::option::Option<i32>` which implements the `Copy` trait\n+error: using `clone` on type `Option<i32>` which implements the `Copy` trait\n   --> $DIR/clone_on_copy.rs:77:17\n    |\n LL |     let value = opt.clone()?; // operator precedence needed (*opt)?"}, {"sha": "5640599d48ae8b191c95bc77fdd85d6802e774fa", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -12,17 +12,17 @@ use std::default::Default as D2;\n use std::string;\n \n fn main() {\n-    let s1: String = std::string::String::default();\n+    let s1: String = String::default();\n \n     let s2 = String::default();\n \n-    let s3: String = std::string::String::default();\n+    let s3: String = String::default();\n \n-    let s4: String = std::string::String::default();\n+    let s4: String = String::default();\n \n     let s5 = string::String::default();\n \n-    let s6: String = std::string::String::default();\n+    let s6: String = String::default();\n \n     let s7 = std::string::String::default();\n "}, {"sha": "e4f73c08d190a8844f9feb37303e4db35300f242", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -1,32 +1,32 @@\n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s1: String = Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n    |\n note: the lint level is defined here\n   --> $DIR/default_trait_access.rs:3:9\n    |\n LL | #![deny(clippy::default_trait_access)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:19:22\n    |\n LL |     let s3: String = D2::default();\n-   |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^ help: try: `String::default()`\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s4: String = std::default::Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:25:22\n    |\n LL |     let s6: String = default::Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n \n error: calling `GenericDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:35:46"}, {"sha": "6022d9fa4c5c3e7d2493dc0cff56e1b305599c9e", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05ba519a3ab8c06ba449d41a14e8584d785c1cb9/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=05ba519a3ab8c06ba449d41a14e8584d785c1cb9", "patch": "@@ -38,13 +38,13 @@ LL |     t.clone();\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n-error: using `clone` on type `std::option::Option<T>` which implements the `Copy` trait\n+error: using `clone` on type `Option<T>` which implements the `Copy` trait\n   --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&std::vec::Vec<i32>` instead of cloning the inner type\n+error: using `clone` on a double-reference; this will copy the reference of type `&Vec<i32>` instead of cloning the inner type\n   --> $DIR/unnecessary_clone.rs:48:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n@@ -57,10 +57,10 @@ LL |     let z: &Vec<_> = &(*y).clone();\n    |                      ~~~~~~~~~~~~~\n help: or try being explicit if you are sure, that you want to clone a reference\n    |\n-LL |     let z: &Vec<_> = <&std::vec::Vec<i32>>::clone(y);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let z: &Vec<_> = <&Vec<i32>>::clone(y);\n+   |                      ~~~~~~~~~~~~~~~~~~~~~\n \n-error: using `clone` on type `many_derefs::E` which implements the `Copy` trait\n+error: using `clone` on type `E` which implements the `Copy` trait\n   --> $DIR/unnecessary_clone.rs:84:20\n    |\n LL |         let _: E = a.clone();"}]}