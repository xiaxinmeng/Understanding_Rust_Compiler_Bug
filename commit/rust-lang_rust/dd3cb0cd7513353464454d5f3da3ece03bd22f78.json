{"sha": "dd3cb0cd7513353464454d5f3da3ece03bd22f78", "node_id": "C_kwDOAAsO6NoAKGRkM2NiMGNkNzUxMzM1MzQ2NDQ1NGQ1ZjNkYTNlY2UwM2JkMjJmNzg", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-09-04T20:14:09Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-12-03T22:51:49Z"}, "message": "cg_cranelift: check may_unwind flag instead of cleanup", "tree": {"sha": "432cbfe425b9288d553002f2a4f6d099304461de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432cbfe425b9288d553002f2a4f6d099304461de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3cb0cd7513353464454d5f3da3ece03bd22f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3cb0cd7513353464454d5f3da3ece03bd22f78", "html_url": "https://github.com/rust-lang/rust/commit/dd3cb0cd7513353464454d5f3da3ece03bd22f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3cb0cd7513353464454d5f3da3ece03bd22f78/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5728c165fa55bafdf0204143d30568a80a4d05bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5728c165fa55bafdf0204143d30568a80a4d05bb", "html_url": "https://github.com/rust-lang/rust/commit/5728c165fa55bafdf0204143d30568a80a4d05bb"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "371c71de62fbbb421c18707e08b5f83b4524ecc1", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cb0cd7513353464454d5f3da3ece03bd22f78/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cb0cd7513353464454d5f3da3ece03bd22f78/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dd3cb0cd7513353464454d5f3da3ece03bd22f78", "patch": "@@ -1,6 +1,7 @@\n //! Codegen of a single function\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n+use rustc_ast::InlineAsmOptions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n@@ -379,9 +380,9 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 options,\n                 destination,\n                 line_spans: _,\n-                cleanup,\n+                cleanup: _,\n             } => {\n-                if cleanup.is_some() {\n+                if options.contains(InlineAsmOptions::MAY_UNWIND) {\n                     fx.tcx.sess.span_fatal(\n                         source_info.span,\n                         \"cranelift doesn't support unwinding from inline assembly.\","}]}