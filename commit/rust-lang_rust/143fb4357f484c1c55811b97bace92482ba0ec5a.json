{"sha": "143fb4357f484c1c55811b97bace92482ba0ec5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0M2ZiNDM1N2Y0ODRjMWM1NTgxMWI5N2JhY2U5MjQ4MmJhMGVjNWE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-06T16:52:37Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-16T13:33:46Z"}, "message": "Tweak VarLenSlice subtraction", "tree": {"sha": "0da2b8cbbe46462616fb0907469319742473c8a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da2b8cbbe46462616fb0907469319742473c8a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/143fb4357f484c1c55811b97bace92482ba0ec5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/143fb4357f484c1c55811b97bace92482ba0ec5a", "html_url": "https://github.com/rust-lang/rust/commit/143fb4357f484c1c55811b97bace92482ba0ec5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/143fb4357f484c1c55811b97bace92482ba0ec5a/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0214d9c560c49e2836c8491aa21d3dbf9f5554", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0214d9c560c49e2836c8491aa21d3dbf9f5554", "html_url": "https://github.com/rust-lang/rust/commit/9b0214d9c560c49e2836c8491aa21d3dbf9f5554"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "555772f8b58d312a524838ee695d605c7852a795", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/143fb4357f484c1c55811b97bace92482ba0ec5a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143fb4357f484c1c55811b97bace92482ba0ec5a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=143fb4357f484c1c55811b97bace92482ba0ec5a", "patch": "@@ -655,44 +655,45 @@ impl<'tcx> Constructor<'tcx> {\n                         .into_iter()\n                         .flat_map(|pos_ctor| -> SmallVec<[Constructor<'tcx>; 1]> {\n                             // Compute `pos_ctor \\ neg_ctor`.\n-                            match (&pos_ctor, neg_ctor) {\n-                                (&FixedLenSlice(pos_len), &VarLenSlice(neg_prefix, neg_suffix)) => {\n-                                    let neg_len = neg_prefix + neg_suffix;\n-                                    if neg_len <= pos_len {\n+                            match pos_ctor {\n+                                FixedLenSlice(pos_len) => match *neg_ctor {\n+                                    FixedLenSlice(neg_len) if neg_len == pos_len => smallvec![],\n+                                    VarLenSlice(neg_prefix, neg_suffix)\n+                                        if neg_prefix + neg_suffix <= pos_len =>\n+                                    {\n                                         smallvec![]\n-                                    } else {\n-                                        smallvec![pos_ctor]\n                                     }\n-                                }\n-                                (\n-                                    &VarLenSlice(pos_prefix, pos_suffix),\n-                                    &VarLenSlice(neg_prefix, neg_suffix),\n-                                ) => {\n-                                    let neg_len = neg_prefix + neg_suffix;\n-                                    let pos_len = pos_prefix + pos_suffix;\n-                                    if neg_len <= pos_len {\n-                                        smallvec![]\n-                                    } else {\n-                                        (pos_len..neg_len).map(FixedLenSlice).collect()\n-                                    }\n-                                }\n-                                (&VarLenSlice(pos_prefix, pos_suffix), &FixedLenSlice(neg_len)) => {\n+                                    _ => smallvec![pos_ctor],\n+                                },\n+                                VarLenSlice(pos_prefix, pos_suffix) => {\n                                     let pos_len = pos_prefix + pos_suffix;\n-                                    if neg_len < pos_len {\n-                                        smallvec![pos_ctor]\n-                                    } else {\n-                                        (pos_len..neg_len)\n-                                            .map(FixedLenSlice)\n-                                            // We know that `neg_len + 1 >= pos_len >= pos_suffix`.\n-                                            .chain(Some(VarLenSlice(\n-                                                neg_len + 1 - pos_suffix,\n-                                                pos_suffix,\n-                                            )))\n-                                            .collect()\n+                                    match *neg_ctor {\n+                                        FixedLenSlice(neg_len) if neg_len >= pos_len => {\n+                                            (pos_len..neg_len)\n+                                                .map(FixedLenSlice)\n+                                                // We know that `neg_len + 1 >= pos_len >=\n+                                                // pos_suffix`.\n+                                                .chain(Some(VarLenSlice(\n+                                                    neg_len + 1 - pos_suffix,\n+                                                    pos_suffix,\n+                                                )))\n+                                                .collect()\n+                                        }\n+                                        VarLenSlice(neg_prefix, neg_suffix) => {\n+                                            let neg_len = neg_prefix + neg_suffix;\n+                                            if neg_len <= pos_len {\n+                                                smallvec![]\n+                                            } else {\n+                                                (pos_len..neg_len).map(FixedLenSlice).collect()\n+                                            }\n+                                        }\n+                                        _ => smallvec![pos_ctor],\n                                     }\n                                 }\n-                                _ if pos_ctor == *neg_ctor => smallvec![],\n-                                _ => smallvec![pos_ctor],\n+                                _ => bug!(\n+                                    \"unexpected ctor while subtracting from VarLenSlice: {:?}\",\n+                                    pos_ctor\n+                                ),\n                             }\n                         })\n                         .collect();"}]}