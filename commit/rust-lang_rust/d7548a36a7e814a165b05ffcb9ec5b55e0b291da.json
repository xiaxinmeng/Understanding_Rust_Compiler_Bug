{"sha": "d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTQ4YTM2YTdlODE0YTE2NWIwNWZmY2I5ZWM1YjU1ZTBiMjkxZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T10:42:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T10:42:48Z"}, "message": "Unclutter NavigationTarget API", "tree": {"sha": "7e2e84a42863d4cc284e2954198e944e3cc7b3a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2e84a42863d4cc284e2954198e944e3cc7b3a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "html_url": "https://github.com/rust-lang/rust/commit/d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f157a0983a11132a3095f4241d60759c81a7ef26", "url": "https://api.github.com/repos/rust-lang/rust/commits/f157a0983a11132a3095f4241d60759c81a7ef26", "html_url": "https://github.com/rust-lang/rust/commit/f157a0983a11132a3095f4241d60759c81a7ef26"}], "stats": {"total": 364, "additions": 166, "deletions": 198}, "files": [{"sha": "c28af8ab33c089102485a3a3b40c105ff31ac751", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -154,7 +154,8 @@ mod tests {\n         let nav = navs.pop().unwrap();\n         nav.assert_match(expected);\n \n-        let item_pos = FilePosition { file_id: nav.file_id(), offset: nav.range().start() };\n+        let item_pos =\n+            FilePosition { file_id: nav.file_id, offset: nav.focus_or_full_range().start() };\n         let incoming_calls = analysis.incoming_calls(item_pos).unwrap().unwrap();\n         assert_eq!(incoming_calls.len(), expected_incoming.len());\n "}, {"sha": "6dcb9415abd0ff5e20550dd1da42595850fb1fbd", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 27, "deletions": 54, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -22,15 +22,28 @@ use super::short_label::ShortLabel;\n /// code, like a function or a struct, but this is not strictly required.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NavigationTarget {\n-    // FIXME: use FileRange?\n-    file_id: FileId,\n-    full_range: TextRange,\n-    name: SmolStr,\n-    kind: SyntaxKind,\n-    focus_range: Option<TextRange>,\n-    container_name: Option<SmolStr>,\n-    description: Option<String>,\n-    docs: Option<String>,\n+    pub file_id: FileId,\n+    /// Range which encompasses the whole element.\n+    ///\n+    /// Should include body, doc comments, attributes, etc.\n+    ///\n+    /// Clients should use this range to answer \"is the cursor inside the\n+    /// element?\" question.\n+    pub full_range: TextRange,\n+    /// A \"most interesting\" range withing the `full_range`.\n+    ///\n+    /// Typically, `full_range` is the whole syntax node, including doc\n+    /// comments, and `focus_range` is the range of the identifier. \"Most\n+    /// interesting\" range within the full range, typically the range of\n+    /// identifier.\n+    ///\n+    /// Clients should place the cursor on this range when navigating to this target.\n+    pub focus_range: Option<TextRange>,\n+    pub name: SmolStr,\n+    pub kind: SyntaxKind,\n+    pub container_name: Option<SmolStr>,\n+    pub description: Option<String>,\n+    pub docs: Option<String>,\n }\n \n pub(crate) trait ToNav {\n@@ -42,44 +55,9 @@ pub(crate) trait TryToNav {\n }\n \n impl NavigationTarget {\n-    /// When `focus_range` is specified, returns it. otherwise\n-    /// returns `full_range`\n-    pub fn range(&self) -> TextRange {\n+    pub fn focus_or_full_range(&self) -> TextRange {\n         self.focus_range.unwrap_or(self.full_range)\n     }\n-    /// A \"most interesting\" range withing the `full_range`.\n-    ///\n-    /// Typically, `full_range` is the whole syntax node,\n-    /// including doc comments, and `focus_range` is the range of the identifier.\n-    pub fn focus_range(&self) -> Option<TextRange> {\n-        self.focus_range\n-    }\n-    pub fn full_range(&self) -> TextRange {\n-        self.full_range\n-    }\n-    pub fn file_id(&self) -> FileId {\n-        self.file_id\n-    }\n-\n-    pub fn name(&self) -> &SmolStr {\n-        &self.name\n-    }\n-\n-    pub fn container_name(&self) -> Option<&SmolStr> {\n-        self.container_name.as_ref()\n-    }\n-\n-    pub fn kind(&self) -> SyntaxKind {\n-        self.kind\n-    }\n-\n-    pub fn docs(&self) -> Option<&str> {\n-        self.docs.as_deref()\n-    }\n-\n-    pub fn description(&self) -> Option<&str> {\n-        self.description.as_deref()\n-    }\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n@@ -107,17 +85,12 @@ impl NavigationTarget {\n \n     #[cfg(test)]\n     pub(crate) fn debug_render(&self) -> String {\n-        let mut buf = format!(\n-            \"{} {:?} {:?} {:?}\",\n-            self.name(),\n-            self.kind(),\n-            self.file_id(),\n-            self.full_range()\n-        );\n-        if let Some(focus_range) = self.focus_range() {\n+        let mut buf =\n+            format!(\"{} {:?} {:?} {:?}\", self.name, self.kind, self.file_id, self.full_range);\n+        if let Some(focus_range) = self.focus_range {\n             buf.push_str(&format!(\" {:?}\", focus_range))\n         }\n-        if let Some(container_name) = self.container_name() {\n+        if let Some(container_name) = &self.container_name {\n             buf.push_str(&format!(\" {}\", container_name))\n         }\n         buf"}, {"sha": "db6d20a3744d82433ed04ba50ba98e797a4b2ceb", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -130,7 +130,7 @@ mod tests {\n         assert_eq!(navs.len(), 1);\n \n         let nav = navs.pop().unwrap();\n-        assert_eq!(expected, FileRange { file_id: nav.file_id(), range: nav.range() });\n+        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n     }\n \n     #[test]"}, {"sha": "3ee048f2855821caf8b120f1e828a73ddd964760", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -98,7 +98,7 @@ mod tests {\n \n         let mut actual = navs\n             .into_iter()\n-            .map(|nav| FileRange { file_id: nav.file_id(), range: nav.range() })\n+            .map(|nav| FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() })\n             .collect::<Vec<_>>();\n         actual.sort_by_key(key);\n "}, {"sha": "8f52feea6e9cbe23b34c1e8a2fdc6551ee515d9c", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -67,7 +67,7 @@ mod tests {\n         let mut navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n         let nav = navs.pop().unwrap();\n-        assert_eq!(expected, FileRange { file_id: nav.file_id(), range: nav.range() });\n+        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n     }\n \n     #[test]"}, {"sha": "d067c339d36dbae389a3e3c8484adfa4c310e355", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -133,8 +133,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     fn to_action(nav_target: NavigationTarget) -> HoverAction {\n         HoverAction::Implementaion(FilePosition {\n-            file_id: nav_target.file_id(),\n-            offset: nav_target.range().start(),\n+            file_id: nav_target.file_id,\n+            offset: nav_target.focus_or_full_range().start(),\n         })\n     }\n \n@@ -1357,11 +1357,11 @@ fn foo_<|>test() {}\n                                     1,\n                                 ),\n                                 full_range: 0..24,\n-                                name: \"foo_test\",\n-                                kind: FN_DEF,\n                                 focus_range: Some(\n                                     11..19,\n                                 ),\n+                                name: \"foo_test\",\n+                                kind: FN_DEF,\n                                 container_name: None,\n                                 description: None,\n                                 docs: None,\n@@ -1400,11 +1400,11 @@ mod tests<|> {\n                                     1,\n                                 ),\n                                 full_range: 0..46,\n-                                name: \"tests\",\n-                                kind: MODULE,\n                                 focus_range: Some(\n                                     4..9,\n                                 ),\n+                                name: \"tests\",\n+                                kind: MODULE,\n                                 container_name: None,\n                                 description: None,\n                                 docs: None,\n@@ -1439,11 +1439,11 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                         1,\n                                     ),\n                                     full_range: 0..19,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         7..8,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1478,11 +1478,11 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         1,\n                                     ),\n                                     full_range: 17..37,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         24..25,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1497,11 +1497,11 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         1,\n                                     ),\n                                     full_range: 0..16,\n-                                    name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         7..10,\n                                     ),\n+                                    name: \"Arg\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1536,11 +1536,11 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         1,\n                                     ),\n                                     full_range: 17..37,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         24..25,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1555,11 +1555,11 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         1,\n                                     ),\n                                     full_range: 0..16,\n-                                    name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         7..10,\n                                     ),\n+                                    name: \"Arg\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1597,11 +1597,11 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         1,\n                                     ),\n                                     full_range: 0..14,\n-                                    name: \"A\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         7..8,\n                                     ),\n+                                    name: \"A\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct A\",\n@@ -1616,11 +1616,11 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         1,\n                                     ),\n                                     full_range: 15..29,\n-                                    name: \"B\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         22..23,\n                                     ),\n+                                    name: \"B\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -1635,11 +1635,11 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         1,\n                                     ),\n                                     full_range: 42..60,\n-                                    name: \"C\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         53..54,\n                                     ),\n+                                    name: \"C\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"pub struct C\",\n@@ -1674,11 +1674,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1714,11 +1714,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 0..15,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1733,11 +1733,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 16..25,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         23..24,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1773,11 +1773,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1792,11 +1792,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 13..25,\n-                                    name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         19..22,\n                                     ),\n+                                    name: \"Bar\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1835,11 +1835,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 0..15,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1854,11 +1854,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 16..31,\n-                                    name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         22..25,\n                                     ),\n+                                    name: \"Bar\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -1873,11 +1873,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 32..44,\n-                                    name: \"S1\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         39..41,\n                                     ),\n+                                    name: \"S1\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S1\",\n@@ -1892,11 +1892,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 45..57,\n-                                    name: \"S2\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         52..54,\n                                     ),\n+                                    name: \"S2\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S2\",\n@@ -1929,11 +1929,11 @@ fn foo(ar<|>g: &impl Foo) {}\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1969,11 +1969,11 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -1988,11 +1988,11 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 13..28,\n-                                    name: \"Bar\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         19..22,\n                                     ),\n+                                    name: \"Bar\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2007,11 +2007,11 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 29..39,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         36..37,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2045,11 +2045,11 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 0..15,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2064,11 +2064,11 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 16..27,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         23..24,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2107,11 +2107,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 42..55,\n-                                    name: \"B\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         49..50,\n                                     ),\n+                                    name: \"B\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2126,11 +2126,11 @@ fn main() { let s<|>t = foo(); }\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2163,11 +2163,11 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                         1,\n                                     ),\n                                     full_range: 0..12,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2201,11 +2201,11 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 0..15,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2220,11 +2220,11 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         1,\n                                     ),\n                                     full_range: 16..27,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         23..24,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2261,11 +2261,11 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         1,\n                                     ),\n                                     full_range: 0..21,\n-                                    name: \"ImplTrait\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..15,\n                                     ),\n+                                    name: \"ImplTrait\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait ImplTrait\",\n@@ -2280,11 +2280,11 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         1,\n                                     ),\n                                     full_range: 43..57,\n-                                    name: \"B\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         50..51,\n                                     ),\n+                                    name: \"B\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2299,11 +2299,11 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         1,\n                                     ),\n                                     full_range: 22..42,\n-                                    name: \"DynTrait\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         28..36,\n                                     ),\n+                                    name: \"DynTrait\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait DynTrait\",\n@@ -2318,11 +2318,11 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         1,\n                                     ),\n                                     full_range: 58..69,\n-                                    name: \"S\",\n-                                    kind: STRUCT_DEF,\n                                     focus_range: Some(\n                                         65..66,\n                                     ),\n+                                    name: \"S\",\n+                                    kind: STRUCT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2366,11 +2366,11 @@ fn main() { let s<|>t = test().get(); }\n                                         1,\n                                     ),\n                                     full_range: 0..62,\n-                                    name: \"Foo\",\n-                                    kind: TRAIT_DEF,\n                                     focus_range: Some(\n                                         6..9,\n                                     ),\n+                                    name: \"Foo\",\n+                                    kind: TRAIT_DEF,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\","}, {"sha": "353f430ff1548d2d3cb72294d547459618f95f15", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -545,8 +545,8 @@ mod tests {\n \n         let s = symbols.pop().unwrap();\n \n-        assert_eq!(s.name(), \"FooInner\");\n-        assert!(s.container_name().is_none());\n+        assert_eq!(s.name, \"FooInner\");\n+        assert!(s.container_name.is_none());\n     }\n \n     #[test]\n@@ -561,8 +561,8 @@ fn foo() {\n \n         let s = symbols.pop().unwrap();\n \n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+        assert_eq!(s.name, \"FooInner\");\n+        assert_eq!(s.container_name, Some(SmolStr::new(\"foo\")));\n \n         let code = r#\"\n mod foo {\n@@ -574,8 +574,8 @@ mod foo {\n \n         let s = symbols.pop().unwrap();\n \n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+        assert_eq!(s.name, \"FooInner\");\n+        assert_eq!(s.container_name, Some(SmolStr::new(\"foo\")));\n     }\n \n     #[test]\n@@ -588,8 +588,8 @@ struct Foo;\n \n         let symbols = get_symbols_matching(code, \"Foo\");\n \n-        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n-        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n+        let fn_match = symbols.iter().find(|s| s.name == \"foo\").map(|s| s.kind);\n+        let struct_match = symbols.iter().find(|s| s.name == \"Foo\").map(|s| s.kind);\n \n         assert_eq!(fn_match, Some(FN_DEF));\n         assert_eq!(struct_match, Some(STRUCT_DEF));"}, {"sha": "fe1c074d125c49cc4aaaf8da4c92ef4b763c8e02", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -74,8 +74,8 @@ impl IntoIterator for ReferenceSearchResult {\n         let mut v = Vec::with_capacity(self.len());\n         v.push(Reference {\n             file_range: FileRange {\n-                file_id: self.declaration.nav.file_id(),\n-                range: self.declaration.nav.range(),\n+                file_id: self.declaration.nav.file_id,\n+                range: self.declaration.nav.focus_or_full_range(),\n             },\n             kind: self.declaration.kind,\n             access: self.declaration.access,\n@@ -112,7 +112,7 @@ pub(crate) fn find_all_refs(\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();\n \n-    let decl_range = def.try_to_nav(sema.db)?.range();\n+    let decl_range = def.try_to_nav(sema.db)?.focus_or_full_range();\n \n     let declaration = Declaration {\n         nav: def.try_to_nav(sema.db)?,"}, {"sha": "0994beec56f63744551ab9ba8c03161508de1993", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -299,11 +299,11 @@ fn bench() {}\n                                 1,\n                             ),\n                             full_range: 1..13,\n-                            name: \"main\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 4..8,\n                             ),\n+                            name: \"main\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -317,11 +317,11 @@ fn bench() {}\n                                 1,\n                             ),\n                             full_range: 15..39,\n-                            name: \"test_foo\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 26..34,\n                             ),\n+                            name: \"test_foo\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -342,11 +342,11 @@ fn bench() {}\n                                 1,\n                             ),\n                             full_range: 41..75,\n-                            name: \"test_foo\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 62..70,\n                             ),\n+                            name: \"test_foo\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -367,11 +367,11 @@ fn bench() {}\n                                 1,\n                             ),\n                             full_range: 77..99,\n-                            name: \"bench\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 89..94,\n                             ),\n+                            name: \"bench\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -410,11 +410,11 @@ fn foo() {}\n                                 1,\n                             ),\n                             full_range: 1..13,\n-                            name: \"main\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 4..8,\n                             ),\n+                            name: \"main\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -428,9 +428,9 @@ fn foo() {}\n                                 1,\n                             ),\n                             full_range: 15..57,\n+                            focus_range: None,\n                             name: \"foo\",\n                             kind: FN_DEF,\n-                            focus_range: None,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -472,11 +472,11 @@ impl Data {\n                                 1,\n                             ),\n                             full_range: 1..13,\n-                            name: \"main\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 4..8,\n                             ),\n+                            name: \"main\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -490,9 +490,9 @@ impl Data {\n                                 1,\n                             ),\n                             full_range: 44..98,\n+                            focus_range: None,\n                             name: \"foo\",\n                             kind: FN_DEF,\n-                            focus_range: None,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -529,11 +529,11 @@ mod test_mod {\n                                 1,\n                             ),\n                             full_range: 1..51,\n-                            name: \"test_mod\",\n-                            kind: MODULE,\n                             focus_range: Some(\n                                 5..13,\n                             ),\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -549,11 +549,11 @@ mod test_mod {\n                                 1,\n                             ),\n                             full_range: 20..49,\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 35..44,\n                             ),\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -595,11 +595,11 @@ mod foo {\n                                 1,\n                             ),\n                             full_range: 15..77,\n-                            name: \"test_mod\",\n-                            kind: MODULE,\n                             focus_range: Some(\n                                 19..27,\n                             ),\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -615,11 +615,11 @@ mod foo {\n                                 1,\n                             ),\n                             full_range: 38..71,\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 57..66,\n                             ),\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -663,11 +663,11 @@ mod foo {\n                                 1,\n                             ),\n                             full_range: 33..107,\n-                            name: \"test_mod\",\n-                            kind: MODULE,\n                             focus_range: Some(\n                                 37..45,\n                             ),\n+                            name: \"test_mod\",\n+                            kind: MODULE,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -683,11 +683,11 @@ mod foo {\n                                 1,\n                             ),\n                             full_range: 60..97,\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 83..92,\n                             ),\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -726,11 +726,11 @@ fn test_foo1() {}\n                                 1,\n                             ),\n                             full_range: 1..50,\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 36..45,\n                             ),\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -774,11 +774,11 @@ fn test_foo1() {}\n                                 1,\n                             ),\n                             full_range: 1..72,\n-                            name: \"test_foo1\",\n-                            kind: FN_DEF,\n                             focus_range: Some(\n                                 58..67,\n                             ),\n+                            name: \"test_foo1\",\n+                            kind: FN_DEF,\n                             container_name: None,\n                             description: None,\n                             docs: None,"}, {"sha": "326977b6269c2fad27073b31dc0a5db46ccaef97", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -341,10 +341,10 @@ pub(crate) fn handle_workspace_symbol(\n     fn exec_query(snap: &GlobalStateSnapshot, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n         for nav in snap.analysis.symbol_search(query)? {\n-            let container_name = nav.container_name().map(|v| v.to_string());\n+            let container_name = nav.container_name.as_ref().map(|v| v.to_string());\n             let info = SymbolInformation {\n-                name: nav.name().to_string(),\n-                kind: to_proto::symbol_kind(nav.kind()),\n+                name: nav.name.to_string(),\n+                kind: to_proto::symbol_kind(nav.kind),\n                 location: to_proto::location_from_nav(snap, nav)?,\n                 container_name,\n                 deprecated: None,\n@@ -434,7 +434,7 @@ pub(crate) fn handle_runnables(\n     let mut res = Vec::new();\n     for runnable in snap.analysis.runnables(file_id)? {\n         if let Some(offset) = offset {\n-            if !runnable.nav.full_range().contains_inclusive(offset) {\n+            if !runnable.nav.full_range.contains_inclusive(offset) {\n                 continue;\n             }\n         }\n@@ -874,7 +874,7 @@ pub(crate) fn handle_code_lens(\n             }\n \n             let action = runnable.action();\n-            let range = to_proto::range(&line_index, runnable.nav.range());\n+            let range = to_proto::range(&line_index, runnable.nav.focus_or_full_range());\n             let r = to_proto::runnable(&snap, file_id, runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {\n@@ -1063,7 +1063,7 @@ pub(crate) fn handle_call_hierarchy_prepare(\n     let RangeInfo { range: _, info: navs } = nav_info;\n     let res = navs\n         .into_iter()\n-        .filter(|it| it.kind() == SyntaxKind::FN_DEF)\n+        .filter(|it| it.kind == SyntaxKind::FN_DEF)\n         .map(|it| to_proto::call_hierarchy_item(&snap, it))\n         .collect::<Result<Vec<_>>>()?;\n \n@@ -1089,7 +1089,7 @@ pub(crate) fn handle_call_hierarchy_incoming(\n     let mut res = vec![];\n \n     for call_item in call_items.into_iter() {\n-        let file_id = call_item.target.file_id();\n+        let file_id = call_item.target.file_id;\n         let line_index = snap.analysis.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyIncomingCall {\n@@ -1124,7 +1124,7 @@ pub(crate) fn handle_call_hierarchy_outgoing(\n     let mut res = vec![];\n \n     for call_item in call_items.into_iter() {\n-        let file_id = call_item.target.file_id();\n+        let file_id = call_item.target.file_id;\n         let line_index = snap.analysis.file_line_index(file_id)?;\n         let item = to_proto::call_hierarchy_item(&snap, call_item.target)?;\n         res.push(CallHierarchyOutgoingCall {\n@@ -1220,13 +1220,13 @@ fn goto_location_command(snap: &GlobalStateSnapshot, nav: &NavigationTarget) ->\n         let link = to_proto::location_link(snap, None, nav.clone()).ok()?;\n         to_value(link).ok()?\n     } else {\n-        let range = FileRange { file_id: nav.file_id(), range: nav.range() };\n+        let range = FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() };\n         let location = to_proto::location(snap, range).ok()?;\n         to_value(location).ok()?\n     };\n \n     Some(Command {\n-        title: nav.name().to_string(),\n+        title: nav.name.to_string(),\n         command: \"rust-analyzer.gotoLocation\".into(),\n         arguments: Some(vec![value]),\n     })"}, {"sha": "783012c1a2be52c675e2ff2bd772a535d4a3662a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7548a36a7e814a165b05ffcb9ec5b55e0b291da/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d7548a36a7e814a165b05ffcb9ec5b55e0b291da", "patch": "@@ -497,9 +497,9 @@ pub(crate) fn location_from_nav(\n     snap: &GlobalStateSnapshot,\n     nav: NavigationTarget,\n ) -> Result<lsp_types::Location> {\n-    let url = url(snap, nav.file_id());\n-    let line_index = snap.analysis.file_line_index(nav.file_id())?;\n-    let range = range(&line_index, nav.full_range());\n+    let url = url(snap, nav.file_id);\n+    let line_index = snap.analysis.file_line_index(nav.file_id)?;\n+    let range = range(&line_index, nav.full_range);\n     let loc = lsp_types::Location::new(url, range);\n     Ok(loc)\n }\n@@ -531,12 +531,12 @@ fn location_info(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n ) -> Result<(lsp_types::Url, lsp_types::Range, lsp_types::Range)> {\n-    let line_index = snap.analysis.file_line_index(target.file_id())?;\n+    let line_index = snap.analysis.file_line_index(target.file_id)?;\n \n-    let target_uri = url(snap, target.file_id());\n-    let target_range = range(&line_index, target.full_range());\n+    let target_uri = url(snap, target.file_id);\n+    let target_range = range(&line_index, target.full_range);\n     let target_selection_range =\n-        target.focus_range().map(|it| range(&line_index, it)).unwrap_or(target_range);\n+        target.focus_range.map(|it| range(&line_index, it)).unwrap_or(target_range);\n     Ok((target_uri, target_range, target_selection_range))\n }\n \n@@ -555,13 +555,7 @@ pub(crate) fn goto_definition_response(\n         let locations = targets\n             .into_iter()\n             .map(|nav| {\n-                location(\n-                    snap,\n-                    FileRange {\n-                        file_id: nav.file_id(),\n-                        range: nav.focus_range().unwrap_or(nav.range()),\n-                    },\n-                )\n+                location(snap, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() })\n             })\n             .collect::<Result<Vec<_>>>()?;\n         Ok(locations.into())\n@@ -666,9 +660,9 @@ pub(crate) fn call_hierarchy_item(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n ) -> Result<lsp_types::CallHierarchyItem> {\n-    let name = target.name().to_string();\n-    let detail = target.description().map(|it| it.to_string());\n-    let kind = symbol_kind(target.kind());\n+    let name = target.name.to_string();\n+    let detail = target.description.clone();\n+    let kind = symbol_kind(target.kind);\n     let (uri, range, selection_range) = location_info(snap, target)?;\n     Ok(lsp_types::CallHierarchyItem { name, kind, tags: None, detail, uri, range, selection_range })\n }"}]}