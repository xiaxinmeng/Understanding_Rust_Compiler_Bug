{"sha": "2fddcfda7a4683f07cf62d4a94886fd8424b7893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGRjZmRhN2E0NjgzZjA3Y2Y2MmQ0YTk0ODg2ZmQ4NDI0Yjc4OTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-03T05:35:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-03T05:35:41Z"}, "message": "Rollup merge of #85934 - tmiasko:is-union, r=jackh726\n\nAdd `Ty::is_union` predicate", "tree": {"sha": "3430574fb94536f9bad5ce2192aae69d5c087dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3430574fb94536f9bad5ce2192aae69d5c087dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fddcfda7a4683f07cf62d4a94886fd8424b7893", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguGotCRBK7hj4Ov3rIwAADBcIAHSORR6DUamMw5ehBez3GeMF\nW/DUYLWzy8XO9P5kaNL+8sFYBR4Clk5bqoAsv9fAMBJPHhEz94mOoSXdN1A4gKh4\nfETs1l1hmkvLVPN2V+9oAswRn8L5BNyeqmJBIU6f8k2j2obzV7yHMhJRo704lZVI\nYotGk4lriGp4ImNw2TBpllDx6S6oIsUvO5raekyBhYpuhG/Zh2GRRBkRtqQb5QsU\naQ/CLGTc1nlNCjLHUSjOtCWgoOYx7ICYNIcRQGBQ4GSsT0ND9/36sT9ctOI8ek3f\nNz2vuR8DlqCrZgTzoJma4KFXhJsOlV1xNv6Ts8avFupgDihC+mD/QRgijGOP2E0=\n=PgiK\n-----END PGP SIGNATURE-----\n", "payload": "tree 3430574fb94536f9bad5ce2192aae69d5c087dc6\nparent 80c871cf54a566a37e62b6ea9e5f99cfadb14e26\nparent c898681a8683fb5622ec77e1d7ecb641e1cd0328\nauthor Yuki Okushi <jtitor@2k36.org> 1622698541 +0900\ncommitter GitHub <noreply@github.com> 1622698541 +0900\n\nRollup merge of #85934 - tmiasko:is-union, r=jackh726\n\nAdd `Ty::is_union` predicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fddcfda7a4683f07cf62d4a94886fd8424b7893", "html_url": "https://github.com/rust-lang/rust/commit/2fddcfda7a4683f07cf62d4a94886fd8424b7893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fddcfda7a4683f07cf62d4a94886fd8424b7893/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c871cf54a566a37e62b6ea9e5f99cfadb14e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c871cf54a566a37e62b6ea9e5f99cfadb14e26", "html_url": "https://github.com/rust-lang/rust/commit/80c871cf54a566a37e62b6ea9e5f99cfadb14e26"}, {"sha": "c898681a8683fb5622ec77e1d7ecb641e1cd0328", "url": "https://api.github.com/repos/rust-lang/rust/commits/c898681a8683fb5622ec77e1d7ecb641e1cd0328", "html_url": "https://github.com/rust-lang/rust/commit/c898681a8683fb5622ec77e1d7ecb641e1cd0328"}], "stats": {"total": 91, "additions": 32, "deletions": 59}, "files": [{"sha": "012d9bd82c816538793af066b3b1c2c229ad9cf0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -1837,10 +1837,12 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_enum(&self) -> bool {\n-        match self.kind() {\n-            Adt(adt_def, _) => adt_def.is_enum(),\n-            _ => false,\n-        }\n+        matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())\n+    }\n+\n+    #[inline]\n+    pub fn is_union(&self) -> bool {\n+        matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())\n     }\n \n     #[inline]"}, {"sha": "36eb8a4baa8308f1f7d13a8c81c8f64cb79d57d2", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -1965,13 +1965,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::Adt(def, _) = base.ty(this.body(), tcx).ty.kind() {\n-                    if def.is_union() {\n-                        if this.move_data.path_map[mpi].iter().any(|moi| {\n-                            this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n-                        }) {\n-                            return;\n-                        }\n+                if base.ty(this.body(), tcx).ty.is_union() {\n+                    if this.move_data.path_map[mpi].iter().any(|moi| {\n+                        this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n+                    }) {\n+                        return;\n                     }\n                 }\n "}, {"sha": "d21550a8e1af60b5bb0564eae081fedc315ea0b8", "filename": "compiler/rustc_mir/src/borrow_check/places_conflict.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -331,17 +331,14 @@ fn place_projection_conflict<'tcx>(\n                 Overlap::EqualOrDisjoint\n             } else {\n                 let ty = Place::ty_from(pi1_local, pi1_proj_base, body, tcx).ty;\n-                match ty.kind() {\n-                    ty::Adt(def, _) if def.is_union() => {\n-                        // Different fields of a union, we are basically stuck.\n-                        debug!(\"place_element_conflict: STUCK-UNION\");\n-                        Overlap::Arbitrary\n-                    }\n-                    _ => {\n-                        // Different fields of a struct (`a.x` vs. `a.y`). Disjoint!\n-                        debug!(\"place_element_conflict: DISJOINT-FIELD\");\n-                        Overlap::Disjoint\n-                    }\n+                if ty.is_union() {\n+                    // Different fields of a union, we are basically stuck.\n+                    debug!(\"place_element_conflict: STUCK-UNION\");\n+                    Overlap::Arbitrary\n+                } else {\n+                    // Different fields of a struct (`a.x` vs. `a.y`). Disjoint!\n+                    debug!(\"place_element_conflict: DISJOINT-FIELD\");\n+                    Overlap::Disjoint\n                 }\n             }\n         }"}, {"sha": "cea465ea1ed9dc423045c5a80d5ffed630310173", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -519,10 +519,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         // Check if we are assigning into a field of a union, if so, lookup the place\n         // of the union so it is marked as initialized again.\n         if let Some((place_base, ProjectionElem::Field(_, _))) = place.last_projection() {\n-            if let ty::Adt(def, _) = place_base.ty(self.builder.body, self.builder.tcx).ty.kind() {\n-                if def.is_union() {\n-                    place = place_base;\n-                }\n+            if place_base.ty(self.builder.body, self.builder.tcx).ty.is_union() {\n+                place = place_base;\n             }\n         }\n "}, {"sha": "ac3420ad339500dd098497311e65ddb6885d28d9", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -752,12 +752,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n                 let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n-                match base_ty.ty_adt_def() {\n-                    Some(def) if def.is_union() => {\n-                        self.check_op(ops::UnionAccess);\n-                    }\n-\n-                    _ => {}\n+                if base_ty.is_union() {\n+                    self.check_op(ops::UnionAccess);\n                 }\n             }\n         }"}, {"sha": "8d4316c30b3efed07f4ec29cf609f31afe47ef4e", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -221,7 +221,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n \n             let base_ty = base.ty(self.body, self.tcx).ty;\n-            if base_ty.ty_adt_def().map_or(false, |adt| adt.is_union()) {\n+            if base_ty.is_union() {\n                 // If we did not hit a `Deref` yet and the overall place use is an assignment, the\n                 // rules are different.\n                 let assign_to_field = !saw_deref"}, {"sha": "4f5a467a6ee624cd39a1509aa6f9064c89e90aeb", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -114,7 +114,7 @@ use rustc_middle::mir::{\n     traversal, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place, PlaceElem,\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time\n@@ -910,17 +910,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n \n             // Handle the \"subtle case\" described above by rejecting any `dest` that is or\n             // projects through a union.\n-            let is_union = |ty: Ty<'_>| {\n-                if let ty::Adt(def, _) = ty.kind() {\n-                    if def.is_union() {\n-                        return true;\n-                    }\n-                }\n-\n-                false\n-            };\n             let mut place_ty = PlaceTy::from_ty(self.body.local_decls[dest.local].ty);\n-            if is_union(place_ty.ty) {\n+            if place_ty.ty.is_union() {\n                 return;\n             }\n             for elem in dest.projection {\n@@ -930,7 +921,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n                 }\n \n                 place_ty = place_ty.projection_ty(self.tcx, elem);\n-                if is_union(place_ty.ty) {\n+                if place_ty.ty.is_union() {\n                     return;\n                 }\n             }"}, {"sha": "78e84419c62cde8cf85337cb23d6b42725c1d7ba", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -415,11 +415,9 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                     ProjectionElem::Field(..) => {\n                         let base_ty = place_base.ty(self.body, self.tcx).ty;\n-                        if let Some(def) = base_ty.ty_adt_def() {\n+                        if base_ty.is_union() {\n                             // No promotion of union field accesses.\n-                            if def.is_union() {\n-                                return Err(Unpromotable);\n-                            }\n+                            return Err(Unpromotable);\n                         }\n                     }\n                 }"}, {"sha": "a0f225e6de6014633decdd281cbfa921106ce864", "filename": "compiler/rustc_mir/src/transform/remove_zsts.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -69,21 +69,14 @@ fn involves_a_union<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> bool {\n     let mut place_ty = PlaceTy::from_ty(local_decls[place.local].ty);\n-    if is_union(place_ty.ty) {\n+    if place_ty.ty.is_union() {\n         return true;\n     }\n     for elem in place.projection {\n         place_ty = place_ty.projection_ty(tcx, elem);\n-        if is_union(place_ty.ty) {\n+        if place_ty.ty.is_union() {\n             return true;\n         }\n     }\n     return false;\n }\n-\n-fn is_union(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(def, _) if def.is_union() => true,\n-        _ => false,\n-    }\n-}"}, {"sha": "652b82f1063c9c48c60d71f2f2980e47a2c750ca", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fddcfda7a4683f07cf62d4a94886fd8424b7893/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=2fddcfda7a4683f07cf62d4a94886fd8424b7893", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Clear previous flag; after a pointer indirection it does not apply any more.\n                 inside_union = false;\n             }\n-            if source.ty_adt_def().map_or(false, |adt| adt.is_union()) {\n+            if source.is_union() {\n                 inside_union = true;\n             }\n             // Fix up the autoderefs. Autorefs can only occur immediately preceding"}]}