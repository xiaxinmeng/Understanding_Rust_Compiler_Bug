{"sha": "9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNmM5YjYzOGUwMTQ4NDA5YjY1NjhiNjFmNzYzZTg3ZGM4ZmQzYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T23:33:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T23:33:01Z"}, "message": "Auto merge of #81866 - nagisa:nagisa/sanitizer-support-target-prop, r=tmiasko\n\nMaintain supported sanitizers as a target property\n\nIn an effort to remove a hard-coded allow-list for target-sanitizer support correspondence, this PR moves the configuration to the target options.\n\nPerhaps the one notable change made in this PR is this doc-comment:\n\n```rust\n    /// The sanitizers supported by this target\n    ///\n    /// Note that the support here is at a codegen level. If the machine code with sanitizer\n    /// enabled can generated on this target, but the necessary supporting libraries are not\n    /// distributed with the target, the sanitizer should still appear in this list for the target.\n```\n\nPreviously the target would typically be added to the allow-list at the same time as the supporting runtime libraries are shipped for the target. However whether we ship the runtime libraries or not needn't be baked into the compiler; and if we don't users will receive a significantly more directed error about library not being found.\n\nFixes #81802", "tree": {"sha": "1ea35a5d526323112746615fd26f2ee4e4339d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea35a5d526323112746615fd26f2ee4e4339d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "html_url": "https://github.com/rust-lang/rust/commit/9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138fd56cf9598b4bf016634c768dca128a83a5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/138fd56cf9598b4bf016634c768dca128a83a5d7", "html_url": "https://github.com/rust-lang/rust/commit/138fd56cf9598b4bf016634c768dca128a83a5d7"}, {"sha": "41875c82c7858735b1d028b04156c328715ca454", "url": "https://api.github.com/repos/rust-lang/rust/commits/41875c82c7858735b1d028b04156c328715ca454", "html_url": "https://github.com/rust-lang/rust/commit/41875c82c7858735b1d028b04156c328715ca454"}], "stats": {"total": 419, "additions": 216, "deletions": 203}, "files": [{"sha": "594d42c936659e133b8f8ca1ad7ceed43c6e96f3", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -11,9 +11,9 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{OptLevel, SanitizerSet};\n+use rustc_session::config::OptLevel;\n use rustc_session::Session;\n-use rustc_target::spec::StackProbeType;\n+use rustc_target::spec::{SanitizerSet, StackProbeType};\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;"}, {"sha": "b3551177323aaad5f9c070706d1d3c13da8c5df8", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -23,11 +23,11 @@ use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{self, Lto, OutputType, Passes, SanitizerSet, SwitchWithOptPath};\n+use rustc_session::config::{self, Lto, OutputType, Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n-use rustc_target::spec::{CodeModel, RelocModel, SplitDebuginfo};\n+use rustc_target::spec::{CodeModel, RelocModel, SanitizerSet, SplitDebuginfo};\n use tracing::debug;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};"}, {"sha": "6f6c649bb0b18a1cbf7b6d4e4f3effba8ecc9825", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -32,8 +32,9 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{DebugInfo, SanitizerSet};\n+use rustc_session::config::DebugInfo;\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::SanitizerSet;\n \n use std::ffi::CString;\n use std::time::Instant;"}, {"sha": "217b8f43229a621c94ab271cb27050bd7b9739ee", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n-use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SanitizerSet};\n+use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n@@ -16,7 +16,7 @@ use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -922,28 +922,20 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n         .map(|channel| format!(\"-{}\", channel))\n         .unwrap_or_default();\n \n-    match sess.opts.target_triple.triple() {\n-        \"aarch64-apple-darwin\" | \"x86_64-apple-darwin\" => {\n-            // On Apple platforms, the sanitizer is always built as a dylib, and\n-            // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n-            // rpath to the library as well (the rpath should be absolute, see\n-            // PR #41352 for details).\n-            let filename = format!(\"rustc{}_rt.{}\", channel, name);\n-            let path = find_sanitizer_runtime(&sess, &filename);\n-            let rpath = path.to_str().expect(\"non-utf8 component in path\");\n-            linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n-            linker.link_dylib(Symbol::intern(&filename));\n-        }\n-        \"aarch64-fuchsia\"\n-        | \"aarch64-unknown-linux-gnu\"\n-        | \"x86_64-fuchsia\"\n-        | \"x86_64-unknown-freebsd\"\n-        | \"x86_64-unknown-linux-gnu\" => {\n-            let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n-            let path = find_sanitizer_runtime(&sess, &filename).join(&filename);\n-            linker.link_whole_rlib(&path);\n-        }\n-        _ => {}\n+    if sess.target.is_like_osx {\n+        // On Apple platforms, the sanitizer is always built as a dylib, and\n+        // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n+        // rpath to the library as well (the rpath should be absolute, see\n+        // PR #41352 for details).\n+        let filename = format!(\"rustc{}_rt.{}\", channel, name);\n+        let path = find_sanitizer_runtime(&sess, &filename);\n+        let rpath = path.to_str().expect(\"non-utf8 component in path\");\n+        linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n+        linker.link_dylib(Symbol::intern(&filename));\n+    } else {\n+        let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n+        let path = find_sanitizer_runtime(&sess, &filename).join(&filename);\n+        linker.link_whole_rlib(&path);\n     }\n }\n "}, {"sha": "b8f277c8ff5e3e2de517daa74ddccc3b05ebfcfe", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -15,7 +15,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n-use rustc_session::config::{CrateType, SanitizerSet};\n+use rustc_session::config::CrateType;\n+use rustc_target::spec::SanitizerSet;\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types())"}, {"sha": "b03242363735b1cb2cdd18b2868dc0043374aefb", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -27,12 +27,12 @@ use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n-use rustc_session::config::{Passes, SanitizerSet, SwitchWithOptPath};\n+use rustc_session::config::{Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n-use rustc_target::spec::{MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{MergeFunctions, PanicStrategy, SanitizerSet};\n \n use std::any::Any;\n use std::fs;"}, {"sha": "2270b2b33e2bab2476bb9cb0399b9bacb9487249", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -8,7 +8,7 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion, WasiExecModel,\n+    Externs, OutputType, OutputTypes, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -18,7 +18,7 @@ use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n+use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::num::NonZeroUsize;"}, {"sha": "bfca6a5f574c4c6dad168db00fe86f7f3d02223d", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::mono::Linkage;\n use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n-use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::SanitizerSet;\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct CodegenFnAttrs {"}, {"sha": "e39b9b9b33eeaed818644b0a51a0c4ceba8ad29b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -10,7 +10,6 @@ use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple};\n@@ -36,66 +35,6 @@ use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n \n-bitflags! {\n-    #[derive(Default, Encodable, Decodable)]\n-    pub struct SanitizerSet: u8 {\n-        const ADDRESS = 1 << 0;\n-        const LEAK    = 1 << 1;\n-        const MEMORY  = 1 << 2;\n-        const THREAD  = 1 << 3;\n-        const HWADDRESS  = 1 << 4;\n-    }\n-}\n-\n-/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n-impl fmt::Display for SanitizerSet {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut first = true;\n-        for s in *self {\n-            let name = match s {\n-                SanitizerSet::ADDRESS => \"address\",\n-                SanitizerSet::LEAK => \"leak\",\n-                SanitizerSet::MEMORY => \"memory\",\n-                SanitizerSet::THREAD => \"thread\",\n-                SanitizerSet::HWADDRESS => \"hwaddress\",\n-                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n-            };\n-            if !first {\n-                f.write_str(\",\")?;\n-            }\n-            f.write_str(name)?;\n-            first = false;\n-        }\n-        Ok(())\n-    }\n-}\n-\n-impl IntoIterator for SanitizerSet {\n-    type Item = SanitizerSet;\n-    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        [\n-            SanitizerSet::ADDRESS,\n-            SanitizerSet::LEAK,\n-            SanitizerSet::MEMORY,\n-            SanitizerSet::THREAD,\n-            SanitizerSet::HWADDRESS,\n-        ]\n-        .iter()\n-        .copied()\n-        .filter(|&s| self.contains(s))\n-        .collect::<Vec<_>>()\n-        .into_iter()\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for SanitizerSet {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        self.bits().hash_stable(ctx, hasher);\n-    }\n-}\n-\n /// The different settings that the `-Z strip` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum Strip {\n@@ -2308,16 +2247,16 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LtoCli, OptLevel, OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        LtoCli, OptLevel, OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath,\n+        SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n     use crate::utils::NativeLibKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n-    use rustc_target::spec::{RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n+    use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;"}, {"sha": "7971f7ef9efe2e386a1fb8d4acaa2d0f0e41597f", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -3,8 +3,6 @@\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n-#[macro_use]\n-extern crate bitflags;\n #[macro_use]\n extern crate rustc_macros;\n "}, {"sha": "623062dd569a18bfbd4cd3f3c6e5b4ae756c9308", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -5,7 +5,7 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLibKind;\n \n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n \n use rustc_feature::UnstableFeatures;"}, {"sha": "3488efacd1126e99036f0bf6bcfb86dbf1ff0a9e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 18, "deletions": 55, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, SanitizerSet, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, PrintRequest, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint::{self, LintId};\n use crate::parse::ParseSess;\n@@ -28,7 +28,7 @@ use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, S\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n-use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple, TlsModel};\n+use rustc_target::spec::{SanitizerSet, SplitDebuginfo, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -1517,59 +1517,22 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-fuchsia\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-fuchsia\",\n-        \"x86_64-unknown-freebsd\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const MSAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-freebsd\", \"x86_64-unknown-linux-gnu\"];\n-    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n-        \"aarch64-apple-darwin\",\n-        \"aarch64-unknown-linux-gnu\",\n-        \"x86_64-apple-darwin\",\n-        \"x86_64-unknown-freebsd\",\n-        \"x86_64-unknown-linux-gnu\",\n-    ];\n-    const HWASAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n-\n-    // Sanitizers can only be used on some tested platforms.\n-    for s in sess.opts.debugging_opts.sanitizer {\n-        let supported_targets = match s {\n-            SanitizerSet::ADDRESS => ASAN_SUPPORTED_TARGETS,\n-            SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n-            SanitizerSet::HWADDRESS => HWASAN_SUPPORTED_TARGETS,\n-            _ => panic!(\"unrecognized sanitizer {}\", s),\n-        };\n-        if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n-            sess.err(&format!(\n-                \"`-Zsanitizer={}` only works with targets: {}\",\n-                s,\n-                supported_targets.join(\", \")\n-            ));\n-        }\n-        let conflicting = sess.opts.debugging_opts.sanitizer - s;\n-        if !conflicting.is_empty() {\n-            sess.err(&format!(\n-                \"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\",\n-                s, conflicting,\n-            ));\n-            // Don't report additional errors.\n-            break;\n-        }\n+    // Sanitizers can only be used on platforms that we know have working sanitizer codegen.\n+    let supported_sanitizers = sess.target.options.supported_sanitizers;\n+    let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;\n+    match unsupported_sanitizers.into_iter().count() {\n+        0 => {}\n+        1 => sess\n+            .err(&format!(\"{} sanitizer is not supported for this target\", unsupported_sanitizers)),\n+        _ => sess.err(&format!(\n+            \"{} sanitizers are not supported for this target\",\n+            unsupported_sanitizers\n+        )),\n+    }\n+    // Cannot mix and match sanitizers.\n+    let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n+    if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n+        sess.err(&format!(\"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\", first, second));\n     }\n }\n "}, {"sha": "feadd4e891cec706e0123c5407ddf89484d117ac", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,11 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"apple-a12\".to_string();\n     base.max_atomic_width = Some(128);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "c9cb21f1eb1e9bf891250da0ce39ac50b523c7bc", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,8 +1,9 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n \n     Target {\n         llvm_target: \"aarch64-fuchsia\".to_string(),"}, {"sha": "eaf3a2dbcf8c2cbc5d02baf99e2bc5af9ddad28a", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements.\n@@ -9,6 +9,7 @@ pub fn target() -> Target {\n     // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();\n+    base.supported_sanitizers = SanitizerSet::HWADDRESS;\n     Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         pointer_width: 64,"}, {"sha": "a07cd7db8897d190347fdb41c487cb3d27224ead", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,8 +1,13 @@\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supported_sanitizers = SanitizerSet::ADDRESS\n+        | SanitizerSet::LEAK\n+        | SanitizerSet::MEMORY\n+        | SanitizerSet::THREAD\n+        | SanitizerSet::HWADDRESS;\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),"}, {"sha": "89052ef390b8a023aafa06e87b819a8394c25049", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 140, "deletions": 32, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -37,6 +37,7 @@\n use crate::abi::Endian;\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n@@ -511,38 +512,6 @@ impl fmt::Display for SplitDebuginfo {\n     }\n }\n \n-macro_rules! supported_targets {\n-    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n-        $(mod $module;)+\n-\n-        /// List of supported targets\n-        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n-\n-        fn load_builtin(target: &str) -> Option<Target> {\n-            let mut t = match target {\n-                $( $($triple)|+ => $module::target(), )+\n-                _ => return None,\n-            };\n-            t.is_builtin = true;\n-            debug!(\"got builtin target: {:?}\", t);\n-            Some(t)\n-        }\n-\n-        #[cfg(test)]\n-        mod tests {\n-            mod tests_impl;\n-\n-            // Cannot put this into a separate file without duplication, make an exception.\n-            $(\n-                #[test] // `#[test]`\n-                fn $module() {\n-                    tests_impl::test_target(super::$module::target());\n-                }\n-            )+\n-        }\n-    };\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum StackProbeType {\n     /// Don't emit any stack probes.\n@@ -620,6 +589,117 @@ impl ToJson for StackProbeType {\n     }\n }\n \n+bitflags::bitflags! {\n+    #[derive(Default, Encodable, Decodable)]\n+    pub struct SanitizerSet: u8 {\n+        const ADDRESS = 1 << 0;\n+        const LEAK    = 1 << 1;\n+        const MEMORY  = 1 << 2;\n+        const THREAD  = 1 << 3;\n+        const HWADDRESS = 1 << 4;\n+    }\n+}\n+\n+impl SanitizerSet {\n+    /// Return sanitizer's name\n+    ///\n+    /// Returns none if the flags is a set of sanitizers numbering not exactly one.\n+    fn as_str(self) -> Option<&'static str> {\n+        Some(match self {\n+            SanitizerSet::ADDRESS => \"address\",\n+            SanitizerSet::LEAK => \"leak\",\n+            SanitizerSet::MEMORY => \"memory\",\n+            SanitizerSet::THREAD => \"thread\",\n+            SanitizerSet::HWADDRESS => \"hwaddress\",\n+            _ => return None,\n+        })\n+    }\n+}\n+\n+/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n+impl fmt::Display for SanitizerSet {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut first = true;\n+        for s in *self {\n+            let name = s.as_str().unwrap_or_else(|| panic!(\"unrecognized sanitizer {:?}\", s));\n+            if !first {\n+                f.write_str(\", \")?;\n+            }\n+            f.write_str(name)?;\n+            first = false;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl IntoIterator for SanitizerSet {\n+    type Item = SanitizerSet;\n+    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        [\n+            SanitizerSet::ADDRESS,\n+            SanitizerSet::LEAK,\n+            SanitizerSet::MEMORY,\n+            SanitizerSet::THREAD,\n+            SanitizerSet::HWADDRESS,\n+        ]\n+        .iter()\n+        .copied()\n+        .filter(|&s| self.contains(s))\n+        .collect::<Vec<_>>()\n+        .into_iter()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SanitizerSet {\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.bits().hash_stable(ctx, hasher);\n+    }\n+}\n+\n+impl ToJson for SanitizerSet {\n+    fn to_json(&self) -> Json {\n+        self.into_iter()\n+            .map(|v| Some(v.as_str()?.to_json()))\n+            .collect::<Option<Vec<_>>>()\n+            .unwrap_or(Vec::new())\n+            .to_json()\n+    }\n+}\n+\n+macro_rules! supported_targets {\n+    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n+        $(mod $module;)+\n+\n+        /// List of supported targets\n+        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+\n+        fn load_builtin(target: &str) -> Option<Target> {\n+            let mut t = match target {\n+                $( $($triple)|+ => $module::target(), )+\n+                _ => return None,\n+            };\n+            t.is_builtin = true;\n+            debug!(\"got builtin target: {:?}\", t);\n+            Some(t)\n+        }\n+\n+        #[cfg(test)]\n+        mod tests {\n+            mod tests_impl;\n+\n+            // Cannot put this into a separate file without duplication, make an exception.\n+            $(\n+                #[test] // `#[test]`\n+                fn $module() {\n+                    tests_impl::test_target(super::$module::target());\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n supported_targets! {\n     (\"x86_64-unknown-linux-gnu\", x86_64_unknown_linux_gnu),\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),\n@@ -1164,6 +1244,13 @@ pub struct TargetOptions {\n     /// How to handle split debug information, if at all. Specifying `None` has\n     /// target-specific meaning.\n     pub split_debuginfo: SplitDebuginfo,\n+\n+    /// The sanitizers supported by this target\n+    ///\n+    /// Note that the support here is at a codegen level. If the machine code with sanitizer\n+    /// enabled can generated on this target, but the necessary supporting libraries are not\n+    /// distributed with the target, the sanitizer should still appear in this list for the target.\n+    pub supported_sanitizers: SanitizerSet,\n }\n \n impl Default for TargetOptions {\n@@ -1265,6 +1352,7 @@ impl Default for TargetOptions {\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n             split_debuginfo: SplitDebuginfo::Off,\n+            supported_sanitizers: SanitizerSet::empty(),\n         }\n     }\n }\n@@ -1551,6 +1639,24 @@ impl Target {\n                     )),\n                 }).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, SanitizerSet) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_array()).and_then(|a| {\n+                    for s in a {\n+                        base.$key_name |= match s.as_string() {\n+                            Some(\"address\") => SanitizerSet::ADDRESS,\n+                            Some(\"leak\") => SanitizerSet::LEAK,\n+                            Some(\"memory\") => SanitizerSet::MEMORY,\n+                            Some(\"thread\") => SanitizerSet::THREAD,\n+                            Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n+                            Some(s) => return Some(Err(format!(\"unknown sanitizer {}\", s))),\n+                            _ => return Some(Err(format!(\"not a string: {:?}\", s))),\n+                        };\n+                    }\n+                    Some(Ok(()))\n+                }).unwrap_or(Ok(()))\n+            } );\n+\n             ($key_name:ident, crt_objects_fallback) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1729,6 +1835,7 @@ impl Target {\n         key!(eh_frame_header, bool);\n         key!(has_thumb_interworking, bool);\n         key!(split_debuginfo, SplitDebuginfo)?;\n+        key!(supported_sanitizers, SanitizerSet)?;\n \n         // NB: The old name is deprecated, but support for it is retained for\n         // compatibility.\n@@ -1966,6 +2073,7 @@ impl ToJson for Target {\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n         target_option_val!(split_debuginfo);\n+        target_option_val!(supported_sanitizers);\n \n         if default.unsupported_abis != self.unsupported_abis {\n             d.insert("}, {"sha": "c82359223da609d7ab9560e3fe92e5f3429021cf", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n@@ -11,6 +11,7 @@ pub fn target() -> Target {\n     );\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "99acc7c207bc280c960fd21f16f504a2799436c2", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,10 +1,11 @@\n-use crate::spec::{StackProbeType, Target};\n+use crate::spec::{SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS;\n \n     Target {\n         llvm_target: \"x86_64-fuchsia\".to_string(),"}, {"sha": "ca3556fc48e502d348693e2e59d40c5398898fd4", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,11 +1,12 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),"}, {"sha": "9569e98ed59a87c96e38f665e39fbefe00d2d9c8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,11 +1,13 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "05ba8811cc2dfd1ab26d67dcda8fb325e3821ec3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -43,12 +43,11 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n-use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::abi;\n+use rustc_target::spec::{abi, SanitizerSet};\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n use std::iter;\n "}, {"sha": "3fb749815f7c3ba4af3348cd8480887cefb47c14", "filename": "src/test/ui/sanitize/unsupported-target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Z sanitizer=leak --target i686-unknown-linux-gnu\n-// error-pattern: error: `-Zsanitizer=leak` only works with targets:\n-\n+// error-pattern: error: leak sanitizer is not supported for this target\n #![feature(no_core)]\n #![no_core]\n #![no_main]"}, {"sha": "9bb8405020d730c4f320a0dd59173bc6c9a160e5", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b6c9b638e0148409b6568b61f763e87dc8fd3bf/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=9b6c9b638e0148409b6568b61f763e87dc8fd3bf", "patch": "@@ -1,4 +1,4 @@\n-error: `-Zsanitizer=leak` only works with targets: aarch64-apple-darwin, aarch64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-unknown-linux-gnu\n+error: leak sanitizer is not supported for this target\n \n error: aborting due to previous error\n "}]}