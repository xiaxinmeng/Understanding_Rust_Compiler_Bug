{"sha": "f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMTUwMmY0YmIyMjI2MmNkMWQwNWU1OWFhN2FmNDg3OWFlMWIyZWQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-22T18:51:58Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-22T18:51:58Z"}, "message": "Only run (late) internal lints, when they are warn/deny/forbid", "tree": {"sha": "7c641fb96aca7f24315eaba2d92e213b08fe3877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c641fb96aca7f24315eaba2d92e213b08fe3877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6gkk4ACgkQLO/Nsn7Q\nvnlzixAAsEj7y4xETVRSs794REwlicPNFVKgJnEvjkk+hUh2NL/zEps3/fbj3PpR\npaHVg5wExpXGCRJUk4hXT+N4/rjlSEWz+0aPLUBsg0PulzAEMcFJqU+ggISMFDqM\ngkFd6mH3ZopLGQeMS0A24zZWw9fPGlYuX+X1Jr6Z0tBoN8Wj2CT2x7o8RF7jjjb7\nIOWhlcYqbi6ik64vgM2WPp8kj0cdPmlM4Gayd8wGRFdRtAb7tXSdRVZ1hb9ulDm5\nFxnmqFRXSqp4fC+V7GeMl8wBU/e3kHyBkGE2SDKpbsLWwRgQzcE+B9PCANqQfWJf\nHz3fCUdifqxs4cgAzxAurfSfyIjxbsRvick7DHHR7HB1XT4aYuYtYAHznSWUV+fv\nFREGod4eV85NQrS9uHbylo01K7F8Odn351Z/vF8FqhZES+xWcqDG9rHaxSvu23o2\nUoeJSUUH5kRBcyb5rzYNdC1Kp/0Yx7N9ceSyFLr1LoGRM8l5Uz35M6onBMYUSVSp\neJgv0H0z+SovEAb18w7lyclrYseLZ9PY75WsssvUWa/qxngPkxXHz8EKJXaMwvwB\nAJrbz4N9lIstXqoE101+yoaEvJzrBXql6BgLeyEcSvDV/n5qz5UnUbd5wVQ1g3wi\nrTwvAZb7ulkMUVggBBVWc4LfH0oHOTEFTtPPcW00QTuY2niYszE=\n=ZJpo\n-----END PGP SIGNATURE-----", "payload": "tree 7c641fb96aca7f24315eaba2d92e213b08fe3877\nparent 14f596cb7425e2a12a6e034880683e976179d1cd\nauthor flip1995 <hello@philkrones.com> 1587581518 +0200\ncommitter flip1995 <hello@philkrones.com> 1587581518 +0200\n\nOnly run (late) internal lints, when they are warn/deny/forbid\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "html_url": "https://github.com/rust-lang/rust/commit/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f596cb7425e2a12a6e034880683e976179d1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f596cb7425e2a12a6e034880683e976179d1cd", "html_url": "https://github.com/rust-lang/rust/commit/14f596cb7425e2a12a6e034880683e976179d1cd"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "5bf9acdc5f7ce21e25144e2aa0d3b6cc3055ff58", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::SpanlessEq;\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, snippet, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, walk_ptrs_ty,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, run_lints, snippet, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n@@ -10,7 +10,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -252,6 +253,10 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id) {\n+            return;\n+        }\n+\n         if let hir::ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 let expr = &cx.tcx.hir().body(body_id).value;\n@@ -306,6 +311,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate<'_>) {\n+        if !run_lints(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         for (lint_name, &lint_span) in &self.declared_lints {\n             // When using the `declare_tool_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\".\n@@ -355,15 +364,12 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        walk_expr(self, expr);\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::All(self.cx.tcx.hir())\n     }\n@@ -391,6 +397,10 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if !run_lints(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n             let fn_name = path.ident;\n@@ -416,6 +426,10 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n+            return;\n+        }\n+\n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n         let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n@@ -462,6 +476,10 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::Call(ref func, ref and_then_args) = expr.kind;\n             if let ExprKind::Path(ref path) = func.kind;"}]}