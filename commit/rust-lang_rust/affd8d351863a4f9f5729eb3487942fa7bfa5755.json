{"sha": "affd8d351863a4f9f5729eb3487942fa7bfa5755", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmQ4ZDM1MTg2M2E0ZjlmNTcyOWViMzQ4Nzk0MmZhN2JmYTU3NTU=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-22T08:33:56Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-22T08:33:56Z"}, "message": "Move reference editing logic into own function to make error handling more ease in \"Convert to named struct\" assist", "tree": {"sha": "6e67f8cc32e05e50fe5772116abe5f89848898a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e67f8cc32e05e50fe5772116abe5f89848898a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affd8d351863a4f9f5729eb3487942fa7bfa5755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affd8d351863a4f9f5729eb3487942fa7bfa5755", "html_url": "https://github.com/rust-lang/rust/commit/affd8d351863a4f9f5729eb3487942fa7bfa5755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affd8d351863a4f9f5729eb3487942fa7bfa5755/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322cd1fa7fb870f44860bc42ef3b894e5a42bb70", "url": "https://api.github.com/repos/rust-lang/rust/commits/322cd1fa7fb870f44860bc42ef3b894e5a42bb70", "html_url": "https://github.com/rust-lang/rust/commit/322cd1fa7fb870f44860bc42ef3b894e5a42bb70"}], "stats": {"total": 129, "additions": 61, "deletions": 68}, "files": [{"sha": "994e1a01a071275970e772b10aeea854930c206a", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 61, "deletions": 68, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/affd8d351863a4f9f5729eb3487942fa7bfa5755/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affd8d351863a4f9f5729eb3487942fa7bfa5755/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=affd8d351863a4f9f5729eb3487942fa7bfa5755", "patch": "@@ -1,8 +1,7 @@\n-use hir::{Adt, ModuleDef, Struct};\n use ide_db::defs::{Definition, NameRefClass};\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, VisibilityOwner},\n-    match_ast,\n+    match_ast, SyntaxNode,\n };\n \n use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n@@ -104,80 +103,74 @@ fn edit_struct_def(\n fn edit_struct_references(\n     ctx: &AssistContext,\n     edit: &mut AssistBuilder,\n-    strukt: Struct,\n+    strukt: hir::Struct,\n     names: &[ast::Name],\n ) {\n-    let strukt_def = Definition::ModuleDef(ModuleDef::Adt(Adt::Struct(strukt)));\n+    let strukt_def = Definition::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Struct(strukt)));\n     let usages = strukt_def.usages(&ctx.sema).include_self_kw_refs(true).all();\n \n+    let edit_node = |edit: &mut AssistBuilder, node: SyntaxNode| -> Option<()> {\n+        match_ast! {\n+            match node {\n+                ast::TupleStructPat(tuple_struct_pat) => {\n+                    edit.replace(\n+                        tuple_struct_pat.syntax().text_range(),\n+                        ast::make::record_pat_with_fields(\n+                            tuple_struct_pat.path()?,\n+                            ast::make::record_pat_field_list(tuple_struct_pat.fields().zip(names).map(\n+                                |(pat, name)| {\n+                                    ast::make::record_pat_field(\n+                                        ast::make::name_ref(&name.to_string()),\n+                                        pat,\n+                                    )\n+                                },\n+                            )),\n+                        )\n+                        .to_string(),\n+                    );\n+                },\n+                // for tuple struct creations like Foo(42)\n+                ast::CallExpr(call_expr) => {\n+                    let path = call_expr.syntax().descendants().find_map(ast::PathExpr::cast).and_then(|expr| expr.path())?;\n+\n+                    // this also includes method calls like Foo::new(42), we should skip them\n+                    if let Some(name_ref) = path.segment().and_then(|s| s.name_ref()) {\n+                        match NameRefClass::classify(&ctx.sema, &name_ref) {\n+                            Some(NameRefClass::Definition(Definition::SelfType(_))) => {},\n+                            Some(NameRefClass::Definition(def)) if def == strukt_def => {},\n+                            _ => return None,\n+                        };\n+                    }\n+\n+                    let arg_list = call_expr.syntax().descendants().find_map(ast::ArgList::cast)?;\n+\n+                    edit.replace(\n+                        call_expr.syntax().text_range(),\n+                        ast::make::record_expr(\n+                            path,\n+                            ast::make::record_expr_field_list(arg_list.args().zip(names).map(\n+                                |(expr, name)| {\n+                                    ast::make::record_expr_field(\n+                                        ast::make::name_ref(&name.to_string()),\n+                                        Some(expr),\n+                                    )\n+                                },\n+                            )),\n+                        )\n+                        .to_string(),\n+                    );\n+                },\n+                _ => ()\n+            }\n+        }\n+        Some(())\n+    };\n+\n     for (file_id, refs) in usages {\n         edit.edit_file(file_id);\n         for r in refs {\n             for node in r.name.syntax().ancestors() {\n-                match_ast! {\n-                    match node {\n-                        ast::TupleStructPat(tuple_struct_pat) => {\n-                            let path = match tuple_struct_pat.path() {\n-                                Some(it) => it,\n-                                None => continue,\n-                            };\n-\n-                            edit.replace(\n-                                tuple_struct_pat.syntax().text_range(),\n-                                ast::make::record_pat_with_fields(\n-                                    path,\n-                                    ast::make::record_pat_field_list(tuple_struct_pat.fields().zip(names).map(\n-                                        |(pat, name)| {\n-                                            ast::make::record_pat_field(\n-                                                ast::make::name_ref(&name.to_string()),\n-                                                pat,\n-                                            )\n-                                        },\n-                                    )),\n-                                )\n-                                .to_string(),\n-                            );\n-                        },\n-                        // for tuple struct creations like Foo(42)\n-                        ast::CallExpr(call_expr) => {\n-                            let path = match call_expr.syntax().descendants().find_map(ast::PathExpr::cast).map(|expr| expr.path()) {\n-                                Some(Some(it)) => it,\n-                                _ => continue,\n-                            };\n-\n-                            // this also includes method calls like Foo::new(42), we should skip them\n-                            if let Some(Some(name_ref)) = path.segment().map(|s| s.name_ref()) {\n-                                match NameRefClass::classify(&ctx.sema, &name_ref) {\n-                                    Some(NameRefClass::Definition(Definition::SelfType(_))) => {},\n-                                    Some(NameRefClass::Definition(def)) if def == strukt_def => {},\n-                                    _ => continue,\n-                                };\n-                            }\n-\n-                            let arg_list = match call_expr.syntax().descendants().find_map(ast::ArgList::cast) {\n-                                Some(it) => it,\n-                                None => continue,\n-                            };\n-\n-                            edit.replace(\n-                                call_expr.syntax().text_range(),\n-                                ast::make::record_expr(\n-                                    path,\n-                                    ast::make::record_expr_field_list(arg_list.args().zip(names).map(\n-                                        |(expr, name)| {\n-                                            ast::make::record_expr_field(\n-                                                ast::make::name_ref(&name.to_string()),\n-                                                Some(expr),\n-                                            )\n-                                        },\n-                                    )),\n-                                )\n-                                .to_string(),\n-                            );\n-                        },\n-                        _ => ()\n-                    }\n-                }\n+                edit_node(edit, node);\n             }\n         }\n     }"}]}