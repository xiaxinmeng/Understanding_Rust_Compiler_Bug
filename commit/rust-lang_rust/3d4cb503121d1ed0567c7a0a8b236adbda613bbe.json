{"sha": "3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNGNiNTAzMTIxZDFlZDA1NjdjN2EwYThiMjM2YWRiZGE2MTNiYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T06:06:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T06:06:17Z"}, "message": "Rollup merge of #64243 - petrochenkov:cmdattr, r=alexcrichton\n\nMove injection of attributes from command line to `libsyntax_ext`\n\nJust a tiny bit of code generation that wasn't moved into `libsyntax_ext` in https://github.com/rust-lang/rust/pull/62771.", "tree": {"sha": "e5eda3465de3f5ce96734d326820e6a274bb11c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5eda3465de3f5ce96734d326820e6a274bb11c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc0jZCRBK7hj4Ov3rIwAAdHIIAF0dDBaPn4gGNkZzcHsplgBl\ne8S7p8jcDxzy3o/7RDIQzJggac4k4v3UbIgqi8+3q44yaf/os8zlEBVmR14xg7r0\nQtM30iSkRevWBOLPPakBCQDBjeH3ntgQx/ReNU+Y/GbTwRU5V+XD0itAE3wJixGJ\nOMfPeba9IxZJiQ08UiB2OOVG728MGnxQPEliEROK67V9EnQPTp2L7JUlf34VTlTo\n+bj+otktwaRHhTH1l5vOzTmQ1bZnwom8XCVP9RaR5vJ38YR/1LQ7qR+/zI7rUnRk\nx1zfauln/tig8WtSrdkOg/zEO3Y1VbD6cW2axcgpU8r/UJVlAMWZoqvzDIzcai8=\n=l2mB\n-----END PGP SIGNATURE-----\n", "payload": "tree e5eda3465de3f5ce96734d326820e6a274bb11c4\nparent 69121f5bad71e123d5fd4ab1c9273a7ca0be0b8c\nparent 3dde650efa3a8910cccaef38e89fe74272d67c91\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567836377 +0200\ncommitter GitHub <noreply@github.com> 1567836377 +0200\n\nRollup merge of #64243 - petrochenkov:cmdattr, r=alexcrichton\n\nMove injection of attributes from command line to `libsyntax_ext`\n\nJust a tiny bit of code generation that wasn't moved into `libsyntax_ext` in https://github.com/rust-lang/rust/pull/62771.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "html_url": "https://github.com/rust-lang/rust/commit/3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69121f5bad71e123d5fd4ab1c9273a7ca0be0b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69121f5bad71e123d5fd4ab1c9273a7ca0be0b8c", "html_url": "https://github.com/rust-lang/rust/commit/69121f5bad71e123d5fd4ab1c9273a7ca0be0b8c"}, {"sha": "3dde650efa3a8910cccaef38e89fe74272d67c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dde650efa3a8910cccaef38e89fe74272d67c91", "html_url": "https://github.com/rust-lang/rust/commit/3dde650efa3a8910cccaef38e89fe74272d67c91"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "7fcad4d79c204c83f9177b042b191faed9251664", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "patch": "@@ -230,7 +230,9 @@ pub fn register_plugins<'a>(\n     crate_name: &str,\n ) -> Result<(ast::Crate, PluginInfo)> {\n     krate = time(sess, \"attributes injection\", || {\n-        syntax::attr::inject(krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr)\n+        syntax_ext::cmdline_attrs::inject(\n+            krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr\n+        )\n     });\n \n     let (krate, features) = syntax::config::features("}, {"sha": "69de3150354e7fe15537e19f4dbfd4234d6a15d7", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 13, "deletions": 46, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "patch": "@@ -16,7 +16,7 @@ use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned, DUMMY_SP};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::parse::parser::Parser;\n-use crate::parse::{self, ParseSess, PResult};\n+use crate::parse::{ParseSess, PResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::symbol::{sym, Symbol};\n@@ -25,7 +25,7 @@ use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n use crate::GLOBALS;\n \n use log::debug;\n-use syntax_pos::{FileName, Span};\n+use syntax_pos::Span;\n \n use std::iter;\n use std::ops::DerefMut;\n@@ -381,28 +381,25 @@ crate fn mk_attr_id() -> AttrId {\n     AttrId(id)\n }\n \n-/// Returns an inner attribute with the given value and span.\n-pub fn mk_attr_inner(item: MetaItem) -> Attribute {\n+pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n     Attribute {\n         id: mk_attr_id(),\n-        style: ast::AttrStyle::Inner,\n-        path: item.path,\n-        tokens: item.node.tokens(item.span),\n+        style,\n+        path,\n+        tokens,\n         is_sugared_doc: false,\n-        span: item.span,\n+        span,\n     }\n }\n \n+/// Returns an inner attribute with the given value and span.\n+pub fn mk_attr_inner(item: MetaItem) -> Attribute {\n+    mk_attr(AttrStyle::Inner, item.path, item.node.tokens(item.span), item.span)\n+}\n+\n /// Returns an outer attribute with the given value and span.\n pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n-    Attribute {\n-        id: mk_attr_id(),\n-        style: ast::AttrStyle::Outer,\n-        path: item.path,\n-        tokens: item.node.tokens(item.span),\n-        is_sugared_doc: false,\n-        span: item.span,\n-    }\n+    mk_attr(AttrStyle::Outer, item.path, item.node.tokens(item.span), item.span)\n }\n \n pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n@@ -716,33 +713,3 @@ derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant, ast::Param\n }\n-\n-pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n-    for raw_attr in attrs {\n-        let mut parser = parse::new_parser_from_source_str(\n-            parse_sess,\n-            FileName::cli_crate_attr_source_code(&raw_attr),\n-            raw_attr.clone(),\n-        );\n-\n-        let start_span = parser.token.span;\n-        let (path, tokens) = panictry!(parser.parse_meta_item_unrestricted());\n-        let end_span = parser.token.span;\n-        if parser.token != token::Eof {\n-            parse_sess.span_diagnostic\n-                .span_err(start_span.to(end_span), \"invalid crate attribute\");\n-            continue;\n-        }\n-\n-        krate.attrs.push(Attribute {\n-            id: mk_attr_id(),\n-            style: AttrStyle::Inner,\n-            path,\n-            tokens,\n-            is_sugared_doc: false,\n-            span: start_span.to(end_span),\n-        });\n-    }\n-\n-    krate\n-}"}, {"sha": "d9c4baad49ded7a98a038f75a4ccbeb66549abbc", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "patch": "@@ -176,7 +176,7 @@ impl<'a> Parser<'a> {\n     /// PATH\n     /// PATH `=` TOKEN_TREE\n     /// The delimiters or `=` are still put into the resulting token stream.\n-    crate fn parse_meta_item_unrestricted(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n+    pub fn parse_meta_item_unrestricted(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n         let meta = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n                 Nonterminal::NtMeta(ref meta) => Some(meta.clone()),"}, {"sha": "bb8e3df3db9215fcf33b57397070b190c2b5b3dd", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "patch": "@@ -0,0 +1,30 @@\n+//! Attributes injected into the crate root from command line using `-Z crate-attr`.\n+\n+use syntax::ast::{self, AttrStyle};\n+use syntax::attr::mk_attr;\n+use syntax::panictry;\n+use syntax::parse::{self, token, ParseSess};\n+use syntax_pos::FileName;\n+\n+pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n+    for raw_attr in attrs {\n+        let mut parser = parse::new_parser_from_source_str(\n+            parse_sess,\n+            FileName::cli_crate_attr_source_code(&raw_attr),\n+            raw_attr.clone(),\n+        );\n+\n+        let start_span = parser.token.span;\n+        let (path, tokens) = panictry!(parser.parse_meta_item_unrestricted());\n+        let end_span = parser.token.span;\n+        if parser.token != token::Eof {\n+            parse_sess.span_diagnostic\n+                .span_err(start_span.to(end_span), \"invalid crate attribute\");\n+            continue;\n+        }\n+\n+        krate.attrs.push(mk_attr(AttrStyle::Inner, path, tokens, start_span.to(end_span)));\n+    }\n+\n+    krate\n+}"}, {"sha": "5c0a63ebbe7cb0d29ddac8436638f2e6ff5747c9", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4cb503121d1ed0567c7a0a8b236adbda613bbe/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=3d4cb503121d1ed0567c7a0a8b236adbda613bbe", "patch": "@@ -40,6 +40,7 @@ mod source_util;\n mod test;\n mod trace_macros;\n \n+pub mod cmdline_attrs;\n pub mod plugin_macro_defs;\n pub mod proc_macro_harness;\n pub mod standard_library_imports;"}]}