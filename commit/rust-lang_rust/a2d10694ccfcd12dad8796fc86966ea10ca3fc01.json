{"sha": "a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZDEwNjk0Y2NmY2QxMmRhZDg3OTZmYzg2OTY2ZWExMGNhM2ZjMDE=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:31:25Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:32:05Z"}, "message": "Consistent, hopefully robust, shutdown/cancelation story for cargo check subprocess", "tree": {"sha": "9f2f2f22f0cce670cb92e49758837ccc0a5ac956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f2f2f22f0cce670cb92e49758837ccc0a5ac956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "html_url": "https://github.com/rust-lang/rust/commit/a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d10694ccfcd12dad8796fc86966ea10ca3fc01/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "428a6ff5b8bad2c80a3522599195bf2a393f744e", "url": "https://api.github.com/repos/rust-lang/rust/commits/428a6ff5b8bad2c80a3522599195bf2a393f744e", "html_url": "https://github.com/rust-lang/rust/commit/428a6ff5b8bad2c80a3522599195bf2a393f744e"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "70afd7f8ac2a19037588897189094c80fb8b8627", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a2d10694ccfcd12dad8796fc86966ea10ca3fc01/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d10694ccfcd12dad8796fc86966ea10ca3fc01/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "patch": "@@ -2,7 +2,7 @@\n //! another compatible command (f.x. clippy) in a background thread and provide\n //! LSP diagnostics based on the output of the command.\n use cargo_metadata::Message;\n-use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender, TryRecvError};\n+use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n use lsp_types::{\n     Diagnostic, Url, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n@@ -191,7 +191,8 @@ impl CheckWatcherState {\n                 self.last_update_req.take();\n                 self.shared.write().clear(task_send);\n \n-                self.watcher.cancel();\n+                // By replacing the watcher, we drop the previous one which\n+                // causes it to shut down automatically.\n                 self.watcher = WatchThread::new(&self.options, &self.workspace_root);\n             }\n         }\n@@ -277,9 +278,11 @@ impl CheckWatcherState {\n /// doesn't provide a way to read sub-process output without blocking, so we\n /// have to wrap sub-processes output handling in a thread and pass messages\n /// back over a channel.\n+/// The correct way to dispose of the thread is to drop it, on which the\n+/// sub-process will be killed, and the thread will be joined.\n struct WatchThread {\n+    handle: Option<JoinHandle<()>>,\n     message_recv: Receiver<CheckEvent>,\n-    cancel_send: Sender<()>,\n }\n \n enum CheckEvent {\n@@ -302,9 +305,8 @@ impl WatchThread {\n         args.extend(options.args.iter().cloned());\n \n         let (message_send, message_recv) = unbounded();\n-        let (cancel_send, cancel_recv) = unbounded();\n         let enabled = options.enable;\n-        std::thread::spawn(move || {\n+        let handle = std::thread::spawn(move || {\n             if !enabled {\n                 return;\n             }\n@@ -316,24 +318,56 @@ impl WatchThread {\n                 .spawn()\n                 .expect(\"couldn't launch cargo\");\n \n-            message_send.send(CheckEvent::Begin).unwrap();\n+            // If we trigger an error here, we will do so in the loop instead,\n+            // which will break out of the loop, and continue the shutdown\n+            let _ = message_send.send(CheckEvent::Begin);\n+\n             for message in cargo_metadata::parse_messages(command.stdout.take().unwrap()) {\n-                match cancel_recv.try_recv() {\n-                    Ok(()) | Err(TryRecvError::Disconnected) => {\n-                        command.kill().expect(\"couldn't kill command\");\n+                let message = match message {\n+                    Ok(message) => message,\n+                    Err(err) => {\n+                        log::error!(\"Invalid json from cargo check, ignoring: {}\", err);\n+                        continue;\n                     }\n-                    Err(TryRecvError::Empty) => (),\n-                }\n+                };\n \n-                message_send.send(CheckEvent::Msg(message.unwrap())).unwrap();\n+                match message_send.send(CheckEvent::Msg(message)) {\n+                    Ok(()) => {}\n+                    Err(_err) => {\n+                        // The send channel was closed, so we want to shutdown\n+                        break;\n+                    }\n+                }\n             }\n-            message_send.send(CheckEvent::End).unwrap();\n+\n+            // We can ignore any error here, as we are already in the progress\n+            // of shutting down.\n+            let _ = message_send.send(CheckEvent::End);\n+\n+            // It is okay to ignore the result, as it only errors if the process is already dead\n+            let _ = command.kill();\n+\n+            // Again, we don't care about the exit status so just ignore the result\n+            let _ = command.wait();\n         });\n-        WatchThread { message_recv, cancel_send }\n+        WatchThread { handle: Some(handle), message_recv }\n     }\n+}\n \n-    fn cancel(&self) {\n-        let _ = self.cancel_send.send(());\n+impl std::ops::Drop for WatchThread {\n+    fn drop(&mut self) {\n+        if let Some(handle) = self.handle.take() {\n+            // Replace our reciever with dummy one, so we can drop and close the\n+            // one actually communicating with the thread\n+            let recv = std::mem::replace(&mut self.message_recv, crossbeam_channel::never());\n+\n+            // Dropping the original reciever initiates thread sub-process shutdown\n+            drop(recv);\n+\n+            // Join the thread, it should finish shortly. We don't really care\n+            // whether it panicked, so it is safe to ignore the result\n+            let _ = handle.join();\n+        }\n     }\n }\n "}]}