{"sha": "be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOWFhMWNjNWVjYjU5YzYyYTgwZGI5ZTViZTM1NWRlYWM5MGQwOGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T19:12:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T19:12:54Z"}, "message": "rustc: Fix the type of node_types; stub the write_type function", "tree": {"sha": "7716fda501a2f4055dbe349bf0fbd9ec682f88cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7716fda501a2f4055dbe349bf0fbd9ec682f88cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "html_url": "https://github.com/rust-lang/rust/commit/be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9aa1cc5ecb59c62a80db9e5be355deac90d08e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e34679a65cf0e811567f7416b8cebc4e2a05749", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e34679a65cf0e811567f7416b8cebc4e2a05749", "html_url": "https://github.com/rust-lang/rust/commit/6e34679a65cf0e811567f7416b8cebc4e2a05749"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "388eed21118461f7cd8b728944a7a845bf9a12ea", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be9aa1cc5ecb59c62a80db9e5be355deac90d08e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9aa1cc5ecb59c62a80db9e5be355deac90d08e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "patch": "@@ -162,7 +162,8 @@ const uint idx_first_others = 20u;\n type type_store = rec(mutable vec[raw_t] others,\n                       hashmap[raw_t,uint] other_structural);\n \n-type node_type_table = vec[ty::ty_param_count_and_ty];\n+type ty_param_substs_opt_and_ty = tup(option::t[vec[ty::t]], ty::t);\n+type node_type_table = vec[mutable option::t[ty::ty_param_substs_opt_and_ty]];\n \n fn mk_type_store() -> @type_store {\n     let vec[raw_t] others = vec();"}, {"sha": "263e94a254e00452bb5b0e27810bae8a5d650b69", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be9aa1cc5ecb59c62a80db9e5be355deac90d08e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9aa1cc5ecb59c62a80db9e5be355deac90d08e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=be9aa1cc5ecb59c62a80db9e5be355deac90d08e", "patch": "@@ -27,6 +27,7 @@ import middle::ty::pat_ty;\n import middle::ty::path_to_str;\n import middle::ty::struct;\n import middle::ty::triv_ann;\n+import middle::ty::ty_param_substs_opt_and_ty;\n import middle::ty::ty_to_str;\n import middle::ty::type_is_integral;\n import middle::ty::type_is_scalar;\n@@ -177,8 +178,6 @@ fn ty_param_count_and_ty_for_def(&@fn_ctxt fcx, &ast::span sp, &ast::def defn)\n     }\n }\n \n-type ty_param_substs_opt_and_ty = tup(option::t[vec[ty::t]], ty::t);\n-\n // Instantiates the given path, which must refer to an item with the given\n // number of type parameters and type.\n fn instantiate_path(&@fn_ctxt fcx, &ast::path pth, &ty_param_count_and_ty tpt,\n@@ -372,6 +371,15 @@ fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast::ty ast_ty) -> ty::t {\n     ret ast_ty_to_ty(ccx.tcx, f, ast_ty);\n }\n \n+// Writes a type parameter count and type pair into the node type table.\n+fn write_type(&@crate_ctxt cx, uint node_id,\n+              &ty_param_substs_opt_and_ty tpot) {\n+    _vec::grow_set[option::t[ty::ty_param_substs_opt_and_ty]](cx.node_types,\n+        0u,\n+        none[ty_param_substs_opt_and_ty],\n+        some[ty_param_substs_opt_and_ty](tpot));\n+}\n+\n \n // Item collection - a pair of bootstrap passes:\n //\n@@ -813,9 +821,9 @@ mod Collect {\n                                                 ty_params);\n         auto typ = e.cx.type_cache.get(id)._1;\n         auto item = ast::item_tag(i, variants_t, ty_params, id,\n-                                 ast::ann_type(ast::ann_tag(a), typ,\n-                                              none[vec[ty::t]],\n-                                              none[@ts_ann]));\n+                                  ast::ann_type(ast::ann_tag(a), typ,\n+                                                none[vec[ty::t]],\n+                                                none[@ts_ann]));\n         ret @fold::respan[ast::item_](sp, item);\n     }\n \n@@ -3025,7 +3033,7 @@ fn check_crate(&ty::ctxt tcx, &@ast::crate crate) -> typecheck_result {\n         map::mk_hashmap[unify_cache_entry,ty::Unify::result](hasher, eqer);\n     auto fpt =\n         mk_fn_purity_table(crate); // use a variation on Collect\n-    let node_type_table node_types = vec();\n+    let node_type_table node_types = vec(mutable);\n \n     auto ccx = @rec(sess=sess,\n                     type_cache=result._1,"}]}