{"sha": "a6614621afbbcc04c503a4828adbb0acc4e0fe20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjE0NjIxYWZiYmNjMDRjNTAzYTQ4MjhhZGJiMGFjYzRlMGZlMjA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-09T03:33:28Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:01:08Z"}, "message": "std: merge iterator::DoubleEndedIterator and DoubleEndedIteratorUtil", "tree": {"sha": "b2106f009bf9bef6f62ab33349457cfd9a539c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2106f009bf9bef6f62ab33349457cfd9a539c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6614621afbbcc04c503a4828adbb0acc4e0fe20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6614621afbbcc04c503a4828adbb0acc4e0fe20", "html_url": "https://github.com/rust-lang/rust/commit/a6614621afbbcc04c503a4828adbb0acc4e0fe20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6614621afbbcc04c503a4828adbb0acc4e0fe20/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229eeda4cd3f8013538edfa0c82f6779555012f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/229eeda4cd3f8013538edfa0c82f6779555012f6", "html_url": "https://github.com/rust-lang/rust/commit/229eeda4cd3f8013538edfa0c82f6779555012f6"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "3e0f934460091d23ec88bc30755dd20442942387", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=a6614621afbbcc04c503a4828adbb0acc4e0fe20", "patch": "@@ -55,32 +55,7 @@ pub trait Iterator<A> {\n pub trait DoubleEndedIterator<A>: Iterator<A> {\n     /// Yield an element from the end of the range, returning `None` if the range is empty.\n     fn next_back(&mut self) -> Option<A>;\n-}\n-\n-/// An object implementing random access indexing by `uint`\n-///\n-/// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n-pub trait RandomAccessIterator<A>: Iterator<A> {\n-    /// Return the number of indexable elements. At most `std::uint::max_value`\n-    /// elements are indexable, even if the iterator represents a longer range.\n-    fn indexable(&self) -> uint;\n-\n-    /// Return an element at an index\n-    fn idx(&self, index: uint) -> Option<A>;\n-}\n-\n-/// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n-///\n-/// In the future these will be default methods instead of a utility trait.\n-pub trait DoubleEndedIteratorUtil {\n-    /// Flip the direction of the iterator\n-    fn invert(self) -> Invert<Self>;\n-}\n \n-/// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n-///\n-/// In the future these will be default methods instead of a utility trait.\n-impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil for T {\n     /// Flip the direction of the iterator\n     ///\n     /// The inverted iterator flips the ends on an iterator that can already\n@@ -94,11 +69,23 @@ impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil for T {\n     /// Note: Random access with inverted indices still only applies to the first\n     /// `uint::max_value` elements of the original iterator.\n     #[inline]\n-    fn invert(self) -> Invert<T> {\n+    fn invert(self) -> Invert<Self> {\n         Invert{iter: self}\n     }\n }\n \n+/// An object implementing random access indexing by `uint`\n+///\n+/// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n+pub trait RandomAccessIterator<A>: Iterator<A> {\n+    /// Return the number of indexable elements. At most `std::uint::max_value`\n+    /// elements are indexable, even if the iterator represents a longer range.\n+    fn indexable(&self) -> uint;\n+\n+    /// Return an element at an index\n+    fn idx(&self, index: uint) -> Option<A>;\n+}\n+\n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n pub struct Invert<T> {"}, {"sha": "c560f9ed930d7c5a48677db6e41abd5e28547d3a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=a6614621afbbcc04c503a4828adbb0acc4e0fe20", "patch": "@@ -51,7 +51,7 @@ pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n pub use hash::Hash;\n pub use iter::Times;\n pub use iterator::Extendable;\n-pub use iterator::{Iterator, IteratorUtil, DoubleEndedIterator, DoubleEndedIteratorUtil};\n+pub use iterator::{Iterator, IteratorUtil, DoubleEndedIterator};\n pub use iterator::{ClonableIterator, OrdIterator};\n pub use num::{Num, NumCast};\n pub use num::{Orderable, Signed, Unsigned, Round};"}, {"sha": "539c6e38a99b77db5992d76f9138b041956e5f4e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6614621afbbcc04c503a4828adbb0acc4e0fe20/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=a6614621afbbcc04c503a4828adbb0acc4e0fe20", "patch": "@@ -25,7 +25,7 @@ use container::{Container, Mutable};\n use iter::Times;\n use iterator::{Iterator, FromIterator, Extendable, IteratorUtil};\n use iterator::{Filter, AdditiveIterator, Map};\n-use iterator::{Invert, DoubleEndedIterator, DoubleEndedIteratorUtil};\n+use iterator::{Invert, DoubleEndedIterator};\n use libc;\n use num::Zero;\n use option::{None, Option, Some};"}]}