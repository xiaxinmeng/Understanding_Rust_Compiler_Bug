{"sha": "26a2f852beae15235e7d3c4c5751ffe8e9459817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTJmODUyYmVhZTE1MjM1ZTdkM2M0YzU3NTFmZmU4ZTk0NTk4MTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-21T14:39:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:12:31Z"}, "message": "Fix the fallout", "tree": {"sha": "9d5ede80534b4d6bb061618d9fdbb2f5c2d79f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5ede80534b4d6bb061618d9fdbb2f5c2d79f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a2f852beae15235e7d3c4c5751ffe8e9459817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a2f852beae15235e7d3c4c5751ffe8e9459817", "html_url": "https://github.com/rust-lang/rust/commit/26a2f852beae15235e7d3c4c5751ffe8e9459817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a2f852beae15235e7d3c4c5751ffe8e9459817/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3", "html_url": "https://github.com/rust-lang/rust/commit/f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3"}], "stats": {"total": 77, "additions": 27, "deletions": 50}, "files": [{"sha": "e55b1597a21b867ac355f83f02da6fdc6e5cdc02", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -78,7 +78,7 @@ pub struct Node<K, V> {\n     _capacity: usize,\n }\n \n-struct NodeSlice<'a, K: 'a, V: 'a> {\n+pub struct NodeSlice<'a, K: 'a, V: 'a> {\n     keys: &'a [K],\n     vals: &'a [V],\n     pub edges: &'a [Node<K, V>],\n@@ -87,7 +87,7 @@ struct NodeSlice<'a, K: 'a, V: 'a> {\n     has_edges: bool,\n }\n \n-struct MutNodeSlice<'a, K: 'a, V: 'a> {\n+pub struct MutNodeSlice<'a, K: 'a, V: 'a> {\n     keys: &'a [K],\n     vals: &'a mut [V],\n     pub edges: &'a mut [Node<K, V>],\n@@ -1344,7 +1344,7 @@ fn min_load_from_capacity(cap: usize) -> usize {\n /// A trait for pairs of `Iterator`s, one over edges and the other over key/value pairs. This is\n /// necessary, as the `MoveTraversalImpl` needs to have a destructor that deallocates the `Node`,\n /// and a pair of `Iterator`s would require two independent destructors.\n-trait TraversalImpl {\n+pub trait TraversalImpl {\n     type Item;\n     type Edge;\n \n@@ -1358,7 +1358,7 @@ trait TraversalImpl {\n /// A `TraversalImpl` that actually is backed by two iterators. This works in the non-moving case,\n /// as no deallocation needs to be done.\n #[derive(Clone)]\n-struct ElemsAndEdges<Elems, Edges>(Elems, Edges);\n+pub struct ElemsAndEdges<Elems, Edges>(Elems, Edges);\n \n impl<K, V, E, Elems: DoubleEndedIterator, Edges: DoubleEndedIterator>\n         TraversalImpl for ElemsAndEdges<Elems, Edges>\n@@ -1375,7 +1375,7 @@ impl<K, V, E, Elems: DoubleEndedIterator, Edges: DoubleEndedIterator>\n }\n \n /// A `TraversalImpl` taking a `Node` by value.\n-struct MoveTraversalImpl<K, V> {\n+pub struct MoveTraversalImpl<K, V> {\n     keys: RawItems<K>,\n     vals: RawItems<V>,\n     edges: RawItems<Node<K, V>>,\n@@ -1436,7 +1436,7 @@ impl<K, V> Drop for MoveTraversalImpl<K, V> {\n \n /// An abstraction over all the different kinds of traversals a node supports\n #[derive(Clone)]\n-struct AbsTraversal<Impl> {\n+pub struct AbsTraversal<Impl> {\n     inner: Impl,\n     head_is_edge: bool,\n     tail_is_edge: bool,"}, {"sha": "a02ed06ad099e4e77e50cc935e19f0c3d53db833", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -209,7 +209,7 @@ struct ArmBlocks {\n }\n \n #[derive(Clone, Debug)]\n-struct Candidate<'pat, 'tcx:'pat> {\n+pub struct Candidate<'pat, 'tcx:'pat> {\n     // all of these must be satisfied...\n     match_pairs: Vec<MatchPair<'pat, 'tcx>>,\n \n@@ -235,7 +235,7 @@ struct Binding<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-struct MatchPair<'pat, 'tcx:'pat> {\n+pub struct MatchPair<'pat, 'tcx:'pat> {\n     // this lvalue...\n     lvalue: Lvalue<'tcx>,\n \n@@ -278,7 +278,7 @@ enum TestKind<'tcx> {\n }\n \n #[derive(Debug)]\n-struct Test<'tcx> {\n+pub struct Test<'tcx> {\n     span: Span,\n     kind: TestKind<'tcx>,\n }"}, {"sha": "bd94f4e5bf2577e411fe73793a0f2e6b6deeb38d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -18,7 +18,7 @@ use rustc_front::hir;\n use syntax::ast;\n use syntax::codemap::Span;\n \n-struct Builder<'a, 'tcx: 'a> {\n+pub struct Builder<'a, 'tcx: 'a> {\n     hir: Cx<'a, 'tcx>,\n     cfg: CFG<'tcx>,\n     scopes: Vec<scope::Scope<'tcx>>,\n@@ -40,7 +40,7 @@ struct CFG<'tcx> {\n // convenient.\n \n #[must_use] // if you don't use one of these results, you're leaving a dangling edge\n-struct BlockAnd<T>(BasicBlock, T);\n+pub struct BlockAnd<T>(BasicBlock, T);\n \n trait BlockAndExtension {\n     fn and<T>(self, v: T) -> BlockAnd<T>;"}, {"sha": "44b161a7575cc545ad5a5ab53c23af73ec7c9675", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -14,7 +14,7 @@ use std::os::windows::prelude::*;\n use std::ptr;\n use libc::{c_void, c_long};\n \n-type DWORD = u32;\n+pub type DWORD = u32;\n type LPCWSTR = *const u16;\n type LONG = c_long;\n type LPDWORD = *mut DWORD;\n@@ -34,7 +34,7 @@ const SYNCHRONIZE: REGSAM = 0x00100000;\n const REG_SZ: DWORD = 1;\n const ERROR_SUCCESS: i32 = 0;\n \n-enum __HKEY__ {}\n+pub enum __HKEY__ {}\n pub type HKEY = *mut __HKEY__;\n pub type PHKEY = *mut HKEY;\n pub type REGSAM = DWORD;"}, {"sha": "ee1d834fc8a89efb638a271e2475184e65e21388", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -145,7 +145,7 @@ impl FunctionDebugContext {\n     }\n }\n \n-struct FunctionDebugContextData {\n+pub struct FunctionDebugContextData {\n     scope_map: RefCell<NodeMap<DIScope>>,\n     fn_metadata: DISubprogram,\n     argument_counter: Cell<usize>,"}, {"sha": "097968cd5a3758dfe7821bffd280b344ada4c4da", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -123,7 +123,7 @@ pub enum BucketState<K, V, M> {\n // A GapThenFull encapsulates the state of two consecutive buckets at once.\n // The first bucket, called the gap, is known to be empty.\n // The second bucket is full.\n-struct GapThenFull<K, V, M> {\n+pub struct GapThenFull<K, V, M> {\n     gap: EmptyBucket<K, V, ()>,\n     full: FullBucket<K, V, M>,\n }"}, {"sha": "3d777d01d502733a3c8bd539faff6d8d011a30a0", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -13,7 +13,7 @@\n \n use std::marker;\n \n-struct arc_destruct<T: Sync> {\n+pub struct arc_destruct<T: Sync> {\n     _data: isize,\n     _marker: marker::PhantomData<T>\n }\n@@ -37,7 +37,7 @@ fn init() -> arc_destruct<context_res> {\n     arc(context_res())\n }\n \n-struct context_res {\n+pub struct context_res {\n     ctx : isize,\n }\n "}, {"sha": "f45e80f5252e31666841a9bb413364dee1962da1", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -49,7 +49,7 @@ struct UsedStruct1 {\n }\n struct UsedStruct2(isize);\n struct UsedStruct3;\n-struct UsedStruct4;\n+pub struct UsedStruct4;\n // this struct is never used directly, but its method is, so we don't want\n // to warn it\n struct SemiUsedStruct;"}, {"sha": "cf6f2c1e17cd6e90ef6023a802c1547ca9c0340a", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -32,7 +32,7 @@ impl Public<Private<isize>> {\n     pub fn a(&self) -> Private<isize> { panic!() }\n     fn b(&self) -> Private<isize> { panic!() }\n \n-    pub fn c() -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    pub fn c() -> Private<isize> { panic!() }\n     fn d() -> Private<isize> { panic!() }\n }\n impl Public<isize> {\n@@ -75,8 +75,8 @@ pub trait PubTrait {\n }\n \n impl PubTrait for Public<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() }\n-    fn baz() -> Private<isize> { panic!() }\n+    fn bar(&self) -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n+    fn baz() -> Private<isize> { panic!() } //~ ERROR private type in exported type signature\n }\n impl PubTrait for Public<Private<isize>> {\n     fn bar(&self) -> Private<isize> { panic!() }\n@@ -108,7 +108,7 @@ pub trait ParamTrait<T> {\n     fn foo() -> T;\n }\n \n-impl ParamTrait<Private<isize>> //~ ERROR private type in exported type signature\n+impl ParamTrait<Private<isize>>\n    for Public<isize> {\n     fn foo() -> Private<isize> { panic!() }\n }"}, {"sha": "a74369ed3c3a13b7a779c7099185c29f1a7b7bbd", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -182,7 +182,7 @@ use self::Enum1::{Variant1, Variant2};\n use std::marker::PhantomData;\n use std::ptr;\n \n-struct Struct1;\n+pub struct Struct1;\n struct GenericStruct<T1, T2>(PhantomData<(T1,T2)>);\n \n enum Enum1 {"}, {"sha": "d3bdab9082e32a38a676bacb7b009e0270a646a8", "filename": "src/test/run-pass/default_ty_param_struct_and_type_alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_struct_and_type_alias.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -13,11 +13,11 @@\n \n use std::marker::PhantomData;\n \n-struct DeterministicHasher;\n-struct RandomHasher;\n+pub struct DeterministicHasher;\n+pub struct RandomHasher;\n \n \n-struct MyHashMap<K, V, H=DeterministicHasher> {\n+pub struct MyHashMap<K, V, H=DeterministicHasher> {\n     data: PhantomData<(K, V, H)>\n }\n "}, {"sha": "f70f8768766428d337074555fa2111ac679f614f", "filename": "src/test/run-pass/issue-28983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Frun-pass%2Fissue-28983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a2f852beae15235e7d3c4c5751ffe8e9459817/src%2Ftest%2Frun-pass%2Fissue-28983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28983.rs?ref=26a2f852beae15235e7d3c4c5751ffe8e9459817", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Test { type T; }\n+pub trait Test { type T; }\n \n impl Test for u32 {\n     type T = i32;"}, {"sha": "4aa0867ae478e4edd314f090d614815199ed7633", "filename": "src/test/run-pass/visible-private-types-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs?ref=f3f27a5c6483d9e2bb3c872a3b05291a6e1d9cb3", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(visible_private_types)]\n-\n-trait Foo { fn dummy(&self) { } }\n-\n-pub trait Bar : Foo {}\n-\n-struct Baz;\n-\n-pub fn f(_: Baz) {}\n-\n-fn main() {}"}]}