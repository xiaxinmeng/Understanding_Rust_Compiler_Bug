{"sha": "c676e358a506af3f97025fa248343552bddc57d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzZlMzU4YTUwNmFmM2Y5NzAyNWZhMjQ4MzQzNTUyYmRkYzU3ZDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T11:06:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:24:58Z"}, "message": "Use ItemId as a strongly typed index.", "tree": {"sha": "f874aad615ca066b8b857cef517c3a74750f76a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f874aad615ca066b8b857cef517c3a74750f76a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c676e358a506af3f97025fa248343552bddc57d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c676e358a506af3f97025fa248343552bddc57d9", "html_url": "https://github.com/rust-lang/rust/commit/c676e358a506af3f97025fa248343552bddc57d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c676e358a506af3f97025fa248343552bddc57d9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8961fc047dd33701289f6040e3808fcfb5fb41", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8961fc047dd33701289f6040e3808fcfb5fb41", "html_url": "https://github.com/rust-lang/rust/commit/ac8961fc047dd33701289f6040e3808fcfb5fb41"}], "stats": {"total": 114, "additions": 63, "deletions": 51}, "files": [{"sha": "3b0d0361165a320c04736e8c63f69a7aabff4084", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -58,8 +58,8 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             lctx.without_in_scope_lifetime_defs(|lctx| {\n                 if let Some(hir_item) = lctx.lower_item(item) {\n-                    item_hir_id = Some(hir_item.hir_id);\n-                    lctx.insert_item(hir_item);\n+                    let id = lctx.insert_item(hir_item);\n+                    item_hir_id = Some(id);\n                 }\n             })\n         });\n@@ -128,7 +128,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     // only used when lowering a child item of a trait or impl.\n     fn with_parent_item_lifetime_defs<T>(\n         &mut self,\n-        parent_hir_id: hir::HirId,\n+        parent_hir_id: hir::ItemId,\n         f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     ) -> T {\n         let old_len = self.in_scope_lifetimes.len();"}, {"sha": "0f63afa1376883188cc8c1205bb056eafe5c75d2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -99,7 +99,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     arena: &'hir Arena<'hir>,\n \n     /// The items being lowered are collected here.\n-    items: BTreeMap<hir::HirId, hir::Item<'hir>>,\n+    items: BTreeMap<hir::ItemId, hir::Item<'hir>>,\n \n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem<'hir>>,\n@@ -605,12 +605,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn insert_item(&mut self, item: hir::Item<'hir>) {\n+    fn insert_item(&mut self, item: hir::Item<'hir>) -> hir::ItemId {\n         let id = item.hir_id;\n         // FIXME: Use `debug_asset-rt`.\n         assert_eq!(id.local_id, hir::ItemLocalId::from_u32(0));\n+        let id = hir::ItemId { id };\n         self.items.insert(id, item);\n         self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n+        id\n     }\n \n     fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {"}, {"sha": "58dd3109b34b582d5b805018bc6906353729664d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -619,7 +619,7 @@ pub struct WhereEqPredicate<'hir> {\n pub struct ModuleItems {\n     // Use BTreeSets here so items are in the same order as in the\n     // list of all items in Crate\n-    pub items: BTreeSet<HirId>,\n+    pub items: BTreeSet<ItemId>,\n     pub trait_items: BTreeSet<TraitItemId>,\n     pub impl_items: BTreeSet<ImplItemId>,\n     pub foreign_items: BTreeSet<ForeignItemId>,\n@@ -652,7 +652,7 @@ pub struct Crate<'hir> {\n     // does, because it can affect the order in which errors are\n     // detected, which in turn can make UI tests yield\n     // slightly different results.\n-    pub items: BTreeMap<HirId, Item<'hir>>,\n+    pub items: BTreeMap<ItemId, Item<'hir>>,\n \n     pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n@@ -677,7 +677,7 @@ pub struct Crate<'hir> {\n }\n \n impl Crate<'hir> {\n-    pub fn item(&self, id: HirId) -> &Item<'hir> {\n+    pub fn item(&self, id: ItemId) -> &Item<'hir> {\n         &self.items[&id]\n     }\n \n@@ -2541,7 +2541,7 @@ impl VariantData<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, Encodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ItemId {\n     pub id: HirId,\n }"}, {"sha": "70ba81287d0d1919791be92cb0c7820c4bde71fe", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -133,7 +133,7 @@ pub trait Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     fn find(&self, hir_id: HirId) -> Option<Node<'hir>>;\n     fn body(&self, id: BodyId) -> &'hir Body<'hir>;\n-    fn item(&self, id: HirId) -> &'hir Item<'hir>;\n+    fn item(&self, id: ItemId) -> &'hir Item<'hir>;\n     fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n     fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir>;\n@@ -150,7 +150,7 @@ impl<'hir> Map<'hir> for ErasedMap<'hir> {\n     fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.0.body(id)\n     }\n-    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+    fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n         self.0.item(id)\n     }\n     fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n@@ -269,7 +269,7 @@ pub trait Visitor<'v>: Sized {\n     /// reason to override this method is if you want a nested pattern\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.item(id.id));\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.item(id));\n         walk_list!(self, visit_item, opt_item);\n     }\n "}, {"sha": "d8831ec553da517710e58a3736d58ff095fb7ca6", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -34,6 +34,15 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n     type KeyType = (DefPathHash, ItemLocalId);\n "}, {"sha": "e6805b171c579a3d1aa75d313aac5c285518972f", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -54,7 +54,7 @@ pub const NO_ANN: &dyn PpAnn = &NoAnn;\n impl PpAnn for hir::Crate<'_> {\n     fn nested(&self, state: &mut State<'_>, nested: Nested) {\n         match nested {\n-            Nested::Item(id) => state.print_item(self.item(id.id)),\n+            Nested::Item(id) => state.print_item(self.item(id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n             Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n             Nested::ForeignItem(id) => state.print_foreign_item(self.foreign_item(id)),\n@@ -69,7 +69,7 @@ impl PpAnn for hir::Crate<'_> {\n impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {\n     fn nested(&self, state: &mut State<'_>, nested: Nested) {\n         match nested {\n-            Nested::Item(id) => state.print_item(self.item(id.id)),\n+            Nested::Item(id) => state.print_item(self.item(id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n             Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n             Nested::ForeignItem(id) => state.print_foreign_item(self.foreign_item(id)),"}, {"sha": "cf669d37dcff94c28021ef96df9751793d67f227", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n             match fn_return.kind {\n                 TyKind::OpaqueDef(item_id, _) => {\n-                    let item = tcx.hir().item(item_id.id);\n+                    let item = tcx.hir().item(item_id);\n                     let opaque = if let ItemKind::OpaqueTy(opaque) = &item.kind {\n                         opaque\n                     } else {"}, {"sha": "4cbddc0969d1f4e5141567925566a133d90fd169", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -178,7 +178,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n-        let get_item = |id: hir::ItemId| self.context.tcx.hir().item(id.id);\n+        let get_item = |id: hir::ItemId| self.context.tcx.hir().item(id);\n         let attrs = &s.kind.attrs(get_item);\n         // See `EarlyContextAndPass::visit_stmt` for an explanation\n         // of why we call `walk_stmt` outside of `with_lint_attrs`"}, {"sha": "358b0deec8c7e1cec5904ffdf875ca8a6a058f7c", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_nested_item(&mut self, item: ItemId) {\n         debug!(\"visit_nested_item: {:?}\", item);\n-        self.visit_item(self.krate.item(item.id));\n+        self.visit_item(self.krate.item(item));\n     }\n \n     fn visit_nested_trait_item(&mut self, item_id: TraitItemId) {"}, {"sha": "f06dc7536765f38387182d8018ecda6879a8b601", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -300,8 +300,8 @@ impl<'hir> Map<'hir> {\n         self.find_entry(id).unwrap()\n     }\n \n-    pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n-        match self.find(id).unwrap() {\n+    pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n+        match self.find(id.id).unwrap() {\n             Node::Item(item) => item,\n             _ => bug!(),\n         }\n@@ -479,19 +479,19 @@ impl<'hir> Map<'hir> {\n         let module = self.tcx.hir_module_items(module);\n \n         for id in &module.items {\n-            visitor.visit_item(self.expect_item(*id));\n+            visitor.visit_item(self.item(*id));\n         }\n \n         for id in &module.trait_items {\n-            visitor.visit_trait_item(self.expect_trait_item(id.hir_id));\n+            visitor.visit_trait_item(self.trait_item(*id));\n         }\n \n         for id in &module.impl_items {\n-            visitor.visit_impl_item(self.expect_impl_item(id.hir_id));\n+            visitor.visit_impl_item(self.impl_item(*id));\n         }\n \n         for id in &module.foreign_items {\n-            visitor.visit_foreign_item(self.expect_foreign_item(id.hir_id));\n+            visitor.visit_foreign_item(self.foreign_item(*id));\n         }\n     }\n \n@@ -863,7 +863,7 @@ impl<'hir> Map<'hir> {\n             Node::Variant(ref v) => &v.attrs[..],\n             Node::Field(ref f) => &f.attrs[..],\n             Node::Expr(ref e) => &*e.attrs,\n-            Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id.id)),\n+            Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id)),\n             Node::Arm(ref a) => &*a.attrs,\n             Node::GenericParam(param) => &param.attrs[..],\n             // Unit/tuple structs/variants take the attributes straight from\n@@ -977,7 +977,7 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n         self.body(id)\n     }\n \n-    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+    fn item(&self, id: ItemId) -> &'hir Item<'hir> {\n         self.item(id)\n     }\n "}, {"sha": "c6291c1c5250d397c2a1a29d6c0d506e009cb53f", "filename": "compiler/rustc_middle/src/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -55,7 +55,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         let item_ids_hash = item_ids\n             .iter()\n             .map(|id| {\n-                let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n+                let (def_path_hash, local_id) = id.to_stable_hash_key(hcx);\n                 debug_assert_eq!(local_id, hir::ItemLocalId::from_u32(0));\n                 def_path_hash.0\n             })"}, {"sha": "3b7dc25b6cf50ccfb13189e4abca68eeec2a61e3", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -289,7 +289,7 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n             }\n             hir::TyKind::OpaqueDef(item_id, _) => {\n                 self.0.push(ty);\n-                let item = self.1.expect_item(item_id.id);\n+                let item = self.1.item(item_id);\n                 hir::intravisit::walk_item(self, item);\n             }\n             _ => {}"}, {"sha": "63a3e269d6157019d267da3ad354330251acbeda", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -767,7 +767,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let hir = self.infcx.tcx.hir();\n \n         if let hir::TyKind::OpaqueDef(id, _) = hir_ty.kind {\n-            let opaque_ty = hir.item(id.id);\n+            let opaque_ty = hir.item(id);\n             if let hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                 bounds:\n                     [hir::GenericBound::LangItemTrait("}, {"sha": "a9e843dd176c85e29d00e9a855e9fd8e0fc47bbd", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -329,7 +329,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n         if let TyKind::OpaqueDef(item_id, _) = ty.kind {\n-            let item = self.tcx.hir().expect_item(item_id.id);\n+            let item = self.tcx.hir().item(item_id);\n             intravisit::walk_item(self, item);\n         }\n         intravisit::walk_ty(self, ty);"}, {"sha": "89acccdde5d731e5e9d415ba96e19e7165c57c11", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -100,7 +100,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_nested_item(&mut self, id: hir::ItemId) {\n-        let nested_item = self.krate.unwrap().item(id.id);\n+        let nested_item = self.krate.unwrap().item(id);\n         self.visit_item(nested_item)\n     }\n "}, {"sha": "48c4c1c2d5461be9bf44955787e04af07fb39814", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -588,8 +588,8 @@ impl EmbargoVisitor<'tcx> {\n                 .map(|module_hir_id| self.tcx.hir().expect_item(module_hir_id))\n             {\n                 if let hir::ItemKind::Mod(m) = &item.kind {\n-                    for item_id in m.item_ids {\n-                        let item = self.tcx.hir().expect_item(item_id.id);\n+                    for &item_id in m.item_ids {\n+                        let item = self.tcx.hir().item(item_id);\n                         let def_id = self.tcx.hir().local_def_id(item_id.id);\n                         if !self.tcx.hygienic_eq(segment.ident, item.ident, def_id.to_def_id()) {\n                             continue;"}, {"sha": "5f09b643c50c77adc82625b1b1c39f584f0ddaef", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -587,7 +587,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`\n                 //                 ^                  ^ this gets resolved in the scope of\n                 //                                      the opaque_ty generics\n-                let opaque_ty = self.tcx.hir().expect_item(item_id.id);\n+                let opaque_ty = self.tcx.hir().item(item_id);\n                 let (generics, bounds) = match opaque_ty.kind {\n                     // Named opaque `impl Trait` types are reached via `TyKind::Path`.\n                     // This arm is for `impl Trait` in the types of statics, constants and locals.\n@@ -632,11 +632,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                                 // Ensure that the parent of the def is an item, not HRTB\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+                                let parent_item_id = hir::ItemId { id: parent_id };\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n                                 let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n                                 let krate = self.tcx.hir().krate();\n \n-                                if !(krate.items.contains_key(&parent_id)\n+                                if !(krate.items.contains_key(&parent_item_id)\n                                     || krate.impl_items.contains_key(&parent_impl_id)\n                                     || krate.trait_items.contains_key(&parent_trait_id))\n                                 {"}, {"sha": "a5360dd313f37d534480ea309723c32006efe4ac", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -1382,7 +1382,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 });\n             }\n             hir::TyKind::OpaqueDef(item_id, _) => {\n-                let item = self.tcx.hir().item(item_id.id);\n+                let item = self.tcx.hir().item(item_id);\n                 self.nest_typeck_results(self.tcx.hir().local_def_id(item_id.id), |v| {\n                     v.visit_item(item)\n                 });"}, {"sha": "6540960cc37d107292fca8f04a0293daab53805b", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -317,7 +317,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 Ok(replace_text(nested_ty, text))\n             }\n             hir::TyKind::OpaqueDef(item_id, _) => {\n-                let item = scx.tcx.hir().item(item_id.id);\n+                let item = scx.tcx.hir().item(item_id);\n                 item.make(offset, Some(item_id.id), scx)\n             }\n             hir::TyKind::Typeof(_) | hir::TyKind::Infer | hir::TyKind::Err => Err(\"Ty\"),"}, {"sha": "3dbc71588fe37af70ec4702abae13d0d9cc1005d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -2210,7 +2210,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n             hir::TyKind::OpaqueDef(item_id, ref lifetimes) => {\n-                let opaque_ty = tcx.hir().expect_item(item_id.id);\n+                let opaque_ty = tcx.hir().item(item_id);\n                 let def_id = tcx.hir().local_def_id(item_id.id).to_def_id();\n \n                 match opaque_ty.kind {"}, {"sha": "5c09885b63180b5ab28cc9431679195bd0b9d955", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -1445,8 +1445,8 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n             return;\n         }\n         // Find a `use` statement.\n-        for item_id in module.item_ids {\n-            let item = self.tcx.hir().expect_item(item_id.id);\n+        for &item_id in module.item_ids {\n+            let item = self.tcx.hir().item(item_id);\n             match item.kind {\n                 hir::ItemKind::Use(..) => {\n                     // Don't suggest placing a `use` before the prelude"}, {"sha": "e437362a4053e6ccaad85540ee0d996d62fece0f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -133,7 +133,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {\n-                    let item = cx.tcx.hir().expect_item(id.id);\n+                    let item = cx.tcx.hir().item(id);\n                     match item.kind {\n                         hir::ItemKind::Mod(_) => as_primitive(Res::Def(\n                             DefKind::Mod,\n@@ -185,7 +185,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {\n-                    let item = cx.tcx.hir().expect_item(id.id);\n+                    let item = cx.tcx.hir().item(id);\n                     match item.kind {\n                         hir::ItemKind::Mod(_) => as_keyword(Res::Def(\n                             DefKind::Mod,\n@@ -1475,7 +1475,7 @@ impl Clean<Type> for hir::Ty<'_> {\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n             TyKind::OpaqueDef(item_id, _) => {\n-                let item = cx.tcx.hir().expect_item(item_id.id);\n+                let item = cx.tcx.hir().item(item_id);\n                 if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n                     ImplTrait(ty.bounds.clean(cx))\n                 } else {"}, {"sha": "013e27c122940807568ebb4d3f124027a4588004", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -132,8 +132,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n-        for i in m.item_ids {\n-            let item = self.cx.tcx.hir().expect_item(i.id);\n+        for &i in m.item_ids {\n+            let item = self.cx.tcx.hir().item(i);\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n@@ -231,8 +231,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let ret = match tcx.hir().get(res_hir_id) {\n             Node::Item(&hir::Item { kind: hir::ItemKind::Mod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n-                for i in m.item_ids {\n-                    let i = self.cx.tcx.hir().expect_item(i.id);\n+                for &i in m.item_ids {\n+                    let i = self.cx.tcx.hir().item(i);\n                     self.visit_item(i, None, om);\n                 }\n                 self.inlining = prev;"}, {"sha": "05c747eee07608ca1d76372b8c3431da4ee4f32d", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         match ty.kind {\n             TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                let item = map.expect_item(item.id);\n+                let item = map.item(item);\n                 walk_item(self, item);\n                 walk_ty(self, ty);\n             },"}, {"sha": "2e2e693592c8853d22eaffafffd45f0f72992626", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -102,7 +102,7 @@ fn future_trait_ref<'tcx>(\n ) -> Option<(&'tcx TraitRef<'tcx>, Vec<LifetimeName>)> {\n     if_chain! {\n         if let TyKind::OpaqueDef(item_id, bounds) = ty.kind;\n-        let item = cx.tcx.hir().item(item_id.id);\n+        let item = cx.tcx.hir().item(item_id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if let Some(trait_ref) = opaque.bounds.iter().find_map(|bound| {\n             if let GenericBound::Trait(poly, _) = bound {"}, {"sha": "1264813d378a33e42778cfa1748dc9195feffc46", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n-                                let item = cx.tcx.hir().expect_trait_item(tit.id.hir_id);\n+                                let item = cx.tcx.hir().trait_item(tit.id);\n                                 check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n                             }\n                         },"}, {"sha": "6e3d4fde107775847243d008c3b7e96bf2523302", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         prelude();"}, {"sha": "b52083af6fd34eb1af7fcb94bd466d7823220efa", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c676e358a506af3f97025fa248343552bddc57d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c676e358a506af3f97025fa248343552bddc57d9", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         match stmt.kind {"}]}