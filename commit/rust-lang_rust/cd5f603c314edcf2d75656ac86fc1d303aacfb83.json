{"sha": "cd5f603c314edcf2d75656ac86fc1d303aacfb83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNWY2MDNjMzE0ZWRjZjJkNzU2NTZhYzg2ZmMxZDMwM2FhY2ZiODM=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T01:25:09Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T01:25:09Z"}, "message": "Implement @set", "tree": {"sha": "953085a28bcb3af89d064c6415e38c18d374b3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953085a28bcb3af89d064c6415e38c18d374b3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5f603c314edcf2d75656ac86fc1d303aacfb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f603c314edcf2d75656ac86fc1d303aacfb83", "html_url": "https://github.com/rust-lang/rust/commit/cd5f603c314edcf2d75656ac86fc1d303aacfb83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f603c314edcf2d75656ac86fc1d303aacfb83/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "html_url": "https://github.com/rust-lang/rust/commit/a00eb7ee1d8f5b38b94410940e87af9c10ed458a"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "2e0179113acf427b1092a642ffc70813c8508831", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=cd5f603c314edcf2d75656ac86fc1d303aacfb83", "patch": "@@ -7,15 +7,18 @@\n // @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n // @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n+// @set l1_id = - \"$.index[*][?(@.name=='l1')].id\"\n pub mod l1 {\n \n     // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n     // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n     // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n+    // @set l3_id = - \"$.index[*][?(@.name=='l3')].id\"\n     pub mod l3 {\n \n         // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n         // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n+        // @set l4_id = - \"$.index[*][?(@.name=='L4')].id\"\n         pub struct L4;\n     }\n     // @is nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\""}, {"sha": "8a6a911321c345a57c8fd0384359190d18791773", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=cd5f603c314edcf2d75656ac86fc1d303aacfb83", "patch": "@@ -9,6 +9,7 @@ pub struct Cache {\n     root: PathBuf,\n     files: HashMap<PathBuf, String>,\n     values: HashMap<PathBuf, Value>,\n+    pub variables: HashMap<String, Value>,\n     last_path: Option<PathBuf>,\n }\n \n@@ -19,6 +20,7 @@ impl Cache {\n             root: Path::new(doc_dir).to_owned(),\n             files: HashMap::new(),\n             values: HashMap::new(),\n+            variables: HashMap::new(),\n             last_path: None,\n         }\n     }"}, {"sha": "9f231842c60ead2c54ce2c1d8f59b333b35cd661", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f603c314edcf2d75656ac86fc1d303aacfb83/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=cd5f603c314edcf2d75656ac86fc1d303aacfb83", "patch": "@@ -49,13 +49,15 @@ pub enum CommandKind {\n     Has,\n     Count,\n     Is,\n+    Set,\n }\n \n impl CommandKind {\n     fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n         let count = match self {\n             CommandKind::Has => (1..=3).contains(&args.len()),\n             CommandKind::Count | CommandKind::Is => 3 == args.len(),\n+            CommandKind::Set => 4 == args.len(),\n         };\n \n         if !count {\n@@ -85,6 +87,7 @@ impl fmt::Display for CommandKind {\n             CommandKind::Has => \"has\",\n             CommandKind::Count => \"count\",\n             CommandKind::Is => \"is\",\n+            CommandKind::Set => \"set\",\n         };\n         write!(f, \"{}\", text)\n     }\n@@ -130,6 +133,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             \"has\" => CommandKind::Has,\n             \"count\" => CommandKind::Count,\n             \"is\" => CommandKind::Is,\n+            \"set\" => CommandKind::Set,\n             _ => {\n                 print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n                 errors = true;\n@@ -236,6 +240,23 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 Err(_) => false,\n             }\n         }\n+        // FIXME, Figure out semantics for @!set\n+        CommandKind::Set => {\n+            // @set <name> = <path> <jsonpath>\n+            assert_eq!(command.args.len(), 4);\n+            assert_eq!(command.args[1], \"=\", \"Expected an `=`\");\n+            let val = cache.get_value(&command.args[2])?;\n+\n+            match select(&val, &command.args[3]) {\n+                Ok(results) => {\n+                    assert_eq!(results.len(), 1);\n+                    let r = cache.variables.insert(command.args[0].clone(), results[0].clone());\n+                    assert!(r.is_none(), \"Name collision\");\n+                    true\n+                }\n+                Err(_) => false,\n+            }\n+        }\n     };\n \n     if result == command.negated {"}]}