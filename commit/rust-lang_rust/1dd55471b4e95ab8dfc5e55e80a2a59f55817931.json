{"sha": "1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "node_id": "C_kwDOAAsO6NoAKDFkZDU1NDcxYjRlOTVhYjhkZmM1ZTU1ZTgwYTJhNTlmNTU4MTc5MzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T20:34:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T20:34:06Z"}, "message": "Auto merge of #8892 - smoelius:fix-empty-line-false-positive, r=Manishearth\n\nFix `empty_line_after_outer_attribute` false positive\n\nThis PR fixes a false positive in `empty_line_after_outer_attribute`.\n\nHere is a minimal example that trigger the FP:\n```rust\n#[derive(clap::Parser)]\n#[clap(after_help = \"This ia a help message.\n\nYou're welcome.\n\")]\npub struct Args;\n```\n\nchangelog: PF: [`empty_line_after_outer_attribute`]: No longer lints empty lines in inner string values.", "tree": {"sha": "f31fd1e34081ebd41910104a6a9b94ff78be95d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31fd1e34081ebd41910104a6a9b94ff78be95d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "html_url": "https://github.com/rust-lang/rust/commit/1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461a6613cf6035844a410a093746d028fc5d9216", "url": "https://api.github.com/repos/rust-lang/rust/commits/461a6613cf6035844a410a093746d028fc5d9216", "html_url": "https://github.com/rust-lang/rust/commit/461a6613cf6035844a410a093746d028fc5d9216"}, {"sha": "9ee211af9fb04802a23be3557c606d833e288d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee211af9fb04802a23be3557c606d833e288d82", "html_url": "https://github.com/rust-lang/rust/commit/9ee211af9fb04802a23be3557c606d833e288d82"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "d23d681df00c1d9ac45a125ae406a8f88008cedb", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "patch": "@@ -40,6 +40,7 @@ filetime = \"0.2\"\n rustc-workspace-hack = \"1.0\"\n \n # UI test dependencies\n+clap = { version = \"3.1\", features = [\"derive\"] }\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\""}, {"sha": "7105ce4b292aee99bc5689db2592a89dd30de130", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "patch": "@@ -585,15 +585,21 @@ impl EarlyLintPass for EarlyAttributes {\n }\n \n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n-    for attr in &item.attrs {\n+    let mut iter = item.attrs.iter().peekable();\n+    while let Some(attr) = iter.next() {\n         if matches!(attr.kind, AttrKind::Normal(..))\n             && attr.style == AttrStyle::Outer\n             && is_present_in_source(cx, attr.span)\n         {\n             let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt(), item.span.parent());\n-            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt(), item.span.parent());\n+            let end_of_attr_to_next_attr_or_item = Span::new(\n+                attr.span.hi(),\n+                iter.peek().map_or(item.span.lo(), |next_attr| next_attr.span.lo()),\n+                item.span.ctxt(),\n+                item.span.parent(),\n+            );\n \n-            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n+            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_next_attr_or_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();\n                 let lines = without_block_comments(lines);\n \n@@ -623,8 +629,15 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Opti\n         if feature_item.has_name(sym::rustfmt);\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n-        if skip_item.has_name(sym!(rustfmt_skip)) ||\n-            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n+        if skip_item.has_name(sym!(rustfmt_skip))\n+            || skip_item\n+                .path\n+                .segments\n+                .last()\n+                .expect(\"empty path in attribute\")\n+                .ident\n+                .name\n+                == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n         if attr.style == AttrStyle::Outer;"}, {"sha": "18099c45fee3ccac23293ac5e44069d74d4a6c5b", "filename": "tests/compile-test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "patch": "@@ -22,6 +22,7 @@ const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal\");\n \n /// All crates used in UI tests are listed here\n static TEST_DEPENDENCIES: &[&str] = &[\n+    \"clap\",\n     \"clippy_utils\",\n     \"derive_new\",\n     \"futures\",\n@@ -40,6 +41,8 @@ static TEST_DEPENDENCIES: &[&str] = &[\n // Test dependencies may need an `extern crate` here to ensure that they show up\n // in the depinfo file (otherwise cargo thinks they are unused)\n #[allow(unused_extern_crates)]\n+extern crate clap;\n+#[allow(unused_extern_crates)]\n extern crate clippy_utils;\n #[allow(unused_extern_crates)]\n extern crate derive_new;\n@@ -109,8 +112,9 @@ static EXTERN_FLAGS: SyncLazy<String> = SyncLazy::new(|| {\n         not_found.is_empty(),\n         \"dependencies not found in depinfo: {:?}\\n\\\n         help: Make sure the `-Z binary-dep-depinfo` rust flag is enabled\\n\\\n-        help: Try adding to dev-dependencies in Cargo.toml\",\n-        not_found\n+        help: Try adding to dev-dependencies in Cargo.toml\\n\\\n+        help: Be sure to also add `extern crate ...;` to tests/compile-test.rs\",\n+        not_found,\n     );\n     crates\n         .into_iter()"}, {"sha": "d15c84d7438a09bfe683c53cbb85f030535b003b", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "patch": "@@ -4,6 +4,9 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n \n+#[macro_use]\n+extern crate clap;\n+\n #[macro_use]\n extern crate proc_macro_attr;\n \n@@ -110,4 +113,11 @@ pub trait Bazz {\n     }\n }\n \n+#[derive(clap::Parser)]\n+#[clap(after_help = \"This ia a help message.\n+\n+You're welcome.\n+\")]\n+pub struct Args;\n+\n fn main() {}"}, {"sha": "acc3edef9b928d437de7d1c5c6bad48357bdc45e", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dd55471b4e95ab8dfc5e55e80a2a59f55817931/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=1dd55471b4e95ab8dfc5e55e80a2a59f55817931", "patch": "@@ -1,5 +1,5 @@\n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:11:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:14:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -10,15 +10,15 @@ LL | | fn with_one_newline_and_comment() { assert!(true) }\n    = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:23:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:26:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | fn with_one_newline() { assert!(true) }\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:28:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:31:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n@@ -27,23 +27,23 @@ LL | | fn with_two_newlines() { assert!(true) }\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:35:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:38:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | enum Baz {\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:43:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:46:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | struct Foo {\n    | |_\n \n error: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n-  --> $DIR/empty_line_after_outer_attribute.rs:51:1\n+  --> $DIR/empty_line_after_outer_attribute.rs:54:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |"}]}