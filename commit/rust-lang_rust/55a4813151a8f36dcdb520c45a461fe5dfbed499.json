{"sha": "55a4813151a8f36dcdb520c45a461fe5dfbed499", "node_id": "C_kwDOAAsO6NoAKDU1YTQ4MTMxNTFhOGYzNmRjZGI1MjBjNDVhNDYxZmU1ZGZiZWQ0OTk", "commit": {"author": {"name": "TheDoctor314", "email": "64731940+TheDoctor314@users.noreply.github.com", "date": "2021-11-11T08:46:59Z"}, "committer": {"name": "TheDoctor314", "email": "64731940+TheDoctor314@users.noreply.github.com", "date": "2021-11-11T08:46:59Z"}, "message": "Fix `impl_trait` function to emit correct ast\n\n`impl_trait` code copied from `generate_impl_text_inner` to properly\nhandle the bounds for the generic parameters.", "tree": {"sha": "fea8500d8d163cb32e7f10688d246e8a05dde099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea8500d8d163cb32e7f10688d246e8a05dde099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a4813151a8f36dcdb520c45a461fe5dfbed499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a4813151a8f36dcdb520c45a461fe5dfbed499", "html_url": "https://github.com/rust-lang/rust/commit/55a4813151a8f36dcdb520c45a461fe5dfbed499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a4813151a8f36dcdb520c45a461fe5dfbed499/comments", "author": {"login": "TheDoctor314", "id": 64731940, "node_id": "MDQ6VXNlcjY0NzMxOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/64731940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheDoctor314", "html_url": "https://github.com/TheDoctor314", "followers_url": "https://api.github.com/users/TheDoctor314/followers", "following_url": "https://api.github.com/users/TheDoctor314/following{/other_user}", "gists_url": "https://api.github.com/users/TheDoctor314/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheDoctor314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheDoctor314/subscriptions", "organizations_url": "https://api.github.com/users/TheDoctor314/orgs", "repos_url": "https://api.github.com/users/TheDoctor314/repos", "events_url": "https://api.github.com/users/TheDoctor314/events{/privacy}", "received_events_url": "https://api.github.com/users/TheDoctor314/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TheDoctor314", "id": 64731940, "node_id": "MDQ6VXNlcjY0NzMxOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/64731940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheDoctor314", "html_url": "https://github.com/TheDoctor314", "followers_url": "https://api.github.com/users/TheDoctor314/followers", "following_url": "https://api.github.com/users/TheDoctor314/following{/other_user}", "gists_url": "https://api.github.com/users/TheDoctor314/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheDoctor314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheDoctor314/subscriptions", "organizations_url": "https://api.github.com/users/TheDoctor314/orgs", "repos_url": "https://api.github.com/users/TheDoctor314/repos", "events_url": "https://api.github.com/users/TheDoctor314/events{/privacy}", "received_events_url": "https://api.github.com/users/TheDoctor314/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e8d877c0f4908e877b8ad7ea82acc8cf90be9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e8d877c0f4908e877b8ad7ea82acc8cf90be9b", "html_url": "https://github.com/rust-lang/rust/commit/e0e8d877c0f4908e877b8ad7ea82acc8cf90be9b"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "060bb17c6d24839f13869b6afc6cd0ba8eae3f78", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55a4813151a8f36dcdb520c45a461fe5dfbed499/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a4813151a8f36dcdb520c45a461fe5dfbed499/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=55a4813151a8f36dcdb520c45a461fe5dfbed499", "patch": "@@ -3,7 +3,7 @@ use ide_db::helpers::{import_assets::NameToImport, mod_path_to_ast};\n use ide_db::items_locator;\n use itertools::Itertools;\n use syntax::{\n-    ast::{self, make, AstNode, HasGenericParams, HasName},\n+    ast::{self, make, AstNode, HasName},\n     SyntaxKind::{IDENT, WHITESPACE},\n };\n \n@@ -160,11 +160,8 @@ fn impl_def_from_trait(\n     if trait_items.is_empty() {\n         return None;\n     }\n-    let impl_def = make::impl_trait(\n-        trait_path.clone(),\n-        make::ext::ident_path(&annotated_name.text()),\n-        adt.generic_param_list(),\n-    );\n+    let impl_def = make::impl_trait(&trait_path, &adt, \"\");\n+\n     let (impl_def, first_assoc_item) =\n         add_trait_assoc_items_to_impl(sema, trait_items, trait_, impl_def, target_scope);\n "}, {"sha": "fec7c5cfe802331ccf5a5904ae2778e90dfa4846", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/55a4813151a8f36dcdb520c45a461fe5dfbed499/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a4813151a8f36dcdb520c45a461fe5dfbed499/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=55a4813151a8f36dcdb520c45a461fe5dfbed499", "patch": "@@ -10,9 +10,13 @@\n //! `parse(format!())` we use internally is an implementation detail -- long\n //! term, it will be replaced with direct tree manipulation.\n use itertools::Itertools;\n+use smol_str::SmolStr;\n use stdx::{format_to, never};\n \n-use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n+use crate::{\n+    ast::{self, HasAttrs, HasGenericParams, HasName, HasTypeBounds},\n+    AstNode, SourceFile, SyntaxKind, SyntaxToken,\n+};\n \n /// While the parent module defines basic atomic \"constructors\", the `ext`\n /// module defines shortcuts for common things.\n@@ -149,13 +153,65 @@ pub fn impl_(\n     ast_from_text(&format!(\"impl{} {}{} {{}}\", params, ty, ty_params))\n }\n \n-pub fn impl_trait(\n-    trait_: ast::Path,\n-    ty: ast::Path,\n-    ty_params: Option<ast::GenericParamList>,\n-) -> ast::Impl {\n-    let ty_params = ty_params.map_or_else(String::new, |params| params.to_string());\n-    ast_from_text(&format!(\"impl{2} {} for {}{2} {{}}\", trait_, ty, ty_params))\n+pub fn impl_trait(trait_: &ast::Path, adt: &ast::Adt, code: &str) -> ast::Impl {\n+    let generic_params = adt.generic_param_list();\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\n\");\n+    adt.attrs()\n+        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+    buf.push_str(\"impl\");\n+    if let Some(generic_params) = &generic_params {\n+        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n+        let type_params = generic_params.type_params().map(|type_param| {\n+            let mut buf = String::new();\n+            if let Some(it) = type_param.name() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            if let Some(it) = type_param.colon_token() {\n+                format_to!(buf, \"{} \", it);\n+            }\n+            if let Some(it) = type_param.type_bound_list() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            buf\n+        });\n+        let const_params = generic_params.const_params().map(|t| t.syntax().to_string());\n+        let generics = lifetimes.chain(type_params).chain(const_params).format(\", \");\n+        format_to!(buf, \"<{}>\", generics);\n+    }\n+    buf.push(' ');\n+    let trait_text = trait_.to_string();\n+    buf.push_str(&trait_text);\n+    buf.push_str(\" for \");\n+\n+    buf.push_str(&adt.name().unwrap().text());\n+    if let Some(generic_params) = generic_params {\n+        let lifetime_params = generic_params\n+            .lifetime_params()\n+            .filter_map(|it| it.lifetime())\n+            .map(|it| SmolStr::from(it.text()));\n+        let type_params = generic_params\n+            .type_params()\n+            .filter_map(|it| it.name())\n+            .map(|it| SmolStr::from(it.text()));\n+        let const_params = generic_params\n+            .const_params()\n+            .filter_map(|it| it.name())\n+            .map(|it| SmolStr::from(it.text()));\n+        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).chain(const_params).format(\", \"))\n+    }\n+\n+    match adt.where_clause() {\n+        Some(where_clause) => {\n+            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+        }\n+        None => {\n+            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+        }\n+    }\n+\n+    ast_from_text(&buf)\n }\n \n pub(crate) fn generic_arg_list() -> ast::GenericArgList {"}]}