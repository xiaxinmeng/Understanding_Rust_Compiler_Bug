{"sha": "94ffb29ee4441246ec3da1f207891549409ce7b1", "node_id": "C_kwDOAAsO6NoAKDk0ZmZiMjllZTQ0NDEyNDZlYzNkYTFmMjA3ODkxNTQ5NDA5Y2U3YjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-08T09:48:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-08T09:48:21Z"}, "message": "Rollup merge of #95102 - compiler-errors:issue-94034-bug, r=jackh726\n\nAdd known-bug for #95034\n\nCouldn't fix the issue, since I am no type theorist and inference variables in universes above U0 scare me. But I at least wanted to add a known-bug test for it.\n\ncc #95034 (does not fix)", "tree": {"sha": "9fb25af0e6eba7ae9b8b864e6fc484e889b24f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb25af0e6eba7ae9b8b864e6fc484e889b24f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ffb29ee4441246ec3da1f207891549409ce7b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUATlCRBK7hj4Ov3rIwAAqzoIAJaENyvu1Zi/2yiD2hZnqnP0\n3VOS/chCFSdAFJclS4zrmdgT1lbWhlxpCg6+42wbgpa98mE1X6vS71zeMtsL2ccD\nulB1t5VWR+Qx6YVRTAxaVUnjEv2KypqHvxwYKrCIPRsJwfPufO/LQgiIQY3sxUm9\ngvGThYidxa/NMBzQvXiYL49hMONVWJYNQ8zJUPou4hnLjq+uvqzlEZqGb2th3Omz\nKVaz5JXtVE2tkcRevan3Asqsl9OOCvGPbEj7ebC8PD+pZJRPXYg2rmJ2Eq9aoDno\nwTLZqST4Y/PLIkA2hsapq6IANln1W+QaCh+XN1Hc845eD2UHmuh56UF+CJ2GPq4=\n=Eh1V\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fb25af0e6eba7ae9b8b864e6fc484e889b24f59\nparent dc1f8298ef1abe9cbc648b4d7db620f21f2cec32\nparent d5a32d870120109012daaa348ed97992d0e99ebc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649411301 +0200\ncommitter GitHub <noreply@github.com> 1649411301 +0200\n\nRollup merge of #95102 - compiler-errors:issue-94034-bug, r=jackh726\n\nAdd known-bug for #95034\n\nCouldn't fix the issue, since I am no type theorist and inference variables in universes above U0 scare me. But I at least wanted to add a known-bug test for it.\n\ncc #95034 (does not fix)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ffb29ee4441246ec3da1f207891549409ce7b1", "html_url": "https://github.com/rust-lang/rust/commit/94ffb29ee4441246ec3da1f207891549409ce7b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ffb29ee4441246ec3da1f207891549409ce7b1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "html_url": "https://github.com/rust-lang/rust/commit/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32"}, {"sha": "d5a32d870120109012daaa348ed97992d0e99ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a32d870120109012daaa348ed97992d0e99ebc", "html_url": "https://github.com/rust-lang/rust/commit/d5a32d870120109012daaa348ed97992d0e99ebc"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "5239e5db11c961562429126d2fa3910d265bda89", "filename": "src/test/ui/hrtb/issue-94034.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/94ffb29ee4441246ec3da1f207891549409ce7b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ffb29ee4441246ec3da1f207891549409ce7b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs?ref=94ffb29ee4441246ec3da1f207891549409ce7b1", "patch": "@@ -0,0 +1,96 @@\n+// known-bug\n+// failure-status: 101\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n+// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n+// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n+// normalize-stderr-test \"#.*\\n\" -> \"\"\n+\n+// This should not ICE.\n+\n+use std::{\n+    future::Future,\n+    marker::PhantomData,\n+    pin::Pin,\n+    task::{Context, Poll},\n+};\n+\n+mod object {\n+    use super::*;\n+\n+    pub trait Object<'a> {\n+        type Error;\n+        type Future: Future<Output = Self>;\n+        fn create() -> Self::Future;\n+    }\n+\n+    impl<'a> Object<'a> for u8 {\n+        type Error = ();\n+        type Future = Pin<Box<dyn Future<Output = Self>>>;\n+        fn create() -> Self::Future {\n+            unimplemented!()\n+        }\n+    }\n+\n+    impl<'a, E, A: Object<'a, Error = E>> Object<'a> for (A,) {\n+        type Error = ();\n+        type Future = CustomFut<'a, E, A>;\n+        fn create() -> Self::Future {\n+            unimplemented!()\n+        }\n+    }\n+\n+    pub struct CustomFut<'f, E, A: Object<'f, Error = E>> {\n+        ph: PhantomData<(A::Future,)>,\n+    }\n+\n+    impl<'f, E, A: Object<'f, Error = E>> Future for CustomFut<'f, E, A> {\n+        type Output = (A,);\n+        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {\n+            unimplemented!()\n+        }\n+    }\n+}\n+\n+mod async_fn {\n+    use super::*;\n+\n+    pub trait AsyncFn {\n+        type Future: Future<Output = ()>;\n+        fn call(&self) -> Self::Future;\n+    }\n+\n+    impl<F, Fut> AsyncFn for F\n+    where\n+        F: Fn() -> Fut,\n+        Fut: Future<Output = ()>,\n+    {\n+        type Future = Fut;\n+        fn call(&self) -> Self::Future {\n+            (self)()\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    use self::{async_fn::AsyncFn, object::Object};\n+\n+    async fn create<T: Object<'static>>() {\n+        T::create().await;\n+    }\n+\n+    async fn call_async_fn(inner: impl AsyncFn) {\n+        inner.call().await;\n+    }\n+\n+    call_async_fn(create::<(u8,)>).await;\n+}"}, {"sha": "1d8329142fc5c0a142f078d1106713135539f7ad", "filename": "src/test/ui/hrtb/issue-94034.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94ffb29ee4441246ec3da1f207891549409ce7b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ffb29ee4441246ec3da1f207891549409ce7b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr?ref=94ffb29ee4441246ec3da1f207891549409ce7b1", "patch": "@@ -0,0 +1 @@\n+thread 'rustc' panicked"}]}