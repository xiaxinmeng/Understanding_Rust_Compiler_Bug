{"sha": "c97aae38f20f64daede9877212aff83c259a4faa", "node_id": "C_kwDOAAsO6NoAKGM5N2FhZTM4ZjIwZjY0ZGFlZGU5ODc3MjEyYWZmODNjMjU5YTRmYWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T11:38:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T11:38:32Z"}, "message": "Auto merge of #14138 - lowr:fix/rename-raw-ident-mod, r=Veykril\n\nfix: don't include `r#` prefix in filesystem changes\n\nFixes #14131\n\nIn addition to fix for #14131, this PR adds raw ident validity checks in rename functionality that we've been missing.", "tree": {"sha": "ab9ed18c529cb978bc81c41800613293e08f2312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9ed18c529cb978bc81c41800613293e08f2312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97aae38f20f64daede9877212aff83c259a4faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97aae38f20f64daede9877212aff83c259a4faa", "html_url": "https://github.com/rust-lang/rust/commit/c97aae38f20f64daede9877212aff83c259a4faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97aae38f20f64daede9877212aff83c259a4faa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23871f9dd15a691771509404b117761fadabe144", "url": "https://api.github.com/repos/rust-lang/rust/commits/23871f9dd15a691771509404b117761fadabe144", "html_url": "https://github.com/rust-lang/rust/commit/23871f9dd15a691771509404b117761fadabe144"}, {"sha": "57f0e9c1006896bc6bead470c87aea8b015e5af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f0e9c1006896bc6bead470c87aea8b015e5af8", "html_url": "https://github.com/rust-lang/rust/commit/57f0e9c1006896bc6bead470c87aea8b015e5af8"}], "stats": {"total": 191, "additions": 176, "deletions": 15}, "files": [{"sha": "c3462beac73c5bd9a6f17bd7105a6a635440f652", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=c97aae38f20f64daede9877212aff83c259a4faa", "patch": "@@ -2,7 +2,7 @@\n \n use std::fmt;\n \n-use syntax::{ast, SmolStr, SyntaxKind};\n+use syntax::{ast, utils::is_raw_identifier, SmolStr};\n \n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygiene info, but we are\n@@ -33,11 +33,6 @@ impl fmt::Display for Name {\n     }\n }\n \n-fn is_raw_identifier(name: &str) -> bool {\n-    let is_keyword = SyntaxKind::from_keyword(name).is_some();\n-    is_keyword && !matches!(name, \"self\" | \"crate\" | \"super\" | \"Self\")\n-}\n-\n impl<'a> fmt::Display for UnescapedName<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match &self.0 .0 {"}, {"sha": "84d70b258ff86537432be125fe2ab3523302b539", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=c97aae38f20f64daede9877212aff83c259a4faa", "patch": "@@ -190,6 +190,7 @@ fn rename_mod(\n \n     let InFile { file_id, value: def_source } = module.definition_source(sema.db);\n     if let ModuleSource::SourceFile(..) = def_source {\n+        let new_name = new_name.trim_start_matches(\"r#\");\n         let anchor = file_id.original_file(sema.db);\n \n         let is_mod_rs = module.is_mod_rs(sema.db);\n@@ -207,9 +208,13 @@ fn rename_mod(\n         //  - Module has submodules defined in separate files\n         let dir_paths = match (is_mod_rs, has_detached_child, module.name(sema.db)) {\n             // Go up one level since the anchor is inside the dir we're trying to rename\n-            (true, _, Some(mod_name)) => Some((format!(\"../{mod_name}\"), format!(\"../{new_name}\"))),\n+            (true, _, Some(mod_name)) => {\n+                Some((format!(\"../{}\", mod_name.unescaped()), format!(\"../{new_name}\")))\n+            }\n             // The anchor is on the same level as target dir\n-            (false, true, Some(mod_name)) => Some((mod_name.to_string(), new_name.to_string())),\n+            (false, true, Some(mod_name)) => {\n+                Some((mod_name.unescaped().to_string(), new_name.to_string()))\n+            }\n             _ => None,\n         };\n \n@@ -532,7 +537,14 @@ impl IdentifierKind {\n     pub fn classify(new_name: &str) -> Result<IdentifierKind> {\n         match parser::LexedStr::single_token(new_name) {\n             Some(res) => match res {\n-                (SyntaxKind::IDENT, _) => Ok(IdentifierKind::Ident),\n+                (SyntaxKind::IDENT, _) => {\n+                    if let Some(inner) = new_name.strip_prefix(\"r#\") {\n+                        if matches!(inner, \"self\" | \"crate\" | \"super\" | \"Self\") {\n+                            bail!(\"Invalid name: `{}` cannot be a raw identifier\", inner);\n+                        }\n+                    }\n+                    Ok(IdentifierKind::Ident)\n+                }\n                 (T![_], _) => Ok(IdentifierKind::Underscore),\n                 (SyntaxKind::LIFETIME_IDENT, _) if new_name != \"'static\" && new_name != \"'_\" => {\n                     Ok(IdentifierKind::Lifetime)"}, {"sha": "8e89160ef5e05d9099f3b05941aa926d418efd59", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 152, "deletions": 2, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=c97aae38f20f64daede9877212aff83c259a4faa", "patch": "@@ -13,7 +13,7 @@ use ide_db::{\n };\n use itertools::Itertools;\n use stdx::{always, never};\n-use syntax::{ast, AstNode, SyntaxNode, TextRange, TextSize};\n+use syntax::{ast, utils::is_raw_identifier, AstNode, SmolStr, SyntaxNode, TextRange, TextSize};\n \n use text_edit::TextEdit;\n \n@@ -122,7 +122,11 @@ pub(crate) fn will_rename_file(\n     let sema = Semantics::new(db);\n     let module = sema.to_module_def(file_id)?;\n     let def = Definition::Module(module);\n-    let mut change = def.rename(&sema, new_name_stem).ok()?;\n+    let mut change = if is_raw_identifier(new_name_stem) {\n+        def.rename(&sema, &SmolStr::from_iter([\"r#\", new_name_stem])).ok()?\n+    } else {\n+        def.rename(&sema, new_name_stem).ok()?\n+    };\n     change.file_system_edits.clear();\n     Some(change)\n }\n@@ -558,6 +562,15 @@ impl Foo {\n         );\n     }\n \n+    #[test]\n+    fn test_rename_mod_invalid_raw_ident() {\n+        check(\n+            \"r#self\",\n+            r#\"mod foo$0 {}\"#,\n+            \"error: Invalid name: `self` cannot be a raw identifier\",\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_for_local() {\n         check(\n@@ -1286,6 +1299,143 @@ mod bar$0;\n         )\n     }\n \n+    #[test]\n+    fn test_rename_mod_to_raw_ident() {\n+        check_expect(\n+            \"r#fn\",\n+            r#\"\n+//- /lib.rs\n+mod foo$0;\n+\n+fn main() { foo::bar::baz(); }\n+\n+//- /foo.rs\n+pub mod bar;\n+\n+//- /foo/bar.rs\n+pub fn baz() {}\n+\"#,\n+            expect![[r#\"\n+                SourceChange {\n+                    source_file_edits: {\n+                        FileId(\n+                            0,\n+                        ): TextEdit {\n+                            indels: [\n+                                Indel {\n+                                    insert: \"r#fn\",\n+                                    delete: 4..7,\n+                                },\n+                                Indel {\n+                                    insert: \"r#fn\",\n+                                    delete: 22..25,\n+                                },\n+                            ],\n+                        },\n+                    },\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn.rs\",\n+                            },\n+                        },\n+                        MoveDir {\n+                            src: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo\",\n+                            },\n+                            src_id: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn\",\n+                            },\n+                        },\n+                    ],\n+                    is_snippet: false,\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_mod_from_raw_ident() {\n+        // FIXME: `r#fn` in path expression is not renamed.\n+        check_expect(\n+            \"foo\",\n+            r#\"\n+//- /lib.rs\n+mod r#fn$0;\n+\n+fn main() { r#fn::bar::baz(); }\n+\n+//- /fn.rs\n+pub mod bar;\n+\n+//- /fn/bar.rs\n+pub fn baz() {}\n+\"#,\n+            expect![[r#\"\n+                SourceChange {\n+                    source_file_edits: {\n+                        FileId(\n+                            0,\n+                        ): TextEdit {\n+                            indels: [\n+                                Indel {\n+                                    insert: \"foo\",\n+                                    delete: 4..8,\n+                                },\n+                            ],\n+                        },\n+                    },\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo.rs\",\n+                            },\n+                        },\n+                        MoveDir {\n+                            src: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"fn\",\n+                            },\n+                            src_id: FileId(\n+                                1,\n+                            ),\n+                            dst: AnchoredPathBuf {\n+                                anchor: FileId(\n+                                    1,\n+                                ),\n+                                path: \"foo\",\n+                            },\n+                        },\n+                    ],\n+                    is_snippet: false,\n+                }\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_enum_variant_from_module_1() {\n         cov_mark::check!(rename_non_local);"}, {"sha": "5aebe4cd9f53aa98ef194d41ed8853fa38d52b00", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=c97aae38f20f64daede9877212aff83c259a4faa", "patch": "@@ -12,7 +12,7 @@\n use itertools::Itertools;\n use stdx::{format_to, never};\n \n-use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n+use crate::{ast, utils::is_raw_identifier, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n /// While the parent module defines basic atomic \"constructors\", the `ext`\n /// module defines shortcuts for common things.\n@@ -111,8 +111,7 @@ pub fn name_ref(name_ref: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {raw_escape}{name_ref}; }}\"))\n }\n fn raw_ident_esc(ident: &str) -> &'static str {\n-    let is_keyword = parser::SyntaxKind::from_keyword(ident).is_some();\n-    if is_keyword && !matches!(ident, \"self\" | \"crate\" | \"super\" | \"Self\") {\n+    if is_raw_identifier(ident) {\n         \"r#\"\n     } else {\n         \"\""}, {"sha": "25f34ea9d397d747f91cf06e6aaf31613c9d2f80", "filename": "crates/syntax/src/utils.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fsyntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97aae38f20f64daede9877212aff83c259a4faa/crates%2Fsyntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Futils.rs?ref=c97aae38f20f64daede9877212aff83c259a4faa", "patch": "@@ -2,7 +2,7 @@\n \n use itertools::Itertools;\n \n-use crate::{ast, match_ast, AstNode};\n+use crate::{ast, match_ast, AstNode, SyntaxKind};\n \n pub fn path_to_string_stripping_turbo_fish(path: &ast::Path) -> String {\n     path.syntax()\n@@ -23,6 +23,11 @@ pub fn path_to_string_stripping_turbo_fish(path: &ast::Path) -> String {\n         .join(\"::\")\n }\n \n+pub fn is_raw_identifier(name: &str) -> bool {\n+    let is_keyword = SyntaxKind::from_keyword(name).is_some();\n+    is_keyword && !matches!(name, \"self\" | \"crate\" | \"super\" | \"Self\")\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::path_to_string_stripping_turbo_fish;"}]}