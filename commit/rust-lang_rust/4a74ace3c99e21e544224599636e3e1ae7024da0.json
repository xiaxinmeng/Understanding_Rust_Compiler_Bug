{"sha": "4a74ace3c99e21e544224599636e3e1ae7024da0", "node_id": "C_kwDOAAsO6NoAKDRhNzRhY2UzYzk5ZTIxZTU0NDIyNDU5OTYzNmUzZTFhZTcwMjRkYTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-23T04:36:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-23T17:41:52Z"}, "message": "Liberate late bound regions when collecting GAT substs in wfcheck", "tree": {"sha": "608b6381223960c8595fbaa513c1e0f274629c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/608b6381223960c8595fbaa513c1e0f274629c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a74ace3c99e21e544224599636e3e1ae7024da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a74ace3c99e21e544224599636e3e1ae7024da0", "html_url": "https://github.com/rust-lang/rust/commit/4a74ace3c99e21e544224599636e3e1ae7024da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a74ace3c99e21e544224599636e3e1ae7024da0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c4c4afec6dfc483af6efb7019941bab9a51a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29", "html_url": "https://github.com/rust-lang/rust/commit/10c4c4afec6dfc483af6efb7019941bab9a51a29"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "aa1a521d53274e94e71914acd02d0ad7daa888c5", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a74ace3c99e21e544224599636e3e1ae7024da0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a74ace3c99e21e544224599636e3e1ae7024da0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4a74ace3c99e21e544224599636e3e1ae7024da0", "patch": "@@ -312,7 +312,7 @@ fn check_gat_where_clauses(\n         // of  the function signature. In our example, the GAT in the return\n         // type is `<Self as LendingIterator>::Item<'a>`, so 'a and Self are arguments.\n         let (regions, types) =\n-            GATSubstCollector::visit(trait_item.def_id.to_def_id(), sig.output());\n+            GATSubstCollector::visit(tcx, trait_item.def_id.to_def_id(), sig.output());\n \n         // If both regions and types are empty, then this GAT isn't in the\n         // return type, and we shouldn't try to do clause analysis\n@@ -602,6 +602,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its subsituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -611,11 +612,16 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n+        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor =\n-            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n+        let mut visitor = GATSubstCollector {\n+            tcx,\n+            gat,\n+            regions: FxHashSet::default(),\n+            types: FxHashSet::default(),\n+        };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -624,6 +630,13 @@ impl<'tcx> GATSubstCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        self.tcx.liberate_late_bound_regions(self.gat, t.clone()).visit_with(self)\n+    }\n+\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Projection(p) if p.item_def_id == self.gat => {"}, {"sha": "95c090ff4e9065a0b819c632c82426d418328594", "filename": "src/test/ui/generic-associated-types/issue-92954.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a74ace3c99e21e544224599636e3e1ae7024da0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a74ace3c99e21e544224599636e3e1ae7024da0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92954.rs?ref=4a74ace3c99e21e544224599636e3e1ae7024da0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Foo {\n+    type Assoc<'c>;\n+    fn function() -> for<'x> fn(Self::Assoc<'x>);\n+}\n+\n+fn main() {}"}]}