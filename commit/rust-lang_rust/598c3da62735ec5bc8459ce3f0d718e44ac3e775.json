{"sha": "598c3da62735ec5bc8459ce3f0d718e44ac3e775", "node_id": "C_kwDOAAsO6NoAKDU5OGMzZGE2MjczNWVjNWJjODQ1OWNlM2YwZDcxOGU0NGFjM2U3NzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-27T19:50:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-27T19:53:17Z"}, "message": "clippy", "tree": {"sha": "7dd601ec2ec68fea1cef829a5296be7c3b29a437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dd601ec2ec68fea1cef829a5296be7c3b29a437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598c3da62735ec5bc8459ce3f0d718e44ac3e775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598c3da62735ec5bc8459ce3f0d718e44ac3e775", "html_url": "https://github.com/rust-lang/rust/commit/598c3da62735ec5bc8459ce3f0d718e44ac3e775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598c3da62735ec5bc8459ce3f0d718e44ac3e775/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1e99e96e632c193430fe073958700d451bb703", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1e99e96e632c193430fe073958700d451bb703", "html_url": "https://github.com/rust-lang/rust/commit/6d1e99e96e632c193430fe073958700d451bb703"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "f0d8b6768810c720fc7c367d90de6e9ef68c852e", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=598c3da62735ec5bc8459ce3f0d718e44ac3e775", "patch": "@@ -76,11 +76,7 @@ const UNIX_IO_ERROR_TABLE: &[(&str, std::io::ErrorKind)] = {\n /// Gets an instance for a path.\n ///\n /// A `None` namespace indicates we are looking for a module.\n-fn try_resolve_did<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    path: &[&str],\n-    namespace: Option<Namespace>,\n-) -> Option<DefId> {\n+fn try_resolve_did(tcx: TyCtxt<'_>, path: &[&str], namespace: Option<Namespace>) -> Option<DefId> {\n     /// Yield all children of the given item, that have the given name.\n     fn find_children<'tcx: 'a, 'a>(\n         tcx: TyCtxt<'tcx>,"}, {"sha": "bc7ca82997bb8e05d663fa4f08b162aa3ea39519", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=598c3da62735ec5bc8459ce3f0d718e44ac3e775", "patch": "@@ -18,12 +18,12 @@ pub enum PathConversion {\n }\n \n #[cfg(unix)]\n-pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+pub fn os_str_to_bytes<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, &[u8]> {\n     Ok(os_str.as_bytes())\n }\n \n #[cfg(not(unix))]\n-pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+pub fn os_str_to_bytes<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, &[u8]> {\n     // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n     // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n     // valid.\n@@ -34,11 +34,11 @@ pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u\n }\n \n #[cfg(unix)]\n-pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+pub fn bytes_to_os_str<'tcx>(bytes: &[u8]) -> InterpResult<'tcx, &OsStr> {\n     Ok(OsStr::from_bytes(bytes))\n }\n #[cfg(not(unix))]\n-pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+pub fn bytes_to_os_str<'tcx>(bytes: &[u8]) -> InterpResult<'tcx, &OsStr> {\n     let s = std::str::from_utf8(bytes)\n         .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n     Ok(OsStr::new(s))"}, {"sha": "e048d53a17e0d498630b698711e830ec60b12ac5", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=598c3da62735ec5bc8459ce3f0d718e44ac3e775", "patch": "@@ -1911,8 +1911,8 @@ struct FileMetadata {\n }\n \n impl FileMetadata {\n-    fn from_path<'tcx, 'mir>(\n-        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n+    fn from_path<'tcx>(\n+        ecx: &mut MiriInterpCx<'_, 'tcx>,\n         path: &Path,\n         follow_symlink: bool,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n@@ -1922,8 +1922,8 @@ impl FileMetadata {\n         FileMetadata::from_meta(ecx, metadata)\n     }\n \n-    fn from_fd<'tcx, 'mir>(\n-        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n+    fn from_fd<'tcx>(\n+        ecx: &mut MiriInterpCx<'_, 'tcx>,\n         fd: i32,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n@@ -1936,8 +1936,8 @@ impl FileMetadata {\n         FileMetadata::from_meta(ecx, metadata)\n     }\n \n-    fn from_meta<'tcx, 'mir>(\n-        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n+    fn from_meta<'tcx>(\n+        ecx: &mut MiriInterpCx<'_, 'tcx>,\n         metadata: Result<std::fs::Metadata, std::io::Error>,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = match metadata {"}, {"sha": "4e369f4291a3f821c4315e32afe387f0352fb52c", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598c3da62735ec5bc8459ce3f0d718e44ac3e775/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=598c3da62735ec5bc8459ce3f0d718e44ac3e775", "patch": "@@ -663,12 +663,12 @@ impl Stacks {\n     }\n \n     #[inline(always)]\n-    pub fn before_memory_write<'tcx, 'mir, 'ecx>(\n+    pub fn before_memory_write<'tcx>(\n         &mut self,\n         alloc_id: AllocId,\n         tag: ProvenanceExtra,\n         range: AllocRange,\n-        machine: &'ecx mut MiriMachine<'mir, 'tcx>,\n+        machine: &mut MiriMachine<'_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         trace!(\n             \"write access with tag {:?}: {:?}, size {}\",\n@@ -684,12 +684,12 @@ impl Stacks {\n     }\n \n     #[inline(always)]\n-    pub fn before_memory_deallocation<'tcx, 'mir, 'ecx>(\n+    pub fn before_memory_deallocation<'tcx>(\n         &mut self,\n         alloc_id: AllocId,\n         tag: ProvenanceExtra,\n         range: AllocRange,\n-        machine: &'ecx mut MiriMachine<'mir, 'tcx>,\n+        machine: &mut MiriMachine<'_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         trace!(\"deallocation with tag {:?}: {:?}, size {}\", tag, alloc_id, range.size.bytes());\n         let dcx = DiagnosticCxBuilder::dealloc(machine, tag);"}]}