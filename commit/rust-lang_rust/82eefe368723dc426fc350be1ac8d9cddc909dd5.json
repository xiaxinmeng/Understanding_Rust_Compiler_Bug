{"sha": "82eefe368723dc426fc350be1ac8d9cddc909dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWVmZTM2ODcyM2RjNDI2ZmMzNTBiZTFhYzhkOWNkZGM5MDlkZDU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-12T21:42:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-12T21:42:12Z"}, "message": "add --xpretty flowgraph,unlabelled variant.", "tree": {"sha": "6185af9129b89790a6a7a4c18fe6f5dce3dce1af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6185af9129b89790a6a7a4c18fe6f5dce3dce1af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82eefe368723dc426fc350be1ac8d9cddc909dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82eefe368723dc426fc350be1ac8d9cddc909dd5", "html_url": "https://github.com/rust-lang/rust/commit/82eefe368723dc426fc350be1ac8d9cddc909dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82eefe368723dc426fc350be1ac8d9cddc909dd5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21a6da340fd958de370d2b83c0f17fd8fa51f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a6da340fd958de370d2b83c0f17fd8fa51f89", "html_url": "https://github.com/rust-lang/rust/commit/b21a6da340fd958de370d2b83c0f17fd8fa51f89"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "3d8348e8f5a991ddc28ebf53b1ffabae028e59e0", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82eefe368723dc426fc350be1ac8d9cddc909dd5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eefe368723dc426fc350be1ac8d9cddc909dd5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=82eefe368723dc426fc350be1ac8d9cddc909dd5", "patch": "@@ -28,6 +28,8 @@ pub struct LabelledCFG<'a, 'ast: 'a> {\n     pub ast_map: &'a ast_map::Map<'ast>,\n     pub cfg: &'a cfg::CFG,\n     pub name: String,\n+    /// `labelled_edges` controls whether we emit labels on the edges\n+    pub labelled_edges: bool,\n }\n \n fn replace_newline_with_backslash_l(s: String) -> String {\n@@ -75,6 +77,9 @@ impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n \n     fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> {\n         let mut label = String::new();\n+        if !self.labelled_edges {\n+            return dot::LabelText::EscStr(label.into_cow());\n+        }\n         let mut put_one = false;\n         for (i, &node_id) in e.data.exiting_scopes.iter().enumerate() {\n             if put_one {"}, {"sha": "279442891bec0c631a91364d3cefd11c21baf831", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/82eefe368723dc426fc350be1ac8d9cddc909dd5/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eefe368723dc426fc350be1ac8d9cddc909dd5/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=82eefe368723dc426fc350be1ac8d9cddc909dd5", "patch": "@@ -53,10 +53,20 @@ pub enum PpSourceMode {\n     PpmExpandedHygiene,\n }\n \n+\n+#[derive(Copy, PartialEq, Show)]\n+pub enum PpFlowGraphMode {\n+    Default,\n+    /// Drops the labels from the edges in the flowgraph output. This\n+    /// is mostly for use in the --xpretty flowgraph run-make tests,\n+    /// since the labels are largely uninteresting in those cases and\n+    /// have become a pain to maintain.\n+    UnlabelledEdges,\n+}\n #[derive(Copy, PartialEq, Show)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n-    PpmFlowGraph,\n+    PpmFlowGraph(PpFlowGraphMode),\n }\n \n pub fn parse_pretty(sess: &Session,\n@@ -73,12 +83,13 @@ pub fn parse_pretty(sess: &Session,\n         (\"expanded,identified\", _) => PpmSource(PpmExpandedIdentified),\n         (\"expanded,hygiene\", _) => PpmSource(PpmExpandedHygiene),\n         (\"identified\", _)   => PpmSource(PpmIdentified),\n-        (\"flowgraph\", true)    => PpmFlowGraph,\n+        (\"flowgraph\", true)    => PpmFlowGraph(PpFlowGraphMode::Default),\n+        (\"flowgraph,unlabelled\", true)    => PpmFlowGraph(PpFlowGraphMode::UnlabelledEdges),\n         _ => {\n             if extended {\n                 sess.fatal(format!(\n                     \"argument to `xpretty` must be one of `normal`, \\\n-                     `expanded`, `flowgraph=<nodeid>`, `typed`, `identified`, \\\n+                     `expanded`, `flowgraph[,unlabelled]=<nodeid>`, `typed`, `identified`, \\\n                      `expanded,identified`, or `everybody_loops`; got {}\", name).as_slice());\n             } else {\n                 sess.fatal(format!(\n@@ -417,7 +428,7 @@ fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n         PpmSource(PpmExpandedIdentified) |\n         PpmSource(PpmExpandedHygiene) |\n         PpmSource(PpmTyped) |\n-        PpmFlowGraph => true\n+        PpmFlowGraph(_) => true\n     }\n }\n \n@@ -431,7 +442,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n         PpmSource(PpmExpandedIdentified) |\n         PpmSource(PpmExpandedHygiene) |\n         PpmSource(PpmTyped) |\n-        PpmFlowGraph => true\n+        PpmFlowGraph(_) => true\n     }\n }\n \n@@ -589,7 +600,7 @@ pub fn pretty_print_input(sess: Session,\n                     pp::eof(&mut pp_state.s)\n                 }),\n \n-        (PpmFlowGraph, opt_uii) => {\n+        (PpmFlowGraph(mode), opt_uii) => {\n             debug!(\"pretty printing flow graph for {:?}\", opt_uii);\n             let uii = opt_uii.unwrap_or_else(|| {\n                 sess.fatal(&format!(\"`pretty flowgraph=..` needs NodeId (int) or\n@@ -613,7 +624,7 @@ pub fn pretty_print_input(sess: Session,\n                                                                        &arenas,\n                                                                        id,\n                                                                        resolve::MakeGlobMap::No);\n-                    print_flowgraph(variants, analysis, code, out)\n+                    print_flowgraph(variants, analysis, code, mode, out)\n                 }\n                 None => {\n                     let message = format!(\"--pretty=flowgraph needs \\\n@@ -635,20 +646,23 @@ pub fn pretty_print_input(sess: Session,\n fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n                                  analysis: ty::CrateAnalysis,\n                                  code: blocks::Code,\n+                                 mode: PpFlowGraphMode,\n                                  mut out: W) -> io::IoResult<()> {\n     let ty_cx = &analysis.ty_cx;\n     let cfg = match code {\n         blocks::BlockCode(block) => cfg::CFG::new(ty_cx, &*block),\n         blocks::FnLikeCode(fn_like) => cfg::CFG::new(ty_cx, &*fn_like.body()),\n     };\n+    let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n+    let lcfg = LabelledCFG {\n+        ast_map: &ty_cx.map,\n+        cfg: &cfg,\n+        name: format!(\"node_{}\", code.id()),\n+        labelled_edges: labelled_edges,\n+    };\n \n     match code {\n         _ if variants.len() == 0 => {\n-            let lcfg = LabelledCFG {\n-                ast_map: &ty_cx.map,\n-                cfg: &cfg,\n-                name: format!(\"node_{}\", code.id()),\n-            };\n             let r = dot::render(&lcfg, &mut out);\n             return expand_err_details(r);\n         }\n@@ -662,11 +676,6 @@ fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n             let (bccx, analysis_data) =\n                 borrowck::build_borrowck_dataflow_data_for_fn(ty_cx, fn_parts);\n \n-            let lcfg = LabelledCFG {\n-                ast_map: &ty_cx.map,\n-                cfg: &cfg,\n-                name: format!(\"node_{}\", code.id()),\n-            };\n             let lcfg = borrowck_dot::DataflowLabeller {\n                 inner: lcfg,\n                 variants: variants,"}]}