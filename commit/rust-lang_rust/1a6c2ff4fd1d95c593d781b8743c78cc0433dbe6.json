{"sha": "1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "node_id": "C_kwDOAAsO6NoAKDFhNmMyZmY0ZmQxZDk1YzU5M2Q3ODFiODc0M2M3OGNjMDQzM2RiZTY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-15T01:18:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-15T02:15:56Z"}, "message": "make unaligned_reference warning visible in future compat report", "tree": {"sha": "f46ef54185429b39b838fd7a7b0c97c7b3b754d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46ef54185429b39b838fd7a7b0c97c7b3b754d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "html_url": "https://github.com/rust-lang/rust/commit/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30d6d9096e23a6206b6950b8f28a85d327a42fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d6d9096e23a6206b6950b8f28a85d327a42fc", "html_url": "https://github.com/rust-lang/rust/commit/e30d6d9096e23a6206b6950b8f28a85d327a42fc"}], "stats": {"total": 451, "additions": 451, "deletions": 0}, "files": [{"sha": "a42e3d5d9578502a216ce6624e676498139ac99c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -1141,6 +1141,7 @@ declare_lint! {\n     \"detects unaligned references to fields of packed structs\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n     report_in_external_macro\n }"}, {"sha": "f3840273cfaf7ae4a4c4ad25eb414002649aa827", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -102,3 +102,55 @@ LL |     match (&u2.a,) { (_,) => { } }\n error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:23:13\n+   |\n+LL |     let _ = &p.b;\n+   |             ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:29:17\n+   |\n+LL |     let (_,) = (&p.b,);\n+   |                 ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:39:11\n+   |\n+LL |     match &p.b  { _ => { } }\n+   |           ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:45:12\n+   |\n+LL |     match (&p.b,)  { (_,) => { } }\n+   |            ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "8629837ba8d344ea0520ff44ffa375260581fd58", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -13,3 +13,17 @@ LL |         println!(\"{}\", foo.x);\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/repr_packed.rs:21:24\n+   |\n+LL |         println!(\"{}\", foo.x);\n+   |                        ^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "1002b359f60bacaee5d0a4658e05c307e695ebcd", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -45,3 +45,67 @@ LL | #[derive(PartialEq)]\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:8:16\n+   |\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:8:23\n+   |\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                       ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:16:10\n+   |\n+LL | #[derive(PartialEq, Eq)]\n+   |          ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:25:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "ed5dd2ec0118160fc835573aa46af434791e118f", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -82,3 +82,122 @@ LL |         let _ = &packed2.x;\n \n error: aborting due to 7 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:22:17\n+   |\n+LL |         let _ = &good.ptr;\n+   |                 ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:24:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:27:17\n+   |\n+LL |         let _ = &good.data as *const _;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:29:27\n+   |\n+LL |         let _: *const _ = &good.data;\n+   |                           ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:32:17\n+   |\n+LL |         let _ = good.data.clone();\n+   |                 ^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:35:17\n+   |\n+LL |         let _ = &good.data2[0];\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:45:17\n+   |\n+LL |         let _ = &packed2.x;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "1262c21ee78e236381a39fecc4c703ce90f6089b", "filename": "src/test/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -29,3 +29,33 @@ LL | | }\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references_external_macro.rs:5:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references_external_macro.rs:5:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "667b70afb8787c5c66f41c9ece04c54152f2f0ad", "filename": "src/test/ui/packed/issue-27060-rpass.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -0,0 +1,68 @@\n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:15:13\n+   |\n+LL |     let _ = &good.data; // ok\n+   |             ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:16:13\n+   |\n+LL |     let _ = &good.data2[0]; // ok\n+   |             ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:18:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:19:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "1bab16e6ddaa38047dba17032d8787d926356c60", "filename": "src/test/ui/packed/issue-27060.stderr", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -45,3 +45,55 @@ LL |     let _ = &good.data2[0];\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:15:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:17:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:20:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:22:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "dcd1c19fa16a8344eb9c6638116a665f8adf3962", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -16,3 +16,20 @@ LL | #[warn(unaligned_references)]\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "fb483227e20c124b78bac182246933bccaf44bf0", "filename": "src/test/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "patch": "@@ -27,3 +27,37 @@ LL |     let brw = &foo.baz;\n \n warning: 2 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:26:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:31:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}]}