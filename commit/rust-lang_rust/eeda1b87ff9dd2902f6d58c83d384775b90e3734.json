{"sha": "eeda1b87ff9dd2902f6d58c83d384775b90e3734", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGExYjg3ZmY5ZGQyOTAyZjZkNThjODNkMzg0Nzc1YjkwZTM3MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-22T07:15:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-22T07:15:30Z"}, "message": "auto merge of #17212 : mahkoh/rust/vim, r=kballard\n\nThere are currently two huge problems with the indent file:\r\n\r\n1. Long list-like things cannot be indented. See #14446 for one example. Another one is long enums with over 100 lines, including comments. The indentation process stops after 100 lines and the rest is in column 0.\r\n2. In certain files, opening a new line at mod level is extremely slow. See [this](https://github.com/mahkoh/posix.rs/blob/master/src/unistd/mod.rs) for an example. Opening a line at the very end and holing \\<cr> down will freeze vim temporarily.\r\n\r\nThe reason for 1. is that cindent doesn't properly indent things that end with a `,` and the indent file tries to work around this by using the indentation of the previous line. It does this by recursively calling a function on the previous lines until it reaches the start of the block. Naturally O(n^2) function calls don't scale very well. Instead of recalculating the indentation of the previous line, we will now simply use the given indentation of the previous line and let the user deal with the rest. This is sufficient unless the user manually mis-indents a line.\r\n\r\nThe reason for 2. seems to be function calls of the form\r\n```\r\nsearchpair('{\\|(', '', '}\\|)', 'nbW', 's:is_string_comment(line(\".\"), col(\".\"))')\r\n```\r\nI've no idea what this even does or why it is there since I cannot reproduce the mistake cindent is supposed to make without this fix. Therefore I've simply removed that part.", "tree": {"sha": "a8470e0d859aa920097faebda8f9174b5f07b463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8470e0d859aa920097faebda8f9174b5f07b463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeda1b87ff9dd2902f6d58c83d384775b90e3734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeda1b87ff9dd2902f6d58c83d384775b90e3734", "html_url": "https://github.com/rust-lang/rust/commit/eeda1b87ff9dd2902f6d58c83d384775b90e3734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeda1b87ff9dd2902f6d58c83d384775b90e3734/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb07e81be99271f9e240a27dcf540686d8c0bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb07e81be99271f9e240a27dcf540686d8c0bfc", "html_url": "https://github.com/rust-lang/rust/commit/cbb07e81be99271f9e240a27dcf540686d8c0bfc"}, {"sha": "39116d01914854882f62b1306e8b96fb0b4f9842", "url": "https://api.github.com/repos/rust-lang/rust/commits/39116d01914854882f62b1306e8b96fb0b4f9842", "html_url": "https://github.com/rust-lang/rust/commit/39116d01914854882f62b1306e8b96fb0b4f9842"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "300d7dacfa9ae57c3b119470448f7e91f6a7d992", "filename": "src/etc/vim/indent/rust.vim", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eeda1b87ff9dd2902f6d58c83d384775b90e3734/src%2Fetc%2Fvim%2Findent%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/eeda1b87ff9dd2902f6d58c83d384775b90e3734/src%2Fetc%2Fvim%2Findent%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Findent%2Frust.vim?ref=eeda1b87ff9dd2902f6d58c83d384775b90e3734", "patch": "@@ -1,7 +1,7 @@\n \" Vim indent file\n \" Language:         Rust\n \" Author:           Chris Morgan <me@chrismorgan.info>\n-\" Last Change:      2013 Oct 29\n+\" Last Change:      2014 Sep 13\n \n \" Only load this indent file when no other was loaded.\n if exists(\"b:did_indent\")\n@@ -10,7 +10,7 @@ endif\n let b:did_indent = 1\n \n setlocal cindent\n-setlocal cinoptions=L0,(0,Ws,JN,j1\n+setlocal cinoptions=L0,(0,Ws,J1,j1\n setlocal cinkeys=0{,0},!^F,o,O,0[,0]\n \" Don't think cinwords will actually do anything at all... never mind\n setlocal cinwords=for,if,else,while,loop,impl,mod,unsafe,trait,struct,enum,fn,extern\n@@ -151,40 +151,42 @@ function GetRustIndent(lnum)\n \t\t\"\n \t\t\" There are probably other cases where we don't want to do this as\n \t\t\" well. Add them as needed.\n-\t\treturn GetRustIndent(a:lnum - 1)\n+\t\treturn indent(prevlinenum)\n \tendif\n \n-\t\" cindent doesn't do the module scope well at all; e.g.::\n-\t\"\n-\t\" static FOO : &'static [bool] = [\n-\t\" true,\n-\t\"     false,\n-\t\"     false,\n-\t\"     true,\n-\t\"     ];\n-\t\"\n-\t\"     uh oh, next statement is indented further!\n+\tif !has(\"patch-7.4.355\")\n+\t\t\" cindent before 7.4.355 doesn't do the module scope well at all; e.g.::\n+\t\t\"\n+\t\t\" static FOO : &'static [bool] = [\n+\t\t\" true,\n+\t\t\"\t false,\n+\t\t\"\t false,\n+\t\t\"\t true,\n+\t\t\"\t ];\n+\t\t\"\n+\t\t\"\t uh oh, next statement is indented further!\n \n-\t\" Note that this does *not* apply the line continuation pattern properly;\n-\t\" that's too hard to do correctly for my liking at present, so I'll just\n-\t\" start with these two main cases (square brackets and not returning to\n-\t\" column zero)\n+\t\t\" Note that this does *not* apply the line continuation pattern properly;\n+\t\t\" that's too hard to do correctly for my liking at present, so I'll just\n+\t\t\" start with these two main cases (square brackets and not returning to\n+\t\t\" column zero)\n \n-\tcall cursor(a:lnum, 1)\n-\tif searchpair('{\\|(', '', '}\\|)', 'nbW',\n-\t\t\t\t\\ 's:is_string_comment(line(\".\"), col(\".\"))') == 0\n-\t\tif searchpair('\\[', '', '\\]', 'nbW',\n+\t\tcall cursor(a:lnum, 1)\n+\t\tif searchpair('{\\|(', '', '}\\|)', 'nbW',\n \t\t\t\t\t\\ 's:is_string_comment(line(\".\"), col(\".\"))') == 0\n-\t\t\t\" Global scope, should be zero\n-\t\t\treturn 0\n-\t\telse\n-\t\t\t\" At the module scope, inside square brackets only\n-\t\t\t\"if getline(a:lnum)[0] == ']' || search('\\[', '', '\\]', 'nW') == a:lnum\n-\t\t\tif line =~ \"^\\\\s*]\"\n-\t\t\t\t\" It's the closing line, dedent it\n+\t\t\tif searchpair('\\[', '', '\\]', 'nbW',\n+\t\t\t\t\t\t\\ 's:is_string_comment(line(\".\"), col(\".\"))') == 0\n+\t\t\t\t\" Global scope, should be zero\n \t\t\t\treturn 0\n \t\t\telse\n-\t\t\t\treturn &shiftwidth\n+\t\t\t\t\" At the module scope, inside square brackets only\n+\t\t\t\t\"if getline(a:lnum)[0] == ']' || search('\\[', '', '\\]', 'nW') == a:lnum\n+\t\t\t\tif line =~ \"^\\\\s*]\"\n+\t\t\t\t\t\" It's the closing line, dedent it\n+\t\t\t\t\treturn 0\n+\t\t\t\telse\n+\t\t\t\t\treturn &shiftwidth\n+\t\t\t\tendif\n \t\t\tendif\n \t\tendif\n \tendif"}]}