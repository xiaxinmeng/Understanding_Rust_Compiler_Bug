{"sha": "39b02fdcd26adc95540e96c82b93beb926b6606f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjAyZmRjZDI2YWRjOTU1NDBlOTZjODJiOTNiZWI5MjZiNjYwNmY=", "commit": {"author": {"name": "Guillem Nieto", "email": "gnieto.talo@gmail.com", "date": "2018-11-05T21:46:07Z"}, "committer": {"name": "Guillem Nieto", "email": "gnieto@scopely.com", "date": "2018-11-25T22:34:23Z"}, "message": "Fix some warnings related to Self", "tree": {"sha": "a8cd2f696feeff706bd266d73c8c64970c23887f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8cd2f696feeff706bd266d73c8c64970c23887f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b02fdcd26adc95540e96c82b93beb926b6606f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b02fdcd26adc95540e96c82b93beb926b6606f", "html_url": "https://github.com/rust-lang/rust/commit/39b02fdcd26adc95540e96c82b93beb926b6606f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b02fdcd26adc95540e96c82b93beb926b6606f/comments", "author": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnieto", "id": 4637936, "node_id": "MDQ6VXNlcjQ2Mzc5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4637936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnieto", "html_url": "https://github.com/gnieto", "followers_url": "https://api.github.com/users/gnieto/followers", "following_url": "https://api.github.com/users/gnieto/following{/other_user}", "gists_url": "https://api.github.com/users/gnieto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnieto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnieto/subscriptions", "organizations_url": "https://api.github.com/users/gnieto/orgs", "repos_url": "https://api.github.com/users/gnieto/repos", "events_url": "https://api.github.com/users/gnieto/events{/privacy}", "received_events_url": "https://api.github.com/users/gnieto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5", "html_url": "https://github.com/rust-lang/rust/commit/5b77ee95dc6c8cadfba8b5f82b427efa3e0f23c5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2af657a5a6afc3c37b5bdd4a73e64151a8b16196", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39b02fdcd26adc95540e96c82b93beb926b6606f/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b02fdcd26adc95540e96c82b93beb926b6606f/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=39b02fdcd26adc95540e96c82b93beb926b6606f", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(variable_name) = path.segments.get(0);\n \n             // Extract len argument\n-            if let Some(ref len_arg) = Pass::is_vec_with_capacity(right);\n+            if let Some(ref len_arg) = Self::is_vec_with_capacity(right);\n \n             then {\n                 let vi = VecAllocation {\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_initialization(cx, vi, expr.id);\n+                Self::search_initialization(cx, vi, expr.id);\n             }\n         }\n     }\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let DeclKind::Local(ref local) = decl.node;\n             if let PatKind::Binding(BindingAnnotation::Mutable, _, variable_name, None) = local.pat.node;\n             if let Some(ref init) = local.init;\n-            if let Some(ref len_arg) = Pass::is_vec_with_capacity(init);\n+            if let Some(ref len_arg) = Self::is_vec_with_capacity(init);\n \n             then {\n                 let vi = VecAllocation {\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     len_expr: len_arg,\n                 };\n \n-                Pass::search_initialization(cx, vi, stmt.node.id());\n+                Self::search_initialization(cx, vi, stmt.node.id());\n             }\n         }\n     }\n@@ -183,14 +183,14 @@ impl Pass {\n         v.visit_block(enclosing_body.unwrap());\n \n         if let Some(ref allocation_expr) = v.slow_expression {\n-            Pass::lint_initialization(cx, allocation_expr, &v.vec_alloc);\n+            Self::lint_initialization(cx, allocation_expr, &v.vec_alloc);\n         }\n     }\n \n     fn lint_initialization<'tcx>(cx: &LateContext<'_, 'tcx>, initialization: &InitializationType<'tcx>, vec_alloc: &VecAllocation<'_>) {\n         match initialization {\n             InitializationType::UnsafeSetLen(e) =>\n-                Pass::emit_lint(\n+                Self::emit_lint(\n                     cx,\n                     e,\n                     vec_alloc,\n@@ -200,7 +200,7 @@ impl Pass {\n \n             InitializationType::Extend(e) |\n             InitializationType::Resize(e) =>\n-                Pass::emit_lint(\n+                Self::emit_lint(\n                     cx,\n                     e,\n                     vec_alloc,"}]}