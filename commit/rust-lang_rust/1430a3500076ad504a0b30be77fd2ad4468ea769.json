{"sha": "1430a3500076ad504a0b30be77fd2ad4468ea769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MzBhMzUwMDA3NmFkNTA0YTBiMzBiZTc3ZmQyYWQ0NDY4ZWE3Njk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-11-22T20:14:09Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T16:22:39Z"}, "message": "move librustc/plugin to librustc_plugin\n\nthis is a [breaking-change] to all plugin authors - sorry", "tree": {"sha": "61739ffce74c80568a634852a4b09b5ec689d365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61739ffce74c80568a634852a4b09b5ec689d365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1430a3500076ad504a0b30be77fd2ad4468ea769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1430a3500076ad504a0b30be77fd2ad4468ea769", "html_url": "https://github.com/rust-lang/rust/commit/1430a3500076ad504a0b30be77fd2ad4468ea769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1430a3500076ad504a0b30be77fd2ad4468ea769/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26b19206d34f578a8eae658ece59990d8abb43ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b19206d34f578a8eae658ece59990d8abb43ba", "html_url": "https://github.com/rust-lang/rust/commit/26b19206d34f578a8eae658ece59990d8abb43ba"}], "stats": {"total": 139, "additions": 100, "deletions": 39}, "files": [{"sha": "89769b850e31f30a8f4212a3e341ae40a4988dc0", "filename": "mk/crates.mk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -56,7 +56,8 @@ TARGET_CRATES := libc std flate arena term \\\n \t\t alloc_system\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures rustc_front rustc_platform_intrinsics\n+                rustc_data_structures rustc_front rustc_platform_intrinsics \\\n+                rustc_plugin\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n@@ -94,14 +95,15 @@ DEPS_rustc_borrowck := rustc rustc_front log graphviz syntax\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n-\t\t             rustc_trans rustc_privacy rustc_lint rustc_front\n+\t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin\n \n DEPS_rustc_front := std syntax log serialize\n DEPS_rustc_lint := rustc log syntax\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n+DEPS_rustc_plugin := rustc syntax\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n                     log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics"}, {"sha": "800be13a243fb9e09b17e2e6655e98ee0f80978b", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -8,12 +8,12 @@ extend the compiler's behavior with new syntax extensions, lint checks, etc.\n A plugin is a dynamic library crate with a designated *registrar* function that\n registers extensions with `rustc`. Other crates can load these extensions using\n the crate attribute `#![plugin(...)]`.  See the\n-[`rustc::plugin`](../rustc/plugin/index.html) documentation for more about the\n+[`rustc_plugin`](../rustc_plugin/index.html) documentation for more about the\n mechanics of defining and loading a plugin.\n \n If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s [`args` method](../rustc/plugin/registry/struct.Registry.html#method.args).\n+`Registry`'s [`args` method](../rustc_plugin/registry/struct.Registry.html#method.args).\n \n In the vast majority of cases, a plugin should *only* be used through\n `#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n@@ -43,13 +43,14 @@ that implements Roman numeral integer literals.\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::TokenTree;\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         -> Box<MacResult + 'static> {\n@@ -120,7 +121,7 @@ The advantages over a simple `fn(&str) -> u32` are:\n In addition to procedural macros, you can define new\n [`derive`](../reference.html#derive)-like attributes and other kinds of\n extensions.  See\n-[`Registry::register_syntax_extension`](../rustc/plugin/registry/struct.Registry.html#method.register_syntax_extension)\n+[`Registry::register_syntax_extension`](../rustc_plugin/registry/struct.Registry.html#method.register_syntax_extension)\n and the [`SyntaxExtension`\n enum](https://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n a more involved macro example, see\n@@ -189,10 +190,11 @@ extern crate syntax;\n // Load rustc as a plugin to get macros\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n                   EarlyLintPassObject, LintArray};\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n use syntax::ast;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");"}, {"sha": "a088567b4190d6df489ee9a63e03a7ddcaad5e25", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -2181,6 +2181,5 @@ register_diagnostics! {\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0492, // cannot borrow a constant which contains interior mutability\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0498, // malformed plugin attribute\n     E0514, // metadata version mismatch\n }"}, {"sha": "62646f6bc565ef0cd553cd82be030b3e0e137251", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -33,7 +33,6 @@\n #![feature(const_fn)]\n #![feature(core)]\n #![feature(duration_span)]\n-#![feature(dynamic_lib)]\n #![feature(enumset)]\n #![feature(hashmap_hasher)]\n #![feature(into_cow)]\n@@ -100,8 +99,8 @@ pub mod front {\n }\n \n pub mod middle {\n-    pub mod expr_use_visitor; // STAGE0: increase glitch immunity\n     pub mod astconv_util;\n+    pub mod expr_use_visitor; // STAGE0: increase glitch immunity\n     pub mod astencode;\n     pub mod cfg;\n     pub mod check_const;\n@@ -142,8 +141,6 @@ pub mod metadata;\n \n pub mod session;\n \n-pub mod plugin;\n-\n pub mod lint;\n \n pub mod util {"}, {"sha": "d00b08538d235eb7cb7ec4716f7a8c31dec8e201", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -22,8 +22,6 @@ use rustc::metadata::cstore::CStore;\n use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n-use rustc::plugin::registry::Registry;\n-use rustc::plugin;\n use rustc::util::nodemap::NodeMap;\n use rustc::util::common::time;\n use rustc_borrowck as borrowck;\n@@ -33,6 +31,8 @@ use rustc_trans::back::write;\n use rustc_trans::trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n+use rustc_plugin::registry::Registry;\n+use rustc_plugin as plugin;\n use rustc_front::hir;\n use rustc_front::lowering::{lower_crate, LoweringContext};\n use super::Compilation;"}, {"sha": "fdbb093eab084e1e93efe28c916e9a30a9b2d4dc", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -45,6 +45,7 @@ extern crate rustc_back;\n extern crate rustc_borrowck;\n extern crate rustc_front;\n extern crate rustc_lint;\n+extern crate rustc_plugin;\n extern crate rustc_privacy;\n extern crate rustc_mir;\n extern crate rustc_resolve;"}, {"sha": "d48dbdc5f51713d0df5567ce57399feb9974be90", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -13,7 +13,7 @@\n //! This currently only contains the definitions and implementations\n //! of most of the lints that `rustc` supports directly, it does not\n //! contain the infrastructure for defining/registering lints. That is\n-//! available in `rustc::lint` and `rustc::plugin` respectively.\n+//! available in `rustc::lint` and `rustc_plugin` respectively.\n //!\n //! # Note\n //!"}, {"sha": "00f58c6af91554d8e63e6b1234e40be39413db70", "filename": "src/librustc_plugin/build.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "previous_filename": "src/librustc/plugin/build.rs"}, {"sha": "100c1db1439743e8bf62a99396904c5bab1431aa", "filename": "src/librustc_plugin/diagnostics.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fdiagnostics.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+\n+}\n+\n+register_diagnostics! {\n+    E0498  // malformed plugin attribute\n+}"}, {"sha": "33d63d833c7fa8a372f36759247183c12f0e67bf", "filename": "src/librustc_plugin/lib.rs", "status": "renamed", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -50,8 +50,31 @@\n //! See the [Plugins Chapter](../../book/compiler-plugins.html) of the book\n //! for more examples.\n \n+#![cfg_attr(stage0, feature(custom_attribute))]\n+#![crate_name = \"rustc_plugin\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, staged_api)]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(dynamic_lib)]\n+#![feature(staged_api)]\n+#![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_private)]\n+\n+#[macro_use] extern crate log;\n+#[macro_use] extern crate syntax;\n+#[macro_use] #[no_link] extern crate rustc_bitflags;\n+\n+extern crate rustc;\n+extern crate rustc_front;\n+\n pub use self::registry::Registry;\n \n+pub mod diagnostics;\n pub mod registry;\n pub mod load;\n pub mod build;", "previous_filename": "src/librustc/plugin/mod.rs"}, {"sha": "d121a306c61c73e88ddd8a16bf5ebbd908309b2d", "filename": "src/librustc_plugin/load.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -10,10 +10,10 @@\n \n //! Used by `rustc` when loading a plugin.\n \n-use session::Session;\n-use metadata::creader::CrateReader;\n-use metadata::cstore::CStore;\n-use plugin::registry::Registry;\n+use rustc::session::Session;\n+use rustc::metadata::creader::CrateReader;\n+use rustc::metadata::cstore::CStore;\n+use registry::Registry;\n \n use std::borrow::ToOwned;\n use std::env;", "previous_filename": "src/librustc/plugin/load.rs"}, {"sha": "3138d7fa1db56ff8ac4648cac363bad373618afd", "filename": "src/librustc_plugin/registry.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -10,8 +10,8 @@\n \n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n-use lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n-use session::Session;\n+use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n+use rustc::session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};", "previous_filename": "src/librustc/plugin/registry.rs"}, {"sha": "bab3721a313328b0c067ceb84b7af36ad262a3ee", "filename": "src/test/auxiliary/attr_plugin_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fattr_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fattr_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fattr_plugin_test.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -16,9 +16,10 @@\n extern crate syntax;\n \n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::feature_gate::AttributeType;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n \n "}, {"sha": "542b10fd1c68c396b83af758252288e73efd3965", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -16,6 +16,7 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::ast;\n use syntax::codemap::Span;\n@@ -25,7 +26,7 @@ use syntax::ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_subst\n use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use syntax::parse::token;\n use syntax::ptr::P;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "f44e77d563a9e8b018b6c1c12db9e6cb0de7f298", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -16,6 +16,7 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n@@ -27,7 +28,7 @@ use syntax::ext::deriving::generic::{Substructure, Struct, EnumMatching};\n use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use syntax::parse::token;\n use syntax::ptr::P;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "25a75c2d2952e406bb94478833e2839259063a3c", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -15,12 +15,13 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::ast;\n use syntax::codemap;\n use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n use syntax::util::small_vector::SmallVector;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "1933188ccbf0287de2f5ee7cbc8f215603b84f57", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -15,10 +15,11 @@\n \n #[macro_use] extern crate rustc;\n extern crate rustc_front;\n+extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n use rustc_front::hir;\n use syntax::attr;\n "}, {"sha": "98ed86bb390f3e397773e9e103a73d8b019e1ff8", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -18,10 +18,11 @@ extern crate rustc_front;\n // Load rustc as a plugin to get macros\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use rustc_front::hir;\n use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n "}, {"sha": "8ea131da338cb1bd61f60fac56e32fe166a8beb6", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -18,10 +18,11 @@ extern crate syntax;\n // Load rustc as a plugin to get macros\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n                   EarlyLintPassObject, LintArray};\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n "}, {"sha": "59cfdd1e04a03cc890875a9a799f2985ab022a16", "filename": "src/test/auxiliary/llvm_pass_plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,8 +14,9 @@\n #![feature(rustc_private)]\n \n extern crate rustc;\n+extern crate rustc_plugin;\n \n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "9cf0d756f40ba101ef30c251e20945be2f266ff8", "filename": "src/test/auxiliary/lto-syntax-extension-plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flto-syntax-extension-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Flto-syntax-extension-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flto-syntax-extension-plugin.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,8 +14,9 @@\n #![feature(rustc_private)]\n \n extern crate rustc;\n+extern crate rustc_plugin;\n \n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(_reg: &mut Registry) {}"}, {"sha": "9e693fcc56440fdee349c02e96b290ca71ead35d", "filename": "src/test/auxiliary/macro_crate_MacroRulesTT.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,10 +14,11 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::parse::token;\n use syntax::ext::base::MacroRulesTT;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "fe61c80b4c3821680f2a66319bb9e58d782604a3", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,13 +14,14 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::ast::{self, TokenTree, Item, MetaItem, ImplItem, TraitItem};\n use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[macro_export]\n macro_rules! exported_macro { () => (2) }"}, {"sha": "f6e80266a15f51f679b09f1f2e227f8072a79062", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -15,6 +15,7 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use std::borrow::ToOwned;\n use syntax::ast;\n@@ -24,7 +25,7 @@ use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT}\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n struct Expander {\n     args: Vec<P<ast::MetaItem>>,"}, {"sha": "f56983c14b1bc88e560746d0b7c483bea01f1a67", "filename": "src/test/auxiliary/plugin_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,10 +14,11 @@\n #![feature(box_syntax, rustc_private)]\n \n extern crate rustc;\n+extern crate rustc_plugin;\n \n use std::any::Any;\n use std::cell::RefCell;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n struct Foo {\n     foo: isize"}, {"sha": "8b5ff7cf07c6951d6caad3844edaaffaa167b4d7", "filename": "src/test/auxiliary/plugin_with_plugin_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -15,8 +15,9 @@\n \n extern crate macro_crate_test;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(_: &mut Registry) { }"}, {"sha": "713a7d1e811a2c891281f4ab3a763e0fd44c7a87", "filename": "src/test/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -15,6 +15,7 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::codemap::Span;\n use syntax::parse::token::{self, str_to_ident, NtExpr, NtPat};\n@@ -24,7 +25,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use syntax::ext::tt::macro_parser::{Success, Failure, Error};\n use syntax::ptr::P;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         -> Box<MacResult + 'static> {"}, {"sha": "ae1568b2f88e1c7f819985534bedcb7b39f5ece9", "filename": "src/test/auxiliary/rlib_crate_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frlib_crate_test.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -14,8 +14,9 @@\n #![feature(plugin_registrar, rustc_private)]\n \n extern crate rustc;\n+extern crate rustc_plugin;\n \n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(_: &mut Registry) {}"}, {"sha": "c262b0dba2553c8b0ef566e5e955ed2e9f038f1d", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -16,13 +16,14 @@\n \n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::codemap::Span;\n use syntax::ast::TokenTree;\n use syntax::parse::token;\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;  // trait for expr_usize\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n // WARNING WARNING WARNING WARNING WARNING\n // ======================================="}, {"sha": "7281698a7fb3491f2f132130b98394f7c2c0a7ce", "filename": "src/test/auxiliary/syntax_extension_with_dll_deps_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1430a3500076ad504a0b30be77fd2ad4468ea769/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax_extension_with_dll_deps_2.rs?ref=1430a3500076ad504a0b30be77fd2ad4468ea769", "patch": "@@ -16,11 +16,12 @@\n extern crate syntax_extension_with_dll_deps_1 as other;\n extern crate syntax;\n extern crate rustc;\n+extern crate rustc_plugin;\n \n use syntax::ast::{TokenTree, Item, MetaItem};\n use syntax::codemap::Span;\n use syntax::ext::base::*;\n-use rustc::plugin::Registry;\n+use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {"}]}