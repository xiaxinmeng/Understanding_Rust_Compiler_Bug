{"sha": "bdbedb9d35903be0e3f587c603db49c014ef7d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYmVkYjlkMzU5MDNiZTBlM2Y1ODdjNjAzZGI0OWMwMTRlZjdkOWY=", "commit": {"author": {"name": "Vincent Belliard", "email": "vincent@famillebelliard.fr", "date": "2012-08-22T18:40:42Z"}, "committer": {"name": "Vincent Belliard", "email": "vincent@famillebelliard.fr", "date": "2012-08-25T15:01:52Z"}, "message": "implements issue #2356", "tree": {"sha": "39c7e052e0a2cf909c9247b11af25d9bf303fdcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c7e052e0a2cf909c9247b11af25d9bf303fdcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdbedb9d35903be0e3f587c603db49c014ef7d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbedb9d35903be0e3f587c603db49c014ef7d9f", "html_url": "https://github.com/rust-lang/rust/commit/bdbedb9d35903be0e3f587c603db49c014ef7d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdbedb9d35903be0e3f587c603db49c014ef7d9f/comments", "author": {"login": "Vincent-Belliard", "id": 2185554, "node_id": "MDQ6VXNlcjIxODU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2185554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vincent-Belliard", "html_url": "https://github.com/Vincent-Belliard", "followers_url": "https://api.github.com/users/Vincent-Belliard/followers", "following_url": "https://api.github.com/users/Vincent-Belliard/following{/other_user}", "gists_url": "https://api.github.com/users/Vincent-Belliard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vincent-Belliard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vincent-Belliard/subscriptions", "organizations_url": "https://api.github.com/users/Vincent-Belliard/orgs", "repos_url": "https://api.github.com/users/Vincent-Belliard/repos", "events_url": "https://api.github.com/users/Vincent-Belliard/events{/privacy}", "received_events_url": "https://api.github.com/users/Vincent-Belliard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vincent-Belliard", "id": 2185554, "node_id": "MDQ6VXNlcjIxODU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2185554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vincent-Belliard", "html_url": "https://github.com/Vincent-Belliard", "followers_url": "https://api.github.com/users/Vincent-Belliard/followers", "following_url": "https://api.github.com/users/Vincent-Belliard/following{/other_user}", "gists_url": "https://api.github.com/users/Vincent-Belliard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vincent-Belliard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vincent-Belliard/subscriptions", "organizations_url": "https://api.github.com/users/Vincent-Belliard/orgs", "repos_url": "https://api.github.com/users/Vincent-Belliard/repos", "events_url": "https://api.github.com/users/Vincent-Belliard/events{/privacy}", "received_events_url": "https://api.github.com/users/Vincent-Belliard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "html_url": "https://github.com/rust-lang/rust/commit/6277046fa0a5c119885ba33bcb6ac2f4fba0228f"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "b1023a52d201087f9a166772137ab0963b0a1090", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bdbedb9d35903be0e3f587c603db49c014ef7d9f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbedb9d35903be0e3f587c603db49c014ef7d9f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=bdbedb9d35903be0e3f587c603db49c014ef7d9f", "patch": "@@ -4069,6 +4069,47 @@ struct Resolver {\n         }\n     }\n \n+    fn name_exists_in_scope_class(name: &str) -> bool {\n+        let mut i = self.type_ribs.len();\n+        while i != 0 {\n+          i -= 1;\n+          let rib = self.type_ribs.get_elt(i);\n+          match rib.kind {\n+            MethodRibKind(node_id, _) =>\n+              for vec::each(self.crate.node.module.items) |item| {\n+                if item.id == node_id {\n+                  match item.node {\n+                    item_class(class_def, _) => {\n+                      for vec::each(class_def.fields) |field| {\n+                        match field.node.kind {\n+                          syntax::ast::unnamed_field\n+                            => {},\n+                          syntax::ast::named_field(ident, _, _)\n+                            => {\n+                              if str::eq_slice(self.session.str_of(ident),\n+                                               name) {\n+                                return true\n+                              }\n+                            }\n+                        }\n+                      }\n+                      for vec::each(class_def.methods) |method| {\n+                        if str::eq_slice(self.session.str_of(method.ident),\n+                                         name) {\n+                          return true\n+                        }\n+                      }\n+                    }\n+                    _ => {}\n+                  }\n+                }\n+            },\n+          _ => {}\n+        }\n+      }\n+      return false;\n+    }\n+\n     fn resolve_expr(expr: @expr, visitor: ResolveVisitor) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n@@ -4093,12 +4134,21 @@ struct Resolver {\n                         self.record_def(expr.id, def);\n                     }\n                     none => {\n-                        self.session.span_err(\n-                            expr.span,\n-                            fmt!(\"unresolved name: %s\",\n-                                 connect(path.idents.map(\n-                                     |x| self.session.str_of(x)),\n-                                         ~\"::\")));\n+                        let wrong_name =\n+                            connect(path.idents.map(\n+                                |x| self.session.str_of(x)), ~\"::\") ;\n+                        if self.name_exists_in_scope_class(wrong_name) {\n+                            self.session.span_err(expr.span,\n+                                        fmt!(\"unresolved name: %s. \\\n+                                            Did you mean: self.%s\",\n+                                        wrong_name,\n+                                        wrong_name));\n+                        }\n+                        else {\n+                            self.session.span_err(expr.span,\n+                                                fmt!(\"unresolved name: %s\",\n+                                                wrong_name));\n+                        }\n                     }\n                 }\n "}]}