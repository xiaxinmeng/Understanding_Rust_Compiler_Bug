{"sha": "436dcd9656b89b10a9719828a3421b4586ac331f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNmRjZDk2NTZiODliMTBhOTcxOTgyOGEzNDIxYjQ1ODZhYzMzMWY=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T09:32:01Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T09:32:01Z"}, "message": "move tests to ra_hir_ty", "tree": {"sha": "bb981a4da518e0a578af79cd609cc42531f72172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb981a4da518e0a578af79cd609cc42531f72172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/436dcd9656b89b10a9719828a3421b4586ac331f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/436dcd9656b89b10a9719828a3421b4586ac331f", "html_url": "https://github.com/rust-lang/rust/commit/436dcd9656b89b10a9719828a3421b4586ac331f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/436dcd9656b89b10a9719828a3421b4586ac331f/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c8058f1236474b22b69971524015558384c077", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c8058f1236474b22b69971524015558384c077", "html_url": "https://github.com/rust-lang/rust/commit/f0c8058f1236474b22b69971524015558384c077"}], "stats": {"total": 259, "additions": 155, "deletions": 104}, "files": [{"sha": "8efe05877178acfdabb2049f7211b74ebb226f4b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/436dcd9656b89b10a9719828a3421b4586ac331f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436dcd9656b89b10a9719828a3421b4586ac331f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=436dcd9656b89b10a9719828a3421b4586ac331f", "patch": "@@ -2888,3 +2888,158 @@ impl<A: Step> iter::Iterator for ops::Range<A> {\n     );\n     assert_eq!(t, \"i32\");\n }\n+\n+#[test]\n+fn infer_closure_arg() {\n+    assert_snapshot!(\n+        infer(\n+            r#\"\n+            //- /lib.rs\n+\n+            enum Option<T> {\n+                None,\n+                Some(T)\n+            }\n+\n+            fn foo() {\n+                let s = Option::None;\n+                let f = |x: Option<i32>| {};\n+                (&f)(s)\n+            }\n+        \"#\n+        ),\n+        @r###\"\n+    137..259 '{     ...     }': ()\n+    159..160 's': Option<i32>\n+    163..175 'Option::None': Option<i32>\n+    197..198 'f': |Option<i32>| -> ()\n+    201..220 '|x: Op...2>| {}': |Option<i32>| -> ()\n+    202..203 'x': Option<i32>\n+    218..220 '{}': ()\n+    238..245 '(&f)(s)': ()\n+    239..241 '&f': &|Option<i32>| -> ()\n+    240..241 'f': |Option<i32>| -> ()\n+    243..244 's': Option<i32>\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_fn_trait_arg() {\n+    assert_snapshot!(\n+        infer(\n+            r#\"\n+            //- /lib.rs deps:std\n+\n+            #[lang = \"fn_once\"]\n+            pub trait FnOnce<Args> {\n+                type Output;\n+\n+                extern \"rust-call\" fn call_once(&self, args: Args) -> Self::Output;\n+            }\n+\n+            #[lang = \"fn\"]\n+            pub trait Fn<Args>:FnOnce<Args> {\n+                extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+            }\n+\n+            enum Option<T> {\n+                None,\n+                Some(T)\n+            }\n+\n+            fn foo<F, T>(f: F) -> T\n+            where\n+                F: Fn(Option<i32>) -> T,\n+            {\n+                let s = None;\n+                f(s)\n+            }\n+        \"#\n+        ),\n+        @r###\"\n+    183..187 'self': &Self\n+    189..193 'args': Args\n+    350..354 'self': &Self\n+    356..360 'args': Args\n+    515..516 'f': F\n+    597..663 '{     ...     }': T\n+    619..620 's': Option<i32>\n+    623..627 'None': Option<i32>\n+    645..646 'f': F\n+    645..649 'f(s)': T\n+    647..648 's': Option<i32>\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_box_fn_arg() {\n+    assert_snapshot!(\n+        infer(\n+            r#\"\n+            //- /lib.rs deps:std\n+\n+            #[lang = \"fn_once\"]\n+            pub trait FnOnce<Args> {\n+                type Output;\n+\n+                extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+            }\n+\n+            #[lang = \"deref\"]\n+            pub trait Deref {\n+                type Target: ?Sized;\n+\n+                fn deref(&self) -> &Self::Target;\n+            }\n+\n+            #[lang = \"owned_box\"]\n+            pub struct Box<T: ?Sized> {\n+                inner: *mut T,\n+            }\n+\n+            impl<T: ?Sized> Deref for Box<T> {\n+                type Target = T;\n+\n+                fn deref(&self) -> &T {\n+                    &self.inner\n+                }\n+            }\n+\n+            enum Option<T> {\n+                None,\n+                Some(T)\n+            }\n+\n+            fn foo() {\n+                let s = Option::None;\n+                let f: Box<dyn FnOnce(&Option<i32>)> = box (|ps| {});\n+                f(&s)\n+            }\n+        \"#\n+        ),\n+        @r###\"\n+    182..186 'self': Self\n+    188..192 'args': Args\n+    356..360 'self': &Self\n+    622..626 'self': &Box<T>\n+    634..685 '{     ...     }': &T\n+    656..667 '&self.inner': &*mut T\n+    657..661 'self': &Box<T>\n+    657..667 'self.inner': *mut T\n+    812..957 '{     ...     }': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, ({unknown},)>\n+    834..835 's': Option<i32>\n+    838..850 'Option::None': Option<i32>\n+    872..873 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n+    907..920 'box (|ps| {})': Box<|{unknown}| -> ()>\n+    912..919 '|ps| {}': |{unknown}| -> ()\n+    913..915 'ps': {unknown}\n+    917..919 '{}': ()\n+    938..939 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n+    938..943 'f(&s)': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, ({unknown},)>\n+    940..942 '&s': &Option<i32>\n+    941..942 's': Option<i32>\n+    \"###\n+    );\n+}"}, {"sha": "d870e4cbce63587f16ea696ef1d2df93d11c04fb", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/436dcd9656b89b10a9719828a3421b4586ac331f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436dcd9656b89b10a9719828a3421b4586ac331f/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=436dcd9656b89b10a9719828a3421b4586ac331f", "patch": "@@ -2410,108 +2410,4 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             ]\n             \"###);\n     }\n-\n-    #[test]\n-    fn infer_closure_arg() {\n-        check_hover_result(\n-            r#\"\n-            //- /lib.rs\n-\n-            enum Option<T> {\n-                None,\n-                Some(T)\n-            }\n-\n-            fn foo() {\n-                let s<|> = Option::None;\n-                let f = |x: Option<i32>| {};\n-                (&f)(s)\n-            }\n-        \"#,\n-            &[\"Option<i32>\"],\n-        );\n-    }\n-\n-    #[test]\n-    fn infer_fn_trait_arg() {\n-        check_hover_result(\n-            r#\"\n-            //- /lib.rs deps:std\n-\n-            #[lang = \"fn_once\"]\n-            pub trait FnOnce<Args> {\n-                type Output;\n-\n-                extern \"rust-call\" fn call_once(&self, args: Args) -> Self::Output;\n-            }\n-\n-            #[lang = \"fn\"]\n-            pub trait Fn<Args>:FnOnce<Args> {\n-                extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-            }\n-\n-            enum Option<T> {\n-                None,\n-                Some(T)\n-            }\n-\n-            fn foo<F, T>(f: F) -> T\n-            where\n-                F: Fn(Option<i32>) -> T,\n-            {\n-                let s<|> = None;\n-                f(s)\n-            }\n-            \"#,\n-            &[\"Option<i32>\"],\n-        );\n-    }\n-\n-    #[test]\n-    fn infer_box_fn_arg() {\n-        check_hover_result(\n-            r#\"\n-            //- /lib.rs deps:std\n-\n-            #[lang = \"fn_once\"]\n-            pub trait FnOnce<Args> {\n-                type Output;\n-\n-                extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-            }\n-\n-            #[lang = \"deref\"]\n-            pub trait Deref {\n-                type Target: ?Sized;\n-\n-                fn deref(&self) -> &Self::Target;\n-            }\n-\n-            #[lang = \"owned_box\"]\n-            pub struct Box<T: ?Sized> {\n-                inner: *mut T,\n-            }\n-\n-            impl<T: ?Sized> Deref for Box<T> {\n-                type Target = T;\n-\n-                fn deref(&self) -> &T {\n-                    &self.inner\n-                }\n-            }\n-\n-            enum Option<T> {\n-                None,\n-                Some(T)\n-            }\n-\n-            fn foo() {\n-                let s<|> = Option::None;\n-                let f: Box<dyn FnOnce(&Option<i32>)> = box (|ps| {});\n-                f(&s)\n-            }\n-        \"#,\n-            &[\"Option<i32>\"],\n-        );\n-    }\n }"}]}