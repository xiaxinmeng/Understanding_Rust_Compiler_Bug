{"sha": "dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYjAxZmY1NzNiNWY0NDA0ZDJlNGVmNjcwMGRjYTYzZTkxZjBlYjQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:39:02Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:23Z"}, "message": "middle: typeck: check: remove dead code", "tree": {"sha": "1d6d5e014b91a2cdcd03e9e17d08ceb82d4a5810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6d5e014b91a2cdcd03e9e17d08ceb82d4a5810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4", "html_url": "https://github.com/rust-lang/rust/commit/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f839d9ee2cbef25de4f3a4fca514f5ed8a313d", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f839d9ee2cbef25de4f3a4fca514f5ed8a313d", "html_url": "https://github.com/rust-lang/rust/commit/39f839d9ee2cbef25de4f3a4fca514f5ed8a313d"}], "stats": {"total": 46, "additions": 0, "deletions": 46}, "files": [{"sha": "b357810d52624c51fccdec9ddceaed77f0bfc01a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=dcb01ff573b5f4404d2e4ef6700dca63e91f0eb4", "patch": "@@ -510,27 +510,6 @@ fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,\n     fcx\n }\n \n-pub fn check_no_duplicate_fields(tcx: &ty::ctxt,\n-                                 fields: Vec<(ast::Ident, Span)>) {\n-    let mut field_names = HashMap::new();\n-\n-    for p in fields.iter() {\n-        let (id, sp) = *p;\n-        let orig_sp = field_names.find(&id).map(|x| *x);\n-        match orig_sp {\n-            Some(orig_sp) => {\n-                tcx.sess.span_err(sp, format!(\"duplicate field name {} in record type declaration\",\n-                                              token::get_ident(id)));\n-                tcx.sess.span_note(orig_sp, \"first declaration of this field occurred here\");\n-                break;\n-            }\n-            None => {\n-                field_names.insert(id, sp);\n-            }\n-        }\n-    }\n-}\n-\n pub fn check_struct(ccx: &CrateCtxt, id: ast::NodeId, span: Span) {\n     let tcx = ccx.tcx;\n \n@@ -1010,10 +989,6 @@ impl<'a> FnCtxt<'a> {\n         }\n     }\n \n-    pub fn block_region(&self) -> ty::Region {\n-        ty::ReScope(self.region_lb.get())\n-    }\n-\n     #[inline]\n     pub fn write_ty(&self, node_id: ast::NodeId, ty: ty::t) {\n         debug!(\"write_ty({}, {}) in fcx {}\",\n@@ -1100,18 +1075,6 @@ impl<'a> FnCtxt<'a> {\n         }\n     }\n \n-    pub fn node_ty_substs(&self, id: ast::NodeId) -> ty::substs {\n-        match self.inh.node_type_substs.borrow().find(&id) {\n-            Some(ts) => (*ts).clone(),\n-            None => {\n-                self.tcx().sess.bug(\n-                    format!(\"no type substs for node {}: {} in fcx {}\",\n-                            id, self.tcx().map.node_to_str(id),\n-                            self.tag()));\n-            }\n-        }\n-    }\n-\n     pub fn method_ty_substs(&self, id: ast::NodeId) -> ty::substs {\n         match self.inh.method_map.borrow().find(&MethodCall::expr(id)) {\n             Some(method) => method.substs.clone(),\n@@ -1167,11 +1130,6 @@ impl<'a> FnCtxt<'a> {\n         }\n     }\n \n-    pub fn can_mk_assignty(&self, sub: ty::t, sup: ty::t)\n-                           -> Result<(), ty::type_err> {\n-        infer::can_mk_coercety(self.infcx(), sub, sup)\n-    }\n-\n     pub fn mk_eqty(&self,\n                    a_is_expected: bool,\n                    origin: infer::TypeOrigin,\n@@ -3300,10 +3258,6 @@ pub fn check_block_no_value(fcx: &FnCtxt, blk: &ast::Block)  {\n     }\n }\n \n-pub fn check_block(fcx0: &FnCtxt, blk: &ast::Block)  {\n-    check_block_with_expected(fcx0, blk, None)\n-}\n-\n pub fn check_block_with_expected(fcx: &FnCtxt,\n                                  blk: &ast::Block,\n                                  expected: Option<ty::t>) {"}]}