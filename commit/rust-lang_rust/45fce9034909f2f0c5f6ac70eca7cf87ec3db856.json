{"sha": "45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmNlOTAzNDkwOWYyZjBjNWY2YWM3MGVjYTdjZjg3ZWMzZGI4NTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T19:46:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T19:46:23Z"}, "message": "ModuleSource is ItemSource", "tree": {"sha": "e8c664b75784b4395953ba6326514605e4ba40ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c664b75784b4395953ba6326514605e4ba40ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "html_url": "https://github.com/rust-lang/rust/commit/45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e4142f434b1a2aa0729387534121fdf9c812a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e4142f434b1a2aa0729387534121fdf9c812a6", "html_url": "https://github.com/rust-lang/rust/commit/a9e4142f434b1a2aa0729387534121fdf9c812a6"}], "stats": {"total": 91, "additions": 40, "deletions": 51}, "files": [{"sha": "942b5b94596d3620c3a3e21fe4ec1489a3c74f03", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "patch": "@@ -190,10 +190,7 @@ impl AnalysisImpl {\n             Some(it) => it,\n         };\n         let root = descr.crate_root();\n-        let file_id = root\n-            .source()\n-            .as_file()\n-            .expect(\"root module always has a file as a source\");\n+        let file_id = root.source().file_id();\n \n         let crate_graph = self.db.crate_graph();\n         let crate_id = crate_graph.crate_id_for_crate_root(file_id);"}, {"sha": "0f84b2d61b129702271fb1c3983c4d3d35d4717f", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "patch": "@@ -131,6 +131,10 @@ impl SourceFileItems {\n             .unwrap();\n         id\n     }\n+    pub fn id_of_source_file(&self) -> SourceFileItemId {\n+        let (id, _syntax) = self.arena.iter().next().unwrap();\n+        id\n+    }\n }\n \n impl Index<SourceFileItemId> for SourceFileItems {"}, {"sha": "0eec38797c5922319a266cbec2e801e5c8fe56bc", "filename": "crates/ra_hir/src/module/imp.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs?ref=45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "patch": "@@ -66,7 +66,7 @@ fn create_module_tree<'a>(\n \n     let source_root = db.source_root(source_root);\n     for &file_id in source_root.files.iter() {\n-        let source = ModuleSource::SourceFile(file_id);\n+        let source = ModuleSource::new_file(db, file_id);\n         if visited.contains(&source) {\n             continue; // TODO: use explicit crate_roots here\n         }\n@@ -126,7 +126,7 @@ fn build_subtree(\n                             visited,\n                             roots,\n                             Some(link),\n-                            ModuleSource::SourceFile(file_id),\n+                            ModuleSource::new_file(db, file_id),\n                         ),\n                     })\n                     .collect::<Cancelable<Vec<_>>>()?;\n@@ -157,13 +157,8 @@ fn resolve_submodule(\n     name: &SmolStr,\n     file_resolver: &FileResolverImp,\n ) -> (Vec<FileId>, Option<Problem>) {\n-    let file_id = match source {\n-        ModuleSource::SourceFile(it) => it,\n-        ModuleSource::Module(..) => {\n-            // TODO\n-            return (Vec::new(), None);\n-        }\n-    };\n+    // TODO: handle submodules of inline modules properly\n+    let file_id = source.file_id();\n     let mod_name = file_resolver.file_stem(file_id);\n     let is_dir_owner = mod_name == \"mod\" || mod_name == \"lib\" || mod_name == \"main\";\n "}, {"sha": "fa9ee94eb1a351054b3ed1e505d1e3247faae859", "filename": "crates/ra_hir/src/module/mod.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fce9034909f2f0c5f6ac70eca7cf87ec3db856/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs?ref=45fce9034909f2f0c5f6ac70eca7cf87ec3db856", "patch": "@@ -14,7 +14,7 @@ use ra_db::{SourceRootId, FileId, FilePosition, Cancelable};\n use relative_path::RelativePathBuf;\n \n use crate::{\n-    DefLoc, DefId, Path, PathKind, HirDatabase, SourceItemId,\n+    DefLoc, DefId, Path, PathKind, HirDatabase, SourceItemId, SourceFileItemId,\n     arena::{Arena, Id},\n };\n \n@@ -37,7 +37,8 @@ impl Module {\n         db: &impl HirDatabase,\n         file_id: FileId,\n     ) -> Cancelable<Option<Module>> {\n-        Module::guess_from_source(db, file_id, ModuleSource::SourceFile(file_id))\n+        let module_source = ModuleSource::new_file(db, file_id);\n+        Module::guess_from_source(db, module_source)\n     }\n \n     /// Lookup `Module` by position in the source code. Note that this\n@@ -51,17 +52,16 @@ impl Module {\n         let module_source = match find_node_at_offset::<ast::Module>(file.syntax(), position.offset)\n         {\n             Some(m) if !m.has_semi() => ModuleSource::new_inline(db, position.file_id, m),\n-            _ => ModuleSource::SourceFile(position.file_id),\n+            _ => ModuleSource::new_file(db, position.file_id),\n         };\n-        Module::guess_from_source(db, position.file_id, module_source)\n+        Module::guess_from_source(db, module_source)\n     }\n \n     fn guess_from_source(\n         db: &impl HirDatabase,\n-        file_id: FileId,\n         module_source: ModuleSource,\n     ) -> Cancelable<Option<Module>> {\n-        let source_root_id = db.file_source_root(file_id);\n+        let source_root_id = db.file_source_root(module_source.file_id());\n         let module_tree = db.module_tree(source_root_id)?;\n \n         let res = match module_tree.any_module_for_source(module_source) {\n@@ -209,10 +209,7 @@ impl ModuleTree {\n /// `ModuleSource` is the syntax tree element that produced this module:\n /// either a file, or an inlinde module.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum ModuleSource {\n-    SourceFile(FileId),\n-    Module(SourceItemId),\n-}\n+pub struct ModuleSource(SourceItemId);\n \n /// An owned syntax node for a module. Unlike `ModuleSource`,\n /// this holds onto the AST for the whole file.\n@@ -310,45 +307,41 @@ pub struct ModuleData {\n }\n \n impl ModuleSource {\n+    // precondition: item_id **must** point to module\n+    fn new(file_id: FileId, item_id: SourceFileItemId) -> ModuleSource {\n+        let source_item_id = SourceItemId { file_id, item_id };\n+        ModuleSource(source_item_id)\n+    }\n+\n+    pub(crate) fn new_file(db: &impl HirDatabase, file_id: FileId) -> ModuleSource {\n+        let file_items = db.file_items(file_id);\n+        let item_id = file_items.id_of_source_file();\n+        ModuleSource::new(file_id, item_id)\n+    }\n+\n     pub(crate) fn new_inline(\n         db: &impl HirDatabase,\n         file_id: FileId,\n-        module: ast::Module,\n+        m: ast::Module,\n     ) -> ModuleSource {\n-        assert!(!module.has_semi());\n-        let items = db.file_items(file_id);\n-        let item_id = items.id_of(module.syntax());\n-        let id = SourceItemId { file_id, item_id };\n-        ModuleSource::Module(id)\n-    }\n-\n-    pub fn as_file(self) -> Option<FileId> {\n-        match self {\n-            ModuleSource::SourceFile(f) => Some(f),\n-            ModuleSource::Module(..) => None,\n-        }\n+        assert!(!m.has_semi());\n+        let file_items = db.file_items(file_id);\n+        let item_id = file_items.id_of(m.syntax());\n+        ModuleSource::new(file_id, item_id)\n     }\n \n     pub fn file_id(self) -> FileId {\n-        match self {\n-            ModuleSource::SourceFile(f) => f,\n-            ModuleSource::Module(source_item_id) => source_item_id.file_id,\n-        }\n+        self.0.file_id\n     }\n \n     pub(crate) fn resolve(self, db: &impl HirDatabase) -> ModuleSourceNode {\n-        match self {\n-            ModuleSource::SourceFile(file_id) => {\n-                let syntax = db.source_file(file_id);\n-                ModuleSourceNode::SourceFile(syntax.ast().owned())\n-            }\n-            ModuleSource::Module(item_id) => {\n-                let syntax = db.file_item(item_id);\n-                let syntax = syntax.borrowed();\n-                let module = ast::Module::cast(syntax).unwrap();\n-                ModuleSourceNode::Module(module.owned())\n-            }\n+        let syntax_node = db.file_item(self.0);\n+        let syntax_node = syntax_node.borrowed();\n+        if let Some(file) = ast::SourceFile::cast(syntax_node) {\n+            return ModuleSourceNode::SourceFile(file.owned());\n         }\n+        let module = ast::Module::cast(syntax_node).unwrap();\n+        ModuleSourceNode::Module(module.owned())\n     }\n }\n "}]}