{"sha": "6064be7ced9e56a8b10cb33c4183b07a6f55965d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNjRiZTdjZWQ5ZTU2YThiMTBjYjMzYzQxODNiMDdhNmY1NTk2NWQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T09:15:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T09:15:11Z"}, "message": "Rollup merge of #80358 - pierwill:edit_rustc_span, r=lcnr\n\nEdit rustc_span documentation\n\nVarious changes to the `rustc_span` docs, including the following:\n\n- Additions to top-level docs\n- Edits to the source_map module docs\n- Edits to documentation for `Span` and `SpanData`\n- Added intra-docs links\n- Documentation for Levenshtein distances\n- Fixed missing punctuation", "tree": {"sha": "d3147097d5b8ef9da73791310a177fe53854b29a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3147097d5b8ef9da73791310a177fe53854b29a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6064be7ced9e56a8b10cb33c4183b07a6f55965d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7EUfCRBK7hj4Ov3rIwAAdHIIADGSrAu7Gbw2RG/Qf2/h4maZ\nFGM+Po8W7SkbPt7u6N5kS52Wz4sIN9DldmId8+mCXDYnuxvjF3ICcYo62g8r/Hv/\nSV7FaH8kVgjwmORCEgrL4oAyBBpK1D/1Pm078e4jj1Z9brbejt6/FUfihjSwkdBX\nF+NhjJujidvpemSbDniuoxZNu6pgPVBA9TuJTHpZ8oGTF5H8YW/8n4VBnym8cVBa\n7Zr9WiRKbKySxhWk7o15KmAXjiHmOkHcNnsn2F1CQzqzdNawn6XAroxy7BTvVWiB\n/rVbHb7W801zGyg3msNeTSJ1hFizHSwNTMmtnYt4j28PKNDoDi3pp0dwetKHIgU=\n=MaWr\n-----END PGP SIGNATURE-----\n", "payload": "tree d3147097d5b8ef9da73791310a177fe53854b29a\nparent a309468a8c2483b202913a5009e6e69043018440\nparent a8775d44e9f273b8ec03a0a881f2dc6800eb3027\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609319711 +0900\ncommitter GitHub <noreply@github.com> 1609319711 +0900\n\nRollup merge of #80358 - pierwill:edit_rustc_span, r=lcnr\n\nEdit rustc_span documentation\n\nVarious changes to the `rustc_span` docs, including the following:\n\n- Additions to top-level docs\n- Edits to the source_map module docs\n- Edits to documentation for `Span` and `SpanData`\n- Added intra-docs links\n- Documentation for Levenshtein distances\n- Fixed missing punctuation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6064be7ced9e56a8b10cb33c4183b07a6f55965d", "html_url": "https://github.com/rust-lang/rust/commit/6064be7ced9e56a8b10cb33c4183b07a6f55965d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6064be7ced9e56a8b10cb33c4183b07a6f55965d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a309468a8c2483b202913a5009e6e69043018440", "url": "https://api.github.com/repos/rust-lang/rust/commits/a309468a8c2483b202913a5009e6e69043018440", "html_url": "https://github.com/rust-lang/rust/commit/a309468a8c2483b202913a5009e6e69043018440"}, {"sha": "a8775d44e9f273b8ec03a0a881f2dc6800eb3027", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8775d44e9f273b8ec03a0a881f2dc6800eb3027", "html_url": "https://github.com/rust-lang/rust/commit/a8775d44e9f273b8ec03a0a881f2dc6800eb3027"}], "stats": {"total": 117, "additions": 71, "deletions": 46}, "files": [{"sha": "efbb0a23a6f012a679f80ed764775d90c1bf9b7e", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=6064be7ced9e56a8b10cb33c4183b07a6f55965d", "patch": "@@ -4,24 +4,25 @@ use std::str::FromStr;\n \n use rustc_macros::HashStable_Generic;\n \n-/// The edition of the compiler (RFC 2052)\n+/// The edition of the compiler. (See [RFC 2052](https://github.com/rust-lang/rfcs/blob/master/text/2052-epochs.md).)\n #[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, Encodable, Decodable, Eq)]\n #[derive(HashStable_Generic)]\n pub enum Edition {\n-    // editions must be kept in order, oldest to newest\n+    // When adding new editions, be sure to do the following:\n+    //\n+    // - update the `ALL_EDITIONS` const\n+    // - update the `EDITION_NAME_LIST` const\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // Editions *must* be kept in order, oldest to newest.\n     /// The 2015 edition\n     Edition2015,\n     /// The 2018 edition\n     Edition2018,\n-    // when adding new editions, be sure to update:\n-    //\n-    // - Update the `ALL_EDITIONS` const\n-    // - Update the EDITION_NAME_LIST const\n-    // - add a `rust_####()` function to the session\n-    // - update the enum in Cargo's sources as well\n }\n \n-// must be in order from oldest to newest\n+// Must be in order from oldest to newest.\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n pub const EDITION_NAME_LIST: &str = \"2015|2018\";"}, {"sha": "cea7871923bc689dc44ca295518c64f8c502eeac", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=6064be7ced9e56a8b10cb33c4183b07a6f55965d", "patch": "@@ -1,10 +1,16 @@\n+//! Levenshtein distances.\n+//!\n+//! The [Levenshtein distance] is a metric for measuring the difference between two strings.\n+//!\n+//! [Levenshtein distance]: https://en.wikipedia.org/wiki/Levenshtein_distance\n+\n use crate::symbol::Symbol;\n use std::cmp;\n \n #[cfg(test)]\n mod tests;\n \n-/// Finds the Levenshtein distance between two strings\n+/// Finds the Levenshtein distance between two strings.\n pub fn lev_distance(a: &str, b: &str) -> usize {\n     // cases which don't require further computation\n     if a.is_empty() {\n@@ -35,14 +41,14 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n     dcol[t_last + 1]\n }\n \n-/// Finds the best match for a given word in the given iterator\n+/// Finds the best match for a given word in the given iterator.\n ///\n /// As a loose rule to avoid the obviously incorrect suggestions, it takes\n /// an optional limit for the maximum allowable edit distance, which defaults\n /// to one-third of the given word.\n ///\n-/// Besides Levenshtein, we use case insensitive comparison to improve accuracy on an edge case with\n-/// a lower(upper)case letters mismatch.\n+/// Besides Levenshtein, we use case insensitive comparison to improve accuracy\n+/// on an edge case with a lower(upper)case letters mismatch.\n #[cold]\n pub fn find_best_match_for_name(\n     name_vec: &[Symbol],\n@@ -98,7 +104,7 @@ fn find_match_by_sorted_words(iter_names: &[Symbol], lookup: &str) -> Option<Sym\n \n fn sort_by_words(name: &str) -> String {\n     let mut split_words: Vec<&str> = name.split('_').collect();\n-    // We are sorting primitive &strs and can use unstable sort here\n+    // We are sorting primitive &strs and can use unstable sort here.\n     split_words.sort_unstable();\n     split_words.join(\"_\")\n }"}, {"sha": "8009530717566370f18e0d2448af299c5c769469", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6064be7ced9e56a8b10cb33c4183b07a6f55965d", "patch": "@@ -1,4 +1,13 @@\n-//! The source positions and related helper functions.\n+//! Source positions and related helper functions.\n+//!\n+//! Important concepts in this module include:\n+//!\n+//! - the *span*, represented by [`SpanData`] and related types;\n+//! - source code as represented by a [`SourceMap`]; and\n+//! - interned strings, represented by [`Symbol`]s, with some common symbols available statically in the [`sym`] module.\n+//!\n+//! Unlike most compilers, the span contains not only the position in the source code, but also various other metadata,\n+//! such as the edition and macro hygiene. This metadata is stored in [`SyntaxContext`] and [`ExpnData`].\n //!\n //! ## Note\n //!\n@@ -124,7 +133,7 @@ pub enum RealFileName {\n \n impl RealFileName {\n     /// Returns the path suitable for reading from the file system on the local host.\n-    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n+    /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn local_path(&self) -> &Path {\n         match self {\n             RealFileName::Named(p)\n@@ -133,7 +142,7 @@ impl RealFileName {\n     }\n \n     /// Returns the path suitable for reading from the file system on the local host.\n-    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n+    /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn into_local_path(self) -> PathBuf {\n         match self {\n             RealFileName::Named(p)\n@@ -143,7 +152,7 @@ impl RealFileName {\n \n     /// Returns the path suitable for embedding into build artifacts. Note that\n     /// a virtualized path will not correspond to a valid file system path; see\n-    /// `local_path` for something that is more likely to return paths into the\n+    /// `local_path()` for something that is more likely to return paths into the\n     /// local host file system.\n     pub fn stable_name(&self) -> &Path {\n         match self {\n@@ -173,7 +182,7 @@ pub enum FileName {\n     /// Custom sources for explicit parser calls from plugins and drivers.\n     Custom(String),\n     DocTest(PathBuf, isize),\n-    /// Post-substitution inline assembly from LLVM\n+    /// Post-substitution inline assembly from LLVM.\n     InlineAsm(u64),\n }\n \n@@ -266,14 +275,17 @@ impl FileName {\n     }\n }\n \n+/// Represents a span.\n+///\n /// Spans represent a region of code, used for error reporting. Positions in spans\n-/// are *absolute* positions from the beginning of the source_map, not positions\n-/// relative to `SourceFile`s. Methods on the `SourceMap` can be used to relate spans back\n+/// are *absolute* positions from the beginning of the [`SourceMap`], not positions\n+/// relative to [`SourceFile`]s. Methods on the `SourceMap` can be used to relate spans back\n /// to the original source.\n-/// You must be careful if the span crosses more than one file - you will not be\n+///\n+/// You must be careful if the span crosses more than one file, since you will not be\n /// able to use many of the functions on spans in source_map and you cannot assume\n-/// that the length of the `span = hi - lo`; there may be space in the `BytePos`\n-/// range between files.\n+/// that the length of the span is equal to `span.hi - span.lo`; there may be space in the\n+/// [`BytePos`] range between files.\n ///\n /// `SpanData` is public because `Span` uses a thread-local interner and can't be\n /// sent to other threads, but some pieces of performance infra run in a separate thread.\n@@ -384,7 +396,7 @@ impl Span {\n         Span::new(lo, hi, SyntaxContext::root())\n     }\n \n-    /// Returns a new span representing an empty span at the beginning of this span\n+    /// Returns a new span representing an empty span at the beginning of this span.\n     #[inline]\n     pub fn shrink_to_lo(self) -> Span {\n         let span = self.data();\n@@ -398,7 +410,7 @@ impl Span {\n     }\n \n     #[inline]\n-    /// Returns true if hi == lo\n+    /// Returns `true` if `hi == lo`.\n     pub fn is_empty(&self) -> bool {\n         let span = self.data();\n         span.hi == span.lo\n@@ -512,7 +524,7 @@ impl Span {\n     }\n \n     /// Checks if a span is \"internal\" to a macro in which `unsafe`\n-    /// can be used without triggering the `unsafe_code` lint\n+    /// can be used without triggering the `unsafe_code` lint.\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n     pub fn allows_unsafe(&self) -> bool {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n@@ -700,6 +712,7 @@ impl Span {\n     }\n }\n \n+/// A span together with some additional data.\n #[derive(Clone, Debug)]\n pub struct SpanLabel {\n     /// The span we are going to include in the final snippet.\n@@ -743,7 +756,7 @@ impl<D: Decoder> Decodable<D> for Span {\n /// any spans that are debug-printed during the closure's execution.\n ///\n /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n-/// (see `rustc_interface::callbacks::span_debug1). However, some parts\n+/// (see `rustc_interface::callbacks::span_debug1`). However, some parts\n /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n /// a `TyCtxt` is available. In this case, we fall back to\n /// the `SourceMap` provided to this function. If that is not available,\n@@ -994,9 +1007,9 @@ pub enum ExternalSource {\n     Unneeded,\n     Foreign {\n         kind: ExternalSourceKind,\n-        /// This SourceFile's byte-offset within the source_map of its original crate\n+        /// This SourceFile's byte-offset within the source_map of its original crate.\n         original_start_pos: BytePos,\n-        /// The end of this SourceFile within the source_map of its original crate\n+        /// The end of this SourceFile within the source_map of its original crate.\n         original_end_pos: BytePos,\n     },\n }\n@@ -1099,7 +1112,7 @@ impl SourceFileHash {\n     }\n }\n \n-/// A single source in the `SourceMap`.\n+/// A single source in the [`SourceMap`].\n #[derive(Clone)]\n pub struct SourceFile {\n     /// The name of the file that the source came from. Source that doesn't\n@@ -1580,7 +1593,7 @@ fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {\n \n /// Replaces `\\r\\n` with `\\n` in-place in `src`.\n ///\n-/// Returns error if there's a lone `\\r` in the string\n+/// Returns error if there's a lone `\\r` in the string.\n fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {\n     if !src.as_bytes().contains(&b'\\r') {\n         return;\n@@ -1705,13 +1718,16 @@ macro_rules! impl_pos {\n }\n \n impl_pos! {\n-    /// A byte offset. Keep this small (currently 32-bits), as AST contains\n-    /// a lot of them.\n+    /// A byte offset.\n+    ///\n+    /// Keep this small (currently 32-bits), as AST contains a lot of them.\n     #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n     pub struct BytePos(pub u32);\n \n-    /// A character offset. Because of multibyte UTF-8 characters, a byte offset\n-    /// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n+    /// A character offset.\n+    ///\n+    /// Because of multibyte UTF-8 characters, a byte offset\n+    /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]\n     /// values to `CharPos` values as necessary.\n     #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n     pub struct CharPos(pub usize);\n@@ -1835,8 +1851,9 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n }\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n-/// This is a hack to allow using the `HashStable_Generic` derive macro\n-/// instead of implementing everything in librustc_middle.\n+///\n+/// This is a hack to allow using the [`HashStable_Generic`] derive macro\n+/// instead of implementing everything in rustc_middle.\n pub trait HashStableContext {\n     fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn hash_crate_num(&mut self, _: CrateNum, hasher: &mut StableHasher);\n@@ -1856,6 +1873,7 @@ where\n     /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)\n     /// triple, which stays the same even if the containing `SourceFile` has moved\n     /// within the `SourceMap`.\n+    ///\n     /// Also note that we are hashing byte offsets for the column, not unicode\n     /// codepoint offsets. For the purpose of the hash that's sufficient.\n     /// Also, hashing filenames is expensive so we avoid doing it twice when the"}, {"sha": "fefc0cb48ddd8efea9b86f5346d4b2555ebcd75c", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6064be7ced9e56a8b10cb33c4183b07a6f55965d", "patch": "@@ -1,9 +1,11 @@\n-//! The `SourceMap` tracks all the source code used within a single crate, mapping\n+//! Types for tracking pieces of source code within a crate.\n+//!\n+//! The [`SourceMap`] tracks all the source code used within a single crate, mapping\n //! from integer byte positions to the original source code location. Each bit\n //! of source parsed during crate parsing (typically files, in-memory strings,\n //! or various bits of macro expansion) cover a continuous range of bytes in the\n-//! `SourceMap` and are represented by `SourceFile`s. Byte positions are stored in\n-//! `Span` and used pervasively in the compiler. They are absolute positions\n+//! `SourceMap` and are represented by [`SourceFile`]s. Byte positions are stored in\n+//! [`Span`] and used pervasively in the compiler. They are absolute positions\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n "}, {"sha": "ceb9b59b13ad1609489eab9cd8ef03307a42b25f", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6064be7ced9e56a8b10cb33c4183b07a6f55965d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=6064be7ced9e56a8b10cb33c4183b07a6f55965d", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxIndexSet;\n \n /// A compressed span.\n ///\n-/// `SpanData` is 12 bytes, which is a bit too big to stick everywhere. `Span`\n+/// Whereas [`SpanData`] is 12 bytes, which is a bit too big to stick everywhere, `Span`\n /// is a form that only takes up 8 bytes, with less space for the length and\n /// context. The vast majority (99.9%+) of `SpanData` instances will fit within\n /// those 8 bytes; any `SpanData` whose fields don't fit into a `Span` are\n@@ -42,13 +42,11 @@ use rustc_data_structures::fx::FxIndexSet;\n /// - `base` is 32 bits in both `Span` and `SpanData`, which means that `base`\n ///   values never cause interning. The number of bits needed for `base`\n ///   depends on the crate size. 32 bits allows up to 4 GiB of code in a crate.\n-///   `script-servo` is the largest crate in `rustc-perf`, requiring 26 bits\n-///   for some spans.\n /// - `len` is 15 bits in `Span` (a u16, minus 1 bit for the tag) and 32 bits\n ///   in `SpanData`, which means that large `len` values will cause interning.\n ///   The number of bits needed for `len` does not depend on the crate size.\n-///   The most common number of bits for `len` are 0--7, with a peak usually at\n-///   3 or 4, and then it drops off quickly from 8 onwards. 15 bits is enough\n+///   The most common numbers of bits for `len` are from 0 to 7, with a peak usually\n+///   at 3 or 4, and then it drops off quickly from 8 onwards. 15 bits is enough\n ///   for 99.99%+ of cases, but larger values (sometimes 20+ bits) might occur\n ///   dozens of times in a typical crate.\n /// - `ctxt` is 16 bits in `Span` and 32 bits in `SpanData`, which means that"}]}