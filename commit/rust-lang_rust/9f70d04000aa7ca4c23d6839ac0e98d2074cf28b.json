{"sha": "9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNzBkMDQwMDBhYTdjYTRjMjNkNjgzOWFjMGU5OGQyMDc0Y2YyOGI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-05T18:19:00Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-05T18:19:00Z"}, "message": "Fix wrong suggestion with `MANUAL_SWAP` and slices", "tree": {"sha": "86f8c938e055ea98a353c5fcdbb08da206fb1183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f8c938e055ea98a353c5fcdbb08da206fb1183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "html_url": "https://github.com/rust-lang/rust/commit/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd6d2c35ed4d280d3112a3fd97710b53129255c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd6d2c35ed4d280d3112a3fd97710b53129255c", "html_url": "https://github.com/rust-lang/rust/commit/bdd6d2c35ed4d280d3112a3fd97710b53129255c"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "877b9037d378d1181426eb725848277161ad6637", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "patch": "@@ -16,6 +16,7 @@ license = \"MPL-2.0\"\n keywords = [\"clippy\", \"lint\", \"plugin\"]\n \n [dependencies]\n+matches = \"0.1.2\"\n regex-syntax = \"0.3.0\"\n semver = \"0.2.1\"\n toml = \"0.1\""}, {"sha": "857e11b0bd355e8ebdf938c24fc4b5e5e456b8cc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "patch": "@@ -42,6 +42,9 @@ extern crate rustc_plugin;\n extern crate rustc_const_eval;\n extern crate rustc_const_math;\n \n+#[macro_use]\n+extern crate matches as matches_macro;\n+\n macro_rules! declare_restriction_lint {\n     { pub $name:tt, $description:tt } => {\n         declare_lint! { pub $name, Allow, $description }"}, {"sha": "5a3adfee409d1f92382083d6a1753437656140d6", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "patch": "@@ -1,7 +1,8 @@\n-use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc::ty;\n use syntax::codemap::mk_sp;\n-use utils::{differing_macro_contexts, snippet_opt, span_lint_and_then, SpanlessEq};\n+use utils::{differing_macro_contexts, match_type, paths, snippet, snippet_opt, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n \n /// **What it does:** This lints manual swapping.\n ///\n@@ -79,10 +80,40 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n             SpanlessEq::new(cx).ignore_fn().eq_expr(tmp_init, lhs1),\n             SpanlessEq::new(cx).ignore_fn().eq_expr(rhs1, lhs2)\n         ], {\n-            let (what, lhs, rhs) = if let (Some(first), Some(second)) = (snippet_opt(cx, lhs1.span), snippet_opt(cx, rhs1.span)) {\n-                (format!(\" `{}` and `{}`\", first, second), first, second)\n+            fn check_for_slice<'a>(cx: &LateContext, lhs1: &'a Expr, lhs2: &'a Expr) -> Option<(&'a Expr, &'a Expr, &'a Expr)> {\n+                if let ExprIndex(ref lhs1, ref idx1) = lhs1.node {\n+                    if let ExprIndex(ref lhs2, ref idx2) = lhs2.node {\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n+                            let ty = walk_ptrs_ty(cx.tcx.expr_ty(lhs1));\n+\n+                            if matches!(ty.sty, ty::TySlice(_)) ||\n+                                matches!(ty.sty, ty::TyArray(_, _)) ||\n+                                match_type(cx, ty, &paths::VEC) ||\n+                                match_type(cx, ty, &paths::VEC_DEQUE) {\n+                                    return Some((lhs1, idx1, idx2));\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                None\n+            }\n+\n+            let (replace, what, sugg) = if let Some((slice, idx1, idx2)) = check_for_slice(cx, lhs1, lhs2) {\n+                if let Some(slice) = snippet_opt(cx, slice.span) {\n+                    (false,\n+                     format!(\" elements of `{}`\", slice),\n+                     format!(\"{}.swap({}, {})\",slice,  snippet(cx, idx1.span, \"..\"), snippet(cx, idx2.span, \"..\")))\n+                } else {\n+                    (false, \"\".to_owned(), \"\".to_owned())\n+                }\n             } else {\n-                (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n+                 if let (Some(first), Some(second)) = (snippet_opt(cx, lhs1.span), snippet_opt(cx, rhs1.span)) {\n+                    (true, format!(\" `{}` and `{}`\", first, second),\n+                     format!(\"std::mem::swap(&mut {}, &mut {})\", first, second))\n+                } else {\n+                    (true, \"\".to_owned(), \"\".to_owned())\n+                }\n             };\n \n             let span = mk_sp(w[0].span.lo, second.span.hi);\n@@ -92,10 +123,12 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                                span,\n                                &format!(\"this looks like you are swapping{} manually\", what),\n                                |db| {\n-                                   if !what.is_empty() {\n-                                       db.span_suggestion(span, \"try\",\n-                                                          format!(\"std::mem::swap(&mut {}, &mut {})\", lhs, rhs));\n-                                       db.note(\"or maybe you should use `std::mem::replace`?\");\n+                                   if !sugg.is_empty() {\n+                                       db.span_suggestion(span, \"try\", sugg);\n+\n+                                       if replace {\n+                                           db.note(\"or maybe you should use `std::mem::replace`?\");\n+                                       }\n                                    }\n                                });\n         }}"}, {"sha": "c41354675566ea721b3a1e4374cee2163db2e05b", "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f70d04000aa7ca4c23d6839ac0e98d2074cf28b/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=9f70d04000aa7ca4c23d6839ac0e98d2074cf28b", "patch": "@@ -2,11 +2,51 @@\n #![plugin(clippy)]\n \n #![deny(clippy)]\n-#![allow(unused_assignments)]\n+#![allow(blacklisted_name, unused_assignments)]\n \n struct Foo(u32);\n \n+fn array() {\n+    let mut foo = [1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn slice() {\n+    let foo = &mut [1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn vec() {\n+    let mut foo = vec![1, 2];\n+    let temp = foo[0];\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n fn main() {\n+    array();\n+    slice();\n+    vec();\n+\n     let mut a = 42;\n     let mut b = 1337;\n "}]}