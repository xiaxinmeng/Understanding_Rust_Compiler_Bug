{"sha": "e60016eb55ec312dfac4b33cbb509435a05919ed", "node_id": "C_kwDOAAsO6NoAKGU2MDAxNmViNTVlYzMxMmRmYWM0YjMzY2JiNTA5NDM1YTA1OTE5ZWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-10-19T10:41:11Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-10-19T10:41:11Z"}, "message": "Split is_stable from rustc_target::spec::abi::is_enabled.", "tree": {"sha": "47dc27c047f63fa9db51b6d823e34648c6a537d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47dc27c047f63fa9db51b6d823e34648c6a537d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60016eb55ec312dfac4b33cbb509435a05919ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60016eb55ec312dfac4b33cbb509435a05919ed", "html_url": "https://github.com/rust-lang/rust/commit/e60016eb55ec312dfac4b33cbb509435a05919ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60016eb55ec312dfac4b33cbb509435a05919ed/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84365fff0a99fbf6deab383bd9a8152202b6779b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84365fff0a99fbf6deab383bd9a8152202b6779b", "html_url": "https://github.com/rust-lang/rust/commit/84365fff0a99fbf6deab383bd9a8152202b6779b"}], "stats": {"total": 268, "additions": 109, "deletions": 159}, "files": [{"sha": "ce45fa13970b4bdfa4f4b25c38100d0e4ffa3381", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 109, "deletions": 159, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/e60016eb55ec312dfac4b33cbb509435a05919ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60016eb55ec312dfac4b33cbb509435a05919ed/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=e60016eb55ec312dfac4b33cbb509435a05919ed", "patch": "@@ -109,175 +109,125 @@ pub enum AbiDisabled {\n     Unrecognized,\n }\n \n-fn gate_feature_post(\n+pub fn is_enabled(\n     features: &rustc_feature::Features,\n-    feature: Symbol,\n     span: Span,\n-    explain: &'static str,\n+    name: &str,\n ) -> Result<(), AbiDisabled> {\n-    if !features.enabled(feature) && !span.allows_unstable(feature) {\n-        Err(AbiDisabled::Unstable { feature, explain })\n-    } else {\n-        Ok(())\n+    let s = is_stable(name);\n+    if let Err(AbiDisabled::Unstable { feature, .. }) = s {\n+        if features.enabled(feature) || span.allows_unstable(feature) {\n+            return Ok(());\n+        }\n     }\n+    s\n }\n \n-pub fn is_enabled(\n-    features: &rustc_feature::Features,\n-    span: Span,\n-    name: &str,\n-) -> Result<(), AbiDisabled> {\n+pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n         \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n         | \"system\" => Ok(()),\n-        \"rust-intrinsic\" => {\n-            gate_feature_post(features, sym::intrinsics, span, \"intrinsics are subject to change\")\n-        }\n-        \"platform-intrinsic\" => gate_feature_post(\n-            features,\n-            sym::platform_intrinsics,\n-            span,\n-            \"platform intrinsics are experimental and possibly buggy\",\n-        ),\n-        \"vectorcall\" => gate_feature_post(\n-            features,\n-            sym::abi_vectorcall,\n-            span,\n-            \"vectorcall is experimental and subject to change\",\n-        ),\n-        \"thiscall\" => gate_feature_post(\n-            features,\n-            sym::abi_thiscall,\n-            span,\n-            \"thiscall is experimental and subject to change\",\n-        ),\n-        \"rust-call\" => gate_feature_post(\n-            features,\n-            sym::unboxed_closures,\n-            span,\n-            \"rust-call ABI is subject to change\",\n-        ),\n-        \"rust-cold\" => gate_feature_post(\n-            features,\n-            sym::rust_cold_cc,\n-            span,\n-            \"rust-cold is experimental and subject to change\",\n-        ),\n-        \"ptx-kernel\" => gate_feature_post(\n-            features,\n-            sym::abi_ptx,\n-            span,\n-            \"PTX ABIs are experimental and subject to change\",\n-        ),\n-        \"unadjusted\" => gate_feature_post(\n-            features,\n-            sym::abi_unadjusted,\n-            span,\n-            \"unadjusted ABI is an implementation detail and perma-unstable\",\n-        ),\n-        \"msp430-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_msp430_interrupt,\n-            span,\n-            \"msp430-interrupt ABI is experimental and subject to change\",\n-        ),\n-        \"x86-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_x86_interrupt,\n-            span,\n-            \"x86-interrupt ABI is experimental and subject to change\",\n-        ),\n-        \"amdgpu-kernel\" => gate_feature_post(\n-            features,\n-            sym::abi_amdgpu_kernel,\n-            span,\n-            \"amdgpu-kernel ABI is experimental and subject to change\",\n-        ),\n-        \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_avr_interrupt,\n-            span,\n-            \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n-        ),\n-        \"efiapi\" => gate_feature_post(\n-            features,\n-            sym::abi_efiapi,\n-            span,\n-            \"efiapi ABI is experimental and subject to change\",\n-        ),\n-        \"C-cmse-nonsecure-call\" => gate_feature_post(\n-            features,\n-            sym::abi_c_cmse_nonsecure_call,\n-            span,\n-            \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n-        ),\n-        \"C-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"C-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"stdcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"stdcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"system-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"system-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"thiscall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"thiscall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"cdecl-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"cdecl-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"fastcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"fastcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"vectorcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"vectorcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"aapcs-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"aapcs-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"win64-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"win64-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"sysv64-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"sysv64-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"wasm\" => gate_feature_post(\n-            features,\n-            sym::wasm_abi,\n-            span,\n-            \"wasm ABI is experimental and subject to change\",\n-        ),\n+        \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n+            feature: sym::intrinsics,\n+            explain: \"intrinsics are subject to change\",\n+        }),\n+        \"platform-intrinsic\" => Err(AbiDisabled::Unstable {\n+            feature: sym::platform_intrinsics,\n+            explain: \"platform intrinsics are experimental and possibly buggy\",\n+        }),\n+        \"vectorcall\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_vectorcall,\n+            explain: \"vectorcall is experimental and subject to change\",\n+        }),\n+        \"thiscall\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_thiscall,\n+            explain: \"thiscall is experimental and subject to change\",\n+        }),\n+        \"rust-call\" => Err(AbiDisabled::Unstable {\n+            feature: sym::unboxed_closures,\n+            explain: \"rust-call ABI is subject to change\",\n+        }),\n+        \"rust-cold\" => Err(AbiDisabled::Unstable {\n+            feature: sym::rust_cold_cc,\n+            explain: \"rust-cold is experimental and subject to change\",\n+        }),\n+        \"ptx-kernel\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_ptx,\n+            explain: \"PTX ABIs are experimental and subject to change\",\n+        }),\n+        \"unadjusted\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_unadjusted,\n+            explain: \"unadjusted ABI is an implementation detail and perma-unstable\",\n+        }),\n+        \"msp430-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_msp430_interrupt,\n+            explain: \"msp430-interrupt ABI is experimental and subject to change\",\n+        }),\n+        \"x86-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_x86_interrupt,\n+            explain: \"x86-interrupt ABI is experimental and subject to change\",\n+        }),\n+        \"amdgpu-kernel\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_amdgpu_kernel,\n+            explain: \"amdgpu-kernel ABI is experimental and subject to change\",\n+        }),\n+        \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_avr_interrupt,\n+            explain: \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n+        }),\n+        \"efiapi\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_efiapi,\n+            explain: \"efiapi ABI is experimental and subject to change\",\n+        }),\n+        \"C-cmse-nonsecure-call\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_c_cmse_nonsecure_call,\n+            explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n+        }),\n+        \"C-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"C-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"stdcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"stdcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"system-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"system-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"cdecl-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"cdecl-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"fastcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"fastcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"aapcs-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"aapcs-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"win64-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"win64-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"sysv64-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"sysv64-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"wasm\" => Err(AbiDisabled::Unstable {\n+            feature: sym::wasm_abi,\n+            explain: \"wasm ABI is experimental and subject to change\",\n+        }),\n         _ => Err(AbiDisabled::Unrecognized),\n     }\n }"}]}