{"sha": "64165aac68af780182ff89a6eb3982e3c262266e", "node_id": "C_kwDOAAsO6NoAKDY0MTY1YWFjNjhhZjc4MDE4MmZmODlhNmViMzk4MmUzYzI2MjI2NmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T09:13:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T09:13:23Z"}, "message": "Auto merge of #108476 - saethlin:remove-library-rustc-box, r=thomcc\n\nRemove or document uses of #[rustc_box] in library\n\nr? `@thomcc`\n\nOnly one of these uses is tested for in the rustc-perf benchmark suite. The impact there on compile time is somewhat dramatic, but I am inclined to make this change as a simplification to the library and wait for people to complain if it explodes their compilation time. I think in the absence of data or reports from users about what code paths really matter, if we are optimizing for compilation time, it's hard to argue against using `#[rustc_box]` everywhere we currently call `Box::new`.", "tree": {"sha": "3d1c85df18f1b4598b9ad855146bfc312cd1752e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1c85df18f1b4598b9ad855146bfc312cd1752e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64165aac68af780182ff89a6eb3982e3c262266e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64165aac68af780182ff89a6eb3982e3c262266e", "html_url": "https://github.com/rust-lang/rust/commit/64165aac68af780182ff89a6eb3982e3c262266e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64165aac68af780182ff89a6eb3982e3c262266e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb610da7fae8297689883782601ecb8645604e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb610da7fae8297689883782601ecb8645604e2", "html_url": "https://github.com/rust-lang/rust/commit/bcb610da7fae8297689883782601ecb8645604e2"}, {"sha": "5448123a11c88a6e62d5f804a965a88e773a61cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5448123a11c88a6e62d5f804a965a88e773a61cd", "html_url": "https://github.com/rust-lang/rust/commit/5448123a11c88a6e62d5f804a965a88e773a61cd"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "44a37899007f8db12f2b67de4a6bc1bc63d74561", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=64165aac68af780182ff89a6eb3982e3c262266e", "patch": "@@ -283,9 +283,7 @@ impl<T> Box<T> {\n     #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n-        (#[rustc_box]\n-        Box::new(x))\n-        .into()\n+        Box::new(x).into()\n     }\n \n     /// Allocates memory on the heap then places `x` into it,\n@@ -1242,8 +1240,8 @@ unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T.\n+    #[inline]\n     fn default() -> Self {\n-        #[rustc_box]\n         Box::new(T::default())\n     }\n }\n@@ -1252,6 +1250,7 @@ impl<T: Default> Default for Box<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n impl<T> const Default for Box<[T]> {\n+    #[inline]\n     fn default() -> Self {\n         let ptr: Unique<[T]> = Unique::<[T; 0]>::dangling();\n         Box(ptr, Global)\n@@ -1262,6 +1261,7 @@ impl<T> const Default for Box<[T]> {\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n impl const Default for Box<str> {\n+    #[inline]\n     fn default() -> Self {\n         // SAFETY: This is the same as `Unique::cast<U>` but with an unsized `U = str`.\n         let ptr: Unique<str> = unsafe {\n@@ -1616,7 +1616,6 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// println!(\"{boxed:?}\");\n     /// ```\n     fn from(array: [T; N]) -> Box<[T]> {\n-        #[rustc_box]\n         Box::new(array)\n     }\n }"}, {"sha": "4c6ae8f2579fae0f41e22a00ef14d8d27e8b715a", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=64165aac68af780182ff89a6eb3982e3c262266e", "patch": "@@ -48,6 +48,8 @@ macro_rules! vec {\n     );\n     ($($x:expr),+ $(,)?) => (\n         $crate::__rust_force_expr!(<[_]>::into_vec(\n+            // This rustc_box is not required, but it produces a dramatic improvement in compile\n+            // time when constructing arrays with many elements.\n             #[rustc_box]\n             $crate::boxed::Box::new([$($x),+])\n         ))"}, {"sha": "f2aa30f18fcf65d27d81adb237b35f4cd4b0c5c5", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64165aac68af780182ff89a6eb3982e3c262266e/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=64165aac68af780182ff89a6eb3982e3c262266e", "patch": "@@ -3131,10 +3131,7 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     /// ```\n     #[cfg(not(test))]\n     fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(\n-            #[rustc_box]\n-            Box::new(s),\n-        )\n+        <[T]>::into_vec(Box::new(s))\n     }\n \n     #[cfg(test)]"}]}