{"sha": "02717911fd3fdbdd284c0c41f9a42af8dd1fe827", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzE3OTExZmQzZmRiZGQyODRjMGM0MWY5YTQyYWY4ZGQxZmU4Mjc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-10T13:42:51Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-10T14:30:28Z"}, "message": "Update intra-doc link documentation to match the implementation", "tree": {"sha": "0e970cc89ae22ada571f72d570b54a559fb73b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e970cc89ae22ada571f72d570b54a559fb73b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02717911fd3fdbdd284c0c41f9a42af8dd1fe827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02717911fd3fdbdd284c0c41f9a42af8dd1fe827", "html_url": "https://github.com/rust-lang/rust/commit/02717911fd3fdbdd284c0c41f9a42af8dd1fe827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02717911fd3fdbdd284c0c41f9a42af8dd1fe827/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "html_url": "https://github.com/rust-lang/rust/commit/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "bdd6eecda6d32d05eb338bf465e3674394ccb864", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/02717911fd3fdbdd284c0c41f9a42af8dd1fe827/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/02717911fd3fdbdd284c0c41f9a42af8dd1fe827/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=02717911fd3fdbdd284c0c41f9a42af8dd1fe827", "patch": "@@ -1,7 +1,7 @@\n # Linking to items by name\n \n Rustdoc is capable of directly linking to other rustdoc pages using the path of\n-the item as a link.\n+the item as a link. This is referred to as an 'intra-doc link'.\n \n For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n@@ -27,8 +27,23 @@ pub struct Bar;\n Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n link to `Option`.\n \n-You can refer to anything in scope, and use paths, including `Self`, `self`,\n-`super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros, respectively.\n+## Valid links\n+\n+You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and\n+`crate`. Associated items (functions, types, and constants) are supported, but [not for blanket\n+trait implementations][#79682]. Rustdoc also supports linking to the following primitives, which\n+have no path and cannot be imported:\n+\n+- [`slice`](https://doc.rust-lang.org/std/primitive.slice.html)\n+- [`array`](https://doc.rust-lang.org/std/primitive.array.html)\n+- [`tuple`](https://doc.rust-lang.org/std/primitive.tuple.html)\n+- [`unit`](https://doc.rust-lang.org/std/primitive.unit.html)\n+- [`fn`](https://doc.rust-lang.org/std/primitive.fn.html)\n+- [`pointer`](https://doc.rust-lang.org/std/primitive.pointer.html), `*`, `*const`, or `*mut`\n+- [`reference`](https://doc.rust-lang.org/std/primitive.reference.html), `&`, or `&mut`\n+- [`never`](https://doc.rust-lang.org/std/primitive.never.html) or `!`\n+\n+[#79682]: https://github.com/rust-lang/rust/pull/79682\n \n You can also refer to items with generic parameters like `Vec<T>`. The link will\n resolve as if you had written ``[`Vec<T>`](Vec)``. Fully-qualified syntax (for example,\n@@ -53,7 +68,7 @@ impl<T> AsyncReceiver<T> {\n }\n ```\n \n-You can also link to sections using URL fragment specifiers:\n+Rustdoc allows using URL fragment specifiers, just like a normal link:\n \n ```rust\n /// This is a special implementation of [positional parameters].\n@@ -62,9 +77,13 @@ You can also link to sections using URL fragment specifiers:\n struct MySpecialFormatter;\n ```\n \n-Paths in Rust have three namespaces: type, value, and macro. Item names must be\n-unique within their namespace, but can overlap with items outside of their\n-namespace. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+## Namespaces and Disambiguators\n+\n+Paths in Rust have three namespaces: type, value, and macro. Item names must be unique within\n+their namespace, but can overlap with items outside of their namespace. In case of ambiguity,\n+rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a\n+prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`,\n+`fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -76,6 +95,9 @@ struct Foo {}\n fn Foo() {}\n ```\n \n+These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]`\n+will be rendered as `Foo`.\n+\n You can also disambiguate for functions by adding `()` after the function name,\n or for macros by adding `!` after the macro name:\n \n@@ -89,6 +111,32 @@ struct Foo {}\n fn Foo() {}\n ```\n \n-Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a `macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the module it is defined in.\n+## Warnings, re-exports, and scoping\n+\n+Links are resolved in the current module scope, even when re-exported. If a link from another\n+crate fails to resolve, no warning is given.\n+\n+When re-exporting an item, rustdoc allows additional documentation to it. That documentation will\n+be resolved in the new scope, not the original, allowing you to link to items in the current\n+crate. The new links will still give a warning if they fail to resolve.\n+\n+```rust\n+/// See also [foo()]\n+pub use std::process::Command;\n+\n+pub fn foo() {}\n+```\n+\n+This is especially useful for proc-macros, which must always be in their own dedicated crate.\n+\n+Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a\n+`macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the\n+module it is defined in.\n+\n+If links do not look 'sufficiently like' an intra-doc link, they will be ignored and no warning\n+will be given, even if the link fails to resolve. For example, any link containing `/` or `[]`\n+characters will be ignored. You can see the full criteria for 'sufficiently like' in [the source\n+code].\n \n [#72243]: https://github.com/rust-lang/rust/issues/72243\n+[the source code]: https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src/librustdoc/passes/collect_intra_doc_links.rs#L982"}]}