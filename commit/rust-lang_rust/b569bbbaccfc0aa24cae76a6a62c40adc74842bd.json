{"sha": "b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "node_id": "C_kwDOAAsO6NoAKGI1NjliYmJhY2NmYzBhYTI0Y2FlNzZhNmE2MmM0MGFkYzc0ODQyYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:28:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:28:42Z"}, "message": "Auto merge of #12942 - lowr:fix/concat-with-char, r=Veykril\n\nfix: make `concat!` work with char\n\nFixes #12921\n\n- I avoided making `unquote_str()` take char literals as well because it's depended on by another function `parse_string()` that's only supposed to take strings.\n- Even with this patch, we don't output `\\0` as `\\u{0}` which #12921 pointed out ~~, but we're not actually responsible for serializing it but rowan is~~. They are functionally equivalent and I don't think it'd cause any confusion, but we *could* try escaping them before serialization (for reference, `rustc -Zunpretty=expanded`, which `cargo expand` uses under the hood, [makes use of `str::escape_default()`](https://github.com/rust-lang/rust/blob/3830ecaa8db798d2727cbdfa4ddf314ff938f268/compiler/rustc_ast/src/util/literal.rs#L161).", "tree": {"sha": "20b3c42b0c6bbdc364585d58214c962e62c8a07e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b3c42b0c6bbdc364585d58214c962e62c8a07e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "html_url": "https://github.com/rust-lang/rust/commit/b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634cfe3d72e785c843ca5d412b12be137b2e14fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/634cfe3d72e785c843ca5d412b12be137b2e14fb", "html_url": "https://github.com/rust-lang/rust/commit/634cfe3d72e785c843ca5d412b12be137b2e14fb"}, {"sha": "4d5873e92f50f3f08f98f04ade4768f9d9ab380f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5873e92f50f3f08f98f04ade4768f9d9ab380f", "html_url": "https://github.com/rust-lang/rust/commit/4d5873e92f50f3f08f98f04ade4768f9d9ab380f"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "4f626105a53d60f727cfd02e71b66ea95e7450ae", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "patch": "@@ -295,13 +295,13 @@ fn test_concat_expand() {\n #[rustc_builtin_macro]\n macro_rules! concat {}\n \n-fn main() { concat!(\"foo\", \"r\", 0, r#\"bar\"#, \"\\n\", false); }\n+fn main() { concat!(\"foo\", \"r\", 0, r#\"bar\"#, \"\\n\", false, '\"', '\\0'); }\n \"##,\n         expect![[r##\"\n #[rustc_builtin_macro]\n macro_rules! concat {}\n \n-fn main() { \"foor0bar\\nfalse\"; }\n+fn main() { \"foor0bar\\nfalse\\\"\\u{0}\"; }\n \"##]],\n     );\n }"}, {"sha": "c21b35cdc0917eb6be6c20d5032e74d3bf042516", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "patch": "@@ -357,6 +357,12 @@ fn unquote_str(lit: &tt::Literal) -> Option<String> {\n     token.value().map(|it| it.into_owned())\n }\n \n+fn unquote_char(lit: &tt::Literal) -> Option<char> {\n+    let lit = ast::make::tokens::literal(&lit.to_string());\n+    let token = ast::Char::cast(lit)?;\n+    token.value()\n+}\n+\n fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n     let lit = ast::make::tokens::literal(&lit.to_string());\n     let token = ast::ByteString::cast(lit)?;\n@@ -408,8 +414,12 @@ fn concat_expand(\n                 // concat works with string and char literals, so remove any quotes.\n                 // It also works with integer, float and boolean literals, so just use the rest\n                 // as-is.\n-                let component = unquote_str(it).unwrap_or_else(|| it.text.to_string());\n-                text.push_str(&component);\n+                if let Some(c) = unquote_char(it) {\n+                    text.push(c);\n+                } else {\n+                    let component = unquote_str(it).unwrap_or_else(|| it.text.to_string());\n+                    text.push_str(&component);\n+                }\n             }\n             // handle boolean literals\n             tt::TokenTree::Leaf(tt::Leaf::Ident(id))"}, {"sha": "e839e97bf02d88f86091ca1baeac843bcdd595c7", "filename": "crates/hir-expand/src/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b569bbbaccfc0aa24cae76a6a62c40adc74842bd/crates%2Fhir-expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fquote.rs?ref=b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "patch": "@@ -196,8 +196,8 @@ impl_to_to_tokentrees! {\n     tt::Literal => self { self };\n     tt::Ident => self { self };\n     tt::Punct => self { self };\n-    &str => self { tt::Literal{text: format!(\"\\\"{}\\\"\", self.escape_debug()).into(), id: tt::TokenId::unspecified()}};\n-    String => self { tt::Literal{text: format!(\"\\\"{}\\\"\", self.escape_debug()).into(), id: tt::TokenId::unspecified()}}\n+    &str => self { tt::Literal{text: format!(\"\\\"{}\\\"\", self.escape_default()).into(), id: tt::TokenId::unspecified()}};\n+    String => self { tt::Literal{text: format!(\"\\\"{}\\\"\", self.escape_default()).into(), id: tt::TokenId::unspecified()}}\n }\n \n #[cfg(test)]"}]}