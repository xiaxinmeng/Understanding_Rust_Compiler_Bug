{"sha": "e2163008763c326ec4003e07b8e6eef0c98f6204", "node_id": "C_kwDOAAsO6NoAKGUyMTYzMDA4NzYzYzMyNmVjNDAwM2UwN2I4ZTZlZWYwYzk4ZjYyMDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T18:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T18:43:04Z"}, "message": "Auto merge of #108442 - scottmcm:mir-transmute, r=oli-obk\n\nAdd `CastKind::Transmute` to MIR\n\n~~Nothing actually produces it in this commit, so I don't know how to test it, but it also means it shouldn't be possible for it to break anything.~~\n\nIncludes lowering `transmute` calls to it, so it's used.\n\nZulip Conversation: <https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Good.20first.20isssue/near/321849610>", "tree": {"sha": "13526f6f563f37d8998736ea3ab7769358cfea93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13526f6f563f37d8998736ea3ab7769358cfea93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2163008763c326ec4003e07b8e6eef0c98f6204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2163008763c326ec4003e07b8e6eef0c98f6204", "html_url": "https://github.com/rust-lang/rust/commit/e2163008763c326ec4003e07b8e6eef0c98f6204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2163008763c326ec4003e07b8e6eef0c98f6204/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7fd9995f10627f25ccb325f693a11b3395a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7fd9995f10627f25ccb325f693a11b3395a73c", "html_url": "https://github.com/rust-lang/rust/commit/df7fd9995f10627f25ccb325f693a11b3395a73c"}, {"sha": "64cce5fc7d2c1070adeaa719932b4bbccf27dd46", "url": "https://api.github.com/repos/rust-lang/rust/commits/64cce5fc7d2c1070adeaa719932b4bbccf27dd46", "html_url": "https://github.com/rust-lang/rust/commit/64cce5fc7d2c1070adeaa719932b4bbccf27dd46"}], "stats": {"total": 1141, "additions": 953, "deletions": 188}, "files": [{"sha": "c2a426bea092910119133bb100867a7c71b04c29", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -2222,6 +2222,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         }\n                     }\n+                    CastKind::Transmute => {\n+                        span_mirbug!(\n+                            self,\n+                            rvalue,\n+                            \"Unexpected CastKind::Transmute, which is not permitted in Analysis MIR\",\n+                        );\n+                    }\n                 }\n             }\n "}, {"sha": "2107ae147e980dbf88e210f5a7818b80088c1d28", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -709,6 +709,10 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     operand.coerce_dyn_star(fx, lval);\n                 }\n+                Rvalue::Cast(CastKind::Transmute, ref operand, _to_ty) => {\n+                    let operand = codegen_operand(fx, operand);\n+                    lval.write_cvalue_transmute(fx, operand);\n+                }\n                 Rvalue::Discriminant(place) => {\n                     let place = codegen_place(fx, place);\n                     let value = place.to_cvalue(fx);"}, {"sha": "03f2a65fccad2444c5097d364b1219cad916751b", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -557,16 +557,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             fx.bcx.ins().band(ptr, mask);\n         }\n \n-        sym::transmute => {\n-            intrinsic_args!(fx, args => (from); intrinsic);\n-\n-            if ret.layout().abi.is_uninhabited() {\n-                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n-                return;\n-            }\n-\n-            ret.write_cvalue_transmute(fx, from);\n-        }\n         sym::write_bytes | sym::volatile_set_memory => {\n             intrinsic_args!(fx, args => (dst, val, count); intrinsic);\n             let val = val.load_scalar(fx);"}, {"sha": "012e25884ca99a1a99c04fcd00f201d3cbd096a8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -378,7 +378,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 }\n             }\n \n-            _ => bug!(\"unknown intrinsic '{}'\", name),\n+            _ => bug!(\"unknown intrinsic '{}' -- should it have been lowered earlier?\", name),\n         };\n \n         if !fn_abi.ret.is_ignore() {"}, {"sha": "5da0e826c56401da89df91414b4b07043ac6d691", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 84, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, ValidityRequirement};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n+use rustc_middle::ty::{self, Instance, Ty};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n@@ -769,23 +769,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             None => bx.fn_abi_of_fn_ptr(sig, extra_args),\n         };\n \n-        if intrinsic == Some(sym::transmute) {\n-            return if let Some(target) = target {\n-                self.codegen_transmute(bx, &args[0], destination);\n-                helper.funclet_br(self, bx, target, mergeable_succ)\n-            } else {\n-                // If we are trying to transmute to an uninhabited type,\n-                // it is likely there is no allotted destination. In fact,\n-                // transmuting to an uninhabited type is UB, which means\n-                // we can do what we like. Here, we declare that transmuting\n-                // into an uninhabited type is impossible, so anything following\n-                // it must be unreachable.\n-                assert_eq!(fn_abi.ret.layout.abi, abi::Abi::Uninhabited);\n-                bx.unreachable();\n-                MergingSucc::False\n-            };\n-        }\n-\n         if let Some(merging_succ) = self.codegen_panic_intrinsic(\n             &helper,\n             bx,\n@@ -828,7 +811,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         match intrinsic {\n             None | Some(sym::drop_in_place) => {}\n-            Some(sym::copy_nonoverlapping) => unreachable!(),\n             Some(intrinsic) => {\n                 let dest = match ret_dest {\n                     _ if fn_abi.ret.is_indirect() => llargs[0],\n@@ -1739,71 +1721,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_transmute(&mut self, bx: &mut Bx, src: &mir::Operand<'tcx>, dst: mir::Place<'tcx>) {\n-        if let Some(index) = dst.as_local() {\n-            match self.locals[index] {\n-                LocalRef::Place(place) => self.codegen_transmute_into(bx, src, place),\n-                LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n-                LocalRef::Operand(None) => {\n-                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(dst.as_ref()));\n-                    assert!(!dst_layout.ty.has_erasable_regions());\n-                    let place = PlaceRef::alloca(bx, dst_layout);\n-                    place.storage_live(bx);\n-                    self.codegen_transmute_into(bx, src, place);\n-                    let op = bx.load_operand(place);\n-                    place.storage_dead(bx);\n-                    self.locals[index] = LocalRef::Operand(Some(op));\n-                    self.debug_introduce_local(bx, index);\n-                }\n-                LocalRef::Operand(Some(op)) => {\n-                    assert!(op.layout.is_zst(), \"assigning to initialized SSAtemp\");\n-                }\n-            }\n-        } else {\n-            let dst = self.codegen_place(bx, dst.as_ref());\n-            self.codegen_transmute_into(bx, src, dst);\n-        }\n-    }\n-\n-    fn codegen_transmute_into(\n-        &mut self,\n-        bx: &mut Bx,\n-        src: &mir::Operand<'tcx>,\n-        dst: PlaceRef<'tcx, Bx::Value>,\n-    ) {\n-        let src = self.codegen_operand(bx, src);\n-\n-        // Special-case transmutes between scalars as simple bitcasts.\n-        match (src.layout.abi, dst.layout.abi) {\n-            (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n-                // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n-                let src_is_ptr = matches!(src_scalar.primitive(), abi::Pointer(_));\n-                let dst_is_ptr = matches!(dst_scalar.primitive(), abi::Pointer(_));\n-                if src_is_ptr == dst_is_ptr {\n-                    assert_eq!(src.layout.size, dst.layout.size);\n-\n-                    // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`\n-                    // conversions allow handling `bool`s the same as `u8`s.\n-                    let src = bx.from_immediate(src.immediate());\n-                    // LLVM also doesn't like `bitcast`s between pointers in different address spaces.\n-                    let src_as_dst = if src_is_ptr {\n-                        bx.pointercast(src, bx.backend_type(dst.layout))\n-                    } else {\n-                        bx.bitcast(src, bx.backend_type(dst.layout))\n-                    };\n-                    Immediate(bx.to_immediate_scalar(src_as_dst, dst_scalar)).store(bx, dst);\n-                    return;\n-                }\n-            }\n-            _ => {}\n-        }\n-\n-        let llty = bx.backend_type(src.layout);\n-        let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n-        let align = src.layout.align.abi.min(dst.align);\n-        src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, align));\n-    }\n-\n     // Stores the return value of a function call into it's final location.\n     fn store_return(\n         &mut self,"}, {"sha": "72d41d8c32c21d9163fee7bca231b9c633e88078", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{self, VariantIdx};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     #[instrument(level = \"trace\", skip(self, bx))]\n@@ -72,6 +72,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n \n+            mir::Rvalue::Cast(mir::CastKind::Transmute, ref operand, _ty) => {\n+                let src = self.codegen_operand(bx, operand);\n+                self.codegen_transmute(bx, src, dest);\n+            }\n+\n             mir::Rvalue::Repeat(ref elem, count) => {\n                 let cg_elem = self.codegen_operand(bx, elem);\n \n@@ -143,6 +148,52 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n+    fn codegen_transmute(\n+        &mut self,\n+        bx: &mut Bx,\n+        src: OperandRef<'tcx, Bx::Value>,\n+        dst: PlaceRef<'tcx, Bx::Value>,\n+    ) {\n+        // The MIR validator enforces no unsized transmutes.\n+        debug_assert!(src.layout.is_sized());\n+        debug_assert!(dst.layout.is_sized());\n+\n+        if src.layout.size != dst.layout.size\n+            || src.layout.abi == abi::Abi::Uninhabited\n+            || dst.layout.abi == abi::Abi::Uninhabited\n+        {\n+            // In all of these cases it's UB to run this transmute, but that's\n+            // known statically so might as well trap for it, rather than just\n+            // making it unreachable.\n+            bx.abort();\n+            return;\n+        }\n+\n+        let size_in_bytes = src.layout.size.bytes();\n+        if size_in_bytes == 0 {\n+            // Nothing to write\n+            return;\n+        }\n+\n+        match src.val {\n+            OperandValue::Ref(src_llval, meta, src_align) => {\n+                debug_assert_eq!(meta, None);\n+                // For a place-to-place transmute, call `memcpy` directly so that\n+                // both arguments get the best-available alignment information.\n+                let bytes = bx.cx().const_usize(size_in_bytes);\n+                let flags = MemFlags::empty();\n+                bx.memcpy(dst.llval, dst.align, src_llval, src_align, bytes, flags);\n+            }\n+            OperandValue::Immediate(_) | OperandValue::Pair(_, _) => {\n+                // When we have immediate(s), the alignment of the source is irrelevant,\n+                // so we can store them using the destination's alignment.\n+                let llty = bx.backend_type(src.layout);\n+                let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n+                src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, dst.align));\n+            }\n+        }\n+    }\n+\n     pub fn codegen_rvalue_unsized(\n         &mut self,\n         bx: &mut Bx,\n@@ -344,6 +395,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         };\n                         OperandValue::Immediate(newval)\n                     }\n+                    mir::CastKind::Transmute => {\n+                        bug!(\"Transmute operand {:?} in `codegen_rvalue_operand`\", operand);\n+                    }\n                 };\n                 OperandRef { val, layout: cast }\n             }\n@@ -673,6 +727,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>, span: Span) -> bool {\n         match *rvalue {\n+            mir::Rvalue::Cast(mir::CastKind::Transmute, ..) =>\n+                // FIXME: Now that transmute is an Rvalue, it would be nice if\n+                // it could create `Immediate`s for scalars, where possible.\n+                false,\n             mir::Rvalue::Ref(..) |\n             mir::Rvalue::CopyForDeref(..) |\n             mir::Rvalue::AddressOf(..) |"}, {"sha": "163e3f86993224edd626bb1e3c15c365919a3635", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -133,6 +133,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     bug!()\n                 }\n             }\n+\n+            Transmute => {\n+                assert!(src.layout.is_sized());\n+                assert!(dest.layout.is_sized());\n+                if src.layout.size != dest.layout.size {\n+                    throw_ub_format!(\n+                        \"transmuting from {}-byte type to {}-byte type: `{}` -> `{}`\",\n+                        src.layout.size.bytes(),\n+                        dest.layout.size.bytes(),\n+                        src.layout.ty,\n+                        dest.layout.ty,\n+                    );\n+                }\n+\n+                self.copy_op(src, dest, /*allow_transmute*/ true)?;\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "26fb041b455136bb1c1a79ae31f857dd725e817e", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -127,7 +127,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // First handle intrinsics without return place.\n         let ret = match ret {\n             None => match intrinsic_name {\n-                sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n                 sym::abort => M::abort(self, \"the program aborted execution\".to_owned())?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n@@ -411,9 +410,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.exact_div(&val, &size, dest)?;\n             }\n \n-            sym::transmute => {\n-                self.copy_op(&args[0], dest, /*allow_transmute*/ true)?;\n-            }\n             sym::assert_inhabited\n             | sym::assert_zero_valid\n             | sym::assert_mem_uninitialized_valid => {"}, {"sha": "66fc1c07e202978be86c65fcc18996a2ac7418a2", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -621,6 +621,33 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             );\n                         }\n                     }\n+                    CastKind::Transmute => {\n+                        if let MirPhase::Runtime(..) = self.mir_phase {\n+                            // Unlike `mem::transmute`, a MIR `Transmute` is well-formed\n+                            // for any two `Sized` types, just potentially UB to run.\n+\n+                            if !op_ty.is_sized(self.tcx, self.param_env) {\n+                                self.fail(\n+                                    location,\n+                                    format!(\"Cannot transmute from non-`Sized` type {op_ty:?}\"),\n+                                );\n+                            }\n+                            if !target_type.is_sized(self.tcx, self.param_env) {\n+                                self.fail(\n+                                    location,\n+                                    format!(\"Cannot transmute to non-`Sized` type {target_type:?}\"),\n+                                );\n+                            }\n+                        } else {\n+                            self.fail(\n+                                location,\n+                                format!(\n+                                    \"Transmute is not supported in non-runtime phase {:?}.\",\n+                                    self.mir_phase\n+                                ),\n+                            );\n+                        }\n+                    }\n                 }\n             }\n             Rvalue::Repeat(_, _)"}, {"sha": "9c575f6eb9fd0f04759d35c9a2d7dfdda1c1484e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -1967,7 +1967,8 @@ impl<'tcx> Rvalue<'tcx> {\n                 | CastKind::PtrToPtr\n                 | CastKind::Pointer(_)\n                 | CastKind::PointerFromExposedAddress\n-                | CastKind::DynStar,\n+                | CastKind::DynStar\n+                | CastKind::Transmute,\n                 _,\n                 _,\n             )"}, {"sha": "bbd913d071d48783b9213cfc52b8fbc5b76288b2", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -1156,6 +1156,13 @@ pub enum CastKind {\n     IntToFloat,\n     PtrToPtr,\n     FnPtrToPtr,\n+    /// Reinterpret the bits of the input as a different type.\n+    ///\n+    /// MIR is well-formed if the input and output types have different sizes,\n+    /// but running a transmute between differently-sized types is UB.\n+    ///\n+    /// Allowed only in [`MirPhase::Runtime`]; Earlier it's a [`TerminatorKind::Call`].\n+    Transmute,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "bf58b3090fb8ec8a75f62e46d3ec8474e54545e3", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -137,6 +137,10 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n         parse_by_kind!(self, expr_id, expr, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),\n+            @call(\"mir_cast_transmute\", args) => {\n+                let source = self.parse_operand(args[0])?;\n+                Ok(Rvalue::Cast(CastKind::Transmute, source, expr.ty))\n+            },\n             @call(\"mir_checked\", args) => {\n                 parse_by_kind!(self, args[0], _, \"binary op\",\n                     ExprKind::Binary { op, lhs, rhs } => Ok(Rvalue::CheckedBinaryOp("}, {"sha": "c1cf6ee0f9ec12d3ed10efce7f520f87be1edb79", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -504,6 +504,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n                 return None;\n             }\n+            // Do not try creating references, nor any types with potentially-complex\n+            // invariants. This avoids an issue where checking validity would do a\n+            // bunch of work generating a nice message about the invariant violation,\n+            // only to not show it to anyone (since this isn't the lint).\n+            Rvalue::Cast(CastKind::Transmute, op, dst_ty) if !dst_ty.is_primitive() => {\n+                trace!(\"skipping Transmute of {:?} to {:?}\", op, dst_ty);\n+\n+                return None;\n+            }\n \n             // There's no other checking to do at this time.\n             Rvalue::Aggregate(..)"}, {"sha": "6a7ceb8fef73ff75ecdd82261d41a980f6bf4a30", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -221,6 +221,32 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::transmute => {\n+                        let dst_ty = destination.ty(local_decls, tcx).ty;\n+                        let Ok([arg]) = <[_; 1]>::try_from(std::mem::take(args)) else {\n+                            span_bug!(\n+                                terminator.source_info.span,\n+                                \"Wrong number of arguments for transmute intrinsic\",\n+                            );\n+                        };\n+\n+                        // Always emit the cast, even if we transmute to an uninhabited type,\n+                        // because that lets CTFE and codegen generate better error messages\n+                        // when such a transmute actually ends up reachable.\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assign(Box::new((\n+                                *destination,\n+                                Rvalue::Cast(CastKind::Transmute, arg, dst_ty),\n+                            ))),\n+                        });\n+\n+                        if let Some(target) = *target {\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        } else {\n+                            terminator.kind = TerminatorKind::Unreachable;\n+                        }\n+                    }\n                     _ if intrinsic_name.as_str().starts_with(\"simd_shuffle\") => {\n                         validate_simd_shuffle(tcx, args, terminator.source_info.span);\n                     }"}, {"sha": "6690c1a76d5f03ba084de29667091ce9bf0c845f", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -343,6 +343,14 @@ define!(\n     /// See [`Field`] for documentation.\n     fn Variant<T>(place: T, index: u32) -> ()\n );\n+define!(\n+    \"mir_cast_transmute\",\n+    /// Emits a `CastKind::Transmute` cast.\n+    ///\n+    /// Needed to test the UB when `sizeof(T) != sizeof(U)`, which can't be\n+    /// generated via the normal `mem::transmute`.\n+    fn CastTransmute<T, U>(operand: T) -> U\n+);\n define!(\n     \"mir_make_place\",\n     #[doc(hidden)]"}, {"sha": "9f6adf3e3fab77338531845a9c02a083ce8f196e", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -176,6 +176,9 @@ fn check_rvalue<'tcx>(\n             // FIXME(dyn-star)\n             unimplemented!()\n         },\n+        Rvalue::Cast(CastKind::Transmute, _, _) => {\n+            Err((span, \"transmute can attempt to turn pointers into integers, so is unstable in const fn\".into()))\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;"}, {"sha": "cba3cc0ccf17b0c5a6953c27d578e9bd43956f30", "filename": "src/tools/miri/tests/fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -7,6 +7,6 @@ struct Human;\n \n fn main() {\n     let _x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR: transmuting to uninhabited\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR: entering unreachable code\n     };\n }"}, {"sha": "a51ca7fe7e767ccfadf77667d3cf246b048649f5", "filename": "src/tools/miri/tests/fail/never_transmute_humans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: transmuting to uninhabited type\n+error: Undefined Behavior: entering unreachable code\n   --> $DIR/never_transmute_humans.rs:LL:CC\n    |\n LL |         std::mem::transmute::<Human, !>(Human)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "ad67b4446165c0b9b2f04e41e5d9c971268db17d", "filename": "src/tools/miri/tests/fail/never_transmute_void.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -10,11 +10,13 @@ mod m {\n     pub struct Void(VoidI);\n \n     pub fn f(v: Void) -> ! {\n-        match v.0 {} //~ ERROR: entering unreachable code\n+        match v.0 {}\n+        //~^ ERROR: entering unreachable code\n     }\n }\n \n fn main() {\n     let v = unsafe { std::mem::transmute::<(), m::Void>(()) };\n-    m::f(v); //~ NOTE: inside `main`\n+    m::f(v);\n+    //~^ NOTE: inside `main`\n }"}, {"sha": "cefcf9ed9caae64595890a73b6c478d8ac27345d", "filename": "tests/codegen/intrinsics/transmute.rs", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,196 @@\n+// compile-flags: -O -C no-prepopulate-passes\n+// only-64bit (so I don't need to worry about usize)\n+// min-llvm-version: 15.0 # this test assumes `ptr`s\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+#![feature(custom_mir)]\n+#![feature(inline_const)]\n+\n+use std::mem::transmute;\n+\n+// Some of the cases here are statically rejected by `mem::transmute`, so\n+// we need to generate custom MIR for those cases to get to codegen.\n+use std::intrinsics::mir::*;\n+\n+enum Never {}\n+\n+#[repr(align(2))]\n+pub struct BigNever(Never, u16, Never);\n+\n+#[repr(align(8))]\n+pub struct Scalar64(i64);\n+\n+#[repr(C, align(4))]\n+pub struct Aggregate64(u16, u8, i8, f32);\n+\n+// CHECK-LABEL: @check_bigger_size(\n+#[no_mangle]\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+pub unsafe fn check_bigger_size(x: u16) -> u32 {\n+    // CHECK: call void @llvm.trap\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            Return()\n+        }\n+    }\n+}\n+\n+// CHECK-LABEL: @check_smaller_size(\n+#[no_mangle]\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+pub unsafe fn check_smaller_size(x: u32) -> u16 {\n+    // CHECK: call void @llvm.trap\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            Return()\n+        }\n+    }\n+}\n+\n+// CHECK-LABEL: @check_to_uninhabited(\n+#[no_mangle]\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+pub unsafe fn check_to_uninhabited(x: u16) -> BigNever {\n+    // CHECK: call void @llvm.trap\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            Return()\n+        }\n+    }\n+}\n+\n+// CHECK-LABEL: @check_from_uninhabited(\n+#[no_mangle]\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+pub unsafe fn check_from_uninhabited(x: BigNever) -> u16 {\n+    // CHECK: call void @llvm.trap\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            Return()\n+        }\n+    }\n+}\n+\n+// CHECK-LABEL: @check_to_newtype(\n+#[no_mangle]\n+pub unsafe fn check_to_newtype(x: u64) -> Scalar64 {\n+    // CHECK: %0 = alloca i64\n+    // CHECK: store i64 %x, ptr %0\n+    // CHECK: %1 = load i64, ptr %0\n+    // CHECK: ret i64 %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_from_newtype(\n+#[no_mangle]\n+pub unsafe fn check_from_newtype(x: Scalar64) -> u64 {\n+    // CHECK: %0 = alloca i64\n+    // CHECK: store i64 %x, ptr %0\n+    // CHECK: %1 = load i64, ptr %0\n+    // CHECK: ret i64 %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_to_pair(\n+#[no_mangle]\n+pub unsafe fn check_to_pair(x: u64) -> Option<i32> {\n+    // CHECK: %0 = alloca { i32, i32 }, align 4\n+    // CHECK: store i64 %x, ptr %0, align 4\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_from_pair(\n+#[no_mangle]\n+pub unsafe fn check_from_pair(x: Option<i32>) -> u64 {\n+    // The two arguments are of types that are only 4-aligned, but they're\n+    // immediates so we can write using the destination alloca's alignment.\n+    const { assert!(std::mem::align_of::<Option<i32>>() == 4) };\n+\n+    // CHECK: %0 = alloca i64, align 8\n+    // CHECK: store i32 %x.0, ptr %1, align 8\n+    // CHECK: store i32 %x.1, ptr %2, align 4\n+    // CHECK: %3 = load i64, ptr %0, align 8\n+    // CHECK: ret i64 %3\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_to_float(\n+#[no_mangle]\n+pub unsafe fn check_to_float(x: u32) -> f32 {\n+    // CHECK: %0 = alloca float\n+    // CHECK: store i32 %x, ptr %0\n+    // CHECK: %1 = load float, ptr %0\n+    // CHECK: ret float %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_from_float(\n+#[no_mangle]\n+pub unsafe fn check_from_float(x: f32) -> u32 {\n+    // CHECK: %0 = alloca i32\n+    // CHECK: store float %x, ptr %0\n+    // CHECK: %1 = load i32, ptr %0\n+    // CHECK: ret i32 %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_to_bytes(\n+#[no_mangle]\n+pub unsafe fn check_to_bytes(x: u32) -> [u8; 4] {\n+    // CHECK: %0 = alloca [4 x i8], align 1\n+    // CHECK: store i32 %x, ptr %0, align 1\n+    // CHECK: %1 = load i32, ptr %0, align 1\n+    // CHECK: ret i32 %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_from_bytes(\n+#[no_mangle]\n+pub unsafe fn check_from_bytes(x: [u8; 4]) -> u32 {\n+    // CHECK: %1 = alloca i32, align 4\n+    // CHECK: %x = alloca [4 x i8], align 1\n+    // CHECK: call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 1 %x, i64 4, i1 false)\n+    // CHECK: %3 = load i32, ptr %1, align 4\n+    // CHECK: ret i32 %3\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_to_aggregate(\n+#[no_mangle]\n+pub unsafe fn check_to_aggregate(x: u64) -> Aggregate64 {\n+    // CHECK: %0 = alloca %Aggregate64, align 4\n+    // CHECK: store i64 %x, ptr %0, align 4\n+    // CHECK: %1 = load i64, ptr %0, align 4\n+    // CHECK: ret i64 %1\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_from_aggregate(\n+#[no_mangle]\n+pub unsafe fn check_from_aggregate(x: Aggregate64) -> u64 {\n+    // CHECK: call void @llvm.memcpy.p0.p0.i64(ptr align 8 %{{[0-9]+}}, ptr align 4 %x, i64 8, i1 false)\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_long_array_less_aligned(\n+#[no_mangle]\n+pub unsafe fn check_long_array_less_aligned(x: [u64; 100]) -> [u16; 400] {\n+    // CHECK-NEXT: start\n+    // CHECK-NEXT: call void @llvm.memcpy.p0.p0.i64(ptr align 2 %0, ptr align 8 %x, i64 800, i1 false)\n+    // CHECK-NEXT: ret void\n+    transmute(x)\n+}\n+\n+// CHECK-LABEL: @check_long_array_more_aligned(\n+#[no_mangle]\n+pub unsafe fn check_long_array_more_aligned(x: [u8; 100]) -> [u32; 25] {\n+    // CHECK-NEXT: start\n+    // CHECK-NEXT: call void @llvm.memcpy.p0.p0.i64(ptr align 4 %0, ptr align 1 %x, i64 100, i1 false)\n+    // CHECK-NEXT: ret void\n+    transmute(x)\n+}"}, {"sha": "4d7a80bfbe5cce834af4079b18a6d18950968f6d", "filename": "tests/codegen/transmute-scalar.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fcodegen%2Ftransmute-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fcodegen%2Ftransmute-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftransmute-scalar.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -1,13 +1,19 @@\n // compile-flags: -O -C no-prepopulate-passes\n+// min-llvm-version: 15.0 # this test assumes `ptr`s and thus no `pointercast`s\n \n #![crate_type = \"lib\"]\n \n-// FIXME(eddyb) all of these tests show memory stores and loads, even after a\n-// scalar `bitcast`, more special-casing is required to remove `alloca` usage.\n+// With opaque ptrs in LLVM, `transmute` can load/store any `alloca` as any type,\n+// without needing to pointercast, and SRoA will turn that into a `bitcast`.\n+// As such, there's no longer special-casing in `transmute` to attempt to\n+// generate `bitcast` ourselves, as that just made the IR longer.\n+\n+// FIXME: That said, `bitcast`s could still be a valuable addition if they could\n+// be done in `rvalue_creates_operand`, and thus avoid the `alloca`s entirely.\n \n // CHECK-LABEL: define{{.*}}i32 @f32_to_bits(float noundef %x)\n-// CHECK: store i32 %{{.*}}, {{.*}} %0\n-// CHECK-NEXT: %[[RES:.*]] = load i32, {{.*}} %0\n+// CHECK: store float %{{.*}}, ptr %0\n+// CHECK-NEXT: %[[RES:.*]] = load i32, ptr %0\n // CHECK: ret i32 %[[RES]]\n #[no_mangle]\n pub fn f32_to_bits(x: f32) -> u32 {\n@@ -25,12 +31,10 @@ pub fn bool_to_byte(b: bool) -> u8 {\n }\n \n // CHECK-LABEL: define{{.*}}noundef zeroext i1 @byte_to_bool(i8 noundef %byte)\n-// CHECK: %1 = trunc i8 %byte to i1\n-// CHECK-NEXT: %2 = zext i1 %1 to i8\n-// CHECK-NEXT: store i8 %2, {{.*}} %0\n-// CHECK-NEXT: %3 = load i8, {{.*}} %0\n-// CHECK-NEXT: %4 = trunc i8 %3 to i1\n-// CHECK: ret i1 %4\n+// CHECK: store i8 %byte, ptr %0\n+// CHECK-NEXT: %1 = load i8, {{.*}} %0\n+// CHECK-NEXT: %2 = trunc i8 %1 to i1\n+// CHECK: ret i1 %2\n #[no_mangle]\n pub unsafe fn byte_to_bool(byte: u8) -> bool {\n     std::mem::transmute(byte)\n@@ -45,20 +49,8 @@ pub fn ptr_to_ptr(p: *mut u16) -> *mut u8 {\n     unsafe { std::mem::transmute(p) }\n }\n \n-// HACK(eddyb) scalar `transmute`s between pointers and non-pointers are\n-// currently not special-cased like other scalar `transmute`s, because\n-// LLVM requires specifically `ptrtoint`/`inttoptr` instead of `bitcast`.\n-//\n-// Tests below show the non-special-cased behavior (with the possible\n-// future special-cased instructions in the \"NOTE(eddyb)\" comments).\n-\n // CHECK: define{{.*}}[[USIZE:i[0-9]+]] @ptr_to_int({{i16\\*|ptr}} noundef %p)\n-\n-// NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n-//        %2 = ptrtoint i16* %p to [[USIZE]]\n-//             store [[USIZE]] %2, [[USIZE]]* %0\n // CHECK: store {{i16\\*|ptr}} %p, {{.*}}\n-\n // CHECK-NEXT: %[[RES:.*]] = load [[USIZE]], {{.*}} %0\n // CHECK: ret [[USIZE]] %[[RES]]\n #[no_mangle]\n@@ -67,12 +59,7 @@ pub fn ptr_to_int(p: *mut u16) -> usize {\n }\n \n // CHECK: define{{.*}}{{i16\\*|ptr}} @int_to_ptr([[USIZE]] noundef %i)\n-\n-// NOTE(eddyb) see above, the following two CHECK lines should ideally be this:\n-//        %2 = inttoptr [[USIZE]] %i to i16*\n-//             store i16* %2, i16** %0\n // CHECK: store [[USIZE]] %i, {{.*}}\n-\n // CHECK-NEXT: %[[RES:.*]] = load {{i16\\*|ptr}}, {{.*}} %0\n // CHECK: ret {{i16\\*|ptr}} %[[RES]]\n #[no_mangle]"}, {"sha": "933dfbb5166d28ffec0c7ac7a99ec5d06a1b1cbb", "filename": "tests/mir-opt/const_prop/transmute.from_char.ConstProp.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.from_char.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `from_char` before ConstProp\n++ // MIR for `from_char` after ConstProp\n+  \n+  fn from_char() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/transmute.rs:+0:23: +0:26\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const 'R' as i32 (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n++         _0 = const 82_i32;               // scope 1 at $DIR/transmute.rs:+1:14: +1:28\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "f3474855f027da2dda9d9631cf546fa2d63b53bf", "filename": "tests/mir-opt/const_prop/transmute.invalid_bool.ConstProp.diff", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_bool.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,14 @@\n+- // MIR for `invalid_bool` before ConstProp\n++ // MIR for `invalid_bool` after ConstProp\n+  \n+  fn invalid_bool() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          _0 = const -1_i8 as bool (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:30\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "ba087e226c9c468ac8190125031edd98c47828da", "filename": "tests/mir-opt/const_prop/transmute.invalid_char.ConstProp.diff", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.invalid_char.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,14 @@\n+- // MIR for `invalid_char` before ConstProp\n++ // MIR for `invalid_char` after ConstProp\n+  \n+  fn invalid_char() -> char {\n+      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:33: +0:37\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          _0 = const _ as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "76d464789c191d33025a08571f7448c7b9607e44", "filename": "tests/mir-opt/const_prop/transmute.less_as_i8.ConstProp.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.less_as_i8.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `less_as_i8` before ConstProp\n++ // MIR for `less_as_i8` after ConstProp\n+  \n+  fn less_as_i8() -> i8 {\n+      let mut _0: i8;                      // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:26\n+      let mut _1: std::cmp::Ordering;      // in scope 0 at $DIR/transmute.rs:+1:24: +1:48\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n+-         _1 = Less;                       // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n+-         _0 = move _1 as i8 (Transmute);  // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n++         _1 = const Less;                 // scope 1 at $DIR/transmute.rs:+1:24: +1:48\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0xff)) }\n++         _0 = const -1_i8;                // scope 1 at $DIR/transmute.rs:+1:14: +1:49\n+          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+1:48: +1:49\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "b753cdccd606f63ed33a4d2947798019f45ed360", "filename": "tests/mir-opt/const_prop/transmute.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,61 @@\n+// unit-test: ConstProp\n+// compile-flags: -O --crate-type=lib\n+\n+use std::mem::transmute;\n+\n+// EMIT_MIR transmute.less_as_i8.ConstProp.diff\n+pub fn less_as_i8() -> i8 {\n+    unsafe { transmute(std::cmp::Ordering::Less) }\n+}\n+\n+// EMIT_MIR transmute.from_char.ConstProp.diff\n+pub fn from_char() -> i32 {\n+    unsafe { transmute('R') }\n+}\n+\n+// EMIT_MIR transmute.valid_char.ConstProp.diff\n+pub fn valid_char() -> char {\n+    unsafe { transmute(0x52_u32) }\n+}\n+\n+// EMIT_MIR transmute.invalid_char.ConstProp.diff\n+pub unsafe fn invalid_char() -> char {\n+    unsafe { transmute(i32::MAX) }\n+}\n+\n+// EMIT_MIR transmute.invalid_bool.ConstProp.diff\n+pub unsafe fn invalid_bool() -> bool {\n+    unsafe { transmute(-1_i8) }\n+}\n+\n+// EMIT_MIR transmute.undef_union_as_integer.ConstProp.diff\n+pub unsafe fn undef_union_as_integer() -> u32 {\n+    union Union32 { value: u32, unit: () }\n+    unsafe { transmute(Union32 { unit: () }) }\n+}\n+\n+// EMIT_MIR transmute.unreachable_direct.ConstProp.diff\n+pub unsafe fn unreachable_direct() -> ! {\n+    let x: Never = unsafe { transmute(()) };\n+    match x {}\n+}\n+\n+// EMIT_MIR transmute.unreachable_ref.ConstProp.diff\n+pub unsafe fn unreachable_ref() -> ! {\n+    let x: &Never = unsafe { transmute(1_usize) };\n+    match *x {}\n+}\n+\n+// EMIT_MIR transmute.unreachable_mut.ConstProp.diff\n+pub unsafe fn unreachable_mut() -> ! {\n+    let x: &mut Never = unsafe { transmute(1_usize) };\n+    match *x {}\n+}\n+\n+// EMIT_MIR transmute.unreachable_box.ConstProp.diff\n+pub unsafe fn unreachable_box() -> ! {\n+    let x: Box<Never> = unsafe { transmute(1_usize) };\n+    match *x {}\n+}\n+\n+enum Never {}"}, {"sha": "538b1f26e4c9bc444b9e18475b0e06a1f7841b8e", "filename": "tests/mir-opt/const_prop/transmute.undef_union_as_integer.ConstProp.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.undef_union_as_integer.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `undef_union_as_integer` before ConstProp\n++ // MIR for `undef_union_as_integer` after ConstProp\n+  \n+  fn undef_union_as_integer() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/transmute.rs:+0:43: +0:46\n+      let mut _1: undef_union_as_integer::Union32; // in scope 0 at $DIR/transmute.rs:+2:24: +2:44\n+      let mut _2: ();                      // in scope 0 at $DIR/transmute.rs:+2:40: +2:42\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n+          StorageLive(_2);                 // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n+          _2 = ();                         // scope 1 at $DIR/transmute.rs:+2:40: +2:42\n+          _1 = Union32 { value: move _2 }; // scope 1 at $DIR/transmute.rs:+2:24: +2:44\n+          StorageDead(_2);                 // scope 1 at $DIR/transmute.rs:+2:43: +2:44\n+          _0 = move _1 as u32 (Transmute); // scope 1 at $DIR/transmute.rs:+2:14: +2:45\n+          StorageDead(_1);                 // scope 1 at $DIR/transmute.rs:+2:44: +2:45\n+          return;                          // scope 0 at $DIR/transmute.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "8bf97996a678f3d5034c7de7b8104b723e526fd3", "filename": "tests/mir-opt/const_prop/transmute.unreachable_box.ConstProp.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_box.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `unreachable_box` before ConstProp\n++ // MIR for `unreachable_box` after ConstProp\n+  \n+  fn unreachable_box() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "81b7b36899309f1c2460385f221b01dd94452893", "filename": "tests/mir-opt/const_prop/transmute.unreachable_direct.ConstProp.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_direct.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `unreachable_direct` before ConstProp\n++ // MIR for `unreachable_direct` after ConstProp\n+  \n+  fn unreachable_direct() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:39: +0:40\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:41: +3:2\n+      let _2: Never;                       // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: ();                      // in scope 0 at $DIR/transmute.rs:+1:39: +1:41\n+      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:15\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:41: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _3 = ();                         // scope 2 at $DIR/transmute.rs:+1:39: +1:41\n+          _2 = move _3 as Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+          unreachable;                     // scope 2 at $DIR/transmute.rs:+1:29: +1:42\n+      }\n+  }\n+  "}, {"sha": "34f7aea8ed26c67515197515d6690f6db3e551fd", "filename": "tests/mir-opt/const_prop/transmute.unreachable_mut.ConstProp.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_mut.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `unreachable_mut` before ConstProp\n++ // MIR for `unreachable_mut` after ConstProp\n+  \n+  fn unreachable_mut() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: &mut Never;                  // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: &mut Never;              // in scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+      let mut _4: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          _3 = const 1_usize as &mut Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:34: +1:52\n+          _2 = &mut (*_3);                 // scope 0 at $DIR/transmute.rs:+1:34: +1:52\n+          StorageDead(_3);                 // scope 0 at $DIR/transmute.rs:+1:54: +1:55\n+          StorageLive(_4);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "ff95f2a0b943c7aa3199e75807e2f402b33b1769", "filename": "tests/mir-opt/const_prop/transmute.unreachable_ref.ConstProp.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.unreachable_ref.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `unreachable_ref` before ConstProp\n++ // MIR for `unreachable_ref` after ConstProp\n+  \n+  fn unreachable_ref() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/transmute.rs:+0:36: +0:37\n+      let mut _1: !;                       // in scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+      let _2: &Never;                      // in scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/transmute.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/transmute.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/transmute.rs:+0:38: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/transmute.rs:+1:9: +1:10\n+          _2 = const 1_usize as &Never (Transmute); // scope 2 at $DIR/transmute.rs:+1:30: +1:48\n+          StorageLive(_3);                 // scope 1 at $DIR/transmute.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/transmute.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "eac33b730034864ee0bac7a4f0204e71d76cfa0e", "filename": "tests/mir-opt/const_prop/transmute.valid_char.ConstProp.diff", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftransmute.valid_char.ConstProp.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,15 @@\n+- // MIR for `valid_char` before ConstProp\n++ // MIR for `valid_char` after ConstProp\n+  \n+  fn valid_char() -> char {\n+      let mut _0: char;                    // return place in scope 0 at $DIR/transmute.rs:+0:24: +0:28\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         _0 = const 82_u32 as char (Transmute); // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n++         _0 = const 'R';                  // scope 1 at $DIR/transmute.rs:+1:14: +1:33\n+          return;                          // scope 0 at $DIR/transmute.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8e6e6fc0ec2a3f72054446471d62084769ec9a27", "filename": "tests/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -24,61 +24,49 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue_75439.rs:+2:9: +2:15\n           StorageLive(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:47: +2:52\n           _3 = _1;                         // scope 2 at $DIR/issue_75439.rs:+2:47: +2:52\n-          _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue_75439.rs:+2:37: +2:53\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_75439.rs:8:37: 8:46\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(<ZST>) }\n+          _2 = move _3 as [u32; 4] (Transmute); // scope 2 at $DIR/issue_75439.rs:+2:37: +2:53\n+          StorageDead(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:52: +2:53\n+          switchInt(_2[0 of 4]) -> [0: bb1, otherwise: bb6]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 2 at $DIR/issue_75439.rs:+2:52: +2:53\n-          switchInt(_2[0 of 4]) -> [0: bb2, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          switchInt(_2[1 of 4]) -> [0: bb2, otherwise: bb6]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0: bb3, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          switchInt(_2[2 of 4]) -> [0: bb4, 4294901760: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0: bb5, 4294901760: bb6, otherwise: bb8]; // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n-      }\n-  \n-      bb4: {\n           StorageLive(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:14: +5:38\n           StorageLive(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:33: +5:35\n           _6 = _4;                         // scope 4 at $DIR/issue_75439.rs:+5:33: +5:35\n-          _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue_75439.rs:+5:23: +5:36\n-                                           // mir::Constant\n-                                           // + span: $DIR/issue_75439.rs:11:23: 11:32\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(<ZST>) }\n+          _5 = move _6 as [u8; 4] (Transmute); // scope 4 at $DIR/issue_75439.rs:+5:23: +5:36\n+          StorageDead(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:35: +5:36\n+          _0 = Option::<[u8; 4]>::Some(move _5); // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:38: +5:39\n+          StorageDead(_4);                 // scope 1 at $DIR/issue_75439.rs:+6:5: +6:6\n+          goto -> bb7;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n-      bb5: {\n+      bb4: {\n           StorageLive(_4);                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n           _4 = _2[3 of 4];                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n-          goto -> bb4;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          goto -> bb3;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n-      bb6: {\n+      bb5: {\n           StorageLive(_4);                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n           _4 = _2[3 of 4];                 // scope 3 at $DIR/issue_75439.rs:+4:27: +4:29\n-          goto -> bb4;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n+          goto -> bb3;                     // scope 3 at $DIR/issue_75439.rs:+4:12: +4:30\n       }\n   \n-      bb7: {\n-          StorageDead(_6);                 // scope 4 at $DIR/issue_75439.rs:+5:35: +5:36\n-          _0 = Option::<[u8; 4]>::Some(move _5); // scope 3 at $DIR/issue_75439.rs:+5:9: +5:39\n-          StorageDead(_5);                 // scope 3 at $DIR/issue_75439.rs:+5:38: +5:39\n-          StorageDead(_4);                 // scope 1 at $DIR/issue_75439.rs:+6:5: +6:6\n-          goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n-      }\n-  \n-      bb8: {\n+      bb6: {\n           _0 = Option::<[u8; 4]>::None;    // scope 1 at $DIR/issue_75439.rs:+7:9: +7:13\n-          goto -> bb9;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n+          goto -> bb7;                     // scope 1 at $DIR/issue_75439.rs:+4:5: +8:6\n       }\n   \n-      bb9: {\n+      bb7: {\n           StorageDead(_2);                 // scope 0 at $DIR/issue_75439.rs:+9:1: +9:2\n           return;                          // scope 0 at $DIR/issue_75439.rs:+9:2: +9:2\n       }"}, {"sha": "5c5a9e90a9da2eb9773dbcb4e10684165e46a3b8", "filename": "tests/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -11,7 +11,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:72:9: 72:32\n+-                                          // + span: $DIR/lower_intrinsics.rs:105:9: 105:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n +         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38"}, {"sha": "87960521bb454f56246a7262ef90a214509ff8fd", "filename": "tests/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -31,7 +31,7 @@\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n -         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:49:5: 49:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:82:5: 82:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n@@ -46,13 +46,13 @@\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _19 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:50:42: 50:44\n+                                           // + span: $DIR/lower_intrinsics.rs:83:42: 83:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:50:5: 50:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:83:5: 83:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n@@ -67,13 +67,13 @@\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _18 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:51:42: 51:45\n+                                           // + span: $DIR/lower_intrinsics.rs:84:42: 84:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:51:5: 51:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:84:5: 84:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n@@ -88,13 +88,13 @@\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _17 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:52:42: 52:47\n+                                           // + span: $DIR/lower_intrinsics.rs:85:42: 85:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:52:5: 52:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:85:5: 85:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48"}, {"sha": "15cce7f4a2c010411eb97f92e5df9e69d8676fdd", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -49,7 +49,7 @@\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:65:9: 65:28\n+-                                          // + span: $DIR/lower_intrinsics.rs:98:9: 98:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n +         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n +         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95"}, {"sha": "c563703b250d4174f1b2f94281cf0da159ab88be", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:99:18: 99:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> bb2; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:100:18: 100:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "f2f676843b2c8857ec82dd55649da376d8c28563", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<i32>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:85:14: 85:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:118:14: 118:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32) -> i32 {read_via_copy::<i32>}, val: Value(<ZST>) }\n +         _0 = (*_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48"}, {"sha": "3ad21283fa47e9b833a1d0f63f2cf9d4ea248cc1", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:90:14: 90:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:123:14: 123:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Never) -> Never {read_via_copy::<Never>}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n       }"}, {"sha": "ec215c9a66461b5be927dd1dce10ce943aa8adeb", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -38,6 +38,39 @@ pub fn non_const<T>() -> usize {\n     size_of_t()\n }\n \n+// EMIT_MIR lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff\n+pub fn transmute_inhabited(c: std::cmp::Ordering) -> i8 {\n+    unsafe { std::mem::transmute(c) }\n+}\n+\n+// EMIT_MIR lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff\n+pub unsafe fn transmute_uninhabited(u: ()) -> Never {\n+    unsafe { std::mem::transmute::<(), Never>(u) }\n+}\n+\n+// EMIT_MIR lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff\n+pub unsafe fn transmute_ref_dst<T: ?Sized>(u: &T) -> *const T {\n+    unsafe { std::mem::transmute(u) }\n+}\n+\n+// EMIT_MIR lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff\n+pub unsafe fn transmute_to_ref_uninhabited() -> ! {\n+    let x: &Never = std::mem::transmute(1usize);\n+    match *x {}\n+}\n+\n+// EMIT_MIR lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff\n+pub unsafe fn transmute_to_mut_uninhabited() -> ! {\n+    let x: &mut Never = std::mem::transmute(1usize);\n+    match *x {}\n+}\n+\n+// EMIT_MIR lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff\n+pub unsafe fn transmute_to_box_uninhabited() -> ! {\n+    let x: Box<Never> = std::mem::transmute(1usize);\n+    match *x {}\n+}\n+\n pub enum E {\n     A,\n     B,"}, {"sha": "814368ec021e7bad625587f716a4d6019a94d97b", "filename": "tests/mir-opt/lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `transmute_inhabited` before LowerIntrinsics\n++ // MIR for `transmute_inhabited` after LowerIntrinsics\n+  \n+  fn transmute_inhabited(_1: std::cmp::Ordering) -> i8 {\n+      debug c => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:28: +0:29\n+      let mut _0: i8;                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:54: +0:56\n+      let mut _2: std::cmp::Ordering;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+          _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+-         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:43:14: 43:33\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(std::cmp::Ordering) -> i8 {transmute::<std::cmp::Ordering, i8>}, val: Value(<ZST>) }\n++         _0 = move _2 as i8 (Transmute);  // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:35: +1:36\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "5440c7a4c8ec591056ab2f70f57b113ac09354d8", "filename": "tests/mir-opt/lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,27 @@\n+- // MIR for `transmute_ref_dst` before LowerIntrinsics\n++ // MIR for `transmute_ref_dst` after LowerIntrinsics\n+  \n+  fn transmute_ref_dst(_1: &T) -> *const T {\n+      debug u => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:44: +0:45\n+      let mut _0: *const T;                // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:54: +0:62\n+      let mut _2: &T;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+          _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+-         _0 = transmute::<&T, *const T>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:53:14: 53:33\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&T) -> *const T {transmute::<&T, *const T>}, val: Value(<ZST>) }\n++         _0 = move _2 as *const T (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:35: +1:36\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "43ddccc1ef7db8bcb427a50521842820097b7fdc", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `transmute_to_box_uninhabited` before LowerIntrinsics\n++ // MIR for `transmute_to_box_uninhabited` after LowerIntrinsics\n+  \n+  fn transmute_to_box_uninhabited() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n+      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+      let _2: std::boxed::Box<Never>;      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }\n++         _2 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+      }\n+  \n+      bb1: {\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "bf529a9ca678829d33198159b7d78603fae59046", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `transmute_to_mut_uninhabited` before LowerIntrinsics\n++ // MIR for `transmute_to_mut_uninhabited` after LowerIntrinsics\n+  \n+  fn transmute_to_mut_uninhabited() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n+      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+      let _2: &mut Never;                  // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _2 = transmute::<usize, &mut Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }\n++         _2 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+      }\n+  \n+      bb1: {\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "4940a99021f40d9fe3e04bd2323b7708b51b1d31", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `transmute_to_ref_uninhabited` before LowerIntrinsics\n++ // MIR for `transmute_to_ref_uninhabited` after LowerIntrinsics\n+  \n+  fn transmute_to_ref_uninhabited() -> ! {\n+      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50\n+      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+      let _2: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+      scope 1 {\n+          debug x => _2;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n+-         _2 = transmute::<usize, &Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }\n++         _2 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+      }\n+  \n+      bb1: {\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:5: +2:16\n+          unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13\n+      }\n+  }\n+  "}, {"sha": "f3a12b9ba5f27b8315bd5731f97b123c77d72f4e", "filename": "tests/mir-opt/lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `transmute_uninhabited` before LowerIntrinsics\n++ // MIR for `transmute_uninhabited` after LowerIntrinsics\n+  \n+  fn transmute_uninhabited(_1: ()) -> Never {\n+      debug u => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:37: +0:38\n+      let mut _0: Never;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:47: +0:52\n+      let mut _2: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+          _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n+-         _0 = transmute::<(), Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:48:14: 48:46\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Never {transmute::<(), Never>}, val: Value(<ZST>) }\n++         _0 = move _2 as Never (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n++         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n+      }\n+  }\n+  "}, {"sha": "3b9a41249a4becd416eb94d2304c1fe9d0153b09", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -32,7 +32,7 @@\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n -         _3 = add_with_overflow::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:78:14: 78:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:111:14: 111:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _3 = CheckedAdd(move _4, move _5); // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n@@ -48,7 +48,7 @@\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n -         _6 = sub_with_overflow::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:79:14: 79:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:112:14: 112:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _6 = CheckedSub(move _7, move _8); // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n@@ -64,7 +64,7 @@\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n -         _9 = mul_with_overflow::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:80:14: 80:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:113:14: 113:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _9 = CheckedMul(move _10, move _11); // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55"}, {"sha": "1abe708d19eb29b9584a5598b78679895d5ed85f", "filename": "tests/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -11,5 +11,5 @@ impl PrintName {\n }\n \n fn main() {\n-    let _ = PrintName::VOID; //~ constant\n+    let _ = PrintName::VOID; //~ erroneous constant used\n }"}, {"sha": "2410baea28c3adf6606454f7dc08c499b267592a", "filename": "tests/ui/consts/const-eval/transmute-size-mismatch.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,24 @@\n+#![feature(core_intrinsics)]\n+#![feature(custom_mir)]\n+\n+// These cases are statically rejected by `mem::transmute`, so we need custom\n+// MIR to be able to get to constant evaluation.\n+use std::intrinsics::mir::*;\n+\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+const unsafe fn mir_transmute<T, U>(x: T) -> U {\n+    mir!{\n+        {\n+            RET = CastTransmute(x);\n+            //~^ ERROR evaluation of constant value failed\n+            //~| ERROR evaluation of constant value failed\n+            Return()\n+        }\n+    }\n+}\n+\n+const FROM_BIGGER: u16 = unsafe { mir_transmute(123_i32) };\n+\n+const FROM_SMALLER: u32 = unsafe { mir_transmute(123_i16) };\n+\n+fn main() {}"}, {"sha": "e051491d3430f3bb9cb0b5655812bf860a2de603", "filename": "tests/ui/consts/const-eval/transmute-size-mismatch.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-size-mismatch.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -0,0 +1,37 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/transmute-size-mismatch.rs:12:13\n+   |\n+LL |             RET = CastTransmute(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ transmuting from 4-byte type to 2-byte type: `i32` -> `u16`\n+   |\n+note: inside `mir_transmute::<i32, u16>`\n+  --> $DIR/transmute-size-mismatch.rs:12:13\n+   |\n+LL |             RET = CastTransmute(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `FROM_BIGGER`\n+  --> $DIR/transmute-size-mismatch.rs:20:35\n+   |\n+LL | const FROM_BIGGER: u16 = unsafe { mir_transmute(123_i32) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/transmute-size-mismatch.rs:12:13\n+   |\n+LL |             RET = CastTransmute(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ transmuting from 2-byte type to 4-byte type: `i16` -> `u32`\n+   |\n+note: inside `mir_transmute::<i16, u32>`\n+  --> $DIR/transmute-size-mismatch.rs:12:13\n+   |\n+LL |             RET = CastTransmute(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `FROM_SMALLER`\n+  --> $DIR/transmute-size-mismatch.rs:22:36\n+   |\n+LL | const FROM_SMALLER: u32 = unsafe { mir_transmute(123_i16) };\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "3ad1ac974c8066f683008d656f0635a63b728778", "filename": "tests/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -108,13 +108,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:96:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n-   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Ok)>.0.1: encountered a value of uninhabited type Never\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:98:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n-   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Ok)>.0.1: encountered a value of the never type `!`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "a66706d1af9b8edf7939fb68d24d2548b27c3535", "filename": "tests/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -108,13 +108,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:96:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n-   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Ok)>.0.1: encountered a value of uninhabited type Never\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-enum.rs:98:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n-   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<enum-variant(Ok)>.0.1: encountered a value of the never type `!`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "74bc6317c808e101fbf7daf82aa162eeaa0766c4", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -11,7 +11,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of the never type `!`\n    |\n note: inside `foo`\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "74bc6317c808e101fbf7daf82aa162eeaa0766c4", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -11,7 +11,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of the never type `!`\n    |\n note: inside `foo`\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "35fdcae6a598a8e65e339dca7338cbdc6e0458a1", "filename": "tests/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/tests%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -47,7 +47,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/uninhabited-static.rs:12:31\n    |\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Void\n \n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31\n@@ -66,7 +66,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/uninhabited-static.rs:16:32\n    |\n LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Void\n \n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:16:32"}]}