{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTkxMWE0YTBiZWFkN2RkMWY5ZWYyZjkwNDQyODQ0NDM0Y2MzOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-23T17:44:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-23T17:44:19Z"}, "message": "Auto merge of #55229 - nikomatsakis:issue-54692-closure-signatures, r=MatthewJasper\n\nenforce user annotations in closure signatures\n\nNot *quite* ready yet but I'm opening anyway. Still have to finish running tests locally.\n\nFixes #54692\nFixes #54124\n\nr? @matthewjasper", "tree": {"sha": "39fac6f143105ebb9537d926737a697e78e6d4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39fac6f143105ebb9537d926737a697e78e6d4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d74b40205f7ecf30c680dc77e62cf4f127f2db09", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74b40205f7ecf30c680dc77e62cf4f127f2db09", "html_url": "https://github.com/rust-lang/rust/commit/d74b40205f7ecf30c680dc77e62cf4f127f2db09"}, {"sha": "4394c83cb7685e1bbaf733a6610df58d34c892ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4394c83cb7685e1bbaf733a6610df58d34c892ab", "html_url": "https://github.com/rust-lang/rust/commit/4394c83cb7685e1bbaf733a6610df58d34c892ab"}], "stats": {"total": 422, "additions": 321, "deletions": 101}, "files": [{"sha": "c60471c285dcb0f1b35c532853337a23ba44ed08", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -50,7 +50,8 @@ use ty::query;\n use ty::steal::Steal;\n use ty::BindingMode;\n use ty::CanonicalTy;\n-use util::nodemap::{DefIdSet, ItemLocalMap};\n+use ty::CanonicalPolyFnSig;\n+use util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n@@ -344,10 +345,6 @@ pub struct TypeckTables<'tcx> {\n     /// belongs, but it may not exist if it's a tuple field (`tuple.0`).\n     field_indices: ItemLocalMap<usize>,\n \n-    /// Stores the canonicalized types provided by the user. See also\n-    /// `AscribeUserType` statement in MIR.\n-    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n-\n     /// Stores the types for various nodes in the AST.  Note that this table\n     /// is not guaranteed to be populated until after typeck.  See\n     /// typeck::check::fn_ctxt for details.\n@@ -359,6 +356,14 @@ pub struct TypeckTables<'tcx> {\n     /// other items.\n     node_substs: ItemLocalMap<&'tcx Substs<'tcx>>,\n \n+    /// Stores the canonicalized types provided by the user. See also\n+    /// `AscribeUserType` statement in MIR.\n+    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n+\n+    /// Stores the canonicalized types provided by the user. See also\n+    /// `AscribeUserType` statement in MIR.\n+    pub user_provided_sigs: DefIdMap<CanonicalPolyFnSig<'tcx>>,\n+\n     /// Stores the substitutions that the user explicitly gave (if any)\n     /// attached to `id`. These will not include any inferred\n     /// values. The canonical form is used to capture things like `_`\n@@ -442,6 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             type_dependent_defs: ItemLocalMap(),\n             field_indices: ItemLocalMap(),\n             user_provided_tys: ItemLocalMap(),\n+            user_provided_sigs: Default::default(),\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n             user_substs: ItemLocalMap(),\n@@ -748,6 +754,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             ref type_dependent_defs,\n             ref field_indices,\n             ref user_provided_tys,\n+            ref user_provided_sigs,\n             ref node_types,\n             ref node_substs,\n             ref user_substs,\n@@ -771,6 +778,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             type_dependent_defs.hash_stable(hcx, hasher);\n             field_indices.hash_stable(hcx, hasher);\n             user_provided_tys.hash_stable(hcx, hasher);\n+            user_provided_sigs.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             user_substs.hash_stable(hcx, hasher);"}, {"sha": "bb9346f2f468dc2431ca71b206ccf747bea7a396", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -64,7 +64,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n use hir;\n \n pub use self::sty::{Binder, BoundTy, BoundTyIndex, DebruijnIndex, INNERMOST};\n-pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n+pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TyKind, PolyTraitRef};"}, {"sha": "cd9679c876355bda769abfe5a9c3c88d1e446cad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -11,7 +11,7 @@\n //! This module contains TyKind and its major components\n \n use hir::def_id::DefId;\n-\n+use infer::canonical::Canonical;\n use mir::interpret::ConstValue;\n use middle::region;\n use polonius_engine::Atom;\n@@ -980,6 +980,9 @@ impl<'tcx> PolyFnSig<'tcx> {\n     }\n }\n \n+pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n+\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ParamTy {\n     pub idx: u32,"}, {"sha": "50fd4afcd7ecaed09c916d27910b64c2de45c8cf", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -1208,6 +1208,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // to report the error. This gives better error messages\n             // in some cases.\n             self.report_error(mir, infcx, mir_def_id, longer_fr, shorter_fr, errors_buffer);\n+            return; // continuing to iterate just reports more errors than necessary\n         }\n     }\n "}, {"sha": "ab4ee3a4ad0e51b15e2e866f2ebb1facf478d147", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -18,6 +18,7 @@\n //! contain revealed `impl Trait` values).\n \n use borrow_check::nll::universal_regions::UniversalRegions;\n+use rustc::infer::LateBoundRegionConversionTime;\n use rustc::mir::*;\n use rustc::ty::Ty;\n \n@@ -36,9 +37,47 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let (&normalized_output_ty, normalized_input_tys) =\n             normalized_inputs_and_output.split_last().unwrap();\n \n+        // If the user explicitly annotated the input types, extract\n+        // those.\n+        //\n+        // e.g. `|x: FxHashMap<_, &'static u32>| ...`\n+        let user_provided_sig;\n+        if !self.tcx().is_closure(self.mir_def_id) {\n+            user_provided_sig = None;\n+        } else {\n+            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id);\n+            user_provided_sig = match typeck_tables.user_provided_sigs.get(&self.mir_def_id) {\n+                None => None,\n+                Some(user_provided_poly_sig) => {\n+                    // Instantiate the canonicalized variables from\n+                    // user-provided signature (e.g. the `_` in the code\n+                    // above) with fresh variables.\n+                    let (poly_sig, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n+                        mir.span,\n+                        &user_provided_poly_sig,\n+                    );\n+\n+                    // Replace the bound items in the fn sig with fresh\n+                    // variables, so that they represent the view from\n+                    // \"inside\" the closure.\n+                    Some(\n+                        self.infcx\n+                            .replace_late_bound_regions_with_fresh_var(\n+                                mir.span,\n+                                LateBoundRegionConversionTime::FnCall,\n+                                &poly_sig,\n+                            )\n+                            .0,\n+                    )\n+                }\n+            }\n+        };\n+\n         // Equate expected input tys with those in the MIR.\n-        let argument_locals = (1..).map(Local::new);\n-        for (&normalized_input_ty, local) in normalized_input_tys.iter().zip(argument_locals) {\n+        for (&normalized_input_ty, argument_index) in normalized_input_tys.iter().zip(0..) {\n+            // In MIR, argument N is stored in local N+1.\n+            let local = Local::new(argument_index + 1);\n+\n             debug!(\n                 \"equate_inputs_and_outputs: normalized_input_ty = {:?}\",\n                 normalized_input_ty\n@@ -53,6 +92,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             );\n         }\n \n+        if let Some(user_provided_sig) = user_provided_sig {\n+            for (&user_provided_input_ty, argument_index) in\n+                user_provided_sig.inputs().iter().zip(0..)\n+            {\n+                // In MIR, closures begin an implicit `self`, so\n+                // argument N is stored in local N+2.\n+                let local = Local::new(argument_index + 2);\n+                let mir_input_ty = mir.local_decls[local].ty;\n+                let mir_input_span = mir.local_decls[local].source_info.span;\n+\n+                // If the user explicitly annotated the input types, enforce those.\n+                let user_provided_input_ty =\n+                    self.normalize(user_provided_input_ty, Locations::All(mir_input_span));\n+                self.equate_normalized_input_or_output(\n+                    user_provided_input_ty,\n+                    mir_input_ty,\n+                    mir_input_span,\n+                );\n+            }\n+        }\n+\n         assert!(\n             mir.yield_ty.is_some() && universal_regions.yield_ty.is_some()\n                 || mir.yield_ty.is_none() && universal_regions.yield_ty.is_none()\n@@ -83,6 +143,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 terr\n             );\n         };\n+\n+        // If the user explicitly annotated the output types, enforce those.\n+        if let Some(user_provided_sig) = user_provided_sig {\n+            let user_provided_output_ty = user_provided_sig.output();\n+            let user_provided_output_ty =\n+                self.normalize(user_provided_output_ty, Locations::All(output_span));\n+            self.equate_normalized_input_or_output(\n+                user_provided_output_ty,\n+                mir_output_ty,\n+                output_span,\n+            );\n+        }\n     }\n \n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {"}, {"sha": "6db107344747e40733cd00314c6e8af269b5d119", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -1033,6 +1033,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     assert!(!impl_self_ty.has_infer_types());\n \n                     self.eq_types(self_ty, impl_self_ty, locations, category)?;\n+\n+                    self.prove_predicate(\n+                        ty::Predicate::WellFormed(impl_self_ty),\n+                        locations,\n+                        category,\n+                    );\n                 }\n \n                 // Prove the predicates coming along with `def_id`.\n@@ -1070,11 +1076,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// particularly necessary -- we'll do it lazilly as we process\n     /// the value anyway -- but in some specific cases it is useful to\n     /// normalize so we can suppress duplicate error messages.\n-    fn fold_to_region_vid<T>(\n-        &self,\n-        value: T\n-    ) -> T\n-    where T: TypeFoldable<'tcx>\n+    fn fold_to_region_vid<T>(&self, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n     {\n         if let Some(borrowck_context) = &self.borrowck_context {\n             self.tcx().fold_regions(&value, &mut false, |r, _debruijn| {\n@@ -1210,20 +1214,22 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // though.\n                 let category = match *place {\n                     Place::Local(RETURN_PLACE) => if let Some(BorrowCheckContext {\n-                        universal_regions: UniversalRegions {\n-                            defining_ty: DefiningTy::Const(def_id, _),\n-                            ..\n-                        },\n+                        universal_regions:\n+                            UniversalRegions {\n+                                defining_ty: DefiningTy::Const(def_id, _),\n+                                ..\n+                            },\n                         ..\n-                    }) = self.borrowck_context {\n+                    }) = self.borrowck_context\n+                    {\n                         if tcx.is_static(*def_id).is_some() {\n                             ConstraintCategory::UseAsStatic\n                         } else {\n                             ConstraintCategory::UseAsConst\n                         }\n                     } else {\n                         ConstraintCategory::Return\n-                    }\n+                    },\n                     Place::Local(l) if !mir.local_decls[l].is_user_variable.is_some() => {\n                         ConstraintCategory::Boring\n                     }\n@@ -1510,12 +1516,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let category = match *dest {\n                     Place::Local(RETURN_PLACE) => {\n                         if let Some(BorrowCheckContext {\n-                            universal_regions: UniversalRegions {\n-                                defining_ty: DefiningTy::Const(def_id, _),\n-                                ..\n-                            },\n+                            universal_regions:\n+                                UniversalRegions {\n+                                    defining_ty: DefiningTy::Const(def_id, _),\n+                                    ..\n+                                },\n                             ..\n-                        }) = self.borrowck_context {\n+                        }) = self.borrowck_context\n+                        {\n                             if tcx.is_static(*def_id).is_some() {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n@@ -1524,7 +1532,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         } else {\n                             ConstraintCategory::Return\n                         }\n-                    },\n+                    }\n                     Place::Local(l) if !mir.local_decls[l].is_user_variable.is_some() => {\n                         ConstraintCategory::Boring\n                     }\n@@ -1582,12 +1590,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             } else {\n                 ConstraintCategory::Boring\n             };\n-            if let Err(terr) = self.sub_types(\n-                op_arg_ty,\n-                fn_arg,\n-                term_location.to_locations(),\n-                category,\n-            ) {\n+            if let Err(terr) =\n+                self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)\n+            {\n                 span_mirbug!(\n                     self,\n                     term,"}, {"sha": "3f4d187813d5d087185bf8a51a5cfa733bc99297", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\"sig_of_closure_no_expectation()\");\n \n-        let bound_sig = self.supplied_sig_of_closure(decl);\n+        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n \n         self.closure_sigs(expr_def_id, body, bound_sig)\n     }\n@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our tables, which are then later used by the privacy\n         // check.\n-        match self.check_supplied_sig_against_expectation(decl, &closure_sigs) {\n+        match self.check_supplied_sig_against_expectation(expr_def_id, decl, &closure_sigs) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n             Err(_) => return self.sig_of_closure_no_expectation(expr_def_id, decl, body),\n         }\n@@ -521,14 +521,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// strategy.\n     fn check_supplied_sig_against_expectation(\n         &self,\n+        expr_def_id: DefId,\n         decl: &hir::FnDecl,\n         expected_sigs: &ClosureSignatures<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         // Get the signature S that the user gave.\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n-        let supplied_sig = self.supplied_sig_of_closure(decl);\n+        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n \n         debug!(\n             \"check_supplied_sig_against_expectation: supplied_sig={:?}\",\n@@ -598,7 +599,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// If there is no expected signature, then we will convert the\n     /// types that the user gave into a signature.\n-    fn supplied_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n+    ///\n+    /// Also, record this closure signature for later.\n+    fn supplied_sig_of_closure(\n+        &self,\n+        expr_def_id: DefId,\n+        decl: &hir::FnDecl,\n+    ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv = self;\n \n         // First, convert the types that the user supplied (if any).\n@@ -618,6 +625,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"supplied_sig_of_closure: result={:?}\", result);\n \n+        let c_result = self.inh.infcx.canonicalize_response(&result);\n+        self.tables.borrow_mut().user_provided_sigs.insert(\n+            expr_def_id,\n+            c_result,\n+        );\n+\n         result\n     }\n "}, {"sha": "d968bf222aa0983ef9e2674a0fde46f19d3f1ac4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -52,6 +52,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n         wbcx.visit_user_provided_tys();\n+        wbcx.visit_user_provided_sigs();\n \n         let used_trait_imports = mem::replace(\n             &mut self.tables.borrow_mut().used_trait_imports,\n@@ -388,6 +389,27 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn visit_user_provided_sigs(&mut self) {\n+        let fcx_tables = self.fcx.tables.borrow();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+\n+        for (&def_id, c_sig) in fcx_tables.user_provided_sigs.iter() {\n+            let c_sig = if let Some(c_sig) = self.tcx().lift_to_global(c_sig) {\n+                c_sig\n+            } else {\n+                span_bug!(\n+                    self.fcx.tcx.hir.span_if_local(def_id).unwrap(),\n+                    \"writeback: `{:?}` missing from the global type context\",\n+                    c_sig\n+                );\n+            };\n+\n+            self.tables\n+                .user_provided_sigs\n+                .insert(def_id, c_sig.clone());\n+        }\n+    }\n+\n     fn visit_opaque_types(&mut self, span: Span) {\n         for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n             let node_id = self.tcx().hir.as_local_node_id(def_id).unwrap();"}, {"sha": "8469f0aa6645dcee14936f618a182ee5f6eecee6", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -95,7 +95,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;"}, {"sha": "1a06d59f0b191a22ba5fb15de4f21670058280f3", "filename": "src/test/ui/issues/issue-28848.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fissues%2Fissue-28848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fissues%2Fissue-28848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n struct Foo<'a, 'b: 'a>(&'a &'b ());\n \n impl<'a, 'b> Foo<'a, 'b> {"}, {"sha": "738a1c0c6f616bff65c3944eb117f41c234ee3c7", "filename": "src/test/ui/issues/issue-28848.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -1,16 +1,16 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-28848.rs:22:5\n+  --> $DIR/issue-28848.rs:20:5\n    |\n LL |     Foo::<'a, 'b>::xmute(u) //~ ERROR lifetime bound not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the function body at 21:16\n-  --> $DIR/issue-28848.rs:21:16\n+note: lifetime parameter instantiated with the lifetime 'b as defined on the function body at 19:16\n+  --> $DIR/issue-28848.rs:19:16\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the function body at 21:12\n-  --> $DIR/issue-28848.rs:21:12\n+note: but lifetime parameter must outlive the lifetime 'a as defined on the function body at 19:12\n+  --> $DIR/issue-28848.rs:19:12\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            ^^"}, {"sha": "4bef6cf8cd16073d783e9bc6f3c6c80dea752eac", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -47,7 +47,6 @@ fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n-        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "f22dbdba934e8f72bb447b3e4b43646099ccd52e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -7,7 +7,6 @@ LL | |         //~^ ERROR borrowed data escapes outside of function\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -44,21 +43,9 @@ LL | |         //~^ ERROR borrowed data escapes outside of function\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:49:9\n-   |\n-LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |           --  -- lifetime `'b` defined here\n-   |           |\n-   |           lifetime `'a` defined here\n-...\n-LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0521`."}, {"sha": "05e9818b91e56dbc0d61f08117bce31d2b6fabbf", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -47,9 +47,9 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n         //~^ ERROR borrowed data escapes outside of function\n+\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n-        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "2b1cb5a30ceda54f6727193fdef5536b1f7ffbdf", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -4,9 +4,9 @@ note: External requirements\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -25,7 +25,7 @@ note: No external requirements\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         // Only works if 'x: 'y:\n+LL | |\n ...  |\n LL | |     });\n LL | | }\n@@ -40,23 +40,12 @@ LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:51:9\n-   |\n-LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |           --  -- lifetime `'b` defined here\n-   |           |\n-   |           lifetime `'a` defined here\n-...\n-LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0521`."}, {"sha": "77c7315fa665c2d047bf0709c5695b8de2bff4fb", "filename": "src/test/ui/nll/user-annotations/closure-substs.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+// Test that we enforce user-provided type annotations on closures.\n+\n+fn foo<'a>() {\n+    // Here `x` is free in the closure sig:\n+    |x: &'a i32| -> &'static i32 {\n+        return x; //~ ERROR unsatisfied lifetime constraints\n+    };\n+}\n+\n+fn foo1() {\n+    // Here `x` is bound in the closure sig:\n+    |x: &i32| -> &'static i32 {\n+        return x; //~ ERROR unsatisfied lifetime constraints\n+    };\n+}\n+\n+fn bar<'a>() {\n+    // Here `x` is free in the closure sig:\n+    |x: &'a i32, b: fn(&'static i32)| {\n+        b(x); //~ ERROR unsatisfied lifetime constraints\n+    };\n+}\n+\n+fn bar1() {\n+    // Here `x` is bound in the closure sig:\n+    |x: &i32, b: fn(&'static i32)| {\n+        b(x); //~ ERROR borrowed data escapes outside of closure\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "c69d514d9e63626dbe3aae48915762a843de9a56", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,37 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/closure-substs.rs:18:16\n+   |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         return x; //~ ERROR unsatisfied lifetime constraints\n+   |                ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/closure-substs.rs:25:16\n+   |\n+LL |     |x: &i32| -> &'static i32 {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |         return x; //~ ERROR unsatisfied lifetime constraints\n+   |                ^ returning this value requires that `'1` must outlive `'static`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/closure-substs.rs:32:9\n+   |\n+LL | fn bar<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         b(x); //~ ERROR unsatisfied lifetime constraints\n+   |         ^^^^ argument requires that `'a` must outlive `'static`\n+\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/closure-substs.rs:39:9\n+   |\n+LL |     |x: &i32, b: fn(&'static i32)| {\n+   |      - `x` is a reference that is only valid in the closure body\n+LL |         b(x); //~ ERROR borrowed data escapes outside of closure\n+   |         ^^^^ `x` escapes the closure body here\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "8cdd390540a091643a8f2b8109ea47a597038771", "filename": "src/test/ui/nll/user-annotations/issue-54124.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,9 @@\n+#![feature(nll)]\n+\n+fn test<'a>() {\n+    let _:fn(&()) = |_:&'a ()| {};\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "df5e4b0447ce7a2f95169709deeeedf2c486c4a6", "filename": "src/test/ui/nll/user-annotations/issue-54124.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,20 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-54124.rs:4:22\n+   |\n+LL | fn test<'a>() {\n+   |         -- lifetime `'a` defined here\n+LL |     let _:fn(&()) = |_:&'a ()| {};\n+   |                      ^ - let's call the lifetime of this reference `'1`\n+   |                      |\n+   |                      requires that `'1` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-54124.rs:4:22\n+   |\n+LL | fn test<'a>() {\n+   |         -- lifetime `'a` defined here\n+LL |     let _:fn(&()) = |_:&'a ()| {};\n+   |                      ^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c3cb3068bcecf3533b483a30adee2356d5c7ef5d", "filename": "src/test/ui/nll/user-annotations/wf-self-type.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct Foo<'a, 'b: 'a>(&'a &'b ());\n+\n+impl<'a, 'b> Foo<'a, 'b> {\n+    fn xmute(a: &'b ()) -> &'a () {\n+        unreachable!()\n+    }\n+}\n+\n+pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n+    Foo::xmute(u) //~ ERROR unsatisfied lifetime constraints\n+}\n+\n+fn main() {}"}, {"sha": "78d86fbf17ec09706fada4d301eac0fe836f1031", "filename": "src/test/ui/nll/user-annotations/wf-self-type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -0,0 +1,12 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-self-type.rs:22:5\n+   |\n+LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n+   |            --  -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+LL |     Foo::xmute(u) //~ ERROR unsatisfied lifetime constraints\n+   |     ^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf291279210c9e6c829ee149170df50f65a22f35", "filename": "src/test/ui/regions/regions-static-bound.ll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -20,7 +20,7 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:27:5\n+  --> $DIR/regions-static-bound.rs:26:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`"}, {"sha": "462fbe8ee19bd19585653f6400157c16c330b8c3", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -15,35 +15,14 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:27:5\n+  --> $DIR/regions-static-bound.rs:26:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-static-bound.rs:24:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             -       - let's call the lifetime of this reference `'2`\n-   |             |\n-   |             let's call the lifetime of this reference `'1`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-static-bound.rs:27:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             -       - let's call the lifetime of this reference `'1`\n-   |             |\n-   |             let's call the lifetime of this reference `'2`\n-...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0621`."}, {"sha": "c5dc6000e839c270172a53a56472e9a3cb3165a6", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99911a4a0bead7dd1f9ef2f90442844434cc391/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=f99911a4a0bead7dd1f9ef2f90442844434cc391", "patch": "@@ -23,10 +23,8 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n fn error(u: &(), v: &()) {\n     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `u` [E0621]\n-    //[nll]~| ERROR unsatisfied lifetime constraints\n     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `v` [E0621]\n-    //[nll]~| ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}]}