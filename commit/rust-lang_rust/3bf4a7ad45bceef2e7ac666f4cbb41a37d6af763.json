{"sha": "3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjRhN2FkNDViY2VlZjJlN2FjNjY2ZjRjYmI0MWEzN2Q2YWY3NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-26T11:38:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-26T11:38:18Z"}, "message": "Auto merge of #36734 - nnethercote:fix-HashSet-sizing, r=Aatch\n\nDon't allocate during default HashSet creation.\n\nThe following `HashMap` creation functions don't allocate heap storage for elements.\n```\nHashMap::new()\nHashMap::default()\nHashMap::with_hasher()\n```\nThis is good, because it's surprisingly common to create a HashMap and never\nuse it. So that case should be cheap.\n\nHowever, `HashSet` does not have the same behaviour. The corresponding creation\nfunctions *do* allocate heap storage for the default number of non-zero\nelements (which is 32 slots for 29 elements).\n```\nHashMap::new()\nHashMap::default()\nHashMap::with_hasher()\n```\nThis commit gives `HashSet` the same behaviour as `HashMap`, by simply calling\nthe corresponding `HashMap` functions (something `HashSet` already does for\n`with_capacity` and `with_capacity_and_hasher`). It also reformats one existing\n`HashSet` construction to use a consistent single-line format.\n\nThis speeds up rustc itself by 1.01--1.04x on most of the non-tiny\nrustc-benchmarks.", "tree": {"sha": "e14c410297bb5a0deb14471046b46853354262f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14c410297bb5a0deb14471046b46853354262f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "html_url": "https://github.com/rust-lang/rust/commit/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b786976a158e79196254f489bb3a6f87e4d16a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b786976a158e79196254f489bb3a6f87e4d16a5a", "html_url": "https://github.com/rust-lang/rust/commit/b786976a158e79196254f489bb3a6f87e4d16a5a"}, {"sha": "4eb069c9811bc25d6ef9413de6058e5f14707816", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb069c9811bc25d6ef9413de6058e5f14707816", "html_url": "https://github.com/rust-lang/rust/commit/4eb069c9811bc25d6ef9413de6058e5f14707816"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "29a79631535b2690b8138aa6bccc4f0cea686211", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "patch": "@@ -2087,9 +2087,24 @@ fn assert_covariance() {\n mod test_map {\n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n+    use super::RandomState;\n     use cell::RefCell;\n     use rand::{thread_rng, Rng};\n \n+    #[test]\n+    fn test_create_capacities() {\n+        type HM = HashMap<i32, i32>;\n+\n+        let m = HM::new();\n+        assert_eq!(m.capacity(), 0);\n+\n+        let m = HM::default();\n+        assert_eq!(m.capacity(), 0);\n+\n+        let m = HM::with_hasher(RandomState::new());\n+        assert_eq!(m.capacity(), 0);\n+    }\n+\n     #[test]\n     fn test_create_capacity_zero() {\n         let mut m = HashMap::with_capacity(0);"}, {"sha": "a508954398052e77fe90f9ab8afc671c5b428c60", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "patch": "@@ -17,8 +17,6 @@ use ops::{BitOr, BitAnd, BitXor, Sub};\n use super::Recover;\n use super::map::{self, HashMap, Keys, RandomState};\n \n-const INITIAL_CAPACITY: usize = 32;\n-\n // Future Optimization (FIXME!)\n // =============================\n //\n@@ -118,7 +116,7 @@ impl<T: Hash + Eq> HashSet<T, RandomState> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> HashSet<T, RandomState> {\n-        HashSet::with_capacity(INITIAL_CAPACITY)\n+        HashSet { map: HashMap::new() }\n     }\n \n     /// Creates an empty HashSet with space for at least `n` elements in\n@@ -163,7 +161,7 @@ impl<T, S> HashSet<T, S>\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_hasher(hasher: S) -> HashSet<T, S> {\n-        HashSet::with_capacity_and_hasher(INITIAL_CAPACITY, hasher)\n+        HashSet { map: HashMap::with_hasher(hasher) }\n     }\n \n     /// Creates an empty HashSet with space for at least `capacity`\n@@ -188,9 +186,7 @@ impl<T, S> HashSet<T, S>\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_capacity_and_hasher(capacity: usize, hasher: S)\n                                     -> HashSet<T, S> {\n-        HashSet {\n-            map: HashMap::with_capacity_and_hasher(capacity, hasher),\n-        }\n+        HashSet { map: HashMap::with_capacity_and_hasher(capacity, hasher) }\n     }\n \n     /// Returns a reference to the set's hasher.\n@@ -667,7 +663,7 @@ impl<T, S> Default for HashSet<T, S>\n {\n     /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     fn default() -> HashSet<T, S> {\n-        HashSet::with_hasher(Default::default())\n+        HashSet { map: HashMap::default() }\n     }\n }\n \n@@ -1069,6 +1065,21 @@ fn assert_covariance() {\n #[cfg(test)]\n mod test_set {\n     use super::HashSet;\n+    use super::super::map::RandomState;\n+\n+    #[test]\n+    fn test_create_capacities() {\n+        type HS = HashSet<i32>;\n+\n+        let s = HS::new();\n+        assert_eq!(s.capacity(), 0);\n+\n+        let s = HS::default();\n+        assert_eq!(s.capacity(), 0);\n+\n+        let s = HS::with_hasher(RandomState::new());\n+        assert_eq!(s.capacity(), 0);\n+    }\n \n     #[test]\n     fn test_disjoint() {"}]}