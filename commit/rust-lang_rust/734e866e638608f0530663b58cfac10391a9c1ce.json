{"sha": "734e866e638608f0530663b58cfac10391a9c1ce", "node_id": "C_kwDOAAsO6NoAKDczNGU4NjZlNjM4NjA4ZjA1MzA2NjNiNThjZmFjMTAzOTFhOWMxY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-29T23:14:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-29T23:14:55Z"}, "message": "Rollup merge of #110586 - ChrisDenton:msvc-oem-output, r=workingjubilee\n\nFix Unreadable non-UTF-8 output on localized MSVC\n\nFixes #35785 by converting non UTF-8 linker output to Unicode using the OEM code page.\n\nBefore:\n\n```text\n  = note: Non-UTF-8 output: LINK : fatal error LNK1181: cannot open input file \\'m\\x84rchenhaft.obj\\'\\r\\n\n```\n\nAfter:\n\n```text\n   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n```\n\nThe difference is more dramatic if using a non-ascii language pack for Windows.", "tree": {"sha": "752c47608e9badf68e3fbf5560ba531ec1408223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752c47608e9badf68e3fbf5560ba531ec1408223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734e866e638608f0530663b58cfac10391a9c1ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTaTvCRBK7hj4Ov3rIwAAkCwIABFXvkp1mp5kPLazdGKMVS3m\na9X70bLlO+I4yx+ozLph5Cfus6dI4PwkO+PdMrtNkKICQxE4ZHuWE6w2ojz1ow/T\nqyZE21c2bGqUK4I3SPPcK58LAqbS4Bh2IaQlmoyF/A+2482lk37EUEkYJeVvY503\nFRDa5EVmug5SOUrjpSdr/4RT6qUddV/FirtYvh5lSyTJGo6RW31EpkZn2qUnjvcg\nfO7G1HjvxuaXzbvBiL1H3I2w9bW46JfHXct3T4HX0yLJxBkzd3FVHNH2uEYAKCa/\n1lJib/NtMH+i+vuSme1yV/jq8gWYcdJd03IT2nRvBZjMZVvy7Ubg/yHuf2u6pF4=\n=E939\n-----END PGP SIGNATURE-----\n", "payload": "tree 752c47608e9badf68e3fbf5560ba531ec1408223\nparent 87b1f891ea76713462cfc5a15137a8fe2b24ecc2\nparent 9b9d39e43f3d8723b36f7e4b9ecafa36203fde45\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682810095 +0200\ncommitter GitHub <noreply@github.com> 1682810095 +0200\n\nRollup merge of #110586 - ChrisDenton:msvc-oem-output, r=workingjubilee\n\nFix Unreadable non-UTF-8 output on localized MSVC\n\nFixes #35785 by converting non UTF-8 linker output to Unicode using the OEM code page.\n\nBefore:\n\n```text\n  = note: Non-UTF-8 output: LINK : fatal error LNK1181: cannot open input file \\'m\\x84rchenhaft.obj\\'\\r\\n\n```\n\nAfter:\n\n```text\n   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n```\n\nThe difference is more dramatic if using a non-ascii language pack for Windows.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734e866e638608f0530663b58cfac10391a9c1ce", "html_url": "https://github.com/rust-lang/rust/commit/734e866e638608f0530663b58cfac10391a9c1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734e866e638608f0530663b58cfac10391a9c1ce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b1f891ea76713462cfc5a15137a8fe2b24ecc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b1f891ea76713462cfc5a15137a8fe2b24ecc2", "html_url": "https://github.com/rust-lang/rust/commit/87b1f891ea76713462cfc5a15137a8fe2b24ecc2"}, {"sha": "9b9d39e43f3d8723b36f7e4b9ecafa36203fde45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9d39e43f3d8723b36f7e4b9ecafa36203fde45", "html_url": "https://github.com/rust-lang/rust/commit/9b9d39e43f3d8723b36f7e4b9ecafa36203fde45"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "cc539fb0a4366aad4014895a2e0fe4de518ff900", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/734e866e638608f0530663b58cfac10391a9c1ce/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/734e866e638608f0530663b58cfac10391a9c1ce/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=734e866e638608f0530663b58cfac10391a9c1ce", "patch": "@@ -3250,6 +3250,7 @@ dependencies = [\n  \"tempfile\",\n  \"thorin-dwp\",\n  \"tracing\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]"}, {"sha": "4f73b731f5a2a96d0248105ffeaafbfbd8c95021", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/734e866e638608f0530663b58cfac10391a9c1ce/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/734e866e638608f0530663b58cfac10391a9c1ce/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=734e866e638608f0530663b58cfac10391a9c1ce", "patch": "@@ -49,3 +49,7 @@ libc = \"0.2.50\"\n version = \"0.30.1\"\n default-features = false\n features = [\"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\", \"archive\", \"write\"]\n+\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\"Win32_Globalization\"]"}, {"sha": "c63e156beae7b7f57a3c2f20e37494f794285f1c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/734e866e638608f0530663b58cfac10391a9c1ce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734e866e638608f0530663b58cfac10391a9c1ce/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=734e866e638608f0530663b58cfac10391a9c1ce", "patch": "@@ -860,7 +860,7 @@ fn link_natively<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                let escaped_output = escape_string(&output);\n+                let escaped_output = escape_linker_output(&output, flavor);\n                 // FIXME: Add UI tests for this error.\n                 let err = errors::LinkingFailed {\n                     linker_path: &linker_path,\n@@ -1052,6 +1052,83 @@ fn escape_string(s: &[u8]) -> String {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn escape_linker_output(s: &[u8], _flavour: LinkerFlavor) -> String {\n+    escape_string(s)\n+}\n+\n+/// If the output of the msvc linker is not UTF-8 and the host is Windows,\n+/// then try to convert the string from the OEM encoding.\n+#[cfg(windows)]\n+fn escape_linker_output(s: &[u8], flavour: LinkerFlavor) -> String {\n+    // This only applies to the actual MSVC linker.\n+    if flavour != LinkerFlavor::Msvc(Lld::No) {\n+        return escape_string(s);\n+    }\n+    match str::from_utf8(s) {\n+        Ok(s) => return s.to_owned(),\n+        Err(_) => match win::locale_byte_str_to_string(s, win::oem_code_page()) {\n+            Some(s) => s,\n+            // The string is not UTF-8 and isn't valid for the OEM code page\n+            None => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n+        },\n+    }\n+}\n+\n+/// Wrappers around the Windows API.\n+#[cfg(windows)]\n+mod win {\n+    use windows::Win32::Globalization::{\n+        GetLocaleInfoEx, MultiByteToWideChar, CP_OEMCP, LOCALE_IUSEUTF8LEGACYOEMCP,\n+        LOCALE_NAME_SYSTEM_DEFAULT, LOCALE_RETURN_NUMBER, MB_ERR_INVALID_CHARS,\n+    };\n+\n+    /// Get the Windows system OEM code page. This is most notably the code page\n+    /// used for link.exe's output.\n+    pub fn oem_code_page() -> u32 {\n+        unsafe {\n+            let mut cp: u32 = 0;\n+            // We're using the `LOCALE_RETURN_NUMBER` flag to return a u32.\n+            // But the API requires us to pass the data as though it's a [u16] string.\n+            let len = std::mem::size_of::<u32>() / std::mem::size_of::<u16>();\n+            let data = std::slice::from_raw_parts_mut(&mut cp as *mut u32 as *mut u16, len);\n+            let len_written = GetLocaleInfoEx(\n+                LOCALE_NAME_SYSTEM_DEFAULT,\n+                LOCALE_IUSEUTF8LEGACYOEMCP | LOCALE_RETURN_NUMBER,\n+                Some(data),\n+            );\n+            if len_written as usize == len { cp } else { CP_OEMCP }\n+        }\n+    }\n+    /// Try to convert a multi-byte string to a UTF-8 string using the given code page\n+    /// The string does not need to be null terminated.\n+    ///\n+    /// This is implemented as a wrapper around `MultiByteToWideChar`.\n+    /// See <https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar>\n+    ///\n+    /// It will fail if the multi-byte string is longer than `i32::MAX` or if it contains\n+    /// any invalid bytes for the expected encoding.\n+    pub fn locale_byte_str_to_string(s: &[u8], code_page: u32) -> Option<String> {\n+        // `MultiByteToWideChar` requires a length to be a \"positive integer\".\n+        if s.len() > isize::MAX as usize {\n+            return None;\n+        }\n+        // Error if the string is not valid for the expected code page.\n+        let flags = MB_ERR_INVALID_CHARS;\n+        // Call MultiByteToWideChar twice.\n+        // First to calculate the length then to convert the string.\n+        let mut len = unsafe { MultiByteToWideChar(code_page, flags, s, None) };\n+        if len > 0 {\n+            let mut utf16 = vec![0; len as usize];\n+            len = unsafe { MultiByteToWideChar(code_page, flags, s, Some(&mut utf16)) };\n+            if len > 0 {\n+                return utf16.get(..len as usize).map(String::from_utf16_lossy);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     // On macOS the runtimes are distributed as dylibs which should be linked to\n     // both executables and dynamic shared objects. Everywhere else the runtimes"}, {"sha": "3fb2842d694cce774286c87070ce2fdf189be0d9", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/734e866e638608f0530663b58cfac10391a9c1ce/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734e866e638608f0530663b58cfac10391a9c1ce/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs?ref=734e866e638608f0530663b58cfac10391a9c1ce", "patch": "@@ -0,0 +1,6 @@\n+// build-fail\n+// compile-flags:-C link-arg=m\u00e4rchenhaft\n+// only-msvc\n+// error-pattern:= note: LINK : fatal error LNK1181:\n+// normalize-stderr-test \"(\\s*\\|\\n)\\s*= note: .*\\n\" -> \"$1\"\n+pub fn main() {}"}, {"sha": "f843aad782c30f3bf3c9c6ef26cf08ce8c31e7ed", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/734e866e638608f0530663b58cfac10391a9c1ce/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/734e866e638608f0530663b58cfac10391a9c1ce/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr?ref=734e866e638608f0530663b58cfac10391a9c1ce", "patch": "@@ -0,0 +1,7 @@\n+error: linking with `link.exe` failed: exit code: 1181\n+   |\n+   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n+           \n+\n+error: aborting due to previous error\n+"}]}