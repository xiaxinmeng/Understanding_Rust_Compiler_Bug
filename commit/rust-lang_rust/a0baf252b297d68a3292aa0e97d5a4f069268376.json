{"sha": "a0baf252b297d68a3292aa0e97d5a4f069268376", "node_id": "C_kwDOAAsO6NoAKGEwYmFmMjUyYjI5N2Q2OGEzMjkyYWEwZTk3ZDVhNGYwNjkyNjgzNzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-01T11:00:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-01T11:00:44Z"}, "message": "Rollup merge of #94465 - c410-f3r:more-let-chains, r=Dylan-DPC\n\n6 - Make more use of `let_chains`\n\nContinuation of #94376.\n\ncc #53667", "tree": {"sha": "40cc9e879ba2f4dd450bd5886ac250edcd83112c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40cc9e879ba2f4dd450bd5886ac250edcd83112c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0baf252b297d68a3292aa0e97d5a4f069268376", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHfzcCRBK7hj4Ov3rIwAAaUYIAGGtXOqkHmsgh09lgtiNntfc\nhqh7vxmguma59C9cSMCVXi0ICKnM5PzBq0iC+sYCaYT0R5CMUPu8rpSYtYL7xKah\nMaWrWdnN5Lq1IccCLfvZykGAKSD9wHxF3OSHLmBVHL91cNNVYv/+Z82EEwXXz3zU\nc4/uQLphg7rPyVq4PPA5Qpy4p0m++iK4RpYy5/65psRf4ugfwitBmmdTw+AC6Ue+\nD65gzCA+LeZAGBNFVN/w2zl3RUcy5yuUMW8BVfHDjmVTh+DVBnEesVbyNaG9yTSk\n5TElwCfj4d0damI9JdK77YB8uxeY3qT7Hi6E1Xnxo/CQYJ1zcWFlftnN2AAt2OY=\n=V92m\n-----END PGP SIGNATURE-----\n", "payload": "tree 40cc9e879ba2f4dd450bd5886ac250edcd83112c\nparent c531b01e9d6c881344b4ec03a3102272107f4bba\nparent fe94f78b9b02d3bef71b142991acf941b3967c9c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646132444 +0100\ncommitter GitHub <noreply@github.com> 1646132444 +0100\n\nRollup merge of #94465 - c410-f3r:more-let-chains, r=Dylan-DPC\n\n6 - Make more use of `let_chains`\n\nContinuation of #94376.\n\ncc #53667\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0baf252b297d68a3292aa0e97d5a4f069268376", "html_url": "https://github.com/rust-lang/rust/commit/a0baf252b297d68a3292aa0e97d5a4f069268376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0baf252b297d68a3292aa0e97d5a4f069268376/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c531b01e9d6c881344b4ec03a3102272107f4bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c531b01e9d6c881344b4ec03a3102272107f4bba", "html_url": "https://github.com/rust-lang/rust/commit/c531b01e9d6c881344b4ec03a3102272107f4bba"}, {"sha": "fe94f78b9b02d3bef71b142991acf941b3967c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe94f78b9b02d3bef71b142991acf941b3967c9c", "html_url": "https://github.com/rust-lang/rust/commit/fe94f78b9b02d3bef71b142991acf941b3967c9c"}], "stats": {"total": 215, "additions": 97, "deletions": 118}, "files": [{"sha": "46c616ff362414a2668c48c22cf3eaf3522f53fa", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -116,22 +116,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n                 let adjusted_span = (|| {\n-                    if let ExprKind::Block { body } = &expr.kind {\n-                        if let Some(tail_expr) = body.expr {\n-                            let mut expr = &this.thir[tail_expr];\n-                            while let ExprKind::Block {\n-                                body: Block { expr: Some(nested_expr), .. },\n-                            }\n-                            | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n-                            {\n-                                expr = &this.thir[nested_expr];\n-                            }\n-                            this.block_context.push(BlockFrame::TailExpr {\n-                                tail_result_is_ignored: true,\n-                                span: expr.span,\n-                            });\n-                            return Some(expr.span);\n+                    if let ExprKind::Block { body } = &expr.kind && let Some(tail_ex) = body.expr {\n+                        let mut expr = &this.thir[tail_ex];\n+                        while let ExprKind::Block {\n+                            body: Block { expr: Some(nested_expr), .. },\n                         }\n+                        | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n+                        {\n+                            expr = &this.thir[nested_expr];\n+                        }\n+                        this.block_context.push(BlockFrame::TailExpr {\n+                            tail_result_is_ignored: true,\n+                            span: expr.span,\n+                        });\n+                        return Some(expr.span);\n                     }\n                     None\n                 })();"}, {"sha": "44fe93ba3630c96de23c66c015f442c222c367cc", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -1597,13 +1597,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         // Insert a Shallow borrow of any places that is switched on.\n-        if let Some(fb) = fake_borrows {\n-            if let Ok(match_place_resolved) =\n-                match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-            {\n-                let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n-                fb.insert(resolved_place);\n-            }\n+        if let Some(fb) = fake_borrows && let Ok(match_place_resolved) =\n+            match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+        {\n+            let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n+            fb.insert(resolved_place);\n         }\n \n         // perform the test, branching to one of N blocks. For each of"}, {"sha": "393e67f21bfe2ee6290aaca41ba7b51c7917fcad", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -877,14 +877,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n             // If this is a simple binding pattern, give debuginfo a nice name.\n-            if let Some(arg) = arg_opt {\n-                if let Some(ident) = arg.pat.simple_ident() {\n-                    self.var_debug_info.push(VarDebugInfo {\n-                        name: ident.name,\n-                        source_info,\n-                        value: VarDebugInfoContents::Place(arg_local.into()),\n-                    });\n-                }\n+            if let Some(arg) = arg_opt && let Some(ident) = arg.pat.simple_ident() {\n+                self.var_debug_info.push(VarDebugInfo {\n+                    name: ident.name,\n+                    source_info,\n+                    value: VarDebugInfoContents::Place(arg_local.into()),\n+                });\n             }\n         }\n "}, {"sha": "b40d3e453e931153eb8e8434061bda83ab5f3446", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -416,23 +416,21 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Field { lhs, .. } => {\n                 let lhs = &self.thir[lhs];\n-                if let ty::Adt(adt_def, _) = lhs.ty.kind() {\n-                    if adt_def.is_union() {\n-                        if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                            // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n-                            if !(assigned_ty\n-                                .ty_adt_def()\n-                                .map_or(false, |adt| adt.is_manually_drop())\n-                                || assigned_ty\n-                                    .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n-                            {\n-                                self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n-                            } else {\n-                                // write to non-drop union field, safe\n-                            }\n+                if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n+                    if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n+                        // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n+                        if !(assigned_ty\n+                            .ty_adt_def()\n+                            .map_or(false, |adt| adt.is_manually_drop())\n+                            || assigned_ty\n+                                .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n+                        {\n+                            self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n                         } else {\n-                            self.requires_unsafe(expr.span, AccessToUnionField);\n+                            // write to non-drop union field, safe\n                         }\n+                    } else {\n+                        self.requires_unsafe(expr.span, AccessToUnionField);\n                     }\n                 }\n             }\n@@ -476,10 +474,8 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Let { expr: expr_id, .. } => {\n                 let let_expr = &self.thir[expr_id];\n-                if let ty::Adt(adt_def, _) = let_expr.ty.kind() {\n-                    if adt_def.is_union() {\n-                        self.requires_unsafe(expr.span, AccessToUnionField);\n-                    }\n+                if let ty::Adt(adt_def, _) = let_expr.ty.kind() && adt_def.is_union() {\n+                    self.requires_unsafe(expr.span, AccessToUnionField);\n                 }\n             }\n             _ => {}"}, {"sha": "6687e1160ede86d639859984f948aacc00d0df8f", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -1,15 +1,16 @@\n //! Construction of MIR from HIR.\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n+#![allow(rustc::potential_query_instability)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n-#![feature(bool_to_option)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n-#![feature(once_cell)]\n #![feature(min_specialization)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c6026a6ab4b965883b55e75eb169b937e83c9dbc", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -315,47 +315,43 @@ fn check_for_bindings_named_same_as_variants(\n     rf: RefutableFlag,\n ) {\n     pat.walk_always(|p| {\n-        if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n-            if let Some(ty::BindByValue(hir::Mutability::Not)) =\n+        if let hir::PatKind::Binding(_, _, ident, None) = p.kind\n+            && let Some(ty::BindByValue(hir::Mutability::Not)) =\n                 cx.typeck_results.extract_binding_mode(cx.tcx.sess, p.hir_id, p.span)\n-            {\n-                let pat_ty = cx.typeck_results.pat_ty(p).peel_refs();\n-                if let ty::Adt(edef, _) = pat_ty.kind() {\n-                    if edef.is_enum()\n-                        && edef.variants.iter().any(|variant| {\n-                            variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n-                        })\n-                    {\n-                        let variant_count = edef.variants.len();\n-                        cx.tcx.struct_span_lint_hir(\n-                            BINDINGS_WITH_VARIANT_NAME,\n-                            p.hir_id,\n+            && let pat_ty = cx.typeck_results.pat_ty(p).peel_refs()\n+            && let ty::Adt(edef, _) = pat_ty.kind()\n+            && edef.is_enum()\n+            && edef.variants.iter().any(|variant| {\n+                variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n+            })\n+        {\n+            let variant_count = edef.variants.len();\n+            cx.tcx.struct_span_lint_hir(\n+                BINDINGS_WITH_VARIANT_NAME,\n+                p.hir_id,\n+                p.span,\n+                |lint| {\n+                    let ty_path = cx.tcx.def_path_str(edef.did);\n+                    let mut err = lint.build(&format!(\n+                        \"pattern binding `{}` is named the same as one \\\n+                                        of the variants of the type `{}`\",\n+                        ident, ty_path\n+                    ));\n+                    err.code(error_code!(E0170));\n+                    // If this is an irrefutable pattern, and there's > 1 variant,\n+                    // then we can't actually match on this. Applying the below\n+                    // suggestion would produce code that breaks on `check_irrefutable`.\n+                    if rf == Refutable || variant_count == 1 {\n+                        err.span_suggestion(\n                             p.span,\n-                            |lint| {\n-                                let ty_path = cx.tcx.def_path_str(edef.did);\n-                                let mut err = lint.build(&format!(\n-                                    \"pattern binding `{}` is named the same as one \\\n-                                                    of the variants of the type `{}`\",\n-                                    ident, ty_path\n-                                ));\n-                                err.code(error_code!(E0170));\n-                                // If this is an irrefutable pattern, and there's > 1 variant,\n-                                // then we can't actually match on this. Applying the below\n-                                // suggestion would produce code that breaks on `check_irrefutable`.\n-                                if rf == Refutable || variant_count == 1 {\n-                                    err.span_suggestion(\n-                                        p.span,\n-                                        \"to match on the variant, qualify the path\",\n-                                        format!(\"{}::{}\", ty_path, ident),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n-                                err.emit();\n-                            },\n-                        )\n+                            \"to match on the variant, qualify the path\",\n+                            format!(\"{}::{}\", ty_path, ident),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                }\n-            }\n+                    err.emit();\n+                },\n+            )\n         }\n     });\n }\n@@ -622,10 +618,8 @@ fn maybe_point_at_variant<'a, 'p: 'a, 'tcx: 'a>(\n     let mut covered = vec![];\n     for pattern in patterns {\n         if let Variant(variant_index) = pattern.ctor() {\n-            if let ty::Adt(this_def, _) = pattern.ty().kind() {\n-                if this_def.did != def.did {\n-                    continue;\n-                }\n+            if let ty::Adt(this_def, _) = pattern.ty().kind() && this_def.did != def.did {\n+                continue;\n             }\n             let sp = def.variants[*variant_index].ident(cx.tcx).span;\n             if covered.contains(&sp) {"}, {"sha": "002c0b5f7d8ed3c4b2502dbb1d3ca5d029d0334d", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -680,27 +680,23 @@ impl<'tcx> Constructor<'tcx> {\n     ///\n     /// This means that the variant has a stdlib unstable feature marking it.\n     pub(super) fn is_unstable_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n-        if let Constructor::Variant(idx) = self {\n-            if let ty::Adt(adt, _) = pcx.ty.kind() {\n-                let variant_def_id = adt.variants[*idx].def_id;\n-                // Filter variants that depend on a disabled unstable feature.\n-                return matches!(\n-                    pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),\n-                    EvalResult::Deny { .. }\n-                );\n-            }\n+        if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n+            let variant_def_id = adt.variants[*idx].def_id;\n+            // Filter variants that depend on a disabled unstable feature.\n+            return matches!(\n+                pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),\n+                EvalResult::Deny { .. }\n+            );\n         }\n         false\n     }\n \n     /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`\n     /// attribute.\n     pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n-        if let Constructor::Variant(idx) = self {\n-            if let ty::Adt(adt, _) = pcx.ty.kind() {\n-                let variant_def_id = adt.variants[*idx].def_id;\n-                return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n-            }\n+        if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n+            let variant_def_id = adt.variants[*idx].def_id;\n+            return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n         }\n         false\n     }"}, {"sha": "6282b07e6f086e8fbd6a4f4805c7a05a7d956da7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0baf252b297d68a3292aa0e97d5a4f069268376/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=a0baf252b297d68a3292aa0e97d5a4f069268376", "patch": "@@ -790,16 +790,14 @@ crate fn compare_const_vals<'tcx>(\n         };\n     }\n \n-    if let ty::Str = ty.kind() {\n-        if let (\n-            ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n-            ty::ConstKind::Value(b_val @ ConstValue::Slice { .. }),\n-        ) = (a.val(), b.val())\n-        {\n-            let a_bytes = get_slice_bytes(&tcx, a_val);\n-            let b_bytes = get_slice_bytes(&tcx, b_val);\n-            return from_bool(a_bytes == b_bytes);\n-        }\n+    if let ty::Str = ty.kind() && let (\n+        ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n+        ty::ConstKind::Value(b_val @ ConstValue::Slice { .. }),\n+    ) = (a.val(), b.val())\n+    {\n+        let a_bytes = get_slice_bytes(&tcx, a_val);\n+        let b_bytes = get_slice_bytes(&tcx, b_val);\n+        return from_bool(a_bytes == b_bytes);\n     }\n     fallback()\n }"}]}