{"sha": "70517540dad71801a2ab903fb91d3e0c7406f115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTE3NTQwZGFkNzE4MDFhMmFiOTAzZmI5MWQzZTBjNzQwNmYxMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T21:29:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T21:29:27Z"}, "message": "Auto merge of #46430 - kennytm:rollup, r=kennytm\n\nRollup of 13 pull requests\n\n- Successful merges: #45880, #46280, #46373, #46376, #46385, #46386, #46387, #46392, #46400, #46401, #46405, #46412, #46421\n- Failed merges:", "tree": {"sha": "77993189555406a2d28b6ec6a7356671f0401616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77993189555406a2d28b6ec6a7356671f0401616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70517540dad71801a2ab903fb91d3e0c7406f115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70517540dad71801a2ab903fb91d3e0c7406f115", "html_url": "https://github.com/rust-lang/rust/commit/70517540dad71801a2ab903fb91d3e0c7406f115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70517540dad71801a2ab903fb91d3e0c7406f115/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb42071f63830a984c4983f6fbdf982916857f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb42071f63830a984c4983f6fbdf982916857f72", "html_url": "https://github.com/rust-lang/rust/commit/bb42071f63830a984c4983f6fbdf982916857f72"}, {"sha": "56174775022269dfdc7638b1b1473e3f56f33cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/56174775022269dfdc7638b1b1473e3f56f33cde", "html_url": "https://github.com/rust-lang/rust/commit/56174775022269dfdc7638b1b1473e3f56f33cde"}], "stats": {"total": 268, "additions": 219, "deletions": 49}, "files": [{"sha": "57407a2399a2f249f85ecf5ad69d05b3888ef481", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -95,7 +95,6 @@ config.stamp\n keywords.md\n lexer.ml\n src/etc/dl\n-src/librustc_llvm/llvmdeps.rs\n tmp.*.rs\n version.md\n version.ml"}, {"sha": "9987850e683600eb04aff6f6495973080cdb5a98", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -2014,7 +2014,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"html-diff 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "3c12cfc4c7ffd4ba83ac910b8d3ad8a4e4b99899", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -159,7 +159,7 @@ impl Step for CargoBook {\n \n         let target = self.target;\n         let name = self.name;\n-        let src = PathBuf::from(\"src/tools/cargo/src/doc/book\");\n+        let src = build.src.join(\"src/tools/cargo/src/doc/book\");\n \n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));"}, {"sha": "a5408ee381bbbb23c2338ce0cdd5eb04316856c5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -316,7 +316,7 @@ impl Step for TestHelpers {\n            .warnings(false)\n            .debug(false)\n            .file(build.src.join(\"src/rt/rust_test_helpers.c\"))\n-           .compile(\"librust_test_helpers.a\");\n+           .compile(\"rust_test_helpers\");\n     }\n }\n "}, {"sha": "2b6e2828cfb4bf644771d4bd76b65010d77aadfd", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -190,6 +190,9 @@ pub fn mtime(path: &Path) -> FileTime {\n ///\n /// Uses last-modified time checks to verify this.\n pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n+    if !dst.exists() {\n+        return false;\n+    }\n     let threshold = mtime(dst);\n     let meta = match fs::metadata(src) {\n         Ok(meta) => meta,"}, {"sha": "de5006ad3960abc82b2d375fab6a318c6d015660", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -140,6 +140,6 @@ fn main() {\n         cc::Build::new()\n             .flag(\"-fvisibility=hidden\")\n             .file(\"pthread_atfork_dummy.c\")\n-            .compile(\"libpthread_atfork_dummy.a\");\n+            .compile(\"pthread_atfork_dummy\");\n     }\n }"}, {"sha": "dd88dd933f6911f50ebca356411c774d862e59d5", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -56,5 +56,5 @@ fn main() {\n         cfg.file(Path::new(\"../libcompiler_builtins/compiler-rt/lib/profile\").join(src));\n     }\n \n-    cfg.compile(\"libprofiler-rt.a\");\n+    cfg.compile(\"profiler-rt\");\n }"}, {"sha": "1008da1e937a5243d9a5ddbc98b01c76589aad43", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -222,6 +222,12 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n+declare_lint! {\n+    pub COERCE_NEVER,\n+    Deny,\n+    \"detect coercion to !\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -263,7 +269,8 @@ impl LintPass for HardwiredLints {\n             LATE_BOUND_LIFETIME_ARGUMENTS,\n             DEPRECATED,\n             UNUSED_UNSAFE,\n-            UNUSED_MUT\n+            UNUSED_MUT,\n+            COERCE_NEVER\n         )\n     }\n }"}, {"sha": "8d1bba433227685fa8cb68710b42ed49207b575f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -282,7 +282,7 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `VtableImplData`.\n-#[derive(Clone)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n@@ -327,14 +327,14 @@ pub enum Vtable<'tcx, N> {\n /// is `Obligation`, as one might expect. During trans, however, this\n /// is `()`, because trans only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableGeneratorData<'tcx, N> {\n     pub closure_def_id: DefId,\n     pub substs: ty::ClosureSubsts<'tcx>,\n@@ -343,7 +343,7 @@ pub struct VtableGeneratorData<'tcx, N> {\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n     pub substs: ty::ClosureSubsts<'tcx>,\n@@ -352,20 +352,20 @@ pub struct VtableClosureData<'tcx, N> {\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct VtableAutoImplData<N> {\n     pub trait_def_id: DefId,\n     pub nested: Vec<N>\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct VtableBuiltinData<N> {\n     pub nested: Vec<N>\n }\n \n /// A vtable for some object-safe trait `Foo` automatically derived\n /// for the object type `Foo`.\n-#[derive(PartialEq,Eq,Clone)]\n+#[derive(PartialEq, Eq, Clone, RustcEncodable, RustcDecodable)]\n pub struct VtableObjectData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -378,7 +378,7 @@ pub struct VtableObjectData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct VtableFnPointerData<'tcx, N> {\n     pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>"}, {"sha": "fc05f8f0dc24503beda7a78fe6880497d3a460ad", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -247,6 +247,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(COERCE_NEVER),\n+            reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n+        },\n \n         ]);\n "}, {"sha": "f294ceb3f3832e4d3de518f49665fcf897e9a24b", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -154,13 +154,13 @@ fn main() {\n     }\n \n     for component in &components {\n-        let mut flag = String::from(\"-DLLVM_COMPONENT_\");\n+        let mut flag = String::from(\"LLVM_COMPONENT_\");\n         flag.push_str(&component.to_uppercase());\n-        cfg.flag(&flag);\n+        cfg.define(&flag, None);\n     }\n \n     if env::var_os(\"LLVM_RUSTLLVM\").is_some() {\n-        cfg.flag(\"-DLLVM_RUSTLLVM\");\n+        cfg.define(\"LLVM_RUSTLLVM\", None);\n     }\n \n     build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));\n@@ -169,7 +169,7 @@ fn main() {\n        .file(\"../rustllvm/ArchiveWrapper.cpp\")\n        .cpp(true)\n        .cpp_link_stdlib(None) // we handle this below\n-       .compile(\"librustllvm.a\");\n+       .compile(\"rustllvm\");\n \n     let (llvm_kind, llvm_link_arg) = detect_llvm_link(major, minor, &llvm_config);\n "}, {"sha": "1c2fa1bbb484817abd96356c0e63ee402462c979", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -505,17 +505,13 @@ pub mod debuginfo {\n \n pub enum ModuleBuffer {}\n \n-// Link to our native llvm bindings (things that we need to use the C++ api\n-// for) and because llvm is written in C++ we need to link against libstdc++\n-//\n-// You'll probably notice that there is an omission of all LLVM libraries\n-// from this location. This is because the set of LLVM libraries that we\n-// link to is mostly defined by LLVM, and the `llvm-config` tool is used to\n-// figure out the exact set of libraries. To do this, the build system\n-// generates an llvmdeps.rs file next to this one which will be\n-// automatically updated whenever LLVM is updated to include an up-to-date\n-// set of the libraries we need to link to LLVM for.\n-#[link(name = \"rustllvm\", kind = \"static\")] // not quite true but good enough\n+// This annotation is primarily needed for MSVC where attributes like\n+// dllimport/dllexport are applied and need to be correct for everything to\n+// link successfully. The #[link] annotation here says \"these symbols are\n+// included statically\" which means that they're all exported with dllexport\n+// and from the rustc_llvm dynamic library. Otherwise the rustc_trans dynamic\n+// library would not be able to access these symbols.\n+#[link(name = \"rustllvm\", kind = \"static\")]\n extern \"C\" {\n     // Create and destroy contexts.\n     pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "3e725d7ef415c553ee6f82c7468acc1ebe9a3d92", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -66,6 +66,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::lint;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::{self, LvaluePreference, TypeAndMut,\n@@ -754,7 +755,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // type, but only if the source expression diverges.\n         if target.is_never() && expr_diverges.always() {\n             debug!(\"permit coercion to `!` because expr diverges\");\n-            return Ok(target);\n+            if self.can_eq(self.param_env, source, target).is_err() {\n+                self.tcx.lint_node(\n+                    lint::builtin::COERCE_NEVER,\n+                    expr.id,\n+                    expr.span,\n+                    &format!(\"cannot coerce `{}` to !\", source)\n+                );\n+                return Ok(target);\n+            }\n         }\n \n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);"}, {"sha": "f2f1e2938cb1283f65b4de5e3513d0197b92a0cd", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -75,6 +75,25 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n     for &(def_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n+        // The `def_id` here actually was calculated during resolution (at least\n+        // at the time of this writing) and is being shipped to us via a side\n+        // channel of the tcx. There may have been extra expansion phases,\n+        // however, which ended up removing the `def_id` *after* expansion such\n+        // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n+        //\n+        // As a result we need to verify that `def_id` is indeed still valid for\n+        // our AST and actually present in the HIR map. If it's not there then\n+        // there's safely nothing to warn about, and otherwise we carry on with\n+        // our execution.\n+        //\n+        // Note that if we carry through to the `extern_mod_stmt_cnum` query\n+        // below it'll cause a panic because `def_id` is actually bogus at this\n+        // point in time otherwise.\n+        if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+            if tcx.hir.find(id).is_none() {\n+                continue\n+            }\n+        }\n         let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n         if tcx.is_compiler_builtins(cnum) {\n             continue"}, {"sha": "eca3ebe9130fd35eb39dcb679bed3e2493ab9009", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -11,7 +11,6 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n pulldown-cmark = { version = \"0.1.0\", default-features = false }\n html-diff = \"0.0.5\""}, {"sha": "276825bd31a75ed41778cf5e8465a45ccdbbb91c", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -27,6 +27,6 @@ fn main() {\n        .warnings(false)\n        .include(src_dir)\n        .warnings(false)\n-       .compile(\"libhoedown.a\");\n+       .compile(\"hoedown\");\n }\n "}, {"sha": "41918dfd3c31599051591390c436bf3338c2b236", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -1819,7 +1819,9 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n \n fn shorter<'a>(s: Option<&'a str>) -> String {\n     match s {\n-        Some(s) => s.lines().take_while(|line|{\n+        Some(s) => s.lines()\n+            .skip_while(|s| s.chars().all(|c| c.is_whitespace()))\n+            .take_while(|line|{\n             (*line).chars().any(|chr|{\n                 !chr.is_whitespace()\n             })"}, {"sha": "7efe7e1ae3eb30792f5a56fcfcae10b3bafd4ffc", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -920,6 +920,12 @@ span.since {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits .tooltip .tooltiptext {\n+\tbackground-color: white;\n+\tcolor: black;\n+\tborder: 1px solid #000;\n+}\n+\n pre.rust {\n \tposition: relative;\n }"}, {"sha": "967076779add05f041383cabbcaa9ccbc6fb6f06", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -470,7 +470,6 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n         default_passes = false;\n \n         passes = vec![\n-            String::from(\"strip-hidden\"),\n             String::from(\"collapse-docs\"),\n             String::from(\"unindent-comments\"),\n         ];"}, {"sha": "3e15d3d3007ac7ef659792d8321b8321c80b9cbb", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -184,6 +184,15 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n                     return None;\n                 }\n             }\n+            if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n+                for typaram in generics {\n+                    if let Some(did) = typaram.def_id() {\n+                        if did.is_local() && !self.retained.contains(&did) {\n+                            return None;\n+                        }\n+                    }\n+                }\n+            }\n         }\n         self.fold_item_recur(i)\n     }"}, {"sha": "4f33a2b12fe5d1447fa20fcbbf1c84c8cb583dd4", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -223,7 +223,34 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(target_os = \"netbsd\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    ::fs::read_link(\"/proc/curproc/exe\")\n+    fn sysctl() -> io::Result<PathBuf> {\n+        unsafe {\n+            let mib = [libc::CTL_KERN, libc::KERN_PROC_ARGS, -1, libc::KERN_PROC_PATHNAME];\n+            let mut path_len: usize = 0;\n+            cvt(libc::sysctl(mib.as_ptr(), mib.len() as ::libc::c_uint,\n+                             ptr::null_mut(), &mut path_len,\n+                             ptr::null(), 0))?;\n+            if path_len <= 1 {\n+                return Err(io::Error::new(io::ErrorKind::Other,\n+                           \"KERN_PROC_PATHNAME sysctl returned zero-length string\"))\n+            }\n+            let mut path: Vec<u8> = Vec::with_capacity(path_len);\n+            cvt(libc::sysctl(mib.as_ptr(), mib.len() as ::libc::c_uint,\n+                             path.as_ptr() as *mut libc::c_void, &mut path_len,\n+                             ptr::null(), 0))?;\n+            path.set_len(path_len - 1); // chop off NUL\n+            Ok(PathBuf::from(OsString::from_vec(path)))\n+        }\n+    }\n+    fn procfs() -> io::Result<PathBuf> {\n+        let curproc_exe = path::Path::new(\"/proc/curproc/exe\");\n+        if curproc_exe.is_file() {\n+            return ::fs::read_link(curproc_exe);\n+        }\n+        Err(io::Error::new(io::ErrorKind::Other,\n+                           \"/proc/curproc/exe doesn't point to regular file.\"))\n+    }\n+    sysctl().or_else(|_| procfs())\n }\n \n #[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]"}, {"sha": "6d08185a5cf488d0a853b065a8a3a6d7a29f084f", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -1 +1 @@\n-Subproject commit 487c636342ea1abe64d6387eade963a91a152aa9\n+Subproject commit 6d08185a5cf488d0a853b065a8a3a6d7a29f084f"}, {"sha": "0d5bf6cd68cb80cd96693f6017987f521ff7b6af", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -12,8 +12,11 @@\n \n fn foo(x: usize, y: !, z: usize) { }\n \n+#[deny(coerce_never)]\n fn cast_a() {\n     let y = {return; 22} as !;\n+    //~^ ERROR cannot coerce `i32` to !\n+    //~| hard error\n }\n \n fn cast_b() {"}, {"sha": "2cf568777d47534415734321af13126bc733e88e", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(never_type)]\n+#![deny(coerce_never)]\n \n fn foo(x: usize, y: !, z: usize) { }\n \n@@ -17,6 +18,8 @@ fn call_foo_a() {\n     // the coercion to `!`, but within same expression. Not clear that\n     // these are the rules we want.\n     foo(return, 22, 44);\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn call_foo_b() {\n@@ -36,6 +39,8 @@ fn call_foo_d() {\n     let b = 22;\n     let c = 44;\n     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn call_foo_e() {\n@@ -75,6 +80,8 @@ fn tuple_a() {\n fn tuple_b() {\n     // Divergence happens before coercion: OK\n     let x: (usize, !, usize) = (return, 44, 66);\n+    //~^ ERROR cannot coerce `{integer}` to !\n+    //~| hard error\n }\n \n fn tuple_c() {"}, {"sha": "a91c000bbf712c4c4883cb4632186dbba5e6b0ea", "filename": "src/test/compile-fail/diverging-fn-tail-35849.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn _converge() -> ! {\n-    42 //~ ERROR mismatched types\n+#[deny(coerce_never)]\n+fn assert_sizeof() -> ! {\n+    unsafe {\n+        ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n+            //~^ ERROR cannot coerce `[u8; 8]` to !\n+            //~| hard error\n+    }\n }\n \n fn main() { }\n-"}, {"sha": "dfd99bcc9fb47978777a0c021b32b9915c099a97", "filename": "src/test/run-pass/diverging-fn-tail-35849.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fn-tail-35849.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(coerce_never)]\n fn assert_sizeof() -> ! {\n     unsafe {\n         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n     }\n }\n \n fn main() { }\n-"}, {"sha": "c8fa49c62a0b6534c190bf9bca2f5af211837c3a", "filename": "src/test/run-pass/saturating-float-casts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -10,7 +10,6 @@\n \n // Tests saturating float->int casts. See u128-as-f32.rs for the opposite direction.\n // compile-flags: -Z saturating-float-casts\n-// ignore-wasm32-bare FIXME(#46298) needs upstream llvm fixes\n \n #![feature(test, i128, i128_type, stmt_expr_attributes)]\n #![deny(overflowing_literals)]"}, {"sha": "cc3be08c5688da82a6d690948f6f74575f000fd5", "filename": "src/test/rustdoc/issue-46271.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46271.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// hopefully this doesn't cause an ICE\n+\n+pub fn foo() {\n+    extern crate std;\n+}"}, {"sha": "db8c7660df1d893e525609fbb9b5128edb2bdf8d", "filename": "src/test/rustdoc/issue-46377.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46377.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has 'issue_46377/index.html' '//*[@class=\"docblock-short\"]' 'Check out this struct!'\n+/// # Check out this struct!\n+pub struct SomeStruct;"}, {"sha": "22408d3522a4b4cffc42a893ee0c2e1d1a205c59", "filename": "src/test/rustdoc/issue-46380-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46380-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46380-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46380-2.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait PublicTrait<T> {}\n+\n+// @has issue_46380_2/struct.PublicStruct.html\n+pub struct PublicStruct;\n+\n+// @!has - '//*[@class=\"impl\"]' 'impl PublicTrait<PrivateStruct> for PublicStruct'\n+impl PublicTrait<PrivateStruct> for PublicStruct {}\n+\n+struct PrivateStruct;"}, {"sha": "85f29ec4b02d1149bcaee430ee41e7014b9c9920", "filename": "src/test/rustdoc/issue-46380.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Frustdoc%2Fissue-46380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46380.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --document-private-items\n+\n+// @has issue_46380/struct.Hidden.html\n+#[doc(hidden)]\n+pub struct Hidden;"}, {"sha": "ad12cb876fe9b9a070ee59ba22d6c17ed46f799d", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -12,11 +12,14 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n+#![deny(coerce_never)]\n #![feature(never_type)]\n \n fn foo() {\n     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-    //~^ ERROR cannot apply unary operator `!` to type `!`\n+    //~^ ERROR cannot coerce\n+    //~| hard error\n+    //~| ERROR cannot apply unary operator `!` to type `!`\n }\n \n fn main() { }"}, {"sha": "39120f0bdf980a87fc69830d7a6534e55a9bf81d", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70517540dad71801a2ab903fb91d3e0c7406f115/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -1,7 +1,7 @@\n error: unreachable expression\n-  --> $DIR/expr_unary.rs:18:28\n+  --> $DIR/expr_unary.rs:19:28\n    |\n-18 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                            ^^\n    |\n note: lint level defined here\n@@ -10,11 +10,25 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n+error: cannot coerce `{integer}` to !\n+  --> $DIR/expr_unary.rs:19:28\n+   |\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+   |                            ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/expr_unary.rs:15:9\n+   |\n+15 | #![deny(coerce_never)]\n+   |         ^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>\n+\n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:18:16\n+  --> $DIR/expr_unary.rs:19:16\n    |\n-18 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n+19 |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n    |                ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "5bb478a518bcf75537409e8b71f6b7cc4af362df", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=70517540dad71801a2ab903fb91d3e0c7406f115", "patch": "@@ -1 +1 @@\n-Subproject commit 6529d418db18ac28622fc2fe0bade0d690c6bd71\n+Subproject commit 5bb478a518bcf75537409e8b71f6b7cc4af362df"}]}