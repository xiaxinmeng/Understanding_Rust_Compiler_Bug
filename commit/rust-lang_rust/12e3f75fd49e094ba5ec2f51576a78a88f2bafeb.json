{"sha": "12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "node_id": "C_kwDOAAsO6NoAKDEyZTNmNzVmZDQ5ZTA5NGJhNWVjMmY1MTU3NmE3OGE4OGYyYmFmZWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-08T15:32:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-08T15:32:31Z"}, "message": "don't make it qutie so easy to get Miri to panic", "tree": {"sha": "9bedd2e25bb0bb6fd04a14b0cd681b98f20e7f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bedd2e25bb0bb6fd04a14b0cd681b98f20e7f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "html_url": "https://github.com/rust-lang/rust/commit/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654e15b51c5d177b7d2c2345904a021c4c61f2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/654e15b51c5d177b7d2c2345904a021c4c61f2ef", "html_url": "https://github.com/rust-lang/rust/commit/654e15b51c5d177b7d2c2345904a021c4c61f2ef"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "3325fc97d8257f30b4f61ec1d9aec86ad2c5a2db", "filename": "src/bin/miri.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e3f75fd49e094ba5ec2f51576a78a88f2bafeb/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=12e3f75fd49e094ba5ec2f51576a78a88f2bafeb", "patch": "@@ -152,11 +152,15 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n     }\n }\n \n-fn show_error(msg: String) -> ! {\n-    eprintln!(\"fatal error: {}\", msg);\n+fn show_error(msg: &str) -> ! {\n+    eprintln!(\"fatal error: {msg}\");\n     std::process::exit(1)\n }\n \n+macro_rules! show_error {\n+    ($($tt:tt)*) => { show_error(&format!($($tt)*)) };\n+}\n+\n fn init_early_loggers() {\n     // Note that our `extern crate log` is *not* the same as rustc's; as a result, we have to\n     // initialize them both, and we always initialize `miri`'s first.\n@@ -234,19 +238,19 @@ fn host_sysroot() -> Option<String> {\n                 env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"))\n             {\n                 if toolchain_runtime != toolchain {\n-                    show_error(format!(\n+                    show_error!(\n                         \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n                         Make sure to run Miri in the toolchain it got built with, e.g. via `cargo +{toolchain} miri`.\"\n-                    ));\n+                    )\n                 }\n             }\n             format!(\"{}/toolchains/{}\", home, toolchain)\n         }\n         _ => option_env!(\"RUST_SYSROOT\")\n             .unwrap_or_else(|| {\n-                show_error(format!(\n+                show_error!(\n                     \"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\",\n-                ))\n+                )\n             })\n             .to_owned(),\n     })\n@@ -272,9 +276,9 @@ fn run_compiler(\n             // Using the built-in default here would be plain wrong, so we *require*\n             // the env var to make sure things make sense.\n             Some(env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n-                show_error(format!(\n+                show_error!(\n                     \"Miri was invoked in 'target' mode without `MIRI_SYSROOT` or `--sysroot` being set\"\n-                ))\n+                )\n             }))\n         } else {\n             host_default_sysroot\n@@ -379,7 +383,9 @@ fn main() {\n             miri_config.check_abi = false;\n         } else if arg == \"-Zmiri-disable-isolation\" {\n             if matches!(isolation_enabled, Some(true)) {\n-                panic!(\"-Zmiri-disable-isolation cannot be used along with -Zmiri-isolation-error\");\n+                show_error!(\n+                    \"-Zmiri-disable-isolation cannot be used along with -Zmiri-isolation-error\"\n+                );\n             } else {\n                 isolation_enabled = Some(false);\n             }\n@@ -390,7 +396,9 @@ fn main() {\n             miri_config.track_outdated_loads = true;\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-isolation-error=\") {\n             if matches!(isolation_enabled, Some(false)) {\n-                panic!(\"-Zmiri-isolation-error cannot be used along with -Zmiri-disable-isolation\");\n+                show_error!(\n+                    \"-Zmiri-isolation-error cannot be used along with -Zmiri-disable-isolation\"\n+                );\n             } else {\n                 isolation_enabled = Some(true);\n             }\n@@ -402,7 +410,7 @@ fn main() {\n                 \"warn-nobacktrace\" =>\n                     miri::IsolatedOp::Reject(miri::RejectOpWith::WarningWithoutBacktrace),\n                 _ =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n                     ),\n             };\n@@ -426,11 +434,11 @@ fn main() {\n             );\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-seed=\") {\n             if miri_config.seed.is_some() {\n-                panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n+                show_error!(\"Cannot specify -Zmiri-seed multiple times!\");\n             }\n             let seed = u64::from_str_radix(param, 16)\n-                        .unwrap_or_else(|_| panic!(\n-                            \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F] and fit into a u64 (max 16 characters)\"\n+                        .unwrap_or_else(|_| show_error!(\n+                            \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F] and must fit into a u64 (max 16 characters)\"\n                         ));\n             miri_config.seed = Some(seed);\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-env-exclude=\") {\n@@ -441,7 +449,7 @@ fn main() {\n             let ids: Vec<u64> = match parse_comma_list(param) {\n                 Ok(ids) => ids,\n                 Err(err) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-track-pointer-tag requires a comma separated list of valid `u64` arguments: {}\",\n                         err\n                     ),\n@@ -450,14 +458,14 @@ fn main() {\n                 if let Some(id) = id {\n                     miri_config.tracked_pointer_tags.insert(id);\n                 } else {\n-                    panic!(\"-Zmiri-track-pointer-tag requires nonzero arguments\");\n+                    show_error!(\"-Zmiri-track-pointer-tag requires nonzero arguments\");\n                 }\n             }\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-call-id=\") {\n             let ids: Vec<u64> = match parse_comma_list(param) {\n                 Ok(ids) => ids,\n                 Err(err) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-track-call-id requires a comma separated list of valid `u64` arguments: {}\",\n                         err\n                     ),\n@@ -466,14 +474,14 @@ fn main() {\n                 if let Some(id) = id {\n                     miri_config.tracked_call_ids.insert(id);\n                 } else {\n-                    panic!(\"-Zmiri-track-call-id requires a nonzero argument\");\n+                    show_error!(\"-Zmiri-track-call-id requires a nonzero argument\");\n                 }\n             }\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-alloc-id=\") {\n             let ids: Vec<miri::AllocId> = match parse_comma_list::<NonZeroU64>(param) {\n                 Ok(ids) => ids.into_iter().map(miri::AllocId).collect(),\n                 Err(err) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-track-alloc-id requires a comma separated list of valid non-zero `u64` arguments: {}\",\n                         err\n                     ),\n@@ -483,11 +491,11 @@ fn main() {\n             let rate = match param.parse::<f64>() {\n                 Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n                 Ok(_) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"\n                     ),\n                 Err(err) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\",\n                         err\n                     ),\n@@ -496,9 +504,9 @@ fn main() {\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-preemption-rate=\") {\n             let rate = match param.parse::<f64>() {\n                 Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n-                Ok(_) => panic!(\"-Zmiri-preemption-rate must be between `0.0` and `1.0`\"),\n+                Ok(_) => show_error!(\"-Zmiri-preemption-rate must be between `0.0` and `1.0`\"),\n                 Err(err) =>\n-                    panic!(\n+                    show_error!(\n                         \"-Zmiri-preemption-rate requires a `f64` between `0.0` and `1.0`: {}\",\n                         err\n                     ),\n@@ -510,7 +518,7 @@ fn main() {\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-report-progress=\") {\n             let interval = match param.parse::<u32>() {\n                 Ok(i) => i,\n-                Err(err) => panic!(\"-Zmiri-report-progress requires a `u32`: {}\", err),\n+                Err(err) => show_error!(\"-Zmiri-report-progress requires a `u32`: {}\", err),\n             };\n             miri_config.report_progress = Some(interval);\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-measureme=\") {\n@@ -520,7 +528,7 @@ fn main() {\n                 \"0\" => BacktraceStyle::Off,\n                 \"1\" => BacktraceStyle::Short,\n                 \"full\" => BacktraceStyle::Full,\n-                _ => panic!(\"-Zmiri-backtrace may only be 0, 1, or full\"),\n+                _ => show_error!(\"-Zmiri-backtrace may only be 0, 1, or full\"),\n             };\n         } else {\n             // Forward to rustc."}]}