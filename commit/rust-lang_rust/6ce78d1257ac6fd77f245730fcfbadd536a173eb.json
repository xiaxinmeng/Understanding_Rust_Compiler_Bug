{"sha": "6ce78d1257ac6fd77f245730fcfbadd536a173eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTc4ZDEyNTdhYzZmZDc3ZjI0NTczMGZjZmJhZGQ1MzZhMTczZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T22:48:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-29T22:48:03Z"}, "message": "Auto merge of #3652 - Aehmlo:where_the_wild_things_are, r=phansch\n\nAdd wildcard_match_arm lint\n\nThis lint prevents using a wildcard in a match arm. Implemented as a restriction currently, because this is pretty much an edge case. See #3649 for more information.\n\nDidn't add any tests because I wasn't sure how, but if someone wants to point me in the right direction, I'd be happy to!", "tree": {"sha": "690111d5d8280f7ace12773b397b3851a604e226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690111d5d8280f7ace12773b397b3851a604e226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce78d1257ac6fd77f245730fcfbadd536a173eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce78d1257ac6fd77f245730fcfbadd536a173eb", "html_url": "https://github.com/rust-lang/rust/commit/6ce78d1257ac6fd77f245730fcfbadd536a173eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce78d1257ac6fd77f245730fcfbadd536a173eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "html_url": "https://github.com/rust-lang/rust/commit/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107"}, {"sha": "7fa50fb3fe98f3c6f837e95e6d13810c68ceaf74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa50fb3fe98f3c6f837e95e6d13810c68ceaf74", "html_url": "https://github.com/rust-lang/rust/commit/7fa50fb3fe98f3c6f837e95e6d13810c68ceaf74"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "71066aadfcbdcbde0df4f54d6ba25d3adb3605db", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -1028,6 +1028,7 @@ All notable changes to this project will be documented in this file.\n [`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n [`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator\n [`wildcard_dependencies`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_dependencies\n+[`wildcard_enum_match_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\n [`write_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_literal\n [`write_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline\n [`writeln_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#writeln_empty_string"}, {"sha": "c1f457a956ebc41e9d9b977c2225679e7feba961", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 293 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 294 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "52cc2a88da4aaa4e1c1f3feb23506675be6184a8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -499,6 +499,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         indexing_slicing::INDEXING_SLICING,\n         inherent_impl::MULTIPLE_INHERENT_IMPL,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+        matches::WILDCARD_ENUM_MATCH_ARM,\n         mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,\n         methods::OPTION_UNWRAP_USED,"}, {"sha": "6ef07316691024fe8c728298573cb3e3da6a1857", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -187,6 +187,25 @@ declare_clippy_lint! {\n     \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n \n+/// **What it does:** Checks for wildcard enum matches using `_`.\n+///\n+/// **Why is this bad?** New enum variants added by library updates can be missed.\n+///\n+/// **Known problems:** Nested wildcards a la `Foo(_)` are currently not detected.\n+///\n+/// **Example:**\n+/// ```rust\n+/// match x {\n+///     A => {},\n+///     _ => {},\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub WILDCARD_ENUM_MATCH_ARM,\n+    restriction,\n+    \"a wildcard enum match arm using `_`\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n@@ -199,7 +218,8 @@ impl LintPass for MatchPass {\n             SINGLE_MATCH_ELSE,\n             MATCH_OVERLAPPING_ARM,\n             MATCH_WILD_ERR_ARM,\n-            MATCH_AS_REF\n+            MATCH_AS_REF,\n+            WILDCARD_ENUM_MATCH_ARM\n         )\n     }\n \n@@ -218,6 +238,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n             check_wild_err_arm(cx, ex, arms);\n+            check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.node {\n@@ -442,6 +463,23 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n+fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n+    if cx.tables.expr_ty(ex).is_enum() {\n+        for arm in arms {\n+            if is_wild(&arm.pats[0]) {\n+                span_note_and_lint(\n+                    cx,\n+                    WILDCARD_ENUM_MATCH_ARM,\n+                    arm.pats[0].span,\n+                    \"wildcard match will miss any future added variants.\",\n+                    arm.pats[0].span,\n+                    \"to resolve, match each variant explicitly\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n // If the block contains only a `panic!` macro (as expression or statement)\n fn is_panic_block(block: &Block) -> bool {\n     match (&block.expr, block.stmts.len(), block.stmts.first()) {"}, {"sha": "58daabf4268645b01a309a5993826029ffd680e2", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -0,0 +1,42 @@\n+#![deny(clippy::wildcard_enum_match_arm)]\n+\n+#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n+enum Color {\n+    Red,\n+    Green,\n+    Blue,\n+    Rgb(u8, u8, u8),\n+    Cyan,\n+}\n+\n+impl Color {\n+    fn is_monochrome(self) -> bool {\n+        match self {\n+            Color::Red | Color::Green | Color::Blue => true,\n+            Color::Rgb(r, g, b) => r | g == 0 || r | b == 0 || g | b == 0,\n+            Color::Cyan => false,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let color = Color::Rgb(0, 0, 127);\n+    match color {\n+        Color::Red => println!(\"Red\"),\n+        _ => eprintln!(\"Not red\"),\n+    };\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Blue => {},\n+        Color::Cyan => {},\n+        c if c.is_monochrome() => {},\n+        Color::Rgb(_, _, _) => {},\n+    };\n+    let x: u8 = unimplemented!();\n+    match x {\n+        0 => {},\n+        140 => {},\n+        _ => {},\n+    };\n+}"}, {"sha": "6319a3f3d46c3a763d0bb8dd6174bd82ba1d1a01", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ce78d1257ac6fd77f245730fcfbadd536a173eb/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ce78d1257ac6fd77f245730fcfbadd536a173eb/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=6ce78d1257ac6fd77f245730fcfbadd536a173eb", "patch": "@@ -0,0 +1,15 @@\n+error: wildcard match will miss any future added variants.\n+  --> $DIR/wildcard_enum_match_arm.rs:26:9\n+   |\n+LL |         _ => eprintln!(\"Not red\"),\n+   |         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/wildcard_enum_match_arm.rs:1:9\n+   |\n+LL | #![deny(clippy::wildcard_enum_match_arm)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: to resolve, match each variant explicitly\n+\n+error: aborting due to previous error\n+"}]}