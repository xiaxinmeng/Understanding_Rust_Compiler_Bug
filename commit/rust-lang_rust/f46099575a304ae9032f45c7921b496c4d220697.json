{"sha": "f46099575a304ae9032f45c7921b496c4d220697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjA5OTU3NWEzMDRhZTkwMzJmNDVjNzkyMWI0OTZjNGQyMjA2OTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T11:36:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-22T17:27:07Z"}, "message": "Make ty_bare_fn carry an optional def-id indicating whether it is the\ntype of a fn item or a fn pointer, which are now differentiated.\nIntroduce coercion from fn item to fn pointer.", "tree": {"sha": "7631fb43337868e152aafb545493d482a8981994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7631fb43337868e152aafb545493d482a8981994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46099575a304ae9032f45c7921b496c4d220697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46099575a304ae9032f45c7921b496c4d220697", "html_url": "https://github.com/rust-lang/rust/commit/f46099575a304ae9032f45c7921b496c4d220697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46099575a304ae9032f45c7921b496c4d220697/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c8cb997a592f7348958e58c98117be03764d8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8cb997a592f7348958e58c98117be03764d8b0", "html_url": "https://github.com/rust-lang/rust/commit/8c8cb997a592f7348958e58c98117be03764d8b0"}], "stats": {"total": 275, "additions": 161, "deletions": 114}, "files": [{"sha": "e08dd64d4d4111480a01152c283d299668bb6da1", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -127,7 +127,11 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) -> bool {\n         ast::ExprCast(ref from, _) => {\n             let toty = ty::expr_ty(v.tcx, e);\n             let fromty = ty::expr_ty(v.tcx, &**from);\n-            if !ty::type_is_numeric(toty) && !ty::type_is_unsafe_ptr(toty) {\n+            let is_legal_cast =\n+                ty::type_is_numeric(toty) ||\n+                ty::type_is_unsafe_ptr(toty) ||\n+                (ty::type_is_bare_fn(toty) && ty::type_is_bare_fn_item(fromty));\n+            if !is_legal_cast {\n                 span_err!(v.tcx.sess, e.span, E0012,\n                           \"can not cast to `{}` in a constant expression\",\n                           ppaux::ty_to_string(v.tcx, toty));"}, {"sha": "046a2894b5dfc873402ecd5adc06c766d0f02482", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -824,10 +824,12 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             None => { }\n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) => {\n-                        // Creating a closure consumes the input and stores it\n-                        // into the resulting rvalue.\n-                        debug!(\"walk_adjustment(AutoAddEnv)\");\n+                    ty::AdjustAddEnv(..) |\n+                    ty::AdjustReifyFnPointer(..) => {\n+                        // Creating a closure/fn-pointer consumes the\n+                        // input and stores it into the resulting\n+                        // rvalue.\n+                        debug!(\"walk_adjustment(AutoAddEnv|AdjustReifyFnPointer)\");\n                         let cmt_unadjusted =\n                             return_if_err!(self.mc.cat_expr_unadjusted(expr));\n                         self.delegate_consume(expr.id, expr.span, cmt_unadjusted);"}, {"sha": "08336da0d8a6ecc4928b7710327813ded7825fd5", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -486,41 +486,55 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                b.repr(self.tcx()));\n \n         match a.sty {\n-            ty::ty_bare_fn(ref f) => {\n-                self.coerce_from_bare_fn(a, f, b)\n+            ty::ty_bare_fn(Some(a_def_id), ref f) => {\n+                self.coerce_from_fn_item(a, a_def_id, f, b)\n             }\n             _ => {\n                 self.subtype(a, b)\n             }\n         }\n     }\n \n-    ///  Attempts to coerce from a bare Rust function (`extern \"Rust\" fn`) into a closure or a\n-    ///  `proc`.\n-    fn coerce_from_bare_fn(&self, a: Ty<'tcx>, fn_ty_a: &ty::BareFnTy<'tcx>, b: Ty<'tcx>)\n+    fn coerce_from_fn_item(&self,\n+                           a: Ty<'tcx>,\n+                           fn_def_id_a: ast::DefId,\n+                           fn_ty_a: &ty::BareFnTy<'tcx>,\n+                           b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n-        self.unpack_actual_value(b, |b| {\n+        /*!\n+         * Attempts to coerce from the type of a Rust function item\n+         * into a closure or a `proc`.\n+         */\n \n+        self.unpack_actual_value(b, |b| {\n             debug!(\"coerce_from_bare_fn(a={}, b={})\",\n-                   a.repr(self.get_ref().infcx.tcx), b.repr(self.get_ref().infcx.tcx));\n+                   a.repr(self.tcx()), b.repr(self.tcx()));\n \n-            if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n-                return self.subtype(a, b);\n-            }\n+            match b.sty {\n+                ty::ty_closure(ref f) => {\n+                    if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n+                        return self.subtype(a, b);\n+                    }\n \n-            let fn_ty_b = match b.sty {\n-                ty::ty_closure(ref f) => (*f).clone(),\n-                _ => return self.subtype(a, b)\n-            };\n-\n-            let adj = ty::AdjustAddEnv(fn_ty_b.store);\n-            let a_closure = ty::mk_closure(self.get_ref().infcx.tcx,\n-                                           ty::ClosureTy {\n-                                                sig: fn_ty_a.sig.clone(),\n-                                                .. *fn_ty_b\n-                                           });\n-            try!(self.subtype(a_closure, b));\n-            Ok(Some(adj))\n+                    let fn_ty_b = (*f).clone();\n+                    let adj = ty::AdjustAddEnv(fn_def_id_a, fn_ty_b.store);\n+                    let a_closure = ty::mk_closure(self.tcx(),\n+                                                   ty::ClosureTy {\n+                                                       sig: fn_ty_a.sig.clone(),\n+                                                       .. *fn_ty_b\n+                                                   });\n+                    try!(self.subtype(a_closure, b));\n+                    Ok(Some(adj))\n+                }\n+                ty::ty_bare_fn(None, _) => {\n+                    let a_fn_pointer = ty::mk_bare_fn(self.tcx(), None, (*fn_ty_a).clone());\n+                    try!(self.subtype(a_fn_pointer, b));\n+                    Ok(Some(ty::AdjustReifyFnPointer(fn_def_id_a)))\n+                }\n+                _ => {\n+                    return self.subtype(a, b)\n+                }\n+            }\n         })\n     }\n "}, {"sha": "fc240faac4490022d7e0151225f788e51f63bac7", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -568,11 +568,12 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n         }\n       }\n \n-      (&ty::ty_bare_fn(ref a_fty), &ty::ty_bare_fn(ref b_fty)) => {\n-        this.bare_fn_tys(a_fty, b_fty).and_then(|fty| {\n-            Ok(ty::mk_bare_fn(tcx, fty))\n-        })\n-      }\n+        (&ty::ty_bare_fn(a_opt_def_id, ref a_fty), &ty::ty_bare_fn(b_opt_def_id, ref b_fty))\n+            if a_opt_def_id == b_opt_def_id =>\n+        {\n+            let fty = try!(this.bare_fn_tys(a_fty, b_fty));\n+            Ok(ty::mk_bare_fn(tcx, a_opt_def_id, fty))\n+        }\n \n       (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n         this.closure_tys(&**a_fty, &**b_fty).and_then(|fty| {"}, {"sha": "5aac988948f731a8527d510126d823f181da6305", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -441,8 +441,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) => {\n-                        debug!(\"cat_expr(AdjustAddEnv): {}\",\n+                    ty::AdjustAddEnv(..) | ty::AdjustReifyFnPointer(..) => {\n+                        debug!(\"cat_expr(AdjustAddEnv|AdjustReifyFnPointer): {}\",\n                                expr.repr(self.tcx()));\n                         // Convert a bare fn to a closure by adding NULL env.\n                         // Result is an rvalue."}, {"sha": "4130d07aed01cc1ec947d10aae82458e57716f78", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -293,7 +293,8 @@ pub enum Variance {\n \n #[deriving(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustAddEnv(ty::TraitStore),\n+    AdjustAddEnv(ast::DefId, ty::TraitStore),\n+    AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n \n@@ -1243,11 +1244,17 @@ pub enum sty<'tcx> {\n     ty_vec(Ty<'tcx>, Option<uint>), // Second field is length.\n     ty_ptr(mt<'tcx>),\n     ty_rptr(Region, mt<'tcx>),\n-    ty_bare_fn(BareFnTy<'tcx>),\n+\n+    // If the def-id is Some(_), then this is the type of a specific\n+    // fn item. Otherwise, if None(_), it a fn pointer type.\n+    ty_bare_fn(Option<DefId>, BareFnTy<'tcx>),\n+\n     ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n     ty_struct(DefId, Substs<'tcx>),\n+\n     ty_unboxed_closure(DefId, Region, Substs<'tcx>),\n+\n     ty_tup(Vec<Ty<'tcx>>),\n \n     ty_param(ParamTy), // type parameter\n@@ -2339,15 +2346,19 @@ pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, fty: ClosureTy<'tcx>) -> Ty<'tcx> {\n     mk_t(cx, ty_closure(box fty))\n }\n \n-pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>, fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n-    mk_t(cx, ty_bare_fn(fty))\n+pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,\n+                        opt_def_id: Option<ast::DefId>,\n+                        fty: BareFnTy<'tcx>) -> Ty<'tcx> {\n+    mk_t(cx, ty_bare_fn(opt_def_id, fty))\n }\n \n pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n+                        def_id: ast::DefId,\n                         input_tys: &[Ty<'tcx>],\n                         output: Ty<'tcx>) -> Ty<'tcx> {\n     let input_args = input_tys.iter().map(|ty| *ty).collect();\n     mk_bare_fn(cx,\n+               Some(def_id),\n                BareFnTy {\n                    unsafety: ast::Unsafety::Normal,\n                    abi: abi::Rust,\n@@ -3560,6 +3571,13 @@ pub fn type_is_bare_fn(ty: Ty) -> bool {\n     }\n }\n \n+pub fn type_is_bare_fn_item(ty: Ty) -> bool {\n+    match ty.sty {\n+        ty_bare_fn(Some(_), _) => true,\n+        _ => false\n+    }\n+}\n+\n pub fn type_is_fp(ty: Ty) -> bool {\n     match ty.sty {\n       ty_infer(FloatVar(_)) | ty_float(_) => true,\n@@ -3975,9 +3993,9 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n     return match adjustment {\n         Some(adjustment) => {\n             match *adjustment {\n-                AdjustAddEnv(store) => {\n+                AdjustAddEnv(_, store) => {\n                     match unadjusted_ty.sty {\n-                        ty::ty_bare_fn(ref b) => {\n+                        ty::ty_bare_fn(Some(_), ref b) => {\n                             let bounds = ty::ExistentialBounds {\n                                 region_bound: ReStatic,\n                                 builtin_bounds: all_builtin_bounds(),\n@@ -3994,7 +4012,21 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n                         }\n                         ref b => {\n                             cx.sess.bug(\n-                                format!(\"add_env adjustment on non-bare-fn: \\\n+                                format!(\"add_env adjustment on non-fn-item: \\\n+                                         {}\",\n+                                        b).as_slice());\n+                        }\n+                    }\n+                }\n+\n+                AdjustReifyFnPointer(_) => {\n+                    match unadjusted_ty.sty {\n+                        ty::ty_bare_fn(Some(_), ref b) => {\n+                            ty::mk_bare_fn(cx, None, (*b).clone())\n+                        }\n+                        ref b => {\n+                            cx.sess.bug(\n+                                format!(\"AdjustReifyFnPointer adjustment on non-fn-item: \\\n                                          {}\",\n                                         b).as_slice());\n                         }\n@@ -4353,7 +4385,8 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n         ty_vec(_, None) => \"slice\".to_string(),\n         ty_ptr(_) => \"*-ptr\".to_string(),\n         ty_rptr(_, _) => \"&-ptr\".to_string(),\n-        ty_bare_fn(_) => \"extern fn\".to_string(),\n+        ty_bare_fn(Some(_), _) => format!(\"fn item\"),\n+        ty_bare_fn(None, _) => \"fn pointer\".to_string(),\n         ty_closure(_) => \"fn\".to_string(),\n         ty_trait(ref inner) => {\n             format!(\"trait {}\", item_path_str(cx, inner.principal.def_id()))\n@@ -5884,8 +5917,9 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                     region(state, r);\n                     mt(state, m);\n                 }\n-                ty_bare_fn(ref b) => {\n+                ty_bare_fn(opt_def_id, ref b) => {\n                     byte!(14);\n+                    hash!(opt_def_id);\n                     hash!(b.unsafety);\n                     hash!(b.abi);\n                     fn_sig(state, &b.sig);\n@@ -6252,6 +6286,7 @@ impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n             AdjustAddEnv(..) => false,\n+            AdjustReifyFnPointer(..) => false,\n             AdjustDerefRef(ref r) => r.is_identity(),\n         }\n     }\n@@ -6367,8 +6402,11 @@ impl DebruijnIndex {\n impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match *self {\n-            AdjustAddEnv(ref trait_store) => {\n-                format!(\"AdjustAddEnv({})\", trait_store)\n+            AdjustAddEnv(def_id, ref trait_store) => {\n+                format!(\"AdjustAddEnv({},{})\", def_id.repr(tcx), trait_store)\n+            }\n+            AdjustReifyFnPointer(def_id) => {\n+                format!(\"AdjustAddEnv({})\", def_id.repr(tcx))\n             }\n             AdjustDerefRef(ref data) => {\n                 data.repr(tcx)"}, {"sha": "a35ea30b217913ac4e789ef1062620250570b66f", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -538,8 +538,8 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n         ty::ty_tup(ref ts) => {\n             ty::ty_tup(ts.fold_with(this))\n         }\n-        ty::ty_bare_fn(ref f) => {\n-            ty::ty_bare_fn(f.fold_with(this))\n+        ty::ty_bare_fn(opt_def_id, ref f) => {\n+            ty::ty_bare_fn(opt_def_id, f.fold_with(this))\n         }\n         ty::ty_closure(ref f) => {\n             ty::ty_closure(box f.fold_with(this))"}, {"sha": "8b2c7f3a78a27370bc4e65b107333ef12d3876f1", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -542,6 +542,7 @@ pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         let class_ty = ty::lookup_item_type(tcx, parent_id).ty.subst(tcx, substs);\n         let llty = type_of_dtor(ccx, class_ty);\n         let dtor_ty = ty::mk_ctor_fn(ccx.tcx(),\n+                                     did,\n                                      &[glue::get_drop_glue_type(ccx, t)],\n                                      ty::mk_nil(ccx.tcx()));\n         get_extern_fn(ccx,"}, {"sha": "7e7a6dfc48ad702386080faee72188bf08f2e72c", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -18,10 +18,9 @@ pub use self::AutorefArg::*;\n pub use self::CalleeData::*;\n pub use self::CallArgs::*;\n \n-use arena::TypedArena;\n-use back::{abi,link};\n+use back::abi;\n use session;\n-use llvm::{ValueRef, get_param};\n+use llvm::{ValueRef};\n use llvm;\n use metadata::csearch;\n use middle::def;"}, {"sha": "bbf8cb1c07025f936aeb3bd0082212e06ce6c581", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -13,7 +13,6 @@ pub use self::ClosureKind::*;\n use back::abi;\n use back::link::mangle_internal_name_by_path_and_seq;\n use llvm::ValueRef;\n-use middle::def;\n use middle::mem_categorization::Typer;\n use trans::adt;\n use trans::base::*;\n@@ -603,21 +602,10 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n \n pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                          closure_ty: Ty<'tcx>,\n-                                         def: def::Def,\n+                                         def_id: ast::DefId,\n                                          fn_ptr: ValueRef,\n-                                         is_local: bool) -> ValueRef {\n-\n-    let def_id = match def {\n-        def::DefFn(did, _) | def::DefStaticMethod(did, _) |\n-        def::DefVariant(_, did, _) | def::DefStruct(did) => did,\n-        _ => {\n-            ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\\n-                                    expected a statically resolved fn, got \\\n-                                    {}\",\n-                                    def).as_slice());\n-        }\n-    };\n-\n+                                         is_local: bool) -> ValueRef\n+{\n     match ccx.closure_bare_wrapper_cache().borrow().get(&fn_ptr) {\n         Some(&llval) => return llval,\n         None => {}\n@@ -697,11 +685,11 @@ pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n pub fn make_closure_from_bare_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                              closure_ty: Ty<'tcx>,\n-                                             def: def::Def,\n+                                             def_id: ast::DefId,\n                                              fn_ptr: ValueRef)\n                                              -> DatumBlock<'blk, 'tcx, Expr>  {\n     let scratch = rvalue_scratch_datum(bcx, closure_ty, \"__adjust\");\n-    let wrapper = get_wrapper_for_bare_fn(bcx.ccx(), closure_ty, def, fn_ptr, true);\n+    let wrapper = get_wrapper_for_bare_fn(bcx.ccx(), closure_ty, def_id, fn_ptr, true);\n     fill_fn_pair(bcx, scratch.val, wrapper, C_null(Type::i8p(bcx.ccx())));\n \n     DatumBlock::new(bcx, scratch.to_expr_datum())"}, {"sha": "1125a2aa529ea91d22eeb62dc29224fdc260ef46", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -190,16 +190,15 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n         None => { }\n         Some(adj) => {\n             match adj {\n-                ty::AdjustAddEnv(ty::RegionTraitStore(ty::ReStatic, _)) => {\n-                    let def = ty::resolve_expr(cx.tcx(), e);\n+                ty::AdjustAddEnv(def_id, ty::RegionTraitStore(ty::ReStatic, _)) => {\n                     let wrapper = closure::get_wrapper_for_bare_fn(cx,\n                                                                    ety_adjusted,\n-                                                                   def,\n+                                                                   def_id,\n                                                                    llconst,\n                                                                    true);\n                     llconst = C_struct(cx, &[wrapper, C_null(Type::i8p(cx))], false)\n                 }\n-                ty::AdjustAddEnv(store) => {\n+                ty::AdjustAddEnv(_, store) => {\n                     cx.sess()\n                       .span_bug(e.span,\n                                 format!(\"unexpected static function: {}\","}, {"sha": "3e3252a347dac58a8e414c09e679dd1854c8aea6", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -54,7 +54,7 @@ use trans::inline;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe};\n+use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustAddEnv, AutoUnsafe};\n use middle::ty::{AutoPtr};\n use middle::ty::{mod, Ty};\n use middle::ty::MethodCall;\n@@ -177,8 +177,9 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            datum.to_string(bcx.ccx()),\n            adjustment.repr(bcx.tcx()));\n     match adjustment {\n-        AdjustAddEnv(..) => {\n-            datum = unpack_datum!(bcx, add_env(bcx, expr, datum));\n+        AdjustAddEnv(def_id, _) => {\n+            datum = unpack_datum!(bcx, add_env(bcx, def_id, expr, datum));\n+        }\n         }\n         AdjustDerefRef(ref adj) => {\n             let (autoderefs, use_autoref) = match adj.autoref {\n@@ -466,6 +467,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     fn add_env<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                           def_id: ast::DefId,\n                            expr: &ast::Expr,\n                            datum: Datum<'tcx, Expr>)\n                            -> DatumBlock<'blk, 'tcx, Expr> {\n@@ -477,8 +479,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         let closure_ty = expr_ty_adjusted(bcx, expr);\n         let fn_ptr = datum.to_llscalarish(bcx);\n-        let def = ty::resolve_expr(bcx.tcx(), expr);\n-        closure::make_closure_from_bare_fn(bcx, closure_ty, def, fn_ptr)\n+        closure::make_closure_from_bare_fn(bcx, closure_ty, def_id, fn_ptr)\n     }\n }\n "}, {"sha": "e3c1e4b12bfd8dacd9d0addefae8e56b5e988b81", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -289,6 +289,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n \n         let dtor_ty = ty::mk_ctor_fn(bcx.tcx(),\n+                                     class_did,\n                                      &[get_drop_glue_type(bcx.ccx(), t)],\n                                      ty::mk_nil(bcx.tcx()));\n         let (_, variant_cx) = invoke(variant_cx, dtor_addr, args[], dtor_ty, None, false);"}, {"sha": "de7adda6bfd7fb9c431fcfd5d08d1594b97ef4f3", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -639,7 +639,8 @@ fn emit_vtable_methods<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                        m.repr(tcx),\n                        substs.repr(tcx));\n                 if m.generics.has_type_params(subst::FnSpace) ||\n-                   ty::type_has_self(ty::mk_bare_fn(tcx, m.fty.clone())) {\n+                    ty::type_has_self(ty::mk_bare_fn(tcx, None, m.fty.clone()))\n+                {\n                     debug!(\"(making impl vtable) method has self or type \\\n                             params: {}\",\n                            token::get_name(name));"}, {"sha": "cd711deabed5fb17eef6b7b20e2bf611a2ed5753", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -954,7 +954,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                     tcx.sess.span_err(ast_ty.span,\n                                       \"variadic function must have C calling convention\");\n                 }\n-                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl))\n+                ty::mk_bare_fn(tcx, None, ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl))\n             }\n             ast::TyClosure(ref f) => {\n                 // Use corresponding trait store to figure out default bounds"}, {"sha": "10801563f61d2e6c7b10690efcaa1730e0298c7f", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -113,7 +113,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         self.add_obligations(&pick, &method_bounds_substs, &method_bounds);\n \n         // Create the final `MethodCallee`.\n-        let fty = ty::mk_bare_fn(self.tcx(), ty::BareFnTy {\n+        let fty = ty::mk_bare_fn(self.tcx(), None, ty::BareFnTy {\n             sig: ty::Binder(method_sig),\n             unsafety: pick.method_ty.fty.unsafety,\n             abi: pick.method_ty.fty.abi.clone(),"}, {"sha": "af5434e94fe9531f1a40dae34919392b917924ef", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -199,7 +199,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n                                                                        infer::FnCall,\n                                                                        &fn_sig).0;\n     let transformed_self_ty = fn_sig.inputs[0];\n-    let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n+    let fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy {\n         sig: ty::Binder(fn_sig),\n         unsafety: bare_fn_ty.unsafety,\n         abi: bare_fn_ty.abi.clone(),"}, {"sha": "7078f1e58c757b3b1acb5d64f7356dee6fe34792", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -1132,9 +1132,9 @@ fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n \n     // Compute skolemized form of impl and trait method tys.\n-    let impl_fty = ty::mk_bare_fn(tcx, impl_m.fty.clone());\n+    let impl_fty = ty::mk_bare_fn(tcx, None, impl_m.fty.clone());\n     let impl_fty = impl_fty.subst(tcx, &impl_to_skol_substs);\n-    let trait_fty = ty::mk_bare_fn(tcx, trait_m.fty.clone());\n+    let trait_fty = ty::mk_bare_fn(tcx, None, trait_m.fty.clone());\n     let trait_fty = trait_fty.subst(tcx, &trait_to_skol_substs);\n \n     // Check the impl method type IM is a subtype of the trait method\n@@ -1389,14 +1389,18 @@ fn check_cast(fcx: &FnCtxt,\n         }, t_e, None);\n     }\n \n+    let t_e_is_bare_fn_item = ty::type_is_bare_fn_item(t_e);\n+\n     let t_1_is_scalar = ty::type_is_scalar(t_1);\n     let t_1_is_char = ty::type_is_char(t_1);\n     let t_1_is_bare_fn = ty::type_is_bare_fn(t_1);\n     let t_1_is_float = ty::type_is_floating_point(t_1);\n \n     // casts to scalars other than `char` and `bare fn` are trivial\n     let t_1_is_trivial = t_1_is_scalar && !t_1_is_char && !t_1_is_bare_fn;\n-    if ty::type_is_c_like_enum(fcx.tcx(), t_e) && t_1_is_trivial {\n+    if t_e_is_bare_fn_item && t_1_is_bare_fn {\n+        demand::coerce(fcx, e.span, t_1, &*e);\n+    } else if ty::type_is_c_like_enum(fcx.tcx(), t_e) && t_1_is_trivial {\n         if t_1_is_float || ty::type_is_unsafe_ptr(t_1) {\n             fcx.type_error_message(span, |actual| {\n                 format!(\"illegal cast; cast through an \\\n@@ -1634,7 +1638,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        span: Span,\n                                        adj: &ty::AutoAdjustment<'tcx>) {\n         match *adj {\n-            ty::AdjustAddEnv(..) => { }\n+            ty::AdjustAddEnv(..) |\n+            ty::AdjustReifyFnPointer(..) => {\n+            }\n             ty::AdjustDerefRef(ref d_r) => {\n                 match d_r.autoref {\n                     Some(ref a_r) => {\n@@ -5627,7 +5633,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n         };\n         (n_tps, inputs, ty::FnConverging(output))\n     };\n-    let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n+    let fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy {\n         unsafety: ast::Unsafety::Unsafe,\n         abi: abi::RustIntrinsic,\n         sig: ty::Binder(FnSig {"}, {"sha": "b123d97d8970c42945f1ed8142defbd951ba8de2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -15,7 +15,6 @@ use self::ResolveReason::*;\n \n use astconv::AstConv;\n use check::FnCtxt;\n-use middle::def;\n use middle::pat_util;\n use middle::ty::{mod, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n@@ -267,25 +266,12 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             Some(adjustment) => {\n                 let adj_object = ty::adjust_is_object(&adjustment);\n                 let resolved_adjustment = match adjustment {\n-                    ty::AdjustAddEnv(store) => {\n-                        // FIXME(eddyb) #2190 Allow only statically resolved\n-                        // bare functions to coerce to a closure to avoid\n-                        // constructing (slower) indirect call wrappers.\n-                        match self.tcx().def_map.borrow().get(&id) {\n-                            Some(&def::DefFn(..)) |\n-                            Some(&def::DefStaticMethod(..)) |\n-                            Some(&def::DefVariant(..)) |\n-                            Some(&def::DefStruct(_)) => {\n-                            }\n-                            _ => {\n-                                span_err!(self.tcx().sess, reason.span(self.tcx()), E0100,\n-                                    \"cannot coerce non-statically resolved bare fn to closure\");\n-                                span_help!(self.tcx().sess, reason.span(self.tcx()),\n-                                    \"consider embedding the function in a closure\");\n-                            }\n-                        }\n+                    ty::AdjustAddEnv(def_id, store) => {\n+                        ty::AdjustAddEnv(def_id, self.resolve(&store, reason))\n+                    }\n \n-                        ty::AdjustAddEnv(self.resolve(&store, reason))\n+                    ty::AdjustReifyFnPointer(def_id) => {\n+                        ty::AdjustReifyFnPointer(def_id)\n                     }\n \n                     ty::AdjustDerefRef(adj) => {"}, {"sha": "bba6af958459495b0848883ed0fa9ebbbd7d5441", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -235,7 +235,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             // impl, plus its own.\n             let new_polytype = ty::Polytype {\n                 generics: new_method_ty.generics.clone(),\n-                ty: ty::mk_bare_fn(tcx, new_method_ty.fty.clone())\n+                ty: ty::mk_bare_fn(tcx, Some(new_did), new_method_ty.fty.clone())\n             };\n             debug!(\"new_polytype={}\", new_polytype.repr(tcx));\n "}, {"sha": "af996da5543dddc3ff2430bb1a5b88dda4ef022a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -211,13 +211,15 @@ pub fn get_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     // Create a set of parameter types shared among all the variants.\n     for variant in variants.iter() {\n+        let variant_def_id = local_def(variant.node.id);\n+\n         // Nullary enum constructors get turned into constants; n-ary enum\n         // constructors get turned into functions.\n         let result_ty = match variant.node.kind {\n             ast::TupleVariantKind(ref args) if args.len() > 0 => {\n                 let rs = ExplicitRscope;\n                 let input_tys: Vec<_> = args.iter().map(|va| ccx.to_ty(&rs, &*va.ty)).collect();\n-                ty::mk_ctor_fn(tcx, input_tys.as_slice(), enum_ty)\n+                ty::mk_ctor_fn(tcx, variant_def_id, input_tys.as_slice(), enum_ty)\n             }\n \n             ast::TupleVariantKind(_) => {\n@@ -246,7 +248,7 @@ pub fn get_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty: result_ty\n         };\n \n-        tcx.tcache.borrow_mut().insert(local_def(variant.node.id), pty);\n+        tcx.tcache.borrow_mut().insert(variant_def_id, pty);\n \n         write_ty_to_tcx(tcx, variant.node.id, result_ty);\n     }\n@@ -353,7 +355,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             m.def_id,\n             Polytype {\n                 generics: m.generics.clone(),\n-                ty: ty::mk_bare_fn(ccx.tcx, m.fty.clone()) });\n+                ty: ty::mk_bare_fn(ccx.tcx, Some(m.def_id), m.fty.clone()) });\n     }\n \n     fn ty_method_of_trait_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n@@ -519,20 +521,21 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n             tcx.sess.span_err(m.span, \"duplicate method in trait impl\");\n         }\n \n+        let m_def_id = local_def(m.id);\n         let mty = Rc::new(ty_of_method(ccx,\n                                        convert_method_context,\n                                        container,\n                                        m,\n                                        untransformed_rcvr_ty,\n                                        rcvr_ty_generics,\n                                        rcvr_visibility));\n-        let fty = ty::mk_bare_fn(tcx, mty.fty.clone());\n+        let fty = ty::mk_bare_fn(tcx, Some(m_def_id), mty.fty.clone());\n         debug!(\"method {} (id {}) has type {}\",\n                 m.pe_ident().repr(tcx),\n                 m.id,\n                 fty.repr(tcx));\n         tcx.tcache.borrow_mut().insert(\n-            local_def(m.id),\n+            m_def_id,\n             Polytype {\n                 generics: mty.generics.clone(),\n                 ty: fty\n@@ -1279,6 +1282,7 @@ pub fn convert_struct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         |field| (*tcx.tcache.borrow())[\n                             local_def(field.node.id)].ty).collect();\n                 let ctor_fn_ty = ty::mk_ctor_fn(tcx,\n+                                                local_def(ctor_id),\n                                                 inputs.as_slice(),\n                                                 selfty);\n                 write_ty_to_tcx(tcx, ctor_id, ctor_fn_ty);\n@@ -1461,7 +1465,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n             };\n             let pty = Polytype {\n                 generics: ty_generics,\n-                ty: ty::mk_bare_fn(ccx.tcx, tofd)\n+                ty: ty::mk_bare_fn(ccx.tcx, Some(local_def(it.id)), tofd)\n             };\n             debug!(\"type of {} (id {}) is {}\",\n                     token::get_ident(it.ident),\n@@ -2138,6 +2142,7 @@ pub fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let t_fn = ty::mk_bare_fn(\n         ccx.tcx,\n+        None,\n         ty::BareFnTy {\n             abi: abi,\n             unsafety: ast::Unsafety::Unsafe,"}, {"sha": "c30293e4765c0f5ab267adbdcd2f2074eaa2a2b6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46099575a304ae9032f45c7921b496c4d220697/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f46099575a304ae9032f45c7921b496c4d220697", "patch": "@@ -102,6 +102,7 @@ use util::ppaux;\n use syntax::codemap::Span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};\n+use syntax::ast_util::local_def;\n \n #[cfg(stage0)]\n mod diagnostics;\n@@ -224,7 +225,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 }\n                 _ => ()\n             }\n-            let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n+            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(main_id)), ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -272,7 +273,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n \n-            let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n+            let se_ty = ty::mk_bare_fn(tcx, Some(local_def(start_id)), ty::BareFnTy {\n                 unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::Binder(ty::FnSig {"}]}