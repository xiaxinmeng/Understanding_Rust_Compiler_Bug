{"sha": "fcf15cc05afaeda6880664777ff2a3db342ea088", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjE1Y2MwNWFmYWVkYTY4ODA2NjQ3NzdmZjJhM2RiMzQyZWEwODg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T10:54:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T10:54:32Z"}, "message": "Merge #3169\n\n3169: Show record field names in Enum completion r=flodiebold a=adamrk\n\nAdresses https://github.com/rust-analyzer/rust-analyzer/issues/2947.\r\nPreviously the details shown when autocompleting an Enum variant would look like the variant was a tuple even if it was a record:\r\n![2020-02-16-15:59:32_crop](https://user-images.githubusercontent.com/16367467/74607233-64f21980-50d7-11ea-99db-e973e29c71d7.png)\r\n\r\nThis change will show the names of the fields for a record and use curly braces instead of parentheses:\r\n![2020-02-16-15:33:00_crop](https://user-images.githubusercontent.com/16367467/74607251-8ce17d00-50d7-11ea-9d4d-38d198a4aec0.png)\r\n\r\nThis required exposing the type `adt::StructKind` from `ra_hir` and adding a function \r\n```\r\nkind(self, db: &impl HirDatabase) -> StructKind\r\n```\r\nin the `impl` of `EnumVariant`. \r\n\r\nThere was also a previously existing function `is_unit(self, db: &impl HirDatabase) -> bool` for `EnumVariant` which I removed because it seemed redundant after adding `kind`.\n\nCo-authored-by: adamrk <ark.email@gmail.com>", "tree": {"sha": "ac34e90a9884d7166daa5022ea402196483c26c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac34e90a9884d7166daa5022ea402196483c26c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf15cc05afaeda6880664777ff2a3db342ea088", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSnDoCRBK7hj4Ov3rIwAAdHIIAEnHqCc9h6dMCpC7u3T3nYZS\nM5JNBEl3NkPMUna4ilgAUsVFv3cn1Y3UC2yh+iGHn9G34SrrbWYws9+/+9UL3rSZ\njjxA7P69+U+DIN+cr7qaoEMyRSPunJU1SH7JqnInkwtZe88X9Gih4WPOtDDvcL3x\nawcPJPNVGqnOLvi+AjZCTKVkRzeP6vJygT5orlmIQadzp0PHgWvHDnr89F0mtY6I\nnarzUqsPXGU9RoOTThm3cjBmUETfG9TT5hVycb38QBHie/aTPJZGZsmVomfjg3V+\n1qIMmcT2DmV5/NoD1+cB68q0cO0dGMz46C1AOlCZ5q248izHZddGcigSxPy1fpg=\n=Ug46\n-----END PGP SIGNATURE-----\n", "payload": "tree ac34e90a9884d7166daa5022ea402196483c26c0\nparent 334f53465f5baf5094844ab3ca2d28e477d07b24\nparent 0e260aa6b15d9dc8c067adb05f3774aec3fb66ec\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581936872 +0000\ncommitter GitHub <noreply@github.com> 1581936872 +0000\n\nMerge #3169\n\n3169: Show record field names in Enum completion r=flodiebold a=adamrk\n\nAdresses https://github.com/rust-analyzer/rust-analyzer/issues/2947.\r\nPreviously the details shown when autocompleting an Enum variant would look like the variant was a tuple even if it was a record:\r\n![2020-02-16-15:59:32_crop](https://user-images.githubusercontent.com/16367467/74607233-64f21980-50d7-11ea-99db-e973e29c71d7.png)\r\n\r\nThis change will show the names of the fields for a record and use curly braces instead of parentheses:\r\n![2020-02-16-15:33:00_crop](https://user-images.githubusercontent.com/16367467/74607251-8ce17d00-50d7-11ea-9d4d-38d198a4aec0.png)\r\n\r\nThis required exposing the type `adt::StructKind` from `ra_hir` and adding a function \r\n```\r\nkind(self, db: &impl HirDatabase) -> StructKind\r\n```\r\nin the `impl` of `EnumVariant`. \r\n\r\nThere was also a previously existing function `is_unit(self, db: &impl HirDatabase) -> bool` for `EnumVariant` which I removed because it seemed redundant after adding `kind`.\n\nCo-authored-by: adamrk <ark.email@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf15cc05afaeda6880664777ff2a3db342ea088", "html_url": "https://github.com/rust-lang/rust/commit/fcf15cc05afaeda6880664777ff2a3db342ea088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf15cc05afaeda6880664777ff2a3db342ea088/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "334f53465f5baf5094844ab3ca2d28e477d07b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/334f53465f5baf5094844ab3ca2d28e477d07b24", "html_url": "https://github.com/rust-lang/rust/commit/334f53465f5baf5094844ab3ca2d28e477d07b24"}, {"sha": "0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec", "html_url": "https://github.com/rust-lang/rust/commit/0e260aa6b15d9dc8c067adb05f3774aec3fb66ec"}], "stats": {"total": 125, "additions": 111, "deletions": 14}, "files": [{"sha": "b6adb7589df5a6c62820b433625c4daa74e70b49", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=fcf15cc05afaeda6880664777ff2a3db342ea088", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_def::{\n+    adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n@@ -424,6 +425,10 @@ impl EnumVariant {\n             .collect()\n     }\n \n+    pub fn kind(self, db: &impl HirDatabase) -> StructKind {\n+        self.variant_data(db).kind()\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n     }"}, {"sha": "7a9745ebebc5619bec8ed894fd0c1909fe0c5698", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=fcf15cc05afaeda6880664777ff2a3db342ea088", "patch": "@@ -50,6 +50,7 @@ pub use crate::{\n };\n \n pub use hir_def::{\n+    adt::StructKind,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,"}, {"sha": "985f409e873936f013f58702b26b40beb077a5aa", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=fcf15cc05afaeda6880664777ff2a3db342ea088", "patch": "@@ -140,10 +140,11 @@ impl VariantData {\n         self.fields().iter().find_map(|(id, data)| if &data.name == name { Some(id) } else { None })\n     }\n \n-    pub fn is_unit(&self) -> bool {\n+    pub fn kind(&self) -> StructKind {\n         match self {\n-            VariantData::Unit => true,\n-            _ => false,\n+            VariantData::Record(_) => StructKind::Record,\n+            VariantData::Tuple(_) => StructKind::Tuple,\n+            VariantData::Unit => StructKind::Unit,\n         }\n     }\n }\n@@ -173,7 +174,7 @@ impl HasChildSource for VariantId {\n     }\n }\n \n-enum StructKind {\n+pub enum StructKind {\n     Tuple,\n     Record,\n     Unit,"}, {"sha": "c2a3703fab573bac6f36dd14bf4ecfb68517a055", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=fcf15cc05afaeda6880664777ff2a3db342ea088", "patch": "@@ -9,6 +9,7 @@ use std::iter;\n use std::sync::Arc;\n \n use hir_def::{\n+    adt::StructKind,\n     builtin_type::BuiltinType,\n     generics::{TypeParamProvenance, WherePredicate, WherePredicateTarget},\n     path::{GenericArg, Path, PathSegment, PathSegments},\n@@ -805,8 +806,8 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFn\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n     let struct_data = db.struct_data(def.into());\n-    if struct_data.variant_data.is_unit() {\n-        return type_for_adt(db, def.into()); // Unit struct\n+    if let StructKind::Unit = struct_data.variant_data.kind() {\n+        return type_for_adt(db, def.into());\n     }\n     let generics = generics(db, def.into());\n     let substs = Substs::bound_vars(&generics);\n@@ -830,8 +831,8 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId\n fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> Binders<Ty> {\n     let enum_data = db.enum_data(def.parent);\n     let var_data = &enum_data.variants[def.local_id].variant_data;\n-    if var_data.is_unit() {\n-        return type_for_adt(db, def.parent.into()); // Unit variant\n+    if let StructKind::Unit = var_data.kind() {\n+        return type_for_adt(db, def.parent.into());\n     }\n     let generics = generics(db, def.parent.into());\n     let substs = Substs::bound_vars(&generics);"}, {"sha": "1a3bcffaeb20bce5b5e4cdbcda3312d4f5de2a20", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf15cc05afaeda6880664777ff2a3db342ea088/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=fcf15cc05afaeda6880664777ff2a3db342ea088", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, Type};\n+use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n@@ -268,11 +268,22 @@ impl Completions {\n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = variant.name(ctx.db);\n-        let detail_types = variant.fields(ctx.db).into_iter().map(|field| field.ty(ctx.db));\n-        let detail = join(detail_types.map(|t| t.display(ctx.db).to_string()))\n-            .separator(\", \")\n-            .surround_with(\"(\", \")\")\n-            .to_string();\n+        let detail_types =\n+            variant.fields(ctx.db).into_iter().map(|field| (field.name(ctx.db), field.ty(ctx.db)));\n+        let detail = match variant.kind(ctx.db) {\n+            StructKind::Tuple | StructKind::Unit => {\n+                join(detail_types.map(|(_, t)| t.display(ctx.db).to_string()))\n+                    .separator(\", \")\n+                    .surround_with(\"(\", \")\")\n+                    .to_string()\n+            }\n+            StructKind::Record => {\n+                join(detail_types.map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string())))\n+                    .separator(\", \")\n+                    .surround_with(\"{ \", \" }\")\n+                    .to_string()\n+            }\n+        };\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)\n             .set_documentation(variant.docs(ctx.db))\n@@ -297,6 +308,84 @@ mod tests {\n         do_completion(code, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn enum_detail_includes_names_for_record() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo {x: i32, y: i32}\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [121; 123),\n+                delete: [121; 123),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"{ x: i32, y: i32 }\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn enum_detail_doesnt_include_names_for_tuple() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo (i32, i32)\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [115; 117),\n+                delete: [115; 117),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"(i32, i32)\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn enum_detail_just_parentheses_for_unit() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [104; 106),\n+                delete: [104; 106),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n     #[test]\n     fn sets_deprecated_flag_in_completion_items() {\n         assert_debug_snapshot!("}]}