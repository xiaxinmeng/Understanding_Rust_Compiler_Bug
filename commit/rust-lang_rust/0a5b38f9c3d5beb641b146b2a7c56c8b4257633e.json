{"sha": "0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNWIzOGY5YzNkNWJlYjY0MWIxNDZiMmE3YzU2YzhiNDI1NzYzM2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-11T12:01:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-25T02:38:42Z"}, "message": "move Attribute::with_desugared_doc to librustdoc", "tree": {"sha": "4b73662a7d501accb789d3bdbb15b656da94af96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b73662a7d501accb789d3bdbb15b656da94af96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "html_url": "https://github.com/rust-lang/rust/commit/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a52c25cad963986cace7a22c167363afca0d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a52c25cad963986cace7a22c167363afca0d74", "html_url": "https://github.com/rust-lang/rust/commit/10a52c25cad963986cace7a22c167363afca0d74"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "d8216fbf79659ae343536db11c0bc88160b62678", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "patch": "@@ -26,9 +26,10 @@ use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n-use syntax::ast::{self, AttrStyle, Ident};\n+use syntax::ast::{self, Attribute, AttrStyle, AttrItem, Ident};\n use syntax::attr;\n use syntax_expand::base::MacroKind;\n+use syntax::parse::lexer::comments;\n use syntax::source_map::DUMMY_SP;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::{self, Pos, FileName};\n@@ -858,8 +859,31 @@ impl Attributes {\n         let mut cfg = Cfg::True;\n         let mut doc_line = 0;\n \n+        /// Converts `self` to a normal `#[doc=\"foo\"]` comment, if it is a\n+        /// comment like `///` or `/** */`. (Returns `self` unchanged for\n+        /// non-sugared doc attributes.)\n+        pub fn with_desugared_doc<T>(attr: &Attribute, f: impl FnOnce(&Attribute) -> T) -> T {\n+            if attr.is_sugared_doc {\n+                let comment = attr.value_str().unwrap();\n+                let meta = attr::mk_name_value_item_str(\n+                    Ident::with_dummy_span(sym::doc),\n+                    Symbol::intern(&comments::strip_doc_comment_decoration(&comment.as_str())),\n+                    DUMMY_SP,\n+                );\n+                f(&Attribute {\n+                    item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n+                    id: attr.id,\n+                    style: attr.style,\n+                    is_sugared_doc: true,\n+                    span: attr.span,\n+                })\n+            } else {\n+                f(attr)\n+            }\n+        }\n+\n         let other_attrs = attrs.iter().filter_map(|attr| {\n-            attr.with_desugared_doc(|attr| {\n+            with_desugared_doc(attr, |attr| {\n                 if attr.check_name(sym::doc) {\n                     if let Some(mi) = attr.meta() {\n                         if let Some(value) = mi.value_str() {"}, {"sha": "27de084ae98ca25fc688eddc3d42f261c18721c3", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "patch": "@@ -13,8 +13,8 @@ use crate::ast::{AttrItem, AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n-use crate::source_map::{BytePos, Spanned, DUMMY_SP};\n-use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use crate::source_map::{BytePos, Spanned};\n+use crate::parse::lexer::comments::doc_comment_style;\n use crate::parse::parser::Parser;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token};\n@@ -312,31 +312,6 @@ impl Attribute {\n             span: self.span,\n         })\n     }\n-\n-    /// Converts `self` to a normal `#[doc=\"foo\"]` comment, if it is a\n-    /// comment like `///` or `/** */`. (Returns `self` unchanged for\n-    /// non-sugared doc attributes.)\n-    pub fn with_desugared_doc<T, F>(&self, f: F) -> T where\n-        F: FnOnce(&Attribute) -> T,\n-    {\n-        if self.is_sugared_doc {\n-            let comment = self.value_str().unwrap();\n-            let meta = mk_name_value_item_str(\n-                Ident::with_dummy_span(sym::doc),\n-                Symbol::intern(&strip_doc_comment_decoration(&comment.as_str())),\n-                DUMMY_SP,\n-            );\n-            f(&Attribute {\n-                item: AttrItem { path: meta.path, tokens: meta.kind.tokens(meta.span) },\n-                id: self.id,\n-                style: self.style,\n-                is_sugared_doc: true,\n-                span: self.span,\n-            })\n-        } else {\n-            f(self)\n-        }\n-    }\n }\n \n /* Constructors */"}, {"sha": "ac79ce323bf97ef36e903f2ec4e31f79ff424722", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "patch": "@@ -176,7 +176,7 @@ fn split_block_comment_into_lines(\n \n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n-pub fn gather_comments(sess: &ParseSess, path: FileName, src: String) -> Vec<Comment> {\n+crate fn gather_comments(sess: &ParseSess, path: FileName, src: String) -> Vec<Comment> {\n     let cm = SourceMap::new(sess.source_map().path_mapping().clone());\n     let source_file = cm.new_source_file(path, src);\n     let text = (*source_file.src.as_ref().unwrap()).clone();"}, {"sha": "853723de14f44b2b7870f369b5dccedd5c8a26f6", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5b38f9c3d5beb641b146b2a7c56c8b4257633e/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=0a5b38f9c3d5beb641b146b2a7c56c8b4257633e", "patch": "@@ -1,8 +1,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::Span;\n \n+use super::{StringReader, UnmatchedBrace};\n+\n use crate::print::pprust::token_to_string;\n-use crate::parse::lexer::{StringReader, UnmatchedBrace};\n use crate::parse::token::{self, Token};\n use crate::parse::PResult;\n use crate::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};"}]}