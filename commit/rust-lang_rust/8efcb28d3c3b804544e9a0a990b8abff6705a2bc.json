{"sha": "8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "node_id": "C_kwDOAAsO6NoAKDhlZmNiMjhkM2MzYjgwNDU0NGU5YTBhOTkwYjhhYmZmNjcwNWEyYmM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-08T03:21:13Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-08T03:21:13Z"}, "message": "Do fix_*_builtin_expr hacks on the writeback results", "tree": {"sha": "a5296d1b174ab03aadf4734b06d86074fca36c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5296d1b174ab03aadf4734b06d86074fca36c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "html_url": "https://github.com/rust-lang/rust/commit/8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8efcb28d3c3b804544e9a0a990b8abff6705a2bc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f383703e32dc583468a702213eff63c58c7f9ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f383703e32dc583468a702213eff63c58c7f9ef5", "html_url": "https://github.com/rust-lang/rust/commit/f383703e32dc583468a702213eff63c58c7f9ef5"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "a395858262f04b3970ffc1041db84d6f50f5d31d", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8efcb28d3c3b804544e9a0a990b8abff6705a2bc/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efcb28d3c3b804544e9a0a990b8abff6705a2bc/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt};\n-use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -148,31 +147,25 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         match e.kind {\n             hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {\n-                let inner_ty = self.fcx.node_ty(inner.hir_id);\n-                let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);\n+                let inner_ty = self.typeck_results.node_type(inner.hir_id);\n \n                 if inner_ty.is_scalar() {\n-                    let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n                 }\n             }\n             hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {\n-                let lhs_ty = self.fcx.node_ty(lhs.hir_id);\n-                let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);\n-\n-                let rhs_ty = self.fcx.node_ty(rhs.hir_id);\n-                let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);\n+                let lhs_ty = self.typeck_results.node_type(lhs.hir_id);\n+                let rhs_ty = self.typeck_results.node_type(rhs.hir_id);\n \n                 if lhs_ty.is_scalar() && rhs_ty.is_scalar() {\n-                    let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n \n                     match e.kind {\n                         hir::ExprKind::Binary(..) => {\n                             if !op.node.is_by_value() {\n-                                let mut adjustments = typeck_results.adjustments_mut();\n+                                let mut adjustments = self.typeck_results.adjustments_mut();\n                                 if let Some(a) = adjustments.get_mut(lhs.hir_id) {\n                                     a.pop();\n                                 }\n@@ -182,7 +175,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                             }\n                         }\n                         hir::ExprKind::AssignOp(..)\n-                            if let Some(a) = typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>\n+                            if let Some(a) = self.typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>\n                         {\n                             a.pop();\n                         }\n@@ -200,16 +193,14 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // if they are not we don't modify the expr, hence we bypass the ICE\n     fn is_builtin_index(\n         &mut self,\n-        typeck_results: &TypeckResults<'tcx>,\n         e: &hir::Expr<'_>,\n         base_ty: Ty<'tcx>,\n         index_ty: Ty<'tcx>,\n     ) -> bool {\n-        if let Some(elem_ty) = base_ty.builtin_index() {\n-            let Some(exp_ty) = typeck_results.expr_ty_opt(e) else {return false;};\n-            let resolved_exp_ty = self.resolve(exp_ty, &e.span);\n-\n-            elem_ty == resolved_exp_ty && index_ty == self.fcx.tcx.types.usize\n+        if let Some(elem_ty) = base_ty.builtin_index()\n+            && let Some(exp_ty) = self.typeck_results.expr_ty_opt(e)\n+        {\n+            elem_ty == exp_ty && index_ty == self.fcx.tcx.types.usize\n         } else {\n             false\n         }\n@@ -221,38 +212,34 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // usize-ish\n     fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         if let hir::ExprKind::Index(ref base, ref index) = e.kind {\n-            let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n-\n             // All valid indexing looks like this; might encounter non-valid indexes at this point.\n-            let base_ty = typeck_results\n-                .expr_ty_adjusted_opt(base)\n-                .map(|t| self.fcx.resolve_vars_if_possible(t).kind());\n+            let base_ty = self.typeck_results.expr_ty_adjusted_opt(base);\n             if base_ty.is_none() {\n                 // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n                 // that isn't in the type table. We assume more relevant errors have already been\n                 // emitted, so we delay an ICE if none have. (#64638)\n                 self.tcx().sess.delay_span_bug(e.span, format!(\"bad base: `{:?}`\", base));\n             }\n-            if let Some(ty::Ref(_, base_ty, _)) = base_ty {\n-                let index_ty = typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {\n-                    // When encountering `return [0][0]` outside of a `fn` body we would attempt\n-                    // to access an nonexistent index. We assume that more relevant errors will\n-                    // already have been emitted, so we only gate on this with an ICE if no\n-                    // error has been emitted. (#64638)\n-                    self.fcx.tcx.ty_error_with_message(\n-                        e.span,\n-                        format!(\"bad index {:?} for base: `{:?}`\", index, base),\n-                    )\n-                });\n-                let index_ty = self.fcx.resolve_vars_if_possible(index_ty);\n-                let resolved_base_ty = self.resolve(*base_ty, &base.span);\n-\n-                if self.is_builtin_index(&typeck_results, e, resolved_base_ty, index_ty) {\n+            if let Some(base_ty) = base_ty\n+                && let ty::Ref(_, base_ty_inner, _) = *base_ty.kind()\n+            {\n+                let index_ty =\n+                    self.typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {\n+                        // When encountering `return [0][0]` outside of a `fn` body we would attempt\n+                        // to access an nonexistent index. We assume that more relevant errors will\n+                        // already have been emitted, so we only gate on this with an ICE if no\n+                        // error has been emitted. (#64638)\n+                        self.fcx.tcx.ty_error_with_message(\n+                            e.span,\n+                            format!(\"bad index {:?} for base: `{:?}`\", index, base),\n+                        )\n+                    });\n+                if self.is_builtin_index(e, base_ty_inner, index_ty) {\n                     // Remove the method call record\n-                    typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n-                    typeck_results.node_substs_mut().remove(e.hir_id);\n+                    self.typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n+                    self.typeck_results.node_substs_mut().remove(e.hir_id);\n \n-                    if let Some(a) = typeck_results.adjustments_mut().get_mut(base.hir_id) {\n+                    if let Some(a) = self.typeck_results.adjustments_mut().get_mut(base.hir_id) {\n                         // Discard the need for a mutable borrow\n \n                         // Extra adjustment made when indexing causes a drop\n@@ -283,9 +270,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.fix_scalar_builtin_expr(e);\n-        self.fix_index_builtin_expr(e);\n-\n         match e.kind {\n             hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body);\n@@ -314,6 +298,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n \n         self.visit_node_id(e.span, e.hir_id);\n         intravisit::walk_expr(self, e);\n+\n+        self.fix_scalar_builtin_expr(e);\n+        self.fix_index_builtin_expr(e);\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {"}, {"sha": "2443e517813917f2ca42b0cbe0e360876b553fa7", "filename": "tests/ui/traits/new-solver/normalized-const-built-in-op.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8efcb28d3c3b804544e9a0a990b8abff6705a2bc/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8efcb28d3c3b804544e9a0a990b8abff6705a2bc/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalized-const-built-in-op.rs?ref=8efcb28d3c3b804544e9a0a990b8abff6705a2bc", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+const fn foo() {\n+    let mut x = [1, 2, 3];\n+    // We need to fix up `<<[i32; 3] as Index<usize>>::Output as AddAssign>`\n+    // to be treated like a built-in operation.\n+    x[1] += 5;\n+}\n+\n+fn main() {}"}]}