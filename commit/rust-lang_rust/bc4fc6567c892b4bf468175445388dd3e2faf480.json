{"sha": "bc4fc6567c892b4bf468175445388dd3e2faf480", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGZjNjU2N2M4OTJiNGJmNDY4MTc1NDQ1Mzg4ZGQzZTJmYWY0ODA=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2016-11-05T23:26:57Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2016-11-09T03:03:08Z"}, "message": "Add documentation for many of the atomic_* intrinsics\n\nPart of #34338", "tree": {"sha": "de2c616303b3dccc5c57793b024d474cd838780c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2c616303b3dccc5c57793b024d474cd838780c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4fc6567c892b4bf468175445388dd3e2faf480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4fc6567c892b4bf468175445388dd3e2faf480", "html_url": "https://github.com/rust-lang/rust/commit/bc4fc6567c892b4bf468175445388dd3e2faf480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4fc6567c892b4bf468175445388dd3e2faf480/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0491a231777735ba050c208ce621df93f863bf7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0491a231777735ba050c208ce621df93f863bf7c", "html_url": "https://github.com/rust-lang/rust/commit/0491a231777735ba050c208ce621df93f863bf7c"}], "stats": {"total": 396, "additions": 396, "deletions": 0}, "files": [{"sha": "ea5544221c9bd1283f1eda6f7661a9eab6e9097b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/bc4fc6567c892b4bf468175445388dd3e2faf480/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4fc6567c892b4bf468175445388dd3e2faf480/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=bc4fc6567c892b4bf468175445388dd3e2faf480", "patch": "@@ -51,76 +51,472 @@ extern \"rust-intrinsic\" {\n     // NB: These intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n \n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load<T>(src: *const T) -> T;\n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_acq<T>(src: *const T) -> T;\n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_relaxed<T>(src: *const T) -> T;\n     pub fn atomic_load_unordered<T>(src: *const T) -> T;\n \n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store<T>(dst: *mut T, val: T);\n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_rel<T>(dst: *mut T, val: T);\n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_relaxed<T>(dst: *mut T, val: T);\n     pub fn atomic_store_unordered<T>(dst: *mut T, val: T);\n \n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     pub fn atomic_max<T>(dst: *mut T, src: T) -> T;"}]}