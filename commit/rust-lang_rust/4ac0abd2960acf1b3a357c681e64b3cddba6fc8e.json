{"sha": "4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzBhYmQyOTYwYWNmMWIzYTM1N2M2ODFlNjRiM2NkZGJhNmZjOGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T22:01:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T22:01:08Z"}, "message": "Snippetify unwrap -> match", "tree": {"sha": "bef3928f908fd9dec53eae60303f6abfe32ffd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef3928f908fd9dec53eae60303f6abfe32ffd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "html_url": "https://github.com/rust-lang/rust/commit/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8300132ed0676496ec4adda49eb682ac24bdb5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8300132ed0676496ec4adda49eb682ac24bdb5b9", "html_url": "https://github.com/rust-lang/rust/commit/8300132ed0676496ec4adda49eb682ac24bdb5b9"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "cff7dfb81215a29415cbc1e6b575a93b29c04b0f", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "patch": "@@ -9,7 +9,10 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{render_snippet, Cursor, TryEnum},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: replace_unwrap_with_match\n //\n@@ -29,7 +32,7 @@ use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n //     let x: Result<i32, i32> = Result::Ok(92);\n //     let y = match x {\n //         Ok(a) => a,\n-//         _ => unreachable!(),\n+//         $0_ => unreachable!(),\n //     };\n // }\n // ```\n@@ -43,7 +46,7 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();\n-    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |edit| {\n+    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |builder| {\n         let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n         let it = make::bind_pat(make::name(\"a\")).into();\n         let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n@@ -58,16 +61,30 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         let match_expr = make::expr_match(caller.clone(), match_arm_list)\n             .indent(IndentLevel::from_node(method_call.syntax()));\n \n-        edit.set_cursor(caller.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+        let range = method_call.syntax().text_range();\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let err_arm = match_expr\n+                    .syntax()\n+                    .descendants()\n+                    .filter_map(ast::MatchArm::cast)\n+                    .last()\n+                    .unwrap();\n+                let snippet =\n+                    render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n+                builder.replace_snippet(cap, range, snippet)\n+            }\n+            None => builder.replace(range, match_expr.to_string()),\n+        }\n     })\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::tests::{check_assist, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_replace_result_unwrap_with_match() {\n         check_assist(\n@@ -85,9 +102,9 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n             \",\n@@ -111,9 +128,9 @@ enum Option<T> { Some(T), None }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x = Option::Some(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Some(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n             \",\n@@ -137,9 +154,9 @@ enum Result<T, E> { Ok(T), Err(E) }\n fn i<T>(a: T) -> T { a }\n fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n-    let y = <|>match i(x) {\n+    let y = match i(x) {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     }.count_zeroes();\n }\n             \","}, {"sha": "250e56a6962468193c3abe38681e596f1dd6b3a3", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "patch": "@@ -764,7 +764,7 @@ fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n     let y = match x {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n \"#####,"}, {"sha": "4ad7ea59d2e9b10e112428c2eb2f51a662349651", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ac0abd2960acf1b3a357c681e64b3cddba6fc8e/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=4ac0abd2960acf1b3a357c681e64b3cddba6fc8e", "patch": "@@ -733,7 +733,7 @@ fn main() {\n     let x: Result<i32, i32> = Result::Ok(92);\n     let y = match x {\n         Ok(a) => a,\n-        _ => unreachable!(),\n+        $0_ => unreachable!(),\n     };\n }\n ```"}]}