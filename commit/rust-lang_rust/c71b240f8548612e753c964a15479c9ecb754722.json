{"sha": "c71b240f8548612e753c964a15479c9ecb754722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MWIyNDBmODU0ODYxMmU3NTNjOTY0YTE1NDc5YzllY2I3NTQ3MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T09:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T09:11:08Z"}, "message": "Auto merge of #863 - RalfJung:deref-checks, r=RalfJung\n\nadjust tests for eager pointer checks on deref\n\nThe Miri side of https://github.com/rust-lang/rust/pull/63075.\n\nFixes https://github.com/rust-lang/miri/issues/447.", "tree": {"sha": "37da64ebbaf7589fb3729d65ee233d79ea1d0d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37da64ebbaf7589fb3729d65ee233d79ea1d0d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71b240f8548612e753c964a15479c9ecb754722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71b240f8548612e753c964a15479c9ecb754722", "html_url": "https://github.com/rust-lang/rust/commit/c71b240f8548612e753c964a15479c9ecb754722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71b240f8548612e753c964a15479c9ecb754722/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868da2a139824ea815f48abaf1dfd56fee6b8976", "url": "https://api.github.com/repos/rust-lang/rust/commits/868da2a139824ea815f48abaf1dfd56fee6b8976", "html_url": "https://github.com/rust-lang/rust/commit/868da2a139824ea815f48abaf1dfd56fee6b8976"}, {"sha": "8a103cfdd99b258560c1c3c88c1e49108fb87c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a103cfdd99b258560c1c3c88c1e49108fb87c7d", "html_url": "https://github.com/rust-lang/rust/commit/8a103cfdd99b258560c1c3c88c1e49108fb87c7d"}], "stats": {"total": 57, "additions": 21, "deletions": 36}, "files": [{"sha": "f7f2a4e20f258069fb4acce43ee3f73bb1e0c709", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -1 +1 @@\n-00ee1b47f42129a0a6e33510578fbcf07c1e5382\n+1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc"}, {"sha": "acf1db2977b798f2cbe33dcc514119c3dddba1f2", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -35,7 +35,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n     #[inline]\n     fn pointer_inbounds(&self, ptr: Pointer<Tag>) -> InterpResult<'tcx> {\n         let (size, _align) = self.memory().get_size_and_align(ptr.alloc_id, AllocCheck::Live)?;\n-        ptr.check_in_alloc(size, CheckInAllocMsg::InboundsTest)\n+        ptr.check_inbounds_alloc(size, CheckInAllocMsg::InboundsTest)\n     }\n \n     fn binary_ptr_op("}, {"sha": "2a8be87e1251eabb4db5f1b4cae3f33d701b8538", "filename": "tests/compile-fail/deref-invalid-ptr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -0,0 +1,7 @@\n+// This should fail even without validation.\n+// compile-flags: -Zmiri-disable-validation\n+\n+fn main() {\n+    let x = 2usize as *const u32;\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR dangling pointer was dereferenced\n+}"}, {"sha": "221e585c5ff38a11c6f326c39580e249ce9b21d6", "filename": "tests/compile-fail/deref-partially-dangling.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-partially-dangling.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -0,0 +1,8 @@\n+// Deref a raw ptr to access a field of a large struct, where the field\n+// is allocated but not the entire struct is.\n+fn main() {\n+    let x = (1, 13);\n+    let xptr = &x as *const _ as *const (i32, i32, i32);\n+    let val = unsafe { (*xptr).1 }; //~ ERROR pointer must be in-bounds at offset 12, but is outside bounds of allocation\n+    assert_eq!(val, 13);\n+}"}, {"sha": "fcf613ace462709f5495473013366306c19be948", "filename": "tests/compile-fail/intptrcast_alignment_check.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -1,18 +1,12 @@\n-// Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n-\n // Even with intptrcast and without validation, we want to be *sure* to catch bugs\n // that arise from pointers being insufficiently aligned. The only way to achieve\n // that is not not let programs exploit integer information for alignment, so here\n // we test that this is indeed the case.\n fn main() {\n     let x = &mut [0u8; 3];\n     let base_addr = x as *mut _ as usize;\n-    let u16_ref = unsafe { if base_addr % 2 == 0 {\n-        &mut *(base_addr as *mut u16)\n-    } else {\n-        &mut *((base_addr+1) as *mut u16)\n-    } };\n-    *u16_ref = 2; //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n+    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+    let u16_ptr = base_addr_aligned as *mut u16;\n+    unsafe { *u16_ptr = 2; } //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "3047f086bdf3d82591c2664987e4dba97d8d203e", "filename": "tests/compile-fail/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -8,8 +8,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    let v = unsafe { &mut *(LEAK as *mut i32) };\n-    let _x = *v; //~ ERROR dangling pointer was dereferenced\n+    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR dangling pointer was dereferenced\n }\n \n fn main() {"}, {"sha": "e0e7d2afefc52ab255f0e4ce94abb855799cb532", "filename": "tests/run-pass/ref-invalid-ptr.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/868da2a139824ea815f48abaf1dfd56fee6b8976/tests%2Frun-pass%2Fref-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868da2a139824ea815f48abaf1dfd56fee6b8976/tests%2Frun-pass%2Fref-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fref-invalid-ptr.rs?ref=868da2a139824ea815f48abaf1dfd56fee6b8976", "patch": "@@ -1,12 +0,0 @@\n-// FIXME: validation disabled because it checks these references too eagerly.\n-// compile-flags: -Zmiri-disable-validation\n-\n-fn main() {\n-    let x = 2usize as *const u32;\n-    // This is not aligned, but we immediately cast it to a raw ptr so that must be ok.\n-    let _y = unsafe { &*x as *const u32 };\n-\n-    let x = 0usize as *const u32;\n-    // This is NULL, but we immediately cast it to a raw ptr so that must be ok.\n-    let _y = unsafe { &*x as *const u32 };\n-}"}, {"sha": "afa364e8564381a910287d92f187474027169ffa", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c71b240f8548612e753c964a15479c9ecb754722/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71b240f8548612e753c964a15479c9ecb754722/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=c71b240f8548612e753c964a15479c9ecb754722", "patch": "@@ -1,6 +1,5 @@\n // Test various stacked-borrows-related things.\n fn main() {\n-    deref_partially_dangling_raw();\n     read_does_not_invalidate1();\n     read_does_not_invalidate2();\n     ref_raw_int_raw();\n@@ -14,16 +13,6 @@ fn main() {\n     shr_and_raw();\n }\n \n-// Deref a raw ptr to access a field of a large struct, where the field\n-// is allocated but not the entire struct is.\n-// For now, we want to allow this.\n-fn deref_partially_dangling_raw() {\n-    let x = (1, 13);\n-    let xptr = &x as *const _ as *const (i32, i32, i32);\n-    let val = unsafe { (*xptr).1 };\n-    assert_eq!(val, 13);\n-}\n-\n // Make sure that reading from an `&mut` does, like reborrowing to `&`,\n // NOT invalidate other reborrows.\n fn read_does_not_invalidate1() {"}]}