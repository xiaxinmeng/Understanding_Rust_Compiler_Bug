{"sha": "196b1426bec62b590df790c5f715d46075e01840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NmIxNDI2YmVjNjJiNTkwZGY3OTBjNWY3MTVkNDYwNzVlMDE4NDA=", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-04-02T04:50:22Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-04-02T04:50:22Z"}, "message": "Stabilize String::replace_range\n\nFixes #44643", "tree": {"sha": "6a20ff3ecd7f9533232b54e0908e4962b0384886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a20ff3ecd7f9533232b54e0908e4962b0384886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196b1426bec62b590df790c5f715d46075e01840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196b1426bec62b590df790c5f715d46075e01840", "html_url": "https://github.com/rust-lang/rust/commit/196b1426bec62b590df790c5f715d46075e01840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196b1426bec62b590df790c5f715d46075e01840/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "html_url": "https://github.com/rust-lang/rust/commit/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "b95aae02894ed758e1ba8acb86b716daceeeb673", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/196b1426bec62b590df790c5f715d46075e01840/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b1426bec62b590df790c5f715d46075e01840/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=196b1426bec62b590df790c5f715d46075e01840", "patch": "@@ -1517,7 +1517,7 @@ impl String {\n         }\n     }\n \n-    /// Creates a splicing iterator that removes the specified range in the string,\n+    /// Removes the specified range in the string,\n     /// and replaces it with the given string.\n     /// The given string doesn't need to be the same length as the range.\n     ///\n@@ -1537,21 +1537,20 @@ impl String {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(splice)]\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n     ///\n     /// // Replace the range up until the \u03b2 from the string\n-    /// s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n+    /// s.replace_range(..beta_offset, \"\u0391 is capital alpha; \");\n     /// assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n     /// ```\n-    #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"44643\")]\n-    pub fn splice<R>(&mut self, range: R, replace_with: &str)\n+    #[stable(feature = \"splice\", since = \"1.27.0\")]\n+    pub fn replace_range<R>(&mut self, range: R, replace_with: &str)\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n         //\n-        // The String version of Splice does not have the memory safety issues\n+        // Replace_range does not have the memory safety issues of a vector Splice.\n         // of the vector version. The data is just plain bytes.\n \n         match range.start() {"}, {"sha": "cb4a17a22d8a4aa867a2676ff55c53eb06f51d64", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/196b1426bec62b590df790c5f715d46075e01840/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b1426bec62b590df790c5f715d46075e01840/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=196b1426bec62b590df790c5f715d46075e01840", "patch": "@@ -443,53 +443,53 @@ fn test_drain() {\n }\n \n #[test]\n-fn test_splice() {\n+fn test_replace_range() {\n     let mut s = \"Hello, world!\".to_owned();\n-    s.splice(7..12, \"\u4e16\u754c\");\n+    s.replace_range(7..12, \"\u4e16\u754c\");\n     assert_eq!(s, \"Hello, \u4e16\u754c!\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_char_boundary() {\n+fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n-    s.splice(..8, \"\");\n+    s.replace_range(..8, \"\");\n }\n \n #[test]\n-fn test_splice_inclusive_range() {\n+fn test_replace_range_inclusive_range() {\n     let mut v = String::from(\"12345\");\n-    v.splice(2..=3, \"789\");\n+    v.replace_range(2..=3, \"789\");\n     assert_eq!(v, \"127895\");\n-    v.splice(1..=2, \"A\");\n+    v.replace_range(1..=2, \"A\");\n     assert_eq!(v, \"1A895\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_out_of_bounds() {\n+fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..6, \"789\");\n+    s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_inclusive_out_of_bounds() {\n+fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..=5, \"789\");\n+    s.replace_range(5..=5, \"789\");\n }\n \n #[test]\n-fn test_splice_empty() {\n+fn test_replace_range_empty() {\n     let mut s = String::from(\"12345\");\n-    s.splice(1..2, \"\");\n+    s.replace_range(1..2, \"\");\n     assert_eq!(s, \"1345\");\n }\n \n #[test]\n-fn test_splice_unbounded() {\n+fn test_replace_range_unbounded() {\n     let mut s = String::from(\"12345\");\n-    s.splice(.., \"\");\n+    s.replace_range(.., \"\");\n     assert_eq!(s, \"\");\n }\n "}]}