{"sha": "d599f5bf611018849452d5bb65c0087e1bc81a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTlmNWJmNjExMDE4ODQ5NDUyZDViYjY1YzAwODdlMWJjODFhMTI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-12T12:21:56Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-13T08:09:41Z"}, "message": "rustc/driver: improve common patterns", "tree": {"sha": "c9db484e260447f5b0e47baa9b2d715f21097e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9db484e260447f5b0e47baa9b2d715f21097e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d599f5bf611018849452d5bb65c0087e1bc81a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d599f5bf611018849452d5bb65c0087e1bc81a12", "html_url": "https://github.com/rust-lang/rust/commit/d599f5bf611018849452d5bb65c0087e1bc81a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d599f5bf611018849452d5bb65c0087e1bc81a12/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c482d8d41a7c4424583f2abe62be85b188ddeb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c482d8d41a7c4424583f2abe62be85b188ddeb8", "html_url": "https://github.com/rust-lang/rust/commit/2c482d8d41a7c4424583f2abe62be85b188ddeb8"}], "stats": {"total": 91, "additions": 33, "deletions": 58}, "files": [{"sha": "4d42b8315ea94a35f7e2dcae2b8c46bdf7be7676", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d599f5bf611018849452d5bb65c0087e1bc81a12", "patch": "@@ -1484,15 +1484,12 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[Pa\n         Ok(())\n     })();\n \n-    match result {\n-        Ok(()) => {}\n-        Err(e) => {\n-            sess.fatal(&format!(\n-                \"error writing dependencies to `{}`: {}\",\n-                deps_filename.display(),\n-                e\n-            ));\n-        }\n+    if let Err(e) = result {\n+        sess.fatal(&format!(\n+            \"error writing dependencies to `{}`: {}\",\n+            deps_filename.display(),\n+            e\n+        ));\n     }\n }\n \n@@ -1650,10 +1647,7 @@ pub fn build_output_filenames(\n             // \"-\" as input file will cause the parser to read from stdin so we\n             // have to make up a name\n             // We want to toss everything after the final '.'\n-            let dirpath = match *odir {\n-                Some(ref d) => d.clone(),\n-                None => PathBuf::new(),\n-            };\n+            let dirpath = (*odir).as_ref().cloned().unwrap_or_else(|| PathBuf::new());\n \n             // If a crate name is present, we use it as the link name\n             let stem = sess.opts"}, {"sha": "1fd2021b1e711397283bc32114a3fc5a0efdf956", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d599f5bf611018849452d5bb65c0087e1bc81a12", "patch": "@@ -224,15 +224,10 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     // available for future dynamic libraries opened. This is currently used by\n     // loading LLVM and then making its symbols available for other dynamic\n     // libraries.\n-    let lib = match DynamicLibrary::open_global_now(path) {\n-        Ok(lib) => lib,\n-        Err(err) => {\n-            let err = format!(\"couldn't load codegen backend {:?}: {:?}\",\n-                              path,\n-                              err);\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-    };\n+    let lib = DynamicLibrary::open_global_now(path).unwrap_or_else(|err| {\n+        let err = format!(\"couldn't load codegen backend {:?}: {:?}\", path, err);\n+        early_error(ErrorOutputType::default(), &err);\n+    });\n     unsafe {\n         match lib.symbol(\"__rustc_codegen_backend\") {\n             Ok(f) => {\n@@ -337,28 +332,22 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n             f.exists()\n         })\n         .next();\n-    let sysroot = match sysroot {\n-        Some(path) => path,\n-        None => {\n-            let candidates = sysroot_candidates.iter()\n-                .map(|p| p.display().to_string())\n-                .collect::<Vec<_>>()\n-                .join(\"\\n* \");\n-            let err = format!(\"failed to find a `codegen-backends` folder \\\n-                               in the sysroot candidates:\\n* {}\", candidates);\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-    };\n+    let sysroot = sysroot.unwrap_or_else(|| {\n+        let candidates = sysroot_candidates.iter()\n+            .map(|p| p.display().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n* \");\n+        let err = format!(\"failed to find a `codegen-backends` folder \\\n+                           in the sysroot candidates:\\n* {}\", candidates);\n+        early_error(ErrorOutputType::default(), &err);\n+    });\n     info!(\"probing {} for a codegen backend\", sysroot.display());\n \n-    let d = match sysroot.read_dir() {\n-        Ok(d) => d,\n-        Err(e) => {\n-            let err = format!(\"failed to load default codegen backend, couldn't \\\n-                               read `{}`: {}\", sysroot.display(), e);\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-    };\n+    let d = sysroot.read_dir().unwrap_or_else(|e| {\n+        let err = format!(\"failed to load default codegen backend, couldn't \\\n+                           read `{}`: {}\", sysroot.display(), e);\n+        early_error(ErrorOutputType::default(), &err);\n+    });\n \n     let mut file: Option<PathBuf> = None;\n \n@@ -1055,10 +1044,8 @@ impl RustcDefaultCalls {\n                 Sysroot => println!(\"{}\", sess.sysroot().display()),\n                 TargetSpec => println!(\"{}\", sess.target.target.to_json().pretty()),\n                 FileNames | CrateName => {\n-                    let input = match input {\n-                        Some(input) => input,\n-                        None => early_error(ErrorOutputType::default(), \"no input file provided\"),\n-                    };\n+                    let input = input.unwrap_or_else(||\n+                        early_error(ErrorOutputType::default(), \"no input file provided\"));\n                     let attrs = attrs.as_ref().unwrap();\n                     let t_outputs = driver::build_output_filenames(input, odir, ofile, attrs, sess);\n                     let id = rustc_codegen_utils::link::find_crate_name(Some(sess), attrs, input);\n@@ -1406,10 +1393,8 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     for option in config::rustc_optgroups() {\n         (option.apply)(&mut options);\n     }\n-    let matches = match options.parse(args) {\n-        Ok(m) => m,\n-        Err(f) => early_error(ErrorOutputType::default(), &f.to_string()),\n-    };\n+    let matches = options.parse(args).unwrap_or_else(|f|\n+        early_error(ErrorOutputType::default(), &f.to_string()));\n \n     // For all options we just parsed, we check a few aspects:\n     //\n@@ -1631,7 +1616,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n         }\n     }\n \n-    if result.len() > 0 {\n+    if !result.is_empty() {\n         Some((result, excluded_cargo_defaults))\n     } else {\n         None"}, {"sha": "9016e0d0fe71abe54562a508c0e81eb974023337", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=d599f5bf611018849452d5bb65c0087e1bc81a12", "patch": "@@ -90,7 +90,7 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n         match msg {\n             ProfileQueriesMsg::Halt => return,\n             ProfileQueriesMsg::Dump(params) => {\n-                assert!(stack.len() == 0);\n+                assert!(stack.is_empty());\n                 assert!(frame.parse_st == ParseState::Clear);\n                 {\n                     // write log of all messages\n@@ -141,7 +141,7 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                      ProfileQueriesMsg::QueryBegin(span,querymsg)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveQuery\n-                            (Query{span:span, msg:querymsg}, start)\n+                            (Query { span, msg: querymsg }, start)\n                     },\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::CacheHit) => {"}, {"sha": "121be04bbb15d6a35417013ad95534b628974e84", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d599f5bf611018849452d5bb65c0087e1bc81a12/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=d599f5bf611018849452d5bb65c0087e1bc81a12", "patch": "@@ -108,11 +108,7 @@ fn html_of_fraction(frac: f64) -> (String, &'static str) {\n }\n \n fn total_duration(traces: &[Rec]) -> Duration {\n-    let mut sum : Duration = Duration::new(0,0);\n-    for t in traces.iter() {\n-        sum += t.dur_total;\n-    }\n-    return sum\n+    Duration::new(0, 0) + traces.iter().map(|t| t.dur_total).sum()\n }\n \n fn duration_div(nom: Duration, den: Duration) -> f64 {"}]}