{"sha": "da27551f3ab25b395fa96709c7a559d04748d718", "node_id": "C_kwDOAAsO6NoAKGRhMjc1NTFmM2FiMjViMzk1ZmE5NjcwOWM3YTU1OWQwNDc0OGQ3MTg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-08T07:34:58Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-19T09:32:56Z"}, "message": "emit only one note per unused struct field", "tree": {"sha": "7cf0b40a5498041d4023fddbde4ddac3c6478fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cf0b40a5498041d4023fddbde4ddac3c6478fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da27551f3ab25b395fa96709c7a559d04748d718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da27551f3ab25b395fa96709c7a559d04748d718", "html_url": "https://github.com/rust-lang/rust/commit/da27551f3ab25b395fa96709c7a559d04748d718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da27551f3ab25b395fa96709c7a559d04748d718/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb8a3926619a18a2e31627e4cdf05f16530b0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8a3926619a18a2e31627e4cdf05f16530b0eb", "html_url": "https://github.com/rust-lang/rust/commit/5fb8a3926619a18a2e31627e4cdf05f16530b0eb"}], "stats": {"total": 132, "additions": 96, "deletions": 36}, "files": [{"sha": "421c67fb6b783f4f70a289f76346edfcceab174b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/da27551f3ab25b395fa96709c7a559d04748d718/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da27551f3ab25b395fa96709c7a559d04748d718/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=da27551f3ab25b395fa96709c7a559d04748d718", "patch": "@@ -164,10 +164,9 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     if let (Res::Local(id_l), Res::Local(id_r)) = (\n                         typeck_results.qpath_res(qpath_l, lhs.hir_id),\n                         typeck_results.qpath_res(qpath_r, rhs.hir_id),\n-                    ) {\n-                        if id_l == id_r {\n-                            return true;\n-                        }\n+                    ) && id_l == id_r\n+                    {\n+                        return true;\n                     }\n                     return false;\n                 }\n@@ -183,10 +182,10 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n         }\n \n-        if let hir::ExprKind::Assign(lhs, rhs, _) = assign.kind {\n-            if check_for_self_assign_helper(self.typeck_results(), lhs, rhs)\n+        if let hir::ExprKind::Assign(lhs, rhs, _) = assign.kind\n+            && check_for_self_assign_helper(self.typeck_results(), lhs, rhs)\n                 && !assign.span.from_expansion()\n-            {\n+        {\n                 let is_field_assign = matches!(lhs.kind, hir::ExprKind::Field(..));\n                 self.tcx.struct_span_lint_hir(\n                     lint::builtin::DEAD_CODE,\n@@ -201,7 +200,6 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                         .emit();\n                     },\n                 )\n-            }\n         }\n     }\n \n@@ -251,33 +249,33 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 return false;\n             }\n \n-            if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n-                if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n-                    let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n-                    if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n-                        if let Some(adt_def_id) = adt_def.did().as_local() {\n-                            self.ignored_derived_traits\n-                                .entry(adt_def_id)\n-                                .or_default()\n-                                .push((trait_of, impl_of));\n-                        }\n-                    }\n-                    return true;\n+            if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of)\n+                && self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads)\n+            {\n+                let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n+                if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind()\n+                    && let Some(adt_def_id) = adt_def.did().as_local()\n+                {\n+                    self.ignored_derived_traits\n+                        .entry(adt_def_id)\n+                        .or_default()\n+                        .push((trait_of, impl_of));\n                 }\n+                return true;\n             }\n         }\n \n         return false;\n     }\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n-        if let Some(item_def_id) = match node {\n-            Node::ImplItem(hir::ImplItem { def_id, .. }) => Some(def_id.to_def_id()),\n-            _ => None,\n-        } {\n-            if self.should_ignore_item(item_def_id) {\n+        match node {\n+            Node::ImplItem(hir::ImplItem { def_id, .. })\n+                if self.should_ignore_item(def_id.to_def_id()) =>\n+            {\n                 return;\n             }\n+            _ => (),\n         }\n \n         let had_repr_c = self.repr_has_repr_c;\n@@ -534,10 +532,10 @@ fn check_item<'tcx>(\n         }\n         DefKind::Struct => {\n             let item = tcx.hir().item(id);\n-            if let hir::ItemKind::Struct(ref variant_data, _) = item.kind {\n-                if let Some(ctor_hir_id) = variant_data.ctor_hir_id() {\n-                    struct_constructors.insert(tcx.hir().local_def_id(ctor_hir_id), item.def_id);\n-                }\n+            if let hir::ItemKind::Struct(ref variant_data, _) = item.kind\n+                && let Some(ctor_hir_id) = variant_data.ctor_hir_id()\n+            {\n+                struct_constructors.insert(tcx.hir().local_def_id(ctor_hir_id), item.def_id);\n             }\n         }\n         DefKind::GlobalAsm => {\n@@ -630,6 +628,7 @@ struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_symbols: &'tcx FxHashSet<LocalDefId>,\n     ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n+    ignored_struct_def: FxHashSet<LocalDefId>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -677,10 +676,10 @@ impl<'tcx> DeadVisitor<'tcx> {\n         let inherent_impls = self.tcx.inherent_impls(def_id);\n         for &impl_did in inherent_impls.iter() {\n             for item_did in self.tcx.associated_item_def_ids(impl_did) {\n-                if let Some(def_id) = item_did.as_local() {\n-                    if self.live_symbols.contains(&def_id) {\n-                        return true;\n-                    }\n+                if let Some(def_id) = item_did.as_local()\n+                    && self.live_symbols.contains(&def_id)\n+                {\n+                    return true;\n                 }\n             }\n         }\n@@ -698,9 +697,20 @@ impl<'tcx> DeadVisitor<'tcx> {\n             self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n                 let def_id = self.tcx.hir().local_def_id(id);\n                 let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n-                let mut err = lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name));\n+                let mut err = lint.build(&format!(\"{descr} is never {participle}: `{name}`\"));\n                 let hir = self.tcx.hir();\n-                if let Some(encl_scope) = hir.get_enclosing_scope(id)\n+                let is_field_in_same_struct =\n+                    if let Some(parent_hir_id) = self.tcx.hir().find_parent_node(id)\n+                        && let Some(parent_node) = self.tcx.hir().find(parent_hir_id)\n+                        && let Node::Item(hir::Item{kind: hir::ItemKind::Struct(..), ..}) = parent_node\n+                        && let Some(did) = self.tcx.hir().opt_local_def_id(parent_hir_id)\n+                    {\n+                        !self.ignored_struct_def.insert(did)\n+                    } else {\n+                        false\n+                    };\n+                if !is_field_in_same_struct\n+                    && let Some(encl_scope) = hir.get_enclosing_scope(id)\n                     && let Some(encl_def_id) = hir.opt_local_def_id(encl_scope)\n                     && let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id)\n                 {\n@@ -857,7 +867,12 @@ impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n \n fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n     let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n-    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n+    let mut visitor = DeadVisitor {\n+        tcx,\n+        live_symbols,\n+        ignored_derived_traits,\n+        ignored_struct_def: FxHashSet::default(),\n+    };\n     let (module, _, module_id) = tcx.hir().get_module(module);\n     // Do not use an ItemLikeVisitor since we may want to skip visiting some items\n     // when a surrounding one is warned against or `_`."}, {"sha": "f5cff8ae9e538f20af95d6742e5ca8e3389e5637", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da27551f3ab25b395fa96709c7a559d04748d718/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da27551f3ab25b395fa96709c7a559d04748d718/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs?ref=da27551f3ab25b395fa96709c7a559d04748d718", "patch": "@@ -0,0 +1,12 @@\n+#![forbid(dead_code)]\n+\n+#[derive(Debug)]\n+pub struct Whatever {\n+    pub field0: (),\n+    field1: (), //~ERROR field is never read: `field1\n+    field2: (), //~ERROR field is never read: `field2\n+    field3: (), //~ERROR field is never read: `field3\n+    field4: (), //~ERROR field is never read: `field4\n+}\n+\n+fn main() {}"}, {"sha": "2190a0307bfde79f7ef2b84f84b5707ba335da01", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/da27551f3ab25b395fa96709c7a559d04748d718/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da27551f3ab25b395fa96709c7a559d04748d718/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=da27551f3ab25b395fa96709c7a559d04748d718", "patch": "@@ -0,0 +1,33 @@\n+error: field is never read: `field1`\n+  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:6:5\n+   |\n+LL |     field1: (),\n+   |     ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11\n+   |\n+LL | #![forbid(dead_code)]\n+   |           ^^^^^^^^^\n+   = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+\n+error: field is never read: `field2`\n+  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:7:5\n+   |\n+LL |     field2: (),\n+   |     ^^^^^^^^^^\n+\n+error: field is never read: `field3`\n+  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:8:5\n+   |\n+LL |     field3: (),\n+   |     ^^^^^^^^^^\n+\n+error: field is never read: `field4`\n+  --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:9:5\n+   |\n+LL |     field4: (),\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}