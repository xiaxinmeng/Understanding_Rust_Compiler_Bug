{"sha": "c109bed15b79c81fed4277abd0f4a71a221224c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDliZWQxNWI3OWM4MWZlZDQyNzdhYmQwZjRhNzFhMjIxMjI0YzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-26T00:02:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-26T00:39:43Z"}, "message": "Deny common lints by default for lib{std,extra}", "tree": {"sha": "d2244fded61a1aef7e7ac2779182a8af2aaaeff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2244fded61a1aef7e7ac2779182a8af2aaaeff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c109bed15b79c81fed4277abd0f4a71a221224c1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c109bed15b79c81fed4277abd0f4a71a221224c1", "html_url": "https://github.com/rust-lang/rust/commit/c109bed15b79c81fed4277abd0f4a71a221224c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c109bed15b79c81fed4277abd0f4a71a221224c1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032dcc57e8876e960837c3a050be2c7570e7eafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/032dcc57e8876e960837c3a050be2c7570e7eafd", "html_url": "https://github.com/rust-lang/rust/commit/032dcc57e8876e960837c3a050be2c7570e7eafd"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "47ab7c867282cfe9f4115272766f4153aebb9252", "filename": "mk/target.mk", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -13,6 +13,15 @@\n # this exists can be found on issue #2400\n export CFG_COMPILER_TRIPLE\n \n+# The standard libraries should be held up to a higher standard than any old\n+# code, make sure that these common warnings are denied by default. These can\n+# be overridden during development temporarily. For stage0, we allow all these\n+# to suppress warnings which may be bugs in stage0 (should be fixed in stage1+)\n+# NOTE: add \"-A warnings\" after snapshot to WFLAGS_ST0\n+WFLAGS_ST0 = -A unrecognized-lint\n+WFLAGS_ST1 = -D warnings\n+WFLAGS_ST2 = -D warnings\n+\n # TARGET_STAGE_N template: This defines how target artifacts are built\n # for all stage/target architecture combinations. The arguments:\n # $(1) is the stage\n@@ -39,15 +48,15 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_EXTRALIB_$(2)): \\\n \t\t$$(EXTRALIB_CRATE) $$(EXTRALIB_INPUTS) \\\n \t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\"}, {"sha": "782a73deadf9a9938032aac73024c063bf699729", "filename": "src/libextra/term.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -15,12 +15,12 @@\n use core::prelude::*;\n \n use core::io;\n-use core::os;\n \n-use terminfo::*;\n-use terminfo::searcher::open;\n-use terminfo::parser::compiled::parse;\n-use terminfo::parm::{expand, Number, Variables};\n+#[cfg(not(target_os = \"win32\"))] use core::os;\n+#[cfg(not(target_os = \"win32\"))] use terminfo::*;\n+#[cfg(not(target_os = \"win32\"))] use terminfo::searcher::open;\n+#[cfg(not(target_os = \"win32\"))] use terminfo::parser::compiled::parse;\n+#[cfg(not(target_os = \"win32\"))] use terminfo::parm::{expand, Number, Variables};\n \n // FIXME (#2807): Windows support.\n \n@@ -122,10 +122,10 @@ impl Terminal {\n         return Ok(Terminal {out: out, color_supported: false});\n     }\n \n-    pub fn fg(&self, color: u8) {\n+    pub fn fg(&self, _color: u8) {\n     }\n \n-    pub fn bg(&self, color: u8) {\n+    pub fn bg(&self, _color: u8) {\n     }\n \n     pub fn reset(&self) {"}, {"sha": "3c2ae93b65637694196b592d1f8497b7c3a497ee", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -568,7 +568,7 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_int, c_short};\n+                use libc::types::os::arch::c95::c_short;\n                 use libc::types::os::arch::extra::{int64, time64_t};\n                 use libc::types::os::arch::posix88::{dev_t, ino_t};\n                 use libc::types::os::arch::posix88::mode_t;"}, {"sha": "112540c405da7cda900d0eafc0f2f6e5b59cf599", "filename": "src/libstd/os.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -33,9 +33,8 @@ use io;\n use iterator::IteratorUtil;\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n-use libc::{mode_t, FILE};\n+use libc::FILE;\n use local_data;\n-use option;\n use option::{Some, None};\n use os;\n use prelude::*;\n@@ -181,7 +180,6 @@ pub fn env() -> ~[(~str,~str)] {\n     unsafe {\n         #[cfg(windows)]\n         unsafe fn get_env_pairs() -> ~[~str] {\n-            use libc::types::os::arch::extra::LPTCH;\n             use libc::funcs::extra::kernel32::{\n                 GetEnvironmentStringsA,\n                 FreeEnvironmentStringsA\n@@ -248,10 +246,10 @@ pub fn getenv(n: &str) -> Option<~str> {\n         do with_env_lock {\n             let s = str::as_c_str(n, |s| libc::getenv(s));\n             if ptr::null::<u8>() == cast::transmute(s) {\n-                option::None::<~str>\n+                None::<~str>\n             } else {\n                 let s = cast::transmute(s);\n-                option::Some::<~str>(str::raw::from_buf(s))\n+                Some::<~str>(str::raw::from_buf(s))\n             }\n         }\n     }\n@@ -540,7 +538,7 @@ pub fn homedir() -> Option<Path> {\n \n     #[cfg(windows)]\n     fn secondary() -> Option<Path> {\n-        do getenv(~\"USERPROFILE\").chain |p| {\n+        do getenv(\"USERPROFILE\").chain |p| {\n             if !p.is_empty() {\n                 Some(Path(p))\n             } else {\n@@ -647,9 +645,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n             use os::win32::as_utf16_p;\n             // FIXME: turn mode into something useful? #2623\n             do as_utf16_p(p.to_str()) |buf| {\n-                libc::CreateDirectoryW(buf, unsafe {\n-                    cast::transmute(0)\n-                })\n+                libc::CreateDirectoryW(buf, cast::transmute(0))\n                     != (0 as libc::BOOL)\n             }\n         }\n@@ -659,7 +655,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n     fn mkdir(p: &Path, mode: c_int) -> bool {\n         unsafe {\n             do as_c_charp(p.to_str()) |c| {\n-                libc::mkdir(c, mode as mode_t) == (0 as c_int)\n+                libc::mkdir(c, mode as libc::mode_t) == (0 as c_int)\n             }\n         }\n     }\n@@ -732,7 +728,6 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n         }\n         #[cfg(windows)]\n         unsafe fn get_list(p: &Path) -> ~[~str] {\n-            use libc::types::os::arch::extra::{LPCTSTR, HANDLE, BOOL};\n             use libc::consts::os::extra::INVALID_HANDLE_VALUE;\n             use libc::wcslen;\n             use libc::funcs::extra::kernel32::{\n@@ -961,7 +956,7 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n \n             // Give the new file the old file's permissions\n             if do str::as_c_str(to.to_str()) |to_buf| {\n-                libc::chmod(to_buf, from_mode as mode_t)\n+                libc::chmod(to_buf, from_mode as libc::mode_t)\n             } != 0 {\n                 return false; // should be a condition...\n             }\n@@ -1329,7 +1324,7 @@ pub fn glob(pattern: &str) -> ~[Path] {\n \n /// Returns a vector of Path objects that match the given glob pattern\n #[cfg(target_os = \"win32\")]\n-pub fn glob(pattern: &str) -> ~[Path] {\n+pub fn glob(_pattern: &str) -> ~[Path] {\n     fail!(\"glob() is unimplemented on Windows\")\n }\n "}, {"sha": "5041b559ecbff8bb67b710f73012358920b19c08", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -60,13 +60,13 @@ pub type Key = DWORD;\n #[cfg(windows)]\n pub unsafe fn create(key: &mut Key) {\n     static TLS_OUT_OF_INDEXES: DWORD = 0xFFFFFFFF;\n-    *key = unsafe { TlsAlloc() };\n+    *key = TlsAlloc();\n     assert!(*key != TLS_OUT_OF_INDEXES);\n }\n \n #[cfg(windows)]\n pub unsafe fn set(key: Key, value: *mut c_void) {\n-    unsafe { assert!(0 != TlsSetValue(key, value)) }\n+    assert!(0 != TlsSetValue(key, value))\n }\n \n #[cfg(windows)]"}, {"sha": "32368312e15932607b6f8f1139ebd7a4bfb395b9", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -12,11 +12,10 @@\n \n #[allow(missing_doc)];\n \n-use iterator::IteratorUtil;\n use cast;\n use comm::{stream, SharedChan, GenericChan, GenericPort};\n-use int;\n use io;\n+use iterator::IteratorUtil;\n use libc::{pid_t, c_void, c_int};\n use libc;\n use option::{Some, None};\n@@ -465,7 +464,6 @@ fn spawn_process_os(prog: &str, args: &[~str],\n     use libc::funcs::extra::msvcrt::get_osfhandle;\n \n     use sys;\n-    use uint;\n \n     unsafe {\n \n@@ -638,6 +636,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n     use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n     use libc::funcs::bsd44::getdtablesize;\n+    use int;\n \n     mod rustrt {\n         use libc::c_void;"}, {"sha": "94349c75af91f44099e652a3222105418b5d4517", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -91,7 +91,7 @@ use uint;\n use util;\n use unstable::sync::{Exclusive, exclusive};\n use rt::local::Local;\n-use iterator::{IteratorUtil};\n+use iterator::IteratorUtil;\n \n #[cfg(test)] use task::default_task_opts;\n #[cfg(test)] use comm;"}, {"sha": "ea0e212b14f791ebcd85d20a5f9c645911449d80", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -17,8 +17,8 @@ The `ToStr` trait for converting to strings\n use str::OwnedStr;\n use hashmap::HashMap;\n use hashmap::HashSet;\n-use iterator::IteratorUtil;\n use hash::Hash;\n+use iterator::IteratorUtil;\n use cmp::Eq;\n use vec::ImmutableVector;\n \n@@ -177,7 +177,7 @@ impl<A:ToStr> ToStr for @[A] {\n mod tests {\n     use hashmap::HashMap;\n     use hashmap::HashSet;\n-    use container::{Set,Map};\n+    use container::{Set, Map};\n     #[test]\n     fn test_simple_types() {\n         assert_eq!(1i.to_str(), ~\"1\");"}, {"sha": "61793977e7a80975a6e05d9f903177998be2b389", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c109bed15b79c81fed4277abd0f4a71a221224c1/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=c109bed15b79c81fed4277abd0f4a71a221224c1", "patch": "@@ -164,7 +164,6 @@ mod dl {\n     use libc;\n     use path;\n     use ptr;\n-    use str;\n     use task;\n     use result::*;\n \n@@ -175,7 +174,7 @@ mod dl {\n     }\n \n     pub unsafe fn open_internal() -> *libc::c_void {\n-        let mut handle = ptr::null();\n+        let handle = ptr::null();\n         GetModuleHandleExW(0 as libc::DWORD, ptr::null(), &handle as **libc::c_void);\n         handle\n     }"}]}