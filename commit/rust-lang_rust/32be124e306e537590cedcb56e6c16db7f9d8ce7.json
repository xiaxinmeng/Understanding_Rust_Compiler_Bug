{"sha": "32be124e306e537590cedcb56e6c16db7f9d8ce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYmUxMjRlMzA2ZTUzNzU5MGNlZGNiNTZlNmMxNmRiN2Y5ZDhjZTc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-06T04:50:55Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-06T11:35:41Z"}, "message": "Use AnonConst for asm! constants", "tree": {"sha": "f1556b2b11d22a126ad37867267ff2afe6bb9f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1556b2b11d22a126ad37867267ff2afe6bb9f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32be124e306e537590cedcb56e6c16db7f9d8ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32be124e306e537590cedcb56e6c16db7f9d8ce7", "html_url": "https://github.com/rust-lang/rust/commit/32be124e306e537590cedcb56e6c16db7f9d8ce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32be124e306e537590cedcb56e6c16db7f9d8ce7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd6ec760453b333e86aac106f47fe9132498924", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6ec760453b333e86aac106f47fe9132498924", "html_url": "https://github.com/rust-lang/rust/commit/cbd6ec760453b333e86aac106f47fe9132498924"}], "stats": {"total": 523, "additions": 281, "deletions": 242}, "files": [{"sha": "da9accd18391afe0b8a042a763394be164b40a73", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1998,7 +1998,7 @@ pub enum InlineAsmOperand {\n         out_expr: Option<P<Expr>>,\n     },\n     Const {\n-        expr: P<Expr>,\n+        anon_const: AnonConst,\n     },\n     Sym {\n         expr: P<Expr>,"}, {"sha": "b1840f475aa07353cb5f26c57a2b504d3e9ccdcb", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1252,7 +1252,6 @@ pub fn noop_visit_expr<T: MutVisitor>(\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => vis.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -1265,6 +1264,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n                             vis.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => vis.visit_anon_const(anon_const),\n                 }\n             }\n         }"}, {"sha": "3f35919ae6a2aa7fbcd0266aeedf7936b356282b", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -835,7 +835,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -848,6 +847,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n                             visitor.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => {\n+                        visitor.visit_anon_const(anon_const)\n+                    }\n                 }\n             }\n         }"}, {"sha": "981a6bc0c99e2709761648b63058762e27cd81fd", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1411,9 +1411,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n                         }\n                     }\n-                    InlineAsmOperand::Const { ref expr } => {\n-                        hir::InlineAsmOperand::Const { expr: self.lower_expr_mut(expr) }\n-                    }\n+                    InlineAsmOperand::Const { ref anon_const } => hir::InlineAsmOperand::Const {\n+                        anon_const: self.lower_anon_const(anon_const),\n+                    },\n                     InlineAsmOperand::Sym { ref expr } => {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }"}, {"sha": "789d2c296e291c3d905ce9ed3bf9bd5fa1d60caf", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -2149,10 +2149,10 @@ impl<'a> State<'a> {\n                                     None => s.word(\"_\"),\n                                 }\n                             }\n-                            InlineAsmOperand::Const { expr } => {\n+                            InlineAsmOperand::Const { anon_const } => {\n                                 s.word(\"const\");\n                                 s.space();\n-                                s.print_expr(expr);\n+                                s.print_expr(&anon_const.value);\n                             }\n                             InlineAsmOperand::Sym { expr } => {\n                                 s.word(\"sym\");"}, {"sha": "fd976b119b748bcf8a9a8dd30d814d4e6ea4c654", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -136,8 +136,8 @@ fn parse_args<'a>(\n                 ast::InlineAsmOperand::InOut { reg, expr, late: true }\n             }\n         } else if p.eat_keyword(kw::Const) {\n-            let expr = p.parse_expr()?;\n-            ast::InlineAsmOperand::Const { expr }\n+            let anon_const = p.parse_anon_const_expr()?;\n+            ast::InlineAsmOperand::Const { anon_const }\n         } else if p.eat_keyword(sym::sym) {\n             let expr = p.parse_expr()?;\n             match expr.kind {"}, {"sha": "fd3f89a2aee965e551be4c11286f9c894ea3d40b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -822,41 +822,37 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     InlineAsmOperandRef::InOut { reg, late, in_value, out_place }\n                 }\n                 mir::InlineAsmOperand::Const { ref value } => {\n-                    if let mir::Operand::Constant(constant) = value {\n-                        let const_value = self\n-                            .eval_mir_constant(constant)\n-                            .unwrap_or_else(|_| span_bug!(span, \"asm const cannot be resolved\"));\n-                        let ty = constant.ty();\n-                        let size = bx.layout_of(ty).size;\n-                        let scalar = match const_value {\n-                            ConstValue::Scalar(s) => s,\n-                            _ => span_bug!(\n-                                span,\n-                                \"expected Scalar for promoted asm const, but got {:#?}\",\n-                                const_value\n-                            ),\n-                        };\n-                        let value = scalar.assert_bits(size);\n-                        let string = match ty.kind() {\n-                            ty::Uint(_) => value.to_string(),\n-                            ty::Int(int_ty) => {\n-                                match int_ty.normalize(bx.tcx().sess.target.pointer_width) {\n-                                    ty::IntTy::I8 => (value as i8).to_string(),\n-                                    ty::IntTy::I16 => (value as i16).to_string(),\n-                                    ty::IntTy::I32 => (value as i32).to_string(),\n-                                    ty::IntTy::I64 => (value as i64).to_string(),\n-                                    ty::IntTy::I128 => (value as i128).to_string(),\n-                                    ty::IntTy::Isize => unreachable!(),\n-                                }\n+                    let const_value = self\n+                        .eval_mir_constant(value)\n+                        .unwrap_or_else(|_| span_bug!(span, \"asm const cannot be resolved\"));\n+                    let ty = value.ty();\n+                    let size = bx.layout_of(ty).size;\n+                    let scalar = match const_value {\n+                        ConstValue::Scalar(s) => s,\n+                        _ => span_bug!(\n+                            span,\n+                            \"expected Scalar for promoted asm const, but got {:#?}\",\n+                            const_value\n+                        ),\n+                    };\n+                    let value = scalar.assert_bits(size);\n+                    let string = match ty.kind() {\n+                        ty::Uint(_) => value.to_string(),\n+                        ty::Int(int_ty) => {\n+                            match int_ty.normalize(bx.tcx().sess.target.pointer_width) {\n+                                ty::IntTy::I8 => (value as i8).to_string(),\n+                                ty::IntTy::I16 => (value as i16).to_string(),\n+                                ty::IntTy::I32 => (value as i32).to_string(),\n+                                ty::IntTy::I64 => (value as i64).to_string(),\n+                                ty::IntTy::I128 => (value as i128).to_string(),\n+                                ty::IntTy::Isize => unreachable!(),\n                             }\n-                            ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n-                            ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n-                            _ => span_bug!(span, \"asm const has bad type {}\", ty),\n-                        };\n-                        InlineAsmOperandRef::Const { string }\n-                    } else {\n-                        span_bug!(span, \"asm const is not a constant\");\n-                    }\n+                        }\n+                        ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n+                        ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n+                        _ => span_bug!(span, \"asm const has bad type {}\", ty),\n+                    };\n+                    InlineAsmOperandRef::Const { string }\n                 }\n                 mir::InlineAsmOperand::SymFn { ref value } => {\n                     let literal = self.monomorphize(value.literal);"}, {"sha": "1051fb8cea27940fedba9dc77fc21b881adda0d8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -2347,7 +2347,7 @@ pub enum InlineAsmOperand<'hir> {\n         out_expr: Option<Expr<'hir>>,\n     },\n     Const {\n-        expr: Expr<'hir>,\n+        anon_const: AnonConst,\n     },\n     Sym {\n         expr: Expr<'hir>,"}, {"sha": "43b67f95510117f428c376a8b694a9938e19d0b8", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1189,7 +1189,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -1202,6 +1201,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n                             visitor.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => {\n+                        visitor.visit_anon_const(anon_const)\n+                    }\n                 }\n             }\n         }"}, {"sha": "5820e7a261230832f99b64b247e5a157d76fdcef", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1570,10 +1570,10 @@ impl<'a> State<'a> {\n                                 None => s.word(\"_\"),\n                             }\n                         }\n-                        hir::InlineAsmOperand::Const { expr } => {\n+                        hir::InlineAsmOperand::Const { anon_const } => {\n                             s.word(\"const\");\n                             s.space();\n-                            s.print_expr(expr);\n+                            s.print_anon_const(anon_const);\n                         }\n                         hir::InlineAsmOperand::Sym { expr } => {\n                             s.word(\"sym\");"}, {"sha": "c42c0bf4980a17c221249af5dfbf875720e24c89", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1213,7 +1213,7 @@ pub enum InlineAsmOperand<'tcx> {\n         out_place: Option<Place<'tcx>>,\n     },\n     Const {\n-        value: Operand<'tcx>,\n+        value: Box<Constant<'tcx>>,\n     },\n     SymFn {\n         value: Box<Constant<'tcx>>,"}, {"sha": "5c60e34885c40cb3f82f5d95bce06c748cbb3521", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -584,8 +584,7 @@ macro_rules! make_mir_visitor {\n                     } => {\n                         for op in operands {\n                             match op {\n-                                InlineAsmOperand::In { value, .. }\n-                                | InlineAsmOperand::Const { value } => {\n+                                InlineAsmOperand::In { value, .. } => {\n                                     self.visit_operand(value, location);\n                                 }\n                                 InlineAsmOperand::Out { place, .. } => {\n@@ -607,7 +606,8 @@ macro_rules! make_mir_visitor {\n                                         );\n                                     }\n                                 }\n-                                InlineAsmOperand::SymFn { value } => {\n+                                InlineAsmOperand::Const { value }\n+                                | InlineAsmOperand::SymFn { value } => {\n                                     self.visit_constant(value, location);\n                                 }\n                                 InlineAsmOperand::SymStatic { def_id: _ } => {}"}, {"sha": "19035bdd03824bed3f4fd3b2cc49f02a0c6a9dd9", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -204,8 +204,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             } => {\n                 for op in operands {\n                     match *op {\n-                        InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                        InlineAsmOperand::In { reg: _, ref value } => {\n                             self.consume_operand(location, value);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -219,7 +218,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                                 self.mutate_place(location, out_place, Shallow(None), JustWrite);\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "0e878c48d50c7cb5f1d8ac9dc0056a9646b374dd", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -734,8 +734,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             } => {\n                 for op in operands {\n                     match *op {\n-                        InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                        InlineAsmOperand::In { reg: _, ref value } => {\n                             self.consume_operand(loc, (value, span), flow_state);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -761,7 +760,8 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                                 );\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "5205f87a18413475d0118ede640aca0471e37498", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -425,7 +425,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 for op in operands {\n                     match *op {\n                         InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                         => {\n                             self.gather_operand(value);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -441,7 +441,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                                 self.gather_init(out_place.as_ref(), InitKind::Deep);\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "29df86ca6cdb753304a4f356898219bdcdd88b43", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -720,9 +720,6 @@ impl Conflicts<'a> {\n                                 }\n                             }\n                         }\n-                        InlineAsmOperand::Const { value } => {\n-                            assert!(value.place().is_none());\n-                        }\n                         InlineAsmOperand::InOut {\n                             reg: _,\n                             late: _,\n@@ -731,6 +728,7 @@ impl Conflicts<'a> {\n                         }\n                         | InlineAsmOperand::In { reg: _, value: _ }\n                         | InlineAsmOperand::Out { reg: _, late: _, place: None }\n+                        | InlineAsmOperand::Const { value: _ }\n                         | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }"}, {"sha": "1bbaf833c4fd91710bb8f5c94b1960f31dd7d2f0", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 17, "deletions": 65, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -108,26 +108,21 @@ pub enum Candidate {\n     /// the attribute currently provides the semantic requirement that arguments\n     /// must be constant.\n     Argument { bb: BasicBlock, index: usize },\n-\n-    /// `const` operand in asm!.\n-    InlineAsm { bb: BasicBlock, index: usize },\n }\n \n impl Candidate {\n     /// Returns `true` if we should use the \"explicit\" rules for promotability for this `Candidate`.\n     fn forces_explicit_promotion(&self) -> bool {\n         match self {\n             Candidate::Ref(_) => false,\n-            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => true,\n+            Candidate::Argument { .. } => true,\n         }\n     }\n \n     fn source_info(&self, body: &Body<'_>) -> SourceInfo {\n         match self {\n             Candidate::Ref(location) => *body.source_info(*location),\n-            Candidate::Argument { bb, .. } | Candidate::InlineAsm { bb, .. } => {\n-                *body.source_info(body.terminator_loc(*bb))\n-            }\n+            Candidate::Argument { bb, .. } => *body.source_info(body.terminator_loc(*bb)),\n         }\n     }\n }\n@@ -217,36 +212,25 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         self.super_terminator(terminator, location);\n \n-        match terminator.kind {\n-            TerminatorKind::Call { ref func, .. } => {\n-                if let ty::FnDef(def_id, _) = *func.ty(self.ccx.body, self.ccx.tcx).kind() {\n-                    let fn_sig = self.ccx.tcx.fn_sig(def_id);\n-                    if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                        let name = self.ccx.tcx.item_name(def_id);\n-                        // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n-                        if name.as_str().starts_with(\"simd_shuffle\") {\n-                            self.candidates\n-                                .push(Candidate::Argument { bb: location.block, index: 2 });\n-\n-                            return; // Don't double count `simd_shuffle` candidates\n-                        }\n-                    }\n+        if let TerminatorKind::Call { ref func, .. } = terminator.kind {\n+            if let ty::FnDef(def_id, _) = *func.ty(self.ccx.body, self.ccx.tcx).kind() {\n+                let fn_sig = self.ccx.tcx.fn_sig(def_id);\n+                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n+                    let name = self.ccx.tcx.item_name(def_id);\n+                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n+                    if name.as_str().starts_with(\"simd_shuffle\") {\n+                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n \n-                    if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n-                        for index in constant_args {\n-                            self.candidates.push(Candidate::Argument { bb: location.block, index });\n-                        }\n+                        return; // Don't double count `simd_shuffle` candidates\n                     }\n                 }\n-            }\n-            TerminatorKind::InlineAsm { ref operands, .. } => {\n-                for (index, op) in operands.iter().enumerate() {\n-                    if let InlineAsmOperand::Const { .. } = op {\n-                        self.candidates.push(Candidate::InlineAsm { bb: location.block, index })\n+\n+                if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n+                    for index in constant_args {\n+                        self.candidates.push(Candidate::Argument { bb: location.block, index });\n                     }\n                 }\n             }\n-            _ => {}\n         }\n     }\n }\n@@ -335,18 +319,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            Candidate::InlineAsm { bb, index } => {\n-                assert!(self.explicit);\n-\n-                let terminator = self.body[bb].terminator();\n-                match &terminator.kind {\n-                    TerminatorKind::InlineAsm { operands, .. } => match &operands[index] {\n-                        InlineAsmOperand::Const { value } => self.validate_operand(value),\n-                        _ => bug!(),\n-                    },\n-                    _ => bug!(),\n-                }\n-            }\n         }\n     }\n \n@@ -818,9 +790,7 @@ pub fn validate_candidates(\n             }\n \n             match candidate {\n-                Candidate::Argument { bb, index } | Candidate::InlineAsm { bb, index }\n-                    if !is_promotable =>\n-                {\n+                Candidate::Argument { bb, index } if !is_promotable => {\n                     let span = ccx.body[bb].terminator().source_info.span;\n                     let msg = format!(\"argument {} is required to be a constant\", index + 1);\n                     ccx.tcx.sess.span_err(span, &msg);\n@@ -1089,24 +1059,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         _ => bug!(),\n                     }\n                 }\n-                Candidate::InlineAsm { bb, index } => {\n-                    let terminator = blocks[bb].terminator_mut();\n-                    match terminator.kind {\n-                        TerminatorKind::InlineAsm { ref mut operands, .. } => {\n-                            match &mut operands[index] {\n-                                InlineAsmOperand::Const { ref mut value } => {\n-                                    let ty = value.ty(local_decls, self.tcx);\n-                                    let span = terminator.source_info.span;\n-\n-                                    Rvalue::Use(mem::replace(value, promoted_operand(ty, span)))\n-                                }\n-                                _ => bug!(),\n-                            }\n-                        }\n-\n-                        _ => bug!(),\n-                    }\n-                }\n             }\n         };\n \n@@ -1161,7 +1113,7 @@ pub fn promote_candidates<'tcx>(\n                     }\n                 }\n             }\n-            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => {}\n+            Candidate::Argument { .. } => {}\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain."}, {"sha": "20830099f1c98d0f495acfd2a723ba2acb1211db", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -366,9 +366,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 }),\n                             }\n                         }\n-                        thir::InlineAsmOperand::Const { expr } => mir::InlineAsmOperand::Const {\n-                            value: unpack!(block = this.as_local_operand(block, expr)),\n-                        },\n+                        thir::InlineAsmOperand::Const { value, span } => {\n+                            mir::InlineAsmOperand::Const {\n+                                value: box Constant { span, user_ty: None, literal: value.into() },\n+                            }\n+                        }\n                         thir::InlineAsmOperand::SymFn { expr } => {\n                             mir::InlineAsmOperand::SymFn { value: box this.as_constant(expr) }\n                         }"}, {"sha": "924278e1a7fb36201000ae517979c31b26d2776e", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -503,8 +503,12 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                             in_expr: self.mirror_expr(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n                         },\n-                        hir::InlineAsmOperand::Const { ref expr } => {\n-                            InlineAsmOperand::Const { expr: self.mirror_expr(expr) }\n+                        hir::InlineAsmOperand::Const { ref anon_const } => {\n+                            let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                            let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                            let span = self.tcx.hir().span(anon_const.hir_id);\n+\n+                            InlineAsmOperand::Const { value, span }\n                         }\n                         hir::InlineAsmOperand::Sym { ref expr } => {\n                             let qpath = match expr.kind {"}, {"sha": "f4596d523d07a711b3363acbdc4509e84b965a46", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -374,7 +374,8 @@ pub enum InlineAsmOperand<'thir, 'tcx> {\n         out_expr: Option<&'thir Expr<'thir, 'tcx>>,\n     },\n     Const {\n-        expr: &'thir Expr<'thir, 'tcx>,\n+        value: &'tcx Const<'tcx>,\n+        span: Span,\n     },\n     SymFn {\n         expr: &'thir Expr<'thir, 'tcx>,"}, {"sha": "02ee268b88c29cc24a0b3a25bd6e6752bb46189d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -107,7 +107,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n+    pub fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n         self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })\n     }\n "}, {"sha": "3f095d0e82427a4a1fc216ce6a814c48d231e02a", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -347,7 +347,7 @@ impl ExprVisitor<'tcx> {\n     }\n \n     fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, (op, _op_sp)) in asm.operands.iter().enumerate() {\n+        for (idx, (op, op_sp)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n@@ -372,14 +372,15 @@ impl ExprVisitor<'tcx> {\n                         );\n                     }\n                 }\n-                hir::InlineAsmOperand::Const { ref expr } => {\n-                    let ty = self.typeck_results.expr_ty_adjusted(expr);\n-                    match ty.kind() {\n+                hir::InlineAsmOperand::Const { ref anon_const } => {\n+                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    match value.ty.kind() {\n                         ty::Int(_) | ty::Uint(_) | ty::Float(_) => {}\n                         _ => {\n                             let msg =\n                                 \"asm `const` arguments must be integer or floating-point values\";\n-                            self.tcx.sess.span_err(expr.span, msg);\n+                            self.tcx.sess.span_err(*op_sp, msg);\n                         }\n                     }\n                 }"}, {"sha": "e22a108aaf07e47ae191aa568982f90079b117e9", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1067,7 +1067,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n-                        | hir::InlineAsmOperand::Const { expr, .. }\n                         | hir::InlineAsmOperand::Sym { expr, .. } => {\n                             succ = self.propagate_through_expr(expr, succ)\n                         }\n@@ -1085,6 +1084,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             }\n                             succ = self.propagate_through_expr(in_expr, succ);\n                         }\n+                        hir::InlineAsmOperand::Const { .. } => {}\n                     }\n                 }\n                 succ"}, {"sha": "5f1c19d6c9407a13efd9397009252e38456553d0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -2087,7 +2087,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_expr_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>) -> Ty<'tcx> {\n         for (op, _op_sp) in asm.operands {\n             match op {\n-                hir::InlineAsmOperand::In { expr, .. } | hir::InlineAsmOperand::Const { expr } => {\n+                hir::InlineAsmOperand::In { expr, .. } => {\n                     self.check_expr_asm_operand(expr, true);\n                 }\n                 hir::InlineAsmOperand::Out { expr, .. } => {\n@@ -2104,6 +2104,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.check_expr_asm_operand(out_expr, false);\n                     }\n                 }\n+                hir::InlineAsmOperand::Const { anon_const } => {\n+                    self.to_const(anon_const);\n+                }\n                 hir::InlineAsmOperand::Sym { expr } => {\n                     self.check_expr(expr);\n                 }"}, {"sha": "80e173de6b6e565c354a843299158c1a4e66592c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -540,6 +540,19 @@ fn typeck_with_fallback<'tcx>(\n                             kind: TypeVariableOriginKind::TypeInference,\n                             span,\n                         }),\n+                        Node::Expr(&hir::Expr { kind: hir::ExprKind::InlineAsm(ia), .. })\n+                            if ia.operands.iter().any(|(op, _op_sp)| match op {\n+                                hir::InlineAsmOperand::Const { anon_const } => {\n+                                    anon_const.hir_id == id\n+                                }\n+                                _ => false,\n+                            }) =>\n+                        {\n+                            fcx.next_ty_var(TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::MiscVariable,\n+                                span,\n+                            })\n+                        }\n                         _ => fallback(),\n                     },\n                     _ => fallback(),"}, {"sha": "d8eea1ad80b0bcc78a0621de3481c4c091ffaf81", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -430,6 +430,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.typeck(def_id).node_type(anon_const.hir_id)\n                 }\n \n+                Node::Expr(&Expr { kind: ExprKind::InlineAsm(ia), .. })\n+                    if ia.operands.iter().any(|(op, _op_sp)| match op {\n+                        hir::InlineAsmOperand::Const { anon_const } => anon_const.hir_id == hir_id,\n+                        _ => false,\n+                    }) =>\n+                {\n+                    tcx.typeck(def_id).node_type(hir_id)\n+                }\n+\n                 Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n                     .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n                     .repr"}, {"sha": "2187a742d95098ffbfa4914f31a0e67a950b9b21", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -313,7 +313,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 for (op, _op_sp) in asm.operands {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n-                        | hir::InlineAsmOperand::Const { expr, .. }\n                         | hir::InlineAsmOperand::Sym { expr, .. } => self.consume_expr(expr),\n                         hir::InlineAsmOperand::Out { expr, .. } => {\n                             if let Some(expr) = expr {\n@@ -329,6 +328,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 self.mutate_expr(out_expr);\n                             }\n                         }\n+                        hir::InlineAsmOperand::Const { .. } => {}\n                     }\n                 }\n             }"}, {"sha": "0f6a7cd44749e033e90c0804facc1ec2884b7b68", "filename": "src/test/ui/asm/const.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fconst.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -4,38 +4,18 @@\n \n #![feature(asm)]\n \n-use std::mem::size_of;\n-\n-trait Proj {\n-    const C: usize;\n-}\n-impl Proj for i8 {\n-    const C: usize = 8;\n-}\n-impl Proj for i16 {\n-    const C: usize = 16;\n+fn const_generic<const X: usize>() -> usize {\n+    unsafe {\n+        let a: usize;\n+        asm!(\"mov {}, {}\", out(reg) a, const X);\n+        a\n+    }\n }\n \n const fn constfn(x: usize) -> usize {\n     x\n }\n \n-fn generic<T: Proj>() {\n-    unsafe {\n-        let a: usize;\n-        asm!(\"mov {}, {}\", out(reg) a, const size_of::<T>());\n-        assert_eq!(a, size_of::<T>());\n-\n-        let b: usize;\n-        asm!(\"mov {}, {}\", out(reg) b, const size_of::<T>() + constfn(5));\n-        assert_eq!(b, size_of::<T>() + 5);\n-\n-        let c: usize;\n-        asm!(\"mov {}, {}\", out(reg) c, const T::C);\n-        assert_eq!(c, T::C);\n-    }\n-}\n-\n fn main() {\n     unsafe {\n         let a: usize;\n@@ -51,6 +31,6 @@ fn main() {\n         assert_eq!(c, 10);\n     }\n \n-    generic::<i8>();\n-    generic::<i16>();\n+    let d = const_generic::<5>();\n+    assert_eq!(d, 5);\n }"}, {"sha": "f2e9d9ca08b2469d646ef6ffa6a39eb0ebd53298", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -36,17 +36,23 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR arguments are not allowed after options\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n+        //~^^^ ERROR attempt to use a non-constant value in a constant\n+        //~^^^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", a = in(\"eax\") foo);\n         //~^ ERROR explicit register arguments cannot have names\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n         //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n         //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{1}\", in(\"eax\") foo, const bar);\n         //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), \"\");\n         //~^ ERROR expected one of\n         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);"}, {"sha": "4ab9d86948de951ffed1e284e9103e515012626b", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 66, "deletions": 11, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -91,78 +91,133 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                    previous options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:39:36\n+  --> $DIR/parse-error.rs:40:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:39:36\n+  --> $DIR/parse-error.rs:40:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:42:18\n+  --> $DIR/parse-error.rs:45:18\n    |\n LL |         asm!(\"\", a = in(\"eax\") foo);\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:47:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:46:36\n+  --> $DIR/parse-error.rs:50:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:48:36\n+  --> $DIR/parse-error.rs:53:36\n    |\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                     -------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:50:29\n+  --> $DIR/parse-error.rs:56:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 8 possible tokens\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:52:33\n+  --> $DIR/parse-error.rs:58:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 8 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:54:14\n+  --> $DIR/parse-error.rs:60:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:56:21\n+  --> $DIR/parse-error.rs:62:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 25 previous errors\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:37:37\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", options(), const foo);\n+   |                                     ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:40:31\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                               ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:40:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:47:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:50:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:53:42\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                                          ^^^ non-constant value\n+\n+error: aborting due to 31 previous errors\n \n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "57a91aaa934e93cc2ef4ffc5286285ca934f8059", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -21,5 +21,23 @@ fn main() {\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n         asm!(\"{}\", inout(reg) v[..]);\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+\n+        // Constants must be... constant\n+\n+        let x = 0;\n+        const fn const_foo(x: i32) -> i32 {\n+            x\n+        }\n+        const fn const_bar<T>(x: T) -> T {\n+            x\n+        }\n+        asm!(\"{}\", const x);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{}\", const const_foo(0));\n+        asm!(\"{}\", const const_foo(x));\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{}\", const const_bar(0));\n+        asm!(\"{}\", const const_bar(x));\n+        //~^ ERROR attempt to use a non-constant value in a constant\n     }\n }"}, {"sha": "eefab6d397788ec45e760eb3bf01327a9cc58f3c", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1,3 +1,30 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:34:26\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const x);\n+   |                          ^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:37:36\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const const_foo(x));\n+   |                                    ^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:40:36\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const const_bar(x));\n+   |                                    ^ non-constant value\n+\n error: invalid asm output\n   --> $DIR/type-check-1.rs:10:29\n    |\n@@ -37,6 +64,7 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0435.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "0677167ccfe7356310cd760bcf85988b53d4198e", "filename": "src/test/ui/asm/type-check-2.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -28,31 +28,19 @@ fn main() {\n \n         // Const operands must be integer or floats, and must be constants.\n \n-        let x = 0;\n-        const C: i32 = 0;\n-        const fn const_foo(x: i32) -> i32 {\n-            x\n-        }\n-        const fn const_bar<T>(x: T) -> T {\n-            x\n-        }\n+        asm!(\"{}\", const 0);\n         asm!(\"{}\", const 0i32);\n         asm!(\"{}\", const 0f32);\n         asm!(\"{}\", const 0 as *mut u8);\n         //~^ ERROR asm `const` arguments must be integer or floating-point values\n-        asm!(\"{}\", const &0);\n-        //~^ ERROR asm `const` arguments must be integer or floating-point values\n-        asm!(\"{}\", const x);\n-        //~^ ERROR argument 1 is required to be a constant\n-        asm!(\"{}\", const const_foo(0));\n-        asm!(\"{}\", const const_foo(x));\n-        //~^ ERROR argument 1 is required to be a constant\n-        asm!(\"{}\", const const_bar(0));\n-        asm!(\"{}\", const const_bar(x));\n-        //~^ ERROR argument 1 is required to be a constant\n+\n+        // This currently causes an ICE: https://github.com/rust-lang/rust/issues/81857\n+        // asm!(\"{}\", const &0);\n+        // ERROR asm `const` arguments must be integer or floating-point values\n \n         // Sym operands must point to a function or static\n \n+        const C: i32 = 0;\n         static S: i32 = 0;\n         asm!(\"{}\", sym S);\n         asm!(\"{}\", sym main);"}, {"sha": "830ca7b55509dd1caa2203e1ba57b58f96350f5e", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -1,33 +1,27 @@\n error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:41:26\n+  --> $DIR/type-check-2.rs:34:20\n    |\n LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                          ^^^^^^^^^^^^\n-\n-error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:43:26\n-   |\n-LL |         asm!(\"{}\", const &0);\n-   |                          ^^\n+   |                    ^^^^^^^^^^^^^^^^^^\n \n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:66:32\n+  --> $DIR/type-check-2.rs:54:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:78:28: 78:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:78:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:66:28: 66:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:66:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:80:28\n+  --> $DIR/type-check-2.rs:68:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -36,67 +30,49 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:82:28\n+  --> $DIR/type-check-2.rs:70:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:84:28\n+  --> $DIR/type-check-2.rs:72:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:92:31\n+  --> $DIR/type-check-2.rs:80:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:95:31\n+  --> $DIR/type-check-2.rs:83:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:59:24\n+  --> $DIR/type-check-2.rs:47:24\n    |\n LL |         asm!(\"{}\", sym C);\n    |                        ^\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:61:24\n+  --> $DIR/type-check-2.rs:49:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^\n \n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:45:9\n-   |\n-LL |         asm!(\"{}\", const x);\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:48:9\n-   |\n-LL |         asm!(\"{}\", const const_foo(x));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:51:9\n-   |\n-LL |         asm!(\"{}\", const const_bar(x));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/type-check-2.rs:13:28\n    |\n@@ -127,7 +103,7 @@ LL |         let v: Vec<u64> = vec![0, 1, 2];\n LL |         asm!(\"{}\", inout(reg) v[0]);\n    |                               ^ cannot borrow as mutable\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "01a7627fc7f34d12dc8f687401ac63f5c07fc664", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -142,12 +142,12 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n-                | InlineAsmOperand::Const { expr }\n                 | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n                 InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n                 },\n+                InlineAsmOperand::Const { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)"}, {"sha": "b3fe66ed4285eff8ba0a54f4e48275c70e0ee1ca", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -306,7 +306,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }\n-                    | hir::InlineAsmOperand::Const { expr }\n                     | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -319,6 +318,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                             print_expr(cx, out_expr, indent + 1);\n                         }\n                     },\n+                    hir::InlineAsmOperand::Const { anon_const } => {\n+                        println!(\"{}anon_const:\", ind);\n+                        print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+                    }\n                 }\n             }\n         },"}, {"sha": "b30c0b7988194d20bc6835cc06c70325043d953f", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32be124e306e537590cedcb56e6c16db7f9d8ce7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=32be124e306e537590cedcb56e6c16db7f9d8ce7", "patch": "@@ -663,7 +663,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                                 self.hash_expr(out_expr);\n                             }\n                         },\n-                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                        InlineAsmOperand::Const { anon_const } => self.hash_body(anon_const.body),\n+                        InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n                     }\n                 }\n             },"}]}