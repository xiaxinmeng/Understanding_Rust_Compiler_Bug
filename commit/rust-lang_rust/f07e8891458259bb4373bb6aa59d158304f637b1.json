{"sha": "f07e8891458259bb4373bb6aa59d158304f637b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2U4ODkxNDU4MjU5YmI0MzczYmI2YWE1OWQxNTgzMDRmNjM3YjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-06T19:13:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-16T10:49:29Z"}, "message": "Make librustc_infer compile.", "tree": {"sha": "3608a5e0b0277ea9c00ee5aaf884d98242b4adbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3608a5e0b0277ea9c00ee5aaf884d98242b4adbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07e8891458259bb4373bb6aa59d158304f637b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07e8891458259bb4373bb6aa59d158304f637b1", "html_url": "https://github.com/rust-lang/rust/commit/f07e8891458259bb4373bb6aa59d158304f637b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07e8891458259bb4373bb6aa59d158304f637b1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187a9741d3cd63dd78571e2a0e08344aef05f51b", "url": "https://api.github.com/repos/rust-lang/rust/commits/187a9741d3cd63dd78571e2a0e08344aef05f51b", "html_url": "https://github.com/rust-lang/rust/commit/187a9741d3cd63dd78571e2a0e08344aef05f51b"}], "stats": {"total": 372, "additions": 284, "deletions": 88}, "files": [{"sha": "f8b4eca99eefa422d84066a9bbb4d7aeda6eb54d", "filename": "Cargo.lock", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -3776,6 +3776,28 @@ dependencies = [\n  \"smallvec 1.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_infer\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"fmt_macros\",\n+ \"graphviz\",\n+ \"log\",\n+ \"rustc\",\n+ \"rustc_attr\",\n+ \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n+ \"rustc_errors\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_macros\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"smallvec 1.0.0\",\n+ \"syntax\",\n+]\n+\n [[package]]\n name = \"rustc_interface\"\n version = \"0.0.0\"\n@@ -3838,6 +3860,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -3907,6 +3930,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_span\",\n@@ -3929,6 +3953,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_macros\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -3969,6 +3994,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -4019,6 +4045,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n+ \"rustc_infer\",\n  \"rustc_metadata\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4108,6 +4135,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n+ \"rustc_infer\",\n  \"rustc_macros\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -4123,6 +4151,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n+ \"rustc_infer\",\n  \"rustc_span\",\n  \"rustc_target\",\n ]\n@@ -4139,6 +4168,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_infer\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\","}, {"sha": "53970a4aaf3151a1c040e3eafc1b9770ed519283", "filename": "src/librustc_infer/Cargo.toml", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -0,0 +1,28 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_infer\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_infer\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+fmt_macros = { path = \"../libfmt_macros\" }\n+graphviz = { path = \"../libgraphviz\" }\n+log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n+rustc_attr = { path = \"../librustc_attr\" }\n+rustc = { path = \"../librustc\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n+rustc_session = { path = \"../librustc_session\" }\n+rustc_span = { path = \"../librustc_span\" }\n+rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "ba019a8cf0369a67e49b4c8de12559bde2193af3", "filename": "src/librustc_infer/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -29,12 +29,11 @@ use rustc::ty::{self, BoundVar, List};\n use rustc_index::vec::IndexVec;\n use rustc_span::source_map::Span;\n \n-pub use rustc::infer::types::canonical::*;\n+pub use rustc::infer::canonical::*;\n+use substitute::CanonicalExt;\n \n mod canonicalizer;\n-\n pub mod query_response;\n-\n mod substitute;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {"}, {"sha": "5dc98cb6febbbab800a3cb31e74836a5c8d12506", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -8,7 +8,7 @@\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use crate::arena::ArenaAllocatable;\n-use crate::infer::canonical::substitute::substitute_value;\n+use crate::infer::canonical::substitute::{substitute_value, CanonicalExt};\n use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n@@ -19,9 +19,9 @@ use crate::infer::{InferCtxt, InferOk, InferResult};\n use crate::traits::query::{Fallible, NoSolution};\n use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n-use crate::ty::fold::TypeFoldable;\n-use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, BoundVar, Ty, TyCtxt};\n+use rustc::ty::fold::TypeFoldable;\n+use rustc::ty::subst::{GenericArg, GenericArgKind};\n+use rustc::ty::{self, BoundVar, Ty, TyCtxt};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;"}, {"sha": "92066048261d63d602765a6610b6b5f9fd614645", "filename": "src/librustc_infer/infer/canonical/substitute.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -11,23 +11,38 @@ use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, TyCtxt};\n \n-impl<'tcx, V> Canonical<'tcx, V> {\n+pub(super) trait CanonicalExt<'tcx, V> {\n     /// Instantiate the wrapped value, replacing each canonical value\n     /// with the value given in `var_values`.\n-    pub fn substitute(&self, tcx: TyCtxt<'tcx>, var_values: &CanonicalVarValues<'tcx>) -> V\n+    fn substitute(&self, tcx: TyCtxt<'tcx>, var_values: &CanonicalVarValues<'tcx>) -> V\n     where\n-        V: TypeFoldable<'tcx>,\n-    {\n-        self.substitute_projected(tcx, var_values, |value| value)\n-    }\n+        V: TypeFoldable<'tcx>;\n \n     /// Allows one to apply a substitute to some subset of\n     /// `self.value`. Invoke `projection_fn` with `self.value` to get\n     /// a value V that is expressed in terms of the same canonical\n     /// variables bound in `self` (usually this extracts from subset\n     /// of `self`). Apply the substitution `var_values` to this value\n     /// V, replacing each of the canonical variables.\n-    pub fn substitute_projected<T>(\n+    fn substitute_projected<T>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        var_values: &CanonicalVarValues<'tcx>,\n+        projection_fn: impl FnOnce(&V) -> &T,\n+    ) -> T\n+    where\n+        T: TypeFoldable<'tcx>;\n+}\n+\n+impl<'tcx, V> CanonicalExt<'tcx, V> for Canonical<'tcx, V> {\n+    fn substitute(&self, tcx: TyCtxt<'tcx>, var_values: &CanonicalVarValues<'tcx>) -> V\n+    where\n+        V: TypeFoldable<'tcx>,\n+    {\n+        self.substitute_projected(tcx, var_values, |value| value)\n+    }\n+\n+    fn substitute_projected<T>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         var_values: &CanonicalVarValues<'tcx>,"}, {"sha": "77119b8618f173508c50aa331a61c4e75d6a6893", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -49,17 +49,18 @@ use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n-use crate::hir::map;\n use crate::infer::opaque_types;\n use crate::infer::{self, SuppressRegionErrors};\n-use crate::middle::region;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::object_safety_violations;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n };\n-use crate::ty::error::TypeError;\n-use crate::ty::{\n+\n+use rustc::hir::map;\n+use rustc::middle::region;\n+use rustc::ty::error::TypeError;\n+use rustc::ty::{\n     self,\n     subst::{Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n@@ -2005,7 +2006,12 @@ enum FailureCode {\n     Error0644(&'static str),\n }\n \n-impl<'tcx> ObligationCause<'tcx> {\n+trait ObligationCauseExt<'tcx> {\n+    fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode;\n+    fn as_requirement_str(&self) -> &'static str;\n+}\n+\n+impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n     fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode {\n         use self::FailureCode::*;\n         use crate::traits::ObligationCauseCode::*;"}, {"sha": "7a7cfdecbaf7dce8de3e5106eb72f50611f8ebe5", "filename": "src/librustc_infer/infer/error_reporting/note.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -1,8 +1,8 @@\n-use crate::infer::error_reporting::note_and_explain_region;\n+use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n-use crate::middle::region;\n-use crate::ty::error::TypeError;\n-use crate::ty::{self, Region};\n+use rustc::middle::region;\n+use rustc::ty::error::TypeError;\n+use rustc::ty::{self, Region};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {"}, {"sha": "b7f83625757ff10623c5db460cf5c2ed242ce6c3", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -7,19 +7,21 @@ pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n pub use crate::ty::IntVarValue;\n \n-use crate::infer::canonical::{Canonical, CanonicalVarValues};\n-use crate::infer::unify_key::{ConstVarValue, ConstVariableValue};\n-use crate::middle::free_region::RegionRelations;\n-use crate::middle::lang_items;\n-use crate::middle::region;\n-use crate::session::config::BorrowckMode;\n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n-use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n-use crate::ty::fold::{TypeFoldable, TypeFolder};\n-use crate::ty::relate::RelateResult;\n-use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n-use crate::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n-use crate::ty::{ConstVid, FloatVid, IntVid, TyVid};\n+\n+use rustc::infer::canonical::{Canonical, CanonicalVarValues};\n+use rustc::infer::unify_key::{ConstVarValue, ConstVariableValue};\n+use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n+use rustc::middle::free_region::RegionRelations;\n+use rustc::middle::lang_items;\n+use rustc::middle::region;\n+use rustc::session::config::BorrowckMode;\n+use rustc::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n+use rustc::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc::ty::relate::RelateResult;\n+use rustc::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n+use rustc::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n+use rustc::ty::{ConstVid, FloatVid, IntVid, TyVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -40,7 +42,6 @@ use self::outlives::env::OutlivesEnvironment;\n use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, VerifyBound};\n use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n use self::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use self::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n \n pub mod at;\n pub mod canonical;\n@@ -61,8 +62,8 @@ pub mod region_constraints;\n pub mod resolve;\n mod sub;\n pub mod type_variable;\n-mod types;\n-pub mod unify_key;\n+\n+pub use rustc::infer::unify_key;\n \n #[must_use]\n #[derive(Debug)]\n@@ -524,8 +525,12 @@ pub struct InferCtxtBuilder<'tcx> {\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n-impl TyCtxt<'tcx> {\n-    pub fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n+pub trait TyCtxtInferExt<'tcx> {\n+    fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;\n+}\n+\n+impl TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n+    fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n         InferCtxtBuilder { global_tcx: self, fresh_tables: None }\n     }\n }"}, {"sha": "88733f1901a5b713cfca9292b9be6cf6c196ba23", "filename": "src/librustc_infer/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fobligations.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -66,8 +66,10 @@ use crate::traits::ObligationCause;\n use crate::ty::outlives::Component;\n use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n+use smallvec::smallvec;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// Registers that the given region obligation must be resolved"}, {"sha": "4a05bfc64b177e126e30823db96d51c8af95fb2b", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -6,6 +6,8 @@ use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::captures::Captures;\n use rustc_hir::def_id::DefId;\n \n+use smallvec::smallvec;\n+\n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as\n /// described on the module comment. The final constraints are emitted"}, {"sha": "af4e199f2880495716660112ca2bab6f49aa019a", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -6,10 +6,10 @@ use self::UndoLog::*;\n use super::unify_key;\n use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n \n-use crate::ty::ReStatic;\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::{ReLateBound, ReVar};\n-use crate::ty::{Region, RegionVid};\n+use rustc::ty::ReStatic;\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{ReLateBound, ReVar};\n+use rustc::ty::{Region, RegionVid};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n@@ -23,7 +23,7 @@ use std::{cmp, fmt, mem};\n \n mod leak_check;\n \n-pub use rustc::infer::types::MemberConstraint;\n+pub use rustc::infer::MemberConstraint;\n \n #[derive(Default)]\n pub struct RegionConstraintCollector<'tcx> {"}, {"sha": "d64c9e2f90ba2a9190061d37010c8e024b8cf55e", "filename": "src/librustc_infer/lib.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -0,0 +1,67 @@\n+//! This crates defines the trait resolution method and the type inference engine.\n+//!\n+//! - **Traits.** Trait resolution is implemented in the `traits` module.\n+//! - **Type inference.** The type inference code can be found in the `infer` module;\n+//!   this code handles low-level equality and subtyping operations. The\n+//!   type check pass in the compiler is found in the `librustc_typeck` crate.\n+//!\n+//! For more information about how rustc works, see the [rustc guide].\n+//!\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(arbitrary_self_types)]\n+#![feature(bool_to_option)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(const_fn)]\n+#![feature(const_transmute)]\n+#![feature(core_intrinsics)]\n+#![feature(drain_filter)]\n+#![cfg_attr(windows, feature(libc))]\n+#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n+#![feature(overlapping_marker_traits)]\n+#![feature(extern_types)]\n+#![feature(nll)]\n+#![feature(optin_builtin_traits)]\n+#![feature(option_expect_none)]\n+#![feature(range_is_empty)]\n+#![feature(specialization)]\n+#![feature(unboxed_closures)]\n+#![feature(thread_local)]\n+#![feature(trace_macros)]\n+#![feature(trusted_len)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(integer_atomics)]\n+#![feature(test)]\n+#![feature(in_band_lifetimes)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(log_syntax)]\n+#![feature(associated_type_bounds)]\n+#![feature(rustc_attrs)]\n+#![feature(hash_raw_entry)]\n+#![recursion_limit = \"512\"]\n+\n+#[macro_use]\n+extern crate rustc_macros;\n+#[macro_use]\n+extern crate rustc_data_structures;\n+#[macro_use]\n+extern crate log;\n+#[macro_use]\n+extern crate rustc;\n+\n+use rustc::arena;\n+use rustc::dep_graph;\n+use rustc::hir;\n+pub mod infer;\n+use rustc::middle;\n+pub use rustc_session as session;\n+pub mod traits;\n+use rustc::ty;\n+use rustc::util;"}, {"sha": "b28523d955da70ff0c43ac38f1f2f3c9ec8d4d88", "filename": "src/librustc_infer/traits/chalk_fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fchalk_fulfill.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, OriginalQueryValues};\n+use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::query::NoSolution;\n use crate::traits::{\n@@ -8,7 +8,7 @@ use crate::traits::{\n use crate::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n \n-pub type CanonicalGoal<'tcx> = Canonical<'tcx, InEnvironment<'tcx, ty::Predicate<'tcx>>>;\n+pub use rustc::traits::ChalkCanonicalGoal as CanonicalGoal;\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxHashSet<InEnvironment<'tcx, PredicateObligation<'tcx>>>,"}, {"sha": "4f6c9428fc2185f2d07e3445ae3314b7b442914c", "filename": "src/librustc_infer/traits/codegen/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcodegen%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -3,7 +3,7 @@\n // seems likely that they should eventually be merged into more\n // general routines.\n \n-use crate::infer::InferCtxt;\n+use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::{\n     FulfillmentContext, Obligation, ObligationCause, SelectionContext, TraitEngine, Vtable,\n };"}, {"sha": "cafdb0353d56ed670e9eb0e0412b523bc9c909a0", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -4,7 +4,7 @@\n //! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n //! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n-use crate::infer::{CombinedSnapshot, InferOk};\n+use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionContext};"}, {"sha": "4bc8ffc3d2f43be0f5a8c35b4f5c1932edd27b88", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -11,18 +11,17 @@ use super::{\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::{self, InferCtxt};\n-use crate::mir::interpret::ErrorHandled;\n-use crate::session::DiagnosticMessageId;\n+use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use crate::traits::object_safety_violations;\n-use crate::ty::error::ExpectedFound;\n-use crate::ty::fast_reject;\n-use crate::ty::fold::TypeFolder;\n-use crate::ty::SubtypePredicate;\n-use crate::ty::{\n+use rustc::mir::interpret::ErrorHandled;\n+use rustc::session::DiagnosticMessageId;\n+use rustc::ty::error::ExpectedFound;\n+use rustc::ty::fast_reject;\n+use rustc::ty::fold::TypeFolder;\n+use rustc::ty::SubtypePredicate;\n+use rustc::ty::{\n     self, AdtKind, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;"}, {"sha": "7ab918c159e1f7fb31c04e266e0e171917be4827", "filename": "src/librustc_infer/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmisc.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -1,8 +1,9 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n+use crate::infer::TyCtxtInferExt;\n use crate::traits::{self, ObligationCause};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as hir;\n \n #[derive(Clone)]"}, {"sha": "6226d38f88eb8590fcd076580559b2b9b2baa141", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -19,12 +19,11 @@ mod select;\n mod specialize;\n mod structural_impls;\n mod structural_match;\n-mod types;\n mod util;\n pub mod wf;\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n-use crate::infer::{InferCtxt, SuppressRegionErrors};\n+use crate::infer::{InferCtxt, SuppressRegionErrors, TyCtxtInferExt};\n use crate::middle::region;\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::fold::TypeFoldable;\n@@ -38,6 +37,9 @@ use rustc_span::{Span, DUMMY_SP};\n use std::fmt::Debug;\n \n pub use self::FulfillmentErrorCode::*;\n+pub use self::ObligationCauseCode::*;\n+pub use self::SelectionError::*;\n+pub use self::Vtable::*;\n \n pub use self::coherence::{add_placeholder_note, orphan_check, overlapping_impls};\n pub use self::coherence::{OrphanCheckErr, OverlapResult};\n@@ -53,8 +55,9 @@ pub use self::project::MismatchedProjectionTypes;\n pub use self::project::{\n     normalize, normalize_projection_type, normalize_to, poly_project_and_unify_type,\n };\n-pub use self::project::{Normalized, ProjectionCache, ProjectionCacheSnapshot};\n-pub use self::select::{IntercrateAmbiguityCause, SelectionContext};\n+pub use self::project::{Normalized, ProjectionCache, ProjectionCacheSnapshot, Reveal};\n+pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n+pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::find_associated_item;\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n@@ -76,7 +79,7 @@ pub use self::chalk_fulfill::{\n     CanonicalGoal as ChalkCanonicalGoal, FulfillmentContext as ChalkFulfillmentContext,\n };\n \n-pub use self::types::*;\n+pub use rustc::traits::*;\n \n /// Whether to skip the leak check, as part of a future compatibility warning step.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "e35b03a343167c4e6b22c974fb3167fbb137e47f", "filename": "src/librustc_infer/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -10,6 +10,7 @@\n \n use super::elaborate_predicates;\n \n+use crate::infer::TyCtxtInferExt;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};"}, {"sha": "77b5ec669a09977888ae76d5c232a45d9bcf0383", "filename": "src/librustc_infer/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fquery%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -12,4 +12,4 @@ pub mod normalize;\n pub mod outlives_bounds;\n pub mod type_op;\n \n-pub use rustc::traits::types::query::*;\n+pub use rustc::traits::query::*;"}, {"sha": "5f131e97056052ba6321da14b90e65b243855ba9", "filename": "src/librustc_infer/traits/query/type_op/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -19,7 +19,7 @@ pub mod prove_predicate;\n use self::prove_predicate::ProvePredicate;\n pub mod subtype;\n \n-pub use crate::traits::types::query::type_op::*;\n+pub use rustc::traits::query::type_op::*;\n \n /// \"Type ops\" are used in NLL to perform some particular action and\n /// extract out the resulting region constraints (or an error if it"}, {"sha": "9abf030ca382dacf737164c5133a028e732c8062", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -54,7 +54,7 @@ use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n \n-pub use rustc::traits::types::select::*;\n+pub use rustc::traits::select::*;\n \n pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,"}, {"sha": "d300b6f6dd4ccb78ac8a1e37912d8d03853b44c0", "filename": "src/librustc_infer/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -10,8 +10,9 @@\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n pub mod specialization_graph;\n+use specialization_graph::GraphExt;\n \n-use crate::infer::{InferCtxt, InferOk};\n+use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};"}, {"sha": "17d4a22b9dd551fbd416548792f9daf4207850a9", "filename": "src/librustc_infer/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::fast_reject::{self, SimplifiedType};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_hir::def_id::DefId;\n \n-pub use rustc::traits::types::specialization_graph::*;\n+pub use rustc::traits::specialization_graph::*;\n \n #[derive(Copy, Clone, Debug)]\n pub enum FutureCompatOverlapErrorKind {\n@@ -31,7 +31,19 @@ enum Inserted {\n     ShouldRecurseOn(DefId),\n }\n \n-impl<'tcx> Children {\n+trait ChildrenExt {\n+    fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId);\n+    fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId);\n+\n+    fn insert(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        impl_def_id: DefId,\n+        simplified_self: Option<SimplifiedType>,\n+    ) -> Result<Inserted, OverlapError>;\n+}\n+\n+impl ChildrenExt for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n@@ -76,8 +88,8 @@ impl<'tcx> Children {\n         debug!(\"insert(impl_def_id={:?}, simplified_self={:?})\", impl_def_id, simplified_self,);\n \n         let possible_siblings = match simplified_self {\n-            Some(st) => PotentialSiblings::Filtered(self.filtered(st)),\n-            None => PotentialSiblings::Unfiltered(self.iter()),\n+            Some(st) => PotentialSiblings::Filtered(filtered_children(self, st)),\n+            None => PotentialSiblings::Unfiltered(iter_children(self)),\n         };\n \n         for possible_sibling in possible_siblings {\n@@ -199,16 +211,19 @@ impl<'tcx> Children {\n         self.insert_blindly(tcx, impl_def_id);\n         Ok(Inserted::BecameNewSibling(last_lint))\n     }\n+}\n \n-    fn iter(&mut self) -> impl Iterator<Item = DefId> + '_ {\n-        let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n-        self.blanket_impls.iter().chain(nonblanket).cloned()\n-    }\n+fn iter_children(children: &mut Children) -> impl Iterator<Item = DefId> + '_ {\n+    let nonblanket = children.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n+    children.blanket_impls.iter().chain(nonblanket).cloned()\n+}\n \n-    fn filtered(&mut self, st: SimplifiedType) -> impl Iterator<Item = DefId> + '_ {\n-        let nonblanket = self.nonblanket_impls.entry(st).or_default().iter();\n-        self.blanket_impls.iter().chain(nonblanket).cloned()\n-    }\n+fn filtered_children(\n+    children: &mut Children,\n+    st: SimplifiedType,\n+) -> impl Iterator<Item = DefId> + '_ {\n+    let nonblanket = children.nonblanket_impls.entry(st).or_default().iter();\n+    children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n \n // A custom iterator used by Children::insert\n@@ -236,11 +251,25 @@ where\n     }\n }\n \n-impl<'tcx> Graph {\n+pub trait GraphExt {\n     /// Insert a local impl into the specialization graph. If an existing impl\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n-    pub fn insert(\n+    fn insert(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        impl_def_id: DefId,\n+    ) -> Result<Option<FutureCompatOverlapError>, OverlapError>;\n+\n+    /// Insert cached metadata mapping from a child impl back to its parent.\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId);\n+}\n+\n+impl GraphExt for Graph {\n+    /// Insert a local impl into the specialization graph. If an existing impl\n+    /// conflicts with it (has overlap, but neither specializes the other),\n+    /// information about the area of overlap is returned in the `Err`.\n+    fn insert(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         impl_def_id: DefId,\n@@ -337,7 +366,7 @@ impl<'tcx> Graph {\n     }\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    pub fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId) {\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n             bug!(\n                 \"When recording an impl from the crate store, information about its parent \\"}, {"sha": "60682f5812917a4419b54e01a0916df800607976", "filename": "src/librustc_infer/traits/structural_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fstructural_match.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -1,9 +1,8 @@\n-use crate::ty::fold::{TypeFoldable, TypeVisitor};\n-use crate::ty::{self, AdtDef, Ty, TyCtxt};\n+use crate::infer::{InferCtxt, TyCtxtInferExt};\n+use crate::traits::ObligationCause;\n+use crate::traits::{self, ConstPatternStructural, TraitEngine};\n \n-use rustc::infer::InferCtxt;\n-use rustc::traits::ObligationCause;\n-use rustc::traits::{self, ConstPatternStructural, TraitEngine};\n+use rustc::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_span::Span;"}, {"sha": "1c0638d4528fab035ce5fcfc7c31be1514287189", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::DiagnosticBuilder;\n use rustc_span::Span;\n+use smallvec::smallvec;\n use smallvec::SmallVec;\n \n use crate::ty::outlives::Component;"}, {"sha": "1c2c241c000e70839776b48ec20f82798e7b05d7", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -23,3 +23,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_infer = { path = \"../librustc_infer\" }"}, {"sha": "3554fe54c4597d6adde4ba1a0eda8bfef4f59f53", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -23,6 +23,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_infer = { path = \"../librustc_infer\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "fac30637dd077e52bc12df1dc8e6d85cf8c27f0c", "filename": "src/librustc_mir_build/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_mir_build%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_mir_build%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -19,6 +19,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_infer = { path = \"../librustc_infer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "41718b21f520c45eebf1218abf3d2ec8ab72e4c4", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -17,6 +17,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_infer = { path = \"../librustc_infer\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "a40c3ca0f9eca6c9ca4d5cf4fbaeee6b508a77f9", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -24,6 +24,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_infer = { path = \"../librustc_infer\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "40ca2ea90f2f487daa1284fd90d44ee170e4345f", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -19,3 +19,4 @@ syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_infer = { path = \"../librustc_infer\" }"}, {"sha": "6e64df3492b0fedbf1c1adf5dede034bd4f8f4a0", "filename": "src/librustc_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -13,5 +13,6 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_infer = { path = \"../librustc_infer\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "f1890f9f4e6f12c420c1c3e0a120d84a58374cce", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f07e8891458259bb4373bb6aa59d158304f637b1/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=f07e8891458259bb4373bb6aa59d158304f637b1", "patch": "@@ -23,3 +23,4 @@ smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_infer = { path = \"../librustc_infer\" }"}]}