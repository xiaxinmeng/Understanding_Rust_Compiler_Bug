{"sha": "b04c40bb1c96202409f663480076977619a1da30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNGM0MGJiMWM5NjIwMjQwOWY2NjM0ODAwNzY5Nzc2MTlhMWRhMzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-27T23:04:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-28T20:27:35Z"}, "message": "Silence various warnings throughout test modules", "tree": {"sha": "25282b839ffd52b6bbf2ab8f8e6825b51d5edcb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25282b839ffd52b6bbf2ab8f8e6825b51d5edcb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04c40bb1c96202409f663480076977619a1da30", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04c40bb1c96202409f663480076977619a1da30", "html_url": "https://github.com/rust-lang/rust/commit/b04c40bb1c96202409f663480076977619a1da30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04c40bb1c96202409f663480076977619a1da30/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8749cb59d8efd6634617cae0b586efcf03373c25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8749cb59d8efd6634617cae0b586efcf03373c25", "html_url": "https://github.com/rust-lang/rust/commit/8749cb59d8efd6634617cae0b586efcf03373c25"}], "stats": {"total": 340, "additions": 168, "deletions": 172}, "files": [{"sha": "4baa1168b3b4c5c602567b1f9d29ad87fd416bc4", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -510,7 +510,6 @@ mod tests {\n     use core::prelude::*;\n     use core::cell::Cell;\n     use arc::*;\n-    use arc;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "1a6e42d2fbba9938386b267365c452aabf3ce3f2", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -1197,7 +1197,7 @@ mod tests {\n     #[test]\n     fn test_from_bytes() {\n         let bitv = from_bytes([0b10110110, 0b00000000, 0b11111111]);\n-        let str = ~\"10110110\" + ~\"00000000\" + ~\"11111111\";\n+        let str = ~\"10110110\" + \"00000000\" + \"11111111\";\n         assert_eq!(bitv.to_str(), str);\n     }\n "}, {"sha": "8cb94abcd38c02a3a6759ba6e2937a7a39c278e4", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -927,7 +927,7 @@ mod test {\n         fn test_try_recv_none3<P:BytePort>(loader: PortLoader<P>) {\n             static CONTINUE: [u8, ..4] = [0xAA, 0xBB, 0xCC, 0xDD];\n             // The control word is followed by garbage\n-            let bytes = CONTINUE.to_vec() + ~[0];\n+            let bytes = CONTINUE.to_vec() + [0];\n             let port = loader(bytes);\n             let res: Option<int> = port.try_recv();\n             assert!(res.is_none());\n@@ -951,7 +951,7 @@ mod test {\n                     1, sys::size_of::<u64>()) |len_bytes| {\n                     len_bytes.to_vec()\n                 };\n-                let bytes = CONTINUE.to_vec() + len_bytes + ~[0, 0, 0, 0];\n+                let bytes = CONTINUE.to_vec() + len_bytes + [0, 0, 0, 0];\n \n                 let port = loader(bytes);\n "}, {"sha": "15823d6806249efa0c47b39a1a2e9bf5877dde9c", "filename": "src/libextra/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -1880,13 +1880,13 @@ mod tests {\n                   ]));\n         assert_eq!(result::unwrap(from_str(\n                       ~\"{\" +\n-                          ~\"\\\"a\\\": 1.0, \" +\n-                          ~\"\\\"b\\\": [\" +\n-                              ~\"true,\" +\n-                              ~\"\\\"foo\\\\nbar\\\", \" +\n-                              ~\"{ \\\"c\\\": {\\\"d\\\": null} } \" +\n-                          ~\"]\" +\n-                      ~\"}\")),\n+                          \"\\\"a\\\": 1.0, \" +\n+                          \"\\\"b\\\": [\" +\n+                              \"true,\" +\n+                              \"\\\"foo\\\\nbar\\\", \" +\n+                              \"{ \\\"c\\\": {\\\"d\\\": null} } \" +\n+                          \"]\" +\n+                      \"}\")),\n                   mk_object([\n                       (~\"a\", Number(1.0f)),\n                       (~\"b\", List(~["}, {"sha": "a9c8540a83cc9b028a1a8539bea4e978cea4b3ce", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -375,7 +375,6 @@ mod test {\n     use uv;\n \n     use core::result;\n-    use core::vec;\n \n     #[test]\n     fn test_ip_ipv4_parse_and_format_ip() {"}, {"sha": "e970d34ff915371d0d06e4ad92b4e0899350f96e", "filename": "src/libextra/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -317,7 +317,7 @@ mod tests {\n             Test {\n                 input:\n                      ~\"abcdbcdecdefdefgefghfghighij\" +\n-                     ~\"hijkijkljklmklmnlmnomnopnopq\",\n+                     \"hijkijkljklmklmnlmnomnopnopq\",\n                 output: ~[\n                     0x84u8, 0x98u8, 0x3Eu8, 0x44u8,\n                     0x1Cu8, 0x3Bu8, 0xD2u8, 0x6Eu8,"}, {"sha": "3039fa46f0623f4ef14588dbcb99a98b1e98575b", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -746,8 +746,6 @@ fn shift_vec<T:Copy>(dest: &mut [T],\n \n #[cfg(test)]\n mod test_qsort3 {\n-    use core::prelude::*;\n-\n     use sort::*;\n \n     use core::vec;"}, {"sha": "48f34fdf46a7092664dbfc2ff5206323c6cc5fdb", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -720,7 +720,6 @@ mod tests {\n \n     use core::cast;\n     use core::cell::Cell;\n-    use core::ptr;\n     use core::result;\n     use core::task;\n     use core::vec;"}, {"sha": "7f073d0decb0a5ae51c294afb7e3f93187747a6c", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -30,7 +30,6 @@ mod tests {\n     use core::prelude::*;\n \n     use tempfile::mkdtemp;\n-    use tempfile;\n     use core::os;\n \n     #[test]"}, {"sha": "d5a8cd78249bf1f2862bba633dc0c0851accc31a", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -1205,8 +1205,8 @@ mod tests {\n         // abbreviation.\n         let rfc822 = local.rfc822();\n         let prefix = ~\"Fri, 13 Feb 2009 15:31:30 \";\n-        assert!(rfc822 == prefix + ~\"PST\" ||\n-                     rfc822 == prefix + ~\"Pacific Standard Time\");\n+        assert!(rfc822 == prefix + \"PST\" ||\n+                     rfc822 == prefix + \"Pacific Standard Time\");\n \n         assert_eq!(local.ctime(), ~\"Fri Feb 13 15:31:30 2009\");\n         assert_eq!(local.rfc822z(), ~\"Fri, 13 Feb 2009 15:31:30 -0800\");"}, {"sha": "ae59f91cf83d241d65265c09d5c95e2932a9162d", "filename": "src/libextra/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibextra%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_global_loop.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -126,9 +126,7 @@ mod test {\n     use uv::ll;\n     use uv_iotask::IoTask;\n \n-    use core::old_iter;\n     use core::libc;\n-    use core::ptr;\n     use core::task;\n     use core::cast::transmute;\n     use core::libc::c_void;\n@@ -228,7 +226,7 @@ mod test {\n         for cycles.times {\n             exit_po.recv();\n         };\n-        debug!(~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n-            ~\" exiting successfully!\");\n+        debug!(\"test_stress_gl_uv_global_loop_high_level_global_timer \\\n+                exiting successfully!\");\n     }\n }"}, {"sha": "0107517ff3f3dc7d64bc09e1767b45d8390df4dc", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -139,7 +139,7 @@ pub fn stash_expr_if(c: @fn(@ast::expr, test_mode)->bool,\n                      e: @ast::expr,\n                      tm: test_mode) {\n     if c(e, tm) {\n-        *es = *es + ~[e];\n+        *es = *es + [e];\n     } else {\n         /* now my indices are wrong :( */\n     }\n@@ -425,7 +425,7 @@ pub fn check_running(exe_filename: &Path) -> happiness {\n     let p = run::process_output(\n         \"/Users/jruderman/scripts/timed_run_rust_program.py\",\n         [exe_filename.to_str()]);\n-    let comb = str::from_bytes(p.output) + ~\"\\n\" + str::from_bytes(p.error);\n+    let comb = str::from_bytes(p.output) + \"\\n\" + str::from_bytes(p.error);\n     if str::len(comb) > 1u {\n         error!(\"comb comb comb: %?\", comb);\n     }"}, {"sha": "8695d0c79efc0ad3b99f7b1862dae90c44396bab", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -171,6 +171,7 @@ pub fn get_absolute_rpath(lib: &Path) -> Path {\n     os::make_absolute(lib).dir_path()\n }\n \n+#[cfg(stage0)]\n pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n@@ -182,6 +183,18 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     os::make_absolute(&Path(install_prefix).push_rel(&tlib))\n }\n \n+#[cfg(not(stage0))]\n+pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n+    let install_prefix = env!(\"CFG_PREFIX\");\n+\n+    if install_prefix == \"\" {\n+        fail!(\"rustc compiled without CFG_PREFIX environment variable\");\n+    }\n+\n+    let tlib = filesearch::relative_target_lib_path(target_triple);\n+    os::make_absolute(&Path(install_prefix).push_rel(&tlib))\n+}\n+\n pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n     let mut set = HashSet::new();\n     let mut minimized = ~[];\n@@ -193,20 +206,13 @@ pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n     minimized\n }\n \n-#[cfg(unix)]\n+#[cfg(unix, test)]\n mod test {\n     use core::prelude::*;\n \n-    // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n-    // these redundant #[cfg(test)] blocks can be removed\n-    #[cfg(test)]\n-    #[cfg(test)]\n     use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n-    #[cfg(test)]\n     use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n-    #[cfg(test)]\n     use back::rpath::{minimize_rpaths, rpaths_to_flags};\n-    #[cfg(test)]\n     use driver::session;\n \n     #[test]"}, {"sha": "64d3b0e373cfd5cd55ea309a5f576070477a1cae", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -641,7 +641,7 @@ pub fn build_session_options(binary: @~str,\n               ~\"3\" => Aggressive,\n               _ => {\n                 early_error(demitter, ~\"optimization level needs \" +\n-                            ~\"to be between 0-3\")\n+                            \"to be between 0-3\")\n               }\n             }\n         } else { No }\n@@ -934,7 +934,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test() {\n         let matches =\n-            &match getopts(~[~\"--test\"], optgroups()) {\n+            &match getopts([~\"--test\"], optgroups()) {\n               Ok(copy m) => m,\n               Err(copy f) => fail!(\"test_switch_implies_cfg_test: %s\", getopts::fail_str(f))\n             };"}, {"sha": "ae49446c5b354adf76eb1c1df735f41b2cdea1f2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -384,8 +384,8 @@ mod test {\n \n     fn make_crate(with_bin: bool, with_lib: bool) -> @ast::crate {\n         let mut attrs = ~[];\n-        if with_bin { attrs += ~[make_crate_type_attr(~\"bin\")]; }\n-        if with_lib { attrs += ~[make_crate_type_attr(~\"lib\")]; }\n+        if with_bin { attrs += [make_crate_type_attr(~\"bin\")]; }\n+        if with_lib { attrs += [make_crate_type_attr(~\"lib\")]; }\n         @codemap::respan(codemap::dummy_sp(), ast::crate_ {\n             module: ast::_mod { view_items: ~[], items: ~[] },\n             attrs: attrs,"}, {"sha": "7a1a3cf77aa180a89db78473374b3f9abed29fa1", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -1980,7 +1980,7 @@ pub fn type_to_str_inner(names: @TypeNames, outer0: &[TypeRef], ty: TypeRef)\n             let mut s = ~\"\";\n             let mut first: bool = true;\n             for tys.each |t| {\n-                if first { first = false; } else { s += ~\", \"; }\n+                if first { first = false; } else { s += \", \"; }\n                 s += type_to_str_inner(names, outer, *t).to_owned();\n             }\n             // [Note at-str] FIXME #2543: Could rewrite this without the copy,"}, {"sha": "6612122fd3e348f60eb46608f23daa236170d575", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -66,7 +66,7 @@ Although these two functions are never called, they are here\n for a VERY GOOD REASON. See #3670\n */\n pub fn add_u16(dest: &mut ~[u8], val: u16) {\n-    *dest += ~[(val & 0xffu16) as u8, (val >> 8u16) as u8];\n+    *dest += [(val & 0xffu16) as u8, (val >> 8u16) as u8];\n }\n \n pub fn add_substr(dest: &mut ~[u8], src: ~[u8]) {"}, {"sha": "e17fe63af764b0b960725757a72ff5a88b044292", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -30,7 +30,6 @@ use util::enum_set::{EnumSet, CLike};\n use core::ptr::to_unsafe_ptr;\n use core::to_bytes;\n use core::hashmap::{HashMap, HashSet};\n-use extra::smallintmap::SmallIntMap;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n use syntax::ast_util;"}, {"sha": "629310b12134ee90b3f88e5c8764dd43a19378a8", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -157,7 +157,7 @@ pub fn version(argv0: &str) {\n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n     io::println(groups::usage(message, optgroups()) +\n-                ~\"Additional help:\n+                \"Additional help:\n     -W help             Print 'lint' options and default settings\n     -Z help             Print internal options for debugging rustc\n \");"}, {"sha": "717b49dfe26f702ac8a367392109d6fb3562c12b", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -78,7 +78,6 @@ mod test {\n     fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n         use syntax::parse::attr::parser_attr;\n-        use syntax::codemap;\n \n         let parse_sess = syntax::parse::new_parse_sess(None);\n         let parser = parse::new_parser_from_source_str("}, {"sha": "972299d35f0a748eb79a31b0c4eb973461327062", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -166,15 +166,15 @@ pub fn paragraphs(s: &str) -> ~[~str] {\n             accum = if str::is_empty(accum) {\n                 copy *line\n             } else {\n-                accum + ~\"\\n\" + *line\n+                accum + \"\\n\" + *line\n             }\n         }\n \n         res\n     };\n \n     if !accum.is_empty() {\n-        paras + ~[accum]\n+        paras + [accum]\n     } else {\n         paras\n     }"}, {"sha": "ed882bc3434b75816e570ddd80ce21f81b66d8b9", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -171,7 +171,7 @@ pub fn header_kind(doc: doc::ItemTag) -> ~str {\n }\n \n pub fn header_name(doc: doc::ItemTag) -> ~str {\n-    let fullpath = str::connect(doc.path() + ~[doc.name()], \"::\");\n+    let fullpath = str::connect(doc.path() + [doc.name()], \"::\");\n     match &doc {\n         &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n             fullpath\n@@ -190,9 +190,9 @@ pub fn header_name(doc: doc::ItemTag) -> ~str {\n             let mut trait_part = ~\"\";\n             for doc.trait_types.eachi |i, trait_type| {\n                 if i == 0 {\n-                    trait_part += ~\" of \";\n+                    trait_part += \" of \";\n                 } else {\n-                    trait_part += ~\", \";\n+                    trait_part += \", \";\n                 }\n                 trait_part += *trait_type;\n             }\n@@ -668,7 +668,7 @@ mod test {\n                     assert!(str::contains(markdown, \"% Crate core\"));\n                 }\n                 doc::ItemPage(_) => {\n-                    assert!(str::contains(markdown, ~\"% Module a\"));\n+                    assert!(str::contains(markdown, \"% Module a\"));\n                 }\n             }\n         }"}, {"sha": "b537dfdbd0bc15c003c0911a2c8cbf1d7c396a0a", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -38,7 +38,7 @@ impl WriterUtils for Writer {\n     }\n \n     fn put_line(&self, str: ~str) {\n-        self.put_str(str + ~\"\\n\");\n+        self.put_str(str + \"\\n\");\n     }\n \n     fn put_done(&self) {\n@@ -159,7 +159,7 @@ pub fn make_filename(\n             }\n           }\n           doc::ItemPage(doc) => {\n-            str::connect(doc.path() + ~[doc.name()], \"_\")\n+            str::connect(doc.path() + [doc.name()], \"_\")\n           }\n         }\n     };"}, {"sha": "581bc742eb9034546a168640395774586928cae1", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -69,7 +69,7 @@ fn make_doc_from_pages(page_port: &PagePort) -> doc::Doc {\n     loop {\n         let val = page_port.recv();\n         if val.is_some() {\n-            pages += ~[val.unwrap()];\n+            pages += [val.unwrap()];\n         } else {\n             break;\n         }"}, {"sha": "95998ba13584533b64d25c0360f00c32eab49d3f", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -48,7 +48,7 @@ fn test_run_passes() {\n                 doc::CratePage(doc::CrateDoc{\n                     topmod: doc::ModDoc{\n                         item: doc::ItemDoc {\n-                            name: doc.cratemod().name() + ~\"two\",\n+                            name: doc.cratemod().name() + \"two\",\n                             .. copy doc.cratemod().item\n                         },\n                         items: ~[],\n@@ -67,7 +67,7 @@ fn test_run_passes() {\n                 doc::CratePage(doc::CrateDoc{\n                     topmod: doc::ModDoc{\n                         item: doc::ItemDoc {\n-                            name: doc.cratemod().name() + ~\"three\",\n+                            name: doc.cratemod().name() + \"three\",\n                             .. copy doc.cratemod().item\n                         },\n                         items: ~[],"}, {"sha": "89aa09b42d51080ee286364f42c865e5f41e04c3", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -113,7 +113,7 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n         match parse_header(copy *line) {\n           Some(header) => {\n             if current_section.is_some() {\n-                sections += ~[(&current_section).get()];\n+                sections += [(&current_section).get()];\n             }\n             current_section = Some(doc::Section {\n                 header: header,\n@@ -124,14 +124,14 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n             match copy current_section {\n               Some(section) => {\n                 current_section = Some(doc::Section {\n-                    body: section.body + ~\"\\n\" + *line,\n+                    body: section.body + \"\\n\" + *line,\n                     .. section\n                 });\n               }\n               None => {\n                 new_desc = match copy new_desc {\n                   Some(desc) => {\n-                    Some(desc + ~\"\\n\" + *line)\n+                    Some(desc + \"\\n\" + *line)\n                   }\n                   None => {\n                     Some(copy *line)\n@@ -144,7 +144,7 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n     }\n \n     if current_section.is_some() {\n-        sections += ~[current_section.get()];\n+        sections += [current_section.get()];\n     }\n \n     (new_desc, sections)"}, {"sha": "125737e587b6d1d161aff935e3eabe9d5661bcb8", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -272,11 +272,11 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n         ~\"help\" => {\n             io::println(\n                 ~\":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\" +\n-                ~\":load <crate> ... - \\\n+                \":load <crate> ... - \\\n                   loads given crates as dynamic libraries\\n\" +\n-                ~\":clear - clear the bindings\\n\" +\n-                ~\":exit - exit from the repl\\n\" +\n-                ~\":help - show this message\");\n+                \":clear - clear the bindings\\n\" +\n+                \":exit - exit from the repl\\n\" +\n+                \":help - show this message\");\n         }\n         ~\"load\" => {\n             let mut loaded_crates: ~[~str] = ~[];\n@@ -317,10 +317,10 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                 match get_line(use_rl, \"rusti| \") {\n                     None => fail!(\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n-                        if str::trim(line) == ~\":}\" {\n+                        if str::trim(line) == \":}\" {\n                             end_multiline = true;\n                         } else {\n-                            multiline_cmd += line + ~\"\\n\";\n+                            multiline_cmd += line + \"\\n\";\n                         }\n                     }\n                 }"}, {"sha": "01ab2881eeeda5aedf02f29862e24cea75f8636a", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -40,7 +40,7 @@ fn fake_pkg() -> PkgId {\n }\n \n fn remote_pkg() -> PkgId {\n-    let remote = RemotePath(Path(~\"github.com/catamorphism/test-pkg\"));\n+    let remote = RemotePath(Path(\"github.com/catamorphism/test-pkg\"));\n     PkgId {\n         local_path: normalize(copy remote),\n         remote_path: remote,\n@@ -52,23 +52,23 @@ fn remote_pkg() -> PkgId {\n fn writeFile(file_path: &Path, contents: ~str) {\n     let out: @io::Writer =\n         result::get(&io::file_writer(file_path,\n-                                     ~[io::Create, io::Truncate]));\n+                                     [io::Create, io::Truncate]));\n     out.write_line(contents);\n }\n \n fn mk_temp_workspace(short_name: &LocalPath) -> Path {\n     let workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n     // include version number in directory name\n-    let package_dir = workspace.push(~\"src\").push(fmt!(\"%s-0.1\", short_name.to_str()));\n+    let package_dir = workspace.push(\"src\").push(fmt!(\"%s-0.1\", short_name.to_str()));\n     assert!(os::mkdir_recursive(&package_dir, u_rwx));\n     // Create main, lib, test, and bench files\n-    writeFile(&package_dir.push(~\"main.rs\"),\n+    writeFile(&package_dir.push(\"main.rs\"),\n               ~\"fn main() { let _x = (); }\");\n-    writeFile(&package_dir.push(~\"lib.rs\"),\n+    writeFile(&package_dir.push(\"lib.rs\"),\n               ~\"pub fn f() { let _x = (); }\");\n-    writeFile(&package_dir.push(~\"test.rs\"),\n+    writeFile(&package_dir.push(\"test.rs\"),\n               ~\"#[test] pub fn f() { (); }\");\n-    writeFile(&package_dir.push(~\"bench.rs\"),\n+    writeFile(&package_dir.push(\"bench.rs\"),\n               ~\"#[bench] pub fn f() { (); }\");\n     workspace\n }\n@@ -98,7 +98,7 @@ fn test_sysroot() -> Path {\n #[ignore(cfg(target_arch = \"x86\"))]\n fn test_make_dir_rwx() {\n     let temp = &os::tmpdir();\n-    let dir = temp.push(~\"quux\");\n+    let dir = temp.push(\"quux\");\n     assert!(!os::path_exists(&dir) ||\n             os::remove_dir_recursive(&dir));\n     debug!(\"Trying to make %s\", dir.to_str());\n@@ -176,10 +176,10 @@ fn test_install_url() {\n     debug!(\"lib = %s\", lib.to_str());\n     assert!(os::path_exists(&lib));\n     assert!(is_rwx(&lib));\n-    let built_test = built_test_in_workspace(&temp_pkg_id, &workspace).expect(~\"test_install_url\");\n+    let built_test = built_test_in_workspace(&temp_pkg_id, &workspace).expect(\"test_install_url\");\n     assert!(os::path_exists(&built_test));\n     let built_bench = built_bench_in_workspace(&temp_pkg_id,\n-                                               &workspace).expect(~\"test_install_url\");\n+                                               &workspace).expect(\"test_install_url\");\n     assert!(os::path_exists(&built_bench));\n     // And that the test and bench executables aren't installed\n     let test = target_test_in_workspace(&temp_pkg_id, &workspace);"}, {"sha": "7794dd47b6903491fb13f546c1fce27e89b1813a", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -536,15 +536,15 @@ mod test {\n \n     #[test]\n     fn test_is_cmd() {\n-        assert!(is_cmd(~\"build\"));\n-        assert!(is_cmd(~\"clean\"));\n-        assert!(is_cmd(~\"do\"));\n-        assert!(is_cmd(~\"info\"));\n-        assert!(is_cmd(~\"install\"));\n-        assert!(is_cmd(~\"prefer\"));\n-        assert!(is_cmd(~\"test\"));\n-        assert!(is_cmd(~\"uninstall\"));\n-        assert!(is_cmd(~\"unprefer\"));\n+        assert!(is_cmd(\"build\"));\n+        assert!(is_cmd(\"clean\"));\n+        assert!(is_cmd(\"do\"));\n+        assert!(is_cmd(\"info\"));\n+        assert!(is_cmd(\"install\"));\n+        assert!(is_cmd(\"prefer\"));\n+        assert!(is_cmd(\"test\"));\n+        assert!(is_cmd(\"uninstall\"));\n+        assert!(is_cmd(\"unprefer\"));\n     }\n \n }"}, {"sha": "7a41c278fa36c56ea7a1e7fd1214b85acb2a8deb", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -300,7 +300,7 @@ mod test {\n \n     #[test]\n     fn append_test() {\n-        assert_eq!(@[1,2,3] + @[4,5,6], @[1,2,3,4,5,6]);\n+        assert_eq!(@[1,2,3] + [4,5,6], @[1,2,3,4,5,6]);\n     }\n \n     #[test]"}, {"sha": "7eb2054a35d4c070c46dd210b3cd7042b753f0dc", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -487,7 +487,7 @@ mod tests {\n \n             assert!(f == i && f == v);\n \n-            buf += ~[t as u8];\n+            buf += [t as u8];\n             stream_inc.input([t as u8]);\n \n             t += 1;"}, {"sha": "693d786329773503d642927b7cde164efc420d9f", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -12,10 +12,7 @@\n \n use option::*;\n use either::*;\n-use rt;\n use rt::logging::{Logger, StdErrLogger};\n-use cast;\n-use str;\n \n /// Turns on logging to stdout globally\n pub fn console_on() {\n@@ -40,10 +37,13 @@ pub fn console_off() {\n #[cfg(not(test))]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n+    use cast;\n     use container::Container;\n     use io;\n     use libc;\n     use repr;\n+    use rt;\n+    use str;\n     use vec;\n \n     let bytes = do io::with_bytes_writer |writer| {"}, {"sha": "27e872003ecbc87bb014fb9e2476e32e6a42bbad", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -757,45 +757,45 @@ mod tests {\n \n     #[test]\n     fn test_from_str() {\n-        assert_eq!(from_str(~\"0\"), Some(0 as $T));\n-        assert_eq!(from_str(~\"3\"), Some(3 as $T));\n-        assert_eq!(from_str(~\"10\"), Some(10 as $T));\n-        assert_eq!(i32::from_str(~\"123456789\"), Some(123456789 as i32));\n-        assert_eq!(from_str(~\"00100\"), Some(100 as $T));\n+        assert_eq!(from_str(\"0\"), Some(0 as $T));\n+        assert_eq!(from_str(\"3\"), Some(3 as $T));\n+        assert_eq!(from_str(\"10\"), Some(10 as $T));\n+        assert_eq!(i32::from_str(\"123456789\"), Some(123456789 as i32));\n+        assert_eq!(from_str(\"00100\"), Some(100 as $T));\n \n-        assert_eq!(from_str(~\"-1\"), Some(-1 as $T));\n-        assert_eq!(from_str(~\"-3\"), Some(-3 as $T));\n-        assert_eq!(from_str(~\"-10\"), Some(-10 as $T));\n-        assert_eq!(i32::from_str(~\"-123456789\"), Some(-123456789 as i32));\n-        assert_eq!(from_str(~\"-00100\"), Some(-100 as $T));\n+        assert_eq!(from_str(\"-1\"), Some(-1 as $T));\n+        assert_eq!(from_str(\"-3\"), Some(-3 as $T));\n+        assert_eq!(from_str(\"-10\"), Some(-10 as $T));\n+        assert_eq!(i32::from_str(\"-123456789\"), Some(-123456789 as i32));\n+        assert_eq!(from_str(\"-00100\"), Some(-100 as $T));\n \n-        assert!(from_str(~\" \").is_none());\n-        assert!(from_str(~\"x\").is_none());\n+        assert!(from_str(\" \").is_none());\n+        assert!(from_str(\"x\").is_none());\n     }\n \n     #[test]\n     fn test_parse_bytes() {\n         use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 10u), Some(123 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"1001\"), 2u), Some(9 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 8u), Some(83 as $T));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"123\"), 16u), Some(291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"ffff\"), 16u), Some(65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"FFFF\"), 16u), Some(65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(~\"z\"), 36u), Some(35 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"Z\"), 36u), Some(35 as $T));\n-\n-        assert_eq!(parse_bytes(to_bytes(~\"-123\"), 10u), Some(-123 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-1001\"), 2u), Some(-9 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-123\"), 8u), Some(-83 as $T));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-123\"), 16u), Some(-291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-ffff\"), 16u), Some(-65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(~\"-FFFF\"), 16u), Some(-65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(~\"-z\"), 36u), Some(-35 as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"-Z\"), 36u), Some(-35 as $T));\n-\n-        assert!(parse_bytes(to_bytes(~\"Z\"), 35u).is_none());\n-        assert!(parse_bytes(to_bytes(~\"-9\"), 2u).is_none());\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83 as $T));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"123\"), 16u), Some(291 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"FFFF\"), 16u), Some(65535 as i32));\n+        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"Z\"), 36u), Some(35 as $T));\n+\n+        assert_eq!(parse_bytes(to_bytes(\"-123\"), 10u), Some(-123 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"-1001\"), 2u), Some(-9 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"-123\"), 8u), Some(-83 as $T));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-123\"), 16u), Some(-291 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-ffff\"), 16u), Some(-65535 as i32));\n+        assert_eq!(i32::parse_bytes(to_bytes(\"-FFFF\"), 16u), Some(-65535 as i32));\n+        assert_eq!(parse_bytes(to_bytes(\"-z\"), 36u), Some(-35 as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"-Z\"), 36u), Some(-35 as $T));\n+\n+        assert!(parse_bytes(to_bytes(\"Z\"), 35u).is_none());\n+        assert!(parse_bytes(to_bytes(\"-9\"), 2u).is_none());\n     }\n \n     #[test]\n@@ -838,36 +838,36 @@ mod tests {\n     #[test]\n     fn test_int_from_str_overflow() {\n         let mut i8_val: i8 = 127_i8;\n-        assert_eq!(i8::from_str(~\"127\"), Some(i8_val));\n-        assert!(i8::from_str(~\"128\").is_none());\n+        assert_eq!(i8::from_str(\"127\"), Some(i8_val));\n+        assert!(i8::from_str(\"128\").is_none());\n \n         i8_val += 1 as i8;\n-        assert_eq!(i8::from_str(~\"-128\"), Some(i8_val));\n-        assert!(i8::from_str(~\"-129\").is_none());\n+        assert_eq!(i8::from_str(\"-128\"), Some(i8_val));\n+        assert!(i8::from_str(\"-129\").is_none());\n \n         let mut i16_val: i16 = 32_767_i16;\n-        assert_eq!(i16::from_str(~\"32767\"), Some(i16_val));\n-        assert!(i16::from_str(~\"32768\").is_none());\n+        assert_eq!(i16::from_str(\"32767\"), Some(i16_val));\n+        assert!(i16::from_str(\"32768\").is_none());\n \n         i16_val += 1 as i16;\n-        assert_eq!(i16::from_str(~\"-32768\"), Some(i16_val));\n-        assert!(i16::from_str(~\"-32769\").is_none());\n+        assert_eq!(i16::from_str(\"-32768\"), Some(i16_val));\n+        assert!(i16::from_str(\"-32769\").is_none());\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n-        assert_eq!(i32::from_str(~\"2147483647\"), Some(i32_val));\n-        assert!(i32::from_str(~\"2147483648\").is_none());\n+        assert_eq!(i32::from_str(\"2147483647\"), Some(i32_val));\n+        assert!(i32::from_str(\"2147483648\").is_none());\n \n         i32_val += 1 as i32;\n-        assert_eq!(i32::from_str(~\"-2147483648\"), Some(i32_val));\n-        assert!(i32::from_str(~\"-2147483649\").is_none());\n+        assert_eq!(i32::from_str(\"-2147483648\"), Some(i32_val));\n+        assert!(i32::from_str(\"-2147483649\").is_none());\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n-        assert_eq!(i64::from_str(~\"9223372036854775807\"), Some(i64_val));\n-        assert!(i64::from_str(~\"9223372036854775808\").is_none());\n+        assert_eq!(i64::from_str(\"9223372036854775807\"), Some(i64_val));\n+        assert!(i64::from_str(\"9223372036854775808\").is_none());\n \n         i64_val += 1 as i64;\n-        assert_eq!(i64::from_str(~\"-9223372036854775808\"), Some(i64_val));\n-        assert!(i64::from_str(~\"-9223372036854775809\").is_none());\n+        assert_eq!(i64::from_str(\"-9223372036854775808\"), Some(i64_val));\n+        assert!(i64::from_str(\"-9223372036854775809\").is_none());\n     }\n \n     #[test]"}, {"sha": "e6267bfe9e17e3b8d0147d4990677dd35f8c9c8a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -496,29 +496,29 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str(~\"0\"), Some(0u as $T));\n-        assert_eq!(from_str(~\"3\"), Some(3u as $T));\n-        assert_eq!(from_str(~\"10\"), Some(10u as $T));\n-        assert_eq!(u32::from_str(~\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str(~\"00100\"), Some(100u as $T));\n+        assert_eq!(from_str(\"0\"), Some(0u as $T));\n+        assert_eq!(from_str(\"3\"), Some(3u as $T));\n+        assert_eq!(from_str(\"10\"), Some(10u as $T));\n+        assert_eq!(u32::from_str(\"123456789\"), Some(123456789 as u32));\n+        assert_eq!(from_str(\"00100\"), Some(100u as $T));\n \n-        assert!(from_str(~\"\").is_none());\n-        assert!(from_str(~\" \").is_none());\n-        assert!(from_str(~\"x\").is_none());\n+        assert!(from_str(\"\").is_none());\n+        assert!(from_str(\" \").is_none());\n+        assert!(from_str(\"x\").is_none());\n     }\n \n     #[test]\n     pub fn test_parse_bytes() {\n         use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 10u), Some(123u as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"1001\"), 2u), Some(9u as $T));\n-        assert_eq!(parse_bytes(to_bytes(~\"123\"), 8u), Some(83u as $T));\n-        assert_eq!(u16::parse_bytes(to_bytes(~\"123\"), 16u), Some(291u as u16));\n-        assert_eq!(u16::parse_bytes(to_bytes(~\"ffff\"), 16u), Some(65535u as u16));\n-        assert_eq!(parse_bytes(to_bytes(~\"z\"), 36u), Some(35u as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123u as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9u as $T));\n+        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83u as $T));\n+        assert_eq!(u16::parse_bytes(to_bytes(\"123\"), 16u), Some(291u as u16));\n+        assert_eq!(u16::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535u as u16));\n+        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35u as $T));\n \n-        assert!(parse_bytes(to_bytes(~\"Z\"), 10u).is_none());\n-        assert!(parse_bytes(to_bytes(~\"_\"), 2u).is_none());\n+        assert!(parse_bytes(to_bytes(\"Z\"), 10u).is_none());\n+        assert!(parse_bytes(to_bytes(\"_\"), 2u).is_none());\n     }\n \n     #[test]\n@@ -551,36 +551,36 @@ mod tests {\n     #[test]\n     fn test_uint_from_str_overflow() {\n         let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8::from_str(~\"255\"), Some(u8_val));\n-        assert!(u8::from_str(~\"256\").is_none());\n+        assert_eq!(u8::from_str(\"255\"), Some(u8_val));\n+        assert!(u8::from_str(\"256\").is_none());\n \n         u8_val += 1 as u8;\n-        assert_eq!(u8::from_str(~\"0\"), Some(u8_val));\n-        assert!(u8::from_str(~\"-1\").is_none());\n+        assert_eq!(u8::from_str(\"0\"), Some(u8_val));\n+        assert!(u8::from_str(\"-1\").is_none());\n \n         let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16::from_str(~\"65535\"), Some(u16_val));\n-        assert!(u16::from_str(~\"65536\").is_none());\n+        assert_eq!(u16::from_str(\"65535\"), Some(u16_val));\n+        assert!(u16::from_str(\"65536\").is_none());\n \n         u16_val += 1 as u16;\n-        assert_eq!(u16::from_str(~\"0\"), Some(u16_val));\n-        assert!(u16::from_str(~\"-1\").is_none());\n+        assert_eq!(u16::from_str(\"0\"), Some(u16_val));\n+        assert!(u16::from_str(\"-1\").is_none());\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32::from_str(~\"4294967295\"), Some(u32_val));\n-        assert!(u32::from_str(~\"4294967296\").is_none());\n+        assert_eq!(u32::from_str(\"4294967295\"), Some(u32_val));\n+        assert!(u32::from_str(\"4294967296\").is_none());\n \n         u32_val += 1 as u32;\n-        assert_eq!(u32::from_str(~\"0\"), Some(u32_val));\n-        assert!(u32::from_str(~\"-1\").is_none());\n+        assert_eq!(u32::from_str(\"0\"), Some(u32_val));\n+        assert!(u32::from_str(\"-1\").is_none());\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64::from_str(~\"18446744073709551615\"), Some(u64_val));\n-        assert!(u64::from_str(~\"18446744073709551616\").is_none());\n+        assert_eq!(u64::from_str(\"18446744073709551615\"), Some(u64_val));\n+        assert!(u64::from_str(\"18446744073709551616\").is_none());\n \n         u64_val += 1 as u64;\n-        assert_eq!(u64::from_str(~\"0\"), Some(u64_val));\n-        assert!(u64::from_str(~\"-1\").is_none());\n+        assert_eq!(u64::from_str(\"0\"), Some(u64_val));\n+        assert!(u64::from_str(\"-1\").is_none());\n     }\n \n     #[test]"}, {"sha": "15c68efc7cc2acb0d999916d06e0bfdc5e9f09c4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -1481,7 +1481,7 @@ mod tests {\n     fn test_getenv_big() {\n         let mut s = ~\"\";\n         let mut i = 0;\n-        while i < 100 { s += ~\"aaaaaaaaaa\"; i += 1; }\n+        while i < 100 { s += \"aaaaaaaaaa\"; i += 1; }\n         let n = make_rand_name();\n         setenv(n, s);\n         debug!(copy s);\n@@ -1658,7 +1658,7 @@ mod tests {\n           };\n           assert!((ostream as uint != 0u));\n           let s = ~\"hello\";\n-          let mut buf = str::to_bytes(s) + ~[0 as u8];\n+          let mut buf = str::to_bytes(s) + [0 as u8];\n           do vec::as_mut_buf(buf) |b, _len| {\n               assert!((libc::fwrite(b as *c_void, 1u as size_t,\n                                    (str::len(s) + 1u) as size_t, ostream)"}, {"sha": "38d7095a3663d2f8f16bf5fce3ac63deaaf8c0bb", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -11,8 +11,8 @@\n //! Unsafe pointer utility functions\n \n use cast;\n-use libc;\n-use libc::{c_void, size_t};\n+#[cfg(stage0)] use libc;\n+#[cfg(stage0)] use libc::{c_void, size_t};\n use option::{Option, Some, None};\n use sys;\n "}, {"sha": "349a848e2c7c3dc1841b01256634eaf1c28fb785", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04c40bb1c96202409f663480076977619a1da30/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b04c40bb1c96202409f663480076977619a1da30", "patch": "@@ -3147,7 +3147,7 @@ mod tests {\n         }\n         t([~\"you\", ~\"know\", ~\"I'm\", ~\"no\", ~\"good\"],\n           \" \", \"you know I'm no good\");\n-        let v: &[~str] = ~[];\n+        let v: &[~str] = [];\n         t(v, \" \", \"\");\n         t([~\"hi\"], \" \", \"hi\");\n     }"}]}