{"sha": "3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "node_id": "C_kwDOAAsO6NoAKDNkZTcwYTQ5OTZkZDk2YzI2MGJhZWFiZmI5YTE4Y2RkYTVlNWViNmE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T03:47:59Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:29Z"}, "message": "Move `ErasingOp` into `Operators` lint pass", "tree": {"sha": "e2afd7cea719d64f4b1271f4850cfbaefe2e6850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2afd7cea719d64f4b1271f4850cfbaefe2e6850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "html_url": "https://github.com/rust-lang/rust/commit/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0adb3c051805998ab8cabb7654208141ae433ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0adb3c051805998ab8cabb7654208141ae433ce0", "html_url": "https://github.com/rust-lang/rust/commit/0adb3c051805998ab8cabb7654208141ae433ce0"}], "stats": {"total": 163, "additions": 81, "deletions": 82}, "files": [{"sha": "c1a84973c42114945130d4c5e9fbeeba75042efd", "filename": "clippy_lints/src/erasing_op.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0adb3c051805998ab8cabb7654208141ae433ce0/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adb3c051805998ab8cabb7654208141ae433ce0/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=0adb3c051805998ab8cabb7654208141ae433ce0", "patch": "@@ -1,77 +0,0 @@\n-use clippy_utils::consts::{constant_simple, Constant};\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::ty::same_type_and_consts;\n-\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeckResults;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for erasing operations, e.g., `x * 0`.\n-    ///\n-    /// ### Why is this bad?\n-    /// The whole expression can be replaced by zero.\n-    /// This is most likely not the intended outcome and should probably be\n-    /// corrected\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = 1;\n-    /// 0 / x;\n-    /// 0 * x;\n-    /// x & 0;\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub ERASING_OP,\n-    correctness,\n-    \"using erasing operations, e.g., `x * 0` or `y & 0`\"\n-}\n-\n-declare_lint_pass!(ErasingOp => [ERASING_OP]);\n-\n-impl<'tcx> LateLintPass<'tcx> for ErasingOp {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if e.span.from_expansion() {\n-            return;\n-        }\n-        if let ExprKind::Binary(ref cmp, left, right) = e.kind {\n-            let tck = cx.typeck_results();\n-            match cmp.node {\n-                BinOpKind::Mul | BinOpKind::BitAnd => {\n-                    check(cx, tck, left, right, e);\n-                    check(cx, tck, right, left, e);\n-                },\n-                BinOpKind::Div => check(cx, tck, left, right, e),\n-                _ => (),\n-            }\n-        }\n-    }\n-}\n-\n-fn different_types(tck: &TypeckResults<'_>, input: &Expr<'_>, output: &Expr<'_>) -> bool {\n-    let input_ty = tck.expr_ty(input).peel_refs();\n-    let output_ty = tck.expr_ty(output).peel_refs();\n-    !same_type_and_consts(input_ty, output_ty)\n-}\n-\n-fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    tck: &TypeckResults<'tcx>,\n-    op: &Expr<'tcx>,\n-    other: &Expr<'tcx>,\n-    parent: &Expr<'tcx>,\n-) {\n-    if constant_simple(cx, tck, op) == Some(Constant::Int(0)) {\n-        if different_types(tck, other, parent) {\n-            return;\n-        }\n-        span_lint(\n-            cx,\n-            ERASING_OP,\n-            parent.span,\n-            \"this operation will always return zero. This is likely not the intended outcome\",\n-        );\n-    }\n-}"}, {"sha": "533e6294925f00295b86b2f2960f9540a96753f8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -61,7 +61,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n     LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n     LintId::of(enum_variants::MODULE_INCEPTION),\n-    LintId::of(erasing_op::ERASING_OP),\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n@@ -257,6 +256,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::DOUBLE_COMPARISONS),\n     LintId::of(operators::DURATION_SUBSEC),\n     LintId::of(operators::EQ_OP),\n+    LintId::of(operators::ERASING_OP),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(operators::OP_REF),"}, {"sha": "b8362d5a72df8dec1a25774708d980414b0d1f8c", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -21,7 +21,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(drop_forget_ref::FORGET_REF),\n     LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-    LintId::of(erasing_op::ERASING_OP),\n     LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n     LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n@@ -50,6 +49,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(operators::BAD_BIT_MASK),\n     LintId::of(operators::EQ_OP),\n+    LintId::of(operators::ERASING_OP),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),"}, {"sha": "7ebf2880d2c0980f0e3689a33163f2afb21717c1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -141,7 +141,6 @@ store.register_lints(&[\n     enum_variants::MODULE_INCEPTION,\n     enum_variants::MODULE_NAME_REPETITIONS,\n     equatable_if_let::EQUATABLE_IF_LET,\n-    erasing_op::ERASING_OP,\n     escape::BOXED_LOCAL,\n     eta_reduction::REDUNDANT_CLOSURE,\n     eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n@@ -431,6 +430,7 @@ store.register_lints(&[\n     operators::DOUBLE_COMPARISONS,\n     operators::DURATION_SUBSEC,\n     operators::EQ_OP,\n+    operators::ERASING_OP,\n     operators::FLOAT_ARITHMETIC,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,"}, {"sha": "3ded4a8437575c413c1d715fba9d9c1cd1c41b8e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -220,7 +220,6 @@ mod entry;\n mod enum_clike;\n mod enum_variants;\n mod equatable_if_let;\n-mod erasing_op;\n mod escape;\n mod eta_reduction;\n mod excessive_bools;\n@@ -585,7 +584,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(misc::MiscLints));\n     store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n-    store.register_late_pass(|| Box::new(erasing_op::ErasingOp));\n     store.register_late_pass(|| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n     store.register_late_pass(|| Box::new(len_zero::LenZero));"}, {"sha": "066e08f3bd4cac6c34c672c0239262fd34536e36", "filename": "clippy_lints/src/operators/erasing_op.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Foperators%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Foperators%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Ferasing_op.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -0,0 +1,53 @@\n+use clippy_utils::consts::{constant_simple, Constant};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::same_type_and_consts;\n+\n+use rustc_hir::{BinOpKind, Expr};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::TypeckResults;\n+\n+use super::ERASING_OP;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+) {\n+    let tck = cx.typeck_results();\n+    match op {\n+        BinOpKind::Mul | BinOpKind::BitAnd => {\n+            check_op(cx, tck, left, right, e);\n+            check_op(cx, tck, right, left, e);\n+        },\n+        BinOpKind::Div => check_op(cx, tck, left, right, e),\n+        _ => (),\n+    }\n+}\n+\n+fn different_types(tck: &TypeckResults<'_>, input: &Expr<'_>, output: &Expr<'_>) -> bool {\n+    let input_ty = tck.expr_ty(input).peel_refs();\n+    let output_ty = tck.expr_ty(output).peel_refs();\n+    !same_type_and_consts(input_ty, output_ty)\n+}\n+\n+fn check_op<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    tck: &TypeckResults<'tcx>,\n+    op: &Expr<'tcx>,\n+    other: &Expr<'tcx>,\n+    parent: &Expr<'tcx>,\n+) {\n+    if constant_simple(cx, tck, op) == Some(Constant::Int(0)) {\n+        if different_types(tck, other, parent) {\n+            return;\n+        }\n+        span_lint(\n+            cx,\n+            ERASING_OP,\n+            parent.span,\n+            \"this operation will always return zero. This is likely not the intended outcome\",\n+        );\n+    }\n+}"}, {"sha": "01a23f0e3224cd34901de584c0ba2106a42da55f", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de70a4996dd96c260baeabfb9a18cdda5e5eb6a/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=3de70a4996dd96c260baeabfb9a18cdda5e5eb6a", "patch": "@@ -8,6 +8,7 @@ mod bit_mask;\n mod double_comparison;\n mod duration_subsec;\n mod eq_op;\n+mod erasing_op;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod op_ref;\n@@ -360,6 +361,28 @@ declare_clippy_lint! {\n     \"taking a reference to satisfy the type constraints on `==`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for erasing operations, e.g., `x * 0`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The whole expression can be replaced by zero.\n+    /// This is most likely not the intended outcome and should probably be\n+    /// corrected\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = 1;\n+    /// 0 / x;\n+    /// 0 * x;\n+    /// x & 0;\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub ERASING_OP,\n+    correctness,\n+    \"using erasing operations, e.g., `x * 0` or `y & 0`\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -377,6 +400,7 @@ impl_lint_pass!(Operators => [\n     DURATION_SUBSEC,\n     EQ_OP,\n     OP_REF,\n+    ERASING_OP,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -397,6 +421,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                         eq_op::check(cx, e, op.node, lhs, rhs);\n                         op_ref::check(cx, e, op.node, lhs, rhs);\n                     }\n+                    erasing_op::check(cx, e, op.node, lhs, rhs);\n                 }\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 bit_mask::check(cx, e, op.node, lhs, rhs);"}]}