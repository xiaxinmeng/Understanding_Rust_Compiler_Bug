{"sha": "c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YThjZGNkZjFlNGY1NzRjODBmMDRiYzBjNWIwNThjNWE4M2I0ZjY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-14T12:03:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-14T12:03:27Z"}, "message": "Merge pull request #3095 from otavio/avoid-overflow-control-flow-expr\n\nAvoid control flow expressions conditions to go multi line", "tree": {"sha": "b72ec439669f05e170921a6ca78bdbd37b4cbd03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72ec439669f05e170921a6ca78bdbd37b4cbd03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwzCPCRBK7hj4Ov3rIwAAdHIIAHFMsCFJMiGPpfaA49EaY6Lf\nhdqIRSsDmtd5860/VSBulMeYlc3vuBJvfXCnBZMsCR3tbqMnUQnGB8zK9t43l9FZ\nxBIXvjfmqoHPC70DXRH+hREk4IzNBdn9HrnWRqGXts6wd55MbPmw92yo2HLwNBu1\nNLeQz1yhGoBYF2UDUB3yjYrwQaGKl8hI5qSq6KhvdSoW2S8EEUCciOKbT5ft0Og+\ntmC7HbjzluIxcaC6L1OGFK/I06QHTM7Mmcbt6dcbbnguHrwjo3JR2POKYXvUJepL\nX22B6RdqtSsUBd1WGpiVa5S1y5jSLmG3qWeAG4cmKso46widz/vPl/22BZZc66s=\n=Iox8\n-----END PGP SIGNATURE-----\n", "payload": "tree b72ec439669f05e170921a6ca78bdbd37b4cbd03\nparent 8dfdca9390b27131a0f05509d501887e83d7c538\nparent ef59b34cd7011302008230d928e5379d0e855edc\nauthor Seiichi Uchida <seuchida@gmail.com> 1539518607 +0900\ncommitter GitHub <noreply@github.com> 1539518607 +0900\n\nMerge pull request #3095 from otavio/avoid-overflow-control-flow-expr\n\nAvoid control flow expressions conditions to go multi line"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "html_url": "https://github.com/rust-lang/rust/commit/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfdca9390b27131a0f05509d501887e83d7c538", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfdca9390b27131a0f05509d501887e83d7c538", "html_url": "https://github.com/rust-lang/rust/commit/8dfdca9390b27131a0f05509d501887e83d7c538"}, {"sha": "ef59b34cd7011302008230d928e5379d0e855edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef59b34cd7011302008230d928e5379d0e855edc", "html_url": "https://github.com/rust-lang/rust/commit/ef59b34cd7011302008230d928e5379d0e855edc"}], "stats": {"total": 188, "additions": 171, "deletions": 17}, "files": [{"sha": "fc1803b2ab6af98802e5732c35bad0ac0b51b337", "filename": "src/overflow.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "patch": "@@ -404,7 +404,15 @@ impl<'a> Context<'a> {\n                             closures::rewrite_last_closure(self.context, expr, shape)\n                         }\n                     }\n-                    ast::ExprKind::Match(..) => {\n+                    // When overflowing the expressions which consists of a control flow\n+                    // expression, avoid condition to use multi line.\n+                    ast::ExprKind::If(..)\n+                    | ast::ExprKind::IfLet(..)\n+                    | ast::ExprKind::ForLoop(..)\n+                    | ast::ExprKind::Loop(..)\n+                    | ast::ExprKind::While(..)\n+                    | ast::ExprKind::WhileLet(..)\n+                    | ast::ExprKind::Match(..) => {\n                         let multi_line = rewrite_cond(self.context, expr, shape)\n                             .map_or(false, |cond| cond.contains('\\n'));\n "}, {"sha": "a7ac5c32b066f3380cf35610d44075412f17f0e4", "filename": "tests/source/issue-3029.rs", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/tests%2Fsource%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/tests%2Fsource%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3029.rs?ref=c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "patch": "@@ -1,13 +1,86 @@\n-fn foo() {\n-    EvaluateJSReply::NumberValue(\n-        match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n-            Ok(ConversionResult::Success(v)) => v,\n-            _ => unreachable!(),\n-        },\n-    )\n+fn keep_if() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_if_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_for() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    for conv in FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_loop() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(loop {\n+                    FromJSValConvertible::from_jsval(cx, rval.handle(), ());\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n }\n \n-fn bar() {\n+fn keep_match() {\n     {\n         {\n             EvaluateJSReply::NumberValue("}, {"sha": "a7ac5c32b066f3380cf35610d44075412f17f0e4", "filename": "tests/target/issue-3029.rs", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/tests%2Ftarget%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6/tests%2Ftarget%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3029.rs?ref=c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "patch": "@@ -1,13 +1,86 @@\n-fn foo() {\n-    EvaluateJSReply::NumberValue(\n-        match FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n-            Ok(ConversionResult::Success(v)) => v,\n-            _ => unreachable!(),\n-        },\n-    )\n+fn keep_if() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_if_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    if let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_for() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    for conv in FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_loop() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(loop {\n+                    FromJSValConvertible::from_jsval(cx, rval.handle(), ());\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+}\n+\n+fn keep_while_let() {\n+    {\n+        {\n+            {\n+                EvaluateJSReply::NumberValue(\n+                    while let Some(e) = FromJSValConvertible::from_jsval(cx, rval.handle(), ()) {\n+                        unimplemented!();\n+                    },\n+                )\n+            }\n+        }\n+    }\n }\n \n-fn bar() {\n+fn keep_match() {\n     {\n         {\n             EvaluateJSReply::NumberValue("}]}