{"sha": "9dba743a6acbf18e9fbec359778352ee95a8ee7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmE3NDNhNmFjYmYxOGU5ZmJlYzM1OTc3ODM1MmVlOTVhOGVlN2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-03T11:44:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-07T12:46:49Z"}, "message": "do not print wrapping ranges like normal ranges in diagnostics", "tree": {"sha": "d58116b7bbd3abcf5faeece3d7aff6d5fb24b5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58116b7bbd3abcf5faeece3d7aff6d5fb24b5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dba743a6acbf18e9fbec359778352ee95a8ee7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dba743a6acbf18e9fbec359778352ee95a8ee7c", "html_url": "https://github.com/rust-lang/rust/commit/9dba743a6acbf18e9fbec359778352ee95a8ee7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dba743a6acbf18e9fbec359778352ee95a8ee7c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8315b11b6352cbd91ee096571c31ae7d3ac9613d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8315b11b6352cbd91ee096571c31ae7d3ac9613d", "html_url": "https://github.com/rust-lang/rust/commit/8315b11b6352cbd91ee096571c31ae7d3ac9613d"}], "stats": {"total": 135, "additions": 85, "deletions": 50}, "files": [{"sha": "7efeaee6cce0a142933620bed8095060f3ec161a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9dba743a6acbf18e9fbec359778352ee95a8ee7c", "patch": "@@ -10,6 +10,7 @@\n \n use std::fmt::Write;\n use std::hash::Hash;\n+use std::ops::RangeInclusive;\n \n use syntax_pos::symbol::Symbol;\n use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf};\n@@ -122,6 +123,34 @@ fn path_format(path: &Vec<PathElem>) -> String {\n     out\n }\n \n+// Test if a range that wraps at overflow contains `test`\n+fn wrapping_range_contains(r: &RangeInclusive<u128>, test: u128) -> bool {\n+    let (lo, hi) = r.clone().into_inner();\n+    if lo > hi {\n+        // Wrapped\n+        (..=hi).contains(&test) || (lo..).contains(&test)\n+    } else {\n+        // Normal\n+        r.contains(&test)\n+    }\n+}\n+\n+// Formats such that a sentence like \"expected something {}\" to mean\n+// \"expected something <in the given range>\" makes sense.\n+fn wrapping_range_format(r: &RangeInclusive<u128>, max_hi: u128) -> String {\n+    let (lo, hi) = r.clone().into_inner();\n+    debug_assert!(hi <= max_hi);\n+    if lo > hi {\n+        format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n+    } else {\n+        if hi == max_hi {\n+            format!(\"greater or equal to {}\", lo)\n+        } else {\n+            format!(\"in the range {:?}\", r)\n+        }\n+    }\n+}\n+\n struct ValidityVisitor<'rt, 'a: 'rt, 'mir: 'rt, 'tcx: 'a+'rt+'mir, M: Machine<'a, 'mir, 'tcx>+'rt> {\n     /// The `path` may be pushed to, but the part that is present when a function\n     /// starts must not be changed!  `visit_fields` and `visit_array` rely on\n@@ -428,8 +457,8 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                         \"a pointer\",\n                         self.path,\n                         format!(\n-                            \"something that cannot possibly be outside the (wrapping) range {:?}\",\n-                            layout.valid_range\n+                            \"something that cannot possibly fail to be {}\",\n+                            wrapping_range_format(&layout.valid_range, max_hi)\n                         )\n                     );\n                 }\n@@ -440,33 +469,14 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n             }\n         };\n         // Now compare. This is slightly subtle because this is a special \"wrap-around\" range.\n-        use std::ops::RangeInclusive;\n-        let in_range = |bound: RangeInclusive<u128>| bound.contains(&bits);\n-        if lo > hi {\n-            // wrapping around\n-            if in_range(0..=hi) || in_range(lo..=max_hi) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    self.path,\n-                    format!(\"something in the range {:?} or {:?}\", 0..=hi, lo..=max_hi)\n-                )\n-            }\n+        if wrapping_range_contains(&layout.valid_range, bits) {\n+            Ok(())\n         } else {\n-            if in_range(layout.valid_range.clone()) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    self.path,\n-                    if hi == max_hi {\n-                        format!(\"something greater or equal to {}\", lo)\n-                    } else {\n-                        format!(\"something in the range {:?}\", layout.valid_range)\n-                    }\n-                )\n-            }\n+            validation_failure!(\n+                bits,\n+                self.path,\n+                format!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n+            )\n         }\n     }\n "}, {"sha": "0aa15c839387952f70474057d56d400c02cf0577", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=9dba743a6acbf18e9fbec359778352ee95a8ee7c", "patch": "@@ -17,39 +17,48 @@ enum Enum {\n }\n union TransmuteEnum {\n     a: &'static u8,\n-    b: Enum,\n+    out: Enum,\n }\n \n // A pointer is guaranteed non-null\n-const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n+const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.out };\n //~^ ERROR is undefined behavior\n \n-// Invalid enum discriminant\n+// (Potentially) invalid enum discriminant\n #[repr(usize)]\n #[derive(Copy, Clone)]\n enum Enum2 {\n     A = 2,\n }\n+#[repr(transparent)]\n+#[derive(Copy, Clone)]\n+struct Wrap<T>(T);\n union TransmuteEnum2 {\n-    a: usize,\n-    b: Enum2,\n-    c: (),\n+    in1: usize,\n+    in2: &'static u8,\n+    in3: (),\n+    out1: Enum2,\n+    out2: Wrap<Enum2>, // something wrapping the enum so that we test layout first, not enum\n }\n-const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n+const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n+//~^ ERROR is undefined behavior\n+const BAD_ENUM3: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n+//~^ ERROR is undefined behavior\n+const BAD_ENUM4: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n //~^ ERROR is undefined behavior\n \n // Undef enum discriminant. In an arry to avoid `Scalar` layout.\n-const BAD_ENUM3 : [Enum2; 2] = [unsafe { TransmuteEnum2 { c: () }.b }; 2];\n+const BAD_ENUM_UNDEF: [Enum2; 2] = [unsafe { TransmuteEnum2 { in3: () }.out1 }; 2];\n //~^ ERROR is undefined behavior\n \n-// Invalid enum field content (mostly to test printing of apths for enum tuple\n+// Invalid enum field content (mostly to test printing of paths for enum tuple\n // variants and tuples).\n union TransmuteChar {\n     a: u32,\n     b: char,\n }\n // Need to create something which does not clash with enum layout optimizations.\n-const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n+const BAD_ENUM_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n //~^ ERROR is undefined behavior\n \n fn main() {"}, {"sha": "7f1560558235f64d702a45bf3c5eaa4da36cb476", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dba743a6acbf18e9fbec359778352ee95a8ee7c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=9dba743a6acbf18e9fbec359778352ee95a8ee7c", "patch": "@@ -1,35 +1,51 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n-LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n+LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.out };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:38:1\n+  --> $DIR/ub-enum.rs:43:1\n    |\n-LL | const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n+LL | const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:42:1\n+  --> $DIR/ub-enum.rs:45:1\n    |\n-LL | const BAD_ENUM3 : [Enum2; 2] = [unsafe { TransmuteEnum2 { c: () }.b }; 2];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+LL | const BAD_ENUM3: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:52:1\n+  --> $DIR/ub-enum.rs:47:1\n    |\n-LL | const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something in the range 0..=1114111\n+LL | const BAD_ENUM4: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be in the range 2..=2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 4 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-enum.rs:51:1\n+   |\n+LL | const BAD_ENUM_UNDEF: [Enum2; 2] = [unsafe { TransmuteEnum2 { in3: () }.out1 }; 2];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-enum.rs:61:1\n+   |\n+LL | const BAD_ENUM_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something in the range 0..=1114111\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}