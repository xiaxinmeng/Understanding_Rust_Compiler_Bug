{"sha": "36eb09f356ef49e94dc367467325fce6048273c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZWIwOWYzNTZlZjQ5ZTk0ZGMzNjc0NjczMjVmY2U2MDQ4MjczYzg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-12T18:44:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-12T18:45:56Z"}, "message": "Create a FreshFloatTy separate from FreshIntTy\n\nThere is no subtyping relationship between the types (or their non-freshened\nvariants), so they can not be merged.\n\nFixes #22645\nFixes #24352\nFixes #23825\n\nShould fix #25235 (no test in issue).\nShould fix #19976 (test is outdated).", "tree": {"sha": "ebbdf2e62d07854476ca237140f49eec14d67ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebbdf2e62d07854476ca237140f49eec14d67ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36eb09f356ef49e94dc367467325fce6048273c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36eb09f356ef49e94dc367467325fce6048273c8", "html_url": "https://github.com/rust-lang/rust/commit/36eb09f356ef49e94dc367467325fce6048273c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36eb09f356ef49e94dc367467325fce6048273c8/comments", "author": null, "committer": null, "parents": [{"sha": "2a5a320babdf000bc9cf719ccd9d95d250f83a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5a320babdf000bc9cf719ccd9d95d250f83a02", "html_url": "https://github.com/rust-lang/rust/commit/2a5a320babdf000bc9cf719ccd9d95d250f83a02"}], "stats": {"total": 101, "additions": 90, "deletions": 11}, "files": [{"sha": "111cf68726c61b61d47ee21222dda8ab0adab60e", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -129,11 +129,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                                                       .probe(v)\n                                                       .map(|v| v.to_type(tcx)),\n                     ty::FloatVar(v),\n-                    ty::FreshIntTy)\n+                    ty::FreshFloatTy)\n             }\n \n             ty::ty_infer(ty::FreshTy(c)) |\n-            ty::ty_infer(ty::FreshIntTy(c)) => {\n+            ty::ty_infer(ty::FreshIntTy(c)) |\n+            ty::ty_infer(ty::FreshFloatTy(c)) => {\n                 if c >= self.freshen_count {\n                     tcx.sess.bug(\n                         &format!(\"Encountered a freshend type with id {} \\"}, {"sha": "6ede685939c9b7a0c26944c0e701fa7fca681f81", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -1685,7 +1685,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_err => ok_if(Vec::new()),\n \n             ty::ty_infer(ty::FreshTy(_))\n-            | ty::ty_infer(ty::FreshIntTy(_)) => {\n+            | ty::ty_infer(ty::FreshIntTy(_))\n+            | ty::ty_infer(ty::FreshFloatTy(_)) => {\n                 self.tcx().sess.bug(\n                     &format!(\n                         \"asked to assemble builtin bounds of unexpected type: {}\",\n@@ -1747,7 +1748,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::ty_projection(..) |\n             ty::ty_infer(ty::TyVar(_)) |\n             ty::ty_infer(ty::FreshTy(_)) |\n-            ty::ty_infer(ty::FreshIntTy(_)) => {\n+            ty::ty_infer(ty::FreshIntTy(_)) |\n+            ty::ty_infer(ty::FreshFloatTy(_)) => {\n                 self.tcx().sess.bug(\n                     &format!(\n                         \"asked to assemble constituent types of unexpected type: {}\","}, {"sha": "1e6652e42ad5c30533c6e95f97bfab7c07672dab", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -1688,11 +1688,8 @@ pub enum InferTy {\n     /// unbound type variable. This is convenient for caching etc. See\n     /// `middle::infer::freshen` for more details.\n     FreshTy(u32),\n-\n-    // FIXME -- once integral fallback is impl'd, we should remove\n-    // this type. It's only needed to prevent spurious errors for\n-    // integers whose type winds up never being constrained.\n     FreshIntTy(u32),\n+    FreshFloatTy(u32)\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n@@ -1764,6 +1761,7 @@ impl fmt::Debug for InferTy {\n             FloatVar(ref v) => v.fmt(f),\n             FreshTy(v) => write!(f, \"FreshTy({:?})\", v),\n             FreshIntTy(v) => write!(f, \"FreshIntTy({:?})\", v),\n+            FreshFloatTy(v) => write!(f, \"FreshFloatTy({:?})\", v)\n         }\n     }\n }\n@@ -3765,7 +3763,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             }\n \n             // Scalar and unique types are sendable, and durable\n-            ty_infer(ty::FreshIntTy(_)) |\n+            ty_infer(ty::FreshIntTy(_)) | ty_infer(ty::FreshFloatTy(_)) |\n             ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n             ty_bare_fn(..) | ty::ty_char => {\n                 TC::None\n@@ -4315,6 +4313,7 @@ pub fn type_is_fresh(ty: Ty) -> bool {\n     match ty.sty {\n       ty_infer(FreshTy(_)) => true,\n       ty_infer(FreshIntTy(_)) => true,\n+      ty_infer(FreshFloatTy(_)) => true,\n       _ => false\n     }\n }\n@@ -5016,6 +5015,7 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n         ty_infer(FloatVar(_)) => \"floating-point variable\".to_string(),\n         ty_infer(FreshTy(_)) => \"skolemized type\".to_string(),\n         ty_infer(FreshIntTy(_)) => \"skolemized integral type\".to_string(),\n+        ty_infer(FreshFloatTy(_)) => \"skolemized floating-point type\".to_string(),\n         ty_projection(_) => \"associated type\".to_string(),\n         ty_param(ref p) => {\n             if p.space == subst::SelfSpace {"}, {"sha": "526ad0ec1c9d2d4b6f3ff3c1420ac0b71d2b7720", "filename": "src/librustc/middle/ty_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_match.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -67,7 +67,8 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n \n         match (&a.sty, &b.sty) {\n             (_, &ty::ty_infer(ty::FreshTy(_))) |\n-            (_, &ty::ty_infer(ty::FreshIntTy(_))) => {\n+            (_, &ty::ty_infer(ty::FreshIntTy(_))) |\n+            (_, &ty::ty_infer(ty::FreshFloatTy(_))) => {\n                 Ok(a)\n             }\n "}, {"sha": "cf2911ab182efd9eb8316c0f20461f2c751fb15b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -349,7 +349,8 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             ty::FloatVar(ref vid) if print_var_ids => vid.repr(cx),\n             ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => format!(\"_\"),\n             ty::FreshTy(v) => format!(\"FreshTy({})\", v),\n-            ty::FreshIntTy(v) => format!(\"FreshIntTy({})\", v)\n+            ty::FreshIntTy(v) => format!(\"FreshIntTy({})\", v),\n+            ty::FreshFloatTy(v) => format!(\"FreshFloatTy({})\", v)\n         }\n     }\n "}, {"sha": "8677934fd646cb66269215b86c69d3c6a0ebc5ab", "filename": "src/test/compile-fail/issue-22645.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Add;\n+\n+trait Scalar {}\n+impl Scalar for f64 {}\n+\n+struct Bob;\n+\n+impl<RHS: Scalar> Add <RHS> for Bob {\n+  type Output = Bob;\n+  fn add(self, rhs : RHS) -> Bob {}\n+}\n+\n+fn main() {\n+  let b = Bob + 3.5;\n+  b + 3 //~ ERROR: is not implemented\n+  //~^ ERROR: is not implemented\n+  //~^^ ERROR: is not implemented\n+  //~^^^ ERROR: mismatched types\n+}"}, {"sha": "0fbc634826bc5b2931beef5389b333c8beb429bd", "filename": "src/test/compile-fail/issue-24352.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    1.0f64 - 1.0;\n+    1.0f64 - 1 //~ ERROR: is not implemented\n+    //~^ ERROR: is not implemented\n+}"}, {"sha": "1b857d94c72e42dd03b3b25467786e0c4f76583c", "filename": "src/test/run-pass/issue-23825.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Frun-pass%2Fissue-23825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eb09f356ef49e94dc367467325fce6048273c8/src%2Ftest%2Frun-pass%2Fissue-23825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23825.rs?ref=36eb09f356ef49e94dc367467325fce6048273c8", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Stringify {\n+    fn to_string(&self) -> String;\n+}\n+\n+impl Stringify for u32 {\n+    fn to_string(&self) -> String { format!(\"u32: {}\", *self) }\n+}\n+\n+impl Stringify for f32 {\n+    fn to_string(&self) -> String { format!(\"f32: {}\", *self) }\n+}\n+\n+fn print<T: Stringify>(x: T) -> String {\n+    x.to_string()\n+}\n+\n+fn main() {\n+    assert_eq!(&print(5), \"u32: 5\");\n+    assert_eq!(&print(5.0), \"f32: 5\");\n+}"}]}