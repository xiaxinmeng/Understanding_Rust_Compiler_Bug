{"sha": "d1c139360ba7658532b80bb08c26c64c578b0cc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYzEzOTM2MGJhNzY1ODUzMmI4MGJiMDhjMjZjNjRjNTc4YjBjYzc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T10:42:52Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T10:42:52Z"}, "message": "Fix typos in comments.", "tree": {"sha": "187e00a29604565a141f14ed5395dfaf0dd01740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187e00a29604565a141f14ed5395dfaf0dd01740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c139360ba7658532b80bb08c26c64c578b0cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c139360ba7658532b80bb08c26c64c578b0cc7", "html_url": "https://github.com/rust-lang/rust/commit/d1c139360ba7658532b80bb08c26c64c578b0cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c139360ba7658532b80bb08c26c64c578b0cc7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47480b8acb41ff84b9069f689f64af7e3ce900d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47480b8acb41ff84b9069f689f64af7e3ce900d", "html_url": "https://github.com/rust-lang/rust/commit/f47480b8acb41ff84b9069f689f64af7e3ce900d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "c49b041c02557e3a6e46ac9929fa4b00629d9f0e", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1c139360ba7658532b80bb08c26c64c578b0cc7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c139360ba7658532b80bb08c26c64c578b0cc7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=d1c139360ba7658532b80bb08c26c64c578b0cc7", "patch": "@@ -66,7 +66,7 @@ impl Parker {\n             c::NtWaitForKeyedEvent(keyed_event_handle(), self.ptr(), 0, ptr::null_mut());\n             // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n             // Note that we don't just write EMPTY, but use swap() to also\n-            // include a acquire-ordered read to synchronize with unpark()'s\n+            // include an acquire-ordered read to synchronize with unpark()'s\n             // release-ordered write.\n             self.state.swap(EMPTY, Acquire);\n         }\n@@ -86,7 +86,7 @@ impl Parker {\n             c::WaitOnAddress(self.ptr(), &PARKED as *const _ as c::LPVOID, 1, dur2timeout(timeout));\n             // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n             // Note that we don't just write EMPTY, but use swap() to also\n-            // include a acquire-ordered read to synchronize with unpark()'s\n+            // include an acquire-ordered read to synchronize with unpark()'s\n             // release-ordered write.\n             if self.state.swap(EMPTY, Acquire) == NOTIFIED {\n                 // Actually woken up by unpark()."}]}