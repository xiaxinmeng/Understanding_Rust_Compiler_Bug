{"sha": "4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNzFmOGQxNDE3NDIzZDkzM2RmZDRmNzRkNWQ0ZDE2N2I4NWY3N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T05:21:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T05:21:23Z"}, "message": "Auto merge of #32814 - jseyfried:improve_duplicate_glob_detection, r=nikomatsakis\n\nresolve: Improve duplicate glob detection\n\nThis fixes a bug introduced in #31726 in which we erroneously allow multiple imports of the same item under some circumstances.\n\nMore specifically, we erroneously allow a module that is in a cycle of glob re-exports to have other re-exports (besides the glob from the cycle).\nFor example,\n```rust\npub fn f() {}\nmod foo {\n    pub use f; // (1) This defines `foo::f`.\n    pub use bar::*; // (3) This also defines `foo::f`, which should be a duplicate error but is currently allowed.\n}\nmod bar {\n    pub use foo::*; // (2) This defines `bar::f`.\n}\n```\n\nA module in a glob re-export cycle can still have `pub` items after this PR. For example,\n```rust\nmod foo {\n    pub fn f() {}; // (1) This defines `foo::f`.\n    pub use bar::*; // (3) This is not a duplicate error since items shadow glob-imported re-exports (cf #31337).\n}\nmod bar {\n    pub use foo::*; // (2) This defines `bar::f`.\n}\n```\nr? @nikomatsakis", "tree": {"sha": "0dbbc205324310a16be1d2e283f6e08146ea0651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dbbc205324310a16be1d2e283f6e08146ea0651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "html_url": "https://github.com/rust-lang/rust/commit/4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c27cce9e59bbbc1e556de257de85122dad88dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c27cce9e59bbbc1e556de257de85122dad88dcd", "html_url": "https://github.com/rust-lang/rust/commit/7c27cce9e59bbbc1e556de257de85122dad88dcd"}, {"sha": "bc6daea2db6d5b5686e857b93c1f71a94268dddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6daea2db6d5b5686e857b93c1f71a94268dddb", "html_url": "https://github.com/rust-lang/rust/commit/bc6daea2db6d5b5686e857b93c1f71a94268dddb"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "ff684d37653cbe2602a0ae569b18c1b8cec03f10", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "patch": "@@ -275,7 +275,6 @@ impl<'a> ::ModuleS<'a> {\n     // Define the name or return the existing binding if there is a collision.\n     pub fn try_define_child(&self, name: Name, ns: Namespace, binding: NameBinding<'a>)\n                             -> Result<(), &'a NameBinding<'a>> {\n-        if self.resolutions.borrow_state() != ::std::cell::BorrowState::Unused { return Ok(()); }\n         self.update_resolution(name, ns, |resolution| {\n             resolution.try_define(self.arenas.alloc_name_binding(binding))\n         })\n@@ -318,15 +317,22 @@ impl<'a> ::ModuleS<'a> {\n     fn update_resolution<T, F>(&self, name: Name, ns: Namespace, update: F) -> T\n         where F: FnOnce(&mut NameResolution<'a>) -> T\n     {\n-        let mut resolution = &mut *self.resolution(name, ns).borrow_mut();\n-        let was_known = resolution.binding().is_some();\n-\n-        let t = update(resolution);\n-        if !was_known {\n-            if let Some(binding) = resolution.binding() {\n-                self.define_in_glob_importers(name, ns, binding);\n+        // Ensure that `resolution` isn't borrowed during `define_in_glob_importers`,\n+        // where it might end up getting re-defined via a glob cycle.\n+        let (new_binding, t) = {\n+            let mut resolution = &mut *self.resolution(name, ns).borrow_mut();\n+            let was_known = resolution.binding().is_some();\n+\n+            let t = update(resolution);\n+\n+            if was_known { return t; }\n+            match resolution.binding() {\n+                Some(binding) => (binding, t),\n+                None => return t,\n             }\n-        }\n+        };\n+\n+        self.define_in_glob_importers(name, ns, new_binding);\n         t\n     }\n \n@@ -650,11 +656,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         // Add to target_module's glob_importers\n         target_module.glob_importers.borrow_mut().push((module_, directive));\n \n-        for (&(name, ns), resolution) in target_module.resolutions.borrow().iter() {\n-            if let Some(binding) = resolution.borrow().binding() {\n-                if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n-                    let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n-                }\n+        // Ensure that `resolutions` isn't borrowed during `try_define_child`,\n+        // since it might get updated via a glob cycle.\n+        let bindings = target_module.resolutions.borrow().iter().filter_map(|(name, resolution)| {\n+            resolution.borrow().binding().map(|binding| (*name, binding))\n+        }).collect::<Vec<_>>();\n+        for ((name, ns), binding) in bindings {\n+            if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n+                let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n             }\n         }\n "}, {"sha": "077ae19b4cbd6b71058cf3bb398be19e2b2dabb0", "filename": "src/test/compile-fail/glob-cycles.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-cycles.rs?ref=4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub use bar::*;\n+    pub use main as f; //~ ERROR has already been imported\n+}\n+\n+mod bar {\n+    pub use foo::*;\n+}\n+\n+pub use foo::*;\n+pub use baz::*; //~ ERROR has already been imported\n+mod baz {\n+    pub use super::*;\n+}\n+\n+pub fn main() {}"}, {"sha": "af75783a710b53c2fc3d7f598e52b94462a599a3", "filename": "src/test/compile-fail/issue-32797.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b71f8d1417423d933dfd4f74d5d4d167b85f77e/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32797.rs?ref=4b71f8d1417423d933dfd4f74d5d4d167b85f77e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use bar::*;\n+mod bar {\n+    pub use super::*;\n+}\n+\n+pub use baz::*; //~ ERROR already been imported\n+mod baz {\n+    pub use main as f;\n+}\n+\n+pub fn main() {}"}]}