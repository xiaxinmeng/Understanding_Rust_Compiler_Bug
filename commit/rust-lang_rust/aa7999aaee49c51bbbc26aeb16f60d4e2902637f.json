{"sha": "aa7999aaee49c51bbbc26aeb16f60d4e2902637f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzk5OWFhZWU0OWM1MWJiYmMyNmFlYjE2ZjYwZDRlMjkwMjYzN2Y=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-03T13:59:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T13:59:20Z"}, "message": "Rollup merge of #62196 - cramertj:vec-leak, r=centril,withoutboats\n\nAdd Vec::leak", "tree": {"sha": "f6a60d11ff81f8fce3e22e80e8d7de685d8b0c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a60d11ff81f8fce3e22e80e8d7de685d8b0c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7999aaee49c51bbbc26aeb16f60d4e2902637f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHLS4CRBK7hj4Ov3rIwAAdHIIAKLkNF0U15yclyltK+1wFWAq\nSRJVz+mw5+BSS0GWVuVa9TQBC8FOtXf+c1relODdnIQGWT6QScSkf8JvtD9tTmvH\nc9h2YthdtbXDsf9LkNTiOUAxuO6nVvcDXuxM9O456DZcoXX6tShvNup9kKJ0blST\noTBqygP0Z9NmSU5pmVCP7/91cRBxSNfKp2oXVjQltAT+Il6V0eumAHP8cf8k4oqj\nM4KIwmEhK1zeofspOtngwZczU8ubYpn2ICjF/WSF95xSJZF1i4dPoxz/3MXw45yA\nrzdKCTQ+jlR//tyAYoesCYo1dgtFBTxkyLuw8Uder1yCoepQlD4HPaMnkVpf5gQ=\n=NDcv\n-----END PGP SIGNATURE-----\n", "payload": "tree f6a60d11ff81f8fce3e22e80e8d7de685d8b0c37\nparent 37c58c63a7a2300cce60fe88fa5449aaf70fffd7\nparent 95275658f26e0e83fb26f946e716fa5de28fe43a\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1562162360 -0400\ncommitter GitHub <noreply@github.com> 1562162360 -0400\n\nRollup merge of #62196 - cramertj:vec-leak, r=centril,withoutboats\n\nAdd Vec::leak\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7999aaee49c51bbbc26aeb16f60d4e2902637f", "html_url": "https://github.com/rust-lang/rust/commit/aa7999aaee49c51bbbc26aeb16f60d4e2902637f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7999aaee49c51bbbc26aeb16f60d4e2902637f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c58c63a7a2300cce60fe88fa5449aaf70fffd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c58c63a7a2300cce60fe88fa5449aaf70fffd7", "html_url": "https://github.com/rust-lang/rust/commit/37c58c63a7a2300cce60fe88fa5449aaf70fffd7"}, {"sha": "95275658f26e0e83fb26f946e716fa5de28fe43a", "url": "https://api.github.com/repos/rust-lang/rust/commits/95275658f26e0e83fb26f946e716fa5de28fe43a", "html_url": "https://github.com/rust-lang/rust/commit/95275658f26e0e83fb26f946e716fa5de28fe43a"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "c0544d7469ca76e0f572275e4e6a8e6cb99bbd71", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa7999aaee49c51bbbc26aeb16f60d4e2902637f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7999aaee49c51bbbc26aeb16f60d4e2902637f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=aa7999aaee49c51bbbc26aeb16f60d4e2902637f", "patch": "@@ -1367,6 +1367,40 @@ impl<T> Vec<T> {\n             self.truncate(new_len);\n         }\n     }\n+\n+    /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n+    /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n+    /// `'a`. If the type has only static references, or none at all, then this\n+    /// may be chosen to be `'static`.\n+    ///\n+    /// This function is similar to the `leak` function on `Box`.\n+    ///\n+    /// This function is mainly useful for data that lives for the remainder of\n+    /// the program's life. Dropping the returned reference will cause a memory\n+    /// leak.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple usage:\n+    ///\n+    /// ```\n+    /// #![feature(vec_leak)]\n+    ///\n+    /// fn main() {\n+    ///     let x = vec![1, 2, 3];\n+    ///     let static_ref: &'static mut [usize] = Vec::leak(x);\n+    ///     static_ref[0] += 1;\n+    ///     assert_eq!(static_ref, &[2, 2, 3]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"vec_leak\", issue = \"62195\")]\n+    #[inline]\n+    pub fn leak<'a>(vec: Vec<T>) -> &'a mut [T]\n+    where\n+        T: 'a // Technically not needed, but kept to be explicit.\n+    {\n+        Box::leak(vec.into_boxed_slice())\n+    }\n }\n \n impl<T: Clone> Vec<T> {"}]}