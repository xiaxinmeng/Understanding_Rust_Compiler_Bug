{"sha": "69cd8b5fcb559ff3342258273f2cc81023f699ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Y2Q4YjVmY2I1NTlmZjMzNDIyNTgyNzNmMmNjODEwMjNmNjk5YmE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-09T20:53:55Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T05:00:45Z"}, "message": "Added select2 for pipes.", "tree": {"sha": "2ad4ef570444616d97f713d7035683700366b33b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad4ef570444616d97f713d7035683700366b33b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69cd8b5fcb559ff3342258273f2cc81023f699ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69cd8b5fcb559ff3342258273f2cc81023f699ba", "html_url": "https://github.com/rust-lang/rust/commit/69cd8b5fcb559ff3342258273f2cc81023f699ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69cd8b5fcb559ff3342258273f2cc81023f699ba/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801e049617b25c36f048a20f59ec6f461397d265", "url": "https://api.github.com/repos/rust-lang/rust/commits/801e049617b25c36f048a20f59ec6f461397d265", "html_url": "https://github.com/rust-lang/rust/commit/801e049617b25c36f048a20f59ec6f461397d265"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "1d6d70defb95095ef7c2b06d52be63395852e7dc", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69cd8b5fcb559ff3342258273f2cc81023f699ba/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cd8b5fcb559ff3342258273f2cc81023f699ba/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=69cd8b5fcb559ff3342258273f2cc81023f699ba", "patch": "@@ -1,6 +1,7 @@\n // Runtime support for pipes.\n \n-import unsafe::{forget, reinterpret_cast};\n+import unsafe::{forget, reinterpret_cast, transmute};\n+import either::{either, left, right};\n \n enum state {\n     empty,\n@@ -243,6 +244,30 @@ fn wait_many(pkts: ~[&a.packet_header]) -> uint {\n     ready_packet\n }\n \n+fn select2<A: send, B: send>(\n+    +a: recv_packet<A>,\n+    +b: recv_packet<B>)\n+    -> either<(option<A>, recv_packet<B>), (recv_packet<A>, option<B>)>\n+{\n+    let a = unsafe { uniquify(a.unwrap()) };\n+    let b = unsafe { uniquify(b.unwrap()) };\n+    let i = {\n+        let headers = ~[&a.header,\n+                        &b.header];\n+        wait_many(headers)\n+    };\n+\n+    unsafe {\n+        alt i {\n+          0 { left((recv(recv_packet(transmute(a))),\n+                    recv_packet(transmute(b)))) }\n+          1 { right((recv_packet(transmute(a)),\n+                     recv(recv_packet(transmute(b))))) }\n+          _ { fail \"select2 return an invalid packet\" }\n+        }\n+    }\n+}\n+\n #[doc = \"Waits on a set of endpoints. Returns a message, its index,\n  and a list of the remaining endpoints.\"]\n fn select<T: send>(+endpoints: ~[recv_packet<T>])"}, {"sha": "09066eebd37e082178ddceaf3b544af1c6c0ba06", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69cd8b5fcb559ff3342258273f2cc81023f699ba/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cd8b5fcb559ff3342258273f2cc81023f699ba/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=69cd8b5fcb559ff3342258273f2cc81023f699ba", "patch": "@@ -72,4 +72,34 @@ fn main() {\n     sleep(iotask, 1000);\n \n     signal(c2);\n-}\n\\ No newline at end of file\n+\n+    test_select2();\n+}\n+\n+fn test_select2() {\n+    let (ac, ap) = stream::init();\n+    let (bc, bp) = stream::init();\n+\n+    stream::client::send(ac, 42);\n+\n+    alt pipes::select2(ap, bp) {\n+      either::left(*) { }\n+      either::right(*) { fail }\n+    }\n+\n+    stream::client::send(bc, \"abc\");\n+\n+    #error(\"done with first select2\");\n+\n+    let (ac, ap) = stream::init();\n+    let (bc, bp) = stream::init();\n+\n+    stream::client::send(bc, \"abc\");\n+\n+    alt pipes::select2(ap, bp) {\n+      either::left(*) { fail }\n+      either::right(*) { }\n+    }\n+\n+    stream::client::send(ac, 42);\n+}"}]}