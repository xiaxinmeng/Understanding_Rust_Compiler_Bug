{"sha": "037cf2c43649b7040befd38122c2f86db5968580", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2NmMmM0MzY0OWI3MDQwYmVmZDM4MTIyYzJmODZkYjU5Njg1ODA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-24T08:01:09Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-24T08:44:55Z"}, "message": "Discard every parsing error in silent_emitter\n\n`EmitterWriter` from rustc is wasting soooo much time constructing an error\nmessage that will never be emitted, instead we just implement our own `Emitter`\nthat just discards every error message.", "tree": {"sha": "bd5e8df9e636b91f1ffa43a01d58b9ef4349c106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5e8df9e636b91f1ffa43a01d58b9ef4349c106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037cf2c43649b7040befd38122c2f86db5968580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037cf2c43649b7040befd38122c2f86db5968580", "html_url": "https://github.com/rust-lang/rust/commit/037cf2c43649b7040befd38122c2f86db5968580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037cf2c43649b7040befd38122c2f86db5968580/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6dac248ec2f5580b2f4deab931efa8992ece40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dac248ec2f5580b2f4deab931efa8992ece40d", "html_url": "https://github.com/rust-lang/rust/commit/b6dac248ec2f5580b2f4deab931efa8992ece40d"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "2705bda72d1088dae90e19cf868f49ae8c90d5c2", "filename": "src/formatting.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/037cf2c43649b7040befd38122c2f86db5968580/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037cf2c43649b7040befd38122c2f86db5968580/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=037cf2c43649b7040befd38122c2f86db5968580", "patch": "@@ -7,7 +7,7 @@ use std::rc::Rc;\n use std::time::{Duration, Instant};\n \n use syntax::ast;\n-use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n+use syntax::errors::emitter::{ColorConfig, Emitter};\n use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n@@ -89,7 +89,7 @@ fn format_project<T: FormatHandler>(\n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n-    let silent_emitter = silent_emitter(source_map);\n+    let silent_emitter = silent_emitter();\n     parse_session.span_diagnostic = Handler::with_emitter(true, None, silent_emitter);\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n@@ -670,18 +670,20 @@ fn parse_crate(\n     Err(ErrorKind::ParseError)\n }\n \n-fn silent_emitter(source_map: Rc<SourceMap>) -> Box<EmitterWriter> {\n-    Box::new(EmitterWriter::new(\n-        Box::new(Vec::new()),\n-        Some(source_map),\n-        false,\n-        false,\n-    ))\n+/// Emitter which discards every error.\n+struct SilentEmitter;\n+\n+impl Emitter for SilentEmitter {\n+    fn emit(&mut self, _db: &DiagnosticBuilder<'_>) {}\n+}\n+\n+fn silent_emitter() -> Box<SilentEmitter> {\n+    Box::new(SilentEmitter {})\n }\n \n fn make_parse_sess(source_map: Rc<SourceMap>, config: &Config) -> ParseSess {\n     let tty_handler = if config.hide_parse_errors() {\n-        let silent_emitter = silent_emitter(source_map.clone());\n+        let silent_emitter = silent_emitter();\n         Handler::with_emitter(true, None, silent_emitter)\n     } else {\n         let supports_color = term::stderr().map_or(false, |term| term.supports_color());"}]}