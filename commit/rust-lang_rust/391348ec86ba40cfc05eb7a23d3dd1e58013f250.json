{"sha": "391348ec86ba40cfc05eb7a23d3dd1e58013f250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MTM0OGVjODZiYTQwY2ZjMDVlYjdhMjNkM2RkMWU1ODAxM2YyNTA=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-16T22:58:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-17T00:56:24Z"}, "message": "Consistify ast::local.", "tree": {"sha": "f2e5ae9633d460a0dcc4118cf068e7a6a1462a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2e5ae9633d460a0dcc4118cf068e7a6a1462a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/391348ec86ba40cfc05eb7a23d3dd1e58013f250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/391348ec86ba40cfc05eb7a23d3dd1e58013f250", "html_url": "https://github.com/rust-lang/rust/commit/391348ec86ba40cfc05eb7a23d3dd1e58013f250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/391348ec86ba40cfc05eb7a23d3dd1e58013f250/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47101703e94fcce76c05d2713d44d0ecb65b16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d47101703e94fcce76c05d2713d44d0ecb65b16e", "html_url": "https://github.com/rust-lang/rust/commit/d47101703e94fcce76c05d2713d44d0ecb65b16e"}], "stats": {"total": 145, "additions": 75, "deletions": 70}, "files": [{"sha": "49710cf665643c3e08dfb21fcefedf143cc05991", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -205,11 +205,11 @@ type local_ =\n         def_id id,\n         ann ann);\n \n-type local = spanned[@local_];\n+type local = spanned[local_];\n \n type decl = spanned[decl_];\n \n-tag decl_ { decl_local(@local_); decl_item(@item); }\n+tag decl_ { decl_local(@local); decl_item(@item); }\n \n type arm = rec(@pat pat, block block);\n "}, {"sha": "9ab0404b9e16cc38b2870a8b0bef909b3c3e494b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -1265,11 +1265,11 @@ fn parse_else_expr(&parser p) -> @ast::expr {\n \n fn parse_head_local(&parser p) -> @ast::local {\n     auto lo = p.get_lo_pos();\n-    let @ast::local_ l =\n-        if (is_word(p, \"auto\")) {\n-            parse_auto_local(p)\n-        } else { parse_typed_local(p) };\n-    ret @spanned(lo, p.get_hi_pos(), l);\n+    if (is_word(p, \"auto\")) {\n+        ret parse_auto_local(p);\n+    } else { \n+        ret parse_typed_local(p);\n+    }\n }\n \n fn parse_for_expr(&parser p) -> @ast::expr {\n@@ -1444,23 +1444,27 @@ fn parse_pat(&parser p) -> @ast::pat {\n     ret @spanned(lo, hi, pat);\n }\n \n-fn parse_local_full(&option::t[@ast::ty] tyopt, &parser p) -> @ast::local_ {\n+fn parse_local_full(&option::t[@ast::ty] tyopt, &parser p)\n+    -> @ast::local {\n+    auto lo = p.get_lo_pos();\n     auto ident = parse_value_ident(p);\n     auto init = parse_initializer(p);\n-    ret @rec(ty=tyopt,\n-             infer=false,\n-             ident=ident,\n-             init=init,\n-             id=p.next_def_id(),\n-             ann=p.get_ann());\n+    ret @spanned(lo, p.get_hi_pos(),\n+                 rec(ty=tyopt,\n+                     infer=false,\n+                     ident=ident,\n+                     init=init,\n+                     id=p.next_def_id(),\n+                     ann=p.get_ann()));\n+             \n }\n \n-fn parse_typed_local(&parser p) -> @ast::local_ {\n+fn parse_typed_local(&parser p) -> @ast::local {\n     auto ty = parse_ty(p);\n     ret parse_local_full(some(ty), p);\n }\n \n-fn parse_auto_local(&parser p) -> @ast::local_ {\n+fn parse_auto_local(&parser p) -> @ast::local {\n     ret parse_local_full(none, p);\n }\n "}, {"sha": "24384f9ccc62e24e445aea05d1c60f05dd8c01ef", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -41,8 +41,7 @@ tag scope {\n     scope_item(@ast::item);\n     scope_fn(ast::fn_decl, vec[ast::ty_param]);\n     scope_native_item(@ast::native_item);\n-    scope_loop(@ast::local_); // there's only 1 decl per loop.\n-\n+    scope_loop(@ast::local); // there's only 1 decl per loop.\n     scope_block(ast::block);\n     scope_arm(ast::arm);\n }\n@@ -356,10 +355,10 @@ fn visit_expr_with_scope(&@ast::expr x, &scopes sc, &vt[scopes] v) {\n     auto new_sc =\n         alt (x.node) {\n             case (ast::expr_for(?d, _, _, _)) {\n-                cons[scope](scope_loop(d.node), @sc)\n+                cons[scope](scope_loop(d), @sc)\n             }\n             case (ast::expr_for_each(?d, _, _, _)) {\n-                cons[scope](scope_loop(d.node), @sc)\n+                cons[scope](scope_loop(d), @sc)\n             }\n             case (ast::expr_fn(?f, _)) { cons(scope_fn(f.decl, []), @sc) }\n             case (_) { sc }\n@@ -575,8 +574,8 @@ fn lookup_in_scope(&env e, scopes sc, &span sp, &ident id, namespace ns) ->\n             }\n             case (scope_loop(?local)) {\n                 if (ns == ns_value) {\n-                    if (str::eq(local.ident, id)) {\n-                        ret some(ast::def_local(local.id));\n+                    if (str::eq(local.node.ident, id)) {\n+                        ret some(ast::def_local(local.node.id));\n                     }\n                 }\n             }\n@@ -680,8 +679,8 @@ fn lookup_in_block(&ident id, &ast::block_ b, namespace ns) ->\n             case (ast::stmt_decl(?d, _)) {\n                 alt (d.node) {\n                     case (ast::decl_local(?loc)) {\n-                        if (ns == ns_value && str::eq(id, loc.ident)) {\n-                            ret some(ast::def_local(loc.id));\n+                        if (ns == ns_value && str::eq(id, loc.node.ident)) {\n+                            ret some(ast::def_local(loc.node.id));\n                         }\n                     }\n                     case (ast::decl_item(?it)) {\n@@ -1169,7 +1168,7 @@ fn check_block(@env e, &ast::block b, &() x, &vt[()] v) {\n             case (ast::stmt_decl(?d, _)) {\n                 alt (d.node) {\n                     case (ast::decl_local(?loc)) {\n-                        add_name(values, d.span, loc.ident);\n+                        add_name(values, d.span, loc.node.ident);\n                     }\n                     case (ast::decl_item(?it)) {\n                         alt (it.node) {"}, {"sha": "b0381684626bd6dfc8893965477c8ebb69265634", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -4026,7 +4026,7 @@ fn trans_if(&@block_ctxt cx, &@ast::expr cond, &ast::block thn,\n \n fn trans_for(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n              &ast::block body) -> result {\n-    fn inner(&@block_ctxt cx, @ast::local_ local, ValueRef curr, ty::t t,\n+    fn inner(&@block_ctxt cx, @ast::local local, ValueRef curr, ty::t t,\n              ast::block body, @block_ctxt outer_next_cx) -> result {\n         auto next_cx = new_sub_block_ctxt(cx, \"next\");\n         auto scope_cx =\n@@ -4045,7 +4045,7 @@ fn trans_for(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n     auto seq_res = trans_expr(cx, seq);\n     auto it =\n         iter_sequence(seq_res.bcx, seq_res.val, seq_ty,\n-                      bind inner(_, local.node, _, _, body, next_cx));\n+                      bind inner(_, local, _, _, body, next_cx));\n     it.bcx.build.Br(next_cx.llbb);\n     ret res(next_cx, it.val);\n }\n@@ -6440,15 +6440,15 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n     ret res(bcx, pair);\n }\n \n-fn init_local(&@block_ctxt cx, &@ast::local_ local) -> result {\n+fn init_local(&@block_ctxt cx, &@ast::local local) -> result {\n     // Make a note to drop this slot on the way out.\n \n-    assert (cx.fcx.lllocals.contains_key(local.id));\n-    auto llptr = cx.fcx.lllocals.get(local.id);\n-    auto ty = node_ann_type(cx.fcx.lcx.ccx, local.ann);\n+    assert (cx.fcx.lllocals.contains_key(local.node.id));\n+    auto llptr = cx.fcx.lllocals.get(local.node.id);\n+    auto ty = node_ann_type(cx.fcx.lcx.ccx, local.node.ann);\n     auto bcx = cx;\n     find_scope_cx(cx).cleanups += [clean(bind drop_slot(_, llptr, ty))];\n-    alt (local.init) {\n+    alt (local.node.init) {\n         case (some(?init)) {\n             alt (init.op) {\n                 case (ast::init_assign) {\n@@ -6595,8 +6595,7 @@ fn trans_block_cleanups(&@block_ctxt cx, &@block_ctxt cleanup_cx) ->\n     ret bcx;\n }\n \n-iter block_locals(&ast::block b) -> @ast::local_ {\n-\n+iter block_locals(&ast::block b) -> @ast::local {\n     // FIXME: putting from inside an iter block doesn't work, so we can't\n     // use the index here.\n     for (@ast::stmt s in b.node.stmts) {\n@@ -6645,18 +6644,17 @@ fn alloc_ty(&@block_ctxt cx, &ty::t t) -> result {\n     ret res(cx, val);\n }\n \n-fn alloc_local(&@block_ctxt cx, &@ast::local_ local) -> result {\n-    auto t = node_ann_type(cx.fcx.lcx.ccx, local.ann);\n+fn alloc_local(&@block_ctxt cx, &@ast::local local) -> result {\n+    auto t = node_ann_type(cx.fcx.lcx.ccx, local.node.ann);\n     auto r = alloc_ty(cx, t);\n-    r.bcx.fcx.lllocals.insert(local.id, r.val);\n+    r.bcx.fcx.lllocals.insert(local.node.id, r.val);\n     ret r;\n }\n \n fn trans_block(&@block_ctxt cx, &ast::block b, &out_method output) -> result {\n     auto bcx = cx;\n-    for each (@ast::local_ local in block_locals(b)) {\n+    for each (@ast::local local in block_locals(b)) {\n         // FIXME Update bcx.sp\n-\n         bcx = alloc_local(bcx, local).bcx;\n     }\n     auto r = res(bcx, C_nil());"}, {"sha": "3eaf3cfba66a12bf2cd2bf690c12dec3425cf824", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -550,20 +550,23 @@ fn find_pre_post_stmt(&fn_ctxt fcx, &stmt s) {\n         case (stmt_decl(?adecl, ?a)) {\n             alt (adecl.node) {\n                 case (decl_local(?alocal)) {\n-                    alt (alocal.init) {\n+                    alt (alocal.node.init) {\n                         case (some(?an_init)) {\n                             find_pre_post_expr(fcx, an_init.expr);\n-                            copy_pre_post(fcx.ccx, alocal.ann, an_init.expr);\n+                            copy_pre_post(fcx.ccx, alocal.node.ann, \n+                                          an_init.expr);\n                             /* Inherit ann from initializer, and add var being\n                                initialized to the postcondition */\n \n                             copy_pre_post(fcx.ccx, a, an_init.expr);\n                             gen(fcx, a,\n-                                rec(id=alocal.id, c=ninit(alocal.ident)));\n+                                rec(id=alocal.node.id, \n+                                    c=ninit(alocal.node.ident)));\n                         }\n                         case (none) {\n                             clear_pp(ann_to_ts_ann(fcx.ccx,\n-                                                   alocal.ann).conditions);\n+                                                   alocal.node.ann)\n+                                     .conditions);\n                             clear_pp(ann_to_ts_ann(fcx.ccx, a).conditions);\n                         }\n                     }"}, {"sha": "841a53702d11aba4f42c4d104fbbd2f56248c1ab", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -663,25 +663,25 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n         case (stmt_decl(?adecl, ?a)) {\n             alt (adecl.node) {\n                 case (decl_local(?alocal)) {\n-                    alt (alocal.init) {\n+                    alt (alocal.node.init) {\n                         case (some(?an_init)) {\n                             changed =\n                                 extend_prestate(stmt_ann.states.prestate,\n                                                 pres) || changed;\n                             changed =\n                                 find_pre_post_state_expr(fcx, pres,\n-                                                         an_init.expr) ||\n-                                    changed;\n+                                                         an_init.expr)\n+                                || changed;\n                             changed =\n                                 extend_poststate(stmt_ann.states.poststate,\n                                                  expr_poststate(fcx.ccx,\n                                                                 an_init.expr))\n                                     || changed;\n                             changed =\n                                 gen_poststate(fcx, a,\n-                                              rec(id=alocal.id,\n-                                                  c=ninit(alocal.ident))) ||\n-                                    changed;\n+                                              rec(id=alocal.node.id,\n+                                                  c=ninit(alocal.node.ident)))\n+                                || changed;\n                             log \"Summary: stmt = \";\n                             log_stmt(*s);\n                             log \"prestate = \";"}, {"sha": "c8050eb1bc9e5f1c74087c1c13558fa910eb28b0", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -1577,8 +1577,8 @@ fn expr_has_ty_params(&ctxt cx, &@ast::expr expr) -> bool {\n     ret ann_has_type_params(cx, expr_ann(expr));\n }\n \n-fn decl_local_ty(&ctxt cx, &@ast::local_ l) -> t {\n-    ret ann_to_type(cx, l.ann);\n+fn decl_local_ty(&ctxt cx, &@ast::local l) -> t {\n+    ret ann_to_type(cx, l.node.ann);\n }\n \n fn stmt_ann(&@ast::stmt s) -> ast::ann {"}, {"sha": "d96cc79faf4c364d2e7628008d088571ab59aa3d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -1443,12 +1443,11 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n     fn check_for_or_for_each(&@fn_ctxt fcx, &@ast::local local,\n                              &ty::t element_ty, &ast::block body,\n                              uint node_id) {\n-        check_decl_local(fcx, local.node);\n+        check_decl_local(fcx, local);\n         check_block(fcx, body);\n         // Unify type of decl with element type of the seq\n-\n         demand::simple(fcx, local.span,\n-                       ty::decl_local_ty(fcx.ccx.tcx, local.node),\n+                       ty::decl_local_ty(fcx.ccx.tcx, local),\n                        element_ty);\n         auto typ = ty::mk_nil(fcx.ccx.tcx);\n         write::ty_only_fixup(fcx, node_id, typ);\n@@ -2239,24 +2238,26 @@ fn check_decl_initializer(&@fn_ctxt fcx, &ast::def_id lid,\n     }\n }\n \n-fn check_decl_local(&@fn_ctxt fcx, &@ast::local_ local) -> @ast::local_ {\n-    auto a_res = local.ann;\n-    alt (fcx.locals.find(local.id)) {\n+fn check_decl_local(&@fn_ctxt fcx, &@ast::local local) -> @ast::local {\n+    auto a_res = local.node.ann;\n+    alt (fcx.locals.find(local.node.id)) {\n         case (none) {\n+\n             fcx.ccx.tcx.sess.bug(\"check_decl_local: local id not found \" +\n-                                     local.ident);\n+                                     local.node.ident);\n         }\n         case (some(?i)) {\n             auto t = ty::mk_var(fcx.ccx.tcx, i);\n             write::ty_only_fixup(fcx, a_res.id, t);\n-            auto initopt = local.init;\n-            alt (local.init) {\n+            auto initopt = local.node.init;\n+            alt (initopt) {\n                 case (some(?init)) {\n-                    check_decl_initializer(fcx, local.id, init);\n+                    check_decl_initializer(fcx, local.node.id, init);\n                 }\n                 case (_) {/* fall through */ }\n             }\n-            ret @rec(init=initopt, ann=a_res with *local);\n+            auto newlocal = rec(init=initopt, ann=a_res with local.node);\n+            ret @rec(node=newlocal, span=local.span);\n         }\n     }\n }"}, {"sha": "485b47ae4e4b2bbff8bd2d52f56849f358844923", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -236,7 +236,7 @@ fn visit_stmt[E](&@stmt s, &E e, &vt[E] v) {\n fn visit_decl[E](&@decl d, &E e, &vt[E] v) {\n     alt (d.node) {\n         case (decl_local(?loc)) {\n-            vt(v).visit_local(@respan(d.span, loc), e, v);\n+            vt(v).visit_local(loc, e, v);\n         }\n         case (decl_item(?it)) { vt(v).visit_item(it, e, v); }\n     }"}, {"sha": "cc17b0536791f19ccb61fa806c688e1eafbcad94", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -256,7 +256,7 @@ fn walk_decl(&ast_visitor v, @ast::decl d) {\n     if (!v.keep_going()) { ret; }\n     v.visit_decl_pre(d);\n     alt (d.node) {\n-        case (ast::decl_local(?loc)) { walk_local(v, @respan(d.span, loc)); }\n+        case (ast::decl_local(?loc)) { walk_local(v, loc); }\n         case (ast::decl_item(?it)) { walk_item(v, it); }\n     }\n     v.visit_decl_post(d);"}, {"sha": "b8f28a1f7f2e0dc35482b8c48aa0519d1fe4cc90", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -864,7 +864,7 @@ fn print_decl(&ps s, &@ast::decl decl) {\n         case (ast::decl_local(?loc)) {\n             space(s.s);\n             ibox(s, indent_unit);\n-            alt (loc.ty) {\n+            alt (loc.node.ty) {\n                 case (some(?ty)) {\n                     word_nbsp(s, \"let\");\n                     print_type(s, *ty);\n@@ -877,15 +877,15 @@ fn print_decl(&ps s, &@ast::decl decl) {\n                     alt (s.mode) {\n                         case (mo_untyped) {/* no-op */ }\n                         case (mo_typed(?tcx)) {\n-                            auto lty = ty::ann_to_type(tcx, loc.ann);\n+                            auto lty = ty::ann_to_type(tcx, loc.node.ann);\n                             word_space(s, ppaux::ty_to_str(tcx, lty));\n                         }\n                         case (mo_identified) {/* no-op */ }\n                     }\n                 }\n             }\n-            word(s.s, loc.ident);\n-            alt (loc.init) {\n+            word(s.s, loc.node.ident);\n+            alt (loc.node.init) {\n                 case (some(?init)) {\n                     space(s.s);\n                     alt (init.op) {"}, {"sha": "347af0137c530e6669eedba92a8d9d63666aa983", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/391348ec86ba40cfc05eb7a23d3dd1e58013f250/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=391348ec86ba40cfc05eb7a23d3dd1e58013f250", "patch": "@@ -164,8 +164,8 @@ fn has_nonlocal_exits(&ast::block b) -> bool {\n     ret *has_exits;\n }\n \n-fn local_rhs_span(&@ast::local_ l, &span def) -> span {\n-    alt (l.init) {\n+fn local_rhs_span(&@ast::local l, &span def) -> span {\n+    alt (l.node.init) {\n         case (some(?i)) { ret i.expr.span; }\n         case (_) { ret def; }\n     }"}]}