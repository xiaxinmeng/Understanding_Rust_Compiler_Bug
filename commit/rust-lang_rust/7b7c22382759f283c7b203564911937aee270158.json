{"sha": "7b7c22382759f283c7b203564911937aee270158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiN2MyMjM4Mjc1OWYyODNjN2IyMDM1NjQ5MTE5MzdhZWUyNzAxNTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-19T15:55:35Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-31T00:02:15Z"}, "message": "Always pass `-Z future-incompat-report` to UI tests", "tree": {"sha": "1265b0eaf6f09f8899135c876a082afd547a7df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1265b0eaf6f09f8899135c876a082afd547a7df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7c22382759f283c7b203564911937aee270158", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+cqYcACgkQtAh+UQ6Y\nsWSgQQ//bfe4BnuKpAxc1W224yVLYl8ak/jUbAvMKG8FwJd1tZpuvc+4uZ7YPwlq\nT/vpDKxGuSeVAFRkC9copJt6BrNlmQ+6s+XnMN1088IfdTGbXpS6RwdHJNkPSJuo\nDwpzSMFgJo4xRLcaT9buXHqt+WjhFE0W4lmXTkQbTvl67AxO2nx0rfB7FUhIqY/6\nq/EOhJy4kkDxutJShCF8S1cEfboEqFojuxruwM1F5qPXRxNMRpviLBazLxIkorUT\nnCpLr9ibEu25LG0cbAC7n4WcxBa/2869aBucY8NJZjiRmrlvUvzvziiMjhtyKDPR\nMs4b9a8GejxM6GonRYn3TgmbE6/PW1Yf88rmUqjvHiAP0kztZtjMtCu7GBrC02Ey\nb3/Qrl7OlPMH4CcOqejDyqU1OpBrVf53533cQAtYwUDV+vQL3MbTZy5eWh79gj/j\ntQzfg+OdrX+IaAWE/qT15n1beyygZOER0fdEYlH0GXvKl6TjLoNECVq6MjQRdRBS\nJBnNGDwh923bn1WY8UeNC5iBdCfjBJ/6IK26Rrxs1WGPEr2uCKpSWDWuwiZEjysB\n8erqZyLWxOFkAMXNePOk9N4Mh68su5vhkXrTi9tcrqu4XtOEgNDKf1YWpT3Y2cyU\n7v5r7U+VJUc0gNKIJOLmiMuHLOSt9mgpgrVXbEg5zBkIYsYK39U=\n=2mmU\n-----END PGP SIGNATURE-----", "payload": "tree 1265b0eaf6f09f8899135c876a082afd547a7df2\nparent 2f6e59d94126bf9d4d09fe92b18d329a1631448f\nauthor Aaron Hill <aa1ronham@gmail.com> 1603122935 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604102535 -0400\n\nAlways pass `-Z future-incompat-report` to UI tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7c22382759f283c7b203564911937aee270158", "html_url": "https://github.com/rust-lang/rust/commit/7b7c22382759f283c7b203564911937aee270158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7c22382759f283c7b203564911937aee270158/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6e59d94126bf9d4d09fe92b18d329a1631448f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6e59d94126bf9d4d09fe92b18d329a1631448f", "html_url": "https://github.com/rust-lang/rust/commit/2f6e59d94126bf9d4d09fe92b18d329a1631448f"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "7f511bde3cbfcd97a9d019b5caf58583da74d6d9", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=7b7c22382759f283c7b203564911937aee270158", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // run-rustfix\n-// compile-flags: -Z emit-future-incompat-report\n \n fn main() {\n     let small = [1, 2];"}, {"sha": "d5fe83a7834b6422d81c466b65793be8374c46a7", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=7b7c22382759f283c7b203564911937aee270158", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // run-rustfix\n-// compile-flags: -Z emit-future-incompat-report\n \n fn main() {\n     let small = [1, 2];"}, {"sha": "211315c3fcf05d48281d70e90f48bf21c44e96a8", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c22382759f283c7b203564911937aee270158/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=7b7c22382759f283c7b203564911937aee270158", "patch": "@@ -1,5 +1,5 @@\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n+  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n    |\n LL |     small.into_iter();\n    |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -9,7 +9,7 @@ LL |     small.into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n+  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n    |\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -18,7 +18,7 @@ LL |     [1, 2].into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n+  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n    |\n LL |     big.into_iter();\n    |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -27,7 +27,7 @@ LL |     big.into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n+  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n    |\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -36,7 +36,7 @@ LL |     [0u8; 33].into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n+  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n    |\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -45,7 +45,7 @@ LL |     Box::new(small).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n+  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -54,7 +54,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n+  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n    |\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -63,7 +63,7 @@ LL |     Box::new(big).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n+  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -72,7 +72,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n+  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -81,7 +81,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n+  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -90,7 +90,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n+  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -99,7 +99,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n+  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -111,7 +111,7 @@ warning: 12 warnings emitted\n \n Future incompatibility report: Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n+  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n    |\n LL |     small.into_iter();\n    |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -122,7 +122,7 @@ LL |     small.into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n+  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n    |\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -132,7 +132,7 @@ LL |     [1, 2].into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n+  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n    |\n LL |     big.into_iter();\n    |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -142,7 +142,7 @@ LL |     big.into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n+  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n    |\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -152,7 +152,7 @@ LL |     [0u8; 33].into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n+  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n    |\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -162,7 +162,7 @@ LL |     Box::new(small).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n+  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -172,7 +172,7 @@ LL |     Box::new([1, 2]).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n+  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n    |\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -182,7 +182,7 @@ LL |     Box::new(big).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n+  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -192,7 +192,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n+  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -202,7 +202,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n+  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -212,7 +212,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n+  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -222,7 +222,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n+  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -232,13 +232,13 @@ LL |     Box::new(Box::new([0u8; 33])).into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:61:12\n+  --> $DIR/into-iter-on-arrays-lint.rs:60:12\n    |\n LL |     [0, 1].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n note: the lint level is defined here\n-  --> $DIR/into-iter-on-arrays-lint.rs:60:13\n+  --> $DIR/into-iter-on-arrays-lint.rs:59:13\n    |\n LL |     #[allow(array_into_iter)]\n    |             ^^^^^^^^^^^^^^^"}, {"sha": "19ddcf3a01091d5decb2d094b33e7b29c1054349", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c22382759f283c7b203564911937aee270158/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c22382759f283c7b203564911937aee270158/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7b7c22382759f283c7b203564911937aee270158", "patch": "@@ -1942,6 +1942,7 @@ impl<'test> TestCx<'test> {\n                 }\n                 rustc.arg(\"-Zui-testing\");\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n+                rustc.arg(\"-Zemit-future-incompat-report\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}