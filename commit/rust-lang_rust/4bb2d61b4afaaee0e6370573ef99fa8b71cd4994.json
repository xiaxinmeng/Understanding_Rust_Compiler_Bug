{"sha": "4bb2d61b4afaaee0e6370573ef99fa8b71cd4994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjJkNjFiNGFmYWFlZTBlNjM3MDU3M2VmOTlmYThiNzFjZDQ5OTQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2017-08-06T06:57:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-06T06:57:32Z"}, "message": "Merge pull request #1929 from Frederick888/fix-1928\n\nTry to fix #1928", "tree": {"sha": "4d25d2368b32ceb4d4e02cf7fd78a31e416e4ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d25d2368b32ceb4d4e02cf7fd78a31e416e4ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994", "html_url": "https://github.com/rust-lang/rust/commit/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21a46c21c674fc2efa231c246792f672b6481a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/21a46c21c674fc2efa231c246792f672b6481a45", "html_url": "https://github.com/rust-lang/rust/commit/21a46c21c674fc2efa231c246792f672b6481a45"}, {"sha": "4de37160bb0da14d91a3e58508ab6304556a8b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de37160bb0da14d91a3e58508ab6304556a8b48", "html_url": "https://github.com/rust-lang/rust/commit/4de37160bb0da14d91a3e58508ab6304556a8b48"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "14331d59daeaff8e2f6c89b34abc2c2c1a093aa0", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb2d61b4afaaee0e6370573ef99fa8b71cd4994/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4bb2d61b4afaaee0e6370573ef99fa8b71cd4994", "patch": "@@ -12,7 +12,7 @@ use utils::{get_item_name, get_parent_expr, implements_trait, in_macro, is_integ\n             span_lint, span_lint_and_then, walk_ptrs_ty, last_path_segment, iter_input_pats, in_constant,\n             match_trait_method, paths};\n use utils::sugg::Sugg;\n-use syntax::ast::{LitKind, CRATE_NODE_ID};\n+use syntax::ast::{LitKind, CRATE_NODE_ID, FloatTy};\n \n /// **What it does:** Checks for function arguments and let bindings denoted as `ref`.\n ///\n@@ -403,23 +403,41 @@ fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n     let res = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr);\n     if let Ok(ConstVal::Float(val)) = res {\n         use std::cmp::Ordering;\n-        match val {\n-            val @ ConstFloat::F32(_) => {\n-                let zero = ConstFloat::F32(0.0);\n+        match val.ty {\n+            FloatTy::F32 => {\n+                let zero = ConstFloat {\n+                    ty: FloatTy::F32,\n+                    bits: 0.0f32.to_bits() as u128,\n+                };\n \n-                let infinity = ConstFloat::F32(::std::f32::INFINITY);\n+                let infinity = ConstFloat {\n+                    ty: FloatTy::F32,\n+                    bits: ::std::f32::INFINITY.to_bits() as u128,\n+                };\n \n-                let neg_infinity = ConstFloat::F32(::std::f32::NEG_INFINITY);\n+                let neg_infinity = ConstFloat {\n+                    ty: FloatTy::F32,\n+                    bits: ::std::f32::NEG_INFINITY.to_bits() as u128,\n+                };\n \n                 val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||\n                 val.try_cmp(neg_infinity) == Ok(Ordering::Equal)\n             },\n-            val @ ConstFloat::F64(_) => {\n-                let zero = ConstFloat::F64(0.0);\n+            FloatTy::F64 => {\n+                let zero = ConstFloat {\n+                    ty: FloatTy::F64,\n+                    bits: 0.0f64.to_bits() as u128,\n+                };\n \n-                let infinity = ConstFloat::F64(::std::f64::INFINITY);\n+                let infinity = ConstFloat {\n+                    ty: FloatTy::F64,\n+                    bits: ::std::f64::INFINITY.to_bits() as u128,\n+                };\n \n-                let neg_infinity = ConstFloat::F64(::std::f64::NEG_INFINITY);\n+                let neg_infinity = ConstFloat {\n+                    ty: FloatTy::F64,\n+                    bits: ::std::f64::NEG_INFINITY.to_bits() as u128,\n+                };\n \n                 val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||\n                 val.try_cmp(neg_infinity) == Ok(Ordering::Equal)"}]}