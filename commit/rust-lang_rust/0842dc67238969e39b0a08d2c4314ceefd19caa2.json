{"sha": "0842dc67238969e39b0a08d2c4314ceefd19caa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDJkYzY3MjM4OTY5ZTM5YjBhMDhkMmM0MzE0Y2VlZmQxOWNhYTI=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:37:02Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:37:02Z"}, "message": "collect str SliceIndex tests into a mod\n\nGitHub users: I think you can add ?w=1 to the url\nfor a vastly cleaner whitespace-ignoring diff", "tree": {"sha": "9e86bc6859eaa51f9866ff01462799a1b5e76aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e86bc6859eaa51f9866ff01462799a1b5e76aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0842dc67238969e39b0a08d2c4314ceefd19caa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0842dc67238969e39b0a08d2c4314ceefd19caa2", "html_url": "https://github.com/rust-lang/rust/commit/0842dc67238969e39b0a08d2c4314ceefd19caa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0842dc67238969e39b0a08d2c4314ceefd19caa2/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fab1674c3db2cf4b2d1546a7120d8d56a85c355", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fab1674c3db2cf4b2d1546a7120d8d56a85c355", "html_url": "https://github.com/rust-lang/rust/commit/4fab1674c3db2cf4b2d1546a7120d8d56a85c355"}], "stats": {"total": 277, "additions": 140, "deletions": 137}, "files": [{"sha": "c9536cbe16855c32631a51c0c7d9994ff6ba4912", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 140, "deletions": 137, "changes": 277, "blob_url": "https://github.com/rust-lang/rust/blob/0842dc67238969e39b0a08d2c4314ceefd19caa2/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0842dc67238969e39b0a08d2c4314ceefd19caa2/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=0842dc67238969e39b0a08d2c4314ceefd19caa2", "patch": "@@ -291,113 +291,160 @@ fn test_replace_pattern() {\n     assert_eq!(data.replace(|c| c == '\u03b3', \"\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\"), \"abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4abcd\u03b1\u03b2\ud83d\ude3a\ud83d\ude3a\ud83d\ude3a\u03b4\");\n }\n \n-#[test]\n-fn test_slice() {\n-    assert_eq!(\"ab\", &\"abc\"[0..2]);\n-    assert_eq!(\"bc\", &\"abc\"[1..3]);\n-    assert_eq!(\"\", &\"abc\"[1..1]);\n-    assert_eq!(\"\\u{65e5}\", &\"\\u{65e5}\\u{672c}\"[0..3]);\n-\n-    let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n-    assert_eq!(\"\u0e1b\", &data[0..3]);\n-    assert_eq!(\"\u0e23\", &data[3..6]);\n-    assert_eq!(\"\", &data[3..3]);\n-    assert_eq!(\"\u534e\", &data[30..33]);\n-\n-    fn a_million_letter_x() -> String {\n-        let mut i = 0;\n-        let mut rs = String::new();\n-        while i < 100000 {\n-            rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\");\n-            i += 1;\n+mod slice_index {\n+    #[test]\n+    fn test_slice() {\n+        assert_eq!(\"ab\", &\"abc\"[0..2]);\n+        assert_eq!(\"bc\", &\"abc\"[1..3]);\n+        assert_eq!(\"\", &\"abc\"[1..1]);\n+        assert_eq!(\"\\u{65e5}\", &\"\\u{65e5}\\u{672c}\"[0..3]);\n+\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        assert_eq!(\"\u0e1b\", &data[0..3]);\n+        assert_eq!(\"\u0e23\", &data[3..6]);\n+        assert_eq!(\"\", &data[3..3]);\n+        assert_eq!(\"\u534e\", &data[30..33]);\n+\n+        fn a_million_letter_x() -> String {\n+            let mut i = 0;\n+            let mut rs = String::new();\n+            while i < 100000 {\n+                rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\");\n+                i += 1;\n+            }\n+            rs\n         }\n-        rs\n-    }\n-    fn half_a_million_letter_x() -> String {\n-        let mut i = 0;\n-        let mut rs = String::new();\n-        while i < 100000 {\n-            rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\");\n-            i += 1;\n+        fn half_a_million_letter_x() -> String {\n+            let mut i = 0;\n+            let mut rs = String::new();\n+            while i < 100000 {\n+                rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\");\n+                i += 1;\n+            }\n+            rs\n         }\n-        rs\n+        let letters = a_million_letter_x();\n+        assert_eq!(half_a_million_letter_x(), &letters[0..3 * 500000]);\n     }\n-    let letters = a_million_letter_x();\n-    assert_eq!(half_a_million_letter_x(), &letters[0..3 * 500000]);\n-}\n \n-#[test]\n-fn test_slice_2() {\n-    let ss = \"\u4e2d\u534eVi\u1ec7t Nam\";\n+    #[test]\n+    fn test_slice_2() {\n+        let ss = \"\u4e2d\u534eVi\u1ec7t Nam\";\n+\n+        assert_eq!(\"\u534e\", &ss[3..6]);\n+        assert_eq!(\"Vi\u1ec7t Nam\", &ss[6..16]);\n+\n+        assert_eq!(\"ab\", &\"abc\"[0..2]);\n+        assert_eq!(\"bc\", &\"abc\"[1..3]);\n+        assert_eq!(\"\", &\"abc\"[1..1]);\n+\n+        assert_eq!(\"\u4e2d\", &ss[0..3]);\n+        assert_eq!(\"\u534eV\", &ss[3..7]);\n+        assert_eq!(\"\", &ss[3..3]);\n+        /*0: \u4e2d\n+          3: \u534e\n+          6: V\n+          7: i\n+          8: \u1ec7\n+         11: t\n+         12:\n+         13: N\n+         14: a\n+         15: m */\n+    }\n \n-    assert_eq!(\"\u534e\", &ss[3..6]);\n-    assert_eq!(\"Vi\u1ec7t Nam\", &ss[6..16]);\n+    #[test]\n+    #[should_panic]\n+    fn test_slice_fail() {\n+        &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n+    }\n \n-    assert_eq!(\"ab\", &\"abc\"[0..2]);\n-    assert_eq!(\"bc\", &\"abc\"[1..3]);\n-    assert_eq!(\"\", &\"abc\"[1..1]);\n+    #[test]\n+    #[should_panic]\n+    fn test_str_slice_rangetoinclusive_max_panics() {\n+        &\"hello\"[..=usize::max_value()];\n+    }\n \n-    assert_eq!(\"\u4e2d\", &ss[0..3]);\n-    assert_eq!(\"\u534eV\", &ss[3..7]);\n-    assert_eq!(\"\", &ss[3..3]);\n-    /*0: \u4e2d\n-      3: \u534e\n-      6: V\n-      7: i\n-      8: \u1ec7\n-     11: t\n-     12:\n-     13: N\n-     14: a\n-     15: m */\n-}\n+    #[test]\n+    #[should_panic]\n+    fn test_str_slice_rangeinclusive_max_panics() {\n+        &\"hello\"[1..=usize::max_value()];\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_slice_fail() {\n-    &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n-}\n+    #[test]\n+    #[should_panic]\n+    fn test_str_slicemut_rangetoinclusive_max_panics() {\n+        let mut s = \"hello\".to_owned();\n+        let s: &mut str = &mut s;\n+        &mut s[..=usize::max_value()];\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_str_slice_rangetoinclusive_max_panics() {\n-    &\"hello\"[..=usize::max_value()];\n-}\n+    #[test]\n+    #[should_panic]\n+    fn test_str_slicemut_rangeinclusive_max_panics() {\n+        let mut s = \"hello\".to_owned();\n+        let s: &mut str = &mut s;\n+        &mut s[1..=usize::max_value()];\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_str_slice_rangeinclusive_max_panics() {\n-    &\"hello\"[1..=usize::max_value()];\n-}\n+    #[test]\n+    fn test_str_get_maxinclusive() {\n+        let mut s = \"hello\".to_owned();\n+        {\n+            let s: &str = &s;\n+            assert_eq!(s.get(..=usize::max_value()), None);\n+            assert_eq!(s.get(1..=usize::max_value()), None);\n+        }\n+        {\n+            let s: &mut str = &mut s;\n+            assert_eq!(s.get(..=usize::max_value()), None);\n+            assert_eq!(s.get(1..=usize::max_value()), None);\n+        }\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_str_slicemut_rangetoinclusive_max_panics() {\n-    let mut s = \"hello\".to_owned();\n-    let s: &mut str = &mut s;\n-    &mut s[..=usize::max_value()];\n-}\n+    const LOREM_PARAGRAPH: &'static str = \"\\\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n+    ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n+    eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n+    sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n+    tempus vel, gravida nec quam.\";\n+\n+    // check the panic includes the prefix of the sliced string\n+    #[test]\n+    #[should_panic(expected=\"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n+    fn test_slice_fail_truncated_1() {\n+        &LOREM_PARAGRAPH[..1024];\n+    }\n+    // check the truncation in the panic message\n+    #[test]\n+    #[should_panic(expected=\"luctus, im`[...]\")]\n+    fn test_slice_fail_truncated_2() {\n+        &LOREM_PARAGRAPH[..1024];\n+    }\n \n-#[test]\n-#[should_panic]\n-fn test_str_slicemut_rangeinclusive_max_panics() {\n-    let mut s = \"hello\".to_owned();\n-    let s: &mut str = &mut s;\n-    &mut s[1..=usize::max_value()];\n-}\n+    #[test]\n+    #[should_panic(expected=\"byte index 4 is not a char boundary; it is inside '\u03b1' (bytes 3..5) of\")]\n+    fn test_slice_fail_boundary_1() {\n+        &\"abc\u03b1\u03b2\u03b3\"[4..];\n+    }\n \n-#[test]\n-fn test_str_get_maxinclusive() {\n-    let mut s = \"hello\".to_owned();\n-    {\n-        let s: &str = &s;\n-        assert_eq!(s.get(..=usize::max_value()), None);\n-        assert_eq!(s.get(1..=usize::max_value()), None);\n+    #[test]\n+    #[should_panic(expected=\"byte index 6 is not a char boundary; it is inside '\u03b2' (bytes 5..7) of\")]\n+    fn test_slice_fail_boundary_2() {\n+        &\"abc\u03b1\u03b2\u03b3\"[2..6];\n     }\n-    {\n-        let s: &mut str = &mut s;\n-        assert_eq!(s.get(..=usize::max_value()), None);\n-        assert_eq!(s.get(1..=usize::max_value()), None);\n+\n+    #[test]\n+    fn test_slice_from() {\n+        assert_eq!(&\"abcd\"[0..], \"abcd\");\n+        assert_eq!(&\"abcd\"[2..], \"cd\");\n+        assert_eq!(&\"abcd\"[4..], \"\");\n+    }\n+    #[test]\n+    fn test_slice_to() {\n+        assert_eq!(&\"abcd\"[..0], \"\");\n+        assert_eq!(&\"abcd\"[..2], \"ab\");\n+        assert_eq!(&\"abcd\"[..4], \"abcd\");\n     }\n }\n \n@@ -446,50 +493,6 @@ fn test_is_char_boundary() {\n         }\n     }\n }\n-const LOREM_PARAGRAPH: &'static str = \"\\\n-Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n-ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n-eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n-sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n-tempus vel, gravida nec quam.\";\n-\n-// check the panic includes the prefix of the sliced string\n-#[test]\n-#[should_panic(expected=\"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n-fn test_slice_fail_truncated_1() {\n-    &LOREM_PARAGRAPH[..1024];\n-}\n-// check the truncation in the panic message\n-#[test]\n-#[should_panic(expected=\"luctus, im`[...]\")]\n-fn test_slice_fail_truncated_2() {\n-    &LOREM_PARAGRAPH[..1024];\n-}\n-\n-#[test]\n-#[should_panic(expected=\"byte index 4 is not a char boundary; it is inside '\u03b1' (bytes 3..5) of\")]\n-fn test_slice_fail_boundary_1() {\n-    &\"abc\u03b1\u03b2\u03b3\"[4..];\n-}\n-\n-#[test]\n-#[should_panic(expected=\"byte index 6 is not a char boundary; it is inside '\u03b2' (bytes 5..7) of\")]\n-fn test_slice_fail_boundary_2() {\n-    &\"abc\u03b1\u03b2\u03b3\"[2..6];\n-}\n-\n-#[test]\n-fn test_slice_from() {\n-    assert_eq!(&\"abcd\"[0..], \"abcd\");\n-    assert_eq!(&\"abcd\"[2..], \"cd\");\n-    assert_eq!(&\"abcd\"[4..], \"\");\n-}\n-#[test]\n-fn test_slice_to() {\n-    assert_eq!(&\"abcd\"[..0], \"\");\n-    assert_eq!(&\"abcd\"[..2], \"ab\");\n-    assert_eq!(&\"abcd\"[..4], \"abcd\");\n-}\n \n #[test]\n fn test_trim_left_matches() {"}]}