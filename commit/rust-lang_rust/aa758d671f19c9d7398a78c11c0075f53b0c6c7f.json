{"sha": "aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzU4ZDY3MWYxOWM5ZDczOThhNzhjMTFjMDA3NWY1M2IwYzZjN2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-01-03T07:36:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-01-03T07:36:52Z"}, "message": "Better handling of comments in macro defs", "tree": {"sha": "e3a6895b351b58b1cac618e302530ca64cccc8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a6895b351b58b1cac618e302530ca64cccc8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "html_url": "https://github.com/rust-lang/rust/commit/aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f86f6dcd9c33fa7b2b1bcda29edbed4d4fd9cba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f86f6dcd9c33fa7b2b1bcda29edbed4d4fd9cba2", "html_url": "https://github.com/rust-lang/rust/commit/f86f6dcd9c33fa7b2b1bcda29edbed4d4fd9cba2"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "f09e884c6700a744a469eb5ad0cd6f0034fe884d", "filename": "src/macros.rs", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "patch": "@@ -316,19 +316,7 @@ pub fn rewrite_macro_def(\n     // `$$`). We'll try and format like an AST node, but we'll substitute\n     // variables for new names with the same length first.\n \n-    let body_sp = match branch.body {\n-        Some(sp) => sp,\n-        None => {\n-            // FIXME: should check the single-line empty function option\n-            return Some(format!(\n-                \"{}macro {}({}) {{}}\\n\",\n-                format_visibility(vis),\n-                ident,\n-                args_str,\n-            ));\n-        }\n-    };\n-    let old_body = context.snippet(body_sp);\n+    let old_body = context.snippet(branch.body).trim();\n     let (body_str, substs) = replace_names(old_body);\n \n     // We'll hack the indent below, take this into account when formatting,\n@@ -350,7 +338,13 @@ pub fn rewrite_macro_def(\n     let indent_str = indent.block_indent(&config).to_string(&config);\n     let mut new_body = new_body\n         .lines()\n-        .map(|l| format!(\"{}{}\", indent_str, l))\n+        .map(|l| {\n+            if l.is_empty() {\n+                l.to_owned()\n+            } else {\n+                format!(\"{}{}\", indent_str, l)\n+            }\n+        })\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n@@ -726,7 +720,10 @@ impl MacroParser {\n         }\n         let body = match self.toks.next()? {\n             TokenTree::Token(..) => return None,\n-            TokenTree::Delimited(_, ref d) => inner_span(d.tts.clone().into()),\n+            TokenTree::Delimited(sp, _) => {\n+                let data = sp.data();\n+                Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt)\n+            }\n         };\n         Some(MacroBranch {\n             args,\n@@ -736,21 +733,6 @@ impl MacroParser {\n     }\n }\n \n-fn inner_span(ts: TokenStream) -> Option<Span> {\n-    let mut cursor = ts.trees();\n-    let first = match cursor.next() {\n-        Some(t) => t.span(),\n-        None => return None,\n-    };\n-\n-    let last = match cursor.last() {\n-        Some(t) => t.span(),\n-        None => return Some(first),\n-    };\n-\n-    Some(first.to(last))\n-}\n-\n // A parsed macros 2.0 macro definition.\n struct Macro {\n     branches: Vec<MacroBranch>,\n@@ -761,7 +743,7 @@ struct Macro {\n struct MacroBranch {\n     args: ThinTokenStream,\n     args_paren_kind: DelimToken,\n-    body: Option<Span>,\n+    body: Span,\n }\n \n #[cfg(test)]"}, {"sha": "f5421b9fd097cbcdd626a029590a9225b965617b", "filename": "tests/source/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "patch": "@@ -312,3 +312,11 @@ pub macro bar($x:ident+$y:expr; ) {\n                   $x.bar($y));\n     }\n }\n+\n+macro foo() {\n+  // a comment\n+  fn foo() {\n+  // another comment\n+  bar();\n+  }\n+}"}, {"sha": "4fe81c800e40e2195bf3faa912227ca8297da7b2", "filename": "tests/target/macros.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa758d671f19c9d7398a78c11c0075f53b0c6c7f/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=aa758d671f19c9d7398a78c11c0075f53b0c6c7f", "patch": "@@ -823,7 +823,9 @@ fn macro_in_pattern_position() {\n     };\n }\n \n-macro foo() {}\n+macro foo() {\n+\n+}\n \n pub macro bar($x: ident + $y: expr;) {\n     fn foo($x: Foo) {\n@@ -833,3 +835,11 @@ pub macro bar($x: ident + $y: expr;) {\n         );\n     }\n }\n+\n+macro foo() {\n+    // a comment\n+    fn foo() {\n+        // another comment\n+        bar();\n+    }\n+}"}]}