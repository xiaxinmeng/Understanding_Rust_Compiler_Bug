{"sha": "b806070a88cd0d6aaf99d3d31103c296473ca4a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MDYwNzBhODhjZDBkNmFhZjk5ZDNkMzExMDNjMjk2NDczY2E0YTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-31T07:45:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-31T07:46:05Z"}, "message": "Fix simd_cast", "tree": {"sha": "141263268d10e86d703b1d24387618b93f326271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141263268d10e86d703b1d24387618b93f326271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b806070a88cd0d6aaf99d3d31103c296473ca4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b806070a88cd0d6aaf99d3d31103c296473ca4a4", "html_url": "https://github.com/rust-lang/rust/commit/b806070a88cd0d6aaf99d3d31103c296473ca4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b806070a88cd0d6aaf99d3d31103c296473ca4a4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa803f4fa664fe5e5fb91bd1e8679b37c9dde3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa803f4fa664fe5e5fb91bd1e8679b37c9dde3f8", "html_url": "https://github.com/rust-lang/rust/commit/aa803f4fa664fe5e5fb91bd1e8679b37c9dde3f8"}], "stats": {"total": 216, "additions": 130, "deletions": 86}, "files": [{"sha": "e28da13e4c8516793fce186f2e26acaa9c45c49b", "filename": "example/std_example.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -68,6 +68,7 @@ unsafe fn test_simd() {\n     test_mm256_movemask_epi8();\n     test_mm_add_epi8();\n     test_mm_add_pd();\n+    test_mm_cvtepi8_epi16();\n \n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n     assert_eq!(mask1, 1);\n@@ -170,6 +171,18 @@ pub unsafe fn assert_eq_m128d(a: __m128d, b: __m128d) {\n     }\n }\n \n+#[target_feature(enable = \"sse4.1\")]\n+unsafe fn test_mm_cvtepi8_epi16() {\n+    let a = _mm_set1_epi8(10);\n+    let r = _mm_cvtepi8_epi16(a);\n+    let e = _mm_set1_epi16(10);\n+    assert_eq_m128i(r, e);\n+    let a = _mm_set1_epi8(-10);\n+    let r = _mm_cvtepi8_epi16(a);\n+    let e = _mm_set1_epi16(-10);\n+    assert_eq_m128i(r, e);\n+}\n+\n #[derive(PartialEq)]\n enum LoopState {\n     Continue(()),"}, {"sha": "8612177166e5e34ab3d631eda87892226d8e27e4", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -436,7 +436,6 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n                         lval.write_cvalue(fx, discr);\n                     } else {\n-                        let from_clif_ty = fx.clif_type(from_ty).unwrap();\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n                         let from = operand.load_scalar(fx);\n \n@@ -447,43 +446,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             _ => panic!(\"{}\", from_ty),\n                         };\n \n-                        let res = if from_clif_ty.is_int() && to_clif_ty.is_int() {\n-                            // int-like -> int-like\n-                            crate::common::clif_intcast(\n-                                fx,\n-                                from,\n-                                to_clif_ty,\n-                                signed,\n-                            )\n-                        } else if from_clif_ty.is_int() && to_clif_ty.is_float() {\n-                            // int-like -> float\n-                            if signed {\n-                                fx.bcx.ins().fcvt_from_sint(to_clif_ty, from)\n-                            } else {\n-                                fx.bcx.ins().fcvt_from_uint(to_clif_ty, from)\n-                            }\n-                        } else if from_clif_ty.is_float() && to_clif_ty.is_int() {\n-                            // float -> int-like\n-                            let from = operand.load_scalar(fx);\n-                            if signed {\n-                                fx.bcx.ins().fcvt_to_sint_sat(to_clif_ty, from)\n-                            } else {\n-                                fx.bcx.ins().fcvt_to_uint_sat(to_clif_ty, from)\n-                            }\n-                        } else if from_clif_ty.is_float() && to_clif_ty.is_float() {\n-                            // float -> float\n-                            match (from_clif_ty, to_clif_ty) {\n-                                (types::F32, types::F64) => {\n-                                    fx.bcx.ins().fpromote(types::F64, from)\n-                                }\n-                                (types::F64, types::F32) => {\n-                                    fx.bcx.ins().fdemote(types::F32, from)\n-                                }\n-                                _ => from,\n-                            }\n-                        } else {\n-                            unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty)\n-                        };\n+                        let res = clif_int_or_float_cast(fx, from, to_clif_ty, signed);\n                         lval.write_cvalue(fx, CValue::by_val(res, dest_layout));\n                     }\n                 }"}, {"sha": "d14faf4bc330646e8f3be4f5f60ca4d0e8453536", "filename": "src/cast.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -0,0 +1,93 @@\n+use crate::prelude::*;\n+\n+pub fn clif_intcast<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    val: Value,\n+    to: Type,\n+    signed: bool,\n+) -> Value {\n+    let from = fx.bcx.func.dfg.value_type(val);\n+    match (from, to) {\n+        // equal\n+        (_, _) if from == to => val,\n+\n+        // extend\n+        (_, types::I128) => {\n+            let wider = if from == types::I64 {\n+                val\n+            } else if signed {\n+                fx.bcx.ins().sextend(types::I64, val)\n+            } else {\n+                fx.bcx.ins().uextend(types::I64, val)\n+            };\n+            let zero = fx.bcx.ins().iconst(types::I64, 0);\n+            fx.bcx.ins().iconcat(wider, zero)\n+        }\n+        (_, _) if to.wider_or_equal(from) => {\n+            if signed {\n+                fx.bcx.ins().sextend(to, val)\n+            } else {\n+                fx.bcx.ins().uextend(to, val)\n+            }\n+        }\n+\n+        // reduce\n+        (types::I128, _) => {\n+            let (lsb, _msb) = fx.bcx.ins().isplit(val);\n+            if to == types::I64 {\n+                lsb\n+            } else {\n+                fx.bcx.ins().ireduce(to, lsb)\n+            }\n+        }\n+        (_, _) => {\n+            fx.bcx.ins().ireduce(to, val)\n+        }\n+    }\n+}\n+\n+pub fn clif_int_or_float_cast(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n+    from: Value,\n+    to_ty: Type,\n+    signed: bool,\n+) -> Value {\n+    let from_ty = fx.bcx.func.dfg.value_type(from);\n+\n+    if from_ty.is_int() && to_ty.is_int() {\n+        // int-like -> int-like\n+        clif_intcast(\n+            fx,\n+            from,\n+            to_ty,\n+            signed,\n+        )\n+    } else if from_ty.is_int() && to_ty.is_float() {\n+        // int-like -> float\n+        if signed {\n+            fx.bcx.ins().fcvt_from_sint(to_ty, from)\n+        } else {\n+            fx.bcx.ins().fcvt_from_uint(to_ty, from)\n+        }\n+    } else if from_ty.is_float() && to_ty.is_int() {\n+        // float -> int-like\n+        if signed {\n+            fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n+        } else {\n+            fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n+        }\n+    } else if from_ty.is_float() && to_ty.is_float() {\n+        // float -> float\n+        match (from_ty, to_ty) {\n+            (types::F32, types::F64) => {\n+                fx.bcx.ins().fpromote(types::F64, from)\n+            }\n+            (types::F64, types::F32) => {\n+                fx.bcx.ins().fdemote(types::F32, from)\n+            }\n+            _ => from,\n+        }\n+    } else {\n+        unreachable!(\"cast value from {:?} to {:?}\", from_ty, to_ty);\n+    }\n+}"}, {"sha": "28287390c610b4aecaca56974db3d3aa4db3fe18", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -73,52 +73,6 @@ pub fn codegen_select(bcx: &mut FunctionBuilder, cond: Value, lhs: Value, rhs: V\n     }\n }\n \n-pub fn clif_intcast<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    val: Value,\n-    to: Type,\n-    signed: bool,\n-) -> Value {\n-    let from = fx.bcx.func.dfg.value_type(val);\n-    match (from, to) {\n-        // equal\n-        (_, _) if from == to => val,\n-\n-        // extend\n-        (_, types::I128) => {\n-            let wider = if from == types::I64 {\n-                val\n-            } else if signed {\n-                fx.bcx.ins().sextend(types::I64, val)\n-            } else {\n-                fx.bcx.ins().uextend(types::I64, val)\n-            };\n-            let zero = fx.bcx.ins().iconst(types::I64, 0);\n-            fx.bcx.ins().iconcat(wider, zero)\n-        }\n-        (_, _) if to.wider_or_equal(from) => {\n-            if signed {\n-                fx.bcx.ins().sextend(to, val)\n-            } else {\n-                fx.bcx.ins().uextend(to, val)\n-            }\n-        }\n-\n-        // reduce\n-        (types::I128, _) => {\n-            let (lsb, _msb) = fx.bcx.ins().isplit(val);\n-            if to == types::I64 {\n-                lsb\n-            } else {\n-                fx.bcx.ins().ireduce(to, lsb)\n-            }\n-        }\n-        (_, _) => {\n-            fx.bcx.ins().ireduce(to, val)\n-        }\n-    }\n-}\n-\n fn resolve_normal_value_imm(func: &Function, val: Value) -> Option<i64> {\n     if let ValueDef::Result(inst, 0 /*param*/) = func.dfg.value_def(val) {\n         if let InstructionData::UnaryImm {"}, {"sha": "7da7e738f522fc189070024a533ef5236bda6a7e", "filename": "src/intrinsics.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -853,8 +853,27 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, val);\n         };\n \n-        simd_cast, (c x) {\n-            ret.write_cvalue(fx, x.unchecked_cast_to(ret.layout()));\n+        simd_cast, (c a) {\n+            let (lane_layout, lane_count) = lane_type_and_count(fx, a.layout(), intrinsic);\n+            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx, ret.layout(), intrinsic);\n+            assert_eq!(lane_count, ret_lane_count);\n+\n+            let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n+\n+            let signed = match lane_layout.ty.sty {\n+                ty::Uint(..) => false,\n+                ty::Int(..) => true,\n+                ty::Float(..) => false, // `signed` is unused for floats\n+                _ => panic!(\"{}\", lane_layout.ty),\n+            };\n+\n+            for lane in 0..lane_count {\n+                let lane = mir::Field::new(lane.try_into().unwrap());\n+\n+                let a_lane = a.value_field(fx, lane).load_scalar(fx);\n+                let res = clif_int_or_float_cast(fx, a_lane, ret_lane_ty, signed);\n+                ret.place_field(fx, lane).write_cvalue(fx, CValue::by_val(res, ret_lane_layout));\n+            }\n         };\n \n         simd_eq, (c x, c y) {"}, {"sha": "eab10e5ca5e5ace41d0131206add8b2efb202d44", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b806070a88cd0d6aaf99d3d31103c296473ca4a4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b806070a88cd0d6aaf99d3d31103c296473ca4a4", "patch": "@@ -33,6 +33,7 @@ mod allocator;\n mod analyze;\n mod archive;\n mod base;\n+mod cast;\n mod codegen_i128;\n mod common;\n mod constant;\n@@ -94,6 +95,7 @@ mod prelude {\n \n     pub use crate::abi::*;\n     pub use crate::base::{trans_operand, trans_place};\n+    pub use crate::cast::*;\n     pub use crate::common::*;\n     pub use crate::debuginfo::{DebugContext, FunctionDebugContext};\n     pub use crate::trap::*;"}]}