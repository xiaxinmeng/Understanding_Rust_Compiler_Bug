{"sha": "8d46f9cb5784b9eaea0c27fce151aeb341952c79", "node_id": "C_kwDOAAsO6NoAKDhkNDZmOWNiNTc4NGI5ZWFlYTBjMjdmY2UxNTFhZWIzNDE5NTJjNzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-12T06:47:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T06:47:00Z"}, "message": "Rollup merge of #95920 - compiler-errors:cast-suggestion-span, r=oli-obk\n\nuse `Span::find_ancestor_inside` to get right span in CastCheck\n\nThis is a quick fix. This bad suggestion likely lives in other places... but thought it would be useful to fix all of the CastCheck ones first.\n\nLet me know if reviewer would prefer I add more tests for each of the diagnostics in CastCheck, or would like to do a more thorough review of other suggestions that use spans in typeck. I would also be open to further suggestions on how to better expose an API that gives us the \"best\" span for a diagnostic suggestion.\n\nFixed #95919", "tree": {"sha": "fdf55226541bbddb5bf7ba89e60b70a243ed551b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf55226541bbddb5bf7ba89e60b70a243ed551b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d46f9cb5784b9eaea0c27fce151aeb341952c79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVSBkCRBK7hj4Ov3rIwAA0BQIAKZ0awnhS9WgxRKKS/L7UnMJ\nXAEfPcoCLM3OIGUqvPL3AWBDbXTA/WAh5QY6Lri4zhpN6w2HI/pl5M8MarYwmc2M\nNR305Rli7cfHjENDPlD04mAMCFz3X/qcPEhjWSLbmuk9soxM9zsyNRXDPIEnJo/d\nScV6Jztd22Y2rRNsnH361oIl2Y4lmoCb7prq0bRecoQlJo9tz5ZG2G6aYT7jPelk\nm8c3nQEGH/QAjj/5cOuQv81nqlnJb2AcAEtSyw+j5WN5JtE/Y9onrh1x2PNAFTxp\nAfJ2N5nff2sm8i+ilAnNOflEX/vU06+nEw64NCD8HF+pBaSrQyL+FK50xrl0zqw=\n=Qd/M\n-----END PGP SIGNATURE-----\n", "payload": "tree fdf55226541bbddb5bf7ba89e60b70a243ed551b\nparent 1b364ae5d6e09dde5e0cc6b2087d7e8fd64730e1\nparent d2b1bb8a9b7a0a73b8da36d12798f4e848ed7171\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1649746020 +0200\ncommitter GitHub <noreply@github.com> 1649746020 +0200\n\nRollup merge of #95920 - compiler-errors:cast-suggestion-span, r=oli-obk\n\nuse `Span::find_ancestor_inside` to get right span in CastCheck\n\nThis is a quick fix. This bad suggestion likely lives in other places... but thought it would be useful to fix all of the CastCheck ones first.\n\nLet me know if reviewer would prefer I add more tests for each of the diagnostics in CastCheck, or would like to do a more thorough review of other suggestions that use spans in typeck. I would also be open to further suggestions on how to better expose an API that gives us the \"best\" span for a diagnostic suggestion.\n\nFixed #95919\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d46f9cb5784b9eaea0c27fce151aeb341952c79", "html_url": "https://github.com/rust-lang/rust/commit/8d46f9cb5784b9eaea0c27fce151aeb341952c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d46f9cb5784b9eaea0c27fce151aeb341952c79/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b364ae5d6e09dde5e0cc6b2087d7e8fd64730e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b364ae5d6e09dde5e0cc6b2087d7e8fd64730e1", "html_url": "https://github.com/rust-lang/rust/commit/1b364ae5d6e09dde5e0cc6b2087d7e8fd64730e1"}, {"sha": "d2b1bb8a9b7a0a73b8da36d12798f4e848ed7171", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b1bb8a9b7a0a73b8da36d12798f4e848ed7171", "html_url": "https://github.com/rust-lang/rust/commit/d2b1bb8a9b7a0a73b8da36d12798f4e848ed7171"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "47292b3e339e584d3ec596bbb17c8b85d34c9eb4", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d46f9cb5784b9eaea0c27fce151aeb341952c79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d46f9cb5784b9eaea0c27fce151aeb341952c79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=8d46f9cb5784b9eaea0c27fce151aeb341952c79", "patch": "@@ -55,6 +55,7 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n pub struct CastCheck<'tcx> {\n     expr: &'tcx hir::Expr<'tcx>,\n     expr_ty: Ty<'tcx>,\n+    expr_span: Span,\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -207,7 +208,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         cast_span: Span,\n         span: Span,\n     ) -> Result<CastCheck<'tcx>, ErrorGuaranteed> {\n-        let check = CastCheck { expr, expr_ty, cast_ty, cast_span, span };\n+        let expr_span = expr.span.find_ancestor_inside(span).unwrap_or(expr.span);\n+        let check = CastCheck { expr, expr_ty, expr_span, cast_ty, cast_span, span };\n \n         // For better error messages, check for some obviously unsized\n         // cases now. We do a more thorough check at the end, once\n@@ -240,15 +242,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     error_span,\n                     format!(\"cannot cast `{}` as `{}`\", fcx.ty_to_string(self.expr_ty), cast_ty),\n                 );\n-                if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr.span) {\n+                if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr_span) {\n                     err.span_suggestion(\n-                        self.expr.span,\n+                        self.expr_span,\n                         \"dereference the expression\",\n                         format!(\"*{}\", snippet),\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n-                    err.span_help(self.expr.span, \"dereference the expression with `*`\");\n+                    err.span_help(self.expr_span, \"dereference the expression with `*`\");\n                 }\n                 err.emit();\n             }\n@@ -315,7 +317,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     struct_span_err!(fcx.tcx.sess, self.span, E0054, \"cannot cast as `bool`\");\n \n                 if self.expr_ty.is_numeric() {\n-                    match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    match fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n                         Ok(snippet) => {\n                             err.span_suggestion(\n                                 self.span,\n@@ -440,7 +442,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 }\n                 if sugg_mutref {\n                     err.span_label(self.span, \"invalid cast\");\n-                    err.span_note(self.expr.span, \"this reference is immutable\");\n+                    err.span_note(self.expr_span, \"this reference is immutable\");\n                     err.span_note(self.cast_span, \"trying to cast to a mutable reference type\");\n                 } else if let Some((sugg, remove_cast)) = sugg {\n                     err.span_label(self.span, \"invalid cast\");\n@@ -449,7 +451,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         .tcx\n                         .sess\n                         .source_map()\n-                        .span_to_snippet(self.expr.span)\n+                        .span_to_snippet(self.expr_span)\n                         .map_or(false, |snip| snip.starts_with('('));\n \n                     // Very crude check to see whether the expression must be wrapped\n@@ -458,14 +460,14 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     let needs_parens =\n                         !has_parens && matches!(self.expr.kind, hir::ExprKind::Cast(..));\n \n-                    let mut suggestion = vec![(self.expr.span.shrink_to_lo(), sugg)];\n+                    let mut suggestion = vec![(self.expr_span.shrink_to_lo(), sugg)];\n                     if needs_parens {\n                         suggestion[0].1 += \"(\";\n-                        suggestion.push((self.expr.span.shrink_to_hi(), \")\".to_string()));\n+                        suggestion.push((self.expr_span.shrink_to_hi(), \")\".to_string()));\n                     }\n                     if remove_cast {\n                         suggestion.push((\n-                            self.expr.span.shrink_to_hi().to(self.cast_span),\n+                            self.expr_span.shrink_to_hi().to(self.cast_span),\n                             String::new(),\n                         ));\n                     }\n@@ -481,7 +483,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 ) {\n                     let mut label = true;\n                     // Check `impl From<self.expr_ty> for self.cast_ty {}` for accurate suggestion:\n-                    if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n                         if let Some(from_trait) = fcx.tcx.get_diagnostic_item(sym::From) {\n                             let ty = fcx.resolve_vars_if_possible(self.cast_ty);\n                             // Erase regions to avoid panic in `prove_value` when calling\n@@ -550,7 +552,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n                 if fcx.tcx.sess.is_nightly_build() {\n                     err.span_label(\n-                        self.expr.span,\n+                        self.expr_span,\n                         \"consider casting this expression to `*const ()`, \\\n                         then using `core::ptr::from_raw_parts`\",\n                     );\n@@ -651,7 +653,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 }\n             }\n             _ => {\n-                err.span_help(self.expr.span, \"consider using a box or reference as appropriate\");\n+                err.span_help(self.expr_span, \"consider using a box or reference as appropriate\");\n             }\n         }\n         err.emit()\n@@ -685,7 +687,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n     #[instrument(skip(fcx), level = \"debug\")]\n     pub fn check(mut self, fcx: &FnCtxt<'a, 'tcx>) {\n-        self.expr_ty = fcx.structurally_resolved_type(self.expr.span, self.expr_ty);\n+        self.expr_ty = fcx.structurally_resolved_type(self.expr_span, self.expr_ty);\n         self.cast_ty = fcx.structurally_resolved_type(self.cast_span, self.cast_ty);\n \n         debug!(\"check_cast({}, {:?} as {:?})\", self.expr.hir_id, self.expr_ty, self.cast_ty);\n@@ -741,7 +743,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n                         let f = fcx.normalize_associated_types_in(\n-                            self.expr.span,\n+                            self.expr_span,\n                             self.expr_ty.fn_sig(fcx.tcx),\n                         );\n                         let res = fcx.try_coerce(\n@@ -997,7 +999,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 ));\n \n                 let msg = \"use `.addr()` to obtain the address of a pointer\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n                     let scalar_cast = match t_c {\n                         ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n                         _ => format!(\" as {}\", self.cast_ty),\n@@ -1027,13 +1029,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             self.expr.hir_id,\n             self.span,\n             |err| {\n-\n                 let mut err = err.build(&format!(\n                     \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n                     self.expr_ty, self.cast_ty\n                 ));\n                 let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n                     err.span_suggestion(\n                         self.span,\n                         msg,"}, {"sha": "b509b3239bc58b133523f4c50735a68cd7c3483d", "filename": "src/test/ui/cast/cast-macro-lhs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d46f9cb5784b9eaea0c27fce151aeb341952c79/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d46f9cb5784b9eaea0c27fce151aeb341952c79/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.rs?ref=8d46f9cb5784b9eaea0c27fce151aeb341952c79", "patch": "@@ -0,0 +1,12 @@\n+// Test to make sure we suggest \"consider casting\" on the right span\n+\n+macro_rules! foo {\n+    () => { 0 }\n+}\n+\n+fn main() {\n+    let x = foo!() as *const [u8];\n+    //~^ ERROR cannot cast `usize` to a pointer that is wide\n+    //~| NOTE creating a `*const [u8]` requires both an address and a length\n+    //~| NOTE consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+}"}, {"sha": "db7ce57e15062e5086b0282ac6e02c4a19f4efad", "filename": "src/test/ui/cast/cast-macro-lhs.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d46f9cb5784b9eaea0c27fce151aeb341952c79/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d46f9cb5784b9eaea0c27fce151aeb341952c79/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-macro-lhs.stderr?ref=8d46f9cb5784b9eaea0c27fce151aeb341952c79", "patch": "@@ -0,0 +1,11 @@\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/cast-macro-lhs.rs:8:23\n+   |\n+LL |     let x = foo!() as *const [u8];\n+   |             ------    ^^^^^^^^^^^ creating a `*const [u8]` requires both an address and a length\n+   |             |\n+   |             consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0606`."}]}