{"sha": "5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNWEwYzIxZmMxNDE2ZTc3YWU4ZTRkYjc0YjkzZTM2MDEyNDFlMjI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T18:58:50Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:52:54Z"}, "message": "Separate alloc::heap::Alloc trait for stage0 #[global_allocator]", "tree": {"sha": "505783f515b56e9c23a35f2f6977cf5fe3b8210c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/505783f515b56e9c23a35f2f6977cf5fe3b8210c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "html_url": "https://github.com/rust-lang/rust/commit/5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e521b8b472dfe058f6d0f62f2e1ab5f291c220ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e521b8b472dfe058f6d0f62f2e1ab5f291c220ee", "html_url": "https://github.com/rust-lang/rust/commit/e521b8b472dfe058f6d0f62f2e1ab5f291c220ee"}], "stats": {"total": 123, "additions": 109, "deletions": 14}, "files": [{"sha": "f573abadc3192096e5d6b2669c32b7d2f04dec91", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -19,7 +19,6 @@ dependencies = [\n name = \"alloc_jemalloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -32,7 +31,6 @@ dependencies = [\n name = \"alloc_system\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.0.0\","}, {"sha": "00a8b2c0e259c4d285b75f1e865f083fd8754379", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -22,11 +22,6 @@ use core::usize;\n #[doc(inline)]\n pub use core::alloc::*;\n \n-#[doc(hidden)]\n-pub mod __core {\n-    pub use core::*;\n-}\n-\n extern \"Rust\" {\n     #[allocator]\n     #[rustc_allocator_nounwind]"}, {"sha": "a44ff04bd1b2fddc8424bcd3da312dacaaf47cac", "filename": "src/liballoc/heap.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -0,0 +1,98 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use alloc::{Excess, Layout, AllocErr, CannotReallocInPlace};\n+use core::alloc::Alloc as CoreAlloc;\n+\n+#[doc(hidden)]\n+pub mod __core {\n+    pub use core::*;\n+}\n+\n+/// Compatibility with older versions of #[global_allocator] during bootstrap\n+pub unsafe trait Alloc {\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout);\n+    fn oom(&mut self, err: AllocErr) -> !;\n+    fn usable_size(&self, layout: &Layout) -> (usize, usize);\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      layout: Layout,\n+                      new_layout: Layout) -> Result<*mut u8, AllocErr>;\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\n+    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr>;\n+    unsafe fn realloc_excess(&mut self,\n+                             ptr: *mut u8,\n+                             layout: Layout,\n+                             new_layout: Layout) -> Result<Excess, AllocErr>;\n+    unsafe fn grow_in_place(&mut self,\n+                            ptr: *mut u8,\n+                            layout: Layout,\n+                            new_layout: Layout) -> Result<(), CannotReallocInPlace>;\n+    unsafe fn shrink_in_place(&mut self,\n+                              ptr: *mut u8,\n+                              layout: Layout,\n+                              new_layout: Layout) -> Result<(), CannotReallocInPlace>;\n+}\n+\n+#[allow(deprecated)]\n+unsafe impl<T> Alloc for T where T: CoreAlloc {\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        CoreAlloc::alloc(self, layout)\n+    }\n+\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n+        CoreAlloc::dealloc(self, ptr, layout)\n+    }\n+\n+    fn oom(&mut self, err: AllocErr) -> ! {\n+        CoreAlloc::oom(self, err)\n+    }\n+\n+    fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n+        CoreAlloc::usable_size(self, layout)\n+    }\n+\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      layout: Layout,\n+                      new_layout: Layout) -> Result<*mut u8, AllocErr> {\n+        CoreAlloc::realloc(self, ptr, layout, new_layout)\n+    }\n+\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        CoreAlloc::alloc_zeroed(self, layout)\n+    }\n+\n+    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n+        CoreAlloc::alloc_excess(self, layout)\n+    }\n+\n+    unsafe fn realloc_excess(&mut self,\n+                             ptr: *mut u8,\n+                             layout: Layout,\n+                             new_layout: Layout) -> Result<Excess, AllocErr> {\n+        CoreAlloc::realloc_excess(self, ptr, layout, new_layout)\n+    }\n+\n+    unsafe fn grow_in_place(&mut self,\n+                            ptr: *mut u8,\n+                            layout: Layout,\n+                            new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n+        CoreAlloc::grow_in_place(self, ptr, layout, new_layout)\n+    }\n+\n+    unsafe fn shrink_in_place(&mut self,\n+                              ptr: *mut u8,\n+                              layout: Layout,\n+                              new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n+        CoreAlloc::shrink_in_place(self, ptr, layout, new_layout)\n+    }\n+}"}, {"sha": "f6598fe5e89695549a10dde933de4fc8a125e191", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -153,10 +153,16 @@ pub mod alloc;\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n /// Use the `alloc` module instead.\n+#[cfg(not(stage0))]\n pub mod heap {\n     pub use alloc::*;\n }\n \n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n+#[cfg(stage0)]\n+pub mod heap;\n+\n // Primitive types using the heaps above\n \n // Need to conditionally define the mod from `boxed.rs` to avoid"}, {"sha": "02435170374c503c81b7111974ebfc0266e2d3a1", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -12,7 +12,6 @@ test = false\n doc = false\n \n [dependencies]\n-alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }"}, {"sha": "616181d99bcdc8f2334457fde38e805c3cb15fac", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -32,7 +32,7 @@ pub use contents::*;\n mod contents {\n     use core::ptr;\n \n-    use core::heap::{Alloc, AllocErr, Layout};\n+    use core::alloc::{Alloc, AllocErr, Layout};\n     use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n "}, {"sha": "c34e2f203a8371267134c2cc1271fcb15e24f45f", "filename": "src/liballoc_system/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2FCargo.toml?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -10,7 +10,6 @@ test = false\n doc = false\n \n [dependencies]\n-alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "2d5adca7fcbd5e6bca1ebd30c76be18cf05414a5", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5a0c21fc1416e77ae8e4db74b93e3601241e22/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "patch": "@@ -41,7 +41,7 @@ const MIN_ALIGN: usize = 8;\n #[allow(dead_code)]\n const MIN_ALIGN: usize = 16;\n \n-use core::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+use core::alloc::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n pub struct System;\n@@ -121,7 +121,7 @@ mod platform {\n \n     use MIN_ALIGN;\n     use System;\n-    use core::heap::{Alloc, AllocErr, Layout};\n+    use core::alloc::{Alloc, AllocErr, Layout};\n \n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     unsafe impl<'a> Alloc for &'a System {\n@@ -283,7 +283,7 @@ mod platform {\n \n     use MIN_ALIGN;\n     use System;\n-    use core::heap::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n+    use core::alloc::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n \n     type LPVOID = *mut u8;\n     type HANDLE = LPVOID;\n@@ -495,7 +495,7 @@ mod platform {\n mod platform {\n     extern crate dlmalloc;\n \n-    use core::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+    use core::alloc::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n     use System;\n     use self::dlmalloc::GlobalDlmalloc;\n "}]}