{"sha": "2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZjY2NjNjZjA4NjRhMTZjNzViOTVmNjlhOWMyY2IzN2VhNDg1ZjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-16T19:26:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-16T19:26:26Z"}, "message": "librustc: Fastisel dislikes memmove, switch to memcpy. Perf win, r=catamorphism.\n\nFastisel actually has a special case for memcpy, the intrinsic, by name.\nIt has no such special case for memmove, so bails.\n\nClose #3987.", "tree": {"sha": "bde900a34dd3f66c37472564b20b6c363e986f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde900a34dd3f66c37472564b20b6c363e986f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "html_url": "https://github.com/rust-lang/rust/commit/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b309e54c738b020e08e2dc439245337f8503f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b309e54c738b020e08e2dc439245337f8503f84", "html_url": "https://github.com/rust-lang/rust/commit/8b309e54c738b020e08e2dc439245337f8503f84"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "21ad53371afd6a31310af0838a93d26486cae5bc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "patch": "@@ -1275,33 +1275,33 @@ fn with_cond(bcx: block, val: ValueRef, f: fn(block) -> block) -> block {\n     next_cx\n }\n \n-fn call_memmove(cx: block, dst: ValueRef, src: ValueRef,\n+fn call_memcpy(cx: block, dst: ValueRef, src: ValueRef,\n                 n_bytes: ValueRef) {\n     // FIXME (Related to #1645, I think?): Provide LLVM with better\n     // alignment information when the alignment is statically known (it must\n     // be nothing more than a constant int, or LLVM complains -- not even a\n     // constant element of a tydesc works).\n-    let _icx = cx.insn_ctxt(\"call_memmove\");\n+    let _icx = cx.insn_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n     let key = match ccx.sess.targ_cfg.arch {\n-      session::arch_x86 | session::arch_arm => ~\"llvm.memmove.p0i8.p0i8.i32\",\n-      session::arch_x86_64 => ~\"llvm.memmove.p0i8.p0i8.i64\"\n+      session::arch_x86 | session::arch_arm => ~\"llvm.memcpy.p0i8.p0i8.i32\",\n+      session::arch_x86_64 => ~\"llvm.memcpy.p0i8.p0i8.i64\"\n     };\n-    let memmove = ccx.intrinsics.get(key);\n+    let memcpy = ccx.intrinsics.get(key);\n     let src_ptr = PointerCast(cx, src, T_ptr(T_i8()));\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n     let size = IntCast(cx, n_bytes, ccx.int_type);\n     let align = C_i32(1i32);\n     let volatile = C_bool(false);\n-    Call(cx, memmove, ~[dst_ptr, src_ptr, size, align, volatile]);\n+    Call(cx, memcpy, ~[dst_ptr, src_ptr, size, align, volatile]);\n }\n \n-fn memmove_ty(bcx: block, dst: ValueRef, src: ValueRef, t: ty::t) {\n-    let _icx = bcx.insn_ctxt(\"memmove_ty\");\n+fn memcpy_ty(bcx: block, dst: ValueRef, src: ValueRef, t: ty::t) {\n+    let _icx = bcx.insn_ctxt(\"memcpy_ty\");\n     let ccx = bcx.ccx();\n     if ty::type_is_structural(t) {\n         let llsz = llsize_of(ccx, type_of::type_of(ccx, t));\n-        call_memmove(bcx, dst, src, llsz);\n+        call_memcpy(bcx, dst, src, llsz);\n     } else {\n         Store(bcx, Load(bcx, src), dst);\n     }\n@@ -1711,7 +1711,7 @@ fn trans_enum_variant(ccx: @crate_ctxt,\n             _ => fail ~\"trans_enum_variant: how do we know this works?\",\n         };\n         let arg_ty = arg_tys[i].ty;\n-        memmove_ty(bcx, lldestptr, llarg, arg_ty);\n+        memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }\n     build_return(bcx);\n     finish_fn(fcx, lltop);\n@@ -1757,7 +1757,7 @@ fn trans_tuple_struct(ccx: @crate_ctxt,\n             }\n         };\n         let arg_ty = arg_tys[i].ty;\n-        memmove_ty(bcx, lldestptr, llarg, arg_ty);\n+        memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }\n \n     build_return(bcx);\n@@ -2333,9 +2333,9 @@ fn p2i(ccx: @crate_ctxt, v: ValueRef) -> ValueRef {\n }\n \n fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n-    let T_memmove32_args: ~[TypeRef] =\n+    let T_memcpy32_args: ~[TypeRef] =\n         ~[T_ptr(T_i8()), T_ptr(T_i8()), T_i32(), T_i32(), T_i1()];\n-    let T_memmove64_args: ~[TypeRef] =\n+    let T_memcpy64_args: ~[TypeRef] =\n         ~[T_ptr(T_i8()), T_ptr(T_i8()), T_i64(), T_i32(), T_i1()];\n     let T_memset32_args: ~[TypeRef] =\n         ~[T_ptr(T_i8()), T_i8(), T_i32(), T_i32(), T_i1()];\n@@ -2351,12 +2351,12 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n         decl_cdecl_fn(llmod, ~\"llvm.gcread\",\n                       T_fn(~[T_ptr(T_i8()), T_ptr(T_ptr(T_i8()))],\n                            T_void()));\n-    let memmove32 =\n-        decl_cdecl_fn(llmod, ~\"llvm.memmove.p0i8.p0i8.i32\",\n-                      T_fn(T_memmove32_args, T_void()));\n-    let memmove64 =\n-        decl_cdecl_fn(llmod, ~\"llvm.memmove.p0i8.p0i8.i64\",\n-                      T_fn(T_memmove64_args, T_void()));\n+    let memcpy32 =\n+        decl_cdecl_fn(llmod, ~\"llvm.memcpy.p0i8.p0i8.i32\",\n+                      T_fn(T_memcpy32_args, T_void()));\n+    let memcpy64 =\n+        decl_cdecl_fn(llmod, ~\"llvm.memcpy.p0i8.p0i8.i64\",\n+                      T_fn(T_memcpy64_args, T_void()));\n     let memset32 =\n         decl_cdecl_fn(llmod, ~\"llvm.memset.p0i8.i32\",\n                       T_fn(T_memset32_args, T_void()));\n@@ -2371,8 +2371,8 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     let intrinsics = HashMap();\n     intrinsics.insert(~\"llvm.gcroot\", gcroot);\n     intrinsics.insert(~\"llvm.gcread\", gcread);\n-    intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n-    intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i64\", memmove64);\n+    intrinsics.insert(~\"llvm.memcpy.p0i8.p0i8.i32\", memcpy32);\n+    intrinsics.insert(~\"llvm.memcpy.p0i8.p0i8.i64\", memcpy64);\n     intrinsics.insert(~\"llvm.memset.p0i8.i32\", memset32);\n     intrinsics.insert(~\"llvm.memset.p0i8.i64\", memset64);\n     intrinsics.insert(~\"llvm.trap\", trap);"}, {"sha": "5c97739b1360bdd8ff027470733866801c4b4e9d", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "patch": "@@ -485,7 +485,7 @@ fn make_opaque_cbox_take_glue(\n         let bcx = callee::trans_rtcall(bcx, malloc, ~[opaque_tydesc, sz],\n                                        expr::SaveIn(rval));\n         let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);\n-        call_memmove(bcx, cbox_out, cbox_in, sz);\n+        call_memcpy(bcx, cbox_out, cbox_in, sz);\n         Store(bcx, cbox_out, cboxptr);\n \n         // Take the (deeply cloned) type descriptor"}, {"sha": "25fb64709c0cad931fa61da66c932166e3d5b154", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "patch": "@@ -326,7 +326,7 @@ impl Datum {\n                 Store(bcx, self.val, dst);\n             }\n             ByRef => {\n-                memmove_ty(bcx, dst, self.val, self.ty);\n+                memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n         }\n \n@@ -353,7 +353,7 @@ impl Datum {\n \n         match self.mode {\n             ByRef => {\n-                glue::memmove_ty(bcx, dst, self.val, self.ty);\n+                glue::memcpy_ty(bcx, dst, self.val, self.ty);\n             }\n             ByValue => {\n                 Store(bcx, self.val, dst);"}, {"sha": "8330841227352f66def09d47fa35a296d8892a69", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "patch": "@@ -971,7 +971,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n               let llretptr = PointerCast(bcx, fcx.llretptr, T_ptr(T_i8()));\n               let llcast = get_param(decl, first_real_arg);\n               let llcast = PointerCast(bcx, llcast, T_ptr(T_i8()));\n-              call_memmove(bcx, llretptr, llcast, llsize_of(ccx, lltp_ty));\n+              call_memcpy(bcx, llretptr, llcast, llsize_of(ccx, lltp_ty));\n           }\n       }\n         ~\"addr_of\" => {"}, {"sha": "76b9869be989c8d33af150e5222ae110b4f63df2", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6663cf0864a16c75b95f69a9c2cb37ea485f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=2bf6663cf0864a16c75b95f69a9c2cb37ea485f6", "patch": "@@ -99,7 +99,7 @@ fn duplicate_uniq(bcx: block, vptr: ValueRef, vec_ty: ty::t) -> Result {\n \n     let data_ptr = get_dataptr(bcx, get_bodyptr(bcx, vptr));\n     let new_data_ptr = get_dataptr(bcx, get_bodyptr(bcx, newptr));\n-    base::call_memmove(bcx, new_data_ptr, data_ptr, fill);\n+    base::call_memcpy(bcx, new_data_ptr, data_ptr, fill);\n \n     let bcx = if ty::type_needs_drop(bcx.tcx(), unit_ty) {\n         iter_vec_raw(bcx, new_data_ptr, vec_ty, fill, glue::take_ty)\n@@ -309,7 +309,7 @@ fn write_content(bcx: block,\n                     let bytes = s.len() + 1; // copy null-terminator too\n                     let llbytes = C_uint(bcx.ccx(), bytes);\n                     let llcstr = C_cstr(bcx.ccx(), *s);\n-                    base::call_memmove(bcx, lldest, llcstr, llbytes);\n+                    base::call_memcpy(bcx, lldest, llcstr, llbytes);\n                     return bcx;\n                 }\n             }"}]}