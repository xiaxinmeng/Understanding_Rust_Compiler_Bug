{"sha": "73d276779e1b27aca17eea109b9a204763713c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDI3Njc3OWUxYjI3YWNhMTdlZWExMDliOWEyMDQ3NjM3MTNjNjU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-10T06:24:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-10T06:24:02Z"}, "message": "Rollup merge of #48059 - alexcrichton:sccachebs, r=Mark-Simulacrum\n\nrustbuild: Pass `ccache` to build scripts\n\nRight now the ccache setting is only used for LLVM, but this tweaks it to also\nbe used for build scripts so C++ builds like `librustc_llvm` can be a bit\nspeedier.", "tree": {"sha": "a64a0dc460623222a0a85e474724b63e39cccc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a64a0dc460623222a0a85e474724b63e39cccc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d276779e1b27aca17eea109b9a204763713c65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJafpACCRBK7hj4Ov3rIwAAdHIIAAOJVmIttQEY6OabXK/Fh1/d\nng10ePMvH8Yr3l3JgZIg1Mu+qkYFI0XlAPOpsaf3TcZdWw4Ecg8Lm2JTT2kP+8iM\nsZfqfGyej1HHJk4qj6D14eM3u2/bIi9gR1lZpKkbHhFCqAuwJaL9KUDr5hrLY4Zd\nG2oHnuuphm+WEUYAuGx03/h+Tob1FJJbLgSadCkrdn3L/CggfLmHAUROefFVtJc0\nh042XaFdSQ87CJowweaQUts5v62iqRttwJSCElBEmhns6gx/L8MRsjF0lSGEmPDh\nc3r5AviNDWh45eqMch3xhtDERDsTKdPk7mkf0luj32g4fDoLn7Xc1SbgdBCv24I=\n=qNLY\n-----END PGP SIGNATURE-----\n", "payload": "tree a64a0dc460623222a0a85e474724b63e39cccc47\nparent 2259e0dd1ea69f39322592ba70cb73ad4113c377\nparent 64a8730e171367e4979cd9c25f0e0fdc2c157446\nauthor kennytm <kennytm@gmail.com> 1518243842 +0800\ncommitter GitHub <noreply@github.com> 1518243842 +0800\n\nRollup merge of #48059 - alexcrichton:sccachebs, r=Mark-Simulacrum\n\nrustbuild: Pass `ccache` to build scripts\n\nRight now the ccache setting is only used for LLVM, but this tweaks it to also\nbe used for build scripts so C++ builds like `librustc_llvm` can be a bit\nspeedier.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d276779e1b27aca17eea109b9a204763713c65", "html_url": "https://github.com/rust-lang/rust/commit/73d276779e1b27aca17eea109b9a204763713c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d276779e1b27aca17eea109b9a204763713c65/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2259e0dd1ea69f39322592ba70cb73ad4113c377", "url": "https://api.github.com/repos/rust-lang/rust/commits/2259e0dd1ea69f39322592ba70cb73ad4113c377", "html_url": "https://github.com/rust-lang/rust/commit/2259e0dd1ea69f39322592ba70cb73ad4113c377"}, {"sha": "64a8730e171367e4979cd9c25f0e0fdc2c157446", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a8730e171367e4979cd9c25f0e0fdc2c157446", "html_url": "https://github.com/rust-lang/rust/commit/64a8730e171367e4979cd9c25f0e0fdc2c157446"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "9403c343d1d9db8e935ead577eb84b55a19595a1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/73d276779e1b27aca17eea109b9a204763713c65/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d276779e1b27aca17eea109b9a204763713c65/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=73d276779e1b27aca17eea109b9a204763713c65", "patch": "@@ -600,9 +600,25 @@ impl<'a> Builder<'a> {\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n-            let cc = self.cc(target);\n-            cargo.env(format!(\"CC_{}\", target), cc)\n-                 .env(\"CC\", cc);\n+            let ccache = self.config.ccache.as_ref();\n+            let ccacheify = |s: &Path| {\n+                let ccache = match ccache {\n+                    Some(ref s) => s,\n+                    None => return s.display().to_string(),\n+                };\n+                // FIXME: the cc-rs crate only recognizes the literal strings\n+                // `ccache` and `sccache` when doing caching compilations, so we\n+                // mirror that here. It should probably be fixed upstream to\n+                // accept a new env var or otherwise work with custom ccache\n+                // vars.\n+                match &ccache[..] {\n+                    \"ccache\" | \"sccache\" => format!(\"{} {}\", ccache, s.display()),\n+                    _ => s.display().to_string(),\n+                }\n+            };\n+            let cc = ccacheify(&self.cc(target));\n+            cargo.env(format!(\"CC_{}\", target), &cc)\n+                 .env(\"CC\", &cc);\n \n             let cflags = self.cflags(target).join(\" \");\n             cargo.env(format!(\"CFLAGS_{}\", target), cflags.clone())\n@@ -617,8 +633,9 @@ impl<'a> Builder<'a> {\n             }\n \n             if let Ok(cxx) = self.cxx(target) {\n-                cargo.env(format!(\"CXX_{}\", target), cxx)\n-                     .env(\"CXX\", cxx)\n+                let cxx = ccacheify(&cxx);\n+                cargo.env(format!(\"CXX_{}\", target), &cxx)\n+                     .env(\"CXX\", &cxx)\n                      .env(format!(\"CXXFLAGS_{}\", target), cflags.clone())\n                      .env(\"CXXFLAGS\", cflags);\n             }"}]}