{"sha": "42963f4d50dcd077493c77d370cff07e2475a151", "node_id": "C_kwDOAAsO6NoAKDQyOTYzZjRkNTBkY2QwNzc0OTNjNzdkMzcwY2ZmMDdlMjQ3NWExNTE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-06T11:47:54Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-12T04:35:00Z"}, "message": "Query modifier", "tree": {"sha": "1fc1e15eb738d335b1185561928a2b7ce6b613fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc1e15eb738d335b1185561928a2b7ce6b613fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42963f4d50dcd077493c77d370cff07e2475a151", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmG1e/QACgkQbQF6ltjm\nwvmhwg/+P3s/LcchHiFd4/6Dh/cYR2gqefellk3bqZ6C7QH9unIM5/i6Xketd2AX\nZqSrEQ3UKiIAkluvuOm6bhGnQbAly5ZqeHIN1bRKskm/o/8Zb/DBbp6V1F92Hd7p\nvzPI1gYejBaXWUJWyvxvSS45Vfn5zcr4YSY12Fw9cqsSWv63bztq62qPGnbtJ7GQ\n0RRBi58SL3OAvcTmkYF+Uq0Y1pecZBIsXreqI5q4MyVQZ5XdgVf9Do6xIonoN3ii\nUgbC1b70ObM88/ZNosw6Z6nq4FTtOZIMdcteSekZ3aGKmxKiP8G96F98spOCuscy\n1ztng5PzRdBWGljCZHosPcHFtXaFNNOz8SuVzyhKZox8obJg+hIVhHPhFhVwDWto\nZ7c3t8PccKsPVVBtlX+1CJw8uYxqE2FSiRY6rIypCYHXSFN/N6ooVoqX3/+YyBm4\npwi9pZGRRDD8fJhhloaL64ul5dCU5xXQPAyHSAusDHysZEftGK37XfLlCrCPBD9E\nFttRypsnlNOIcSfZq3BaG5VDbf8LtPmD5dzC7eYfnIVHxPrswawKdZbRC5forBab\nwDAsN43SxKZQVrYIsieTa9FjO63OSnm8WuCzmy/pMuhuT3ECKXuRWEURE745+KiH\nfvpxZWGh685BKvvrlr4WVfQ4w3h4aXU9MeN53gs29VAH1IyXUMI=\n=sZVn\n-----END PGP SIGNATURE-----", "payload": "tree 1fc1e15eb738d335b1185561928a2b7ce6b613fb\nparent 8cd168f6a6aa1b848ebb54492db0eb57d72fed2f\nauthor Deadbeef <ent3rm4n@gmail.com> 1638791274 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1639283700 +0800\n\nQuery modifier\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42963f4d50dcd077493c77d370cff07e2475a151", "html_url": "https://github.com/rust-lang/rust/commit/42963f4d50dcd077493c77d370cff07e2475a151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42963f4d50dcd077493c77d370cff07e2475a151/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd168f6a6aa1b848ebb54492db0eb57d72fed2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd168f6a6aa1b848ebb54492db0eb57d72fed2f", "html_url": "https://github.com/rust-lang/rust/commit/8cd168f6a6aa1b848ebb54492db0eb57d72fed2f"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "478159147acbd31cd64ce6e5933723eb42aafa32", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=42963f4d50dcd077493c77d370cff07e2475a151", "patch": "@@ -58,6 +58,9 @@ enum QueryModifier {\n \n     /// Use a separate query provider for local and extern crates\n     SeparateProvideExtern(Ident),\n+\n+    /// Always remap the ParamEnv's constness before hashing and passing to the query provider\n+    RemapEnvConstness(Ident),\n }\n \n impl Parse for QueryModifier {\n@@ -123,6 +126,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::EvalAlways(modifier))\n         } else if modifier == \"separate_provide_extern\" {\n             Ok(QueryModifier::SeparateProvideExtern(modifier))\n+        } else if modifier == \"remap_env_constness\" {\n+            Ok(QueryModifier::RemapEnvConstness(modifier))\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -222,6 +227,9 @@ struct QueryModifiers {\n \n     /// Use a separate query provider for local and extern crates\n     separate_provide_extern: Option<Ident>,\n+\n+    /// Always remap the ParamEnv's constness before hashing.\n+    remap_env_constness: Option<Ident>,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -236,6 +244,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut anon = None;\n     let mut eval_always = None;\n     let mut separate_provide_extern = None;\n+    let mut remap_env_constness = None;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -335,6 +344,12 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 separate_provide_extern = Some(ident);\n             }\n+            QueryModifier::RemapEnvConstness(ident) => {\n+                if remap_env_constness.is_some() {\n+                    panic!(\"duplicate modifier `remap_env_constness` for query `{}`\", query.name);\n+                }\n+                remap_env_constness = Some(ident)\n+            }\n         }\n     }\n     let desc = desc.unwrap_or_else(|| {\n@@ -351,6 +366,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n         anon,\n         eval_always,\n         separate_provide_extern,\n+        remap_env_constness,\n     }\n }\n \n@@ -485,6 +501,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         if let Some(separate_provide_extern) = &modifiers.separate_provide_extern {\n             attributes.push(quote! { (#separate_provide_extern) });\n         }\n+        // Pass on the remap_env_constness modifier\n+        if let Some(remap_env_constness) = &modifiers.remap_env_constness {\n+            attributes.push(quote! { (#remap_env_constness) });\n+        }\n \n         // This uses the span of the query definition for the commas,\n         // which can be important if we later encounter any ambiguity"}, {"sha": "61cbb79602cd89aee71f959d20b64401b0810eb1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=42963f4d50dcd077493c77d370cff07e2475a151", "patch": "@@ -880,6 +880,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, ConstAlloc<'tcx>>\n     ) -> Option<ty::ValTree<'tcx>> {\n         desc { \"destructure constant\" }\n+        remap_env_constness\n     }\n \n     /// Destructure a constant ADT or array into its variant index and its\n@@ -888,6 +889,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>\n     ) -> mir::DestructuredConst<'tcx> {\n         desc { \"destructure constant\" }\n+        remap_env_constness\n     }\n \n     /// Dereference a constant reference or raw pointer and turn the result into a constant\n@@ -896,6 +898,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, &'tcx ty::Const<'tcx>>\n     ) -> &'tcx ty::Const<'tcx> {\n         desc { \"deref constant\" }\n+        remap_env_constness\n     }\n \n     query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n@@ -1100,26 +1103,32 @@ rustc_queries! {\n     /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n     query is_copy_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Copy`\", env.value }\n+        remap_env_constness\n     }\n     /// Query backing `TyS::is_sized`.\n     query is_sized_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Sized`\", env.value }\n+        remap_env_constness\n     }\n     /// Query backing `TyS::is_freeze`.\n     query is_freeze_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is freeze\", env.value }\n+        remap_env_constness\n     }\n     /// Query backing `TyS::is_unpin`.\n     query is_unpin_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Unpin`\", env.value }\n+        remap_env_constness\n     }\n     /// Query backing `TyS::needs_drop`.\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n+        remap_env_constness\n     }\n     /// Query backing `TyS::has_significant_drop_raw`.\n     query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` has a significant drop\", env.value }\n+        remap_env_constness\n     }\n \n     /// Query backing `TyS::is_structural_eq_shallow`.\n@@ -1158,6 +1167,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n     ) -> Result<ty::layout::TyAndLayout<'tcx>, ty::layout::LayoutError<'tcx>> {\n         desc { \"computing layout of `{}`\", key.value }\n+        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n@@ -1168,6 +1178,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}` function pointers\", key.value.0 }\n+        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n@@ -1179,6 +1190,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}`\", key.value.0 }\n+        remap_env_constness\n     }\n \n     query dylib_dependency_formats(_: CrateNum)\n@@ -1463,6 +1475,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n     ) -> ty::inhabitedness::DefIdForest {\n         desc { \"computing the inhabitedness of `{:?}`\", key }\n+        remap_env_constness\n     }\n \n     query dep_kind(_: CrateNum) -> CrateDepKind {\n@@ -1654,27 +1667,31 @@ rustc_queries! {\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n     ) -> GenericArg<'tcx> {\n         desc { \"normalizing `{}`\", goal.value }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n     query normalize_mir_const_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> mir::ConstantKind<'tcx> {\n         desc { \"normalizing `{}`\", goal.value }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n     ) -> Result<GenericArg<'tcx>, NoSolution> {\n         desc { \"normalizing `{}`\", goal.value }\n+        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_mir_const_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> Result<mir::ConstantKind<'tcx>, NoSolution> {\n         desc { \"normalizing `{}`\", goal.value }\n+        remap_env_constness\n     }\n \n     query implied_outlives_bounds(\n@@ -1836,6 +1853,7 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n     ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n         desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n+        remap_env_constness\n     }\n \n     query resolve_instance_of_const_arg(\n@@ -1845,6 +1863,7 @@ rustc_queries! {\n             \"resolving instance of the const argument `{}`\",\n             ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n         }\n+        remap_env_constness\n     }\n \n     query normalize_opaque_types(key: &'tcx ty::List<ty::Predicate<'tcx>>) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n@@ -1859,6 +1878,7 @@ rustc_queries! {\n     /// size, to account for partial initialisation. See #49298 for details.)\n     query conservative_is_privately_uninhabited(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"conservatively checking if {:?} is privately uninhabited\", key }\n+        remap_env_constness\n     }\n \n     query limits(key: ()) -> Limits {"}, {"sha": "a6d083101a0bb38c28282f7236f63709a7207a83", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=42963f4d50dcd077493c77d370cff07e2475a151", "patch": "@@ -1435,6 +1435,12 @@ impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n     pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {\n         (self.param_env, self.value)\n     }\n+\n+    #[inline]\n+    pub fn without_const(mut self) -> Self {\n+        self.param_env = self.param_env.without_const();\n+        self\n+    }\n }\n \n impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>"}, {"sha": "f18517eee04c0a59e1858c50d73985d30b0cd0f8", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=42963f4d50dcd077493c77d370cff07e2475a151", "patch": "@@ -156,6 +156,16 @@ macro_rules! separate_provide_extern_default {\n     };\n }\n \n+macro_rules! opt_remap_env_constness {\n+    ([][$name:ident]) => {};\n+    ([(remap_env_constness) $($rest:tt)*][$name:ident]) => {\n+        let $name = $name.without_const();\n+    };\n+    ([$other:tt $($modifiers:tt)*][$name:ident]) => {\n+        opt_remap_env_constness!([$($modifiers)*][$name])\n+    };\n+}\n+\n macro_rules! define_callbacks {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -202,6 +212,8 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n+                opt_remap_env_constness!([$($modifiers)*][key]);\n+\n                 let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, noop);\n \n                 let lookup = match cached {\n@@ -229,6 +241,8 @@ macro_rules! define_callbacks {\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n             {\n                 let key = key.into_query_param();\n+                opt_remap_env_constness!([$($modifiers)*][key]);\n+\n                 let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, Clone::clone);\n \n                 let lookup = match cached {"}, {"sha": "2854ba5158b4eb79b8d22f8cb6c3805f2c798051", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42963f4d50dcd077493c77d370cff07e2475a151/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=42963f4d50dcd077493c77d370cff07e2475a151", "patch": "@@ -231,6 +231,16 @@ macro_rules! get_provider {\n     };\n }\n \n+macro_rules! opt_remap_env_constness {\n+    ([][$name:ident]) => {};\n+    ([(remap_env_constness) $($rest:tt)*][$name:ident]) => {\n+        let $name = $name.without_const();\n+    };\n+    ([$other:tt $($modifiers:tt)*][$name:ident]) => {\n+        opt_remap_env_constness!([$($modifiers)*][$name])\n+    };\n+}\n+\n macro_rules! define_queries {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -247,6 +257,7 @@ macro_rules! define_queries {\n             // Create an eponymous constructor for each query.\n             $(#[allow(nonstandard_style)] $(#[$attr])*\n             pub fn $name<$tcx>(tcx: QueryCtxt<$tcx>, key: query_keys::$name<$tcx>) -> QueryStackFrame {\n+                opt_remap_env_constness!([$($modifiers)*][key]);\n                 let kind = dep_graph::DepKind::$name;\n                 let name = stringify!($name);\n                 // Disable visible paths printing for performance reasons.\n@@ -521,6 +532,7 @@ macro_rules! define_queries_struct {\n                 lookup: QueryLookup,\n                 mode: QueryMode,\n             ) -> Option<query_stored::$name<$tcx>> {\n+                opt_remap_env_constness!([$($modifiers)*][key]);\n                 let qcx = QueryCtxt { tcx, queries: self };\n                 get_query::<queries::$name<$tcx>, _>(qcx, span, key, lookup, mode)\n             })*"}]}