{"sha": "aa3b1261b164eeac3e68573bfc698d1ca943fb05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhM2IxMjYxYjE2NGVlYWMzZTY4NTczYmZjNjk4ZDFjYTk0M2ZiMDU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-10-12T01:05:54Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-10-12T18:40:19Z"}, "message": "Continue cfg syntax transition\n\nAll deprecation warnings have been converted to errors. This includes\nthe warning for multiple cfgs on one item. We'll leave that as an error\nfor some period of time to ensure that all uses are updated before the\nbehavior changes from \"or\" to \"and\".", "tree": {"sha": "782e225f5db942be43f37941fa0d1ce70fd63dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782e225f5db942be43f37941fa0d1ce70fd63dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3b1261b164eeac3e68573bfc698d1ca943fb05", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3b1261b164eeac3e68573bfc698d1ca943fb05", "html_url": "https://github.com/rust-lang/rust/commit/aa3b1261b164eeac3e68573bfc698d1ca943fb05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3b1261b164eeac3e68573bfc698d1ca943fb05/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1fa91d2bf97a6331e1d0265eec0f3324191f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1fa91d2bf97a6331e1d0265eec0f3324191f89", "html_url": "https://github.com/rust-lang/rust/commit/cd1fa91d2bf97a6331e1d0265eec0f3324191f89"}], "stats": {"total": 288, "additions": 98, "deletions": 190}, "files": [{"sha": "ab8d924a44260498cb8b6da677b8f8161c45da52", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -952,10 +952,10 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         to_lower(line).as_slice().starts_with(to_lower(prefix).as_slice())\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         line.starts_with( prefix )\n     }\n@@ -1356,10 +1356,10 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n }\n \n // Linux and mac don't require adjusting the library search path\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"macos\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {}\", prog, args.connect(\" \"))\n }"}, {"sha": "abd2cd7b33e4048338cb3cfef2b47fb9f16b9dfa", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -475,7 +475,7 @@ conventions. Rust provides a way to tell the compiler which convention to use:\n ~~~~\n extern crate libc;\n \n-#[cfg(target_os = \"win32\", target_arch = \"x86\")]\n+#[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]\n #[link(name = \"kernel32\")]\n #[allow(non_snake_case)]\n extern \"stdcall\" {"}, {"sha": "7756abc8020142b31f1fcd9e484b4e938de0a996", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -313,17 +313,15 @@ literal string (i.e `\"\"`)\n ```\n #![feature(asm)]\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn foo() {\n     unsafe {\n         asm!(\"NOP\");\n     }\n }\n \n // other platforms\n-#[cfg(not(target_arch = \"x86\"),\n-      not(target_arch = \"x86_64\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n fn foo() { /* ... */ }\n \n fn main() {\n@@ -340,7 +338,7 @@ but you must add the right number of `:` if you skip them:\n \n ```\n # #![feature(asm)]\n-# #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n asm!(\"xor %eax, %eax\"\n     :\n@@ -354,7 +352,7 @@ Whitespace also doesn't matter:\n \n ```\n # #![feature(asm)]\n-# #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n asm!(\"xor %eax, %eax\" ::: \"eax\");\n # } }\n@@ -368,7 +366,7 @@ expressions must be mutable lvalues:\n \n ```\n # #![feature(asm)]\n-# #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn add(a: int, b: int) -> int {\n     let mut c = 0;\n     unsafe {\n@@ -379,7 +377,7 @@ fn add(a: int, b: int) -> int {\n     }\n     c\n }\n-# #[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n # fn add(a: int, b: int) -> int { a + b }\n \n fn main() {\n@@ -396,7 +394,7 @@ stay valid.\n \n ```\n # #![feature(asm)]\n-# #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n // Put the value 0x200 in eax\n asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");"}, {"sha": "cf9504736eb23eb5bdd61516170495d0411ea5d8", "filename": "src/doc/reference.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -2066,26 +2066,28 @@ fn macos_only() {\n }\n \n // This function is only included when either foo or bar is defined\n-#[cfg(foo)]\n-#[cfg(bar)]\n+#[cfg(any(foo, bar))]\n fn needs_foo_or_bar() {\n   // ...\n }\n \n // This function is only included when compiling for a unixish OS with a 32-bit\n // architecture\n-#[cfg(unix, target_word_size = \"32\")]\n+#[cfg(all(unix, target_word_size = \"32\"))]\n fn on_32bit_unix() {\n   // ...\n }\n+\n+// This function is only included when foo is not defined\n+#[cfg(not(foo))]\n+fn needs_not_foo() {\n+  // ...\n+}\n ```\n \n This illustrates some conditional compilation can be achieved using the\n-`#[cfg(...)]` attribute. Note that `#[cfg(foo, bar)]` is a condition that needs\n-both `foo` and `bar` to be defined while `#[cfg(foo)] #[cfg(bar)]` only needs\n-one of `foo` and `bar` to be defined (this resembles in the disjunctive normal\n-form). Additionally, one can reverse a condition by enclosing it in a\n-`not(...)`, like e. g. `#[cfg(not(target_os = \"win32\"))]`.\n+`#[cfg(...)]` attribute. `any`, `all` and `not` can be used to assemble\n+arbitrarily complex configurations through nesting.\n \n The following configurations must be defined by the implementation:\n "}, {"sha": "76409c8612f3316e28725eaa9f90b6efb5a86860", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -19,10 +19,10 @@ fn size_of_basic() {\n }\n \n #[test]\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"arm\",\n+          target_arch = \"mips\",\n+          target_arch = \"mipsel\"))]\n fn size_of_32() {\n     assert_eq!(size_of::<uint>(), 4u);\n     assert_eq!(size_of::<*const uint>(), 4u);\n@@ -51,10 +51,10 @@ fn align_of_basic() {\n }\n \n #[test]\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"mips\")]\n-#[cfg(target_arch = \"mipsel\")]\n+#[cfg(any(target_arch = \"x86\",\n+          target_arch = \"arm\",\n+          target_arch = \"mips\",\n+          target_arch = \"mipsel\"))]\n fn align_of_32() {\n     assert_eq!(align_of::<uint>(), 4u);\n     assert_eq!(align_of::<*const uint>(), 4u);"}, {"sha": "a7a234dc18ac51f8739708612a872dce88371dbb", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -200,8 +200,7 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn test_rpath_relative() {\n         let config = &mut RPathConfig {\n             os: abi::OsLinux,"}, {"sha": "148d986399d3ed3958b3c161e1b05d736249b3ea", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -316,11 +316,10 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n             mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi)),\n         ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n             if mis.len() != 1 {\n-                diagnostic.span_warn(cfg.span, \"the use of multiple cfgs in the same `not` \\\n-                                                statement is deprecated. Change `not(a, b)` to \\\n-                                                `not(all(a, b))`.\");\n+                diagnostic.span_err(cfg.span, \"expected 1 cfg-pattern\");\n+                return false;\n             }\n-            !mis.iter().all(|mi| cfg_matches(diagnostic, cfgs, &**mi))\n+            !cfg_matches(diagnostic, cfgs, &*mis[0])\n         }\n         ast::MetaList(ref pred, _) => {\n             diagnostic.span_err(cfg.span, format!(\"invalid predicate `{}`\", pred).as_slice());\n@@ -330,56 +329,6 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n     }\n }\n \n-/// Tests if any `cfg(...)` meta items in `metas` match `cfg`. e.g.\n-///\n-/// test_cfg(`[foo=\"a\", bar]`, `[cfg(foo), cfg(bar)]`) == true\n-/// test_cfg(`[foo=\"a\", bar]`, `[cfg(not(bar))]`) == false\n-/// test_cfg(`[foo=\"a\", bar]`, `[cfg(bar, foo=\"a\")]`) == true\n-/// test_cfg(`[foo=\"a\", bar]`, `[cfg(bar, foo=\"b\")]`) == false\n-pub fn test_cfg<'a, AM: AttrMetaMethods, It: Iterator<&'a AM>>\n-    (cfg: &[P<MetaItem>], mut metas: It) -> bool {\n-    // having no #[cfg(...)] attributes counts as matching.\n-    let mut no_cfgs = true;\n-\n-    // this would be much nicer as a chain of iterator adaptors, but\n-    // this doesn't work.\n-    let some_cfg_matches = metas.fold(false, |matches, mi| {\n-        debug!(\"testing name: {}\", mi.name());\n-        let this_matches = if mi.check_name(\"cfg\") { // it is a #[cfg()] attribute\n-            debug!(\"is cfg\");\n-            no_cfgs = false;\n-             // only #[cfg(...)] ones are understood.\n-            match mi.meta_item_list() {\n-                Some(cfg_meta) => {\n-                    debug!(\"is cfg(...)\");\n-                    cfg_meta.iter().all(|cfg_mi| {\n-                        debug!(\"cfg({}[...])\", cfg_mi.name());\n-                        match cfg_mi.node {\n-                            ast::MetaList(ref s, ref not_cfgs)\n-                            if s.equiv(&(\"not\")) => {\n-                                debug!(\"not!\");\n-                                // inside #[cfg(not(...))], so these need to all\n-                                // not match.\n-                                !not_cfgs.iter().all(|mi| {\n-                                    debug!(\"cfg(not({}[...]))\", mi.name());\n-                                    contains(cfg, &**mi)\n-                                })\n-                            }\n-                            _ => contains(cfg, &**cfg_mi)\n-                        }\n-                    })\n-                }\n-                None => false\n-            }\n-        } else {\n-            false\n-        };\n-        matches || this_matches\n-    });\n-    debug!(\"test_cfg (no_cfgs={}, some_cfg_matches={})\", no_cfgs, some_cfg_matches);\n-    no_cfgs || some_cfg_matches\n-}\n-\n /// Represents the #[deprecated=\"foo\"] and friends attributes.\n #[deriving(Encodable,Decodable,Clone,Show)]\n pub struct Stability {"}, {"sha": "3511e167e97ae793a5b4d8ca3c6729a41b9a9110", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -261,20 +261,20 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n         };\n \n         if mis.len() != 1 {\n-            diagnostic.span_warn(attr.span, \"The use of multiple cfgs in the top level of \\\n-                                             `#[cfg(..)]` is deprecated. Change `#[cfg(a, b)]` to \\\n-                                             `#[cfg(all(a, b))]`.\");\n+            diagnostic.span_err(attr.span, \"expected 1 cfg-pattern\");\n+            return false;\n         }\n \n         if seen_cfg {\n-            diagnostic.span_warn(attr.span, \"The semantics of multiple `#[cfg(..)]` attributes on \\\n-                                             same item are changing from the union of the cfgs to \\\n-                                             the intersection of the cfgs. Change `#[cfg(a)] \\\n-                                             #[cfg(b)]` to `#[cfg(any(a, b))]`.\");\n+            diagnostic.span_err(attr.span, \"The semantics of multiple `#[cfg(..)]` attributes on \\\n+                                            same item are changing from the union of the cfgs to \\\n+                                            the intersection of the cfgs. Change `#[cfg(a)] \\\n+                                            #[cfg(b)]` to `#[cfg(any(a, b))]`.\");\n+            return false;\n         }\n \n         seen_cfg = true;\n-        in_cfg |= mis.iter().all(|mi| attr::cfg_matches(diagnostic, cfg, &**mi));\n+        in_cfg |= attr::cfg_matches(diagnostic, cfg, &*mis[0]);\n     }\n     in_cfg | !seen_cfg\n }"}, {"sha": "f697acb417de7f393cc701d0a3852a442b46814b", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/**\n-The compiler code necessary to support the cfg! extension, which\n-expands to a literal `true` or `false` based on whether the given cfgs\n-match the current compilation environment.\n-*/\n+/// The compiler code necessary to support the cfg! extension, which expands to\n+/// a literal `true` or `false` based on whether the given cfg matches the\n+/// current compilation environment.\n \n use ast;\n use codemap::Span;\n@@ -24,28 +22,18 @@ use attr::*;\n use parse::attr::ParserAttr;\n use parse::token;\n \n-\n pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'static> {\n     let mut p = cx.new_parser_from_tts(tts);\n-    let mut cfgs = Vec::new();\n-    // parse `cfg!(meta_item, meta_item(x,y), meta_item=\"foo\", ...)`\n-    while p.token != token::EOF {\n-        cfgs.push(p.parse_meta_item());\n-        if p.eat(&token::EOF) { break } // trailing comma is optional,.\n-        p.expect(&token::COMMA);\n-    }\n+    let cfg = p.parse_meta_item();\n \n-    if cfgs.len() != 1 {\n-        cx.span_warn(sp, \"The use of multiple cfgs at the top level of `cfg!` \\\n-                          is deprecated. Change `cfg!(a, b)` to \\\n-                          `cfg!(all(a, b))`.\");\n+    if !p.eat(&token::EOF) {\n+        cx.span_err(sp, \"expected 1 cfg-pattern\");\n+        return DummyResult::expr(sp);\n     }\n \n-    let matches_cfg = cfgs.iter().all(|cfg| attr::cfg_matches(&cx.parse_sess.span_diagnostic,\n-                                                              cx.cfg.as_slice(), &**cfg));\n-\n+    let matches_cfg = attr::cfg_matches(&cx.parse_sess.span_diagnostic, cx.cfg.as_slice(), &*cfg);\n     MacExpr::new(cx.expr_bool(sp, matches_cfg))\n }"}, {"sha": "37586f6abd7d47526564f8f923a5b154be325baf", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -126,7 +126,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         span: i.span,\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &*i),\n-                        ignore: is_ignored(&self.cx, &*i),\n+                        ignore: is_ignored(&*i),\n                         should_fail: should_fail(&*i)\n                     };\n                     self.cx.testfns.push(test);\n@@ -343,22 +343,8 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     return has_bench_attr && has_test_signature(i);\n }\n \n-fn is_ignored(cx: &TestCtxt, i: &ast::Item) -> bool {\n-    i.attrs.iter().any(|attr| {\n-        // check ignore(cfg(foo, bar))\n-        attr.check_name(\"ignore\") && match attr.meta_item_list() {\n-            Some(ref cfgs) => {\n-                if cfgs.iter().any(|cfg| cfg.check_name(\"cfg\")) {\n-                    cx.span_diagnostic.span_warn(attr.span,\n-                            \"The use of cfg filters in #[ignore] is \\\n-                             deprecated. Use #[cfg_attr(<cfg pattern>, \\\n-                             ignore)] instead.\");\n-                }\n-                attr::test_cfg(cx.config.as_slice(), cfgs.iter())\n-            }\n-            None => true\n-        }\n-    })\n+fn is_ignored(i: &ast::Item) -> bool {\n+    i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n fn should_fail(i: &ast::Item) -> bool {"}, {"sha": "2319a4545eff98cb954a3718b1a109d63f0c1f1e", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -26,8 +26,7 @@ pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {\n }\n \n #[inline(never)]\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n pub extern fn foo(a: int, b: int, c: int, d: int) {\n     assert!(a == 1);\n     assert!(b == 2);"}, {"sha": "990d3d104853be8b9a3ad338bb69109d80876992", "filename": "src/test/run-make/test-harness/test-ignore-cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-make%2Ftest-harness%2Ftest-ignore-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-make%2Ftest-harness%2Ftest-ignore-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftest-harness%2Ftest-ignore-cfg.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n #[test]\n-#[ignore(cfg(ignorecfg))]\n+#[cfg_attr(ignorecfg, ignore)]\n fn shouldignore() {\n }\n \n #[test]\n-#[ignore(cfg(noignorecfg))]\n+#[cfg_attr(noignorecfg, ignore)]\n fn shouldnotignore() {\n }"}, {"sha": "ce0fcad40eea3a132afb37e1ff8c7b35effa2a93", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -10,8 +10,7 @@\n \n #![feature(asm)]\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n unsafe fn next_power_of_2(n: u32) -> u32 {\n     let mut tmp = n;\n     asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n@@ -28,8 +27,7 @@ unsafe fn next_power_of_2(n: u32) -> u32 {\n     return tmp;\n }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {\n     unsafe {\n         assert_eq!(64, next_power_of_2(37));\n@@ -62,5 +60,5 @@ pub fn main() {\n     assert_eq!(x, 60);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n pub fn main() {}"}, {"sha": "f78539084675365035ab86b2f051c7c109876522", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -10,8 +10,7 @@\n \n #![feature(asm)]\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {\n     let x: int;\n     unsafe {\n@@ -30,5 +29,5 @@ pub fn main() {\n     assert_eq!(x, 13);\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n pub fn main() {}"}, {"sha": "c2d5f17054d58e824929fe06012bad04deeead6f", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn target() {\n     assert_eq!(-1000 as uint >> 3u, 536870787u);\n }"}, {"sha": "b7cf3c4d22a3f8e33d2e041bc54f798744b9f141", "filename": "src/test/run-pass/cfgs-on-items.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -11,24 +11,23 @@\n // compile-flags: --cfg fooA --cfg fooB\n \n // fooA AND !bar\n-#[cfg(fooA, not(bar))]\n+#[cfg(all(fooA, not(bar)))]\n fn foo1() -> int { 1 }\n \n // !fooA AND !bar\n-#[cfg(not(fooA), not(bar))]\n+#[cfg(all(not(fooA), not(bar)))]\n fn foo2() -> int { 2 }\n \n // fooC OR (fooB AND !bar)\n-#[cfg(fooC)]\n-#[cfg(fooB, not(bar))]\n+#[cfg(any(fooC, all(fooB, not(bar))))]\n fn foo2() -> int { 3 }\n \n // fooA AND bar\n-#[cfg(fooA, bar)]\n+#[cfg(all(fooA, bar))]\n fn foo3() -> int { 2 }\n \n // !(fooA AND bar)\n-#[cfg(not(fooA, bar))]\n+#[cfg(not(all(fooA, bar)))]\n fn foo3() -> int { 3 }\n \n pub fn main() {"}, {"sha": "b4a54b599fe8a680f5c18145f3f6c9072f00a1e6", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -60,10 +60,10 @@ pub fn test_destroy_actually_kills(force: bool) {\n     use libc;\n     use std::str;\n \n-    #[cfg(unix,not(target_os=\"android\"))]\n+    #[cfg(all(unix,not(target_os=\"android\")))]\n     static BLOCK_COMMAND: &'static str = \"cat\";\n \n-    #[cfg(unix,target_os=\"android\")]\n+    #[cfg(all(unix,target_os=\"android\"))]\n     static BLOCK_COMMAND: &'static str = \"/system/bin/cat\";\n \n     #[cfg(windows)]"}, {"sha": "6ab753d526f5d75ece89d15f0fc771f2c2313da2", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -17,10 +17,10 @@ mod rusti {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"macos\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]\n@@ -32,8 +32,7 @@ mod m {\n     }\n \n     #[main]\n-    #[cfg(target_arch = \"x86_64\")]\n-    #[cfg(target_arch = \"arm\")]\n+    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n     pub fn main() {\n         unsafe {\n             assert_eq!(::rusti::pref_align_of::<u64>(), 8u);"}, {"sha": "960dae8b7043ca4c58541e464a121040a2985928", "filename": "src/test/run-pass/issue-14936.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14936.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -36,8 +36,7 @@ macro_rules! demo {\n     }\n }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn main() {\n     fn out_write_only_expr_then_in_expr() {\n         demo!(\"=r\")\n@@ -51,5 +50,5 @@ fn main() {\n     out_read_write_expr_then_in_expr();\n }\n \n-#[cfg(not(target_arch = \"x86\"), not(target_arch = \"x86_64\"))]\n+#[cfg(all(not(target_arch = \"x86\"), not(target_arch = \"x86_64\")))]\n pub fn main() {}"}, {"sha": "b9f522f1f8590a0495c0b4e356af453dbf84cf97", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -28,8 +28,7 @@ pub fn main() {\n     assert_eq!(mem::size_of::<Kitty>(), 16 as uint);\n }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 4 as uint);\n     assert_eq!(mem::size_of::<Kitty>(), 8 as uint);"}, {"sha": "c5a721ee326a5fe37ecc93a82a6621c00ddbaf2b", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -36,8 +36,7 @@ struct Outer {\n }\n \n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n mod m {\n     pub fn align() -> uint { 4u }\n     pub fn size() -> uint { 8u }"}, {"sha": "4e41caf138ee126e2b203dcca801e8df8a091360", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -36,19 +36,18 @@ struct Outer {\n }\n \n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"macos\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {\n         pub fn align() -> uint { 4u }\n         pub fn size() -> uint { 12u }\n     }\n \n-    #[cfg(target_arch = \"x86_64\")]\n-    #[cfg(target_arch = \"arm\")]\n+    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n     pub mod m {\n         pub fn align() -> uint { 8u }\n         pub fn size() -> uint { 16u }"}, {"sha": "63574316fe57398d5790d5e761178a1bdfe92e91", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -57,8 +57,7 @@ fn test2() {\n     }\n }\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn test2() {\n }\n "}, {"sha": "8f67532d89d6bdc64810ceca8746befcaa709946", "filename": "src/test/run-pass/syntax-extension-cfg.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-cfg.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -18,17 +18,15 @@ pub fn main() {\n     if ! cfg!(qux=\"foo\") { fail!() }\n     if   cfg!(not(qux=\"foo\")) { fail!() }\n \n-    if ! cfg!(foo, qux=\"foo\") { fail!() }\n-    if   cfg!(not(foo, qux=\"foo\")) { fail!() }\n-    if   cfg!(all(not(foo, qux=\"foo\"))) { fail!() }\n+    if ! cfg!(all(foo, qux=\"foo\")) { fail!() }\n+    if   cfg!(not(all(foo, qux=\"foo\"))) { fail!() }\n+    if   cfg!(all(not(all(foo, qux=\"foo\")))) { fail!() }\n \n     if cfg!(not_a_cfg) { fail!() }\n-    if cfg!(not_a_cfg, foo, qux=\"foo\") { fail!() }\n+    if cfg!(all(not_a_cfg, foo, qux=\"foo\")) { fail!() }\n     if cfg!(all(not_a_cfg, foo, qux=\"foo\")) { fail!() }\n     if ! cfg!(any(not_a_cfg, foo)) { fail!() }\n \n     if ! cfg!(not(not_a_cfg)) { fail!() }\n-    if ! cfg!(not(not_a_cfg), foo, qux=\"foo\") { fail!() }\n-\n-    if cfg!(trailing_comma, ) { fail!() }\n+    if ! cfg!(all(not(not_a_cfg), foo, qux=\"foo\")) { fail!() }\n }"}, {"sha": "15d18525d0aa7c52cfa33f9331b4473ea3ce6745", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b1261b164eeac3e68573bfc698d1ca943fb05/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=aa3b1261b164eeac3e68573bfc698d1ca943fb05", "patch": "@@ -30,9 +30,9 @@ pub fn main() {\n     }\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"linux\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"android\"))]\n pub fn main() { }"}]}