{"sha": "d568e7686a272bb42cde272fb731e2ec44e03359", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjhlNzY4NmEyNzJiYjQyY2RlMjcyZmI3MzFlMmVjNDRlMDMzNTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-08-12T22:21:42Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-08-12T22:25:14Z"}, "message": "Support `if let` match guards", "tree": {"sha": "030e07d9a7aa7912204916f9bcb775d0e82e6d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030e07d9a7aa7912204916f9bcb775d0e82e6d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d568e7686a272bb42cde272fb731e2ec44e03359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d568e7686a272bb42cde272fb731e2ec44e03359", "html_url": "https://github.com/rust-lang/rust/commit/d568e7686a272bb42cde272fb731e2ec44e03359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d568e7686a272bb42cde272fb731e2ec44e03359/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4466e07fd7713a03a19fbbf387d32547a7fa53b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4466e07fd7713a03a19fbbf387d32547a7fa53b1", "html_url": "https://github.com/rust-lang/rust/commit/4466e07fd7713a03a19fbbf387d32547a7fa53b1"}], "stats": {"total": 117, "additions": 90, "deletions": 27}, "files": [{"sha": "a5f46ff401411a7ffa32c6ff7ead1c7974f12a11", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -1777,9 +1777,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.14.2\"\n+version = \"1.14.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5334230a6ae9ca52bc811c968c0ae12f1750c0698ed52ea68dabab7ce5a80972\"\n+checksum = \"0ef2f5093f958b9aecad9d80a01c49aece7a7bd15ad407e1986258fa36229910\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "4f912136739973ebb4cfc33f4a464c5233ffb107", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -28,8 +28,8 @@ use crate::{\n     db::DefDatabase,\n     expr::{\n         dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Label,\n-        LabelId, Literal, LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField,\n-        Statement,\n+        LabelId, Literal, LogicOp, MatchArm, MatchGuard, Ordering, Pat, PatId, RecordFieldPat,\n+        RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -361,10 +361,15 @@ impl ExprCollector<'_> {\n                             self.check_cfg(&arm).map(|()| MatchArm {\n                                 pat: self.collect_pat_opt(arm.pat()),\n                                 expr: self.collect_expr_opt(arm.expr()),\n-                                guard: arm\n-                                    .guard()\n-                                    .and_then(|guard| guard.expr())\n-                                    .map(|e| self.collect_expr(e)),\n+                                guard: arm.guard().map(|guard| match guard.pat() {\n+                                    Some(pat) => MatchGuard::IfLet {\n+                                        pat: self.collect_pat(pat),\n+                                        expr: self.collect_expr_opt(guard.expr()),\n+                                    },\n+                                    None => {\n+                                        MatchGuard::If { expr: self.collect_expr_opt(guard.expr()) }\n+                                    }\n+                                }),\n                             })\n                         })\n                         .collect()"}, {"sha": "5d9dd73a120dd25fbee0e3c3bb72d0ba98ab9cf8", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     body::Body,\n     db::DefDatabase,\n-    expr::{Expr, ExprId, LabelId, Pat, PatId, Statement},\n+    expr::{Expr, ExprId, LabelId, MatchGuard, Pat, PatId, Statement},\n     BlockId, DefWithBodyId,\n };\n \n@@ -204,12 +204,21 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n         Expr::Match { expr, arms } => {\n             compute_expr_scopes(*expr, body, scopes, scope);\n             for arm in arms {\n-                let scope = scopes.new_scope(scope);\n+                let mut scope = scopes.new_scope(scope);\n                 scopes.add_bindings(body, scope, arm.pat);\n-                if let Some(guard) = arm.guard {\n-                    scopes.set_scope(guard, scope);\n-                    compute_expr_scopes(guard, body, scopes, scope);\n-                }\n+                match arm.guard {\n+                    Some(MatchGuard::If { expr: guard }) => {\n+                        scopes.set_scope(guard, scope);\n+                        compute_expr_scopes(guard, body, scopes, scope);\n+                    }\n+                    Some(MatchGuard::IfLet { pat, expr: guard }) => {\n+                        scopes.set_scope(guard, scope);\n+                        compute_expr_scopes(guard, body, scopes, scope);\n+                        scope = scopes.new_scope(scope);\n+                        scopes.add_bindings(body, scope, pat);\n+                    }\n+                    _ => {}\n+                };\n                 scopes.set_scope(arm.expr, scope);\n                 compute_expr_scopes(arm.expr, body, scopes, scope);\n             }"}, {"sha": "e8e73f79fe2857e31493ed9b911c33f8b11c7d80", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -229,10 +229,17 @@ pub enum Array {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MatchArm {\n     pub pat: PatId,\n-    pub guard: Option<ExprId>,\n+    pub guard: Option<MatchGuard>,\n     pub expr: ExprId,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum MatchGuard {\n+    If { expr: ExprId },\n+\n+    IfLet { pat: PatId, expr: ExprId },\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct RecordLitField {\n     pub name: Name,"}, {"sha": "b773630e83d1c4fdc248030b50f7f306c2bd51e8", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n-    expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n+    expr::{Array, BinaryOp, Expr, ExprId, Literal, MatchGuard, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n     AssocContainerId, FieldId, Lookup,\n@@ -366,12 +366,13 @@ impl<'a> InferenceContext<'a> {\n                 for arm in arms {\n                     self.diverges = Diverges::Maybe;\n                     let _pat_ty = self.infer_pat(arm.pat, &input_ty, BindingMode::default());\n-                    if let Some(guard_expr) = arm.guard {\n+                    if let Some(MatchGuard::If { expr: guard_expr }) = arm.guard {\n                         self.infer_expr(\n                             guard_expr,\n                             &Expectation::has_type(TyKind::Scalar(Scalar::Bool).intern(&Interner)),\n                         );\n                     }\n+                    // FIXME: infer `if let` guard\n \n                     let arm_ty = self.infer_expr_inner(arm.expr, &expected);\n                     all_arms_diverge &= self.diverges;"}, {"sha": "6841f506aa4cce12f8e6683f77d9a1b70f6a1329", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -37,6 +37,10 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n \n+    // FIXME: support `if let` guards too\n+    if guard.let_token().is_some() {\n+        return None;\n+    }\n     let guard_condition = guard.expr()?;\n     let arm_expr = match_arm.expr()?;\n     let if_expr = make::expr_if("}, {"sha": "f0048aa301460b278d0fa5b50bef08345972a017", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -458,12 +458,17 @@ fn match_arm(p: &mut Parser) {\n // fn foo() {\n //     match () {\n //         _ if foo => (),\n+//         _ if let foo = bar => (),\n //     }\n // }\n fn match_guard(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![if]));\n     let m = p.start();\n     p.bump(T![if]);\n+    if p.eat(T![let]) {\n+        patterns::pattern_top(p);\n+        p.expect(T![=]);\n+    }\n     expr(p);\n     m.complete(p, MATCH_GUARD)\n }"}, {"sha": "205d01e974eab35d40203e486e1849bb18d25615", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -1021,6 +1021,9 @@ pub struct MatchGuard {\n }\n impl MatchGuard {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "646e2d1fd994955843bbce57c054168b10b95137", "filename": "crates/syntax/test_data/parser/inline/ok/0118_match_guard.rast", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rast?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@0..58\n-  FN@0..57\n+SOURCE_FILE@0..92\n+  FN@0..91\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -8,17 +8,17 @@ SOURCE_FILE@0..58\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..57\n+    BLOCK_EXPR@9..91\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      MATCH_EXPR@15..55\n+      MATCH_EXPR@15..89\n         MATCH_KW@15..20 \"match\"\n         WHITESPACE@20..21 \" \"\n         TUPLE_EXPR@21..23\n           L_PAREN@21..22 \"(\"\n           R_PAREN@22..23 \")\"\n         WHITESPACE@23..24 \" \"\n-        MATCH_ARM_LIST@24..55\n+        MATCH_ARM_LIST@24..89\n           L_CURLY@24..25 \"{\"\n           WHITESPACE@25..34 \"\\n        \"\n           MATCH_ARM@34..49\n@@ -40,8 +40,36 @@ SOURCE_FILE@0..58\n               L_PAREN@46..47 \"(\"\n               R_PAREN@47..48 \")\"\n             COMMA@48..49 \",\"\n-          WHITESPACE@49..54 \"\\n    \"\n-          R_CURLY@54..55 \"}\"\n-      WHITESPACE@55..56 \"\\n\"\n-      R_CURLY@56..57 \"}\"\n-  WHITESPACE@57..58 \"\\n\"\n+          WHITESPACE@49..58 \"\\n        \"\n+          MATCH_ARM@58..83\n+            WILDCARD_PAT@58..59\n+              UNDERSCORE@58..59 \"_\"\n+            WHITESPACE@59..60 \" \"\n+            MATCH_GUARD@60..76\n+              IF_KW@60..62 \"if\"\n+              WHITESPACE@62..63 \" \"\n+              LET_KW@63..66 \"let\"\n+              WHITESPACE@66..67 \" \"\n+              IDENT_PAT@67..70\n+                NAME@67..70\n+                  IDENT@67..70 \"foo\"\n+              WHITESPACE@70..71 \" \"\n+              EQ@71..72 \"=\"\n+              WHITESPACE@72..73 \" \"\n+              PATH_EXPR@73..76\n+                PATH@73..76\n+                  PATH_SEGMENT@73..76\n+                    NAME_REF@73..76\n+                      IDENT@73..76 \"bar\"\n+            WHITESPACE@76..77 \" \"\n+            FAT_ARROW@77..79 \"=>\"\n+            WHITESPACE@79..80 \" \"\n+            TUPLE_EXPR@80..82\n+              L_PAREN@80..81 \"(\"\n+              R_PAREN@81..82 \")\"\n+            COMMA@82..83 \",\"\n+          WHITESPACE@83..88 \"\\n    \"\n+          R_CURLY@88..89 \"}\"\n+      WHITESPACE@89..90 \"\\n\"\n+      R_CURLY@90..91 \"}\"\n+  WHITESPACE@91..92 \"\\n\""}, {"sha": "cfe05ce4e18fcb5784f8fffa0d1554ef45938957", "filename": "crates/syntax/test_data/parser/inline/ok/0118_match_guard.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d568e7686a272bb42cde272fb731e2ec44e03359/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_match_guard.rs?ref=d568e7686a272bb42cde272fb731e2ec44e03359", "patch": "@@ -1,5 +1,6 @@\n fn foo() {\n     match () {\n         _ if foo => (),\n+        _ if let foo = bar => (),\n     }\n }"}]}