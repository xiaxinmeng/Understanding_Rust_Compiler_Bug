{"sha": "7c61bb72130415006b505f12970b72bd96a7bc70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjFiYjcyMTMwNDE1MDA2YjUwNWYxMjk3MGI3MmJkOTZhN2JjNzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-11T19:01:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:16Z"}, "message": "collections: Move push/pop docs to MutableSeq", "tree": {"sha": "176fbc11a510512767b857d0fe47a2fe7c4e3aeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176fbc11a510512767b857d0fe47a2fe7c4e3aeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c61bb72130415006b505f12970b72bd96a7bc70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c61bb72130415006b505f12970b72bd96a7bc70", "html_url": "https://github.com/rust-lang/rust/commit/7c61bb72130415006b505f12970b72bd96a7bc70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c61bb72130415006b505f12970b72bd96a7bc70/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5599b69b6d3cb7ba9eb30b155aa580865b99d90e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5599b69b6d3cb7ba9eb30b155aa580865b99d90e", "html_url": "https://github.com/rust-lang/rust/commit/5599b69b6d3cb7ba9eb30b155aa580865b99d90e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "1d1907f454193cc32e72825d4e8d05b5e81a4c39", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7c61bb72130415006b505f12970b72bd96a7bc70/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c61bb72130415006b505f12970b72bd96a7bc70/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7c61bb72130415006b505f12970b72bd96a7bc70", "patch": "@@ -326,7 +326,30 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n }\n \n pub trait MutableSeq<T>: Mutable {\n+    /// Append an element to the back of a collection.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the number of elements in the vector overflows a `uint`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2);\n+    /// vec.push(3);\n+    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// ```\n     fn push(&mut self, t: T);\n+    /// Remove the last element from a collection and return it, or `None` if it is\n+    /// empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2, 3);\n+    /// assert_eq!(vec.pop(), Some(3));\n+    /// assert_eq!(vec, vec!(1, 2));\n+    /// ```\n     fn pop(&mut self) -> Option<T>;\n }\n "}, {"sha": "3c23550909bc54d5f4b445a15e7a888ff6294a03", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7c61bb72130415006b505f12970b72bd96a7bc70/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c61bb72130415006b505f12970b72bd96a7bc70/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7c61bb72130415006b505f12970b72bd96a7bc70", "patch": "@@ -1555,19 +1555,6 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n }\n \n impl<T> MutableSeq<T> for Vec<T> {\n-    /// Append an element to a vector.\n-    ///\n-    /// # Failure\n-    ///\n-    /// Fails if the number of elements in the vector overflows a `uint`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2);\n-    /// vec.push(3);\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n-    /// ```\n     #[inline]\n     fn push(&mut self, value: T) {\n         if mem::size_of::<T>() == 0 {\n@@ -1594,16 +1581,6 @@ impl<T> MutableSeq<T> for Vec<T> {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it, or `None` if it is\n-    /// empty.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n-    /// assert_eq!(vec.pop(), Some(3));\n-    /// assert_eq!(vec, vec!(1, 2));\n-    /// ```\n     #[inline]\n     fn pop(&mut self) -> Option<T> {\n         if self.len == 0 {"}]}