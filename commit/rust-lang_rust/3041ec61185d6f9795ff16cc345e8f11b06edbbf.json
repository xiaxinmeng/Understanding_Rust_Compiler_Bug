{"sha": "3041ec61185d6f9795ff16cc345e8f11b06edbbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNDFlYzYxMTg1ZDZmOTc5NWZmMTZjYzM0NWU4ZjExYjA2ZWRiYmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-03T09:47:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:08Z"}, "message": "resolve/expand: Catch macro kind mismatches early in resolve\n\nThis way we are processing all of them in a single point, rather than separately for each syntax extension kind.\nAlso, the standard expected/found wording is used.", "tree": {"sha": "4b64ce98429b47fcc3001ea7aaa4006c5694596a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b64ce98429b47fcc3001ea7aaa4006c5694596a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3041ec61185d6f9795ff16cc345e8f11b06edbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3041ec61185d6f9795ff16cc345e8f11b06edbbf", "html_url": "https://github.com/rust-lang/rust/commit/3041ec61185d6f9795ff16cc345e8f11b06edbbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3041ec61185d6f9795ff16cc345e8f11b06edbbf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16993d4acaf90285f6c86268a0ec2e7167c2a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16993d4acaf90285f6c86268a0ec2e7167c2a58", "html_url": "https://github.com/rust-lang/rust/commit/f16993d4acaf90285f6c86268a0ec2e7167c2a58"}], "stats": {"total": 174, "additions": 106, "deletions": 68}, "files": [{"sha": "30969948c4c8ce852aa19b978b9df27dd10216fe", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -348,7 +348,18 @@ impl<'a> Resolver<'a> {\n             _ => panic!(\"expected `DefKind::Macro` or `Res::NonMacroAttr`\"),\n         };\n \n-        Ok((res, self.get_macro(res)))\n+        let ext = self.get_macro(res);\n+        Ok(if ext.macro_kind() != kind {\n+            let expected = if kind == MacroKind::Attr { \"attribute\" } else  { kind.descr() };\n+            let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path);\n+            self.session.struct_span_err(path.span, &msg)\n+                        .span_label(path.span, format!(\"not {} {}\", kind.article(), expected))\n+                        .emit();\n+            // Return dummy syntax extensions for unexpected macro kinds for better recovery.\n+            (Res::Err, self.dummy_ext(kind))\n+        } else {\n+            (res, ext)\n+        })\n     }\n \n     fn report_unknown_attribute(&self, span: Span, name: &str, msg: &str, feature: Symbol) {"}, {"sha": "2349382eb5e9bdaa9f2c30f72f69e4f65f43664b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -323,12 +323,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             progress = true;\n             let ExpansionData { depth, mark, .. } = invoc.expansion_data;\n             self.cx.current_expansion = invoc.expansion_data.clone();\n-\n             self.cx.current_expansion.mark = scope;\n+\n             // FIXME(jseyfried): Refactor out the following logic\n             let (expanded_fragment, new_invocations) = if let Some(ext) = ext {\n                 let (invoc_fragment_kind, invoc_span) = (invoc.fragment_kind, invoc.span());\n-                let fragment = self.expand_invoc(invoc, &*ext).unwrap_or_else(|| {\n+                let fragment = self.expand_invoc(invoc, &ext).unwrap_or_else(|| {\n                     invoc_fragment_kind.dummy(invoc_span).unwrap()\n                 });\n                 self.collect_invocations(fragment, &[])\n@@ -551,17 +551,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.gate_proc_macro_expansion(attr.span, &res);\n                 res\n             }\n-            SyntaxExtensionKind::Derive(..) | SyntaxExtensionKind::LegacyDerive(..) => {\n-                self.cx.span_err(attr.span, &format!(\"`{}` is a derive macro\", attr.path));\n-                self.cx.trace_macros_diag();\n-                invoc.fragment_kind.dummy(attr.span)\n-            }\n-            _ => {\n-                let msg = &format!(\"macro `{}` may not be used in attributes\", attr.path);\n-                self.cx.span_err(attr.span, msg);\n-                self.cx.trace_macros_diag();\n-                invoc.fragment_kind.dummy(attr.span)\n-            }\n+            _ => unreachable!()\n         }\n     }\n \n@@ -671,21 +661,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let tok_result = expander.expand(self.cx, span, mac.node.stream());\n                 kind.make_from(tok_result)\n             }\n-\n-            SyntaxExtensionKind::Attr(..) |\n-            SyntaxExtensionKind::LegacyAttr(..) |\n-            SyntaxExtensionKind::NonMacroAttr { .. } => {\n-                self.cx.span_err(path.span,\n-                                 &format!(\"`{}` can only be used in attributes\", path));\n-                self.cx.trace_macros_diag();\n-                kind.dummy(span)\n-            }\n-\n-            SyntaxExtensionKind::Derive(..) | SyntaxExtensionKind::LegacyDerive(..) => {\n-                self.cx.span_err(path.span, &format!(\"`{}` is a derive macro\", path));\n-                self.cx.trace_macros_diag();\n-                kind.dummy(span)\n-            }\n+            _ => unreachable!()\n         };\n \n         if opt_expanded.is_some() {\n@@ -747,12 +723,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let items = expander.expand(self.cx, span, &meta, item);\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n-            _ => {\n-                let msg = &format!(\"macro `{}` may not be used for derive attributes\", path);\n-                self.cx.span_err(path.span, msg);\n-                self.cx.trace_macros_diag();\n-                invoc.fragment_kind.dummy(path.span)\n-            }\n+            _ => unreachable!()\n         }\n     }\n "}, {"sha": "9ce2fb58ab0aded52533d382d7c945c2aecc5dc9", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -7,12 +7,12 @@ mod unknown { pub macro rustc() {} }\n \n #[rustc::unknown]\n //~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n-//~| ERROR macro `rustc::unknown` may not be used in attributes\n+//~| ERROR expected attribute, found macro `rustc::unknown`\n fn f() {}\n \n #[unknown::rustc]\n //~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n-//~| ERROR macro `unknown::rustc` may not be used in attributes\n+//~| ERROR expected attribute, found macro `unknown::rustc`\n fn g() {}\n \n #[rustc_dummy]"}, {"sha": "7c5aa5381e8c7b9b5780cad1f7f9d07e1649c68a", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -7,11 +7,11 @@ LL | #[rustc::unknown]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error: macro `rustc::unknown` may not be used in attributes\n-  --> $DIR/feature-gate-rustc-attrs.rs:8:1\n+error: expected attribute, found macro `rustc::unknown`\n+  --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n LL | #[rustc::unknown]\n-   | ^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^ not an attribute\n \n error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:13:12\n@@ -22,11 +22,11 @@ LL | #[unknown::rustc]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error: macro `unknown::rustc` may not be used in attributes\n-  --> $DIR/feature-gate-rustc-attrs.rs:13:1\n+error: expected attribute, found macro `unknown::rustc`\n+  --> $DIR/feature-gate-rustc-attrs.rs:13:3\n    |\n LL | #[unknown::rustc]\n-   | ^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^ not an attribute\n \n error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:20:3"}, {"sha": "0f93fcdaa5f5709ffe0d491ed40c6d1abfb1dad9", "filename": "src/test/ui/macros/macro-path-prelude-fail-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -1,4 +1,4 @@\n-#[derive(inline)] //~ ERROR macro `inline` may not be used for derive attributes\n+#[derive(inline)] //~ ERROR expected derive macro, found built-in attribute `inline`\n struct S;\n \n fn main() {}"}, {"sha": "dfd6818b6785a73f8fa8a9cc45be3511f27cc03c", "filename": "src/test/ui/macros/macro-path-prelude-fail-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -1,8 +1,8 @@\n-error: macro `inline` may not be used for derive attributes\n+error: expected derive macro, found built-in attribute `inline`\n   --> $DIR/macro-path-prelude-fail-4.rs:1:10\n    |\n LL | #[derive(inline)]\n-   |          ^^^^^^\n+   |          ^^^^^^ not a derive macro\n \n error: aborting due to previous error\n "}, {"sha": "7a9e472c6c3eeccfee2a099ff32634e22a73fcf3", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -26,23 +26,31 @@ fn check_bang1() {\n }\n fn check_bang2() {\n     my_macro_attr!(); //~ ERROR cannot find macro `my_macro_attr!` in this scope\n+    crate::my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines\n+                             //~| ERROR expected macro, found attribute macro `crate::my_macro_attr`\n }\n fn check_bang3() {\n     MyTrait!(); //~ ERROR cannot find macro `MyTrait!` in this scope\n+    crate::MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n+                       //~| ERROR expected macro, found derive macro `crate::MyTrait`\n }\n \n #[my_macro] //~ ERROR attribute `my_macro` is currently unknown\n+#[crate::my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n+                   //~| ERROR expected attribute, found macro `crate::my_macro`\n fn check_attr1() {}\n #[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n fn check_attr2() {}\n #[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n-           //~| ERROR `MyTrait` is a derive macro\n+           //~| ERROR expected attribute, found derive macro `MyTrait`\n fn check_attr3() {}\n \n #[derive(my_macro)] //~ ERROR cannot find derive macro `my_macro` in this scope\n+#[derive(crate::my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines\n+                           //~| ERROR expected derive macro, found macro `crate::my_macro`\n struct CheckDerive1;\n #[derive(my_macro_attr)] //~ ERROR can't use a procedural macro from the same crate that defines it\n-                         //~| ERROR macro `my_macro_attr` may not be used for derive attributes\n+                         //~| ERROR expected derive macro, found attribute macro `my_macro_attr`\n struct CheckDerive2;\n #[derive(MyTrait)] //~ ERROR can't use a procedural macro from the same crate that defines it\n struct CheckDerive3;"}, {"sha": "a724d388f4891fa6e8d74b6110f7c47053a6ba2e", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 62, "deletions": 14, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -5,52 +5,100 @@ LL |     my_macro!();\n    |     ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:36:3\n+  --> $DIR/macro-namespace-reserved-2.rs:29:5\n+   |\n+LL |     crate::my_macro_attr!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: expected macro, found attribute macro `crate::my_macro_attr`\n+  --> $DIR/macro-namespace-reserved-2.rs:29:5\n+   |\n+LL |     crate::my_macro_attr!();\n+   |     ^^^^^^^^^^^^^^^^^^^^ not a macro\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:34:5\n+   |\n+LL |     crate::MyTrait!();\n+   |     ^^^^^^^^^^^^^^\n+\n+error: expected macro, found derive macro `crate::MyTrait`\n+  --> $DIR/macro-namespace-reserved-2.rs:34:5\n+   |\n+LL |     crate::MyTrait!();\n+   |     ^^^^^^^^^^^^^^ not a macro\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:42:3\n    |\n LL | #[my_macro_attr]\n    |   ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:38:3\n+  --> $DIR/macro-namespace-reserved-2.rs:44:3\n    |\n LL | #[MyTrait]\n    |   ^^^^^^^\n \n-error: `MyTrait` is a derive macro\n-  --> $DIR/macro-namespace-reserved-2.rs:38:1\n+error: expected attribute, found derive macro `MyTrait`\n+  --> $DIR/macro-namespace-reserved-2.rs:44:3\n    |\n LL | #[MyTrait]\n-   | ^^^^^^^^^^\n+   |   ^^^^^^^ not an attribute\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:44:10\n+  --> $DIR/macro-namespace-reserved-2.rs:49:10\n+   |\n+LL | #[derive(crate::my_macro)]\n+   |          ^^^^^^^^^^^^^^^\n+\n+error: expected derive macro, found macro `crate::my_macro`\n+  --> $DIR/macro-namespace-reserved-2.rs:49:10\n+   |\n+LL | #[derive(crate::my_macro)]\n+   |          ^^^^^^^^^^^^^^^ not a derive macro\n+\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:52:10\n    |\n LL | #[derive(my_macro_attr)]\n    |          ^^^^^^^^^^^^^\n \n-error: macro `my_macro_attr` may not be used for derive attributes\n-  --> $DIR/macro-namespace-reserved-2.rs:44:10\n+error: expected derive macro, found attribute macro `my_macro_attr`\n+  --> $DIR/macro-namespace-reserved-2.rs:52:10\n    |\n LL | #[derive(my_macro_attr)]\n-   |          ^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^ not a derive macro\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:47:10\n+  --> $DIR/macro-namespace-reserved-2.rs:55:10\n    |\n LL | #[derive(MyTrait)]\n    |          ^^^^^^^\n \n error[E0658]: The attribute `my_macro` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/macro-namespace-reserved-2.rs:34:3\n+  --> $DIR/macro-namespace-reserved-2.rs:38:3\n    |\n LL | #[my_macro]\n    |   ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/macro-namespace-reserved-2.rs:39:3\n+   |\n+LL | #[crate::my_macro]\n+   |   ^^^^^^^^^^^^^^^\n+\n+error: expected attribute, found macro `crate::my_macro`\n+  --> $DIR/macro-namespace-reserved-2.rs:39:3\n+   |\n+LL | #[crate::my_macro]\n+   |   ^^^^^^^^^^^^^^^ not an attribute\n+\n error: cannot find derive macro `my_macro` in this scope\n-  --> $DIR/macro-namespace-reserved-2.rs:42:10\n+  --> $DIR/macro-namespace-reserved-2.rs:48:10\n    |\n LL | #[derive(my_macro)]\n    |          ^^^^^^^^\n@@ -62,11 +110,11 @@ LL |     my_macro_attr!();\n    |     ^^^^^^^^^^^^^\n \n error: cannot find macro `MyTrait!` in this scope\n-  --> $DIR/macro-namespace-reserved-2.rs:31:5\n+  --> $DIR/macro-namespace-reserved-2.rs:33:5\n    |\n LL |     MyTrait!();\n    |     ^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 19 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b5666e4ea7072044a753d42143b32111c1d8cc9f", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.rs?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -1,6 +1,6 @@\n-#[derive(rustfmt::skip)] //~ ERROR macro `rustfmt::skip` may not be used for derive attributes\n+#[derive(rustfmt::skip)] //~ ERROR expected derive macro, found tool attribute `rustfmt::skip`\n struct S;\n \n fn main() {\n-    rustfmt::skip!(); //~ ERROR `rustfmt::skip` can only be used in attributes\n+    rustfmt::skip!(); //~ ERROR expected macro, found tool attribute `rustfmt::skip`\n }"}, {"sha": "6d0f826e621c5ebca64e9ce74982fc9a00d2e08d", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3041ec61185d6f9795ff16cc345e8f11b06edbbf/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr?ref=3041ec61185d6f9795ff16cc345e8f11b06edbbf", "patch": "@@ -1,14 +1,14 @@\n-error: macro `rustfmt::skip` may not be used for derive attributes\n+error: expected derive macro, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-2.rs:1:10\n    |\n LL | #[derive(rustfmt::skip)]\n-   |          ^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^ not a derive macro\n \n-error: `rustfmt::skip` can only be used in attributes\n+error: expected macro, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-2.rs:5:5\n    |\n LL |     rustfmt::skip!();\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^ not a macro\n \n error: aborting due to 2 previous errors\n "}]}