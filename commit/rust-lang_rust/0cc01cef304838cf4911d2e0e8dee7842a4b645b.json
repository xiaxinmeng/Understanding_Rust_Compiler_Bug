{"sha": "0cc01cef304838cf4911d2e0e8dee7842a4b645b", "node_id": "C_kwDOAAsO6NoAKDBjYzAxY2VmMzA0ODM4Y2Y0OTExZDJlMGU4ZGVlNzg0MmE0YjY0NWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T00:09:55Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:32:16Z"}, "message": "Move `OpenOptions` into `Methods` lint pass", "tree": {"sha": "a6dff82bf3e234ed2d1e674af9b8edb27a865051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6dff82bf3e234ed2d1e674af9b8edb27a865051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc01cef304838cf4911d2e0e8dee7842a4b645b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc01cef304838cf4911d2e0e8dee7842a4b645b", "html_url": "https://github.com/rust-lang/rust/commit/0cc01cef304838cf4911d2e0e8dee7842a4b645b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc01cef304838cf4911d2e0e8dee7842a4b645b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "html_url": "https://github.com/rust-lang/rust/commit/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "9f4d5b728a401eb66cffafcc7abf9a7c0d827555", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -187,6 +187,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::NEEDLESS_OPTION_TAKE),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::OBFUSCATED_IF_ELSE),\n     LintId::of(methods::OK_EXPECT),\n@@ -246,7 +247,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n-    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n     LintId::of(operators::BAD_BIT_MASK),"}, {"sha": "8ba39cc973e44eefb6f6181fdd24a9a3bb75880f", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -39,12 +39,12 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+    LintId::of(methods::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n     LintId::of(methods::ZST_OFFSET),\n     LintId::of(minmax::MIN_MAX),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(operators::BAD_BIT_MASK),\n     LintId::of(operators::CMP_NAN),"}, {"sha": "cf58d1bc5180e6453f63335008bde0e090526656", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -335,6 +335,7 @@ store.register_lints(&[\n     methods::NEEDLESS_OPTION_TAKE,\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n+    methods::NONSENSICAL_OPEN_OPTIONS,\n     methods::NO_EFFECT_REPLACE,\n     methods::OBFUSCATED_IF_ELSE,\n     methods::OK_EXPECT,\n@@ -421,7 +422,6 @@ store.register_lints(&[\n     nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n     octal_escapes::OCTAL_ESCAPES,\n     only_used_in_recursion::ONLY_USED_IN_RECURSION,\n-    open_options::NONSENSICAL_OPEN_OPTIONS,\n     operators::ABSURD_EXTREME_COMPARISONS,\n     operators::ARITHMETIC,\n     operators::ASSIGN_OP_PATTERN,"}, {"sha": "0d2cc07504a24d8c48af5b8a73539341b1c7fa09", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -315,7 +315,6 @@ mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n mod octal_escapes;\n mod only_used_in_recursion;\n-mod open_options;\n mod operators;\n mod option_env_unwrap;\n mod option_if_let_else;\n@@ -641,7 +640,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n     store.register_late_pass(|| Box::new(entry::HashMapPass));\n     store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n-    store.register_late_pass(|| Box::new(open_options::OpenOptions));\n     store.register_late_pass(|| Box::new(zero_div_zero::ZeroDiv));\n     store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n     store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));"}, {"sha": "3532aa17afdde6daaf8c1bdcdb378d39824fa425", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -57,6 +57,7 @@ mod needless_option_take;\n mod no_effect_replace;\n mod obfuscated_if_else;\n mod ok_expect;\n+mod open_options;\n mod option_as_ref_deref;\n mod option_map_or_none;\n mod option_map_unwrap_or;\n@@ -2679,6 +2680,27 @@ declare_clippy_lint! {\n     \"`&mut Mutex::lock` does unnecessary locking\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for duplicate open options as well as combinations\n+    /// that make no sense.\n+    ///\n+    /// ### Why is this bad?\n+    /// In the best case, the code will be harder to read than\n+    /// necessary. I don't know the worst case.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::fs::OpenOptions;\n+    ///\n+    /// OpenOptions::new().read(true).truncate(true);\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub NONSENSICAL_OPEN_OPTIONS,\n+    correctness,\n+    \"nonsensical combination of options for opening a file\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2791,6 +2813,7 @@ impl_lint_pass!(Methods => [\n     MAP_CLONE,\n     MAP_ERR_IGNORE,\n     MUT_MUTEX_LOCK,\n+    NONSENSICAL_OPEN_OPTIONS,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3168,6 +3191,9 @@ impl Methods {\n                     _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n                 },\n                 (\"ok_or_else\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"ok_or\"),\n+                (\"open\", [_]) => {\n+                    open_options::check(cx, expr, recv);\n+                },\n                 (\"or_else\", [arg]) => {\n                     if !bind_instead_of_map::ResultOrElseErrInfo::check(cx, expr, recv, arg) {\n                         unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");"}, {"sha": "c3112823e3469eeb576f601f8ed71f31a19b5dd9", "filename": "clippy_lints/src/methods/open_options.rs", "status": "renamed", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -3,43 +3,19 @@ use clippy_utils::paths;\n use clippy_utils::ty::match_type;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_lint::LateContext;\n use rustc_span::source_map::{Span, Spanned};\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for duplicate open options as well as combinations\n-    /// that make no sense.\n-    ///\n-    /// ### Why is this bad?\n-    /// In the best case, the code will be harder to read than\n-    /// necessary. I don't know the worst case.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::fs::OpenOptions;\n-    ///\n-    /// OpenOptions::new().read(true).truncate(true);\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub NONSENSICAL_OPEN_OPTIONS,\n-    correctness,\n-    \"nonsensical combination of options for opening a file\"\n-}\n-\n-declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n+use super::NONSENSICAL_OPEN_OPTIONS;\n \n-impl<'tcx> LateLintPass<'tcx> for OpenOptions {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(path, [self_arg, ..], _) = &e.kind {\n-            let obj_ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n-            if path.ident.name == sym!(open) && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n-                let mut options = Vec::new();\n-                get_open_options(cx, self_arg, &mut options);\n-                check_open_options(cx, &options, e.span);\n-            }\n-        }\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n+    if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n+        && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n+        && match_type(cx, cx.tcx.type_of(impl_id), &paths::OPEN_OPTIONS)\n+    {\n+        let mut options = Vec::new();\n+        get_open_options(cx, recv, &mut options);\n+        check_open_options(cx, &options, e.span);\n     }\n }\n ", "previous_filename": "clippy_lints/src/open_options.rs"}]}