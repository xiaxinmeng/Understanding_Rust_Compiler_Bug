{"sha": "88c05edc9deb6def7ed4b1370cca6ddb79da8424", "node_id": "C_kwDOAAsO6NoAKDg4YzA1ZWRjOWRlYjZkZWY3ZWQ0YjEzNzBjY2E2ZGRiNzlkYTg0MjQ", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-04-04T05:08:16Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-04-05T07:17:47Z"}, "message": "Make `synchronous_write` safe to call", "tree": {"sha": "a409921a8479b207b439b51a8d2da524e27f300e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a409921a8479b207b439b51a8d2da524e27f300e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c05edc9deb6def7ed4b1370cca6ddb79da8424", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmJL7RsACgkQcTRy8vRW\nJ96RjQ//cIk3nzfTHm97CP8dSZDVQ8X8iKMBN9n5gvFcUTO1QSseuHj4QD6mXicI\nEKq4V1TsdbKNaODHgRm3VrPJ/y/OCYJsmigohJlr8MzBNUD7F6g8zvIQaE32KvMN\nX9M4nK8Ad/LDrq6cTgi9sUxRjU7dNgR5X6WraRx0XbQC877N0wDk44mreXGCobd/\nh4gKj25u4rcnVvgXRsFKbrDgjZPAYQywqVShbLXbbYz3B6Wfz/VSWEYueIAR+1ng\ndAi71/WhCsUZ8Q/ArTRwg4Z89oEZBZRMY3j3zuFcp2M1v2hmsoVGDKJIOd8RU05I\nHkljpZvyXXtvdQdoXky+mUacpJqJlgaJDCKJyrJEviyecAYbvQ7iwJZ1txOJVQ9Z\ndW379KAFoBGbcQ37lppPLaIGjdpxqNpsgrDCCBdlkKaX1rkBB+xBKDmv52T/C8pG\n9d9uQlRpW2WCbxj7cM1xY1dhjXAEV0PQC/xnVJ54ea57nWzE2HRHiqiAEuoI2gNB\nXZld8pxJiP58nmP9ELhV7zVH/F5/b6GesxAVfb8LWTbW8im6/Pca8SWUaNeRcva5\nWmK2MIHUrXwzgTxGKDRKpfLj7YB5PcFaFzTdK5X21kJ6Yu7yo/6GU/7988AuxztW\nIVlXQGFZnRdQXIJrLShhLUIIJ/nCO/K9lEpxG+WdhIlIY9uBy38=\n=6e2n\n-----END PGP SIGNATURE-----", "payload": "tree a409921a8479b207b439b51a8d2da524e27f300e\nparent 084b71a54ff86db4d220845e7a8847b9928f89cf\nauthor Chris Denton <christophersdenton@gmail.com> 1649048896 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1649143067 +0100\n\nMake `synchronous_write` safe to call\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c05edc9deb6def7ed4b1370cca6ddb79da8424", "html_url": "https://github.com/rust-lang/rust/commit/88c05edc9deb6def7ed4b1370cca6ddb79da8424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c05edc9deb6def7ed4b1370cca6ddb79da8424/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084b71a54ff86db4d220845e7a8847b9928f89cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/084b71a54ff86db4d220845e7a8847b9928f89cf", "html_url": "https://github.com/rust-lang/rust/commit/084b71a54ff86db4d220845e7a8847b9928f89cf"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "336264d99f90030e40188d0714f234d6f40bb016", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88c05edc9deb6def7ed4b1370cca6ddb79da8424/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c05edc9deb6def7ed4b1370cca6ddb79da8424/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=88c05edc9deb6def7ed4b1370cca6ddb79da8424", "patch": "@@ -986,13 +986,6 @@ extern \"system\" {\n         lpOverlapped: LPOVERLAPPED,\n         lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,\n     ) -> BOOL;\n-    pub fn WriteFile(\n-        hFile: BorrowedHandle<'_>,\n-        lpBuffer: LPVOID,\n-        nNumberOfBytesToWrite: DWORD,\n-        lpNumberOfBytesWritten: LPDWORD,\n-        lpOverlapped: LPOVERLAPPED,\n-    ) -> BOOL;\n     pub fn WriteFileEx(\n         hFile: BorrowedHandle<'_>,\n         lpBuffer: LPVOID,"}, {"sha": "2a0bffd6a8e999d6aac1ab1fb5a900bc534073e7", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/88c05edc9deb6def7ed4b1370cca6ddb79da8424/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c05edc9deb6def7ed4b1370cca6ddb79da8424/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=88c05edc9deb6def7ed4b1370cca6ddb79da8424", "patch": "@@ -192,7 +192,7 @@ impl Handle {\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n-        unsafe { self.synchronous_write(&buf, None) }\n+        self.synchronous_write(&buf, None)\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n@@ -205,7 +205,7 @@ impl Handle {\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n-        unsafe { self.synchronous_write(&buf, Some(offset)) }\n+        self.synchronous_write(&buf, Some(offset))\n     }\n \n     pub fn try_clone(&self) -> io::Result<Self> {\n@@ -276,25 +276,27 @@ impl Handle {\n     /// See #81357.\n     ///\n     /// If `offset` is `None` then the current file position is used.\n-    unsafe fn synchronous_write(&self, buf: &[u8], offset: Option<u64>) -> io::Result<usize> {\n+    fn synchronous_write(&self, buf: &[u8], offset: Option<u64>) -> io::Result<usize> {\n         let mut io_status = c::IO_STATUS_BLOCK::default();\n \n         // The length is clamped at u32::MAX.\n         let len = cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;\n-        let status = c::NtWriteFile(\n-            self.as_handle(),\n-            ptr::null_mut(),\n-            None,\n-            ptr::null_mut(),\n-            &mut io_status,\n-            buf.as_ptr(),\n-            len,\n-            offset.map(|n| n as _).as_ref(),\n-            None,\n-        );\n+        let status = unsafe {\n+            c::NtWriteFile(\n+                self.as_handle(),\n+                ptr::null_mut(),\n+                None,\n+                ptr::null_mut(),\n+                &mut io_status,\n+                buf.as_ptr(),\n+                len,\n+                offset.map(|n| n as _).as_ref(),\n+                None,\n+            )\n+        };\n         match status {\n             // If the operation has not completed then abort the process.\n-            // Doing otherwise means that the buffer maybe read and the stack\n+            // Doing otherwise means that the buffer may be read and the stack\n             // written to after this function returns.\n             c::STATUS_PENDING => {\n                 eprintln!(\"I/O error: operation failed to complete synchronously\");\n@@ -305,7 +307,7 @@ impl Handle {\n             status if c::nt_success(status) => Ok(io_status.Information),\n \n             status => {\n-                let error = c::RtlNtStatusToDosError(status);\n+                let error = unsafe { c::RtlNtStatusToDosError(status) };\n                 Err(io::Error::from_raw_os_error(error as _))\n             }\n         }"}]}