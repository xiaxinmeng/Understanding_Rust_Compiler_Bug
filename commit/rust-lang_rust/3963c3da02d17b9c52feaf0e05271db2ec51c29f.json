{"sha": "3963c3da02d17b9c52feaf0e05271db2ec51c29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjNjM2RhMDJkMTdiOWM1MmZlYWYwZTA1MjcxZGIyZWM1MWMyOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-15T06:20:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-15T06:20:24Z"}, "message": "Auto merge of #83074 - Aaron1011:new-sort-fix, r=jackh726\n\nAvoid sorting predicates by `DefId`\n\nFixes issue #82920\n\nEven if an item does not change between compilation sessions, it may end\nup with a different `DefId`, since inserting/deleting an item affects\nthe `DefId`s of all subsequent items. Therefore, we use a `DefPathHash`\nin the incremental compilation system, which is stable in the face of\nchanges to unrelated items.\n\nIn particular, the query system will consider the inputs to a query to\nbe unchanged if any `DefId`s in the inputs have their `DefPathHash`es\nunchanged. Queries are pure functions, so the query result should be\nunchanged if the query inputs are unchanged.\n\nUnfortunately, it's possible to inadvertantly make a query result\nincorrectly change across compilations, by relying on the specific value\nof a `DefId`. Specifically, if the query result is a slice that gets\nsorted by `DefId`, the precise order will depend on how the `DefId`s got\nassigned in a particular compilation session. If some definitions end up\nwith different `DefId`s (but the same `DefPathHash`es) in a subsequent\ncompilation session, we will end up re-computing a *different* value for\nthe query, even though the query system expects the result to unchanged\ndue to the unchanged inputs.\n\nIt turns out that we have been sorting the predicates computed during\n`astconv` by their `DefId`. These predicates make their way into the\n`super_predicates_that_define_assoc_type`, which ends up getting used to\ncompute the vtables of trait objects. This, re-ordering these predicates\nbetween compilation sessions can lead to undefined behavior at runtime -\nthe query system will re-use code built with a *differently ordered*\nvtable, resulting in the wrong method being invoked at runtime.\n\nThis PR avoids sorting by `DefId` in `astconv`, fixing the\nmiscompilation. However, it's possible that other instances of this\nissue exist - they could also be easily introduced in the future.\n\nTo fully fix this issue, we should\n1. Turn on `-Z incremental-verify-ich` by default. This will cause the\n   compiler to ICE whenver an 'unchanged' query result changes between\n   compilation sessions, instead of causing a miscompilation.\n2. Remove the `Ord` impls for `CrateNum` and `DefId`. This will make it\n   difficult to introduce ICEs in the first place.", "tree": {"sha": "095c951a8acac61930a9ed114bf63612e0dcec0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095c951a8acac61930a9ed114bf63612e0dcec0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3963c3da02d17b9c52feaf0e05271db2ec51c29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3963c3da02d17b9c52feaf0e05271db2ec51c29f", "html_url": "https://github.com/rust-lang/rust/commit/3963c3da02d17b9c52feaf0e05271db2ec51c29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3963c3da02d17b9c52feaf0e05271db2ec51c29f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6eaea1c8860adb5302d2fbaad409e36585ab217", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6eaea1c8860adb5302d2fbaad409e36585ab217", "html_url": "https://github.com/rust-lang/rust/commit/d6eaea1c8860adb5302d2fbaad409e36585ab217"}, {"sha": "18f89790dacad42d11f7fbd5d9cb09ce5dd8ff2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f89790dacad42d11f7fbd5d9cb09ce5dd8ff2f", "html_url": "https://github.com/rust-lang/rust/commit/18f89790dacad42d11f7fbd5d9cb09ce5dd8ff2f"}], "stats": {"total": 170, "additions": 105, "deletions": 65}, "files": [{"sha": "a46a5502b24ad4acb88a81071f3fb7a6d4363eea", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -11,6 +11,7 @@\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n+#![recursion_limit = \"256\"]\n \n extern crate proc_macro;\n "}, {"sha": "001b52b56fc65932543bcb28f4ba73079a5f369a", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -6,6 +6,7 @@\n #![feature(or_patterns)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n+#![recursion_limit = \"256\"]\n \n use rustc_ast as ast;\n use rustc_ast::token::{self, Nonterminal};"}, {"sha": "7eaeae504ebf852df9e2c307c6701d3cff487156", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]\n #![feature(or_patterns)]\n+#![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "89501d9ce97255edc9722dd49f16d00c5059f8cc", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -942,7 +942,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut bounds = Bounds::default();\n \n         self.add_bounds(param_ty, ast_bounds, &mut bounds);\n-        bounds.trait_bounds.sort_by_key(|(t, _, _)| t.def_id());\n \n         bounds.implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n             if !self.is_unsized(ast_bounds, span) { Some(span) } else { None }\n@@ -1318,8 +1317,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // De-duplicate auto traits so that, e.g., `dyn Trait + Send + Send` is the same as\n         // `dyn Trait + Send`.\n-        auto_traits.sort_by_key(|i| i.trait_ref().def_id());\n-        auto_traits.dedup_by_key(|i| i.trait_ref().def_id());\n+        // We remove duplicates by inserting into a `FxHashSet` to avoid re-ordering\n+        // the bounds\n+        let mut duplicates = FxHashSet::default();\n+        auto_traits.retain(|i| duplicates.insert(i.trait_ref().def_id()));\n         debug!(\"regular_traits: {:?}\", regular_traits);\n         debug!(\"auto_traits: {:?}\", auto_traits);\n "}, {"sha": "793af679c9fc562199280f44e60e3da896d5318d", "filename": "src/test/incremental/issue-82920-predicate-order-miscompile.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fincremental%2Fissue-82920-predicate-order-miscompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fincremental%2Fissue-82920-predicate-order-miscompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-82920-predicate-order-miscompile.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -0,0 +1,31 @@\n+// revisions: rpass1 rpass2\n+\n+trait MyTrait: One + Two {}\n+impl<T> One for T {\n+    fn method_one(&self) -> usize {\n+        1\n+    }\n+}\n+impl<T> Two for T {\n+    fn method_two(&self) -> usize {\n+        2\n+    }\n+}\n+impl<T: One + Two> MyTrait for T {}\n+\n+fn main() {\n+    let a: &dyn MyTrait = &true;\n+    assert_eq!(a.method_one(), 1);\n+    assert_eq!(a.method_two(), 2);\n+}\n+\n+// Re-order traits 'One' and 'Two' between compilation\n+// sessions\n+\n+#[cfg(rpass1)]\n+trait One { fn method_one(&self) -> usize; }\n+\n+trait Two { fn method_two(&self) -> usize; }\n+\n+#[cfg(rpass2)]\n+trait One { fn method_one(&self) -> usize; }"}, {"sha": "44e2c4d3fb2534c82717d28f02de1cea26f1156d", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -18,7 +18,7 @@ pub use impl_trait_aux::func2;\n \n // @has impl_trait/fn.func3.html\n // @has - '//pre[@class=\"rust fn\"]' \"func3(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Clone + Iterator<Item = impl Iterator<Item = u8>>)\"\n+// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n // @!has - '//pre[@class=\"rust fn\"]' 'where'\n pub use impl_trait_aux::func3;\n "}, {"sha": "ae3a6031519fb56a50ea9423c277a2dc31295387", "filename": "src/test/rustdoc/unit-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Frustdoc%2Funit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Frustdoc%2Funit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funit-return.rs?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -10,8 +10,8 @@ pub fn f0<F: FnMut(u8) + Clone>(f: F) {}\n // @has 'foo/fn.f1.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u16) + Clone'\n pub fn f1<F: FnMut(u16) -> () + Clone>(f: F) {}\n \n-// @has 'foo/fn.f2.html' '//*[@class=\"rust fn\"]' 'F: Clone + FnMut(u32)'\n+// @has 'foo/fn.f2.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u32) + Clone'\n pub use unit_return::f2;\n \n-// @has 'foo/fn.f3.html' '//*[@class=\"rust fn\"]' 'F: Clone + FnMut(u64)'\n+// @has 'foo/fn.f3.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u64) + Clone'\n pub use unit_return::f3;"}, {"sha": "a5ebb80c836205a34c7fb7afa61e10f98e9f0078", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -1,15 +1,3 @@\n-error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:5\n-   |\n-LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n-help: consider further restricting the associated type\n-   |\n-LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:36\n    |\n@@ -27,6 +15,23 @@ help: consider further restricting the associated type\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:43\n+   |\n+LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n+   | \n+  ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL | pub trait Iterator {\n+   | ------------------ required by this bound in `Iterator`\n+   |\n+   = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+help: consider further restricting the associated type\n+   |\n+LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n    |"}, {"sha": "cd7c0dc4a44d0d049f7dc4d833ebf0b14deb30e2", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -20,12 +20,12 @@ LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |\n help: use fully qualified syntax to disambiguate\n    |\n-LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {\n-   |                                ^^^^^^^^^^^^^^^^^\n-help: use fully qualified syntax to disambiguate\n-   |\n LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {\n+   |                                ^^^^^^^^^^^^^^^^^\n \n error[E0222]: ambiguous associated type `Color` in bounds of `BoxCar`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n@@ -42,8 +42,8 @@ LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n    = help: consider introducing a new type parameter `T` and adding `where` constraints:\n                where\n                    T: BoxCar,\n-                   T: Box::Color = COLOR,\n-                   T: Vehicle::Color = COLOR\n+                   T: Vehicle::Color = COLOR,\n+                   T: Box::Color = COLOR\n \n error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:30\n@@ -73,12 +73,12 @@ LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n    |\n help: use fully qualified syntax to disambiguate\n    |\n-LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {\n-   |                             ^^^^^^^^^^^^^^^^^\n-help: use fully qualified syntax to disambiguate\n-   |\n LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {\n+   |                             ^^^^^^^^^^^^^^^^^\n \n error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:32"}, {"sha": "bcdb50aa312cb671caa1805c8450e680a6f657c2", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -13,20 +13,6 @@ help: consider further restricting `Self`\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:20:5\n-   |\n-LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                   |\n-   |     |                   required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Deref` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n-\n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n@@ -41,6 +27,20 @@ help: consider further restricting `Self`\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:20:5\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                   |\n+   |     |                   required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Deref` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n+\n error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |"}, {"sha": "fa5cf9196edbd85e3ceaa3a871bddda039a76713", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -13,20 +13,6 @@ help: consider further restricting `Self`\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            ^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:20:5\n-   |\n-LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                   |\n-   |     |                   required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Deref` is not implemented for `Self`\n-   |\n-help: consider further restricting `Self`\n-   |\n-LL | trait UncheckedCopy: Sized + Deref {\n-   |                            ^^^^^^^\n-\n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n@@ -41,6 +27,20 @@ help: consider further restricting `Self`\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: the trait bound `Self: Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:20:5\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |                   |\n+   |     |                   required by this bound in `UncheckedCopy::Output`\n+   |     the trait `Deref` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + Deref {\n+   |                            ^^^^^^^\n+\n error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |"}, {"sha": "95cacbc32ab69b09ace685a19285e36cb7f4c983", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -1,27 +1,27 @@\n-error[E0277]: `Rc<Foo>` cannot be sent between threads safely\n+error[E0277]: `Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n    |         ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n-   |     ^ `Rc<Foo>` cannot be sent between threads safely\n+   |     ^ `Rc<Foo>` cannot be shared between threads safely\n    |\n-   = help: within `Bar`, the trait `Send` is not implemented for `Rc<Foo>`\n+   = help: within `Bar`, the trait `Sync` is not implemented for `Rc<Foo>`\n    = note: required because it appears within the type `Bar`\n    = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n    = note: required because it appears within the type `Foo`\n \n-error[E0277]: `Rc<Foo>` cannot be shared between threads safely\n+error[E0277]: `Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n    |         ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n-   |     ^ `Rc<Foo>` cannot be shared between threads safely\n+   |     ^ `Rc<Foo>` cannot be sent between threads safely\n    |\n-   = help: within `Bar`, the trait `Sync` is not implemented for `Rc<Foo>`\n+   = help: within `Bar`, the trait `Send` is not implemented for `Rc<Foo>`\n    = note: required because it appears within the type `Bar`\n    = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n    = note: required because it appears within the type `Foo`"}, {"sha": "0a64a0d7d5ebcdf61a14bd98cfeabd88ee2d3f73", "filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -8,10 +8,10 @@ LL |         self.foo();\n    |              ^^^ method cannot be called on `&Foo<T>` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n-           `T: Bar`\n-           which is required by `Foo<T>: Bar`\n            `T: Default`\n            which is required by `Foo<T>: Bar`\n+           `T: Bar`\n+           which is required by `Foo<T>: Bar`\n help: consider restricting the type parameters to satisfy the trait bounds\n    |\n LL | struct Foo<T> where T: Bar, T: Default {"}, {"sha": "88e0631eeb27a2ab06456ef0467cb49359c046fb", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3963c3da02d17b9c52feaf0e05271db2ec51c29f/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=3963c3da02d17b9c52feaf0e05271db2ec51c29f", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n+error[E0275]: overflow evaluating the requirement `{integer}: Tweedledee`\n   --> $DIR/simultaneous.rs:18:5\n    |\n LL | fn is_ee<T: Combo>(t: T) {"}]}