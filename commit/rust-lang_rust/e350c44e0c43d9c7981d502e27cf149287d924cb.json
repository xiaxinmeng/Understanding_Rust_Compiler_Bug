{"sha": "e350c44e0c43d9c7981d502e27cf149287d924cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTBjNDRlMGM0M2Q5Yzc5ODFkNTAyZTI3Y2YxNDkyODdkOTI0Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-08T13:40:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-08T13:40:46Z"}, "message": "Auto merge of #38797 - abhijeetbhagat:master, r=petrochenkov\n\nFix process module tests to run on Windows\n\nFixes #38565\nr? @retep998", "tree": {"sha": "9f05380c2fefb305791ac84ab34a9ab8d60f20a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f05380c2fefb305791ac84ab34a9ab8d60f20a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e350c44e0c43d9c7981d502e27cf149287d924cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e350c44e0c43d9c7981d502e27cf149287d924cb", "html_url": "https://github.com/rust-lang/rust/commit/e350c44e0c43d9c7981d502e27cf149287d924cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e350c44e0c43d9c7981d502e27cf149287d924cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf88730e755d099c854f84dd0f1990490bf0088", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf88730e755d099c854f84dd0f1990490bf0088", "html_url": "https://github.com/rust-lang/rust/commit/cbf88730e755d099c854f84dd0f1990490bf0088"}, {"sha": "7152bce19203a2260147ae1ed84caa1d6de2ec40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7152bce19203a2260147ae1ed84caa1d6de2ec40", "html_url": "https://github.com/rust-lang/rust/commit/7152bce19203a2260147ae1ed84caa1d6de2ec40"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "1a11d7ad9d7bcc81a5e35c90cac618ca40dd754f", "filename": "src/libstd/process.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e350c44e0c43d9c7981d502e27cf149287d924cb/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e350c44e0c43d9c7981d502e27cf149287d924cb/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=e350c44e0c43d9c7981d502e27cf149287d924cb", "patch": "@@ -260,11 +260,18 @@ impl fmt::Debug for ChildStderr {\n /// ```\n /// use std::process::Command;\n ///\n-/// let output = Command::new(\"sh\")\n-///                      .arg(\"-c\")\n-///                      .arg(\"echo hello\")\n-///                      .output()\n-///                      .expect(\"failed to execute process\");\n+/// let output = if cfg!(target_os = \"windows\") {\n+///     Command::new(\"cmd\")\n+///             .args(&[\"/C\", \"echo hello\"])\n+///             .output()\n+///             .expect(\"failed to execute process\")\n+/// } else {\n+///     Command::new(\"sh\")\n+///             .arg(\"-c\")\n+///             .arg(\"echo hello\")\n+///             .output()\n+///             .expect(\"failed to execute process\")\n+/// };\n ///\n /// let hello = output.stdout;\n /// ```\n@@ -925,7 +932,11 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn smoke() {\n-        let p = Command::new(\"true\").spawn();\n+        let p = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).spawn()\n+        } else {\n+            Command::new(\"true\").spawn()\n+        };\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         assert!(p.wait().unwrap().success());\n@@ -943,7 +954,11 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn exit_reported_right() {\n-        let p = Command::new(\"false\").spawn();\n+        let p = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn()\n+        } else {\n+            Command::new(\"false\").spawn()\n+        };\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         assert!(p.wait().unwrap().code() == Some(1));\n@@ -982,9 +997,15 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn stdout_works() {\n-        let mut cmd = Command::new(\"echo\");\n-        cmd.arg(\"foobar\").stdout(Stdio::piped());\n-        assert_eq!(run_output(cmd), \"foobar\\n\");\n+        if cfg!(target_os = \"windows\") {\n+            let mut cmd = Command::new(\"cmd\");\n+            cmd.args(&[\"/C\", \"echo foobar\"]).stdout(Stdio::piped());\n+            assert_eq!(run_output(cmd), \"foobar\\r\\n\");\n+        } else {\n+            let mut cmd = Command::new(\"echo\");\n+            cmd.arg(\"foobar\").stdout(Stdio::piped());\n+            assert_eq!(run_output(cmd), \"foobar\\n\");\n+        }\n     }\n \n     #[test]\n@@ -1044,10 +1065,18 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {\n-        let mut status = Command::new(\"false\").status().unwrap();\n+        let mut status = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).status().unwrap()\n+        } else {\n+            Command::new(\"false\").status().unwrap()\n+        };\n         assert!(status.code() == Some(1));\n \n-        status = Command::new(\"true\").status().unwrap();\n+        status = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).status().unwrap()\n+        } else {\n+            Command::new(\"true\").status().unwrap()\n+        };\n         assert!(status.success());\n     }\n \n@@ -1063,7 +1092,11 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n-             = Command::new(\"echo\").arg(\"hello\").output().unwrap();\n+             = if cfg!(target_os = \"windows\") {\n+                 Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).output().unwrap()\n+             } else {\n+                 Command::new(\"echo\").arg(\"hello\").output().unwrap()\n+             };\n         let output_str = str::from_utf8(&stdout).unwrap();\n \n         assert!(status.success());\n@@ -1075,7 +1108,11 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_error() {\n         let Output {status, stdout, stderr}\n-             = Command::new(\"mkdir\").arg(\".\").output().unwrap();\n+             = if cfg!(target_os = \"windows\") {\n+                 Command::new(\"cmd\").args(&[\"/C\", \"mkdir .\"]).output().unwrap()\n+             } else {\n+                 Command::new(\"mkdir\").arg(\".\").output().unwrap()\n+             };\n \n         assert!(status.code() == Some(1));\n         assert_eq!(stdout, Vec::new());\n@@ -1085,23 +1122,35 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_once() {\n-        let mut prog = Command::new(\"false\").spawn().unwrap();\n+        let mut prog = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n+        } else {\n+            Command::new(\"false\").spawn().unwrap()\n+        };\n         assert!(prog.wait().unwrap().code() == Some(1));\n     }\n \n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_twice() {\n-        let mut prog = Command::new(\"false\").spawn().unwrap();\n+        let mut prog = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n+        } else {\n+            Command::new(\"false\").spawn().unwrap()\n+        };\n         assert!(prog.wait().unwrap().code() == Some(1));\n         assert!(prog.wait().unwrap().code() == Some(1));\n     }\n \n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_wait_with_output_once() {\n-        let prog = Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped())\n-            .spawn().unwrap();\n+        let prog = if cfg!(target_os = \"windows\") {\n+            Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).stdout(Stdio::piped()).spawn().unwrap()\n+        } else {\n+            Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped()).spawn().unwrap()\n+        };\n+\n         let Output {status, stdout, stderr} = prog.wait_with_output().unwrap();\n         let output_str = str::from_utf8(&stdout).unwrap();\n "}]}