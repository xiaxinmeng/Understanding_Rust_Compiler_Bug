{"sha": "03691c797a60cbd6e4c8bf09de1c48e62757f89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjkxYzc5N2E2MGNiZDZlNGM4YmYwOWRlMWM0OGU2Mjc1N2Y4OWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-12T14:55:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-12T14:55:02Z"}, "message": "update readme to point to the WG", "tree": {"sha": "65d90c519fe129ae2ed4456a37d82be8d2f817a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d90c519fe129ae2ed4456a37d82be8d2f817a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03691c797a60cbd6e4c8bf09de1c48e62757f89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03691c797a60cbd6e4c8bf09de1c48e62757f89f", "html_url": "https://github.com/rust-lang/rust/commit/03691c797a60cbd6e4c8bf09de1c48e62757f89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03691c797a60cbd6e4c8bf09de1c48e62757f89f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ecfc2729d2d0771304a4fed3afdfa2c2d99b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ecfc2729d2d0771304a4fed3afdfa2c2d99b43", "html_url": "https://github.com/rust-lang/rust/commit/74ecfc2729d2d0771304a4fed3afdfa2c2d99b43"}], "stats": {"total": 49, "additions": 8, "deletions": 41}, "files": [{"sha": "15da30f2d32df058969f89b3269e391a3e61b6c9", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/03691c797a60cbd6e4c8bf09de1c48e62757f89f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/03691c797a60cbd6e4c8bf09de1c48e62757f89f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=03691c797a60cbd6e4c8bf09de1c48e62757f89f", "patch": "@@ -3,12 +3,10 @@\n [![Build Status](https://travis-ci.org/rust-analyzer/rust-analyzer.svg?branch=master)](https://travis-ci.org/rust-analyzer/rust-analyzer)\n \n Rust Analyzer is an **experimental** modular compiler frontend for the Rust\n-language, which aims to lay a foundation for excellent IDE support.\n+language. It is a part of a larger rls-2.0 effort to create excellent IDE\n+support for Rust. If you want to get involved, check rls-2.0 working group repository:\n \n-It doesn't implement much of compiler functionality yet, but the white-space\n-preserving Rust parser works, and there are significant chunks of overall\n-architecture (indexing, on-demand & lazy computation, snapshotable world view)\n-in place. Some basic IDE functionality is provided via a language server.\n+https://github.com/rust-analyzer/WG-rls2.0\n \n Work on the Rust Analyzer is sponsored by\n \n@@ -41,37 +39,15 @@ features (some of which are VS Code specific).\n \n See [these instructions](./DEBUGGING.md) on how to debug the vscode extension and the lsp server.\n \n-## Current Status and Plans\n-\n-Rust analyzer aims to fill the same niche as the official [Rust Language\n-Server](https://github.com/rust-lang-nursery/rls), but uses a significantly\n-different architecture. More details can be found [in this\n-thread](https://internals.rust-lang.org/t/2019-strategy-for-rustc-and-the-rls/8361),\n-but the core issue is that RLS works in the \"wait until user stops typing, run\n-the build process, save the results of the analysis\" mode, which arguably is the\n-wrong foundation for IDE.\n-\n-Rust Analyzer is an experimental project at the moment, there's exactly zero\n-guarantees that it becomes production-ready one day.\n+## Getting in touch\n \n-The near/mid term plan is to work independently of the main rustc compiler and\n-implement at least simplistic versions of name resolution, macro expansion and\n-type inference. The purpose is two fold:\n+We are on the rust-lang Zulip!\n \n-- to quickly bootstrap usable and useful language server: solution that covers\n-  80% of Rust code will be useful for IDEs, and will be vastly simpler than 100%\n-  solution.\n+https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frls-2.2E0\n \n-- to understand how the consumer-side of compiler API should look like\n-  (especially it's on-demand aspects). If you have `get_expression_type`\n-  function, you can write a ton of purely-IDE features on top of it, even if the\n-  function is only partially correct. Pluging in the precise function afterwards\n-  should just make IDE features more reliable.\n+## Contributing\n \n-The long term plan is to merge with the mainline rustc compiler, probably around\n-the HIR boundary? That is, use rust analyzer for parsing, macro expansion and\n-related bits of name resolution, but leave the rest (including type inference\n-and trait selection) to the existing rustc.\n+See [CONTRIBUTING.md](./CONTRIBUTING.md) and [ARCHITECTURE.md](./ARCHITECTURE.md)\n \n ## Supported LSP features\n \n@@ -146,15 +122,6 @@ and trait selection) to the existing rustc.\n - [x] [textDocument/prepareRename](https://microsoft.github.io/language-server-protocol/specification#textDocument_prepareRename)\n - [x] [textDocument/foldingRange](https://microsoft.github.io/language-server-protocol/specification#textDocument_foldingRange)\n \n-## Getting in touch\n-\n-We have a Discord server dedicated to compilers and language servers\n-implemented in Rust: [https://discord.gg/sx3RQZB](https://discord.gg/sx3RQZB).\n-\n-## Contributing\n-\n-See [CONTRIBUTING.md](./CONTRIBUTING.md) and [ARCHITECTURE.md](./ARCHITECTURE.md)\n-\n ## License\n \n Rust analyzer is primarily distributed under the terms of both the MIT"}]}