{"sha": "0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzNhYjdhZjRhZWJlNzg2NDEwYjRjMTAzNjdlYjZkZGYxM2FmMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T03:00:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T03:00:13Z"}, "message": "Auto merge of #78432 - sexxi-goose:fix-77993-take3, r=nikomatsakis\n\nHandle type errors in closure/generator upvar_tys\n\nFixes #77993", "tree": {"sha": "6b4fd35642c83cb0a77d2ff5c84f28ae3f93edc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4fd35642c83cb0a77d2ff5c84f28ae3f93edc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "html_url": "https://github.com/rust-lang/rust/commit/0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c792f03379617efa7deb6ab8c20709c45e81670a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c792f03379617efa7deb6ab8c20709c45e81670a", "html_url": "https://github.com/rust-lang/rust/commit/c792f03379617efa7deb6ab8c20709c45e81670a"}, {"sha": "5229571a059a21be2f4a1d87a6641ca855e31143", "url": "https://api.github.com/repos/rust-lang/rust/commits/5229571a059a21be2f4a1d87a6641ca855e31143", "html_url": "https://github.com/rust-lang/rust/commit/5229571a059a21be2f4a1d87a6641ca855e31143"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "384d08f83485c00d1732574f2e2c60baa11e4519", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "patch": "@@ -388,9 +388,19 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split().parent_substs\n     }\n \n+    /// Returns an iterator over the list of types of captured paths by the closure.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.tupled_upvars_ty().tuple_fields()\n+        match self.tupled_upvars_ty().kind() {\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n+        }\n+        .into_iter()\n+        .flatten()\n     }\n \n     /// Returns the tuple type representing the upvars for this closure.\n@@ -515,9 +525,19 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self.split().witness.expect_ty()\n     }\n \n+    /// Returns an iterator over the list of types of captured paths by the generator.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.tupled_upvars_ty().tuple_fields()\n+        match self.tupled_upvars_ty().kind() {\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n+        }\n+        .into_iter()\n+        .flatten()\n     }\n \n     /// Returns the tuple type representing the upvars for this generator.\n@@ -660,13 +680,24 @@ pub enum UpvarSubsts<'tcx> {\n }\n \n impl<'tcx> UpvarSubsts<'tcx> {\n+    /// Returns an iterator over the list of types of captured paths by the closure/generator.\n+    /// In case there was a type error in figuring out the types of the captured path, an\n+    /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        let tupled_upvars_ty = match self {\n-            UpvarSubsts::Closure(substs) => substs.as_closure().split().tupled_upvars_ty,\n-            UpvarSubsts::Generator(substs) => substs.as_generator().split().tupled_upvars_ty,\n+        let tupled_tys = match self {\n+            UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),\n+            UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),\n         };\n-        tupled_upvars_ty.expect_ty().tuple_fields()\n+\n+        match tupled_tys.kind() {\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n+        }\n+        .into_iter()\n+        .flatten()\n     }\n \n     #[inline]"}, {"sha": "515b3bc09f0763fa46b5832b69ae4c4350cca432", "filename": "src/test/ui/issues/issue-77993-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs?ref=0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "patch": "@@ -0,0 +1,12 @@\n+#[derive(Clone)]\n+struct InGroup<F> {\n+    it: It,\n+    //~^ ERROR cannot find type `It` in this scope\n+    f: F,\n+}\n+fn dates_in_year() -> impl Clone {\n+    InGroup { f: |d| d }\n+    //~^ ERROR missing field `it` in initializer of `InGroup<_>`\n+}\n+\n+fn main() {}"}, {"sha": "3dc78ba6f8563e13369181e55b4dcb3aed1ad861", "filename": "src/test/ui/issues/issue-77993-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr?ref=0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "patch": "@@ -0,0 +1,16 @@\n+error[E0412]: cannot find type `It` in this scope\n+  --> $DIR/issue-77993-1.rs:3:9\n+   |\n+LL |     it: It,\n+   |         ^^ not found in this scope\n+\n+error[E0063]: missing field `it` in initializer of `InGroup<_>`\n+  --> $DIR/issue-77993-1.rs:8:5\n+   |\n+LL |     InGroup { f: |d| d }\n+   |     ^^^^^^^ missing `it`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0063, E0412.\n+For more information about an error, try `rustc --explain E0063`."}, {"sha": "4d554a0a1d0e19ec2fa4382ddbf2f6363b0c702f", "filename": "src/test/ui/issues/issue-77993-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.rs?ref=0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+async fn test() -> Result<(), Box<dyn std::error::Error>> {\n+    macro!();\n+    //~^ ERROR expected identifier, found `!`\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "64b378f83fc03e02b4741b5892b51518729c8305", "filename": "src/test/ui/issues/issue-77993-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d33ab7af4aebe786410b4c10367eb6ddf13af0b/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-2.stderr?ref=0d33ab7af4aebe786410b4c10367eb6ddf13af0b", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `!`\n+  --> $DIR/issue-77993-2.rs:4:10\n+   |\n+LL |     macro!();\n+   |          ^ expected identifier\n+\n+error: aborting due to previous error\n+"}]}