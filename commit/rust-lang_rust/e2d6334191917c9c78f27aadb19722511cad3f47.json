{"sha": "e2d6334191917c9c78f27aadb19722511cad3f47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDYzMzQxOTE5MTdjOWM3OGYyN2FhZGIxOTcyMjUxMWNhZDNmNDc=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-18T13:56:22Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-18T13:56:22Z"}, "message": "Add `Ipv6Addr::is_benchmarking`", "tree": {"sha": "8e114559ca7f174c472dd6d5facb6f35e315bed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e114559ca7f174c472dd6d5facb6f35e315bed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d6334191917c9c78f27aadb19722511cad3f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d6334191917c9c78f27aadb19722511cad3f47", "html_url": "https://github.com/rust-lang/rust/commit/e2d6334191917c9c78f27aadb19722511cad3f47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d6334191917c9c78f27aadb19722511cad3f47/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d192c80d2284ba6b5146bb3da586354c3762c72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d192c80d2284ba6b5146bb3da586354c3762c72b", "html_url": "https://github.com/rust-lang/rust/commit/d192c80d2284ba6b5146bb3da586354c3762c72b"}], "stats": {"total": 96, "additions": 67, "deletions": 29}, "files": [{"sha": "d09a7a99d565c31c0353b4ac89cea7cdc7c7809f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6334191917c9c78f27aadb19722511cad3f47/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6334191917c9c78f27aadb19722511cad3f47/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=e2d6334191917c9c78f27aadb19722511cad3f47", "patch": "@@ -1370,6 +1370,28 @@ impl Ipv6Addr {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n+    /// Returns [`true`] if this is an address reserved for benchmarking (`2001:2::/48`).\n+    ///\n+    /// This property is defined in [IETF RFC 5180], where it is mistakenly specified as covering the range `2001:0200::/48`.\n+    /// This is corrected in [IETF RFC Errata 1752] to `2001:0002::/48`.\n+    ///\n+    /// [IETF RFC 5180]: https://tools.ietf.org/html/rfc5180\n+    /// [IETF RFC Errata 1752]: https://www.rfc-editor.org/errata_search.php?eid=1752\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc613, 0x0).is_benchmarking(), false);\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n+    /// ```\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_benchmarking(&self) -> bool {\n+        (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n+    }\n+\n     /// Returns [`true`] if the address is a globally routable unicast address.\n     ///\n     /// The following return false:"}, {"sha": "557e04081cadfb97037ebc8bddf41b2462778845", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e2d6334191917c9c78f27aadb19722511cad3f47/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d6334191917c9c78f27aadb19722511cad3f47/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=e2d6334191917c9c78f27aadb19722511cad3f47", "patch": "@@ -475,21 +475,22 @@ fn ipv6_properties() {\n             assert_eq!(&ip!($s).octets(), octets);\n             assert_eq!(Ipv6Addr::from(*octets), ip!($s));\n \n-            let unspecified: u16 = 1 << 0;\n-            let loopback: u16 = 1 << 1;\n-            let unique_local: u16 = 1 << 2;\n-            let global: u16 = 1 << 3;\n-            let unicast_link_local: u16 = 1 << 4;\n-            let unicast_global: u16 = 1 << 7;\n-            let documentation: u16 = 1 << 8;\n-            let multicast_interface_local: u16 = 1 << 9;\n-            let multicast_link_local: u16 = 1 << 10;\n-            let multicast_realm_local: u16 = 1 << 11;\n-            let multicast_admin_local: u16 = 1 << 12;\n-            let multicast_site_local: u16 = 1 << 13;\n-            let multicast_organization_local: u16 = 1 << 14;\n-            let multicast_global: u16 = 1 << 15;\n-            let multicast: u16 = multicast_interface_local\n+            let unspecified: u32 = 1 << 0;\n+            let loopback: u32 = 1 << 1;\n+            let unique_local: u32 = 1 << 2;\n+            let global: u32 = 1 << 3;\n+            let unicast_link_local: u32 = 1 << 4;\n+            let unicast_global: u32 = 1 << 7;\n+            let documentation: u32 = 1 << 8;\n+            let benchmarking: u32 = 1 << 16;\n+            let multicast_interface_local: u32 = 1 << 9;\n+            let multicast_link_local: u32 = 1 << 10;\n+            let multicast_realm_local: u32 = 1 << 11;\n+            let multicast_admin_local: u32 = 1 << 12;\n+            let multicast_site_local: u32 = 1 << 13;\n+            let multicast_organization_local: u32 = 1 << 14;\n+            let multicast_global: u32 = 1 << 15;\n+            let multicast: u32 = multicast_interface_local\n                 | multicast_admin_local\n                 | multicast_global\n                 | multicast_link_local\n@@ -532,6 +533,11 @@ fn ipv6_properties() {\n             } else {\n                 assert!(!ip!($s).is_documentation());\n             }\n+            if ($mask & benchmarking) == benchmarking {\n+                assert!(ip!($s).is_benchmarking());\n+            } else {\n+                assert!(!ip!($s).is_benchmarking());\n+            }\n             if ($mask & multicast) != 0 {\n                 assert!(ip!($s).multicast_scope().is_some());\n                 assert!(ip!($s).is_multicast());\n@@ -570,20 +576,21 @@ fn ipv6_properties() {\n         }\n     }\n \n-    let unspecified: u16 = 1 << 0;\n-    let loopback: u16 = 1 << 1;\n-    let unique_local: u16 = 1 << 2;\n-    let global: u16 = 1 << 3;\n-    let unicast_link_local: u16 = 1 << 4;\n-    let unicast_global: u16 = 1 << 7;\n-    let documentation: u16 = 1 << 8;\n-    let multicast_interface_local: u16 = 1 << 9;\n-    let multicast_link_local: u16 = 1 << 10;\n-    let multicast_realm_local: u16 = 1 << 11;\n-    let multicast_admin_local: u16 = 1 << 12;\n-    let multicast_site_local: u16 = 1 << 13;\n-    let multicast_organization_local: u16 = 1 << 14;\n-    let multicast_global: u16 = 1 << 15;\n+    let unspecified: u32 = 1 << 0;\n+    let loopback: u32 = 1 << 1;\n+    let unique_local: u32 = 1 << 2;\n+    let global: u32 = 1 << 3;\n+    let unicast_link_local: u32 = 1 << 4;\n+    let unicast_global: u32 = 1 << 7;\n+    let documentation: u32 = 1 << 8;\n+    let benchmarking: u32 = 1 << 16;\n+    let multicast_interface_local: u32 = 1 << 9;\n+    let multicast_link_local: u32 = 1 << 10;\n+    let multicast_realm_local: u32 = 1 << 11;\n+    let multicast_admin_local: u32 = 1 << 12;\n+    let multicast_site_local: u32 = 1 << 13;\n+    let multicast_organization_local: u32 = 1 << 14;\n+    let multicast_global: u32 = 1 << 15;\n \n     check!(\"::\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unspecified);\n \n@@ -679,6 +686,12 @@ fn ipv6_properties() {\n         documentation\n     );\n \n+    check!(\n+        \"2001:2::ac32:23ff:21\",\n+        &[0x20, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0xac, 0x32, 0x23, 0xff, 0, 0x21],\n+        global | unicast_global | benchmarking\n+    );\n+\n     check!(\n         \"102:304:506:708:90a:b0c:d0e:f10\",\n         &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n@@ -885,6 +898,9 @@ fn ipv6_const() {\n     const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n     assert!(!IS_DOCUMENTATION);\n \n+    const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n+    assert!(!IS_BENCHMARKING);\n+\n     const IS_UNICAST_GLOBAL: bool = IP_ADDRESS.is_unicast_global();\n     assert!(!IS_UNICAST_GLOBAL);\n "}]}