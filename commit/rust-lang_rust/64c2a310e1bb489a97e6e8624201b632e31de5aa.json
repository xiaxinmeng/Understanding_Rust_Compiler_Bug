{"sha": "64c2a310e1bb489a97e6e8624201b632e31de5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzJhMzEwZTFiYjQ4OWE5N2U2ZTg2MjQyMDFiNjMyZTMxZGU1YWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-14T21:46:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "Address comments", "tree": {"sha": "7494923d519fbc9d060315819d1832541c79ff0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7494923d519fbc9d060315819d1832541c79ff0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c2a310e1bb489a97e6e8624201b632e31de5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c2a310e1bb489a97e6e8624201b632e31de5aa", "html_url": "https://github.com/rust-lang/rust/commit/64c2a310e1bb489a97e6e8624201b632e31de5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c2a310e1bb489a97e6e8624201b632e31de5aa/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffce4fbd6c7e1e2ac778cdb385cc9aca5e1bb6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffce4fbd6c7e1e2ac778cdb385cc9aca5e1bb6cb", "html_url": "https://github.com/rust-lang/rust/commit/ffce4fbd6c7e1e2ac778cdb385cc9aca5e1bb6cb"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "46f22fa86a6b5a94b139efe318efca239bcf4ea6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64c2a310e1bb489a97e6e8624201b632e31de5aa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c2a310e1bb489a97e6e8624201b632e31de5aa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=64c2a310e1bb489a97e6e8624201b632e31de5aa", "patch": "@@ -1549,8 +1549,12 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         // but we only return `true` for types that are definitely uninhabited.\n         match self.sty {\n             ty::Never => true,\n+            ty::Adt(def, _) if def.is_union() => {\n+                // For now, `union`s are never considered uninhabited.\n+                false\n+            }\n             ty::Adt(def, _) => {\n-                // Any ADT is uninhabited if:\n+                // Any ADT is uninhabited if either:\n                 // (a) It has no variants (i.e. an empty `enum`);\n                 // (b) Each of its variants (a single one in the case of a `struct`) has at least\n                 //     one uninhabited field."}]}