{"sha": "f455e46eae1a227d735091091144601b467e1565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTVlNDZlYWUxYTIyN2Q3MzUwOTEwOTExNDQ2MDFiNDY3ZTE1NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T19:14:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T19:14:52Z"}, "message": "Auto merge of #73550 - RalfJung:rollup-5huj1k1, r=RalfJung\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #72600 (Properly encode AnonConst into crate metadata)\n - #73055 (remove leftover mentions of `skol` and `int` from the compiler)\n - #73058 (Support sanitizers on aarch64-unknown-linux-gnu)\n - #73171 (RISC-V Emulated Testing)\n - #73404 (Update CFGuard syntax)\n - #73444 (ci: disable alt build during try builds)\n - #73471 (Prevent attacker from manipulating FPU tag word used in SGX enclave)\n - #73539 (Deprecate `Vec::remove_item`)\n - #73543 (Clean up E0695 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c7252184d324a8497b66fd34a03cc2f4ffd84edc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7252184d324a8497b66fd34a03cc2f4ffd84edc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f455e46eae1a227d735091091144601b467e1565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f455e46eae1a227d735091091144601b467e1565", "html_url": "https://github.com/rust-lang/rust/commit/f455e46eae1a227d735091091144601b467e1565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f455e46eae1a227d735091091144601b467e1565/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033013cab3a861224fd55f494c8be1cb0349eb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/033013cab3a861224fd55f494c8be1cb0349eb49", "html_url": "https://github.com/rust-lang/rust/commit/033013cab3a861224fd55f494c8be1cb0349eb49"}, {"sha": "bb0016bdec30cb88370428ec124c33d6f341aad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0016bdec30cb88370428ec124c33d6f341aad3", "html_url": "https://github.com/rust-lang/rust/commit/bb0016bdec30cb88370428ec124c33d6f341aad3"}], "stats": {"total": 844, "additions": 545, "deletions": 299}, "files": [{"sha": "5f9311635f6bfd0c856895b38e58a579b7c12f2b", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -152,10 +152,6 @@ jobs:\n           - name: dist-x86_64-linux\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: dist-x86_64-linux-alt\n-            env:\n-              IMAGE: dist-x86_64-linux\n-            os: ubuntu-latest-xl\n     timeout-minutes: 600\n     runs-on: \"${{ matrix.os }}\"\n     steps:"}, {"sha": "8f0a245a5658a5f3ea7b2d0438e9d2b045ca9536", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1206,7 +1206,7 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n-        // If Control Flow Guard is enabled, pass the `control_flow_guard=checks` flag to rustc\n+        // If Control Flow Guard is enabled, pass the `control-flow-guard` flag to rustc\n         // when compiling the standard library, since this might be linked into the final outputs\n         // produced by rustc. Since this mitigation is only available on Windows, only enable it\n         // for the standard library in case the compiler is run on a non-Windows platform.\n@@ -1217,7 +1217,7 @@ impl<'a> Builder<'a> {\n             && self.config.control_flow_guard\n             && compiler.stage >= 1\n         {\n-            rustflags.arg(\"-Zcontrol_flow_guard=checks\");\n+            rustflags.arg(\"-Zcontrol-flow-guard\");\n         }\n \n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs"}, {"sha": "47673ce1e870304894f260e5d33925db20cf2f45", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -141,6 +141,8 @@ def v(*args):\n   \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"qemu-aarch64-rootfs\", \"target.aarch64-unknown-linux-gnu.qemu-rootfs\",\n   \"rootfs in qemu testing, you probably don't want to use this\")\n+v(\"qemu-riscv64-rootfs\", \"target.riscv64gc-unknown-linux-gnu.qemu-rootfs\",\n+  \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"experimental-targets\", \"llvm.experimental-targets\",\n   \"experimental LLVM targets to build\")\n v(\"release-channel\", \"rust.channel\", \"the name of the release channel to build\")"}, {"sha": "0a14957384d28a012b55d4aa70f34c8fe8d86ec6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -689,48 +689,41 @@ fn supported_sanitizers(\n     target: Interned<String>,\n     channel: &str,\n ) -> Vec<SanitizerRuntime> {\n-    let mut result = Vec::new();\n+    let darwin_libs = |os: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}_{}_dynamic\", c, os),\n+                path: out_dir\n+                    .join(&format!(\"build/lib/darwin/libclang_rt.{}_{}_dynamic.dylib\", c, os)),\n+                name: format!(\"librustc-{}_rt.{}.dylib\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n+    let common_libs = |os: &str, arch: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}-{}\", c, arch),\n+                path: out_dir.join(&format!(\"build/lib/{}/libclang_rt.{}-{}.a\", os, c, arch)),\n+                name: format!(\"librustc-{}_rt.{}.a\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n     match &*target {\n-        \"x86_64-apple-darwin\" => {\n-            for s in &[\"asan\", \"lsan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n-                    path: out_dir\n-                        .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.dylib\", channel, s),\n-                });\n-            }\n+        \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n+        \"aarch64-unknown-linux-gnu\" => {\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n+        \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n+        \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-unknown-linux-gnu\" => {\n-            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"x86_64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"aarch64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-aarch64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n+            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n-        _ => {}\n+        _ => Vec::new(),\n     }\n-    result\n }\n \n struct HashStamp {"}, {"sha": "818306a00922986ab4fe3c3f8ceb079b574a3acd", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -26,8 +26,6 @@ jobs:\n   strategy:\n     matrix:\n       dist-x86_64-linux: {}\n-      dist-x86_64-linux-alt:\n-        IMAGE: dist-x86_64-linux\n \n # The macOS and Windows builds here are currently disabled due to them not being\n # overly necessary on `try` builds. We also don't actually have anything that"}, {"sha": "08d0c5b2cac1e70e8b87dbd49348ad32c889c364", "filename": "src/ci/docker/disabled/riscv64gc-linux/0001-Remove-stime-function-calls.patch", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2F0001-Remove-stime-function-calls.patch?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -0,0 +1,96 @@\n+From c820da85c65c7f3aa9e9cb3ed71ada69bf9b783e Mon Sep 17 00:00:00 2001\n+From: Alistair Francis <alistair.francis@wdc.com>\n+Date: Tue, 19 Nov 2019 13:06:40 +0100\n+Subject: [PATCH] Remove stime() function calls\n+\n+stime() has been deprecated in glibc 2.31 and replaced with\n+clock_settime(). Let's replace the stime() function calls with\n+clock_settime() in preperation.\n+\n+function                                             old     new   delta\n+rdate_main                                           197     224     +27\n+clock_settime                                          -      27     +27\n+date_main                                            926     941     +15\n+stime                                                 37       -     -37\n+------------------------------------------------------------------------------\n+(add/remove: 2/2 grow/shrink: 2/0 up/down: 69/-37)             Total: 32 bytes\n+\n+Signed-off-by: Alistair Francis <alistair.francis@wdc.com>\n+Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com>\n+\n+[Tom Eccles: adjust patch context to apply on top of 1.31.1-stable]\n+Signed-off-by: Tom Eccles <tom.eccles@codethink.co.uk>\n+---\n+ coreutils/date.c         | 6 +++++-\n+ libbb/missing_syscalls.c | 8 --------\n+ util-linux/rdate.c       | 8 ++++++--\n+ 3 files changed, 11 insertions(+), 11 deletions(-)\n+\n+diff --git a/coreutils/date.c b/coreutils/date.c\n+index 3414d38ae..4ade6abb4 100644\n+--- a/coreutils/date.c\n++++ b/coreutils/date.c\n+@@ -279,6 +279,9 @@ int date_main(int argc UNUSED_PARAM, char **argv)\n+ \t\ttime(&ts.tv_sec);\n+ #endif\n+ \t}\n++#if !ENABLE_FEATURE_DATE_NANO\n++\tts.tv_nsec = 0;\n++#endif\n+ \tlocaltime_r(&ts.tv_sec, &tm_time);\n+ \n+ \t/* If date string is given, update tm_time, and maybe set date */\n+@@ -301,9 +304,10 @@ int date_main(int argc UNUSED_PARAM, char **argv)\n+ \t\tif (date_str[0] != '@')\n+ \t\t\ttm_time.tm_isdst = -1;\n+ \t\tts.tv_sec = validate_tm_time(date_str, &tm_time);\n++\t\tts.tv_nsec = 0;\n+ \n+ \t\t/* if setting time, set it */\n+-\t\tif ((opt & OPT_SET) && stime(&ts.tv_sec) < 0) {\n++\t\tif ((opt & OPT_SET) && clock_settime(CLOCK_REALTIME, &ts) < 0) {\n+ \t\t\tbb_perror_msg(\"can't set date\");\n+ \t\t}\n+ \t}\n+diff --git a/libbb/missing_syscalls.c b/libbb/missing_syscalls.c\n+index 87cf59b3d..dc40d9155 100644\n+--- a/libbb/missing_syscalls.c\n++++ b/libbb/missing_syscalls.c\n+@@ -15,14 +15,6 @@ pid_t getsid(pid_t pid)\n+ \treturn syscall(__NR_getsid, pid);\n+ }\n+ \n+-int stime(const time_t *t)\n+-{\n+-\tstruct timeval tv;\n+-\ttv.tv_sec = *t;\n+-\ttv.tv_usec = 0;\n+-\treturn settimeofday(&tv, NULL);\n+-}\n+-\n+ int sethostname(const char *name, size_t len)\n+ {\n+ \treturn syscall(__NR_sethostname, name, len);\n+diff --git a/util-linux/rdate.c b/util-linux/rdate.c\n+index 70f829e7f..878375d78 100644\n+--- a/util-linux/rdate.c\n++++ b/util-linux/rdate.c\n+@@ -95,9 +95,13 @@ int rdate_main(int argc UNUSED_PARAM, char **argv)\n+ \tif (!(flags & 2)) { /* no -p (-s may be present) */\n+ \t\tif (time(NULL) == remote_time)\n+ \t\t\tbb_error_msg(\"current time matches remote time\");\n+-\t\telse\n+-\t\t\tif (stime(&remote_time) < 0)\n++\t\telse {\n++\t\t\tstruct timespec ts;\n++\t\t\tts.tv_sec = remote_time;\n++\t\t\tts.tv_nsec = 0;\n++\t\t\tif (clock_settime(CLOCK_REALTIME, &ts) < 0)\n+ \t\t\t\tbb_perror_msg_and_die(\"can't set time of day\");\n++\t\t}\n+ \t}\n+ \n+ \tif (flags != 1) /* not lone -s */\n+-- \n+2.25.1\n+"}, {"sha": "f21dc2ba309b8218effbb0305cf8d1c5afefbafa", "filename": "src/ci/docker/disabled/riscv64gc-linux/Dockerfile", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2FDockerfile?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -0,0 +1,102 @@\n+# based on armhf-gnu/Dockerfile\n+FROM ubuntu:20.04\n+\n+RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections\n+RUN apt-get update -y && apt-get install -y --no-install-recommends \\\n+    bc \\\n+    bison \\\n+    ca-certificates \\\n+    cmake \\\n+    cpio \\\n+    curl \\\n+    debian-ports-archive-keyring \\\n+    debootstrap \\\n+    flex \\\n+    gcc \\\n+    gcc-riscv64-linux-gnu \\\n+    git \\\n+    g++-riscv64-linux-gnu \\\n+    g++ \\\n+    libc6-dev \\\n+    libc6-dev-riscv64-cross \\\n+    make \\\n+    patch \\\n+    python3 \\\n+    qemu-system-misc \\\n+    xz-utils\n+\n+ENV ARCH=riscv\n+ENV CROSS_COMPILE=riscv64-linux-gnu-\n+\n+WORKDIR /build\n+\n+# From https://github.com/michaeljclark/busybear-linux/blob/master/conf/linux.config\n+COPY riscv64gc-linux/linux.config /build\n+\n+# Compile the kernel that we're going to be emulating with. This is\n+# basically just done to be compatible with the QEMU target that we're going\n+# to be using when running tests.\n+RUN curl https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.6.16.tar.xz | tar xJf - && \\\n+    cp linux.config linux-5.6.16/.config && \\\n+    cd /build/linux-5.6.16 && \\\n+    make olddefconfig && \\\n+    make -j$(nproc) vmlinux\n+RUN cp linux-5.6.16/vmlinux /tmp\n+RUN rm -rf linux-5.6.16\n+\n+# Compile an instance of busybox as this provides a lightweight system and init\n+# binary which we will boot into. Only trick here is configuring busybox to\n+# build static binaries.\n+RUN curl https://busybox.net/downloads/busybox-1.31.1.tar.bz2 | tar xjf -\n+COPY riscv64gc-linux/0001-Remove-stime-function-calls.patch /build/busybox-1.31.1/\n+RUN cd /build/busybox-1.31.1 && \\\n+    patch -p1 -i 0001-Remove-stime-function-calls.patch && \\\n+    make defconfig && \\\n+    sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \\\n+    make -j$(nproc) && \\\n+    make install && \\\n+    mv _install /tmp/rootfs && \\\n+    cd /build && \\\n+    rm -rf busybox-1.31.1\n+\n+# Download the ubuntu rootfs, which we'll use as a chroot for all our tests\n+# This is only needed to provide /lib/* and /usr/lib/*\n+WORKDIR /tmp\n+RUN debootstrap --variant=minbase --arch=riscv64 --foreign focal /tmp/rootfs/ubuntu\n+RUN cd rootfs && mkdir proc sys dev etc etc/init.d\n+# rootfs/ubuntu/proc is in a weird state (access fails with ELOOP) until\n+# rootfs/ubuntu/debootstrap/debootstrap --second-stage is run (under emulation),\n+# but this takes ages. Instead hack it into a good enough state.\n+# /proc is used by std::env::current_exe() (which is roughly\n+# `readlink /proc/self/exe`)\n+RUN cd rootfs/ubuntu && rm -rf proc && mkdir proc\n+\n+# Copy over our init script, which starts up our test server and also a few other\n+# misc tasks\n+COPY scripts/qemu-bare-bones-rcS rootfs/etc/init.d/rcS\n+RUN chmod +x rootfs/etc/init.d/rcS\n+\n+# Helper to quickly fill the entropy pool in the kernel\n+COPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\n+RUN riscv64-linux-gnu-gcc addentropy.c -o rootfs/addentropy -static\n+\n+# download and build the riscv bootloader\n+RUN git clone https://github.com/riscv/riscv-pk\n+WORKDIR /tmp/riscv-pk\n+# nothing special about this revision: it is just master at the time of writing\n+# v1.0.0 doesn't build\n+RUN git checkout 5d9ed238e1cabfbca3c47f50d32894ce94bfc304\n+RUN mkdir build && cd build && \\\n+    ../configure --with-payload=/tmp/vmlinux --host=riscv64-linux-gnu && \\\n+    make -j$(nproc) && \\\n+    cp bbl /tmp\n+WORKDIR /tmp\n+RUN rm -rf /tmp/riscv-pk\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV RUST_CONFIGURE_ARGS --qemu-riscv64-rootfs=/tmp/rootfs\n+ENV SCRIPT python3 ../x.py test --target riscv64gc-unknown-linux-gnu\n+\n+ENV NO_CHANGE_USER=1"}, {"sha": "5142664742f20248d66d550dfdbf64e94167adf5", "filename": "src/ci/docker/disabled/riscv64gc-linux/linux.config", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Friscv64gc-linux%2Flinux.config?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -0,0 +1,51 @@\n+CONFIG_DEFAULT_HOSTNAME=\"busybear\"\n+CONFIG_SYSVIPC=y\n+CONFIG_POSIX_MQUEUE=y\n+CONFIG_IKCONFIG=y\n+CONFIG_IKCONFIG_PROC=y\n+CONFIG_CGROUPS=y\n+CONFIG_CGROUP_SCHED=y\n+CONFIG_CFS_BANDWIDTH=y\n+CONFIG_CGROUP_BPF=y\n+CONFIG_NAMESPACES=y\n+CONFIG_USER_NS=y\n+CONFIG_CHECKPOINT_RESTORE=y\n+CONFIG_BLK_DEV_INITRD=y\n+CONFIG_EXPERT=y\n+CONFIG_BPF_SYSCALL=y\n+CONFIG_SMP=y\n+CONFIG_MODULES=y\n+CONFIG_NET=y\n+CONFIG_PACKET=y\n+CONFIG_PACKET_DIAG=y\n+CONFIG_UNIX=y\n+CONFIG_INET=y\n+CONFIG_NETLINK_DIAG=y\n+# CONFIG_WIRELESS is not set\n+CONFIG_PCI=y\n+CONFIG_DEVTMPFS=y\n+CONFIG_BLK_DEV_LOOP=y\n+CONFIG_VIRTIO_BLK=y\n+CONFIG_NETDEVICES=y\n+CONFIG_VIRTIO_NET=y\n+# CONFIG_ETHERNET is not set\n+# CONFIG_WLAN is not set\n+CONFIG_SERIAL_8250=y\n+CONFIG_SERIAL_8250_CONSOLE=y\n+CONFIG_SERIAL_OF_PLATFORM=y\n+CONFIG_HVC_RISCV_SBI=y\n+# CONFIG_HW_RANDOM is not set\n+# CONFIG_USB_SUPPORT is not set\n+CONFIG_VIRTIO_MMIO=y\n+CONFIG_SIFIVE_PLIC=y\n+CONFIG_RAS=y\n+CONFIG_EXT2_FS=y\n+CONFIG_EXT3_FS=y\n+CONFIG_EXT4_FS_POSIX_ACL=y\n+CONFIG_AUTOFS4_FS=y\n+CONFIG_MSDOS_FS=y\n+CONFIG_VFAT_FS=y\n+CONFIG_TMPFS=y\n+# CONFIG_CRYPTO_ECHAINIV is not set\n+# CONFIG_CRYPTO_HW is not set\n+CONFIG_PRINTK_TIME=y"}, {"sha": "fd764965ef21b1d85e50c9d3008b75219e5ad866", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -35,5 +35,6 @@ ENV HOSTS=aarch64-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --enable-full-tools \\\n       --enable-profiler \\\n+      --enable-sanitizers \\\n       --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "daa2d55c043996c81e9806ede3644597a0c50e7d", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -281,11 +281,6 @@ jobs:\n           - name: dist-x86_64-linux\n             <<: *job-linux-xl\n \n-          - name: dist-x86_64-linux-alt\n-            env:\n-              IMAGE: dist-x86_64-linux\n-            <<: *job-linux-xl\n-\n   auto:\n     <<: *base-ci-job\n     name: auto"}, {"sha": "4115825e920838947ab4dee93124a1811980daaf", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,10 +1,10 @@\n-# `control_flow_guard`\n+# `control-flow-guard`\n \n The tracking issue for this feature is: [#68793](https://github.com/rust-lang/rust/issues/68793).\n \n ------------------------\n \n-The rustc flag `-Z control_flow_guard=checks` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n+The rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n \n CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported Windows platforms (Windows 8.1 onwards). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete. \n \n@@ -29,7 +29,7 @@ The CFG checks and metadata can potentially increase binary size and runtime ove\n \n ## Testing Control Flow Guard\n \n-The rustc flag `-Z control_flow_guard=nochecks` instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.\n+The rustc flag `-Z control-flow-guard=nochecks` instructs LLVM to emit the list of valid call targets without inserting runtime checks. This flag should only be used for testing purposes as it does not provide security enforcement.\n \n \n ## Control Flow Guard in libraries\n@@ -44,14 +44,14 @@ For example:\n ```cmd\n rustup toolchain install --force nightly\n rustup component add rust-src\n-SET RUSTFLAGS=-Z control_flow_guard=checks\n+SET RUSTFLAGS=-Z control-flow-guard\n cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n ```\n \n ```PowerShell\n rustup toolchain install --force nightly\n rustup component add rust-src\n-$Env:RUSTFLAGS = \"-Z control_flow_guard=checks\"\n+$Env:RUSTFLAGS = \"-Z control-flow-guard\"\n cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n ```\n "}, {"sha": "e2dc816b0152647b89036796158a56c35ce3d024", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -12,7 +12,6 @@\n #![feature(associated_type_bounds)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(binary_heap_drain_sorted)]\n-#![feature(vec_remove_item)]\n #![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n "}, {"sha": "baa02b8997f92c6ea4027b8c40fd5a460e514e68", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -131,21 +131,6 @@ fn test_extend_ref() {\n     assert_eq!(v, [1, 2, 3, 4, 5, 6, 7]);\n }\n \n-#[test]\n-fn test_remove_item() {\n-    let mut v = vec![1, 2, 3];\n-    v.remove_item(&1);\n-\n-    assert_eq!(v.len(), 2);\n-    assert_eq!(v, [2, 3]);\n-\n-    let mut w = vec![1, 2, 3];\n-    w.remove_item(&4);\n-\n-    assert_eq!(w.len(), 3);\n-    w.remove_item(&4);\n-}\n-\n #[test]\n fn test_slice_from_mut() {\n     let mut values = vec![1, 2, 3, 4, 5];"}, {"sha": "0531084d0e4a36f8ca596040d09e536354aa25cd", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1760,17 +1760,15 @@ impl<T: PartialEq> Vec<T> {\n impl<T> Vec<T> {\n     /// Removes the first instance of `item` from the vector if the item exists.\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(vec_remove_item)]\n-    /// let mut vec = vec![1, 2, 3, 1];\n-    ///\n-    /// vec.remove_item(&1);\n-    ///\n-    /// assert_eq!(vec, vec![2, 3, 1]);\n-    /// ```\n+    /// This method will be removed soon.\n     #[unstable(feature = \"vec_remove_item\", reason = \"recently added\", issue = \"40062\")]\n+    #[rustc_deprecated(\n+        reason = \"Removing the first item equal to a needle is already easily possible \\\n+            with iterators and the current Vec methods. Furthermore, having a method for \\\n+            one particular case of removal (linear search, only the first item, no swap remove) \\\n+            but not for others is inconsistent. This method will be removed soon.\",\n+        since = \"1.46.0\"\n+    )]\n     pub fn remove_item<V>(&mut self, item: &V) -> Option<T>\n     where\n         T: PartialEq<V>,"}, {"sha": "6c995be913c9e94c5528eef7a4bd6d91f75d392b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -804,7 +804,10 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n             linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n             linker.link_dylib(Symbol::intern(&libname));\n         }\n-        \"x86_64-unknown-linux-gnu\" | \"x86_64-fuchsia\" | \"aarch64-fuchsia\" => {\n+        \"aarch64-fuchsia\"\n+        | \"aarch64-unknown-linux-gnu\"\n+        | \"x86_64-fuchsia\"\n+        | \"x86_64-unknown-linux-gnu\" => {\n             let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n             let path = default_tlib.join(&filename);\n             linker.link_whole_rlib(&path);"}, {"sha": "5013e83ca03620d0a5ec6a6f19433bcd42559483", "filename": "src/librustc_error_codes/error_codes/E0695.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_error_codes%2Ferror_codes%2FE0695.md", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_error_codes%2Ferror_codes%2FE0695.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0695.md?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,6 +1,6 @@\n A `break` statement without a label appeared inside a labeled block.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0695\n # #![feature(label_break_value)]"}, {"sha": "0499dc9ed2232ee8f2f39015a672fa00d6973cc0", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -63,14 +63,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// placeholder region. This is the first step of checking subtyping\n     /// when higher-ranked things are involved.\n     ///\n-    /// **Important:** you must call this function from within a snapshot.\n-    /// Moreover, before committing the snapshot, you must eventually call\n-    /// either `plug_leaks` or `pop_placeholders` to remove the placeholder\n-    /// regions. If you rollback the snapshot (or are using a probe), then\n-    /// the pop occurs as part of the rollback, so an explicit call is not\n-    /// needed (but is also permitted).\n-    ///\n-    /// For more information about how placeholders and HRTBs work, see\n+    /// **Important:** You have to be careful to not leak these placeholders,\n+    /// for more information about how placeholders and HRTBs work, see\n     /// the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html"}, {"sha": "91c39a0e78ffb732ef8340a2cc8b4512b6983013", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> TaintSet<'tcx> {\n                         verifys[i].origin.span(),\n                         \"we never add verifications while doing higher-ranked things\",\n                     ),\n-                    &Purged | &AddCombination(..) | &AddVar(..) => {}\n+                    &AddCombination(..) | &AddVar(..) => {}\n                 }\n             }\n         }"}, {"sha": "2902c41a6bcae779c85d64979c53082c3a6b57d8", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -289,14 +289,6 @@ pub(crate) enum UndoLog<'tcx> {\n \n     /// We added a GLB/LUB \"combination variable\".\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n-\n-    /// During skolemization, we sometimes purge entries from the undo\n-    /// log in a kind of minisnapshot (unlike other snapshots, this\n-    /// purging actually takes place *on success*). In that case, we\n-    /// replace the corresponding entry with `Noop` so as to avoid the\n-    /// need to do a bunch of swapping. (We can't use `swap_remove` as\n-    /// the order of the vector is important.)\n-    Purged,\n }\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -357,9 +349,6 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n \n     fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {\n         match undo_entry {\n-            Purged => {\n-                // nothing to do here\n-            }\n             AddVar(vid) => {\n                 self.var_infos.pop().unwrap();\n                 assert_eq!(self.var_infos.len(), vid.index() as usize);\n@@ -488,62 +477,6 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.var_infos[vid].origin\n     }\n \n-    /// Removes all the edges to/from the placeholder regions that are\n-    /// in `skols`. This is used after a higher-ranked operation\n-    /// completes to remove all trace of the placeholder regions\n-    /// created in that time.\n-    pub fn pop_placeholders(&mut self, placeholders: &FxHashSet<ty::Region<'tcx>>) {\n-        debug!(\"pop_placeholders(placeholders={:?})\", placeholders);\n-\n-        assert!(UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));\n-\n-        let constraints_to_kill: Vec<usize> = self\n-            .undo_log\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .filter(|&(_, undo_entry)| match undo_entry {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    kill_constraint(placeholders, undo_entry)\n-                }\n-                _ => false,\n-            })\n-            .map(|(index, _)| index)\n-            .collect();\n-\n-        for index in constraints_to_kill {\n-            let undo_entry = match &mut self.undo_log[index] {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    mem::replace(undo_entry, Purged)\n-                }\n-                _ => unreachable!(),\n-            };\n-            self.rollback_undo_entry(undo_entry);\n-        }\n-\n-        return;\n-\n-        fn kill_constraint<'tcx>(\n-            placeholders: &FxHashSet<ty::Region<'tcx>>,\n-            undo_entry: &UndoLog<'tcx>,\n-        ) -> bool {\n-            match undo_entry {\n-                &AddConstraint(Constraint::VarSubVar(..)) => false,\n-                &AddConstraint(Constraint::RegSubVar(a, _)) => placeholders.contains(&a),\n-                &AddConstraint(Constraint::VarSubReg(_, b)) => placeholders.contains(&b),\n-                &AddConstraint(Constraint::RegSubReg(a, b)) => {\n-                    placeholders.contains(&a) || placeholders.contains(&b)\n-                }\n-                &AddGiven(..) => false,\n-                &AddVerify(_) => false,\n-                &AddCombination(_, ref two_regions) => {\n-                    placeholders.contains(&two_regions.a) || placeholders.contains(&two_regions.b)\n-                }\n-                &AddVar(..) | &Purged => false,\n-            }\n-        }\n-    }\n-\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: add_constraint({:?})\", constraint);"}, {"sha": "2cfd6bb904c410558a310f727d1914cc45922e34", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -198,10 +198,6 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         assert!(self.logs.len() >= snapshot.undo_len);\n         assert!(self.num_open_snapshots > 0);\n     }\n-\n-    pub(crate) fn iter(&self) -> std::slice::Iter<'_, UndoLog<'tcx>> {\n-        self.logs.iter()\n-    }\n }\n \n impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {"}, {"sha": "47555aca9f3fbc95aa4b9edbf95c634fa0fa71dd", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -29,10 +29,10 @@ crate use self::util::elaborate_predicates;\n \n pub use rustc_middle::traits::*;\n \n-/// An `Obligation` represents some trait reference (e.g., `int: Eq`) for\n+/// An `Obligation` represents some trait reference (e.g., `i32: Eq`) for\n /// which the \"impl_source\" must be found. The process of finding a \"impl_source\" is\n /// called \"resolving\" the `Obligation`. This process consists of\n-/// either identifying an `impl` (e.g., `impl Eq for int`) that\n+/// either identifying an `impl` (e.g., `impl Eq for i32`) that\n /// satisfies the obligation, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n #[derive(Clone, PartialEq, Eq, Hash)]"}, {"sha": "4ae7e417a8f673d017da6ca897d3cebe910a7eec", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -63,11 +63,11 @@ impl PredicateSet<'tcx> {\n     fn insert(&mut self, pred: ty::Predicate<'tcx>) -> bool {\n         // We have to be careful here because we want\n         //\n-        //    for<'a> Foo<&'a int>\n+        //    for<'a> Foo<&'a i32>\n         //\n         // and\n         //\n-        //    for<'b> Foo<&'b int>\n+        //    for<'b> Foo<&'b i32>\n         //\n         // to be considered equivalent. So normalize all late-bound\n         // regions before we throw things into the underlying set."}, {"sha": "d861b444c88164e5486c23da571c51ef91a4f77a", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -465,7 +465,6 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(ast_json_noexpand, true);\n     untracked!(borrowck, String::from(\"other\"));\n     untracked!(borrowck_stats, true);\n-    untracked!(control_flow_guard, CFGuard::Checks);\n     untracked!(deduplicate_diagnostics, true);\n     untracked!(dep_tasks, true);\n     untracked!(dont_buffer_diagnostics, true);\n@@ -539,6 +538,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(binary_dep_depinfo, true);\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n+    tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);"}, {"sha": "800f794121ab3806e6ca0f24d07b0851d2ccbc2c", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -565,6 +565,7 @@ impl MetadataBlob {\n impl EntryKind {\n     fn def_kind(&self) -> DefKind {\n         match *self {\n+            EntryKind::AnonConst(..) => DefKind::AnonConst,\n             EntryKind::Const(..) => DefKind::Const,\n             EntryKind::AssocConst(..) => DefKind::AssocConst,\n             EntryKind::ImmStatic\n@@ -1121,7 +1122,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn mir_const_qualif(&self, id: DefIndex) -> mir::ConstQualifs {\n         match self.kind(id) {\n-            EntryKind::Const(qualif, _)\n+            EntryKind::AnonConst(qualif, _)\n+            | EntryKind::Const(qualif, _)\n             | EntryKind::AssocConst(\n                 AssocContainer::ImplDefault\n                 | AssocContainer::ImplFinal\n@@ -1340,7 +1342,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_rendered_const(&self, id: DefIndex) -> String {\n         match self.kind(id) {\n-            EntryKind::Const(_, data) | EntryKind::AssocConst(_, _, data) => data.decode(self).0,\n+            EntryKind::AnonConst(_, data)\n+            | EntryKind::Const(_, data)\n+            | EntryKind::AssocConst(_, _, data) => data.decode(self).0,\n             _ => bug!(),\n         }\n     }"}, {"sha": "31821ea459f1b055119734db42ea921b81d3957f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1358,7 +1358,7 @@ impl EncodeContext<'tcx> {\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Const(qualifs, const_data));\n+        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         record!(self.tables.visibility[def_id.to_def_id()] <- ty::Visibility::Public);\n         record!(self.tables.span[def_id.to_def_id()] <- self.tcx.def_span(def_id));\n         self.encode_item_type(def_id.to_def_id());"}, {"sha": "381e7ee115e173ceac4a535c6b8bf621513b663f", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -281,6 +281,7 @@ define_tables! {\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n enum EntryKind {\n+    AnonConst(mir::ConstQualifs, Lazy<RenderedConst>),\n     Const(mir::ConstQualifs, Lazy<RenderedConst>),\n     ImmStatic,\n     MutStatic,"}, {"sha": "8025246f3d6f6904f73635eef62e6744670557ce", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -45,7 +45,6 @@\n #![feature(min_specialization)]\n #![feature(track_caller)]\n #![feature(trusted_len)]\n-#![feature(vec_remove_item)]\n #![feature(stmt_expr_attributes)]\n #![feature(test)]\n #![feature(in_band_lifetimes)]"}, {"sha": "f650240a41c63fa641cc0c3292f2aeb7ec45463f", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -393,23 +393,25 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ```\n /// impl<T:Clone> Clone<T> for Option<T> { ... } // Impl_1\n /// impl<T:Clone> Clone<T> for Box<T> { ... }    // Impl_2\n-/// impl Clone for int { ... }             // Impl_3\n+/// impl Clone for i32 { ... }                   // Impl_3\n ///\n-/// fn foo<T:Clone>(concrete: Option<Box<int>>,\n-///                 param: T,\n-///                 mixed: Option<T>) {\n+/// fn foo<T: Clone>(concrete: Option<Box<i32>>, param: T, mixed: Option<T>) {\n+///     // Case A: Vtable points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, Vtable will carry resolutions for those as well:\n+///     concrete.clone(); // Vtable(Impl_1, [Vtable(Impl_2, [Vtable(Impl_3)])])\n ///\n-///    // Case A: ImplSource points at a specific impl. Only possible when\n-///    // type is concretely known. If the impl itself has bounded\n-///    // type parameters, ImplSource will carry resolutions for those as well:\n-///    concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n+///     // Case A: ImplSource points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, ImplSource will carry resolutions for those as well:\n+///     concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n ///\n-///    // Case B: ImplSource must be provided by caller. This applies when\n-///    // type is a type parameter.\n-///    param.clone();    // ImplSourceParam\n+///     // Case B: ImplSource must be provided by caller. This applies when\n+///     // type is a type parameter.\n+///     param.clone();    // ImplSourceParam\n ///\n-///    // Case C: A mix of cases A and B.\n-///    mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n+///     // Case C: A mix of cases A and B.\n+///     mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n /// }\n /// ```\n ///"}, {"sha": "3b4254a18ea61900ad3e6c4bdcc98f07b7e8684b", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -599,12 +599,12 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     ///\n     /// ```\n     /// type Func<A> = fn(A);\n-    /// type MetaFunc = for<'a> fn(Func<&'a int>)\n+    /// type MetaFunc = for<'a> fn(Func<&'a i32>)\n     /// ```\n     ///\n     /// The type `MetaFunc`, when fully expanded, will be\n     ///\n-    ///     for<'a> fn(fn(&'a int))\n+    ///     for<'a> fn(fn(&'a i32))\n     ///             ^~ ^~ ^~~\n     ///             |  |  |\n     ///             |  |  DebruijnIndex of 2\n@@ -613,26 +613,26 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     /// Here the `'a` lifetime is bound in the outer function, but appears as an argument of the\n     /// inner one. Therefore, that appearance will have a DebruijnIndex of 2, because we must skip\n     /// over the inner binder (remember that we count De Bruijn indices from 1). However, in the\n-    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a int` will have a\n+    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a i32` will have a\n     /// De Bruijn index of 1. It's only during the substitution that we can see we must increase the\n     /// depth by 1 to account for the binder that we passed through.\n     ///\n     /// As a second example, consider this twist:\n     ///\n     /// ```\n     /// type FuncTuple<A> = (A,fn(A));\n-    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a int>)\n+    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a i32>)\n     /// ```\n     ///\n     /// Here the final type will be:\n     ///\n-    ///     for<'a> fn((&'a int, fn(&'a int)))\n+    ///     for<'a> fn((&'a i32, fn(&'a i32)))\n     ///                 ^~~         ^~~\n     ///                 |           |\n     ///          DebruijnIndex of 1 |\n     ///                      DebruijnIndex of 2\n     ///\n-    /// As indicated in the diagram, here the same type `&'a int` is substituted once, but in the\n+    /// As indicated in the diagram, here the same type `&'a i32` is substituted once, but in the\n     /// first case we do not increase the De Bruijn index and in the second case we do. The reason\n     /// is that only in the second case have we passed through a fn binder.\n     fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {"}, {"sha": "633d4fda8a46d9691711df2633ab97daeb730c63", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -22,13 +22,13 @@ impl<'tcx> TypeWalker<'tcx> {\n     /// Skips the subtree corresponding to the last type\n     /// returned by `next()`.\n     ///\n-    /// Example: Imagine you are walking `Foo<Bar<int>, usize>`.\n+    /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.\n     ///\n     /// ```\n     /// let mut iter: TypeWalker = ...;\n     /// iter.next(); // yields Foo\n-    /// iter.next(); // yields Bar<int>\n-    /// iter.skip_current_subtree(); // skips int\n+    /// iter.next(); // yields Bar<i32>\n+    /// iter.skip_current_subtree(); // skips i32\n     /// iter.next(); // yields usize\n     /// ```\n     pub fn skip_current_subtree(&mut self) {"}, {"sha": "3afc4565933e54fdd0b3579b335589a6949b146e", "filename": "src/librustc_query_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_query_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_query_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Flib.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -6,7 +6,6 @@\n #![feature(hash_raw_entry)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n-#![feature(vec_remove_item)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "190312bb33001f9b673cf0abcace3b5db6cf4a96", "filename": "src/librustc_query_system/query/job.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_query_system%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_query_system%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fjob.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -452,7 +452,9 @@ fn remove_cycle<CTX: QueryContext>(\n \n         // Remove the queries in our cycle from the list of jobs to look at\n         for r in &stack {\n-            jobs.remove_item(&r.1);\n+            if let Some(pos) = jobs.iter().position(|j| j == &r.1) {\n+                jobs.remove(pos);\n+            }\n         }\n \n         // Find the queries in the cycle which are"}, {"sha": "f77bf5ddefd3f430904812ed30864a9908df6d4e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -103,7 +103,7 @@ pub enum Strip {\n     Symbols,\n }\n \n-/// The different settings that the `-Z control_flow_guard` flag can have.\n+/// The different settings that the `-Z control-flow-guard` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum CFGuard {\n     /// Do not emit Control Flow Guard metadata or checks."}, {"sha": "6c6f27502b6142d6b8cbc7fabbe501af634d3019", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -250,7 +250,8 @@ macro_rules! options {\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n         pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n-        pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n+        pub const parse_cfguard: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n         pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n         pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n         pub const parse_optimization_fuel: &str = \"crate=integer\";\n@@ -495,12 +496,24 @@ macro_rules! options {\n         }\n \n         fn parse_cfguard(slot: &mut CFGuard, v: Option<&str>) -> bool {\n-            match v {\n-                Some(\"disabled\") => *slot = CFGuard::Disabled,\n-                Some(\"nochecks\") => *slot = CFGuard::NoChecks,\n-                Some(\"checks\") => *slot = CFGuard::Checks,\n-                _ => return false,\n+            if v.is_some() {\n+                let mut bool_arg = None;\n+                if parse_opt_bool(&mut bool_arg, v) {\n+                    *slot = if bool_arg.unwrap() {\n+                        CFGuard::Checks\n+                    } else {\n+                        CFGuard::Disabled\n+                    };\n+                    return true\n+                }\n             }\n+\n+            *slot = match v {\n+                None => CFGuard::Checks,\n+                Some(\"checks\") => CFGuard::Checks,\n+                Some(\"nochecks\") => CFGuard::NoChecks,\n+                Some(_) => return false,\n+            };\n             true\n         }\n \n@@ -796,8 +809,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n-    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n-        \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n+    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n+        \"use Windows Control Flow Guard (default: no)\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],"}, {"sha": "2ea312c42dc646757fe81c93cbfcba17409d68f2", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1349,11 +1349,19 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    const ASAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n-    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n-    const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n+        \"aarch64-fuchsia\",\n+        \"aarch64-unknown-linux-gnu\",\n+        \"x86_64-apple-darwin\",\n+        \"x86_64-fuchsia\",\n+        \"x86_64-unknown-linux-gnu\",\n+    ];\n+    const LSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const MSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"];\n+    const TSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n     // Sanitizers can only be used on some tested platforms.\n     for s in sess.opts.debugging_opts.sanitizer {"}, {"sha": "196405425473428ee199387a9abd4fdc0335fe18", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "ca49ff5884f98a7080dd4b6cd7fbf12e19e26787", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -145,7 +145,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "50c04e8fc345248ed04a7eecc44dda84bd7b0913", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -553,14 +553,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// Here is an example. Imagine we have a closure expression\n     /// and we desugared it so that the type of the expression is\n-    /// `Closure`, and `Closure` expects an int as argument. Then it\n+    /// `Closure`, and `Closure` expects `i32` as argument. Then it\n     /// is \"as if\" the compiler generated this impl:\n     ///\n-    ///     impl Fn(int) for Closure { ... }\n+    ///     impl Fn(i32) for Closure { ... }\n     ///\n-    /// Now imagine our obligation is `Fn(usize) for Closure`. So far\n+    /// Now imagine our obligation is `Closure: Fn(usize)`. So far\n     /// we have matched the self type `Closure`. At this point we'll\n-    /// compare the `int` to `usize` and generate an error.\n+    /// compare the `i32` to `usize` and generate an error.\n     ///\n     /// Note that this checking occurs *after* the impl has selected,\n     /// because these output type parameters should not affect the"}, {"sha": "7dc8c2cf4cdc2a46328affd3a0e79304e3db9e8b", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1754,38 +1754,37 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Vec<PredicateObligation<'tcx>> {\n         // Because the types were potentially derived from\n         // higher-ranked obligations they may reference late-bound\n-        // regions. For example, `for<'a> Foo<&'a int> : Copy` would\n-        // yield a type like `for<'a> &'a int`. In general, we\n+        // regions. For example, `for<'a> Foo<&'a i32> : Copy` would\n+        // yield a type like `for<'a> &'a i32`. In general, we\n         // maintain the invariant that we never manipulate bound\n         // regions, so we have to process these bound regions somehow.\n         //\n         // The strategy is to:\n         //\n         // 1. Instantiate those regions to placeholder regions (e.g.,\n-        //    `for<'a> &'a int` becomes `&0 int`.\n-        // 2. Produce something like `&'0 int : Copy`\n-        // 3. Re-bind the regions back to `for<'a> &'a int : Copy`\n+        //    `for<'a> &'a i32` becomes `&0 i32`.\n+        // 2. Produce something like `&'0 i32 : Copy`\n+        // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`\n \n         types\n-            .skip_binder()\n+            .skip_binder() // binder moved -\\\n             .iter()\n             .flat_map(|ty| {\n-                // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/\n \n                 self.infcx.commit_unconditionally(|_| {\n-                    let (skol_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n+                    let (placeholder_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n                     let Normalized { value: normalized_ty, mut obligations } =\n                         ensure_sufficient_stack(|| {\n                             project::normalize_with_depth(\n                                 self,\n                                 param_env,\n                                 cause.clone(),\n                                 recursion_depth,\n-                                &skol_ty,\n+                                &placeholder_ty,\n                             )\n                         });\n-                    let skol_obligation = predicate_for_trait_def(\n+                    let placeholder_obligation = predicate_for_trait_def(\n                         self.tcx(),\n                         param_env,\n                         cause.clone(),\n@@ -1794,7 +1793,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         normalized_ty,\n                         &[],\n                     );\n-                    obligations.push(skol_obligation);\n+                    obligations.push(placeholder_obligation);\n                     obligations\n                 })\n             })\n@@ -1844,9 +1843,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        let (skol_obligation, placeholder_map) =\n+        let (placeholder_obligation, placeholder_map) =\n             self.infcx().replace_bound_vars_with_placeholders(&obligation.predicate);\n-        let skol_obligation_trait_ref = skol_obligation.trait_ref;\n+        let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n@@ -1865,14 +1864,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(\n             \"match_impl(impl_def_id={:?}, obligation={:?}, \\\n-             impl_trait_ref={:?}, skol_obligation_trait_ref={:?})\",\n-            impl_def_id, obligation, impl_trait_ref, skol_obligation_trait_ref\n+             impl_trait_ref={:?}, placeholder_obligation_trait_ref={:?})\",\n+            impl_def_id, obligation, impl_trait_ref, placeholder_obligation_trait_ref\n         );\n \n         let InferOk { obligations, .. } = self\n             .infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .eq(skol_obligation_trait_ref, impl_trait_ref)\n+            .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n "}, {"sha": "42901102c10760d0c92f077221501c04e9cb0e3f", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -130,7 +130,7 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // We determine whether there's a subset relationship by:\n     //\n-    // - skolemizing impl1,\n+    // - replacing bound vars with placeholders in impl1,\n     // - assuming the where clauses for impl1,\n     // - instantiating impl2 with fresh inference variables,\n     // - unifying,"}, {"sha": "33d57e25711733b5217da9b3c8031fe109f9471a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1394,13 +1394,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // That is, consider this case:\n             //\n             // ```\n-            // trait SubTrait: SuperTrait<int> { }\n+            // trait SubTrait: SuperTrait<i32> { }\n             // trait SuperTrait<A> { type T; }\n             //\n             // ... B: SubTrait<T = foo> ...\n             // ```\n             //\n-            // We want to produce `<B as SuperTrait<int>>::T == foo`.\n+            // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n             // Find any late-bound regions declared in `ty` that are not\n             // declared in the trait-ref. These are not well-formed."}, {"sha": "1d47e64630c18f9dcee66084bc60e10fd0dfe282", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -91,14 +91,14 @@ fn compare_predicate_entailment<'tcx>(\n \n     // This code is best explained by example. Consider a trait:\n     //\n-    //     trait Trait<'t,T> {\n-    //          fn method<'a,M>(t: &'t T, m: &'a M) -> Self;\n+    //     trait Trait<'t, T> {\n+    //         fn method<'a, M>(t: &'t T, m: &'a M) -> Self;\n     //     }\n     //\n     // And an impl:\n     //\n     //     impl<'i, 'j, U> Trait<'j, &'i U> for Foo {\n-    //          fn method<'b,N>(t: &'j &'i U, m: &'b N) -> Foo;\n+    //          fn method<'b, N>(t: &'j &'i U, m: &'b N) -> Foo;\n     //     }\n     //\n     // We wish to decide if those two method types are compatible.\n@@ -116,9 +116,9 @@ fn compare_predicate_entailment<'tcx>(\n     // regions (Note: but only early-bound regions, i.e., those\n     // declared on the impl or used in type parameter bounds).\n     //\n-    //     impl_to_skol_substs = {'i => 'i0, U => U0, N => N0 }\n+    //     impl_to_placeholder_substs = {'i => 'i0, U => U0, N => N0 }\n     //\n-    // Now we can apply skol_substs to the type of the impl method\n+    // Now we can apply placeholder_substs to the type of the impl method\n     // to yield a new function type in terms of our fresh, placeholder\n     // types:\n     //\n@@ -127,11 +127,11 @@ fn compare_predicate_entailment<'tcx>(\n     // We now want to extract and substitute the type of the *trait*\n     // method and compare it. To do so, we must create a compound\n     // substitution by combining trait_to_impl_substs and\n-    // impl_to_skol_substs, and also adding a mapping for the method\n+    // impl_to_placeholder_substs, and also adding a mapping for the method\n     // type parameters. We extend the mapping to also include\n     // the method parameters.\n     //\n-    //     trait_to_skol_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n+    //     trait_to_placeholder_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n     //\n     // Applying this to the trait method type yields:\n     //\n@@ -145,20 +145,20 @@ fn compare_predicate_entailment<'tcx>(\n     // satisfied by the implementation's method.\n     //\n     // We do this by creating a parameter environment which contains a\n-    // substitution corresponding to impl_to_skol_substs. We then build\n-    // trait_to_skol_substs and use it to convert the predicates contained\n+    // substitution corresponding to impl_to_placeholder_substs. We then build\n+    // trait_to_placeholder_substs and use it to convert the predicates contained\n     // in the trait_m.generics to the placeholder form.\n     //\n     // Finally we register each of these predicates as an obligation in\n     // a fresh FulfillmentCtxt, and invoke select_all_or_error.\n \n     // Create mapping from impl to placeholder.\n-    let impl_to_skol_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n+    let impl_to_placeholder_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n \n     // Create mapping from trait to placeholder.\n-    let trait_to_skol_substs =\n-        impl_to_skol_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n-    debug!(\"compare_impl_method: trait_to_skol_substs={:?}\", trait_to_skol_substs);\n+    let trait_to_placeholder_substs =\n+        impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n+    debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n@@ -194,7 +194,7 @@ fn compare_predicate_entailment<'tcx>(\n     // if all constraints hold.\n     hybrid_preds\n         .predicates\n-        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_skol_substs).predicates);\n+        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_placeholder_substs).predicates);\n \n     // Construct trait parameter environment and then shift it into the placeholder viewpoint.\n     // The key step here is to update the caller_bounds's predicates to be\n@@ -220,7 +220,7 @@ fn compare_predicate_entailment<'tcx>(\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n-        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_skol_substs);\n+        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n         let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n             impl_m_span,\n             infer::HigherRankedType,\n@@ -261,7 +261,7 @@ fn compare_predicate_entailment<'tcx>(\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, &tcx.fn_sig(trait_m.def_id));\n-        let trait_sig = trait_sig.subst(tcx, trait_to_skol_substs);\n+        let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, &trait_sig);\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::bind(trait_sig));"}, {"sha": "efd23894d02d159b8fcc4d80b53afe3664f90643", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///\n     /// ```\n     /// trait Foo { ... }\n-    /// impl Foo for Vec<int> { ... }\n+    /// impl Foo for Vec<i32> { ... }\n     /// impl Foo for Vec<usize> { ... }\n     /// ```\n     ///"}, {"sha": "ea47ae68ce7d36c63220b15c2140602a7765cc14", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -212,15 +212,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // errors in some cases, such as this one:\n         //\n         // ```\n-        // fn foo<'x>(x: &'x int) {\n+        // fn foo<'x>(x: &'x i32) {\n         //    let a = 1;\n         //    let mut z = x;\n         //    z = &a;\n         // }\n         // ```\n         //\n         // The reason we might get an error is that `z` might be\n-        // assigned a type like `&'x int`, and then we would have\n+        // assigned a type like `&'x i32`, and then we would have\n         // a problem when we try to assign `&a` to `z`, because\n         // the lifetime of `&a` (i.e., the enclosing block) is\n         // shorter than `'x`.\n@@ -229,11 +229,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // expected type here is whatever type the user wrote, not\n         // the initializer's type. In this case the user wrote\n         // nothing, so we are going to create a type variable `Z`.\n-        // Then we will assign the type of the initializer (`&'x\n-        // int`) as a subtype of `Z`: `&'x int <: Z`. And hence we\n-        // will instantiate `Z` as a type `&'0 int` where `'0` is\n-        // a fresh region variable, with the constraint that `'x :\n-        // '0`.  So basically we're all set.\n+        // Then we will assign the type of the initializer (`&'x i32`)\n+        // as a subtype of `Z`: `&'x i32 <: Z`. And hence we\n+        // will instantiate `Z` as a type `&'0 i32` where `'0` is\n+        // a fresh region variable, with the constraint that `'x : '0`.\n+        // So basically we're all set.\n         //\n         // Note that there are two tests to check that this remains true\n         // (`regions-reassign-{match,let}-bound-pointer.rs`)."}, {"sha": "de6fa3dbd4a89135d7a83f8843f49d148c51ce9e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -9,7 +9,6 @@\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(test)]\n-#![feature(vec_remove_item)]\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]"}, {"sha": "fc6ce5770338e6453ac0c64732dfed4f8a3c52f4", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -26,18 +26,10 @@ IMAGE_BASE:\n .Lxsave_clear:\n .org .+24\n .Lxsave_mxcsr:\n-    .int 0\n+    .short 0x1f80\n \n /*  We can store a bunch of data in the gap between MXCSR and the XSAVE header */\n \n-/* MXCSR initialization value for ABI */\n-.Lmxcsr_init:\n-    .int 0x1f80\n-\n-/* x87 FPU control word initialization value for ABI */\n-.Lfpucw_init:\n-    .int 0x037f\n-\n /*  The following symbols point at read-only data that will be filled in by the */\n /*  post-linker. */\n \n@@ -177,13 +169,17 @@ sgx_entry:\n     jz .Lskip_debug_init\n     mov %r10,%gs:tcsls_debug_panic_buf_ptr\n .Lskip_debug_init:\n+/*  reset cpu state */\n+    mov %rdx, %r10\n+    mov $-1, %rax\n+    mov $-1, %rdx\n+    xrstor .Lxsave_clear(%rip)\n+    mov %r10, %rdx\n+\n /*  check if returning from usercall */\n     mov %gs:tcsls_last_rsp,%r11\n     test %r11,%r11\n     jnz .Lusercall_ret\n-/*  reset user state */\n-    ldmxcsr .Lmxcsr_init(%rip)\n-    fldcw .Lfpucw_init(%rip)\n /*  setup stack */\n     mov %gs:tcsls_tos,%rsp /*  initially, RSP is not set to the correct value */\n                            /*  here. This is fixed below under \"adjust stack\". */"}, {"sha": "6e33cdd3c48269432bbcebab6fa723865157710a", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -428,6 +428,7 @@ mod tests {\n     // ignored there.\n     #[cfg_attr(target_arch = \"arm\", ignore)]\n     #[cfg_attr(target_arch = \"aarch64\", ignore)]\n+    #[cfg_attr(target_arch = \"riscv64\", ignore)]\n     fn test_process_mask() {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited."}, {"sha": "84fa35e01bb09898723aebd461201868eb89e810", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -811,11 +811,11 @@ mod tests {\n \n         // Right now for CI this test is run in an emulator, and apparently the\n         // aarch64 emulator's sense of time is that we're still living in the\n-        // 70s.\n+        // 70s. This is also true for riscv (also qemu)\n         //\n         // Otherwise let's assume that we're all running computers later than\n         // 2000.\n-        if !cfg!(target_arch = \"aarch64\") {\n+        if !cfg!(target_arch = \"aarch64\") && !cfg!(target_arch = \"riscv64\") {\n             assert!(a > thirty_years);\n         }\n "}, {"sha": "96f9158f9d39498b17a23d3445c326822e2bb8b4", "filename": "src/test/codegen/cfguard_checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_checks.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=checks\n+// compile-flags: -Z control-flow-guard=checks\n \n #![crate_type = \"lib\"]\n "}, {"sha": "1325ffc0f2595d3b76505cdb40daebf94ba77318", "filename": "src/test/codegen/cfguard_disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_disabled.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=disabled\n+// compile-flags: -Z control-flow-guard=no\n \n #![crate_type = \"lib\"]\n "}, {"sha": "ae1de4c4d26d543b6f6c7a1a309a9f04bf14064d", "filename": "src/test/codegen/cfguard_nochecks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcfguard_nochecks.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z control_flow_guard=nochecks\n+// compile-flags: -Z control-flow-guard=nochecks\n \n #![crate_type = \"lib\"]\n "}, {"sha": "fc993d63927c3d65774c770a63630755670984d0", "filename": "src/test/ui/const-generics/auxiliary/impl-const.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics)]\n+\n+pub struct Num<const N: usize>;\n+\n+// Braces around const expression causes crash\n+impl Num<{5}> {\n+    pub fn five(&self) {\n+    }\n+}"}, {"sha": "bda9ce8767d085dc69b7f7d859475deacd0da0d9", "filename": "src/test/ui/const-generics/issue-68104-print-stack-overflow.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:impl-const.rs\n+// run-pass\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+extern crate impl_const;\n+\n+use impl_const::*;\n+\n+pub fn main() {\n+    let n = Num::<5>;\n+    n.five();\n+}"}, {"sha": "f5961a11b1f1c4a741e4cff730f20ab3cbd152b5", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,4 +1,4 @@\n-error: `-Zsanitizer=leak` only works with targets: x86_64-apple-darwin, x86_64-unknown-linux-gnu\n+error: `-Zsanitizer=leak` only works with targets: aarch64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-unknown-linux-gnu\n \n error: aborting due to previous error\n "}, {"sha": "c00b0f02c3a90ab024565cbf2e2a91af3c6f1d4b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"compiletest\"]\n-#![feature(vec_remove_item)]\n #![deny(warnings)]\n // The `test` crate is the only unstable feature\n // allowed here, just to share similar code."}, {"sha": "0437ff8c9440a3cbfe8b59134c1491125584fe4e", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -82,16 +82,22 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"xcore\", \"xcore\"),\n ];\n \n-pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n+pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\n+    \"aarch64-fuchsia\",\n+    \"aarch64-unknown-linux-gnu\",\n+    \"x86_64-apple-darwin\",\n+    \"x86_64-fuchsia\",\n+    \"x86_64-unknown-linux-gnu\",\n+];\n \n pub const LSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n-pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\"x86_64-unknown-linux-gnu\"];\n+pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"];\n \n pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten"}, {"sha": "1fafe109d34e1e4719c818a1083f566b8c6d24ac", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 68, "deletions": 15, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455e46eae1a227d735091091144601b467e1565/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=f455e46eae1a227d735091091144601b467e1565", "patch": "@@ -107,13 +107,23 @@ fn start_android_emulator(server: &Path) {\n     Command::new(\"adb\").arg(\"shell\").arg(\"/data/tmp/testd\").spawn().unwrap();\n }\n \n-fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path) {\n+fn prepare_rootfs(target: &str, rootfs: &Path, server: &Path, rootfs_img: &Path) {\n+    t!(fs::copy(server, rootfs.join(\"testd\")));\n+\n+    match target {\n+        \"arm-unknown-linux-gnueabihf\" | \"aarch64-unknown-linux-gnu\" => {\n+            prepare_rootfs_cpio(rootfs, rootfs_img)\n+        }\n+        \"riscv64gc-unknown-linux-gnu\" => prepare_rootfs_ext4(rootfs, rootfs_img),\n+        _ => panic!(\"{} is not supported\", target),\n+    }\n+}\n+\n+fn prepare_rootfs_cpio(rootfs: &Path, rootfs_img: &Path) {\n     // Generate a new rootfs image now that we've updated the test server\n     // executable. This is the equivalent of:\n     //\n     //      find $rootfs -print 0 | cpio --null -o --format=newc > rootfs.img\n-    t!(fs::copy(server, rootfs.join(\"testd\")));\n-    let rootfs_img = tmpdir.join(\"rootfs.img\");\n     let mut cmd = Command::new(\"cpio\");\n     cmd.arg(\"--null\")\n         .arg(\"-o\")\n@@ -128,6 +138,38 @@ fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path\n     t!(io::copy(&mut child.stdout.take().unwrap(), &mut t!(File::create(&rootfs_img))));\n     assert!(t!(child.wait()).success());\n \n+    fn add_files(w: &mut dyn Write, root: &Path, cur: &Path) {\n+        for entry in t!(cur.read_dir()) {\n+            let entry = t!(entry);\n+            let path = entry.path();\n+            let to_print = path.strip_prefix(root).unwrap();\n+            t!(write!(w, \"{}\\u{0}\", to_print.to_str().unwrap()));\n+            if t!(entry.file_type()).is_dir() {\n+                add_files(w, root, &path);\n+            }\n+        }\n+    }\n+}\n+\n+fn prepare_rootfs_ext4(rootfs: &Path, rootfs_img: &Path) {\n+    let mut dd = Command::new(\"dd\");\n+    dd.arg(\"if=/dev/zero\")\n+        .arg(&format!(\"of={}\", rootfs_img.to_string_lossy()))\n+        .arg(\"bs=1M\")\n+        .arg(\"count=1024\");\n+    let mut dd_child = t!(dd.spawn());\n+    assert!(t!(dd_child.wait()).success());\n+\n+    let mut mkfs = Command::new(\"mkfs.ext4\");\n+    mkfs.arg(\"-d\").arg(rootfs).arg(rootfs_img);\n+    let mut mkfs_child = t!(mkfs.spawn());\n+    assert!(t!(mkfs_child.wait()).success());\n+}\n+\n+fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path) {\n+    let rootfs_img = &tmpdir.join(\"rootfs.img\");\n+    prepare_rootfs(target, rootfs, server, rootfs_img);\n+\n     // Start up the emulator, in the background\n     match target {\n         \"arm-unknown-linux-gnueabihf\" => {\n@@ -170,19 +212,30 @@ fn start_qemu_emulator(target: &str, rootfs: &Path, server: &Path, tmpdir: &Path\n                 .arg(\"virtio-net-device,netdev=net0,mac=00:00:00:00:00:00\");\n             t!(cmd.spawn());\n         }\n-        _ => panic!(\"cannot start emulator for: {}\" < target),\n-    }\n-\n-    fn add_files(w: &mut dyn Write, root: &Path, cur: &Path) {\n-        for entry in t!(cur.read_dir()) {\n-            let entry = t!(entry);\n-            let path = entry.path();\n-            let to_print = path.strip_prefix(root).unwrap();\n-            t!(write!(w, \"{}\\u{0}\", to_print.to_str().unwrap()));\n-            if t!(entry.file_type()).is_dir() {\n-                add_files(w, root, &path);\n-            }\n+        \"riscv64gc-unknown-linux-gnu\" => {\n+            let mut cmd = Command::new(\"qemu-system-riscv64\");\n+            cmd.arg(\"-nographic\")\n+                .arg(\"-machine\")\n+                .arg(\"virt\")\n+                .arg(\"-m\")\n+                .arg(\"1024\")\n+                .arg(\"-bios\")\n+                .arg(\"none\")\n+                .arg(\"-kernel\")\n+                .arg(\"/tmp/bbl\")\n+                .arg(\"-append\")\n+                .arg(\"quiet console=ttyS0 root=/dev/vda rw\")\n+                .arg(\"-netdev\")\n+                .arg(\"user,id=net0,hostfwd=tcp::12345-:12345\")\n+                .arg(\"-device\")\n+                .arg(\"virtio-net-device,netdev=net0,mac=00:00:00:00:00:00\")\n+                .arg(\"-device\")\n+                .arg(\"virtio-blk-device,drive=hd0\")\n+                .arg(\"-drive\")\n+                .arg(&format!(\"file={},format=raw,id=hd0\", &rootfs_img.to_string_lossy()));\n+            t!(cmd.spawn());\n         }\n+        _ => panic!(\"cannot start emulator for: {}\", target),\n     }\n }\n "}]}