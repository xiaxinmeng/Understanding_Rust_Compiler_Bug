{"sha": "104985b8275180ebe8811f8957a93740855995e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDk4NWI4Mjc1MTgwZWJlODgxMWY4OTU3YTkzNzQwODU1OTk1ZTA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-28T04:23:18Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T05:41:02Z"}, "message": "unreachable_pub lint: grab `pub` span from HIR rather than inferring it\n\nThis is a true fix for #50455, superior to the mere bandage offered\nin #50476.", "tree": {"sha": "cecbfeb99873c5f59896b6610d24abe0552a829e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecbfeb99873c5f59896b6610d24abe0552a829e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104985b8275180ebe8811f8957a93740855995e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104985b8275180ebe8811f8957a93740855995e0", "html_url": "https://github.com/rust-lang/rust/commit/104985b8275180ebe8811f8957a93740855995e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104985b8275180ebe8811f8957a93740855995e0/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae89129e1beefbe80cca4a13f6fd6e783653926", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae89129e1beefbe80cca4a13f6fd6e783653926", "html_url": "https://github.com/rust-lang/rust/commit/4ae89129e1beefbe80cca4a13f6fd6e783653926"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "a9ee1c8f17686003dcc19a3454ce9740934a9d66", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/104985b8275180ebe8811f8957a93740855995e0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104985b8275180ebe8811f8957a93740855995e0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=104985b8275180ebe8811f8957a93740855995e0", "patch": "@@ -1386,60 +1386,53 @@ impl LintPass for UnreachablePub {\n \n impl UnreachablePub {\n     fn perform_lint(&self, cx: &LateContext, what: &str, id: ast::NodeId,\n-                    vis: &hir::Visibility, span: Span, exportable: bool,\n-                    mut applicability: Applicability) {\n-        if !cx.access_levels.is_reachable(id) && vis.node.is_pub() {\n-            if span.ctxt().outer().expn_info().is_some() {\n-                applicability = Applicability::MaybeIncorrect;\n-            }\n-            let def_span = cx.tcx.sess.codemap().def_span(span);\n-            let mut err = cx.struct_span_lint(UNREACHABLE_PUB, def_span,\n-                                              &format!(\"unreachable `pub` {}\", what));\n-            // We are presuming that visibility is token at start of\n-            // declaration (can be macro variable rather than literal `pub`)\n-            let pub_span = cx.tcx.sess.codemap().span_until_char(def_span, ' ');\n-            let replacement = if cx.tcx.features().crate_visibility_modifier {\n-                \"crate\"\n-            } else {\n-                \"pub(crate)\"\n-            }.to_owned();\n-            err.span_suggestion_with_applicability(pub_span,\n-                                                   \"consider restricting its visibility\",\n-                                                   replacement,\n-                                                   applicability);\n-            if exportable {\n-                err.help(\"or consider exporting it for use by other crates\");\n-            }\n-            err.emit();\n+                    vis: &hir::Visibility, span: Span, exportable: bool) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        match vis.node {\n+            hir::VisibilityPublic if !cx.access_levels.is_reachable(id) => {\n+                if span.ctxt().outer().expn_info().is_some() {\n+                    applicability = Applicability::MaybeIncorrect;\n+                }\n+                let def_span = cx.tcx.sess.codemap().def_span(span);\n+                let mut err = cx.struct_span_lint(UNREACHABLE_PUB, def_span,\n+                                                  &format!(\"unreachable `pub` {}\", what));\n+                let replacement = if cx.tcx.features().crate_visibility_modifier {\n+                    \"crate\"\n+                } else {\n+                    \"pub(crate)\"\n+                }.to_owned();\n+\n+                err.span_suggestion_with_applicability(vis.span,\n+                                                       \"consider restricting its visibility\",\n+                                                       replacement,\n+                                                       applicability);\n+                if exportable {\n+                    err.help(\"or consider exporting it for use by other crates\");\n+                }\n+                err.emit();\n+            },\n+            _ => {}\n         }\n     }\n }\n \n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        let applicability = match item.node {\n-            // suggestion span-manipulation is inadequate for `pub use\n-            // module::{item}` (Issue #50455)\n-            hir::ItemUse(..) => Applicability::MaybeIncorrect,\n-            _ => Applicability::MachineApplicable,\n-        };\n-        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true, applicability);\n+        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext, foreign_item: &hir::ForeignItem) {\n         self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis,\n-                          foreign_item.span, true, Applicability::MachineApplicable);\n+                          foreign_item.span, true);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n-        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false,\n-                          Applicability::MachineApplicable);\n+        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n-        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false,\n-                          Applicability::MachineApplicable);\n+        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n     }\n }\n "}, {"sha": "1cbfbd211255dcef575ea683832093185fd28fe9", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/104985b8275180ebe8811f8957a93740855995e0/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104985b8275180ebe8811f8957a93740855995e0/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=104985b8275180ebe8811f8957a93740855995e0", "patch": "@@ -17,7 +17,9 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub-pub_crate.rs:27:24\n    |\n LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n-   |                        ^^^^ help: consider restricting its visibility: `pub(crate)`\n+   |     ---                ^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `pub(crate)`\n    |\n    = help: or consider exporting it for use by other crates\n \n@@ -121,12 +123,13 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub-pub_crate.rs:50:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n-   |                                               -----------^^^^^^^^^^^^^\n-   |                                               |\n-   |                                               help: consider restricting its visibility: `pub(crate)`\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n LL |     }\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n-   |     ---------------------------------------------------- in this macro invocation\n+   |     ----------------------------------------------------\n+   |     |                                    |\n+   |     |                                    help: consider restricting its visibility: `pub(crate)`\n+   |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n "}, {"sha": "25046055aa0247310a6d086251ab09a66d5fa5bc", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/104985b8275180ebe8811f8957a93740855995e0/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104985b8275180ebe8811f8957a93740855995e0/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=104985b8275180ebe8811f8957a93740855995e0", "patch": "@@ -17,7 +17,9 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:22:24\n    |\n LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n-   |                        ^^^^ help: consider restricting its visibility: `crate`\n+   |     ---                ^^^^\n+   |     |\n+   |     help: consider restricting its visibility: `crate`\n    |\n    = help: or consider exporting it for use by other crates\n \n@@ -121,12 +123,13 @@ warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:45:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n-   |                                               -----------^^^^^^^^^^^^^\n-   |                                               |\n-   |                                               help: consider restricting its visibility: `crate`\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n LL |     }\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n-   |     ---------------------------------------------------- in this macro invocation\n+   |     ----------------------------------------------------\n+   |     |                                    |\n+   |     |                                    help: consider restricting its visibility: `crate`\n+   |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n "}]}