{"sha": "5217007a2087d8364df8db91d503703c6b0be256", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMTcwMDdhMjA4N2Q4MzY0ZGY4ZGI5MWQ1MDM3MDNjNmIwYmUyNTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-23T02:19:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-09T21:44:24Z"}, "message": "Tweak output and add test cases", "tree": {"sha": "76de2d54f80f49d146180565e229252ebb7587f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76de2d54f80f49d146180565e229252ebb7587f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5217007a2087d8364df8db91d503703c6b0be256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5217007a2087d8364df8db91d503703c6b0be256", "html_url": "https://github.com/rust-lang/rust/commit/5217007a2087d8364df8db91d503703c6b0be256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5217007a2087d8364df8db91d503703c6b0be256/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "711760c8ec9dc431de43a0a72593abcdd74e0b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/711760c8ec9dc431de43a0a72593abcdd74e0b3e", "html_url": "https://github.com/rust-lang/rust/commit/711760c8ec9dc431de43a0a72593abcdd74e0b3e"}], "stats": {"total": 238, "additions": 222, "deletions": 16}, "files": [{"sha": "ca13d749e524ac0bf25c8f2b98392d6aaf6b151b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5217007a2087d8364df8db91d503703c6b0be256/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5217007a2087d8364df8db91d503703c6b0be256/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5217007a2087d8364df8db91d503703c6b0be256", "patch": "@@ -19,7 +19,7 @@ use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n use tracing::debug;\n \n@@ -446,12 +446,58 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             err.span_label(base_span, fallback_label);\n \n             if let PathSource::Trait(AliasPossibility::Maybe) = source {\n-                if let Some([start, .., end]) = self.diagnostic_metadata.current_trait_object {\n+                if let Some(bounds @ [_, .., _]) = self.diagnostic_metadata.current_trait_object {\n+                    let spans: Vec<Span> = bounds\n+                        .iter()\n+                        .map(|bound| bound.span())\n+                        .filter(|&sp| sp != base_span)\n+                        .collect();\n+\n+                    let start_span = bounds.iter().map(|bound| bound.span()).next().unwrap();\n+                    // `end_span` is the end of the poly trait ref (Foo + 'baz + Bar><)\n+                    let end_span = bounds.iter().map(|bound| bound.span()).last().unwrap();\n+                    // `last_bound_span` is the last bound of the poly trait ref (Foo + >'baz< + Bar)\n+                    let last_bound_span = spans.last().cloned().unwrap();\n+                    let mut multi_span: MultiSpan = spans.clone().into();\n+                    for sp in spans {\n+                        let msg = if sp == last_bound_span {\n+                            format!(\n+                                \"...because of {} bound{}\",\n+                                if bounds.len() <= 2 { \"this\" } else { \"these\" },\n+                                if bounds.len() <= 2 { \"\" } else { \"s\" },\n+                            )\n+                        } else {\n+                            String::new()\n+                        };\n+                        multi_span.push_span_label(sp, msg);\n+                    }\n+                    multi_span.push_span_label(\n+                        base_span,\n+                        \"expected this type to be a trait...\".to_string(),\n+                    );\n                     err.span_help(\n-                        start.span().to(end.span()),\n-                        \"`+` can be used to constrain a \\\"trait object\\\" type with lifetimes or \\\n-                         auto-traits, structs and enums can't be bound in that way\",\n+                        multi_span,\n+                        \"`+` is used to constrain a \\\"trait object\\\" type with lifetimes or \\\n+                         auto-traits; structs and enums can't be bound in that way\",\n                     );\n+                    if bounds.iter().all(|bound| match bound {\n+                        ast::GenericBound::Outlives(_) => true,\n+                        ast::GenericBound::Trait(tr, _) => tr.span == base_span,\n+                    }) {\n+                        let mut sugg = vec![];\n+                        if base_span != start_span {\n+                            sugg.push((start_span.until(base_span), String::new()));\n+                        }\n+                        if base_span != end_span {\n+                            sugg.push((base_span.shrink_to_hi().to(end_span), String::new()));\n+                        }\n+\n+                        err.multipart_suggestion(\n+                            \"if you meant to use a type and not a trait here, remove the bounds\",\n+                            sugg,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n             }\n             match self.diagnostic_metadata.current_let_binding {"}, {"sha": "8633e9d7a4cefb9b1e6a2628259052e3de3749af", "filename": "src/test/ui/traits/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5217007a2087d8364df8db91d503703c6b0be256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5217007a2087d8364df8db91d503703c6b0be256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.rs?ref=5217007a2087d8364df8db91d503703c6b0be256", "patch": "@@ -1,9 +1,38 @@\n+// We don't need those errors. Ideally we would silence them, but to do so we need to move the\n+// lint from being an early-lint during parsing to a late-lint, because it needs to be aware of\n+// the types involved.\n #![allow(bare_trait_objects)]\n \n struct Foo;\n \n fn foo(_x: Box<Foo + Send>) { } //~ ERROR expected trait, found struct `Foo`\n \n-type A<T> = Box<dyn Vec<T>>; //~ ERROR expected trait, found struct `Vec`\n+type TypeAlias<T> = Box<dyn Vec<T>>; //~ ERROR expected trait, found struct `Vec`\n \n-fn main() { }\n+struct A;\n+fn a() -> A + 'static { //~ ERROR expected trait, found\n+    A\n+}\n+fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) { //~ ERROR expected trait, found\n+    panic!()\n+}\n+fn c() -> 'static + A { //~ ERROR expected trait, found\n+    A\n+}\n+fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) { //~ ERROR expected trait, found\n+    panic!()\n+}\n+fn e() -> 'static + A + 'static { //~ ERROR expected trait, found\n+//~^ ERROR only a single explicit lifetime bound is permitted\n+    A\n+}\n+fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) { //~ ERROR expected trait, found\n+//~^ ERROR only a single explicit lifetime bound is permitted\n+    panic!()\n+}\n+struct Traitor;\n+trait Trait {}\n+fn g() -> Traitor + 'static { //~ ERROR expected trait, found struct `Traitor`\n+    A\n+}\n+fn main() {}"}, {"sha": "526dac2db46caddbc1dc7c495c6d155d2309c10b", "filename": "src/test/ui/traits/trait-bounds-not-on-struct.stderr", "status": "modified", "additions": 140, "deletions": 9, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/5217007a2087d8364df8db91d503703c6b0be256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5217007a2087d8364df8db91d503703c6b0be256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-struct.stderr?ref=5217007a2087d8364df8db91d503703c6b0be256", "patch": "@@ -1,21 +1,152 @@\n+error[E0226]: only a single explicit lifetime bound is permitted\n+  --> $DIR/trait-bounds-not-on-struct.rs:25:25\n+   |\n+LL | fn e() -> 'static + A + 'static {\n+   |                         ^^^^^^^\n+\n+error[E0226]: only a single explicit lifetime bound is permitted\n+  --> $DIR/trait-bounds-not-on-struct.rs:29:53\n+   |\n+LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n+   |                                                     ^^\n+\n error[E0404]: expected trait, found struct `Foo`\n-  --> $DIR/trait-bounds-not-on-struct.rs:5:16\n+  --> $DIR/trait-bounds-not-on-struct.rs:8:16\n    |\n LL | fn foo(_x: Box<Foo + Send>) { }\n    |                ^^^ not a trait\n    |\n-help: `+` can be used to constrain a \"trait object\" type with lifetimes or auto-traits, structs and enums can't be bound in that way\n-  --> $DIR/trait-bounds-not-on-struct.rs:5:16\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:8:22\n    |\n LL | fn foo(_x: Box<Foo + Send>) { }\n-   |                ^^^^^^^^^^\n+   |                ---   ^^^^ ...because of this bound\n+   |                |\n+   |                expected this type to be a trait...\n \n error[E0404]: expected trait, found struct `Vec`\n-  --> $DIR/trait-bounds-not-on-struct.rs:7:21\n+  --> $DIR/trait-bounds-not-on-struct.rs:10:29\n+   |\n+LL | type TypeAlias<T> = Box<dyn Vec<T>>;\n+   |                             ^^^^^^ not a trait\n+\n+error[E0404]: expected trait, found struct `A`\n+  --> $DIR/trait-bounds-not-on-struct.rs:13:11\n+   |\n+LL | fn a() -> A + 'static {\n+   |           ^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:13:15\n+   |\n+LL | fn a() -> A + 'static {\n+   |           -   ^^^^^^^ ...because of this bound\n+   |           |\n+   |           expected this type to be a trait...\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn a() -> A {\n+   |           --\n+\n+error[E0404]: expected trait, found enum `Result`\n+  --> $DIR/trait-bounds-not-on-struct.rs:16:34\n+   |\n+LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) {\n+   |                                  ^^^^^^^^^^^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:16:48\n+   |\n+LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) {\n+   |                                  -----------   ^^ ...because of this bound\n+   |                                  |\n+   |                                  expected this type to be a trait...\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn b<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n+   |                                            --\n+\n+error[E0404]: expected trait, found struct `A`\n+  --> $DIR/trait-bounds-not-on-struct.rs:19:21\n+   |\n+LL | fn c() -> 'static + A {\n+   |                     ^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:19:11\n+   |\n+LL | fn c() -> 'static + A {\n+   |           ^^^^^^^   - expected this type to be a trait...\n+   |           |\n+   |           ...because of this bound\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn c() -> A {\n+   |          --\n+\n+error[E0404]: expected trait, found enum `Result`\n+  --> $DIR/trait-bounds-not-on-struct.rs:22:39\n+   |\n+LL | fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) {\n+   |                                       ^^^^^^^^^^^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:22:34\n+   |\n+LL | fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) {\n+   |                                  ^^   ----------- expected this type to be a trait...\n+   |                                  |\n+   |                                  ...because of this bound\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn d<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n+   |                                 --\n+\n+error[E0404]: expected trait, found struct `A`\n+  --> $DIR/trait-bounds-not-on-struct.rs:25:21\n+   |\n+LL | fn e() -> 'static + A + 'static {\n+   |                     ^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:25:11\n+   |\n+LL | fn e() -> 'static + A + 'static {\n+   |           ^^^^^^^   -   ^^^^^^^ ...because of these bounds\n+   |                     |\n+   |                     expected this type to be a trait...\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn e() -> A {\n+   |          ---\n+\n+error[E0404]: expected trait, found enum `Result`\n+  --> $DIR/trait-bounds-not-on-struct.rs:29:39\n+   |\n+LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n+   |                                       ^^^^^^^^^^^ not a trait\n+   |\n+help: `+` is used to constrain a \"trait object\" type with lifetimes or auto-traits; structs and enums can't be bound in that way\n+  --> $DIR/trait-bounds-not-on-struct.rs:29:34\n+   |\n+LL | fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n+   |                                  ^^   -----------   ^^ ...because of these bounds\n+   |                                       |\n+   |                                       expected this type to be a trait...\n+help: if you meant to use a type and not a trait here, remove the bounds\n+   |\n+LL | fn f<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n+   |                                 --         --\n+\n+error[E0404]: expected trait, found struct `Traitor`\n+  --> $DIR/trait-bounds-not-on-struct.rs:35:11\n    |\n-LL | type A<T> = Box<dyn Vec<T>>;\n-   |                     ^^^^^^ not a trait\n+LL | trait Trait {}\n+   | ----------- similarly named trait `Trait` defined here\n+LL | fn g() -> Traitor + 'static {\n+   |           ^^^^^^^ help: a trait with a similar name exists: `Trait`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0404`.\n+Some errors have detailed explanations: E0226, E0404.\n+For more information about an error, try `rustc --explain E0226`."}]}