{"sha": "514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGM2YjZmZTNlMDczOGE1YTA2YmI1OTA3ZmI3YTZhOTgwMDdjY2I=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-13T20:18:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-13T20:28:55Z"}, "message": "rustc_resolve: don't treat uniform_paths canaries as ambiguities unless they resolve to distinct Def's.", "tree": {"sha": "e1ab343fb5991164c43782a2a97eef91462253dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ab343fb5991164c43782a2a97eef91462253dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "html_url": "https://github.com/rust-lang/rust/commit/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c36a1333c51e90fb952f1ff5f07d71709e548b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c36a1333c51e90fb952f1ff5f07d71709e548b", "html_url": "https://github.com/rust-lang/rust/commit/84c36a1333c51e90fb952f1ff5f07d71709e548b"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "e7d3a8ef661673f4d98afddd55d8ea9930e4cbcd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "patch": "@@ -730,7 +730,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n                 let crate_id =\n                     self.crate_loader.process_path_extern(name, span);\n-                Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))\n             } else {\n                 None\n             };\n@@ -741,30 +741,20 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 return;\n             }\n \n-            let result_filter = |result: &&NameBinding| {\n-                // Ignore canaries that resolve to an import of the same crate.\n-                // That is, we allow `use crate_name; use crate_name::foo;`.\n-                if let Some(def_id) = external_crate {\n-                    if let Some(module) = result.module() {\n-                        if module.normal_ancestor_id == def_id {\n-                            return false;\n-                        }\n-                    }\n+            {\n+                let mut all_results = external_crate.into_iter().chain(\n+                    results.module_scope.iter()\n+                        .chain(&results.block_scopes)\n+                        .map(|binding| binding.def())\n+                );\n+                let first = all_results.next().unwrap();\n+\n+                // An ambiguity requires more than one *distinct* possible resolution.\n+                let possible_resultions =\n+                    1 + all_results.filter(|&def| def != first).count();\n+                if possible_resultions <= 1 {\n+                    return;\n                 }\n-\n-                true\n-            };\n-            let module_scope = results.module_scope.filter(result_filter);\n-            let block_scopes = || {\n-                results.block_scopes.iter().cloned().filter(result_filter)\n-            };\n-\n-            // An ambiguity requires more than one possible resolution.\n-            let possible_resultions =\n-                (external_crate.is_some() as usize) +\n-                module_scope.into_iter().chain(block_scopes()).count();\n-            if possible_resultions <= 1 {\n-                return;\n             }\n \n             errors = true;\n@@ -777,7 +767,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 err.span_label(span,\n                     format!(\"can refer to external crate `::{}`\", name));\n             }\n-            if let Some(result) = module_scope {\n+            if let Some(result) = results.module_scope {\n                 if !suggestion_choices.is_empty() {\n                     suggestion_choices.push_str(\" or \");\n                 }\n@@ -790,7 +780,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                         format!(\"may refer to `self::{}` in the future\", name));\n                 }\n             }\n-            for result in block_scopes() {\n+            for result in results.block_scopes {\n                 err.span_label(result.span,\n                     format!(\"shadowed by block-scoped `{}`\", name));\n             }"}, {"sha": "1aaa1e70726c88295a352c3959f50b23bbd4fe37", "filename": "src/test/ui/run-pass/uniform-paths/basic-nested.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic-nested.rs?ref=514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "patch": "@@ -59,4 +59,12 @@ fn main() {\n     bar::io::stdout();\n     bar::std();\n     bar::std!();\n+\n+    {\n+        // Test that having `io` in a module scope and a non-module\n+        // scope is allowed, when both resolve to the same definition.\n+        use std::io;\n+        use io::stdout;\n+        stdout();\n+    }\n }"}, {"sha": "fbdac98d2582e9f3e87860e0c59617356c95ea49", "filename": "src/test/ui/run-pass/uniform-paths/basic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs?ref=514c6b6fe3e0738a5a06bb5907fb7a6a98007ccb", "patch": "@@ -33,4 +33,12 @@ fn main() {\n     Foo(());\n     std_io::stdout();\n     local_io(());\n+\n+    {\n+        // Test that having `std_io` in a module scope and a non-module\n+        // scope is allowed, when both resolve to the same definition.\n+        use std::io as std_io;\n+        use std_io::stdout;\n+        stdout();\n+    }\n }"}]}