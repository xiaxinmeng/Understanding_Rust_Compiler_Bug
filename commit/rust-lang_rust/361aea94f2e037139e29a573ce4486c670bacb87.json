{"sha": "361aea94f2e037139e29a573ce4486c670bacb87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWFlYTk0ZjJlMDM3MTM5ZTI5YTU3M2NlNDQ4NmM2NzBiYWNiODc=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T19:00:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-18T21:25:26Z"}, "message": "Fixing warnings for long and blank lines", "tree": {"sha": "7824c97c435a2d2a978729689b391a2389968e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7824c97c435a2d2a978729689b391a2389968e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361aea94f2e037139e29a573ce4486c670bacb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361aea94f2e037139e29a573ce4486c670bacb87", "html_url": "https://github.com/rust-lang/rust/commit/361aea94f2e037139e29a573ce4486c670bacb87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361aea94f2e037139e29a573ce4486c670bacb87/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333d268b3ef5846fc22c73c01f69a12bf11f6b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/333d268b3ef5846fc22c73c01f69a12bf11f6b9d", "html_url": "https://github.com/rust-lang/rust/commit/333d268b3ef5846fc22c73c01f69a12bf11f6b9d"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "fb8cc274217d211579e3d2ad80f553518e5902f6", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/361aea94f2e037139e29a573ce4486c670bacb87/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361aea94f2e037139e29a573ce4486c670bacb87/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=361aea94f2e037139e29a573ce4486c670bacb87", "patch": "@@ -135,7 +135,8 @@ pub pure fn escape_unicode(c: char) -> ~str {\n     let mut out = ~\"\\\\\";\n     unsafe {\n         str::push_str(&mut out, str::from_char(c));\n-        for uint::range(str::len(s), pad) |_i| { str::push_str(&mut out, ~\"0\"); }\n+        for uint::range(str::len(s), pad) |_i|\n+            { str::push_str(&mut out, ~\"0\"); }\n         str::push_str(&mut out, s);\n     }\n     move out"}, {"sha": "5db71b12185bc60e9f76e696988aa5647f05b7f7", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/361aea94f2e037139e29a573ce4486c670bacb87/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361aea94f2e037139e29a573ce4486c670bacb87/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=361aea94f2e037139e29a573ce4486c670bacb87", "patch": "@@ -15,23 +15,23 @@ impl &[u8]: ToBase64 {\n         unsafe {\n             let len = self.len();\n             str::reserve(&mut s, ((len + 3u) / 4u) * 3u);\n-    \n+\n             let mut i = 0u;\n-    \n+\n             while i < len - (len % 3u) {\n                 let n = (self[i] as uint) << 16u |\n                         (self[i + 1u] as uint) << 8u |\n                         (self[i + 2u] as uint);\n-    \n+\n                 // This 24-bit number gets separated into four 6-bit numbers.\n                 str::push_char(&mut s, chars[(n >> 18u) & 63u]);\n                 str::push_char(&mut s, chars[(n >> 12u) & 63u]);\n                 str::push_char(&mut s, chars[(n >> 6u) & 63u]);\n                 str::push_char(&mut s, chars[n & 63u]);\n-    \n+\n                 i += 3u;\n             }\n-    \n+\n             // Heh, would be cool if we knew this was exhaustive\n             // (the dream of bounded integer types)\n             match len % 3 {\n@@ -44,7 +44,8 @@ impl &[u8]: ToBase64 {\n                 str::push_char(&mut s, '=');\n               }\n               2 => {\n-                let n = (self[i] as uint) << 16u | (self[i + 1u] as uint) << 8u;\n+                let n = (self[i] as uint) << 16u |\n+                    (self[i + 1u] as uint) << 8u;\n                 str::push_char(&mut s, chars[(n >> 18u) & 63u]);\n                 str::push_char(&mut s, chars[(n >> 12u) & 63u]);\n                 str::push_char(&mut s, chars[(n >> 6u) & 63u]);\n@@ -85,11 +86,11 @@ impl ~[u8]: FromBase64 {\n             let mut i = 0u;\n             while i < len {\n                 let mut n = 0u;\n-    \n+\n                 for iter::repeat(4u) {\n                     let ch = self[i] as char;\n                     n <<= 6u;\n-    \n+\n                     if ch >= 'A' && ch <= 'Z' {\n                         n |= (ch as uint) - 0x41u;\n                     } else if ch >= 'a' && ch <= 'z' {\n@@ -116,10 +117,10 @@ impl ~[u8]: FromBase64 {\n                     } else {\n                         fail ~\"invalid base64 character\";\n                     }\n-    \n+\n                     i += 1u;\n                 };\n-    \n+\n                 r.push(((n >> 16u) & 0xFFu) as u8);\n                 r.push(((n >> 8u ) & 0xFFu) as u8);\n                 r.push(((n       ) & 0xFFu) as u8);"}]}