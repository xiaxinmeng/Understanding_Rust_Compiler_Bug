{"sha": "c0f7118342ccf77330c92d50222f90856730254b", "node_id": "C_kwDOAAsO6NoAKGMwZjcxMTgzNDJjY2Y3NzMzMGM5MmQ1MDIyMmY5MDg1NjczMDI1NGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-24T20:45:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-24T20:45:22Z"}, "message": "reorganize exposure code a bit", "tree": {"sha": "ff3ff65f6b94bbca3da4d9294e29030e4c26d84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3ff65f6b94bbca3da4d9294e29030e4c26d84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f7118342ccf77330c92d50222f90856730254b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f7118342ccf77330c92d50222f90856730254b", "html_url": "https://github.com/rust-lang/rust/commit/c0f7118342ccf77330c92d50222f90856730254b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f7118342ccf77330c92d50222f90856730254b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2deb9e5dae5b6d6b66105fda92e2d30e48a0cfab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2deb9e5dae5b6d6b66105fda92e2d30e48a0cfab", "html_url": "https://github.com/rust-lang/rust/commit/2deb9e5dae5b6d6b66105fda92e2d30e48a0cfab"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "279bf3d01d2e859d8275f13341e1c94a4b255105", "filename": "src/intptrcast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7118342ccf77330c92d50222f90856730254b/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7118342ccf77330c92d50222f90856730254b/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=c0f7118342ccf77330c92d50222f90856730254b", "patch": "@@ -101,14 +101,17 @@ impl<'mir, 'tcx> GlobalStateInner {\n         }\n     }\n \n-    pub fn expose_addr(ecx: &MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId) {\n+    pub fn expose_ptr(ecx: &mut MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId, sb: SbTag) {\n         trace!(\"Exposing allocation id {:?}\", alloc_id);\n \n-        let mut global_state = ecx.machine.intptrcast.borrow_mut();\n+        let global_state = ecx.machine.intptrcast.get_mut();\n         // In legacy and strict mode, we don't need this, so we can save some cycles\n         // by not tracking it.\n         if global_state.provenance_mode == ProvenanceMode::Permissive {\n             global_state.exposed.insert(alloc_id);\n+            if ecx.machine.stacked_borrows.is_some() {\n+                ecx.expose_tag(alloc_id, sb);\n+            }\n         }\n     }\n "}, {"sha": "3704a53851418d54f04819f14f3633ddfb7bcecf", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7118342ccf77330c92d50222f90856730254b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7118342ccf77330c92d50222f90856730254b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c0f7118342ccf77330c92d50222f90856730254b", "patch": "@@ -489,6 +489,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     type AllocExtra = AllocExtra;\n \n     type PointerTag = Tag;\n+    // `None` represents a wildcard pointer.\n     type TagExtra = Option<SbTag>;\n \n     type MemoryMap =\n@@ -709,22 +710,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     ) -> InterpResult<'tcx> {\n         match ptr.provenance {\n             Tag::Concrete(ConcreteTag { alloc_id, sb }) => {\n-                intptrcast::GlobalStateInner::expose_addr(ecx, alloc_id);\n-\n-                let (size, _) =\n-                    ecx.get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead).unwrap();\n-\n-                // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n-                if let Ok(alloc_extra) = ecx.get_alloc_extra(alloc_id) {\n-                    if let Some(stacked_borrows) = &alloc_extra.stacked_borrows {\n-                        stacked_borrows.ptr_exposed(\n-                            alloc_id,\n-                            sb,\n-                            alloc_range(Size::from_bytes(0), size),\n-                            ecx.machine.stacked_borrows.as_ref().unwrap(),\n-                        )?;\n-                    }\n-                }\n+                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb);\n             }\n             Tag::Wildcard => {\n                 // No need to do anything for wildcard pointers as"}, {"sha": "b66864b8302a890294f5f4f65a05aae98570a41a", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c0f7118342ccf77330c92d50222f90856730254b/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f7118342ccf77330c92d50222f90856730254b/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=c0f7118342ccf77330c92d50222f90856730254b", "patch": "@@ -117,7 +117,7 @@ pub struct Stacks {\n     stacks: RefCell<RangeMap<Stack>>,\n     /// Stores past operations on this allocation\n     history: RefCell<AllocHistory>,\n-    /// The set of tags that have been exposed\n+    /// The set of tags that have been exposed inside this allocation.\n     exposed_tags: RefCell<FxHashSet<SbTag>>,\n }\n \n@@ -708,26 +708,6 @@ impl Stacks {\n         stacks\n     }\n \n-    #[inline(always)]\n-    pub fn ptr_exposed<'tcx>(\n-        &self,\n-        alloc_id: AllocId,\n-        tag: SbTag,\n-        range: AllocRange,\n-        _state: &GlobalState,\n-    ) -> InterpResult<'tcx> {\n-        trace!(\n-            \"allocation exposed with tag {:?}: {:?}, size {}\",\n-            tag,\n-            Pointer::new(alloc_id, range.start),\n-            range.size.bytes()\n-        );\n-\n-        self.exposed_tags.borrow_mut().insert(tag);\n-\n-        Ok(())\n-    }\n-\n     #[inline(always)]\n     pub fn memory_read<'tcx>(\n         &self,\n@@ -1096,4 +1076,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         Ok(())\n     }\n+\n+    /// Mark the given tag as exposed. It was found on a pointer with the given AllocId.\n+    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) {\n+        let this = self.eval_context_mut();\n+\n+        // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n+        // This is okay because accessing them is UB anyway, no need for any Stacked Borrows checks.\n+        // FIXME: this catches `InterpError`, which we should not usually do.\n+        // We might need a proper fallible API from `memory.rs` to avoid this though.\n+        if let Ok((alloc_extra, _)) = this.get_alloc_extra_mut(alloc_id) {\n+            alloc_extra.stacked_borrows.as_mut().unwrap().exposed_tags.get_mut().insert(tag);\n+        }\n+    }\n }"}]}