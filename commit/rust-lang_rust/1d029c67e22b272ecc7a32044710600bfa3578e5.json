{"sha": "1d029c67e22b272ecc7a32044710600bfa3578e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMDI5YzY3ZTIyYjI3MmVjYzdhMzIwNDQ3MTA2MDBiZmEzNTc4ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T06:35:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T06:35:51Z"}, "message": "Auto merge of #57387 - euclio:nonstandard-style-suggestions, r=oli-obk\n\nUse structured suggestions for nonstandard style lints\n\nThis PR modifies the lints in the nonstandard_style group to use structured suggestions. Note that there's a bit of tricky span calculation going on for the `crate_name` attribute. It also simplifies the code a bit: I don't think the \"fallback\" suggestions for these lints can actually be triggered.\n\nFixes #48103.\nFixes #52414.", "tree": {"sha": "d3f7419b858bce0bff4919cb06d3c946d5c118b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f7419b858bce0bff4919cb06d3c946d5c118b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d029c67e22b272ecc7a32044710600bfa3578e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d029c67e22b272ecc7a32044710600bfa3578e5", "html_url": "https://github.com/rust-lang/rust/commit/1d029c67e22b272ecc7a32044710600bfa3578e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d029c67e22b272ecc7a32044710600bfa3578e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc0015f20d95a676359273259a6c07a85edf4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc0015f20d95a676359273259a6c07a85edf4b0", "html_url": "https://github.com/rust-lang/rust/commit/0bc0015f20d95a676359273259a6c07a85edf4b0"}, {"sha": "1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a", "html_url": "https://github.com/rust-lang/rust/commit/1b28f5aa668504fd84ce4ab7298f20696b9ffb5a"}], "stats": {"total": 745, "additions": 372, "deletions": 373}, "files": [{"sha": "f633703be56d409106b73e1c8b9913acdd64935b", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -42,13 +42,13 @@ use std::cmp;\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n-    /// #[xxx] pub async/const/extern \"Abi\" fn foo()\n-    ItemFn(Name, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n+    /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n+    ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n-    /// fn foo(&self)\n+    /// `fn foo(&self)`\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n \n-    /// |x, y| {}\n+    /// `|x, y| {}`\n     Closure(&'a [Attribute]),\n }\n \n@@ -472,7 +472,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_nested_body(body);\n         }\n         ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n-            visitor.visit_fn(FnKind::ItemFn(item.ident.name,\n+            visitor.visit_fn(FnKind::ItemFn(item.ident,\n                                             generics,\n                                             header,\n                                             &item.vis,"}, {"sha": "f61b8551927bbd659b680bb6ce1deee18868b914", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -15,7 +15,7 @@ use hir as ast;\n use hir::map;\n use hir::{Expr, FnDecl, Node};\n use hir::intravisit::FnKind;\n-use syntax::ast::{Attribute, Ident, Name, NodeId};\n+use syntax::ast::{Attribute, Ident, NodeId};\n use syntax_pos::Span;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n@@ -98,7 +98,7 @@ impl<'a> Code<'a> {\n /// These are all the components one can extract from a fn item for\n /// use when implementing FnLikeNode operations.\n struct ItemFnParts<'a> {\n-    name:     Name,\n+    ident:    Ident,\n     decl:     &'a ast::FnDecl,\n     header:   ast::FnHeader,\n     vis:      &'a ast::Visibility,\n@@ -200,7 +200,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.name, p.generics, p.header, p.vis, p.attrs)\n+            FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n@@ -228,7 +228,7 @@ impl<'a> FnLikeNode<'a> {\n                 ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.id,\n-                        name: i.ident.name,\n+                        ident: i.ident,\n                         decl: &decl,\n                         body: block,\n                         vis: &i.vis,"}, {"sha": "a4a3fa552e9881627a9342126b7eb57452784379", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 134, "deletions": 107, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -7,7 +7,8 @@ use lint::{EarlyContext, LateContext, LintContext, LintArray};\n use lint::{EarlyLintPass, LintPass, LateLintPass};\n use syntax::ast;\n use syntax::attr;\n-use syntax_pos::Span;\n+use syntax::errors::Applicability;\n+use syntax_pos::{BytePos, symbol::Ident, Span};\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {\n@@ -40,13 +41,12 @@ declare_lint! {\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n-    fn check_case(&self, cx: &EarlyContext, sort: &str, name: ast::Name, span: Span) {\n+    fn check_case(&self, cx: &EarlyContext, sort: &str, ident: &Ident) {\n         fn char_has_case(c: char) -> bool {\n             c.is_lowercase() || c.is_uppercase()\n         }\n \n-        fn is_camel_case(name: ast::Name) -> bool {\n-            let name = name.as_str();\n+        fn is_camel_case(name: &str) -> bool {\n             let name = name.trim_matches('_');\n             if name.is_empty() {\n                 return true;\n@@ -86,14 +86,20 @@ impl NonCamelCaseTypes {\n                 }).0\n         }\n \n+        let name = &ident.name.as_str();\n+\n         if !is_camel_case(name) {\n-            let c = to_camel_case(&name.as_str());\n-            let m = if c.is_empty() {\n-                format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, name)\n-            } else {\n-                format!(\"{} `{}` should have a camel case name such as `{}`\", sort, name, c)\n-            };\n-            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m);\n+            let c = to_camel_case(name);\n+\n+            let msg = format!(\"{} `{}` should have a camel case name\", sort, name);\n+            cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, &msg)\n+                .span_suggestion_with_applicability(\n+                    ident.span,\n+                    \"convert the identifier to camel case\",\n+                    c,\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n         }\n     }\n }\n@@ -122,19 +128,19 @@ impl EarlyLintPass for NonCamelCaseTypes {\n             ast::ItemKind::Ty(..) |\n             ast::ItemKind::Enum(..) |\n             ast::ItemKind::Struct(..) |\n-            ast::ItemKind::Union(..) => self.check_case(cx, \"type\", it.ident.name, it.span),\n-            ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", it.ident.name, it.span),\n+            ast::ItemKind::Union(..) => self.check_case(cx, \"type\", &it.ident),\n+            ast::ItemKind::Trait(..) => self.check_case(cx, \"trait\", &it.ident),\n             _ => (),\n         }\n     }\n \n     fn check_variant(&mut self, cx: &EarlyContext, v: &ast::Variant, _: &ast::Generics) {\n-        self.check_case(cx, \"variant\", v.node.ident.name, v.span);\n+        self.check_case(cx, \"variant\", &v.node.ident);\n     }\n \n     fn check_generic_param(&mut self, cx: &EarlyContext, param: &ast::GenericParam) {\n         if let ast::GenericParamKind::Type { .. } = param.kind {\n-            self.check_case(cx, \"type parameter\", param.ident.name, param.ident.span);\n+            self.check_case(cx, \"type parameter\", &param.ident);\n         }\n     }\n }\n@@ -179,7 +185,8 @@ impl NonSnakeCase {\n         words.join(\"_\")\n     }\n \n-    fn check_snake_case(&self, cx: &LateContext, sort: &str, name: &str, span: Option<Span>) {\n+    /// Checks if a given identifier is snake case, and reports a diagnostic if not.\n+    fn check_snake_case(&self, cx: &LateContext, sort: &str, ident: &Ident) {\n         fn is_snake_case(ident: &str) -> bool {\n             if ident.is_empty() {\n                 return true;\n@@ -201,20 +208,28 @@ impl NonSnakeCase {\n             })\n         }\n \n+        let name = &ident.name.as_str();\n+\n         if !is_snake_case(name) {\n             let sc = NonSnakeCase::to_snake_case(name);\n-            let msg = if sc != name {\n-                format!(\"{} `{}` should have a snake case name such as `{}`\",\n-                        sort,\n-                        name,\n-                        sc)\n+\n+            let msg = format!(\"{} `{}` should have a snake case name\", sort, name);\n+            let mut err = cx.struct_span_lint(NON_SNAKE_CASE, ident.span, &msg);\n+\n+            // We have a valid span in almost all cases, but we don't have one when linting a crate\n+            // name provided via the command line.\n+            if !ident.span.is_dummy() {\n+                err.span_suggestion_with_applicability(\n+                    ident.span,\n+                    \"convert the identifier to snake case\",\n+                    sc,\n+                    Applicability::MaybeIncorrect,\n+                );\n             } else {\n-                format!(\"{} `{}` should have a snake case name\", sort, name)\n-            };\n-            match span {\n-                Some(span) => cx.span_lint(NON_SNAKE_CASE, span, &msg),\n-                None => cx.lint(NON_SNAKE_CASE, &msg),\n+                err.help(&format!(\"convert the identifier to snake case: `{}`\", sc));\n             }\n+\n+            err.emit();\n         }\n     }\n }\n@@ -227,87 +242,111 @@ impl LintPass for NonSnakeCase {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_crate(&mut self, cx: &LateContext, cr: &hir::Crate) {\n-        let attr_crate_name = attr::find_by_name(&cr.attrs, \"crate_name\")\n-            .and_then(|at| at.value_str().map(|s| (at, s)));\n-        if let Some(ref name) = cx.tcx.sess.opts.crate_name {\n-            self.check_snake_case(cx, \"crate\", name, None);\n-        } else if let Some((attr, name)) = attr_crate_name {\n-            self.check_snake_case(cx, \"crate\", &name.as_str(), Some(attr.span));\n+        let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n+            Some(Ident::from_str(name))\n+        } else {\n+            attr::find_by_name(&cr.attrs, \"crate_name\")\n+                .and_then(|attr| attr.meta())\n+                .and_then(|meta| {\n+                    meta.name_value_literal().and_then(|lit| {\n+                        if let ast::LitKind::Str(name, ..) = lit.node {\n+                            // Discard the double quotes surrounding the literal.\n+                            let sp = cx.sess().source_map().span_to_snippet(lit.span)\n+                                .ok()\n+                                .and_then(|snippet| {\n+                                    let left = snippet.find('\"')?;\n+                                    let right = snippet.rfind('\"').map(|pos| snippet.len() - pos)?;\n+\n+                                    Some(\n+                                        lit.span\n+                                            .with_lo(lit.span.lo() + BytePos(left as u32 + 1))\n+                                            .with_hi(lit.span.hi() - BytePos(right as u32)),\n+                                    )\n+                                })\n+                                .unwrap_or_else(|| lit.span);\n+\n+                            Some(Ident::new(name, sp))\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                })\n+        };\n+\n+        if let Some(ident) = &crate_ident {\n+            self.check_snake_case(cx, \"crate\", ident);\n         }\n     }\n \n     fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n-        match param.kind {\n-            GenericParamKind::Lifetime { .. } => {\n-                let name = param.name.ident().as_str();\n-                self.check_snake_case(cx, \"lifetime\", &name, Some(param.span));\n-            }\n-            GenericParamKind::Type { .. } => {}\n+        if let GenericParamKind::Lifetime { .. } = param.kind {\n+            self.check_snake_case(cx, \"lifetime\", &param.name.ident());\n         }\n     }\n \n-    fn check_fn(&mut self,\n-                cx: &LateContext,\n-                fk: FnKind,\n-                _: &hir::FnDecl,\n-                _: &hir::Body,\n-                span: Span,\n-                id: ast::NodeId) {\n-        match fk {\n-            FnKind::Method(name, ..) => {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext,\n+        fk: FnKind,\n+        _: &hir::FnDecl,\n+        _: &hir::Body,\n+        _: Span,\n+        id: ast::NodeId,\n+    ) {\n+        match &fk {\n+            FnKind::Method(ident, ..) => {\n                 match method_context(cx, id) {\n                     MethodLateContext::PlainImpl => {\n-                        self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n+                        self.check_snake_case(cx, \"method\", ident);\n                     }\n                     MethodLateContext::TraitAutoImpl => {\n-                        self.check_snake_case(cx, \"trait method\", &name.as_str(), Some(span))\n+                        self.check_snake_case(cx, \"trait method\", ident);\n                     }\n                     _ => (),\n                 }\n             }\n-            FnKind::ItemFn(name, _, header, _, attrs) => {\n+            FnKind::ItemFn(ident, _, header, _, attrs) => {\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n-                if header.abi != Abi::Rust && attr::find_by_name(attrs, \"no_mangle\").is_some() {\n+                if header.abi != Abi::Rust && attr::contains_name(attrs, \"no_mangle\") {\n                     return;\n                 }\n-                self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))\n+                self.check_snake_case(cx, \"function\", ident);\n             }\n             FnKind::Closure(_) => (),\n         }\n     }\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if let hir::ItemKind::Mod(_) = it.node {\n-            self.check_snake_case(cx, \"module\", &it.ident.as_str(), Some(it.span));\n+            self.check_snake_case(cx, \"module\", &it.ident);\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(ref pnames)) = item.node {\n-            self.check_snake_case(cx,\n-                                  \"trait method\",\n-                                  &item.ident.as_str(),\n-                                  Some(item.span));\n+        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.node {\n+            self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n-                self.check_snake_case(cx, \"variable\", &param_name.as_str(), Some(param_name.span));\n+                self.check_snake_case(cx, \"variable\", param_name);\n             }\n         }\n     }\n \n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n-        if let &PatKind::Binding(_, _, ref ident, _) = &p.node {\n-            self.check_snake_case(cx, \"variable\", &ident.as_str(), Some(p.span));\n+        if let &PatKind::Binding(_, _, ident, _) = &p.node {\n+            self.check_snake_case(cx, \"variable\", &ident);\n         }\n     }\n \n-    fn check_struct_def(&mut self,\n-                        cx: &LateContext,\n-                        s: &hir::VariantData,\n-                        _: ast::Name,\n-                        _: &hir::Generics,\n-                        _: ast::NodeId) {\n+    fn check_struct_def(\n+        &mut self,\n+        cx: &LateContext,\n+        s: &hir::VariantData,\n+        _: ast::Name,\n+        _: &hir::Generics,\n+        _: ast::NodeId,\n+    ) {\n         for sf in s.fields() {\n-            self.check_snake_case(cx, \"structure field\", &sf.ident.as_str(), Some(sf.span));\n+            self.check_snake_case(cx, \"structure field\", &sf.ident);\n         }\n     }\n }\n@@ -322,21 +361,21 @@ declare_lint! {\n pub struct NonUpperCaseGlobals;\n \n impl NonUpperCaseGlobals {\n-    fn check_upper_case(cx: &LateContext, sort: &str, name: ast::Name, span: Span) {\n-        if name.as_str().chars().any(|c| c.is_lowercase()) {\n-            let uc = NonSnakeCase::to_snake_case(&name.as_str()).to_uppercase();\n-            if name != &*uc {\n-                cx.span_lint(NON_UPPER_CASE_GLOBALS,\n-                             span,\n-                             &format!(\"{} `{}` should have an upper case name such as `{}`\",\n-                                      sort,\n-                                      name,\n-                                      uc));\n-            } else {\n-                cx.span_lint(NON_UPPER_CASE_GLOBALS,\n-                             span,\n-                             &format!(\"{} `{}` should have an upper case name\", sort, name));\n-            }\n+    fn check_upper_case(cx: &LateContext, sort: &str, ident: &Ident) {\n+        let name = &ident.name.as_str();\n+\n+        if name.chars().any(|c| c.is_lowercase()) {\n+            let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();\n+\n+            let msg = format!(\"{} `{}` should have an upper case name\", sort, name);\n+            cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, &msg)\n+                .span_suggestion_with_applicability(\n+                    ident.span,\n+                    \"convert the identifier to upper case\",\n+                    uc,\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n         }\n     }\n }\n@@ -350,38 +389,25 @@ impl LintPass for NonUpperCaseGlobals {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemKind::Static(..) => {\n-                if attr::find_by_name(&it.attrs, \"no_mangle\").is_some() {\n-                    return;\n-                }\n-                NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", it.ident.name,\n-                                                      it.span);\n+            hir::ItemKind::Static(..) if !attr::contains_name(&it.attrs, \"no_mangle\") => {\n+                NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", &it.ident);\n             }\n             hir::ItemKind::Const(..) => {\n-                NonUpperCaseGlobals::check_upper_case(cx, \"constant\", it.ident.name,\n-                                                      it.span);\n+                NonUpperCaseGlobals::check_upper_case(cx, \"constant\", &it.ident);\n             }\n             _ => {}\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext, ti: &hir::TraitItem) {\n-        match ti.node {\n-            hir::TraitItemKind::Const(..) => {\n-                NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\",\n-                                                      ti.ident.name, ti.span);\n-            }\n-            _ => {}\n+        if let hir::TraitItemKind::Const(..) = ti.node {\n+            NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ti.ident);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext, ii: &hir::ImplItem) {\n-        match ii.node {\n-            hir::ImplItemKind::Const(..) => {\n-                NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\",\n-                                                      ii.ident.name, ii.span);\n-            }\n-            _ => {}\n+        if let hir::ImplItemKind::Const(..) = ii.node {\n+            NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n         }\n     }\n \n@@ -390,10 +416,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n         if let PatKind::Path(hir::QPath::Resolved(None, ref path)) = p.node {\n             if let Def::Const(..) = path.def {\n                 if path.segments.len() == 1 {\n-                    NonUpperCaseGlobals::check_upper_case(cx,\n-                                                          \"constant in pattern\",\n-                                                          path.segments[0].ident.name,\n-                                                          path.span);\n+                    NonUpperCaseGlobals::check_upper_case(\n+                        cx,\n+                        \"constant in pattern\",\n+                        &path.segments[0].ident\n+                    );\n                 }\n             }\n         }"}, {"sha": "fa6b825f2a2c21e8e4daa54aac69f5c3b7ae8167", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -117,16 +117,18 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n             ));\n         }\n     });\n-    let sym = Ident::with_empty_ctxt(Symbol::gensym(&format!(\n-        \"__register_diagnostic_{}\", code\n-    )));\n+\n+    let span = span.apply_mark(ecx.current_expansion.mark);\n+\n+    let sym = Ident::new(Symbol::gensym(&format!(\"__register_diagnostic_{}\", code)), span);\n+\n     MacEager::items(smallvec![\n         ecx.item_mod(\n             span,\n             span,\n             sym,\n-            Vec::new(),\n-            Vec::new()\n+            vec![],\n+            vec![],\n         )\n     ])\n }"}, {"sha": "a19d0458edd80309bc56365309c728046e4c4082", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -124,14 +124,14 @@ pub fn expand_test_or_bench(\n         ])\n     };\n \n-    let mut test_const = cx.item(sp, item.ident.gensym(),\n+    let mut test_const = cx.item(sp, ast::Ident::new(item.ident.name.gensymed(), sp),\n         vec![\n             // #[cfg(test)]\n             cx.attribute(attr_sp, cx.meta_list(attr_sp, Symbol::intern(\"cfg\"), vec![\n                 cx.meta_list_item_word(attr_sp, Symbol::intern(\"test\"))\n             ])),\n             // #[rustc_test_marker]\n-            cx.attribute(attr_sp, cx.meta_word(attr_sp, Symbol::intern(\"rustc_test_marker\")))\n+            cx.attribute(attr_sp, cx.meta_word(attr_sp, Symbol::intern(\"rustc_test_marker\"))),\n         ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),"}, {"sha": "51cfe7beade2dc467ffb4845a8e1f1f81585b68e", "filename": "src/test/ui/enable-unstable-lib-feature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenable-unstable-lib-feature.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: function `BOGUS` should have a snake case name such as `bogus`\n-  --> $DIR/enable-unstable-lib-feature.rs:12:1\n+error: function `BOGUS` should have a snake case name\n+  --> $DIR/enable-unstable-lib-feature.rs:12:8\n    |\n LL | pub fn BOGUS() { } //~ ERROR\n-   | ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^ help: convert the identifier to snake case: `bogus`\n    |\n note: lint level defined here\n   --> $DIR/enable-unstable-lib-feature.rs:6:9"}, {"sha": "8155514191ce35511f81bdae0a6f9a0f5602226f", "filename": "src/test/ui/expr_attr_paren_order.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr_attr_paren_order.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: variable `X` should have a snake case name such as `x`\n+error: variable `X` should have a snake case name\n   --> $DIR/expr_attr_paren_order.rs:19:17\n    |\n LL |             let X = 0; //~ ERROR snake case name\n-   |                 ^\n+   |                 ^ help: convert the identifier to snake case: `x`\n    |\n note: lint level defined here\n   --> $DIR/expr_attr_paren_order.rs:17:17"}, {"sha": "d30b95843f300a5c7b559f2158eb1795a53880d4", "filename": "src/test/ui/issues/issue-17718-const-naming.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n #![warn(unused)]\n-#[deny(warnings)]\n+#![deny(warnings)]\n \n const foo: isize = 3;\n-//~^ ERROR: should have an upper case name such as\n+//~^ ERROR: should have an upper case name\n //~^^ ERROR: constant item is never used\n \n fn main() {}"}, {"sha": "b92acecb83eca0ecb589d70ac252c73093509ed9", "filename": "src/test/ui/issues/issue-17718-const-naming.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -5,23 +5,23 @@ LL | const foo: isize = 3;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-17718-const-naming.rs:2:8\n+  --> $DIR/issue-17718-const-naming.rs:2:9\n    |\n-LL | #[deny(warnings)]\n-   |        ^^^^^^^^\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n    = note: #[deny(dead_code)] implied by #[deny(warnings)]\n \n-error: constant `foo` should have an upper case name such as `FOO`\n-  --> $DIR/issue-17718-const-naming.rs:4:1\n+error: constant `foo` should have an upper case name\n+  --> $DIR/issue-17718-const-naming.rs:4:7\n    |\n LL | const foo: isize = 3;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^ help: convert the identifier to upper case: `FOO`\n    |\n note: lint level defined here\n-  --> $DIR/issue-17718-const-naming.rs:2:8\n+  --> $DIR/issue-17718-const-naming.rs:2:9\n    |\n-LL | #[deny(warnings)]\n-   |        ^^^^^^^^\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n    = note: #[deny(non_upper_case_globals)] implied by #[deny(warnings)]\n \n error: aborting due to 2 previous errors"}, {"sha": "3250a41ee0ecdc940c459130a633181b6d3ab0f9", "filename": "src/test/ui/lint/command-line-lint-group-deny.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+error: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-deny.rs:4:9\n    |\n LL |     let _InappropriateCamelCasing = true; //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-D non-snake-case` implied by `-D bad-style`\n "}, {"sha": "39f6da400c4935b1e7da45567182519327951486", "filename": "src/test/ui/lint/command-line-lint-group-forbid.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+error: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-forbid.rs:4:9\n    |\n LL |     let _InappropriateCamelCasing = true; //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-F non-snake-case` implied by `-F bad-style`\n "}, {"sha": "42a198fe7e3e2bcfd41eb0383506f3a99235db83", "filename": "src/test/ui/lint/command-line-lint-group-warn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-warning: variable `_InappropriateCamelCasing` should have a snake case name such as `_inappropriate_camel_casing`\n+warning: variable `_InappropriateCamelCasing` should have a snake case name\n   --> $DIR/command-line-lint-group-warn.rs:5:9\n    |\n LL |     let _InappropriateCamelCasing = true;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `_inappropriate_camel_casing`\n    |\n    = note: `-W non-snake-case` implied by `-W bad-style`\n "}, {"sha": "f3c7d70054b777a4da352a603adc8cff81f95bda", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-warning: type `snake_case` should have a camel case name such as `SnakeCase`\n-  --> $DIR/lint-group-nonstandard-style.rs:22:9\n+warning: type `snake_case` should have a camel case name\n+  --> $DIR/lint-group-nonstandard-style.rs:22:16\n    |\n LL |         struct snake_case; //~ WARN should have a camel\n-   |         ^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^ help: convert the identifier to camel case: `SnakeCase`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:18:17\n@@ -11,11 +11,11 @@ LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n    = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n \n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:4:1\n+error: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:4:4\n    |\n LL | fn CamelCase() {} //~ ERROR should have a snake\n-   | ^^^^^^^^^^^^^^^^^\n+   |    ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:1:9\n@@ -24,11 +24,11 @@ LL | #![deny(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^\n    = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n \n-error: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:12:9\n+error: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:12:12\n    |\n LL |         fn CamelCase() {} //~ ERROR should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:10:14\n@@ -37,11 +37,11 @@ LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n    = note: #[forbid(non_snake_case)] implied by #[forbid(nonstandard_style)]\n \n-error: static variable `bad` should have an upper case name such as `BAD`\n-  --> $DIR/lint-group-nonstandard-style.rs:14:9\n+error: static variable `bad` should have an upper case name\n+  --> $DIR/lint-group-nonstandard-style.rs:14:16\n    |\n LL |         static bad: isize = 1; //~ ERROR should have an upper\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^ help: convert the identifier to upper case: `BAD`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:10:14\n@@ -50,11 +50,11 @@ LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n    = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n \n-warning: function `CamelCase` should have a snake case name such as `camel_case`\n-  --> $DIR/lint-group-nonstandard-style.rs:20:9\n+warning: function `CamelCase` should have a snake case name\n+  --> $DIR/lint-group-nonstandard-style.rs:20:12\n    |\n LL |         fn CamelCase() {} //~ WARN should have a snake\n-   |         ^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^ help: convert the identifier to snake case: `camel_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:18:17"}, {"sha": "8ca5af21630a216c0b67c2ff525391fc09d562cd", "filename": "src/test/ui/lint/lint-lowercase-static-const-pattern-rename.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern-rename.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,13 +1,12 @@\n-// run-pass\n+// compile-pass\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n-// This is similar to compile-fail/match-static-const-lc, except it\n+// This is similar to lint-lowercase-static-const-pattern.rs, except it\n // shows the expected usual workaround (choosing a different name for\n // the static definition) and also demonstrates that one can work\n // around this problem locally by renaming the constant in the `use`\n // form to an uppercase identifier that placates the lint.\n \n-\n #![deny(non_upper_case_globals)]\n \n pub const A : isize = 97;", "previous_filename": "src/test/run-pass/binding/match-static-const-rename.rs"}, {"sha": "c2e159eec1ba7cea77ee93a838a78c99cc418031", "filename": "src/test/ui/lint/lint-lowercase-static-const-pattern.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -9,7 +9,7 @@ pub const a : isize = 97;\n fn f() {\n     let r = match (0,0) {\n         (0, a) => 0,\n-        //~^ ERROR constant in pattern `a` should have an upper case name such as `A`\n+        //~^ ERROR constant in pattern `a` should have an upper case name\n         (x, y) => 1 + x + y,\n     };\n     assert_eq!(r, 1);\n@@ -24,7 +24,7 @@ fn g() {\n     use self::m::aha;\n     let r = match (0,0) {\n         (0, aha) => 0,\n-        //~^ ERROR constant in pattern `aha` should have an upper case name such as `AHA`\n+        //~^ ERROR constant in pattern `aha` should have an upper case name\n         (x, y)   => 1 + x + y,\n     };\n     assert_eq!(r, 1);\n@@ -38,7 +38,7 @@ fn h() {\n     use self::n::OKAY as not_okay;\n     let r = match (0,0) {\n         (0, not_okay) => 0,\n-//~^ ERROR constant in pattern `not_okay` should have an upper case name such as `NOT_OKAY`\n+//~^ ERROR constant in pattern `not_okay` should have an upper case name\n         (x, y)   => 1 + x + y,\n     };\n     assert_eq!(r, 1);", "previous_filename": "src/test/ui/match/match-static-const-lc.rs"}, {"sha": "d95510ccd2d257324043ea184bf3cd1e1aae033a", "filename": "src/test/ui/lint/lint-lowercase-static-const-pattern.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-lowercase-static-const-pattern.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -0,0 +1,26 @@\n+error: constant in pattern `a` should have an upper case name\n+  --> $DIR/lint-lowercase-static-const-pattern.rs:11:13\n+   |\n+LL |         (0, a) => 0,\n+   |             ^ help: convert the identifier to upper case: `A`\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-lowercase-static-const-pattern.rs:4:9\n+   |\n+LL | #![deny(non_upper_case_globals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: constant in pattern `aha` should have an upper case name\n+  --> $DIR/lint-lowercase-static-const-pattern.rs:26:13\n+   |\n+LL |         (0, aha) => 0,\n+   |             ^^^ help: convert the identifier to upper case: `AHA`\n+\n+error: constant in pattern `not_okay` should have an upper case name\n+  --> $DIR/lint-lowercase-static-const-pattern.rs:40:13\n+   |\n+LL |         (0, not_okay) => 0,\n+   |             ^^^^^^^^ help: convert the identifier to upper case: `NOT_OKAY`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bca1992605b77f655f62068e4504c1cf78bdc881", "filename": "src/test/ui/lint/lint-non-camel-case-types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -2,31 +2,31 @@\n #![allow(dead_code)]\n \n struct ONE_TWO_THREE;\n-//~^ ERROR type `ONE_TWO_THREE` should have a camel case name such as `OneTwoThree`\n+//~^ ERROR type `ONE_TWO_THREE` should have a camel case name\n \n-struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n+struct foo { //~ ERROR type `foo` should have a camel case name\n     bar: isize,\n }\n \n-enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n+enum foo2 { //~ ERROR type `foo2` should have a camel case name\n     Bar\n }\n \n-struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n+struct foo3 { //~ ERROR type `foo3` should have a camel case name\n     bar: isize\n }\n \n-type foo4 = isize; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n+type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n \n enum Foo5 {\n-    bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n+    bar //~ ERROR variant `bar` should have a camel case name\n }\n \n-trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n+trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n     fn dummy(&self) { }\n }\n \n-fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`\n+fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n \n #[repr(C)]\n struct foo7 {\n@@ -35,10 +35,10 @@ struct foo7 {\n \n struct X86_64;\n \n-struct X86__64; //~ ERROR type `X86__64` should have a camel case name such as `X86_64`\n+struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n \n-struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name such as `Abc123`\n+struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n \n-struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n+struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n \n fn main() { }"}, {"sha": "74f9a5993b8599a6280cf6a4309c573388596777", "filename": "src/test/ui/lint/lint-non-camel-case-types.stderr", "status": "modified", "additions": 41, "deletions": 49, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,82 +1,74 @@\n-error: type `ONE_TWO_THREE` should have a camel case name such as `OneTwoThree`\n-  --> $DIR/lint-non-camel-case-types.rs:4:1\n+error: type `ONE_TWO_THREE` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:4:8\n    |\n LL | struct ONE_TWO_THREE;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^ help: convert the identifier to camel case: `OneTwoThree`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-camel-case-types.rs:1:11\n    |\n LL | #![forbid(non_camel_case_types)]\n    |           ^^^^^^^^^^^^^^^^^^^^\n \n-error: type `foo` should have a camel case name such as `Foo`\n-  --> $DIR/lint-non-camel-case-types.rs:7:1\n+error: type `foo` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:7:8\n    |\n-LL | / struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n-LL | |     bar: isize,\n-LL | | }\n-   | |_^\n+LL | struct foo { //~ ERROR type `foo` should have a camel case name\n+   |        ^^^ help: convert the identifier to camel case: `Foo`\n \n-error: type `foo2` should have a camel case name such as `Foo2`\n-  --> $DIR/lint-non-camel-case-types.rs:11:1\n+error: type `foo2` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:11:6\n    |\n-LL | / enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n-LL | |     Bar\n-LL | | }\n-   | |_^\n+LL | enum foo2 { //~ ERROR type `foo2` should have a camel case name\n+   |      ^^^^ help: convert the identifier to camel case: `Foo2`\n \n-error: type `foo3` should have a camel case name such as `Foo3`\n-  --> $DIR/lint-non-camel-case-types.rs:15:1\n+error: type `foo3` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:15:8\n    |\n-LL | / struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n-LL | |     bar: isize\n-LL | | }\n-   | |_^\n+LL | struct foo3 { //~ ERROR type `foo3` should have a camel case name\n+   |        ^^^^ help: convert the identifier to camel case: `Foo3`\n \n-error: type `foo4` should have a camel case name such as `Foo4`\n-  --> $DIR/lint-non-camel-case-types.rs:19:1\n+error: type `foo4` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:19:6\n    |\n-LL | type foo4 = isize; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n+   |      ^^^^ help: convert the identifier to camel case: `Foo4`\n \n-error: variant `bar` should have a camel case name such as `Bar`\n+error: variant `bar` should have a camel case name\n   --> $DIR/lint-non-camel-case-types.rs:22:5\n    |\n-LL |     bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n-   |     ^^^\n+LL |     bar //~ ERROR variant `bar` should have a camel case name\n+   |     ^^^ help: convert the identifier to camel case: `Bar`\n \n-error: trait `foo6` should have a camel case name such as `Foo6`\n-  --> $DIR/lint-non-camel-case-types.rs:25:1\n+error: trait `foo6` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:25:7\n    |\n-LL | / trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n-LL | |     fn dummy(&self) { }\n-LL | | }\n-   | |_^\n+LL | trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n+   |       ^^^^ help: convert the identifier to camel case: `Foo6`\n \n-error: type parameter `ty` should have a camel case name such as `Ty`\n+error: type parameter `ty` should have a camel case name\n   --> $DIR/lint-non-camel-case-types.rs:29:6\n    |\n-LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`\n-   |      ^^\n+LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n+   |      ^^ help: convert the identifier to camel case: `Ty`\n \n-error: type `X86__64` should have a camel case name such as `X86_64`\n-  --> $DIR/lint-non-camel-case-types.rs:38:1\n+error: type `X86__64` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:38:8\n    |\n-LL | struct X86__64; //~ ERROR type `X86__64` should have a camel case name such as `X86_64`\n-   | ^^^^^^^^^^^^^^^\n+LL | struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n+   |        ^^^^^^^ help: convert the identifier to camel case: `X86_64`\n \n-error: type `Abc_123` should have a camel case name such as `Abc123`\n-  --> $DIR/lint-non-camel-case-types.rs:40:1\n+error: type `Abc_123` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:40:8\n    |\n-LL | struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name such as `Abc123`\n-   | ^^^^^^^^^^^^^^^\n+LL | struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n+   |        ^^^^^^^ help: convert the identifier to camel case: `Abc123`\n \n-error: type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n-  --> $DIR/lint-non-camel-case-types.rs:42:1\n+error: type `A1_b2_c3` should have a camel case name\n+  --> $DIR/lint-non-camel-case-types.rs:42:8\n    |\n-LL | struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n-   | ^^^^^^^^^^^^^^^^\n+LL | struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n+   |        ^^^^^^^^ help: convert the identifier to camel case: `A1B2C3`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "1f06b28398426508eee908022a2a4f912422e237", "filename": "src/test/ui/lint/lint-non-camel-case-variant.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-variant.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![deny(non_camel_case_types)]\n \n pub enum Foo {", "previous_filename": "src/test/run-pass/test-allow-non-camel-case-variant.rs"}, {"sha": "c2fdfb4fe421aad56096f0c1eeb90978a0caa4d9", "filename": "src/test/ui/lint/lint-non-camel-case-with-trailing-underscores.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-with-trailing-underscores.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![allow(dead_code)]\n // This is ok because we often use the trailing underscore to mean 'prime'\n ", "previous_filename": "src/test/run-pass/lint-non-camel-case-with-trailing-underscores.rs"}, {"sha": "1b763a9d868d91f1d590c58ce89c7803b55e56cd", "filename": "src/test/ui/lint/lint-non-snake-case-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --crate-name NonSnakeCase\n-// error-pattern: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+// error-pattern: crate `NonSnakeCase` should have a snake case name\n \n #![deny(non_snake_case)]\n "}, {"sha": "f3303191a06fe2ea85e22ae20bc33700dbfdc33c", "filename": "src/test/ui/lint/lint-non-snake-case-crate-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,10 +1,11 @@\n-error: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+error: crate `NonSnakeCase` should have a snake case name\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-crate-2.rs:4:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n+   = help: convert the identifier to snake case: `non_snake_case`\n \n error: aborting due to previous error\n "}, {"sha": "e4e84261a4ee9d062e01a148eb750a11a791459d", "filename": "src/test/ui/lint/lint-non-snake-case-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"NonSnakeCase\"]\n-//~^ ERROR crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n+//~^ ERROR crate `NonSnakeCase` should have a snake case name\n #![deny(non_snake_case)]\n \n fn main() {}"}, {"sha": "5cfd60a76e437e09cba67449580cb5a0b28cd84e", "filename": "src/test/ui/lint/lint-non-snake-case-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: crate `NonSnakeCase` should have a snake case name such as `non_snake_case`\n-  --> $DIR/lint-non-snake-case-crate.rs:1:1\n+error: crate `NonSnakeCase` should have a snake case name\n+  --> $DIR/lint-non-snake-case-crate.rs:1:18\n    |\n LL | #![crate_name = \"NonSnakeCase\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^ help: convert the identifier to snake case: `non_snake_case`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-crate.rs:3:9"}, {"sha": "fa64a9f980e75b51a070e2ac11b41aac5edc96cb", "filename": "src/test/ui/lint/lint-non-snake-case-functions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -5,28 +5,28 @@ struct Foo;\n \n impl Foo {\n     fn Foo_Method() {}\n-    //~^ ERROR method `Foo_Method` should have a snake case name such as `foo_method`\n+    //~^ ERROR method `Foo_Method` should have a snake case name\n \n     // Don't allow two underscores in a row\n     fn foo__method(&self) {}\n-    //~^ ERROR method `foo__method` should have a snake case name such as `foo_method`\n+    //~^ ERROR method `foo__method` should have a snake case name\n \n     pub fn xyZ(&mut self) {}\n-    //~^ ERROR method `xyZ` should have a snake case name such as `xy_z`\n+    //~^ ERROR method `xyZ` should have a snake case name\n \n     fn render_HTML() {}\n-    //~^ ERROR method `render_HTML` should have a snake case name such as `render_html`\n+    //~^ ERROR method `render_HTML` should have a snake case name\n }\n \n trait X {\n     fn ABC();\n-    //~^ ERROR trait method `ABC` should have a snake case name such as `abc`\n+    //~^ ERROR trait method `ABC` should have a snake case name\n \n     fn a_b_C(&self) {}\n-    //~^ ERROR trait method `a_b_C` should have a snake case name such as `a_b_c`\n+    //~^ ERROR trait method `a_b_C` should have a snake case name\n \n     fn something__else(&mut self);\n-    //~^ ERROR trait method `something__else` should have a snake case name such as `something_else`\n+    //~^ ERROR trait method `something__else` should have a snake case name\n }\n \n impl X for Foo {\n@@ -36,9 +36,9 @@ impl X for Foo {\n }\n \n fn Cookie() {}\n-//~^ ERROR function `Cookie` should have a snake case name such as `cookie`\n+//~^ ERROR function `Cookie` should have a snake case name\n \n pub fn bi_S_Cuit() {}\n-//~^ ERROR function `bi_S_Cuit` should have a snake case name such as `bi_s_cuit`\n+//~^ ERROR function `bi_S_Cuit` should have a snake case name\n \n fn main() { }"}, {"sha": "49cbfa941261055d30a2509083bdd64801d606f1", "filename": "src/test/ui/lint/lint-non-snake-case-functions.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-functions.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,62 +1,62 @@\n-error: method `Foo_Method` should have a snake case name such as `foo_method`\n-  --> $DIR/lint-non-snake-case-functions.rs:7:5\n+error: method `Foo_Method` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:7:8\n    |\n LL |     fn Foo_Method() {}\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^ help: convert the identifier to snake case: `foo_method`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-functions.rs:1:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n \n-error: method `foo__method` should have a snake case name such as `foo_method`\n-  --> $DIR/lint-non-snake-case-functions.rs:11:5\n+error: method `foo__method` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:11:8\n    |\n LL |     fn foo__method(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `foo_method`\n \n-error: method `xyZ` should have a snake case name such as `xy_z`\n-  --> $DIR/lint-non-snake-case-functions.rs:14:5\n+error: method `xyZ` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:14:12\n    |\n LL |     pub fn xyZ(&mut self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^ help: convert the identifier to snake case: `xy_z`\n \n-error: method `render_HTML` should have a snake case name such as `render_html`\n-  --> $DIR/lint-non-snake-case-functions.rs:17:5\n+error: method `render_HTML` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:17:8\n    |\n LL |     fn render_HTML() {}\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `render_html`\n \n-error: trait method `ABC` should have a snake case name such as `abc`\n-  --> $DIR/lint-non-snake-case-functions.rs:22:5\n+error: trait method `ABC` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:22:8\n    |\n LL |     fn ABC();\n-   |     ^^^^^^^^^\n+   |        ^^^ help: convert the identifier to snake case: `abc`\n \n-error: trait method `a_b_C` should have a snake case name such as `a_b_c`\n-  --> $DIR/lint-non-snake-case-functions.rs:25:5\n+error: trait method `a_b_C` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:25:8\n    |\n LL |     fn a_b_C(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^ help: convert the identifier to snake case: `a_b_c`\n \n-error: trait method `something__else` should have a snake case name such as `something_else`\n-  --> $DIR/lint-non-snake-case-functions.rs:28:5\n+error: trait method `something__else` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:28:8\n    |\n LL |     fn something__else(&mut self);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `something_else`\n \n-error: function `Cookie` should have a snake case name such as `cookie`\n-  --> $DIR/lint-non-snake-case-functions.rs:38:1\n+error: function `Cookie` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:38:4\n    |\n LL | fn Cookie() {}\n-   | ^^^^^^^^^^^^^^\n+   |    ^^^^^^ help: convert the identifier to snake case: `cookie`\n \n-error: function `bi_S_Cuit` should have a snake case name such as `bi_s_cuit`\n-  --> $DIR/lint-non-snake-case-functions.rs:41:1\n+error: function `bi_S_Cuit` should have a snake case name\n+  --> $DIR/lint-non-snake-case-functions.rs:41:8\n    |\n LL | pub fn bi_S_Cuit() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^ help: convert the identifier to snake case: `bi_s_cuit`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "de76d2dbef26adabe93cd941ac8719a79b49d3dc", "filename": "src/test/ui/lint/lint-non-snake-case-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,7 +1,7 @@\n #![deny(non_snake_case)]\n #![allow(dead_code)]\n \n-fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n+fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name\n     _: &'FooBar ()\n ) {}\n "}, {"sha": "970666ebcfdc3cd9ce3f7744b5c638de2d47086d", "filename": "src/test/ui/lint/lint-non-snake-case-lifetimes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-lifetimes.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,8 +1,8 @@\n-error: lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n+error: lifetime `'FooBar` should have a snake case name\n   --> $DIR/lint-non-snake-case-lifetimes.rs:4:6\n    |\n-LL | fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name such as `'foo_bar`\n-   |      ^^^^^^^\n+LL | fn f<'FooBar>( //~ ERROR lifetime `'FooBar` should have a snake case name\n+   |      ^^^^^^^ help: convert the identifier to snake case: `'foo_bar`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-lifetimes.rs:1:9"}, {"sha": "73f1233217225980422207fe92cbb19fd3a9f556", "filename": "src/test/ui/lint/lint-non-snake-case-modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,7 +1,7 @@\n #![deny(non_snake_case)]\n #![allow(dead_code)]\n \n-mod FooBar { //~ ERROR module `FooBar` should have a snake case name such as `foo_bar`\n+mod FooBar { //~ ERROR module `FooBar` should have a snake case name\n     pub struct S;\n }\n "}, {"sha": "651132e49d914c5dd0f55b996912729da1e8a7e8", "filename": "src/test/ui/lint/lint-non-snake-case-modules.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-modules.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,10 +1,8 @@\n-error: module `FooBar` should have a snake case name such as `foo_bar`\n-  --> $DIR/lint-non-snake-case-modules.rs:4:1\n+error: module `FooBar` should have a snake case name\n+  --> $DIR/lint-non-snake-case-modules.rs:4:5\n    |\n-LL | / mod FooBar { //~ ERROR module `FooBar` should have a snake case name such as `foo_bar`\n-LL | |     pub struct S;\n-LL | | }\n-   | |_^\n+LL | mod FooBar { //~ ERROR module `FooBar` should have a snake case name\n+   |     ^^^^^^ help: convert the identifier to snake case: `foo_bar`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-snake-case-modules.rs:1:9"}, {"sha": "9a6487d254239a12d49e9ca2cf7c2f459c029e4c", "filename": "src/test/ui/lint/lint-non-snake-case-no-lowercase-equivalent.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/snake-case-no-lowercase-equivalent.rs"}, {"sha": "7b0d9396077d040b63f4dd97f5c2bb6e6923b4bc", "filename": "src/test/ui/lint/lint-non-uppercase-associated-const.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -6,6 +6,6 @@ struct Foo;\n impl Foo {\n     const not_upper: bool = true;\n }\n-//~^^ ERROR associated constant `not_upper` should have an upper case name such as `NOT_UPPER`\n+//~^^ ERROR associated constant `not_upper` should have an upper case name\n \n fn main() {}", "previous_filename": "src/test/ui/associated-const/associated-const-upper-case-lint.rs"}, {"sha": "2185d5a0ab48f6a8118dc96a59b063196dc781bc", "filename": "src/test/ui/lint/lint-non-uppercase-associated-const.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-associated-const.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,11 +1,11 @@\n-error: associated constant `not_upper` should have an upper case name such as `NOT_UPPER`\n-  --> $DIR/associated-const-upper-case-lint.rs:7:5\n+error: associated constant `not_upper` should have an upper case name\n+  --> $DIR/lint-non-uppercase-associated-const.rs:7:11\n    |\n LL |     const not_upper: bool = true;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^ help: convert the identifier to upper case: `NOT_UPPER`\n    |\n note: lint level defined here\n-  --> $DIR/associated-const-upper-case-lint.rs:1:9\n+  --> $DIR/lint-non-uppercase-associated-const.rs:1:9\n    |\n LL | #![deny(non_upper_case_globals)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/associated-const/associated-const-upper-case-lint.stderr"}, {"sha": "5bd1430328b48e6c35e1640f8c5f22a87bddb564", "filename": "src/test/ui/lint/lint-non-uppercase-statics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,10 +1,9 @@\n #![forbid(non_upper_case_globals)]\n #![allow(dead_code)]\n \n-static foo: isize = 1; //~ ERROR static variable `foo` should have an upper case name such as `FOO`\n+static foo: isize = 1; //~ ERROR static variable `foo` should have an upper case name\n \n-static mut bar: isize = 1;\n-        //~^ ERROR static variable `bar` should have an upper case name such as `BAR`\n+static mut bar: isize = 1; //~ ERROR static variable `bar` should have an upper case name\n \n #[no_mangle]\n pub static extern_foo: isize = 1; // OK, because #[no_mangle] supersedes the warning"}, {"sha": "f5bba5f145de4877fc5d00602bdbf2e59f9f65cc", "filename": "src/test/ui/lint/lint-non-uppercase-statics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-uppercase-statics.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,20 +1,20 @@\n-error: static variable `foo` should have an upper case name such as `FOO`\n-  --> $DIR/lint-non-uppercase-statics.rs:4:1\n+error: static variable `foo` should have an upper case name\n+  --> $DIR/lint-non-uppercase-statics.rs:4:8\n    |\n-LL | static foo: isize = 1; //~ ERROR static variable `foo` should have an upper case name such as `FOO`\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | static foo: isize = 1; //~ ERROR static variable `foo` should have an upper case name\n+   |        ^^^ help: convert the identifier to upper case: `FOO`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-uppercase-statics.rs:1:11\n    |\n LL | #![forbid(non_upper_case_globals)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: static variable `bar` should have an upper case name such as `BAR`\n-  --> $DIR/lint-non-uppercase-statics.rs:6:1\n+error: static variable `bar` should have an upper case name\n+  --> $DIR/lint-non-uppercase-statics.rs:6:12\n    |\n-LL | static mut bar: isize = 1;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static mut bar: isize = 1; //~ ERROR static variable `bar` should have an upper case name\n+   |            ^^^ help: convert the identifier to upper case: `BAR`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a0b4130c3e92a9ee72f6c6cb3c32cdf1fb4f515a", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -1,6 +1,6 @@\n-//\n-#![allow(dead_code)]\n+// compile-pass\n \n+#![allow(dead_code)]\n \n #![forbid(non_camel_case_types)]\n #![forbid(non_upper_case_globals)]", "previous_filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs"}, {"sha": "86a39502a81cc62c8debf8bb685cc930ba7e2156", "filename": "src/test/ui/lint/lint-uppercase-variables.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -7,20 +7,20 @@ mod foo {\n }\n \n struct Something {\n-    X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n+    X: usize //~ ERROR structure field `X` should have a snake case name\n }\n \n-fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n+fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name\n     println!(\"{}\", Xx);\n }\n \n fn main() {\n-    let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n+    let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name\n     println!(\"{}\", Test);\n \n     match foo::Foo::Foo {\n         Foo => {}\n-//~^ ERROR variable `Foo` should have a snake case name such as `foo`\n+//~^ ERROR variable `Foo` should have a snake case name\n //~^^ WARN `Foo` is named the same as one of the variants of the type `foo::Foo`\n //~^^^ WARN unused variable: `Foo`\n     }"}, {"sha": "0741179c4a4ddf6170a48a1e6b534f41cd396a8b", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -17,35 +17,35 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n-error: structure field `X` should have a snake case name such as `x`\n+error: structure field `X` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:10:5\n    |\n-LL |     X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n-   |     ^^^^^^^^\n+LL |     X: usize //~ ERROR structure field `X` should have a snake case name\n+   |     ^ help: convert the identifier to snake case: `x`\n    |\n note: lint level defined here\n   --> $DIR/lint-uppercase-variables.rs:3:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n \n-error: variable `Xx` should have a snake case name such as `xx`\n+error: variable `Xx` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:13:9\n    |\n-LL | fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name such as `xx`\n-   |         ^^\n+LL | fn test(Xx: usize) { //~ ERROR variable `Xx` should have a snake case name\n+   |         ^^ help: convert the identifier to snake case: `xx`\n \n-error: variable `Test` should have a snake case name such as `test`\n+error: variable `Test` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:18:9\n    |\n-LL |     let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name such as `test`\n-   |         ^^^^\n+LL |     let Test: usize = 0; //~ ERROR variable `Test` should have a snake case name\n+   |         ^^^^ help: convert the identifier to snake case: `test`\n \n-error: variable `Foo` should have a snake case name such as `foo`\n+error: variable `Foo` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n LL |         Foo => {}\n-   |         ^^^\n+   |         ^^^ help: convert the identifier to snake case: `foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3bb1480a301095c12b3667c1d5e39e8ceffc0259", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -11,11 +11,11 @@ note: lint level defined here\n LL | #![warn(elided_lifetimes_in_paths,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: variable `Social_exchange_psychology` should have a snake case name such as `social_exchange_psychology`\n+warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9\n    |\n LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `social_exchange_psychology`\n    |\n    = note: people shouldn't have to change their usual style habits\n            to contribute to our project"}, {"sha": "1ddb831bf9de93dd21163b861eb1309888eaa843", "filename": "src/test/ui/match/match-static-const-lc.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0bc0015f20d95a676359273259a6c07a85edf4b0/src%2Ftest%2Fui%2Fmatch%2Fmatch-static-const-lc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bc0015f20d95a676359273259a6c07a85edf4b0/src%2Ftest%2Fui%2Fmatch%2Fmatch-static-const-lc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-static-const-lc.stderr?ref=0bc0015f20d95a676359273259a6c07a85edf4b0", "patch": "@@ -1,26 +0,0 @@\n-error: constant in pattern `a` should have an upper case name such as `A`\n-  --> $DIR/match-static-const-lc.rs:11:13\n-   |\n-LL |         (0, a) => 0,\n-   |             ^\n-   |\n-note: lint level defined here\n-  --> $DIR/match-static-const-lc.rs:4:9\n-   |\n-LL | #![deny(non_upper_case_globals)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: constant in pattern `aha` should have an upper case name such as `AHA`\n-  --> $DIR/match-static-const-lc.rs:26:13\n-   |\n-LL |         (0, aha) => 0,\n-   |             ^^^\n-\n-error: constant in pattern `not_okay` should have an upper case name such as `NOT_OKAY`\n-  --> $DIR/match-static-const-lc.rs:40:13\n-   |\n-LL |         (0, not_okay) => 0,\n-   |             ^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "9010770f1dc821dcf9877a315e3c1c2f3d8fbdd8", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n+#![allow(non_snake_case)]\n \n struct S;\n "}, {"sha": "61eaf9fcf109b01d782a96095a09581468d9c927", "filename": "src/test/ui/regions/regions-fn-subtyping-return-static.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0bc0015f20d95a676359273259a6c07a85edf4b0/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bc0015f20d95a676359273259a6c07a85edf4b0/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-fn-subtyping-return-static.stderr?ref=0bc0015f20d95a676359273259a6c07a85edf4b0", "patch": "@@ -1,26 +0,0 @@\n-warning: function `want_F` should have a snake case name such as `want_f`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:18:1\n-   |\n-LL | fn want_F(f: F) { }\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(non_snake_case)] on by default\n-\n-warning: function `want_G` should have a snake case name such as `want_g`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:22:1\n-   |\n-LL | fn want_G(f: G) { }\n-   | ^^^^^^^^^^^^^^^^^^^\n-\n-warning: function `supply_F` should have a snake case name such as `supply_f`\n-  --> $DIR/regions-fn-subtyping-return-static.rs:39:1\n-   |\n-LL | / fn supply_F() {\n-LL | |     want_F(foo);\n-LL | |\n-LL | |     want_F(bar);\n-LL | |\n-LL | |     want_F(baz);\n-LL | | }\n-   | |_^\n-"}, {"sha": "f052f866c901b863b13948e30485cc693dc3f95c", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -11,17 +11,17 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n-warning: variable `theTwo` should have a snake case name such as `the_two`\n+warning: variable `theTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:12:9\n    |\n LL |     let theTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^\n+   |         ^^^^^^ help: convert the identifier to snake case: `the_two`\n    |\n    = note: #[warn(non_snake_case)] on by default\n \n-warning: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n+warning: variable `theOtherTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:13:9\n    |\n LL |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^^^^^^\n+   |         ^^^^^^^^^^^ help: convert the identifier to snake case: `the_other_two`\n "}, {"sha": "e601c6e455544516948d72d06c02b909e13b9fd7", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -3,7 +3,7 @@\n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-       //~^ WARN type parameter `\u03b3` should have a camel case name such as `\u0393`\n+       //~^ WARN type parameter `\u03b3` should have a camel case name\n >() {}\n \n struct X {"}, {"sha": "268dd99d06031ad10e7f74a51ec2f0ac40a33e4f", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d029c67e22b272ecc7a32044710600bfa3578e5/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=1d029c67e22b272ecc7a32044710600bfa3578e5", "patch": "@@ -30,11 +30,11 @@ LL |     let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-warning: type parameter `\u03b3` should have a camel case name such as `\u0393`\n+warning: type parameter `\u03b3` should have a camel case name\n   --> $DIR/utf8_idents.rs:5:5\n    |\n LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-   |     ^\n+   |     ^ help: convert the identifier to camel case: `\u0393`\n    |\n    = note: #[warn(non_camel_case_types)] on by default\n "}]}