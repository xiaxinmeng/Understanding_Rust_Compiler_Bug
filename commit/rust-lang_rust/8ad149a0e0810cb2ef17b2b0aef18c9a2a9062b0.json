{"sha": "8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDE0OWEwZTA4MTBjYjJlZjE3YjJiMGFlZjE4YzlhMmE5MDYyYjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-22T12:45:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-04T05:29:06Z"}, "message": "typeck/type_of: only early-bound and (free) late-bound lifetimes are parameters.", "tree": {"sha": "b00340d617620bc1e727f5b525936d94e24d225c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00340d617620bc1e727f5b525936d94e24d225c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0", "html_url": "https://github.com/rust-lang/rust/commit/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7999b4f3511c2fda3c7c8955b6d03573868139", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7999b4f3511c2fda3c7c8955b6d03573868139", "html_url": "https://github.com/rust-lang/rust/commit/ea7999b4f3511c2fda3c7c8955b6d03573868139"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "d45c82700689a169d5a257cdda96a1a3f45ac43e", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=8ad149a0e0810cb2ef17b2b0aef18c9a2a9062b0", "patch": "@@ -411,7 +411,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 for (i, arg) in substs.iter().enumerate() {\n                     let arg_is_param = match arg.unpack() {\n                         GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n-                        GenericArgKind::Lifetime(lt) => !matches!(lt, ty::ReStatic),\n+                        GenericArgKind::Lifetime(lt) => {\n+                            matches!(lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n+                        }\n                         GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n                     };\n "}]}