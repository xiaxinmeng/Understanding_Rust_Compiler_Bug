{"sha": "5f4837ad6ac5ceb7277796a817db35b137da4813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDgzN2FkNmFjNWNlYjcyNzc3OTZhODE3ZGIzNWIxMzdkYTQ4MTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-06T01:47:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-07T06:39:56Z"}, "message": "core: Start on a stack walker", "tree": {"sha": "a14bccf3d245451657e6a6d73269f48fd477dad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14bccf3d245451657e6a6d73269f48fd477dad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4837ad6ac5ceb7277796a817db35b137da4813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4837ad6ac5ceb7277796a817db35b137da4813", "html_url": "https://github.com/rust-lang/rust/commit/5f4837ad6ac5ceb7277796a817db35b137da4813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4837ad6ac5ceb7277796a817db35b137da4813/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231097960c80e0968d90b5634b3f663989130bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/231097960c80e0968d90b5634b3f663989130bac", "html_url": "https://github.com/rust-lang/rust/commit/231097960c80e0968d90b5634b3f663989130bac"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "5997c1d063216102576120ee509fce2c4c5ad290", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5f4837ad6ac5ceb7277796a817db35b137da4813", "patch": "@@ -201,7 +201,7 @@ mod extfmt;\n mod unicode;\n mod priv;\n mod cmath;\n-\n+mod stackwalk;\n \n // Local Variables:\n // mode: rust;"}, {"sha": "f1072d79a3aa6802433e2be1e0b09807281c9fb8", "filename": "src/libcore/stackwalk.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=5f4837ad6ac5ceb7277796a817db35b137da4813", "patch": "@@ -0,0 +1,54 @@\n+import libc::uintptr_t;\n+\n+class frame {\n+    let fp: uintptr_t;\n+\n+    new(fp: uintptr_t) {\n+        self.fp = fp;\n+    }\n+}\n+\n+fn walk_stack(visit: fn(frame) -> bool) {\n+    frame_address { |frame_pointer|\n+        let frame_address = unsafe {\n+            unsafe::reinterpret_cast(frame_pointer)\n+        };\n+        visit(frame(frame_address));\n+    }\n+}\n+\n+#[test]\n+fn test() {\n+    for walk_stack { |frame|\n+        #debug(\"frame: %x\", frame.fp);\n+        // breakpoint();\n+    }\n+}\n+\n+fn breakpoint() {\n+    rustrt::rust_dbg_breakpoint()\n+}\n+\n+fn frame_address(f: fn(*u8)) {\n+    rusti::frame_address(f)\n+}\n+\n+native mod rustrt {\n+    fn rust_dbg_breakpoint();\n+}\n+\n+// FIXME: Unconditionalize after snapshot\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n+    fn frame_address(f: fn(*u8));\n+}\n+\n+#[cfg(stage0)]\n+mod rusti {\n+    fn frame_address(_f: fn(*u8)) {\n+        fail;\n+    }\n+}"}, {"sha": "60b25410212f964ebd008a8156c16dd2a05dd43a", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=5f4837ad6ac5ceb7277796a817db35b137da4813", "patch": "@@ -875,7 +875,27 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n       \"frame_address\" {\n         let frameaddress = ccx.intrinsics.get(\"llvm.frameaddress\");\n         let frameaddress_val = Call(bcx, frameaddress, [C_i32(0i32)]);\n-        Store(bcx, frameaddress_val, fcx.llretptr);\n+        let fty = ty::mk_fn(bcx.tcx(), {\n+            purity: ast::impure_fn,\n+            proto: ast::proto_any,\n+            inputs: [{\n+                mode: ast::expl(ast::by_val),\n+                ty: ty::mk_imm_ptr(\n+                    bcx.tcx(),\n+                    ty::mk_mach_uint(bcx.tcx(), ast::ty_u8))\n+            }],\n+            output: ty::mk_nil(bcx.tcx()),\n+            ret_style: ast::return_val,\n+            constraints: []\n+        });\n+        bcx = trans_call_inner(bcx, none, fty, ty::mk_nil(bcx.tcx()),\n+                               { |bcx|\n+                                   lval_no_env(\n+                                       bcx,\n+                                       get_param(decl, first_real_arg),\n+                                       temporary)\n+                               },\n+                               arg_vals([frameaddress_val]), ignore);\n       }\n     }\n     build_return(bcx);"}, {"sha": "22d31a8fe727440ecd4fd46f83305802003e4003", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=5f4837ad6ac5ceb7277796a817db35b137da4813", "patch": "@@ -2318,7 +2318,20 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n         (1u, [arg(ast::by_ref, visitor_iface)], ty::mk_nil(tcx))\n       }\n       \"frame_address\" {\n-        (0u, [], ty::mk_imm_ptr(tcx, ty::mk_mach_uint(tcx, ast::ty_u8)))\n+        let fty = ty::mk_fn(ccx.tcx, {\n+            purity: ast::impure_fn,\n+            proto: ast::proto_any,\n+            inputs: [{\n+                mode: ast::expl(ast::by_val),\n+                ty: ty::mk_imm_ptr(\n+                    ccx.tcx,\n+                    ty::mk_mach_uint(ccx.tcx, ast::ty_u8))\n+            }],\n+            output: ty::mk_nil(ccx.tcx),\n+            ret_style: ast::return_val,\n+            constraints: []\n+        });\n+        (0u, [arg(ast::by_ref, fty)], ty::mk_nil(tcx))\n       }\n       other {\n         tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +"}, {"sha": "84b2a1c995d6e9bbfe9955645a656a5455e80aeb", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4837ad6ac5ceb7277796a817db35b137da4813/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=5f4837ad6ac5ceb7277796a817db35b137da4813", "patch": "@@ -1,8 +1,10 @@\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n-    fn frame_address() -> *u8;\n+    fn frame_address(f: fn(*u8));\n }\n \n fn main() {\n-    assert rusti::frame_address().is_not_null();\n+    rusti::frame_address {|addr|\n+        assert addr.is_not_null();\n+    }\n }"}]}