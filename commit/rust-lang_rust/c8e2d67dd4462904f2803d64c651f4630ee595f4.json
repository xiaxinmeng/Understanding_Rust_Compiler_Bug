{"sha": "c8e2d67dd4462904f2803d64c651f4630ee595f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTJkNjdkZDQ0NjI5MDRmMjgwM2Q2NGM2NTFmNDYzMGVlNTk1ZjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T16:13:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T16:13:58Z"}, "message": "Merge #5594 #5604 #5605\n\n5594: Update sysroot crates r=jonas-schievink a=lnicola\n\n\n\n5604: Rename EnumVariant -> Variant r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\n5605: fmt r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "867377739e0535d4e204cea973c5831b107fbf07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867377739e0535d4e204cea973c5831b107fbf07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e2d67dd4462904f2803d64c651f4630ee595f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIvHGCRBK7hj4Ov3rIwAAdHIIAILdiS7llvmVtmwh2wMZxcJr\ndmOnOlPLCfgCnfMpSWmvyKVNRP8SkbnJoeQauy/rmeoKA52tLxxpGfyucsiNIcPw\nVN6bbRZcjcO8gkA3Ztbpxo01sJ9eYMcmi2MS7IxIMUyJpNQBWtCnTZhoZt1w/lJX\nubfE8zrpLe08QjG9qjF11jRRteh6T7vxLTlGjI6CzpjVPA0jtsgV+3MnsCwx81r9\nd3+u01VxBYPqKKasVw25I1uS+y/3I79/0pNyZlgD7uO6D5AnB7mTlFajxL9V6TEy\nKdIhbRyU9ZRh+gcoNU0c3V6Z/M2lmgb/09DsWSRiwGrPDrcX4JioDSP+tOsxRxI=\n=inpW\n-----END PGP SIGNATURE-----\n", "payload": "tree 867377739e0535d4e204cea973c5831b107fbf07\nparent 8de0eb904baf1fa261a7825402bb3adf0c23b843\nparent afd02461bcb9bccd9372352dc9115209753fee4c\nparent 6b25f640a6ad8e2322b5cc0664223b742459336d\nparent ba71f05438a93991aff6970488a720c90774d35b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596125638 +0000\ncommitter GitHub <noreply@github.com> 1596125638 +0000\n\nMerge #5594 #5604 #5605\n\n5594: Update sysroot crates r=jonas-schievink a=lnicola\n\n\n\n5604: Rename EnumVariant -> Variant r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\n5605: fmt r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e2d67dd4462904f2803d64c651f4630ee595f4", "html_url": "https://github.com/rust-lang/rust/commit/c8e2d67dd4462904f2803d64c651f4630ee595f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e2d67dd4462904f2803d64c651f4630ee595f4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de0eb904baf1fa261a7825402bb3adf0c23b843", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de0eb904baf1fa261a7825402bb3adf0c23b843", "html_url": "https://github.com/rust-lang/rust/commit/8de0eb904baf1fa261a7825402bb3adf0c23b843"}, {"sha": "afd02461bcb9bccd9372352dc9115209753fee4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd02461bcb9bccd9372352dc9115209753fee4c", "html_url": "https://github.com/rust-lang/rust/commit/afd02461bcb9bccd9372352dc9115209753fee4c"}, {"sha": "6b25f640a6ad8e2322b5cc0664223b742459336d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b25f640a6ad8e2322b5cc0664223b742459336d", "html_url": "https://github.com/rust-lang/rust/commit/6b25f640a6ad8e2322b5cc0664223b742459336d"}, {"sha": "ba71f05438a93991aff6970488a720c90774d35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba71f05438a93991aff6970488a720c90774d35b", "html_url": "https://github.com/rust-lang/rust/commit/ba71f05438a93991aff6970488a720c90774d35b"}], "stats": {"total": 498, "additions": 242, "deletions": 256}, "files": [{"sha": "1ab176c26128d83b71239cc563743832bf8759e6", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -120,7 +120,7 @@ fn add_missing_impl_members_inner(\n         match item {\n             ast::AssocItem::Fn(def) => def.name(),\n             ast::AssocItem::TypeAlias(def) => def.name(),\n-            ast::AssocItem::ConstDef(def) => def.name(),\n+            ast::AssocItem::Const(def) => def.name(),\n             ast::AssocItem::MacroCall(_) => None,\n         }\n         .map(|it| it.text().clone())\n@@ -131,7 +131,7 @@ fn add_missing_impl_members_inner(\n         .map(|i| match i {\n             hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source(ctx.db()).value),\n             hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source(ctx.db()).value),\n-            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db()).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source(ctx.db()).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {"}, {"sha": "76144d7d248006a4c4d3bbc2959efbfcfb757fa9", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{CONST_DEF, ENUM, FN, MODULE, STATIC_DEF, STRUCT, TRAIT_DEF, VISIBILITY},\n+    SyntaxKind::{CONST, ENUM, FN, MODULE, STATIC, STRUCT, TRAIT_DEF, VISIBILITY},\n     T,\n };\n use test_utils::mark;\n@@ -36,7 +36,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent();\n-        let def_kws = vec![CONST_DEF, STATIC_DEF, FN, MODULE, STRUCT, ENUM, TRAIT_DEF];\n+        let def_kws = vec![CONST, STATIC, FN, MODULE, STRUCT, ENUM, TRAIT_DEF];\n         // Parent is not a definition, can't add visibility\n         if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n             return None;"}, {"sha": "ccec688caee1a4858b809b27234ac98ecc79d77f", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n ) -> Option<()> {\n-    let variant = ctx.find_node_at_offset::<ast::EnumVariant>()?;\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let field_list = match variant.kind() {\n         ast::StructKind::Tuple(field_list) => field_list,\n         _ => return None,"}, {"sha": "5b282a30ac40991880689abfcb60a8fcdf473896", "filename": "crates/ra_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -22,7 +22,7 @@ use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let variant = ctx.find_node_at_offset::<ast::EnumVariant>()?;\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let enum_name = variant.parent_enum().name()?;\n     let field_list = match variant.kind() {\n@@ -69,7 +69,7 @@ impl From<{0}> for {1} {{\n \n fn existing_from_impl(\n     sema: &'_ hir::Semantics<'_, RootDatabase>,\n-    variant: &ast::EnumVariant,\n+    variant: &ast::Variant,\n ) -> Option<()> {\n     let variant = sema.to_def(variant)?;\n     let enum_ = variant.parent_enum(sema.db);"}, {"sha": "337e3474f8c6497e492d995fe24dea5c2bb8e397", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -78,7 +78,7 @@ pub fn get_missing_assoc_items(\n                     }\n                 }\n \n-                ast::AssocItem::ConstDef(c) => {\n+                ast::AssocItem::Const(c) => {\n                     if let Some(n) = c.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }"}, {"sha": "9581552e57259245fd21b8f48552f48d5bdcb894", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -75,8 +75,8 @@ impl HasSource for Enum {\n     }\n }\n impl HasSource for EnumVariant {\n-    type Ast = ast::EnumVariant;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::EnumVariant> {\n+    type Ast = ast::Variant;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n         self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())\n     }\n }\n@@ -87,14 +87,14 @@ impl HasSource for Function {\n     }\n }\n impl HasSource for Const {\n-    type Ast = ast::ConstDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::ConstDef> {\n+    type Ast = ast::Const;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n impl HasSource for Static {\n-    type Ast = ast::StaticDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::StaticDef> {\n+    type Ast = ast::Static;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "32a60b7896f6878fd2ea546f44e613771bccb6da", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -586,12 +586,12 @@ to_def_impls![\n     (crate::Trait, ast::TraitDef, trait_to_def),\n     (crate::ImplDef, ast::ImplDef, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n-    (crate::Const, ast::ConstDef, const_to_def),\n-    (crate::Static, ast::StaticDef, static_to_def),\n+    (crate::Const, ast::Const, const_to_def),\n+    (crate::Static, ast::Static, static_to_def),\n     (crate::Function, ast::Fn, fn_to_def),\n     (crate::Field, ast::RecordField, record_field_to_def),\n     (crate::Field, ast::TupleField, tuple_field_to_def),\n-    (crate::EnumVariant, ast::EnumVariant, enum_variant_to_def),\n+    (crate::EnumVariant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros\n     (crate::Local, ast::BindPat, bind_pat_to_def),"}, {"sha": "782a03f9e2485888c64ae2eedd46cdb4845a9bd5", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -83,10 +83,10 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn union_to_def(&mut self, src: InFile<ast::Union>) -> Option<UnionId> {\n         self.to_def(src, keys::UNION)\n     }\n-    pub(super) fn static_to_def(&mut self, src: InFile<ast::StaticDef>) -> Option<StaticId> {\n+    pub(super) fn static_to_def(&mut self, src: InFile<ast::Static>) -> Option<StaticId> {\n         self.to_def(src, keys::STATIC)\n     }\n-    pub(super) fn const_to_def(&mut self, src: InFile<ast::ConstDef>) -> Option<ConstId> {\n+    pub(super) fn const_to_def(&mut self, src: InFile<ast::Const>) -> Option<ConstId> {\n         self.to_def(src, keys::CONST)\n     }\n     pub(super) fn type_alias_to_def(&mut self, src: InFile<ast::TypeAlias>) -> Option<TypeAliasId> {\n@@ -100,9 +100,9 @@ impl SourceToDefCtx<'_, '_> {\n     }\n     pub(super) fn enum_variant_to_def(\n         &mut self,\n-        src: InFile<ast::EnumVariant>,\n+        src: InFile<ast::Variant>,\n     ) -> Option<EnumVariantId> {\n-        self.to_def(src, keys::ENUM_VARIANT)\n+        self.to_def(src, keys::VARIANT)\n     }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n@@ -178,11 +178,11 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.union_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n-                    ast::StaticDef(it) => {\n+                    ast::Static(it) => {\n                         let def = self.static_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::ConstDef(it) => {\n+                    ast::Const(it) => {\n                         let def = self.const_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n@@ -222,8 +222,8 @@ impl SourceToDefCtx<'_, '_> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n-                    ast::ConstDef(it) => self.const_to_def(container.with_value(it))?.into(),\n-                    ast::StaticDef(it) => self.static_to_def(container.with_value(it))?.into(),\n+                    ast::Const(it) => self.const_to_def(container.with_value(it))?.into(),\n+                    ast::Static(it) => self.static_to_def(container.with_value(it))?.into(),\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n                     _ => continue,\n                 }"}, {"sha": "231c1dfab8e05f4a8900d7fc0af34fb479a4a42f", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -112,7 +112,7 @@ impl EnumData {\n \n impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n-    type Value = ast::EnumVariant;\n+    type Value = ast::Variant;\n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n@@ -123,7 +123,7 @@ impl HasChildSource for EnumId {\n \n fn lower_enum(\n     db: &dyn DefDatabase,\n-    trace: &mut Trace<EnumVariantData, ast::EnumVariant>,\n+    trace: &mut Trace<EnumVariantData, ast::Variant>,\n     ast: &InFile<ast::Enum>,\n     module_id: ModuleId,\n ) {"}, {"sha": "4a26e6397e996e1168678af5cd93f3e5c9e95bce", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -641,14 +641,14 @@ impl ExprCollector<'_> {\n                             def.name(),\n                         )\n                     }\n-                    ast::Item::ConstDef(def) => {\n+                    ast::Item::Const(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (\n                             ConstLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n-                    ast::Item::StaticDef(def) => {\n+                    ast::Item::Static(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }"}, {"sha": "dcb00a1d9a0ba916cc83b3bcc0015f7a9c79aab7", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -162,7 +162,7 @@ impl ChildBySource for EnumId {\n         let arena_map = arena_map.as_ref();\n         for (local_id, source) in arena_map.value.iter() {\n             let id = EnumVariantId { parent: *self, local_id };\n-            res[keys::ENUM_VARIANT].insert(arena_map.with_value(source.clone()), id)\n+            res[keys::VARIANT].insert(arena_map.with_value(source.clone()), id)\n         }\n \n         res"}, {"sha": "c478a9909dcb3db6ba45e06e52e7c532cc1ce38f", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -417,8 +417,8 @@ mod_items! {\n     Struct in structs -> ast::Struct,\n     Union in unions -> ast::Union,\n     Enum in enums -> ast::Enum,\n-    Const in consts -> ast::ConstDef,\n-    Static in statics -> ast::StaticDef,\n+    Const in consts -> ast::Const,\n+    Static in statics -> ast::Static,\n     Trait in traits -> ast::TraitDef,\n     Impl in impls -> ast::ImplDef,\n     TypeAlias in type_aliases -> ast::TypeAlias,\n@@ -552,7 +552,7 @@ pub struct Const {\n     pub name: Option<Name>,\n     pub visibility: RawVisibilityId,\n     pub type_ref: TypeRef,\n-    pub ast_id: FileAstId<ast::ConstDef>,\n+    pub ast_id: FileAstId<ast::Const>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -561,7 +561,7 @@ pub struct Static {\n     pub visibility: RawVisibilityId,\n     pub mutable: bool,\n     pub type_ref: TypeRef,\n-    pub ast_id: FileAstId<ast::StaticDef>,\n+    pub ast_id: FileAstId<ast::Static>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "a94548e5d584c52016586d7ef7e87660f13062d8", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -83,8 +83,8 @@ impl Ctx {\n             | ast::Item::Enum(_)\n             | ast::Item::Fn(_)\n             | ast::Item::TypeAlias(_)\n-            | ast::Item::ConstDef(_)\n-            | ast::Item::StaticDef(_)\n+            | ast::Item::Const(_)\n+            | ast::Item::Static(_)\n             | ast::Item::MacroCall(_) => {\n                 // Skip this if we're already collecting inner items. We'll descend into all nodes\n                 // already.\n@@ -108,8 +108,8 @@ impl Ctx {\n             ast::Item::Enum(ast) => self.lower_enum(ast).map(Into::into),\n             ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n             ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::Item::StaticDef(ast) => self.lower_static(ast).map(Into::into),\n-            ast::Item::ConstDef(ast) => Some(self.lower_const(ast).into()),\n+            ast::Item::Static(ast) => self.lower_static(ast).map(Into::into),\n+            ast::Item::Const(ast) => Some(self.lower_const(ast).into()),\n             ast::Item::Module(ast) => self.lower_module(ast).map(Into::into),\n             ast::Item::TraitDef(ast) => self.lower_trait(ast).map(Into::into),\n             ast::Item::ImplDef(ast) => self.lower_impl(ast).map(Into::into),\n@@ -160,7 +160,7 @@ impl Ctx {\n         match item {\n             ast::AssocItem::Fn(ast) => self.lower_function(ast).map(Into::into),\n             ast::AssocItem::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::AssocItem::ConstDef(ast) => Some(self.lower_const(ast).into()),\n+            ast::AssocItem::Const(ast) => Some(self.lower_const(ast).into()),\n             ast::AssocItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n         }\n     }\n@@ -259,7 +259,7 @@ impl Ctx {\n         Some(id(self.data().enums.alloc(res)))\n     }\n \n-    fn lower_variants(&mut self, variants: &ast::EnumVariantList) -> IdRange<Variant> {\n+    fn lower_variants(&mut self, variants: &ast::VariantList) -> IdRange<Variant> {\n         let start = self.next_variant_idx();\n         for variant in variants.variants() {\n             if let Some(data) = self.lower_variant(&variant) {\n@@ -271,7 +271,7 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_variant(&mut self, variant: &ast::EnumVariant) -> Option<Variant> {\n+    fn lower_variant(&mut self, variant: &ast::Variant) -> Option<Variant> {\n         let name = variant.name()?.as_name();\n         let fields = self.lower_fields(&variant.kind());\n         let res = Variant { name, fields };\n@@ -368,7 +368,7 @@ impl Ctx {\n         Some(id(self.data().type_aliases.alloc(res)))\n     }\n \n-    fn lower_static(&mut self, static_: &ast::StaticDef) -> Option<FileItemTreeId<Static>> {\n+    fn lower_static(&mut self, static_: &ast::Static) -> Option<FileItemTreeId<Static>> {\n         let name = static_.name()?.as_name();\n         let type_ref = self.lower_type_ref_opt(static_.ascribed_type());\n         let visibility = self.lower_visibility(static_);\n@@ -378,7 +378,7 @@ impl Ctx {\n         Some(id(self.data().statics.alloc(res)))\n     }\n \n-    fn lower_const(&mut self, konst: &ast::ConstDef) -> FileItemTreeId<Const> {\n+    fn lower_const(&mut self, konst: &ast::Const) -> FileItemTreeId<Const> {\n         let name = konst.name().map(|it| it.as_name());\n         let type_ref = self.lower_type_ref_opt(konst.ascribed_type());\n         let visibility = self.lower_visibility(konst);\n@@ -553,7 +553,7 @@ impl Ctx {\n                             self.data().functions[func.index].is_unsafe = true;\n                             func.into()\n                         }\n-                        ast::ExternItem::StaticDef(ast) => {\n+                        ast::ExternItem::Static(ast) => {\n                             let statik = self.lower_static(&ast)?;\n                             statik.into()\n                         }"}, {"sha": "e61ce58bcc58f9d86cb1cb53cb3bb304ea33b671", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -238,7 +238,7 @@ fn smoke() {\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n             > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TypeAlias>(8) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n-            > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n+            > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Const>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n             > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(10) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]"}, {"sha": "f75e3bb50f4c0aa2eeaf646ce2875738fbd1a1d5", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -15,16 +15,16 @@ use crate::{\n pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n \n pub const FUNCTION: Key<ast::Fn, FunctionId> = Key::new();\n-pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n-pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n+pub const CONST: Key<ast::Const, ConstId> = Key::new();\n+pub const STATIC: Key<ast::Static, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();\n pub const ENUM: Key<ast::Enum, EnumId> = Key::new();\n \n-pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n+pub const VARIANT: Key<ast::Variant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordField, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();"}, {"sha": "87221d964e752c348145070f43b766237b4f4142", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This module adds the completion items related to implementing associated\n //! items within a `impl Trait for Struct` block. The current context node\n-//! must be within either a `FN`, `TYPE_ALIAS`, or `CONST_DEF` node\n+//! must be within either a `FN`, `TYPE_ALIAS`, or `CONST` node\n //! and an direct child of an `IMPL_DEF`.\n //!\n //! # Examples\n@@ -87,7 +87,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n                 }\n             }\n \n-            SyntaxKind::CONST_DEF => {\n+            SyntaxKind::CONST => {\n                 for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n                     .into_iter()\n                     .filter_map(|item| match item {\n@@ -106,10 +106,9 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n \n fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n     let (trigger, impl_def_offset) = ctx.token.ancestors().find_map(|p| match p.kind() {\n-        SyntaxKind::FN\n-        | SyntaxKind::TYPE_ALIAS\n-        | SyntaxKind::CONST_DEF\n-        | SyntaxKind::BLOCK_EXPR => Some((p, 2)),\n+        SyntaxKind::FN | SyntaxKind::TYPE_ALIAS | SyntaxKind::CONST | SyntaxKind::BLOCK_EXPR => {\n+            Some((p, 2))\n+        }\n         SyntaxKind::NAME_REF => Some((p, 5)),\n         _ => None,\n     })?;\n@@ -201,7 +200,7 @@ fn add_const_impl(\n     }\n }\n \n-fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n+fn make_const_compl_syntax(const_: &ast::Const) -> String {\n     let const_ = edit::remove_attrs_and_docs(const_);\n \n     let const_start = const_.syntax().text_range().start();"}, {"sha": "3efca06496ce84f7ac414296abb942a328f99669", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn function_declaration(node: &ast::Fn) -> String {\n     buf\n }\n \n-pub(crate) fn const_label(node: &ast::ConstDef) -> String {\n+pub(crate) fn const_label(node: &ast::Const) -> String {\n     let label: String = node\n         .syntax()\n         .children_with_tokens()"}, {"sha": "9e2c012456cde4b29ad8af11ff7abacb61bed2e2", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -385,10 +385,10 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n             ast::TraitDef(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n             ast::TypeAlias(it) => it.doc_comment_text(),\n-            ast::ConstDef(it) => it.doc_comment_text(),\n-            ast::StaticDef(it) => it.doc_comment_text(),\n+            ast::Const(it) => it.doc_comment_text(),\n+            ast::Static(it) => it.doc_comment_text(),\n             ast::RecordField(it) => it.doc_comment_text(),\n-            ast::EnumVariant(it) => it.doc_comment_text(),\n+            ast::Variant(it) => it.doc_comment_text(),\n             ast::MacroCall(it) => it.doc_comment_text(),\n             _ => None,\n         }\n@@ -410,10 +410,10 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n             ast::TraitDef(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),\n             ast::TypeAlias(it) => it.short_label(),\n-            ast::ConstDef(it) => it.short_label(),\n-            ast::StaticDef(it) => it.short_label(),\n+            ast::Const(it) => it.short_label(),\n+            ast::Static(it) => it.short_label(),\n             ast::RecordField(it) => it.short_label(),\n-            ast::EnumVariant(it) => it.short_label(),\n+            ast::Variant(it) => it.short_label(),\n             _ => None,\n         }\n     }"}, {"sha": "282f362f297220b585b2bb5670b9cae87d4ca5af", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -53,13 +53,13 @@ impl ShortLabel for ast::TypeAlias {\n     }\n }\n \n-impl ShortLabel for ast::ConstDef {\n+impl ShortLabel for ast::Const {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_ascribed_node(self, \"const \")\n     }\n }\n \n-impl ShortLabel for ast::StaticDef {\n+impl ShortLabel for ast::Static {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_ascribed_node(self, \"static \")\n     }\n@@ -71,7 +71,7 @@ impl ShortLabel for ast::RecordField {\n     }\n }\n \n-impl ShortLabel for ast::EnumVariant {\n+impl ShortLabel for ast::Variant {\n     fn short_label(&self) -> Option<String> {\n         Some(self.name()?.text().to_string())\n     }"}, {"sha": "fc81b48ccef19acaa34a762e98164e06b752a3b1", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -42,7 +42,7 @@ fn try_extend_selection(\n         RECORD_FIELD_LIST,\n         TUPLE_FIELD_LIST,\n         RECORD_EXPR_FIELD_LIST,\n-        ENUM_VARIANT_LIST,\n+        VARIANT_LIST,\n         USE_TREE_LIST,\n         GENERIC_PARAM_LIST,\n         TYPE_ARG_LIST,"}, {"sha": "77384b6ecc915c1efe9398c20d60514a709f17a8", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -129,16 +129,16 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::Struct(it) => decl(it),\n             ast::Union(it) => decl(it),\n             ast::Enum(it) => decl(it),\n-            ast::EnumVariant(it) => decl(it),\n+            ast::Variant(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n             ast::TypeAlias(it) => {\n                 let ty = it.type_ref();\n                 decl_with_type_ref(it, ty)\n             },\n             ast::RecordField(it) => decl_with_ascription(it),\n-            ast::ConstDef(it) => decl_with_ascription(it),\n-            ast::StaticDef(it) => decl_with_ascription(it),\n+            ast::Const(it) => decl_with_ascription(it),\n+            ast::Static(it) => decl_with_ascription(it),\n             ast::ImplDef(it) => {\n                 let target_type = it.target_type()?;\n                 let target_trait = it.target_trait();\n@@ -319,7 +319,7 @@ fn very_obsolete() {}\n                         label: \"X\",\n                         navigation_range: 169..170,\n                         node_range: 169..170,\n-                        kind: ENUM_VARIANT,\n+                        kind: VARIANT,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -330,7 +330,7 @@ fn very_obsolete() {}\n                         label: \"Y\",\n                         navigation_range: 172..173,\n                         node_range: 172..178,\n-                        kind: ENUM_VARIANT,\n+                        kind: VARIANT,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -350,7 +350,7 @@ fn very_obsolete() {}\n                         label: \"S\",\n                         navigation_range: 201..202,\n                         node_range: 194..213,\n-                        kind: STATIC_DEF,\n+                        kind: STATIC,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -361,7 +361,7 @@ fn very_obsolete() {}\n                         label: \"C\",\n                         navigation_range: 220..221,\n                         node_range: 214..232,\n-                        kind: CONST_DEF,\n+                        kind: CONST,\n                         detail: Some(\n                             \"i32\",\n                         ),"}, {"sha": "5a6e17936f94b068f28eeb9977e846702f97d34f", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -93,7 +93,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         | USE_TREE_LIST\n         | BLOCK_EXPR\n         | MATCH_ARM_LIST\n-        | ENUM_VARIANT_LIST\n+        | VARIANT_LIST\n         | TOKEN_TREE => Some(FoldKind::Block),\n         _ => None,\n     }"}, {"sha": "519e4bf1a255a88ee9aa545228121f657f62eeb0", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -390,7 +390,7 @@ enum Foo {\n }\n \"#,\n         );\n-        check_result(refs, \"B ENUM_VARIANT FileId(1) 22..23 22..23 Other\", &[]);\n+        check_result(refs, \"B VARIANT FileId(1) 22..23 22..23 Other\", &[]);\n     }\n \n     #[test]"}, {"sha": "19ec73d2ab34574c52933b9d0e1e93d7b558aa5f", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -714,9 +714,9 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n         RECORD_FIELD => HighlightTag::Field,\n         MODULE => HighlightTag::Module,\n         FN => HighlightTag::Function,\n-        CONST_DEF => HighlightTag::Constant,\n-        STATIC_DEF => HighlightTag::Static,\n-        ENUM_VARIANT => HighlightTag::EnumVariant,\n+        CONST => HighlightTag::Constant,\n+        STATIC => HighlightTag::Static,\n+        VARIANT => HighlightTag::EnumVariant,\n         BIND_PAT => HighlightTag::Local,\n         _ => default,\n     };"}, {"sha": "b908bd741b3131464bdc3560e6a5c79251e2402f", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -166,19 +166,19 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def: hir::Trait = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::StaticDef(it) => {\n+            ast::Static(it) => {\n                 let def: hir::Static = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::EnumVariant(it) => {\n+            ast::Variant(it) => {\n                 let def: hir::EnumVariant = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n             ast::Fn(it) => {\n                 let def: hir::Function = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::ConstDef(it) => {\n+            ast::Const(it) => {\n                 let def: hir::Const = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "41b8d07f4d26eab542645ab096d5eb3fa545be87", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -403,8 +403,8 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n             ast::TypeAlias(it) => decl(it),\n-            ast::ConstDef(it) => decl(it),\n-            ast::StaticDef(it) => decl(it),\n+            ast::Const(it) => decl(it),\n+            ast::Static(it) => decl(it),\n             ast::MacroCall(it) => {\n                 if it.is_macro_rules().is_some() {\n                     decl(it)"}, {"sha": "22a7acdf31c2c8ec734459e6bcbefd1f0ea6d9c0", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn reparser(\n         BLOCK_EXPR => expressions::block_expr,\n         RECORD_FIELD_LIST => items::record_field_def_list,\n         RECORD_EXPR_FIELD_LIST => items::record_field_list,\n-        ENUM_VARIANT_LIST => items::enum_variant_list,\n+        VARIANT_LIST => items::enum_variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,\n         USE_TREE_LIST => items::use_tree_list,\n         EXTERN_ITEM_LIST => items::extern_item_list,"}, {"sha": "addfb59d4b1a98377f243d4bbb7c300a053aa10a", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n             if p.eat(T![=]) {\n                 expressions::expr(p);\n             }\n-            var.complete(p, ENUM_VARIANT);\n+            var.complete(p, VARIANT);\n         } else {\n             var.abandon(p);\n             p.err_and_bump(\"expected enum variant\");\n@@ -101,7 +101,7 @@ pub(crate) fn enum_variant_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ENUM_VARIANT_LIST);\n+    m.complete(p, VARIANT_LIST);\n }\n \n pub(crate) fn record_field_def_list(p: &mut Parser) {"}, {"sha": "35ad766dcee8882f6bec5aa007182bb8a5590400", "filename": "crates/ra_parser/src/grammar/items/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -3,11 +3,11 @@\n use super::*;\n \n pub(super) fn static_def(p: &mut Parser, m: Marker) {\n-    const_or_static(p, m, T![static], STATIC_DEF)\n+    const_or_static(p, m, T![static], STATIC)\n }\n \n pub(super) fn const_def(p: &mut Parser, m: Marker) {\n-    const_or_static(p, m, T![const], CONST_DEF)\n+    const_or_static(p, m, T![const], CONST)\n }\n \n fn const_or_static(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {"}, {"sha": "64889676eb4b48fd96599522940448dedc878c6a", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -131,8 +131,8 @@ pub enum SyntaxKind {\n     EXTERN_CRATE,\n     MODULE,\n     USE,\n-    STATIC_DEF,\n-    CONST_DEF,\n+    STATIC,\n+    CONST,\n     TRAIT_DEF,\n     IMPL_DEF,\n     TYPE_ALIAS,\n@@ -206,12 +206,12 @@ pub enum SyntaxKind {\n     BIN_EXPR,\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n-    ENUM_VARIANT,\n+    VARIANT,\n     RECORD_FIELD_LIST,\n     RECORD_FIELD,\n     TUPLE_FIELD_LIST,\n     TUPLE_FIELD,\n-    ENUM_VARIANT_LIST,\n+    VARIANT_LIST,\n     ITEM_LIST,\n     ASSOC_ITEM_LIST,\n     ATTR,"}, {"sha": "a10ade3757aff5b4f6095b64d5bc4982ba513734", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -146,42 +146,28 @@ impl SysrootCrateData {\n }\n \n const SYSROOT_CRATES: &str = \"\n-std\n-core\n alloc\n-collections\n-libc\n-proc_macro\n-rustc_unicode\n-std_unicode\n-test\n-alloc_jemalloc\n-alloc_system\n-compiler_builtins\n-getopts\n-panic_unwind\n+core\n panic_abort\n-rand\n+panic_unwind\n+proc_macro\n+profiler_builtins\n+rtstartup\n+std\n+stdarch\n term\n-unwind\n-build_helper\n-rustc_asan\n-rustc_lsan\n-rustc_msan\n-rustc_tsan\n-syntax\";\n+test\n+unwind\";\n \n const STD_DEPS: &str = \"\n alloc\n-alloc_jemalloc\n-alloc_system\n core\n panic_abort\n-rand\n-compiler_builtins\n-unwind\n-rustc_asan\n-rustc_lsan\n-rustc_msan\n-rustc_tsan\n-build_helper\";\n+panic_unwind\n+profiler_builtins\n+rtstartup\n+proc_macro\n+stdarch\n+term\n+test\n+unwind\";"}, {"sha": "fd426ece9d0306f6c3d8a6f51508326201a4f0e0", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -139,7 +139,7 @@ fn test_doc_comment_of_statics() {\n     )\n     .ok()\n     .unwrap();\n-    let st = file.syntax().descendants().find_map(StaticDef::cast).unwrap();\n+    let st = file.syntax().descendants().find_map(Static::cast).unwrap();\n     assert_eq!(\"Number of levels\", st.doc_comment_text().unwrap());\n }\n "}, {"sha": "00a70fce0973172d74dc7da3177eb4c18003baa4", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -28,16 +28,17 @@ impl Attr {\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstDef {\n+pub struct Const {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for ConstDef {}\n-impl ast::NameOwner for ConstDef {}\n-impl ast::VisibilityOwner for ConstDef {}\n-impl ast::TypeAscriptionOwner for ConstDef {}\n-impl ConstDef {\n+impl ast::AttrsOwner for Const {}\n+impl ast::NameOwner for Const {}\n+impl ast::VisibilityOwner for Const {}\n+impl ast::TypeAscriptionOwner for Const {}\n+impl Const {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n+    pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -53,7 +54,7 @@ impl ast::VisibilityOwner for Enum {}\n impl ast::GenericParamsOwner for Enum {}\n impl Enum {\n     pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n-    pub fn variant_list(&self) -> Option<EnumVariantList> { support::child(&self.syntax) }\n+    pub fn variant_list(&self) -> Option<VariantList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternBlock {\n@@ -139,14 +140,14 @@ impl Module {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StaticDef {\n+pub struct Static {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for StaticDef {}\n-impl ast::NameOwner for StaticDef {}\n-impl ast::VisibilityOwner for StaticDef {}\n-impl ast::TypeAscriptionOwner for StaticDef {}\n-impl StaticDef {\n+impl ast::AttrsOwner for Static {}\n+impl ast::NameOwner for Static {}\n+impl ast::VisibilityOwner for Static {}\n+impl ast::TypeAscriptionOwner for Static {}\n+impl Static {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -427,22 +428,22 @@ impl TupleField {\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumVariantList {\n+pub struct VariantList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl EnumVariantList {\n+impl VariantList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn variants(&self) -> AstChildren<EnumVariant> { support::children(&self.syntax) }\n+    pub fn variants(&self) -> AstChildren<Variant> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumVariant {\n+pub struct Variant {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for EnumVariant {}\n-impl ast::NameOwner for EnumVariant {}\n-impl ast::VisibilityOwner for EnumVariant {}\n-impl EnumVariant {\n+impl ast::AttrsOwner for Variant {}\n+impl ast::NameOwner for Variant {}\n+impl ast::VisibilityOwner for Variant {}\n+impl Variant {\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -1272,15 +1273,15 @@ impl MetaItem {\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Item {\n-    ConstDef(ConstDef),\n+    Const(Const),\n     Enum(Enum),\n     ExternBlock(ExternBlock),\n     ExternCrate(ExternCrate),\n     Fn(Fn),\n     ImplDef(ImplDef),\n     MacroCall(MacroCall),\n     Module(Module),\n-    StaticDef(StaticDef),\n+    Static(Static),\n     Struct(Struct),\n     TraitDef(TraitDef),\n     TypeAlias(TypeAlias),\n@@ -1365,7 +1366,7 @@ pub enum Expr {\n pub enum AssocItem {\n     Fn(Fn),\n     TypeAlias(TypeAlias),\n-    ConstDef(ConstDef),\n+    Const(Const),\n     MacroCall(MacroCall),\n }\n impl ast::AttrsOwner for AssocItem {}\n@@ -1384,7 +1385,7 @@ pub enum AttrInput {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n     Fn(Fn),\n-    StaticDef(StaticDef),\n+    Static(Static),\n }\n impl ast::AttrsOwner for ExternItem {}\n impl ast::NameOwner for ExternItem {}\n@@ -1421,8 +1422,8 @@ impl AstNode for Attr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ConstDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_DEF }\n+impl AstNode for Const {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1509,8 +1510,8 @@ impl AstNode for Module {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for StaticDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_DEF }\n+impl AstNode for Static {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1806,8 +1807,8 @@ impl AstNode for TupleField {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for EnumVariantList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT_LIST }\n+impl AstNode for VariantList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == VARIANT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1817,8 +1818,8 @@ impl AstNode for EnumVariantList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for EnumVariant {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT }\n+impl AstNode for Variant {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == VARIANT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2774,8 +2775,8 @@ impl AstNode for MetaItem {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<ConstDef> for Item {\n-    fn from(node: ConstDef) -> Item { Item::ConstDef(node) }\n+impl From<Const> for Item {\n+    fn from(node: Const) -> Item { Item::Const(node) }\n }\n impl From<Enum> for Item {\n     fn from(node: Enum) -> Item { Item::Enum(node) }\n@@ -2798,8 +2799,8 @@ impl From<MacroCall> for Item {\n impl From<Module> for Item {\n     fn from(node: Module) -> Item { Item::Module(node) }\n }\n-impl From<StaticDef> for Item {\n-    fn from(node: StaticDef) -> Item { Item::StaticDef(node) }\n+impl From<Static> for Item {\n+    fn from(node: Static) -> Item { Item::Static(node) }\n }\n impl From<Struct> for Item {\n     fn from(node: Struct) -> Item { Item::Struct(node) }\n@@ -2819,22 +2820,22 @@ impl From<Use> for Item {\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST_DEF | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n+            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL | MODULE\n+            | STATIC | STRUCT | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            CONST_DEF => Item::ConstDef(ConstDef { syntax }),\n+            CONST => Item::Const(Const { syntax }),\n             ENUM => Item::Enum(Enum { syntax }),\n             EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n             EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n             FN => Item::Fn(Fn { syntax }),\n             IMPL_DEF => Item::ImplDef(ImplDef { syntax }),\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n             MODULE => Item::Module(Module { syntax }),\n-            STATIC_DEF => Item::StaticDef(StaticDef { syntax }),\n+            STATIC => Item::Static(Static { syntax }),\n             STRUCT => Item::Struct(Struct { syntax }),\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n@@ -2846,15 +2847,15 @@ impl AstNode for Item {\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            Item::ConstDef(it) => &it.syntax,\n+            Item::Const(it) => &it.syntax,\n             Item::Enum(it) => &it.syntax,\n             Item::ExternBlock(it) => &it.syntax,\n             Item::ExternCrate(it) => &it.syntax,\n             Item::Fn(it) => &it.syntax,\n             Item::ImplDef(it) => &it.syntax,\n             Item::MacroCall(it) => &it.syntax,\n             Item::Module(it) => &it.syntax,\n-            Item::StaticDef(it) => &it.syntax,\n+            Item::Static(it) => &it.syntax,\n             Item::Struct(it) => &it.syntax,\n             Item::TraitDef(it) => &it.syntax,\n             Item::TypeAlias(it) => &it.syntax,\n@@ -3256,24 +3257,24 @@ impl From<Fn> for AssocItem {\n impl From<TypeAlias> for AssocItem {\n     fn from(node: TypeAlias) -> AssocItem { AssocItem::TypeAlias(node) }\n }\n-impl From<ConstDef> for AssocItem {\n-    fn from(node: ConstDef) -> AssocItem { AssocItem::ConstDef(node) }\n+impl From<Const> for AssocItem {\n+    fn from(node: Const) -> AssocItem { AssocItem::Const(node) }\n }\n impl From<MacroCall> for AssocItem {\n     fn from(node: MacroCall) -> AssocItem { AssocItem::MacroCall(node) }\n }\n impl AstNode for AssocItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN | TYPE_ALIAS | CONST_DEF | MACRO_CALL => true,\n+            FN | TYPE_ALIAS | CONST | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             FN => AssocItem::Fn(Fn { syntax }),\n             TYPE_ALIAS => AssocItem::TypeAlias(TypeAlias { syntax }),\n-            CONST_DEF => AssocItem::ConstDef(ConstDef { syntax }),\n+            CONST => AssocItem::Const(Const { syntax }),\n             MACRO_CALL => AssocItem::MacroCall(MacroCall { syntax }),\n             _ => return None,\n         };\n@@ -3283,7 +3284,7 @@ impl AstNode for AssocItem {\n         match self {\n             AssocItem::Fn(it) => &it.syntax,\n             AssocItem::TypeAlias(it) => &it.syntax,\n-            AssocItem::ConstDef(it) => &it.syntax,\n+            AssocItem::Const(it) => &it.syntax,\n             AssocItem::MacroCall(it) => &it.syntax,\n         }\n     }\n@@ -3347,28 +3348,28 @@ impl AstNode for AttrInput {\n impl From<Fn> for ExternItem {\n     fn from(node: Fn) -> ExternItem { ExternItem::Fn(node) }\n }\n-impl From<StaticDef> for ExternItem {\n-    fn from(node: StaticDef) -> ExternItem { ExternItem::StaticDef(node) }\n+impl From<Static> for ExternItem {\n+    fn from(node: Static) -> ExternItem { ExternItem::Static(node) }\n }\n impl AstNode for ExternItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN | STATIC_DEF => true,\n+            FN | STATIC => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             FN => ExternItem::Fn(Fn { syntax }),\n-            STATIC_DEF => ExternItem::StaticDef(StaticDef { syntax }),\n+            STATIC => ExternItem::Static(Static { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             ExternItem::Fn(it) => &it.syntax,\n-            ExternItem::StaticDef(it) => &it.syntax,\n+            ExternItem::Static(it) => &it.syntax,\n         }\n     }\n }\n@@ -3465,7 +3466,7 @@ impl std::fmt::Display for Attr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ConstDef {\n+impl std::fmt::Display for Const {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3505,7 +3506,7 @@ impl std::fmt::Display for Module {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for StaticDef {\n+impl std::fmt::Display for Static {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3640,12 +3641,12 @@ impl std::fmt::Display for TupleField {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for EnumVariantList {\n+impl std::fmt::Display for VariantList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for EnumVariant {\n+impl std::fmt::Display for Variant {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "4da1d5c113f7939e1ee02715268b2fde310a6018", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -247,7 +247,7 @@ impl ast::RecordFieldPat {\n     }\n }\n \n-impl ast::EnumVariant {\n+impl ast::Variant {\n     pub fn parent_enum(&self) -> ast::Enum {\n         self.syntax()\n             .parent()\n@@ -480,11 +480,11 @@ impl ast::DocCommentsOwner for ast::Union {}\n impl ast::DocCommentsOwner for ast::RecordField {}\n impl ast::DocCommentsOwner for ast::TupleField {}\n impl ast::DocCommentsOwner for ast::Enum {}\n-impl ast::DocCommentsOwner for ast::EnumVariant {}\n+impl ast::DocCommentsOwner for ast::Variant {}\n impl ast::DocCommentsOwner for ast::TraitDef {}\n impl ast::DocCommentsOwner for ast::Module {}\n-impl ast::DocCommentsOwner for ast::StaticDef {}\n-impl ast::DocCommentsOwner for ast::ConstDef {}\n+impl ast::DocCommentsOwner for ast::Static {}\n+impl ast::DocCommentsOwner for ast::Const {}\n impl ast::DocCommentsOwner for ast::TypeAlias {}\n impl ast::DocCommentsOwner for ast::ImplDef {}\n impl ast::DocCommentsOwner for ast::MacroCall {}"}, {"sha": "95581a84b80b7fa51038e46eb4ef6dad48d02190", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -146,8 +146,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT | ENUM | ENUM_VARIANT | FN | TRAIT_DEF\n-        | MODULE | RECORD_FIELD | STATIC_DEF => {\n+        MACRO_CALL | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT_DEF | MODULE\n+        | RECORD_FIELD | STATIC => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}, {"sha": "a666b18db2021c60693c8a5595077a88a93ec7c3", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -4,7 +4,7 @@ mod block;\n \n use crate::{\n     ast, match_ast, AstNode, SyntaxError,\n-    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN, INT_NUMBER, STRING, TYPE_ALIAS},\n+    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST, FN, INT_NUMBER, STRING, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n use rustc_lexer::unescape::{\n@@ -200,7 +200,7 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         None => return,\n     };\n     match parent.kind() {\n-        FN | CONST_DEF | TYPE_ALIAS => (),\n+        FN | CONST | TYPE_ALIAS => (),\n         _ => return,\n     }\n "}, {"sha": "fca646557305b6175f63aa10bf68bc3bdcdeda50", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -17,15 +17,15 @@ SOURCE_FILE@0..575\n         NAME@21..25\n           IDENT@21..25 \"Test\"\n         WHITESPACE@25..26 \" \"\n-        ENUM_VARIANT_LIST@26..152\n+        VARIANT_LIST@26..152\n           L_CURLY@26..27 \"{\"\n           WHITESPACE@27..36 \"\\n        \"\n-          ENUM_VARIANT@36..40\n+          VARIANT@36..40\n             NAME@36..40\n               IDENT@36..40 \"Var1\"\n           COMMA@40..41 \",\"\n           WHITESPACE@41..50 \"\\n        \"\n-          ENUM_VARIANT@50..62\n+          VARIANT@50..62\n             NAME@50..54\n               IDENT@50..54 \"Var2\"\n             TUPLE_FIELD_LIST@54..62\n@@ -39,7 +39,7 @@ SOURCE_FILE@0..575\n               R_PAREN@61..62 \")\"\n           COMMA@62..63 \",\"\n           WHITESPACE@63..72 \"\\n        \"\n-          ENUM_VARIANT@72..145\n+          VARIANT@72..145\n             NAME@72..76\n               IDENT@72..76 \"Var3\"\n             WHITESPACE@76..77 \" \"\n@@ -85,10 +85,10 @@ SOURCE_FILE@0..575\n         NAME@196..201\n           IDENT@196..201 \"Test2\"\n         WHITESPACE@201..202 \" \"\n-        ENUM_VARIANT_LIST@202..223\n+        VARIANT_LIST@202..223\n           L_CURLY@202..203 \"{\"\n           WHITESPACE@203..212 \"\\n        \"\n-          ENUM_VARIANT@212..216\n+          VARIANT@212..216\n             NAME@212..216\n               IDENT@212..216 \"Fine\"\n           COMMA@216..217 \",\"\n@@ -101,10 +101,10 @@ SOURCE_FILE@0..575\n         NAME@234..239\n           IDENT@234..239 \"Test3\"\n         WHITESPACE@239..240 \" \"\n-        ENUM_VARIANT_LIST@240..300\n+        VARIANT_LIST@240..300\n           L_CURLY@240..241 \"{\"\n           WHITESPACE@241..250 \"\\n        \"\n-          ENUM_VARIANT@250..293\n+          VARIANT@250..293\n             NAME@250..259\n               IDENT@250..259 \"StillFine\"\n             WHITESPACE@259..260 \" \"\n@@ -140,10 +140,10 @@ SOURCE_FILE@0..575\n             NAME@343..348\n               IDENT@343..348 \"Test4\"\n             WHITESPACE@348..349 \" \"\n-            ENUM_VARIANT_LIST@349..453\n+            VARIANT_LIST@349..453\n               L_CURLY@349..350 \"{\"\n               WHITESPACE@350..363 \"\\n            \"\n-              ENUM_VARIANT@363..372\n+              VARIANT@363..372\n                 NAME@363..367\n                   IDENT@363..367 \"Nope\"\n                 TUPLE_FIELD_LIST@367..372"}, {"sha": "b1400aa5f7115de8e61f44b8c3ed90399542d303", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -65,7 +65,7 @@ SOURCE_FILE@0..118\n           R_PAREN@79..80 \")\"\n         SEMICOLON@80..81 \";\"\n       WHITESPACE@81..86 \"\\n    \"\n-      CONST_DEF@86..115\n+      CONST@86..115\n         VISIBILITY@86..96\n           PUB_KW@86..89 \"pub\"\n           L_PAREN@89..90 \"(\""}, {"sha": "f041fa6f7932e391d3c98845075bda04d727ae6c", "filename": "crates/ra_syntax/test_data/parser/err/0043_default_const.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0043_default_const.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -14,7 +14,7 @@ SOURCE_FILE@0..39\n             NAME_REF@12..19\n               IDENT@12..19 \"default\"\n       WHITESPACE@19..20 \" \"\n-      CONST_DEF@20..36\n+      CONST@20..36\n         CONST_KW@20..25 \"const\"\n         WHITESPACE@25..26 \" \"\n         NAME@26..27"}, {"sha": "a6e6552a99e44eaaa95a9140dee417b5ccdcc512", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@0..50\n       L_CURLY@22..23 \"{\"\n       R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\"\n-  CONST_DEF@25..46\n+  CONST@25..46\n     UNSAFE_KW@25..31 \"unsafe\"\n     WHITESPACE@31..32 \" \"\n     CONST_KW@32..37 \"const\""}, {"sha": "8d761b9074144d7c1a3d7531080042dfd43ad40f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0013_static_underscore.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  STATIC_DEF@0..18\n+  STATIC@0..18\n     STATIC_KW@0..6 \"static\"\n     WHITESPACE@6..7 \" \"\n     ERROR@7..8"}, {"sha": "955e00dde3b0ffdf215ca519ab93a4947128a9ef", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -27,7 +27,7 @@ SOURCE_FILE@0..83\n                     IDENT@21..26 \"Clone\"\n         SEMICOLON@26..27 \";\"\n       WHITESPACE@27..32 \"\\n    \"\n-      CONST_DEF@32..45\n+      CONST@32..45\n         CONST_KW@32..37 \"const\"\n         WHITESPACE@37..38 \" \"\n         NAME@38..39"}, {"sha": "52181ca0c32edd744f90a1f28353682b15114ad1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -26,7 +26,7 @@ SOURCE_FILE@0..89\n                 IDENT@22..25 \"i32\"\n         SEMICOLON@25..26 \";\"\n       WHITESPACE@26..31 \"\\n    \"\n-      CONST_DEF@31..49\n+      CONST@31..49\n         CONST_KW@31..36 \"const\"\n         WHITESPACE@36..37 \" \"\n         NAME@37..38"}, {"sha": "f2561abd69bae9681b00ff1a356e7c2d4540cc51", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_impl_inner_attributes.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@0..94\n     WHITESPACE@4..5 \" \"\n     NAME@5..6\n       IDENT@5..6 \"F\"\n-    ENUM_VARIANT_LIST@6..8\n+    VARIANT_LIST@6..8\n       L_CURLY@6..7 \"{\"\n       R_CURLY@7..8 \"}\"\n   WHITESPACE@8..9 \"\\n\""}, {"sha": "429a0506e1a2548fd16a103952d5201820369a9d", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -17,15 +17,15 @@ SOURCE_FILE@0..111\n         NAME@32..41\n           IDENT@32..41 \"LocalEnum\"\n         WHITESPACE@41..42 \" \"\n-        ENUM_VARIANT_LIST@42..75\n+        VARIANT_LIST@42..75\n           L_CURLY@42..43 \"{\"\n           WHITESPACE@43..52 \"\\n        \"\n-          ENUM_VARIANT@52..55\n+          VARIANT@52..55\n             NAME@52..55\n               IDENT@52..55 \"One\"\n           COMMA@55..56 \",\"\n           WHITESPACE@56..65 \"\\n        \"\n-          ENUM_VARIANT@65..68\n+          VARIANT@65..68\n             NAME@65..68\n               IDENT@65..68 \"Two\"\n           COMMA@68..69 \",\""}, {"sha": "0c35bf2b7cd0244715c67705b82b7c9180974fb4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_array_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_array_attrs.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..40\n-  CONST_DEF@0..39\n+  CONST@0..39\n     CONST_KW@0..5 \"const\"\n     WHITESPACE@5..6 \" \"\n     NAME@6..7"}, {"sha": "a2e05eb2e2a7d6d518b490cafd1f48b5cac0196b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0157_variant_discriminant.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..23\n     NAME@5..6\n       IDENT@5..6 \"E\"\n     WHITESPACE@6..7 \" \"\n-    ENUM_VARIANT_LIST@7..22\n+    VARIANT_LIST@7..22\n       L_CURLY@7..8 \"{\"\n       WHITESPACE@8..9 \" \"\n-      ENUM_VARIANT@9..20\n+      VARIANT@9..20\n         NAME@9..10\n           IDENT@9..10 \"X\"\n         TUPLE_FIELD_LIST@10..15"}, {"sha": "c3df008146d74c3f15ea4e751ffc59505e1fcd6e", "filename": "crates/ra_syntax/test_data/parser/ok/0019_enums.rast", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -5,7 +5,7 @@ SOURCE_FILE@0..182\n     NAME@5..7\n       IDENT@5..7 \"E1\"\n     WHITESPACE@7..8 \" \"\n-    ENUM_VARIANT_LIST@8..11\n+    VARIANT_LIST@8..11\n       L_CURLY@8..9 \"{\"\n       WHITESPACE@9..10 \"\\n\"\n       R_CURLY@10..11 \"}\"\n@@ -22,7 +22,7 @@ SOURCE_FILE@0..182\n           IDENT@21..22 \"T\"\n       R_ANGLE@22..23 \">\"\n     WHITESPACE@23..24 \" \"\n-    ENUM_VARIANT_LIST@24..27\n+    VARIANT_LIST@24..27\n       L_CURLY@24..25 \"{\"\n       WHITESPACE@25..26 \"\\n\"\n       R_CURLY@26..27 \"}\"\n@@ -33,10 +33,10 @@ SOURCE_FILE@0..182\n     NAME@34..36\n       IDENT@34..36 \"E3\"\n     WHITESPACE@36..37 \" \"\n-    ENUM_VARIANT_LIST@37..46\n+    VARIANT_LIST@37..46\n       L_CURLY@37..38 \"{\"\n       WHITESPACE@38..43 \"\\n    \"\n-      ENUM_VARIANT@43..44\n+      VARIANT@43..44\n         NAME@43..44\n           IDENT@43..44 \"X\"\n       WHITESPACE@44..45 \"\\n\"\n@@ -48,10 +48,10 @@ SOURCE_FILE@0..182\n     NAME@53..55\n       IDENT@53..55 \"E4\"\n     WHITESPACE@55..56 \" \"\n-    ENUM_VARIANT_LIST@56..66\n+    VARIANT_LIST@56..66\n       L_CURLY@56..57 \"{\"\n       WHITESPACE@57..62 \"\\n    \"\n-      ENUM_VARIANT@62..63\n+      VARIANT@62..63\n         NAME@62..63\n           IDENT@62..63 \"X\"\n       COMMA@63..64 \",\"\n@@ -64,15 +64,15 @@ SOURCE_FILE@0..182\n     NAME@73..75\n       IDENT@73..75 \"E5\"\n     WHITESPACE@75..76 \" \"\n-    ENUM_VARIANT_LIST@76..181\n+    VARIANT_LIST@76..181\n       L_CURLY@76..77 \"{\"\n       WHITESPACE@77..82 \"\\n    \"\n-      ENUM_VARIANT@82..83\n+      VARIANT@82..83\n         NAME@82..83\n           IDENT@82..83 \"A\"\n       COMMA@83..84 \",\"\n       WHITESPACE@84..89 \"\\n    \"\n-      ENUM_VARIANT@89..95\n+      VARIANT@89..95\n         NAME@89..90\n           IDENT@89..90 \"B\"\n         WHITESPACE@90..91 \" \"\n@@ -82,7 +82,7 @@ SOURCE_FILE@0..182\n           INT_NUMBER@93..95 \"92\"\n       COMMA@95..96 \",\"\n       WHITESPACE@96..101 \"\\n    \"\n-      ENUM_VARIANT@101..146\n+      VARIANT@101..146\n         NAME@101..102\n           IDENT@101..102 \"C\"\n         WHITESPACE@102..103 \" \"\n@@ -119,7 +119,7 @@ SOURCE_FILE@0..182\n           R_CURLY@145..146 \"}\"\n       COMMA@146..147 \",\"\n       WHITESPACE@147..152 \"\\n    \"\n-      ENUM_VARIANT@152..156\n+      VARIANT@152..156\n         NAME@152..153\n           IDENT@152..153 \"F\"\n         WHITESPACE@153..154 \" \"\n@@ -128,7 +128,7 @@ SOURCE_FILE@0..182\n           R_CURLY@155..156 \"}\"\n       COMMA@156..157 \",\"\n       WHITESPACE@157..162 \"\\n    \"\n-      ENUM_VARIANT@162..169\n+      VARIANT@162..169\n         NAME@162..163\n           IDENT@162..163 \"D\"\n         TUPLE_FIELD_LIST@163..169\n@@ -143,7 +143,7 @@ SOURCE_FILE@0..182\n           R_PAREN@168..169 \")\"\n       COMMA@169..170 \",\"\n       WHITESPACE@170..175 \"\\n    \"\n-      ENUM_VARIANT@175..178\n+      VARIANT@175..178\n         NAME@175..176\n           IDENT@175..176 \"E\"\n         TUPLE_FIELD_LIST@176..178"}, {"sha": "9374cf5e965d1f915856c72f7cf70a06c74b1a77", "filename": "crates/ra_syntax/test_data/parser/ok/0023_static_items.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0023_static_items.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..47\n-  STATIC_DEF@0..20\n+  STATIC@0..20\n     STATIC_KW@0..6 \"static\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..10\n@@ -18,7 +18,7 @@ SOURCE_FILE@0..47\n       INT_NUMBER@18..19 \"1\"\n     SEMICOLON@19..20 \";\"\n   WHITESPACE@20..21 \"\\n\"\n-  STATIC_DEF@21..46\n+  STATIC@21..46\n     STATIC_KW@21..27 \"static\"\n     WHITESPACE@27..28 \" \"\n     MUT_KW@28..31 \"mut\""}, {"sha": "dd1b9c9a0a4215c6138cc5533431e1633ff635ce", "filename": "crates/ra_syntax/test_data/parser/ok/0024_const_item.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0024_const_item.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..64\n-  CONST_DEF@0..17\n+  CONST@0..17\n     CONST_KW@0..5 \"const\"\n     WHITESPACE@5..6 \" \"\n     UNDERSCORE@6..7 \"_\"\n@@ -17,7 +17,7 @@ SOURCE_FILE@0..64\n       INT_NUMBER@15..16 \"0\"\n     SEMICOLON@16..17 \";\"\n   WHITESPACE@17..18 \"\\n\"\n-  CONST_DEF@18..38\n+  CONST@18..38\n     CONST_KW@18..23 \"const\"\n     WHITESPACE@23..24 \" \"\n     NAME@24..27\n@@ -36,7 +36,7 @@ SOURCE_FILE@0..64\n       INT_NUMBER@35..37 \"92\"\n     SEMICOLON@37..38 \";\"\n   WHITESPACE@38..39 \"\\n\"\n-  CONST_DEF@39..63\n+  CONST@39..63\n     CONST_KW@39..44 \"const\"\n     WHITESPACE@44..45 \" \"\n     MUT_KW@45..48 \"mut\""}, {"sha": "7a54fa11320b542ee025678ec42d5fcf9e806d85", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -262,10 +262,10 @@ SOURCE_FILE@0..395\n     NAME@348..349\n       IDENT@348..349 \"A\"\n     WHITESPACE@349..350 \" \"\n-    ENUM_VARIANT_LIST@350..367\n+    VARIANT_LIST@350..367\n       L_CURLY@350..351 \"{\"\n       WHITESPACE@351..356 \"\\n    \"\n-      ENUM_VARIANT@356..365\n+      VARIANT@356..365\n         NAME@356..357\n           IDENT@356..357 \"B\"\n         TUPLE_FIELD_LIST@357..365"}, {"sha": "485efe20cf323567d573a32c6ce4673ac8ec84f8", "filename": "crates/ra_syntax/test_data/parser/ok/0066_default_const.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0066_default_const.rast?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -19,7 +19,7 @@ SOURCE_FILE@0..46\n     ASSOC_ITEM_LIST@15..45\n       L_CURLY@15..16 \"{\"\n       WHITESPACE@16..19 \"\\n  \"\n-      CONST_DEF@19..43\n+      CONST@19..43\n         DEFAULT_KW@19..26 \"default\"\n         WHITESPACE@26..27 \" \"\n         CONST_KW@27..32 \"const\""}, {"sha": "fd51233019980f28716c936b6c0881b3e06bf916", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -34,14 +34,14 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n         SyntaxKind::FN => lsp_types::SymbolKind::Function,\n         SyntaxKind::STRUCT => lsp_types::SymbolKind::Struct,\n         SyntaxKind::ENUM => lsp_types::SymbolKind::Enum,\n-        SyntaxKind::ENUM_VARIANT => lsp_types::SymbolKind::EnumMember,\n+        SyntaxKind::VARIANT => lsp_types::SymbolKind::EnumMember,\n         SyntaxKind::TRAIT_DEF => lsp_types::SymbolKind::Interface,\n         SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,\n         SyntaxKind::MODULE => lsp_types::SymbolKind::Module,\n         SyntaxKind::TYPE_ALIAS => lsp_types::SymbolKind::TypeParameter,\n         SyntaxKind::RECORD_FIELD => lsp_types::SymbolKind::Field,\n-        SyntaxKind::STATIC_DEF => lsp_types::SymbolKind::Constant,\n-        SyntaxKind::CONST_DEF => lsp_types::SymbolKind::Constant,\n+        SyntaxKind::STATIC => lsp_types::SymbolKind::Constant,\n+        SyntaxKind::CONST => lsp_types::SymbolKind::Constant,\n         SyntaxKind::IMPL_DEF => lsp_types::SymbolKind::Object,\n         _ => lsp_types::SymbolKind::Variable,\n     }"}, {"sha": "56e3f4b0a468a1665e2962598625937bac3b55a7", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -101,8 +101,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"EXTERN_CRATE\",\n         \"MODULE\",\n         \"USE\",\n-        \"STATIC_DEF\",\n-        \"CONST_DEF\",\n+        \"STATIC\",\n+        \"CONST\",\n         \"TRAIT_DEF\",\n         \"IMPL_DEF\",\n         \"TYPE_ALIAS\",\n@@ -179,12 +179,12 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"BIN_EXPR\",\n         \"EXTERN_BLOCK\",\n         \"EXTERN_ITEM_LIST\",\n-        \"ENUM_VARIANT\",\n+        \"VARIANT\",\n         \"RECORD_FIELD_LIST\",\n         \"RECORD_FIELD\",\n         \"TUPLE_FIELD_LIST\",\n         \"TUPLE_FIELD\",\n-        \"ENUM_VARIANT_LIST\",\n+        \"VARIANT_LIST\",\n         \"ITEM_LIST\",\n         \"ASSOC_ITEM_LIST\",\n         \"ATTR\","}, {"sha": "ef7c3e50e28765b819233313fbe3b7e76371b7b2", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8e2d67dd4462904f2803d64c651f4630ee595f4/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/c8e2d67dd4462904f2803d64c651f4630ee595f4/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=c8e2d67dd4462904f2803d64c651f4630ee595f4", "patch": "@@ -4,15 +4,15 @@ SourceFile =\n   Item*\n \n Item =\n-  ConstDef\n+  Const\n | Enum\n | ExternBlock\n | ExternCrate\n | Fn\n | ImplDef\n | MacroCall\n | Module\n-| StaticDef\n+| Static\n | Struct\n | TraitDef\n | TypeAlias\n@@ -100,18 +100,26 @@ FieldList =\n \n Enum =\n   Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n-  variant_list:EnumVariantList\n+  VariantList\n \n-EnumVariantList =\n- '{' variants:EnumVariant* '}'\n+VariantList =\n+ '{' (Variant (',' Variant)* ','?)? '}'\n \n-EnumVariant =\n+Variant =\n   Attr* Visibility? Name FieldList ('=' Expr)?\n \n Union =\n   Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n   RecordFieldList\n \n+Const =\n+  Attr* Visibility? 'default'? 'const' (Name | '_') ':' ascribed_type:TypeRef\n+  '=' body:Expr ';'\n+\n+Static =\n+  Attr* Visibility? 'static'? 'mut'? Name ':' ascribed_type:TypeRef\n+  '=' body:Expr ';'\n+\n TraitDef =\n   Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList\n   (':' TypeBoundList?)? WhereClause\n@@ -120,14 +128,6 @@ TraitDef =\n AssocItemList =\n   '{' AssocItem* '}'\n \n-ConstDef =\n-  Attr* Visibility? 'default'? 'const' Name ':' ascribed_type:TypeRef\n-  '=' body:Expr ';'\n-\n-StaticDef =\n-  Attr* Visibility? 'static'? 'mut'? 'static' Name ':' ascribed_type:TypeRef\n-  '=' body:Expr ';'\n-\n ImplDef =\n  Attr* Visibility? 'const'? 'default'? 'unsafe'? 'impl' GenericParamList? '!'? 'for'\n  WhereClause?\n@@ -475,11 +475,11 @@ TypeRef =\n AssocItem =\n   Fn\n | TypeAlias\n-| ConstDef\n+| Const\n | MacroCall\n \n ExternItem =\n-  Fn | StaticDef\n+  Fn | Static\n \n AttrInput =\n   Literal"}]}