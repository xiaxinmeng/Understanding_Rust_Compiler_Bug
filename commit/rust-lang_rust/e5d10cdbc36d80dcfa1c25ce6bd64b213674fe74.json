{"sha": "e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "node_id": "C_kwDOAAsO6NoAKGU1ZDEwY2RiYzM2ZDgwZGNmYTFjMjVjZTZiZDY0YjIxMzY3NGZlNzQ", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-20T19:46:39Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-07T04:32:39Z"}, "message": "make (try_)subst_and_normalize_erasing_regions take EarlyBinder", "tree": {"sha": "495c2ff9d24a0c4f85af2a618f125752967ad119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495c2ff9d24a0c4f85af2a618f125752967ad119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "html_url": "https://github.com/rust-lang/rust/commit/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bee196cb85b5e7f45118a791360161c46cf000", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bee196cb85b5e7f45118a791360161c46cf000", "html_url": "https://github.com/rust-lang/rust/commit/34bee196cb85b5e7f45118a791360161c46cf000"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "3fff112a02056ac970bd23cbd42e93a7294e4e8d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope<'ll, 'tcx>(\n             let callee = cx.tcx.subst_and_normalize_erasing_regions(\n                 instance.substs,\n                 ty::ParamEnv::reveal_all(),\n-                callee,\n+                ty::EarlyBinder(callee),\n             );\n             let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, callee_fn_abi, None)"}, {"sha": "c3f0a0033b0eadcfbbd5eca07efeddf0b6a78c49", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -529,7 +529,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     let impl_self_ty = cx.tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        cx.tcx.type_of(impl_def_id).skip_binder(),\n+                        cx.tcx.type_of(impl_def_id),\n                     );\n \n                     // Only \"class\" methods are generally understood by LLVM,"}, {"sha": "be584148595b3719d9248380df32a2496dbe0b66", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> Instance<'tcx> {\n     /// lifetimes erased, allowing a `ParamEnv` to be specified for use during normalization.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n-        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty.skip_binder())\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty)\n     }\n \n     /// Finds a crate that contains a monomorphization of this instance that\n@@ -600,7 +600,7 @@ impl<'tcx> Instance<'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n-            tcx.subst_and_normalize_erasing_regions(substs, param_env, v)\n+            tcx.subst_and_normalize_erasing_regions(substs, param_env, ty::EarlyBinder(v))\n         } else {\n             tcx.normalize_erasing_regions(param_env, v)\n         }\n@@ -617,7 +617,7 @@ impl<'tcx> Instance<'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n-            tcx.try_subst_and_normalize_erasing_regions(substs, param_env, v)\n+            tcx.try_subst_and_normalize_erasing_regions(substs, param_env, ty::EarlyBinder(v))\n         } else {\n             tcx.try_normalize_erasing_regions(param_env, v)\n         }"}, {"sha": "9332b0430ffca294bcbbea218abb6ddef9b34365", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -151,7 +151,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n \n@@ -163,7 +163,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -175,7 +175,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.try_normalize_erasing_regions(param_env, substituted)\n     }\n }"}, {"sha": "37b7f6bf8a8fcc61e11c556b577467075e45fb15", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -310,7 +310,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        tcx.type_of(impl_def_id).skip_binder(),\n+                        tcx.type_of(impl_def_id),\n                     );\n                     if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                         return Some(def_id);"}, {"sha": "d12bfc6f6bb1d6d6588b403ed7c2cff54a5b501e", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -29,12 +29,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            before_feature_tys,\n+            ty::EarlyBinder(before_feature_tys),\n         );\n         let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            after_feature_tys,\n+            ty::EarlyBinder(after_feature_tys),\n         );\n \n         let new_size = tcx"}, {"sha": "ec577072e196f59f5572cf46a8b25f43d216e6a1", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -27,8 +27,7 @@ fn resolve_instance<'tcx>(\n         )\n     } else {\n         let ty = tcx.type_of(def);\n-        let item_type =\n-            tcx.subst_and_normalize_erasing_regions(substs, param_env, ty.skip_binder());\n+        let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);\n \n         let def = match *item_type.kind() {\n             ty::FnDef(def_id, ..) if tcx.is_intrinsic(def_id) => {"}, {"sha": "87641c686dcfd729d0147fa82c0c859d86bec26e", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=e5d10cdbc36d80dcfa1c25ce6bd64b213674fe74", "patch": "@@ -435,7 +435,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, output_ty) {\n+                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}]}