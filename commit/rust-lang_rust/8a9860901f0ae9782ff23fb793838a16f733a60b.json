{"sha": "8a9860901f0ae9782ff23fb793838a16f733a60b", "node_id": "C_kwDOAAsO6NoAKDhhOTg2MDkwMWYwYWU5NzgyZmYyM2ZiNzkzODM4YTE2ZjczM2E2MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T11:18:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T11:18:48Z"}, "message": "Auto merge of #10028 - mkrasnitski:extra_unused_type_parameters, r=flip1995\n\nAdd `extra_unused_type_parameters` lint\n\nCloses #9240. ~~Keeping this as draft for now, because of a bug that I don't know how to fix.~~ It seems that opaque return types are not walked properly, for some unknown reason. As in, the following:\n\n```rust\nfn used_ret_opaque<A>() -> impl Iterator<Item = A> {\n    std::iter::empty()\n}\n```\nThis triggers the lint even though it shouldn't. Discussion on Zulip didn't illuminate any possible reasons why, so PR-ing this now to increase visibility.\n\n---\n\nchangelog: new lint: [`extra_unused_type_parameters`]\n[#10028](https://github.com/rust-lang/rust-clippy/pull/10028)\n<!-- changelog_checked -->", "tree": {"sha": "2ca010fb11e8bc3e71af454f906b621c094a28eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ca010fb11e8bc3e71af454f906b621c094a28eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9860901f0ae9782ff23fb793838a16f733a60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9860901f0ae9782ff23fb793838a16f733a60b", "html_url": "https://github.com/rust-lang/rust/commit/8a9860901f0ae9782ff23fb793838a16f733a60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9860901f0ae9782ff23fb793838a16f733a60b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006a4cc7670eebd63236a16fb6495060f83d1cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/006a4cc7670eebd63236a16fb6495060f83d1cbc", "html_url": "https://github.com/rust-lang/rust/commit/006a4cc7670eebd63236a16fb6495060f83d1cbc"}, {"sha": "fba16e2e3a6f743cb23c7793851a4f0201b21722", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba16e2e3a6f743cb23c7793851a4f0201b21722", "html_url": "https://github.com/rust-lang/rust/commit/fba16e2e3a6f743cb23c7793851a4f0201b21722"}], "stats": {"total": 450, "additions": 384, "deletions": 66}, "files": [{"sha": "659e8aebcd5799a12ecfcf3099fb6672a22a9b01", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -4383,6 +4383,7 @@ Released 2018-09-13\n [`extend_from_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#extend_from_slice\n [`extend_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#extend_with_drain\n [`extra_unused_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n+[`extra_unused_type_parameters`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters\n [`fallible_impl_from`]: https://rust-lang.github.io/rust-clippy/master/index.html#fallible_impl_from\n [`field_reassign_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#field_reassign_with_default\n [`filetype_is_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file"}, {"sha": "95f6d2cc45c83ca291f14d6f2796740192ba2239", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 550 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 600 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n Lints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\n You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category."}, {"sha": "df4a1f2702e47f9528ec4e41f6d1cb29d9a877ec", "filename": "book/src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -6,7 +6,7 @@\n A collection of lints to catch common mistakes and improve your\n [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 550 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 600 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n Lints are divided into categories, each with a default [lint\n level](https://doc.rust-lang.org/rustc/lints/levels.html). You can choose how"}, {"sha": "457a25826e7997764107ca49d9a7c22ce652b99c", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -156,6 +156,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::exhaustive_items::EXHAUSTIVE_STRUCTS_INFO,\n     crate::exit::EXIT_INFO,\n     crate::explicit_write::EXPLICIT_WRITE_INFO,\n+    crate::extra_unused_type_parameters::EXTRA_UNUSED_TYPE_PARAMETERS_INFO,\n     crate::fallible_impl_from::FALLIBLE_IMPL_FROM_INFO,\n     crate::float_literal::EXCESSIVE_PRECISION_INFO,\n     crate::float_literal::LOSSY_FLOAT_LITERAL_INFO,"}, {"sha": "2fdd8a71466c07512ba3368312333b616151a6d1", "filename": "clippy_lints/src/extra_unused_type_parameters.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -0,0 +1,178 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::trait_ref_of_method;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::MultiSpan;\n+use rustc_hir::intravisit::{walk_impl_item, walk_item, walk_param_bound, walk_ty, Visitor};\n+use rustc_hir::{\n+    GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind, PredicateOrigin, Ty, TyKind, WherePredicate,\n+};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::nested_filter;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{def_id::DefId, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for type parameters in generics that are never used anywhere else.\n+    ///\n+    /// ### Why is this bad?\n+    /// Functions cannot infer the value of unused type parameters; therefore, calling them\n+    /// requires using a turbofish, which serves no purpose but to satisfy the compiler.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // unused type parameters\n+    /// fn unused_ty<T>(x: u8) {\n+    ///     // ..\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn no_unused_ty(x: u8) {\n+    ///     // ..\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub EXTRA_UNUSED_TYPE_PARAMETERS,\n+    complexity,\n+    \"unused type parameters in function definitions\"\n+}\n+declare_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n+\n+/// A visitor struct that walks a given function and gathers generic type parameters, plus any\n+/// trait bounds those parameters have.\n+struct TypeWalker<'cx, 'tcx> {\n+    cx: &'cx LateContext<'tcx>,\n+    /// Collection of all the type parameters and their spans.\n+    ty_params: FxHashMap<DefId, Span>,\n+    /// Collection of any (inline) trait bounds corresponding to each type parameter.\n+    bounds: FxHashMap<DefId, Span>,\n+    /// The entire `Generics` object of the function, useful for querying purposes.\n+    generics: &'tcx Generics<'tcx>,\n+    /// The value of this will remain `true` if *every* parameter:\n+    ///   1. Is a type parameter, and\n+    ///   2. Goes unused in the function.\n+    /// Otherwise, if any type parameters end up being used, or if any lifetime or const-generic\n+    /// parameters are present, this will be set to `false`.\n+    all_params_unused: bool,\n+}\n+\n+impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n+    fn new(cx: &'cx LateContext<'tcx>, generics: &'tcx Generics<'tcx>) -> Self {\n+        let mut all_params_unused = true;\n+        let ty_params = generics\n+            .params\n+            .iter()\n+            .filter_map(|param| {\n+                if let GenericParamKind::Type { .. } = param.kind {\n+                    Some((param.def_id.into(), param.span))\n+                } else {\n+                    if !param.is_elided_lifetime() {\n+                        all_params_unused = false;\n+                    }\n+                    None\n+                }\n+            })\n+            .collect();\n+        Self {\n+            cx,\n+            ty_params,\n+            bounds: FxHashMap::default(),\n+            generics,\n+            all_params_unused,\n+        }\n+    }\n+\n+    fn emit_lint(&self) {\n+        let (msg, help) = match self.ty_params.len() {\n+            0 => return,\n+            1 => (\n+                \"type parameter goes unused in function definition\",\n+                \"consider removing the parameter\",\n+            ),\n+            _ => (\n+                \"type parameters go unused in function definition\",\n+                \"consider removing the parameters\",\n+            ),\n+        };\n+\n+        let source_map = self.cx.tcx.sess.source_map();\n+        let span = if self.all_params_unused {\n+            self.generics.span.into() // Remove the entire list of generics\n+        } else {\n+            MultiSpan::from_spans(\n+                self.ty_params\n+                    .iter()\n+                    .map(|(def_id, &span)| {\n+                        // Extend the span past any trait bounds, and include the comma at the end.\n+                        let span_to_extend = self.bounds.get(def_id).copied().map_or(span, Span::shrink_to_hi);\n+                        let comma_range = source_map.span_extend_to_next_char(span_to_extend, '>', false);\n+                        let comma_span = source_map.span_through_char(comma_range, ',');\n+                        span.with_hi(comma_span.hi())\n+                    })\n+                    .collect(),\n+            )\n+        };\n+\n+        span_lint_and_help(self.cx, EXTRA_UNUSED_TYPE_PARAMETERS, span, msg, None, help);\n+    }\n+}\n+\n+impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n+    type NestedFilter = nested_filter::OnlyBodies;\n+\n+    fn visit_ty(&mut self, t: &'tcx Ty<'tcx>) {\n+        if let Some((def_id, _)) = t.peel_refs().as_generic_param() {\n+            if self.ty_params.remove(&def_id).is_some() {\n+                self.all_params_unused = false;\n+            }\n+        } else if let TyKind::OpaqueDef(id, _, _) = t.kind {\n+            // Explicitly walk OpaqueDef. Normally `walk_ty` would do the job, but it calls\n+            // `visit_nested_item`, which checks that `Self::NestedFilter::INTER` is set. We're\n+            // using `OnlyBodies`, so the check ends up failing and the type isn't fully walked.\n+            let item = self.nested_visit_map().item(id);\n+            walk_item(self, item);\n+        } else {\n+            walk_ty(self, t);\n+        }\n+    }\n+\n+    fn visit_where_predicate(&mut self, predicate: &'tcx WherePredicate<'tcx>) {\n+        if let WherePredicate::BoundPredicate(predicate) = predicate {\n+            // Collect spans for bounds that appear in the list of generics (not in a where-clause)\n+            // for use in forming the help message\n+            if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param()\n+                && let PredicateOrigin::GenericParam = predicate.origin\n+            {\n+                self.bounds.insert(def_id, predicate.span);\n+            }\n+            // Only walk the right-hand side of where-bounds\n+            for bound in predicate.bounds {\n+                walk_param_bound(self, bound);\n+            }\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Fn(_, generics, _) = item.kind {\n+            let mut walker = TypeWalker::new(cx, generics);\n+            walk_item(&mut walker, item);\n+            walker.emit_lint();\n+        }\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'tcx>) {\n+        // Only lint on inherent methods, not trait methods.\n+        if let ImplItemKind::Fn(..) = item.kind && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n+            let mut walker = TypeWalker::new(cx, item.generics);\n+            walk_impl_item(&mut walker, item);\n+            walker.emit_lint();\n+        }\n+    }\n+}"}, {"sha": "2f5c4adca9f101279cfe348873e50a79f1d693fc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -122,6 +122,7 @@ mod excessive_bools;\n mod exhaustive_items;\n mod exit;\n mod explicit_write;\n+mod extra_unused_type_parameters;\n mod fallible_impl_from;\n mod float_literal;\n mod floating_point_arithmetic;\n@@ -910,6 +911,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n     store.register_late_pass(|_| Box::new(multiple_unsafe_ops_per_block::MultipleUnsafeOpsPerBlock));\n+    store.register_late_pass(|_| Box::new(extra_unused_type_parameters::ExtraUnusedTypeParameters));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "5cb80cb6233f73d9f601458d302374ea1a1fef15", "filename": "tests/ui/extra_unused_type_parameters.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -0,0 +1,69 @@\n+#![allow(unused, clippy::needless_lifetimes)]\n+#![warn(clippy::extra_unused_type_parameters)]\n+\n+fn unused_ty<T>(x: u8) {}\n+\n+fn unused_multi<T, U>(x: u8) {}\n+\n+fn unused_with_lt<'a, T>(x: &'a u8) {}\n+\n+fn used_ty<T>(x: T, y: u8) {}\n+\n+fn used_ref<'a, T>(x: &'a T) {}\n+\n+fn used_ret<T: Default>(x: u8) -> T {\n+    T::default()\n+}\n+\n+fn unused_bounded<T: Default, U>(x: U) {}\n+\n+fn unused_where_clause<T, U>(x: U)\n+where\n+    T: Default,\n+{\n+}\n+\n+fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+\n+fn used_opaque<A>(iter: impl Iterator<Item = A>) -> usize {\n+    iter.count()\n+}\n+\n+fn used_ret_opaque<A>() -> impl Iterator<Item = A> {\n+    std::iter::empty()\n+}\n+\n+fn used_vec_box<T>(x: Vec<Box<T>>) {}\n+\n+fn used_body<T: Default + ToString>() -> String {\n+    T::default().to_string()\n+}\n+\n+fn used_closure<T: Default + ToString>() -> impl Fn() {\n+    || println!(\"{}\", T::default().to_string())\n+}\n+\n+struct S;\n+\n+impl S {\n+    fn unused_ty_impl<T>(&self) {}\n+}\n+\n+// Don't lint on trait methods\n+trait Foo {\n+    fn bar<T>(&self);\n+}\n+\n+impl Foo for S {\n+    fn bar<T>(&self) {}\n+}\n+\n+fn skip_index<A, Iter>(iter: Iter, index: usize) -> impl Iterator<Item = A>\n+where\n+    Iter: Iterator<Item = A>,\n+{\n+    iter.enumerate()\n+        .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n+}\n+\n+fn main() {}"}, {"sha": "1c8dd53e6385970ad947dc4eceef68b5be6a4d3e", "filename": "tests/ui/extra_unused_type_parameters.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fextra_unused_type_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fextra_unused_type_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.stderr?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -0,0 +1,59 @@\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:4:13\n+   |\n+LL | fn unused_ty<T>(x: u8) {}\n+   |             ^^^\n+   |\n+   = help: consider removing the parameter\n+   = note: `-D clippy::extra-unused-type-parameters` implied by `-D warnings`\n+\n+error: type parameters go unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:6:16\n+   |\n+LL | fn unused_multi<T, U>(x: u8) {}\n+   |                ^^^^^^\n+   |\n+   = help: consider removing the parameters\n+\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:8:23\n+   |\n+LL | fn unused_with_lt<'a, T>(x: &'a u8) {}\n+   |                       ^\n+   |\n+   = help: consider removing the parameter\n+\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:18:19\n+   |\n+LL | fn unused_bounded<T: Default, U>(x: U) {}\n+   |                   ^^^^^^^^^^^\n+   |\n+   = help: consider removing the parameter\n+\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:20:24\n+   |\n+LL | fn unused_where_clause<T, U>(x: U)\n+   |                        ^^\n+   |\n+   = help: consider removing the parameter\n+\n+error: type parameters go unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:26:16\n+   |\n+LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+   |                ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^\n+   |\n+   = help: consider removing the parameters\n+\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:49:22\n+   |\n+LL |     fn unused_ty_impl<T>(&self) {}\n+   |                      ^^^\n+   |\n+   = help: consider removing the parameter\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "d286ef4ba378878e74540cca4528709cd3785bd9", "filename": "tests/ui/needless_lifetimes.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.fixed?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -5,6 +5,7 @@\n #![allow(\n     unused,\n     clippy::boxed_local,\n+    clippy::extra_unused_type_parameters,\n     clippy::needless_pass_by_value,\n     clippy::unnecessary_wraps,\n     dyn_drop,"}, {"sha": "409528b291db19d7e480f61161888ee6c47f0413", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -5,6 +5,7 @@\n #![allow(\n     unused,\n     clippy::boxed_local,\n+    clippy::extra_unused_type_parameters,\n     clippy::needless_pass_by_value,\n     clippy::unnecessary_wraps,\n     dyn_drop,"}, {"sha": "4e3c8f20d8c5238c2da9deaa6a83d085d6c94a42", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,5 +1,5 @@\n error: the following explicit lifetimes could be elided: 'a, 'b\n-  --> $DIR/needless_lifetimes.rs:17:1\n+  --> $DIR/needless_lifetimes.rs:18:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL + fn distinct_lifetimes(_x: &u8, _y: &u8, _z: u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a, 'b\n-  --> $DIR/needless_lifetimes.rs:19:1\n+  --> $DIR/needless_lifetimes.rs:20:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL + fn distinct_and_static(_x: &u8, _y: &u8, _z: &'static u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:29:1\n+  --> $DIR/needless_lifetimes.rs:30:1\n    |\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL + fn in_and_out(x: &u8, _y: u8) -> &u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 'b\n-  --> $DIR/needless_lifetimes.rs:41:1\n+  --> $DIR/needless_lifetimes.rs:42:1\n    |\n LL | fn multiple_in_and_out_2a<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL + fn multiple_in_and_out_2a<'a>(x: &'a u8, _y: &u8) -> &'a u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:48:1\n+  --> $DIR/needless_lifetimes.rs:49:1\n    |\n LL | fn multiple_in_and_out_2b<'a, 'b>(_x: &'a u8, y: &'b u8) -> &'b u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL + fn multiple_in_and_out_2b<'b>(_x: &u8, y: &'b u8) -> &'b u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 'b\n-  --> $DIR/needless_lifetimes.rs:65:1\n+  --> $DIR/needless_lifetimes.rs:66:1\n    |\n LL | fn deep_reference_1a<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL + fn deep_reference_1a<'a>(x: &'a u8, _y: &u8) -> Result<&'a u8, ()> {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:72:1\n+  --> $DIR/needless_lifetimes.rs:73:1\n    |\n LL | fn deep_reference_1b<'a, 'b>(_x: &'a u8, y: &'b u8) -> Result<&'b u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,7 +84,7 @@ LL + fn deep_reference_1b<'b>(_x: &u8, y: &'b u8) -> Result<&'b u8, ()> {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:81:1\n+  --> $DIR/needless_lifetimes.rs:82:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -96,7 +96,7 @@ LL + fn deep_reference_3(x: &u8, _y: u8) -> Result<&u8, ()> {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:86:1\n+  --> $DIR/needless_lifetimes.rs:87:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL + fn where_clause_without_lt<T>(x: &u8, _y: u8) -> Result<&u8, ()>\n    |\n \n error: the following explicit lifetimes could be elided: 'a, 'b\n-  --> $DIR/needless_lifetimes.rs:98:1\n+  --> $DIR/needless_lifetimes.rs:99:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL + fn lifetime_param_2(_x: Ref<'_>, _y: &u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:122:1\n+  --> $DIR/needless_lifetimes.rs:123:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL + fn fn_bound_2<F, I>(_m: Lt<'_, I>, _f: F) -> Lt<'_, I>\n    |\n \n error: the following explicit lifetimes could be elided: 's\n-  --> $DIR/needless_lifetimes.rs:152:5\n+  --> $DIR/needless_lifetimes.rs:153:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL +     fn self_and_out(&self) -> &u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 't\n-  --> $DIR/needless_lifetimes.rs:159:5\n+  --> $DIR/needless_lifetimes.rs:160:5\n    |\n LL |     fn self_and_in_out_1<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ LL +     fn self_and_in_out_1<'s>(&'s self, _x: &u8) -> &'s u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 's\n-  --> $DIR/needless_lifetimes.rs:166:5\n+  --> $DIR/needless_lifetimes.rs:167:5\n    |\n LL |     fn self_and_in_out_2<'s, 't>(&'s self, x: &'t u8) -> &'t u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,7 +168,7 @@ LL +     fn self_and_in_out_2<'t>(&self, x: &'t u8) -> &'t u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 's, 't\n-  --> $DIR/needless_lifetimes.rs:170:5\n+  --> $DIR/needless_lifetimes.rs:171:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -180,7 +180,7 @@ LL +     fn distinct_self_and_in(&self, _x: &u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:189:1\n+  --> $DIR/needless_lifetimes.rs:190:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -192,7 +192,7 @@ LL + fn struct_with_lt(_foo: Foo<'_>) -> &str {\n    |\n \n error: the following explicit lifetimes could be elided: 'b\n-  --> $DIR/needless_lifetimes.rs:207:1\n+  --> $DIR/needless_lifetimes.rs:208:1\n    |\n LL | fn struct_with_lt4a<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +204,7 @@ LL + fn struct_with_lt4a<'a>(_foo: &'a Foo<'_>) -> &'a str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:215:1\n+  --> $DIR/needless_lifetimes.rs:216:1\n    |\n LL | fn struct_with_lt4b<'a, 'b>(_foo: &'a Foo<'b>) -> &'b str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -216,7 +216,7 @@ LL + fn struct_with_lt4b<'b>(_foo: &Foo<'b>) -> &'b str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:230:1\n+  --> $DIR/needless_lifetimes.rs:231:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -228,7 +228,7 @@ LL + fn trait_obj_elided2(_arg: &dyn Drop) -> &str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:236:1\n+  --> $DIR/needless_lifetimes.rs:237:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -240,7 +240,7 @@ LL + fn alias_with_lt(_foo: FooAlias<'_>) -> &str {\n    |\n \n error: the following explicit lifetimes could be elided: 'b\n-  --> $DIR/needless_lifetimes.rs:254:1\n+  --> $DIR/needless_lifetimes.rs:255:1\n    |\n LL | fn alias_with_lt4a<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -252,7 +252,7 @@ LL + fn alias_with_lt4a<'a>(_foo: &'a FooAlias<'_>) -> &'a str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:262:1\n+  --> $DIR/needless_lifetimes.rs:263:1\n    |\n LL | fn alias_with_lt4b<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'b str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -264,7 +264,7 @@ LL + fn alias_with_lt4b<'b>(_foo: &FooAlias<'b>) -> &'b str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:266:1\n+  --> $DIR/needless_lifetimes.rs:267:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -276,7 +276,7 @@ LL + fn named_input_elided_output(_arg: &str) -> &str {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:274:1\n+  --> $DIR/needless_lifetimes.rs:275:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,7 +288,7 @@ LL + fn trait_bound_ok<T: WithLifetime<'static>>(_: &u8, _: T) {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:310:1\n+  --> $DIR/needless_lifetimes.rs:311:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -300,7 +300,7 @@ LL + fn out_return_type_lts(e: &str) -> Cow<'_> {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:317:9\n+  --> $DIR/needless_lifetimes.rs:318:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -312,7 +312,7 @@ LL +         fn needless_lt(x: &u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:321:9\n+  --> $DIR/needless_lifetimes.rs:322:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -324,7 +324,7 @@ LL +         fn needless_lt(_x: &u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:334:9\n+  --> $DIR/needless_lifetimes.rs:335:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -336,7 +336,7 @@ LL +         fn baz(&self) -> impl Foo + '_ {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:366:5\n+  --> $DIR/needless_lifetimes.rs:367:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -348,7 +348,7 @@ LL +     fn impl_trait_elidable_nested_anonymous_lifetimes(i: &i32, f: impl Fn(&\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:375:5\n+  --> $DIR/needless_lifetimes.rs:376:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -360,7 +360,7 @@ LL +     fn generics_elidable<T: Fn(&i32) -> &i32>(i: &i32, f: T) -> &i32 {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:387:5\n+  --> $DIR/needless_lifetimes.rs:388:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -372,7 +372,7 @@ LL +     fn where_clause_elidadable<T>(i: &i32, f: T) -> &i32\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:402:5\n+  --> $DIR/needless_lifetimes.rs:403:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -384,7 +384,7 @@ LL +     fn pointer_fn_elidable(i: &i32, f: fn(&i32) -> &i32) -> &i32 {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:415:5\n+  --> $DIR/needless_lifetimes.rs:416:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -396,7 +396,7 @@ LL +     fn nested_fn_pointer_3(_: &i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:418:5\n+  --> $DIR/needless_lifetimes.rs:419:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -408,7 +408,7 @@ LL +     fn nested_fn_pointer_4(_: &i32) -> impl Fn(fn(&i32)) {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:440:9\n+  --> $DIR/needless_lifetimes.rs:441:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -420,7 +420,7 @@ LL +         fn implicit(&self) -> &() {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:443:9\n+  --> $DIR/needless_lifetimes.rs:444:9\n    |\n LL |         fn implicit_mut<'a>(&'a mut self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -432,7 +432,7 @@ LL +         fn implicit_mut(&mut self) -> &() {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:454:9\n+  --> $DIR/needless_lifetimes.rs:455:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -444,7 +444,7 @@ LL +         fn lifetime_elsewhere(self: Box<Self>, here: &()) -> &() {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:460:9\n+  --> $DIR/needless_lifetimes.rs:461:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -456,7 +456,7 @@ LL +         fn implicit(&self) -> &();\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:461:9\n+  --> $DIR/needless_lifetimes.rs:462:9\n    |\n LL |         fn implicit_provided<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -468,7 +468,7 @@ LL +         fn implicit_provided(&self) -> &() {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:470:9\n+  --> $DIR/needless_lifetimes.rs:471:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -480,7 +480,7 @@ LL +         fn lifetime_elsewhere(self: Box<Self>, here: &()) -> &();\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:471:9\n+  --> $DIR/needless_lifetimes.rs:472:9\n    |\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -492,7 +492,7 @@ LL +         fn lifetime_elsewhere_provided(self: Box<Self>, here: &()) -> &() {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:480:5\n+  --> $DIR/needless_lifetimes.rs:481:5\n    |\n LL |     fn foo<'a>(x: &'a u8, y: &'_ u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -504,7 +504,7 @@ LL +     fn foo(x: &u8, y: &'_ u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:482:5\n+  --> $DIR/needless_lifetimes.rs:483:5\n    |\n LL |     fn bar<'a>(x: &'a u8, y: &'_ u8, z: &'_ u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -516,7 +516,7 @@ LL +     fn bar(x: &u8, y: &'_ u8, z: &'_ u8) {}\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:489:5\n+  --> $DIR/needless_lifetimes.rs:490:5\n    |\n LL |     fn one_input<'a>(x: &'a u8) -> &'a u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -528,7 +528,7 @@ LL +     fn one_input(x: &u8) -> &u8 {\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:494:5\n+  --> $DIR/needless_lifetimes.rs:495:5\n    |\n LL |     fn multiple_inputs_output_not_elided<'a, 'b>(x: &'a u8, y: &'b u8, z: &'b u8) -> &'b u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -540,7 +540,7 @@ LL +     fn multiple_inputs_output_not_elided<'b>(x: &u8, y: &'b u8, z: &'b u8)\n    |\n \n error: the following explicit lifetimes could be elided: 'a\n-  --> $DIR/needless_lifetimes.rs:507:13\n+  --> $DIR/needless_lifetimes.rs:508:13\n    |\n LL |             fn one_input<'a>(x: &'a u8) -> &'a u8 {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7803418cb047dbd0ff25c097d68ebfe9d8b8567b", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,4 +1,9 @@\n-#![allow(dead_code, clippy::missing_safety_doc, clippy::extra_unused_lifetimes)]\n+#![allow(\n+    dead_code,\n+    clippy::missing_safety_doc,\n+    clippy::extra_unused_lifetimes,\n+    clippy::extra_unused_type_parameters\n+)]\n #![warn(clippy::new_without_default)]\n \n pub struct Foo;"}, {"sha": "583dd327d6a5d8856b2cae4eadd2efef217d9b82", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,5 +1,5 @@\n error: you should consider adding a `Default` implementation for `Foo`\n-  --> $DIR/new_without_default.rs:7:5\n+  --> $DIR/new_without_default.rs:12:5\n    |\n LL | /     pub fn new() -> Foo {\n LL | |         Foo\n@@ -17,7 +17,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n-  --> $DIR/new_without_default.rs:15:5\n+  --> $DIR/new_without_default.rs:20:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Bar\n@@ -34,7 +34,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n-  --> $DIR/new_without_default.rs:79:5\n+  --> $DIR/new_without_default.rs:84:5\n    |\n LL | /     pub fn new() -> LtKo<'c> {\n LL | |         unimplemented!()\n@@ -51,7 +51,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n-  --> $DIR/new_without_default.rs:172:5\n+  --> $DIR/new_without_default.rs:177:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         NewNotEqualToDerive { foo: 1 }\n@@ -68,7 +68,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n-  --> $DIR/new_without_default.rs:180:5\n+  --> $DIR/new_without_default.rs:185:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -85,7 +85,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n-  --> $DIR/new_without_default.rs:187:5\n+  --> $DIR/new_without_default.rs:192:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -102,7 +102,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`\n-  --> $DIR/new_without_default.rs:198:9\n+  --> $DIR/new_without_default.rs:203:9\n    |\n LL | /         pub fn new() -> Self {\n LL | |             todo!()"}, {"sha": "276266a2dd80358b1af6d47a1d8b5e7a6a6b60b5", "filename": "tests/ui/redundant_field_names.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "f674141c138e1283912809b8f1863a86d1d4b51d", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "dc24d447c6075a427beddcbf9481ea3dd8b642ff", "filename": "tests/ui/seek_to_start_instead_of_rewind.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.fixed?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -26,7 +26,7 @@ fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n \n // This should NOT trigger clippy warning because\n // StructWithSeekMethod does not implement std::io::Seek;\n-fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+fn seek_to_start_method_owned_false(mut t: StructWithSeekMethod) {\n     t.seek(SeekFrom::Start(0));\n }\n \n@@ -38,7 +38,7 @@ fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n \n // This should NOT trigger clippy warning because\n // StructWithSeekMethod does not implement std::io::Seek;\n-fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+fn seek_to_start_false_trait_owned(mut t: StructWithSeekTrait) {\n     t.seek(SeekFrom::Start(0));\n }\n "}, {"sha": "4adde2c40182d957f90b216dcb8ee00e1d91a035", "filename": "tests/ui/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fseek_to_start_instead_of_rewind.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -26,7 +26,7 @@ fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n \n // This should NOT trigger clippy warning because\n // StructWithSeekMethod does not implement std::io::Seek;\n-fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+fn seek_to_start_method_owned_false(mut t: StructWithSeekMethod) {\n     t.seek(SeekFrom::Start(0));\n }\n \n@@ -38,7 +38,7 @@ fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n \n // This should NOT trigger clippy warning because\n // StructWithSeekMethod does not implement std::io::Seek;\n-fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+fn seek_to_start_false_trait_owned(mut t: StructWithSeekTrait) {\n     t.seek(SeekFrom::Start(0));\n }\n "}, {"sha": "8b4613b3f6ec73f3c7072ce8a20583f5463ccd02", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::type_repetition_in_bounds)]\n+#![allow(clippy::extra_unused_type_parameters)]\n \n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n "}, {"sha": "a90df03c04ffc2738fe848edd8023803d988e577", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a9860901f0ae9782ff23fb793838a16f733a60b/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=8a9860901f0ae9782ff23fb793838a16f733a60b", "patch": "@@ -1,5 +1,5 @@\n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:8:5\n+  --> $DIR/type_repetition_in_bounds.rs:9:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n@@ -12,23 +12,23 @@ LL | #![deny(clippy::type_repetition_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:25:5\n+  --> $DIR/type_repetition_in_bounds.rs:26:5\n    |\n LL |     Self: Copy + Default + Ord,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:85:5\n+  --> $DIR/type_repetition_in_bounds.rs:86:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n    |\n    = help: consider combining the bounds: `T: ?Sized + Clone`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:90:5\n+  --> $DIR/type_repetition_in_bounds.rs:91:5\n    |\n LL |     T: ?Sized,\n    |     ^^^^^^^^^"}]}