{"sha": "7d3119773f218e69ab9e71df4510549b8d61347b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzExOTc3M2YyMThlNjlhYjllNzFkZjQ1MTA1NDliOGQ2MTM0N2I=", "commit": {"author": {"name": "David Mally", "email": "djmally@gmail.com", "date": "2015-03-02T19:32:42Z"}, "committer": {"name": "David Mally", "email": "djmally@gmail.com", "date": "2015-03-02T19:32:42Z"}, "message": "Fixed references to set & take ; minor wording & syntax fixes", "tree": {"sha": "b215245938f6a55180f2114f07e2f64051c4e1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b215245938f6a55180f2114f07e2f64051c4e1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3119773f218e69ab9e71df4510549b8d61347b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3119773f218e69ab9e71df4510549b8d61347b", "html_url": "https://github.com/rust-lang/rust/commit/7d3119773f218e69ab9e71df4510549b8d61347b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3119773f218e69ab9e71df4510549b8d61347b/comments", "author": {"login": "djmally", "id": 2838865, "node_id": "MDQ6VXNlcjI4Mzg4NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2838865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djmally", "html_url": "https://github.com/djmally", "followers_url": "https://api.github.com/users/djmally/followers", "following_url": "https://api.github.com/users/djmally/following{/other_user}", "gists_url": "https://api.github.com/users/djmally/gists{/gist_id}", "starred_url": "https://api.github.com/users/djmally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djmally/subscriptions", "organizations_url": "https://api.github.com/users/djmally/orgs", "repos_url": "https://api.github.com/users/djmally/repos", "events_url": "https://api.github.com/users/djmally/events{/privacy}", "received_events_url": "https://api.github.com/users/djmally/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djmally", "id": 2838865, "node_id": "MDQ6VXNlcjI4Mzg4NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2838865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djmally", "html_url": "https://github.com/djmally", "followers_url": "https://api.github.com/users/djmally/followers", "following_url": "https://api.github.com/users/djmally/following{/other_user}", "gists_url": "https://api.github.com/users/djmally/gists{/gist_id}", "starred_url": "https://api.github.com/users/djmally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djmally/subscriptions", "organizations_url": "https://api.github.com/users/djmally/orgs", "repos_url": "https://api.github.com/users/djmally/repos", "events_url": "https://api.github.com/users/djmally/events{/privacy}", "received_events_url": "https://api.github.com/users/djmally/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc62244113d01e9524ed712210ba52e8471e2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc62244113d01e9524ed712210ba52e8471e2a9", "html_url": "https://github.com/rust-lang/rust/commit/2fc62244113d01e9524ed712210ba52e8471e2a9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2d7e5cddc61cd0b1d3f7489d38be0607cd43b773", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d3119773f218e69ab9e71df4510549b8d61347b/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3119773f218e69ab9e71df4510549b8d61347b/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=7d3119773f218e69ab9e71df4510549b8d61347b", "patch": "@@ -78,7 +78,7 @@\n //! * You want a bit vector.\n //!\n //! ### Use a `BitSet` when:\n-//! * You want a `VecSet`.\n+//! * You want a `BitVec`, but want `Set` properties\n //!\n //! ### Use a `BinaryHeap` when:\n //! * You want to store a bunch of elements, but only ever want to process the \"biggest\"\n@@ -280,16 +280,16 @@\n //! a variant of the `Entry` enum.\n //!\n //! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case the\n-//! only valid operation is to `set` the value of the entry. When this is done,\n+//! only valid operation is to `insert` a value into the entry. When this is done,\n //! the vacant entry is consumed and converted into a mutable reference to the\n //! the value that was inserted. This allows for further manipulation of the value\n //! beyond the lifetime of the search itself. This is useful if complex logic needs to\n //! be performed on the value regardless of whether the value was just inserted.\n //!\n //! If an `Occupied(entry)` is yielded, then the key *was* found. In this case, the user\n-//! has several options: they can `get`, `set`, or `take` the value of the occupied\n+//! has several options: they can `get`, `insert`, or `remove` the value of the occupied\n //! entry. Additionally, they can convert the occupied entry into a mutable reference\n-//! to its value, providing symmetry to the vacant `set` case.\n+//! to its value, providing symmetry to the vacant `insert` case.\n //!\n //! ### Examples\n //!\n@@ -329,7 +329,7 @@\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! // A client of the bar. They have an id and a blood alcohol level.\n-//! struct Person { id: u32, blood_alcohol: f32 };\n+//! struct Person { id: u32, blood_alcohol: f32 }\n //!\n //! // All the orders made to the bar, by client id.\n //! let orders = vec![1,2,1,2,3,4,1,2,2,3,4,1,1,1];"}]}