{"sha": "d45e1314f36ac249e8fb7d9564362ac8f94e49be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWUxMzE0ZjM2YWMyNDllOGZiN2Q5NTY0MzYyYWM4Zjk0ZTQ5YmU=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-14T01:19:01Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-20T18:53:07Z"}, "message": "Change uses of never type", "tree": {"sha": "25a3341090f572e93a857c4f8566f75168eb8ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a3341090f572e93a857c4f8566f75168eb8ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45e1314f36ac249e8fb7d9564362ac8f94e49be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45e1314f36ac249e8fb7d9564362ac8f94e49be", "html_url": "https://github.com/rust-lang/rust/commit/d45e1314f36ac249e8fb7d9564362ac8f94e49be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45e1314f36ac249e8fb7d9564362ac8f94e49be/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389fef3b304bd4f196a337797591d9f8db998a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/389fef3b304bd4f196a337797591d9f8db998a62", "html_url": "https://github.com/rust-lang/rust/commit/389fef3b304bd4f196a337797591d9f8db998a62"}], "stats": {"total": 394, "additions": 198, "deletions": 196}, "files": [{"sha": "5b3f2fa4e8275e19e208fd1743c408a3d6ab70cb", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -50,137 +50,137 @@ pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "5f8839157eafc0b5b6af665cc6f6a4a7d7379747", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -415,14 +415,14 @@ pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "4487e9d636cb005b7e1224b85dcc4f0784416f8e", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -29,7 +29,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a !);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -38,7 +38,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "5ccedece0f84b78eeeb07025b373a629515759af", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -318,129 +318,129 @@ impl UdpSocket {\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -470,14 +470,14 @@ impl LookupHost {\n     }\n \n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "144248d60c9cfb15d644ce99703cc77c44b950f3", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -5,6 +5,7 @@ use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n@@ -35,7 +36,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     sgx_ineffective(())\n }\n \n-pub struct SplitPaths<'a>(&'a !);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -44,7 +45,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cd533761e37326d224965fe66faaab44455dd9d3", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -26,137 +26,137 @@ pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -179,59 +179,59 @@ impl File {\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn truncate(&self, _size: u64) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<File> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -247,7 +247,7 @@ impl DirBuilder {\n \n impl fmt::Debug for File {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "96203c74b576cf48bd735f7275de7a1a38ea0817", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -17,93 +17,93 @@ impl TcpStream {\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpStream {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -115,45 +115,45 @@ impl TcpListener {\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpListener {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -165,144 +165,144 @@ impl UdpSocket {\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "e30395a0b1d92d9b10664fe4953ae3242bc96efd", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -3,6 +3,7 @@ use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n \n pub fn errno() -> i32 {\n@@ -21,7 +22,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a !);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -30,7 +31,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n \n@@ -67,7 +68,7 @@ pub struct Env(!);\n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "25514c2322fa45d3890efeb67f86dc2a99b0c99c", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -4,31 +4,31 @@ pub struct AnonPipe(!);\n \n impl AnonPipe {\n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn diverge(&self) -> ! {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "38ac0a1ddd5f9ce1043be9a155bd48c937efffea", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -98,39 +98,39 @@ pub struct ExitStatus(!);\n \n impl ExitStatus {\n     pub fn success(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for ExitStatus {\n     fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for ExitStatus {}\n \n impl PartialEq for ExitStatus {\n     fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for ExitStatus {}\n \n impl fmt::Debug for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Display for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -150,19 +150,19 @@ pub struct Process(!);\n \n impl Process {\n     pub fn id(&self) -> u32 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cda8510e1baebe1316cd57b8bb0c01e35a1fb145", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -26,7 +26,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "06860673d90e00ec1c0c41536db7564c15c7dec5", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -347,14 +347,14 @@ pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cf17ac0ba5f2bce2b228fe6fbc4da02ea16c59bf", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -87,7 +87,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     }\n }\n \n-pub struct SplitPaths<'a>(&'a !);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -96,7 +96,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "74515553a82182d7e8521fb49a6bc5105c154f63", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -59,7 +59,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "b7bf95c89b482cd532966169bfad10fcc77ee6ac", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45e1314f36ac249e8fb7d9564362ac8f94e49be/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=d45e1314f36ac249e8fb7d9564362ac8f94e49be", "patch": "@@ -47,7 +47,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}]}