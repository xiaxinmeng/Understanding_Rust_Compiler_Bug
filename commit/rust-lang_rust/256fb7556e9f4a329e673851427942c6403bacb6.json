{"sha": "256fb7556e9f4a329e673851427942c6403bacb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NmZiNzU1NmU5ZjRhMzI5ZTY3Mzg1MTQyNzk0MmM2NDAzYmFjYjY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T09:25:26Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-16T09:25:26Z"}, "message": "Remove temporary FixtureEntry parsed_meta field.", "tree": {"sha": "95ca07e9ed91b8f62e434f959450f1bb7eb5a512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ca07e9ed91b8f62e434f959450f1bb7eb5a512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256fb7556e9f4a329e673851427942c6403bacb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256fb7556e9f4a329e673851427942c6403bacb6", "html_url": "https://github.com/rust-lang/rust/commit/256fb7556e9f4a329e673851427942c6403bacb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256fb7556e9f4a329e673851427942c6403bacb6/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d901e0e709258f71183455865cb6f9e07b3dd5d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d901e0e709258f71183455865cb6f9e07b3dd5d3", "html_url": "https://github.com/rust-lang/rust/commit/d901e0e709258f71183455865cb6f9e07b3dd5d3"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "8b62fe9aae9382b6bdf40b5f5a341cb7804d1702", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=256fb7556e9f4a329e673851427942c6403bacb6", "patch": "@@ -99,7 +99,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n     let fixture = parse_single_fixture(ra_fixture);\n \n     let crate_graph = if let Some(entry) = fixture {\n-        let meta = match ParsedMeta::from(&entry.parsed_meta) {\n+        let meta = match ParsedMeta::from(&entry.meta) {\n             ParsedMeta::File(it) => it,\n             _ => panic!(\"with_single_file only support file meta\"),\n         };\n@@ -156,7 +156,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     let mut file_position = None;\n \n     for entry in fixture.iter() {\n-        let meta = match ParsedMeta::from(&entry.parsed_meta) {\n+        let meta = match ParsedMeta::from(&entry.meta) {\n             ParsedMeta::Root { path } => {\n                 let source_root = std::mem::replace(&mut source_root, SourceRoot::new_local());\n                 db.set_source_root(source_root_id, Arc::new(source_root));"}, {"sha": "64c0684c5f615539509994b1af2a21ca7811d31c", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=256fb7556e9f4a329e673851427942c6403bacb6", "patch": "@@ -35,7 +35,7 @@ impl MockAnalysis {\n     pub fn with_files(fixture: &str) -> MockAnalysis {\n         let mut res = MockAnalysis::new();\n         for entry in parse_fixture(fixture) {\n-            res.add_file(&entry.meta, &entry.text);\n+            res.add_file(entry.meta.path().as_str(), &entry.text);\n         }\n         res\n     }\n@@ -48,9 +48,10 @@ impl MockAnalysis {\n         for entry in parse_fixture(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                position = Some(res.add_file_with_position(&entry.meta, &entry.text));\n+                position =\n+                    Some(res.add_file_with_position(&entry.meta.path().as_str(), &entry.text));\n             } else {\n-                res.add_file(&entry.meta, &entry.text);\n+                res.add_file(&entry.meta.path().as_str(), &entry.text);\n             }\n         }\n         let position = position.expect(\"expected a marker (<|>)\");"}, {"sha": "7679e9ad7c4a3a5efc86544f720640fba3d936c6", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=256fb7556e9f4a329e673851427942c6403bacb6", "patch": "@@ -68,7 +68,7 @@ impl<'a> Project<'a> {\n         let mut paths = vec![];\n \n         for entry in parse_fixture(self.fixture) {\n-            let path = tmp_dir.path().join(entry.meta);\n+            let path = tmp_dir.path().join(entry.meta.path().as_str());\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n             paths.push((path, entry.text));"}, {"sha": "6a8d06ea7a73967fc0fb71a10d246c45e75a2f71", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256fb7556e9f4a329e673851427942c6403bacb6/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=256fb7556e9f4a329e673851427942c6403bacb6", "patch": "@@ -161,10 +161,8 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct FixtureEntry {\n-    pub meta: String,\n+    pub meta: FixtureMeta,\n     pub text: String,\n-\n-    pub parsed_meta: FixtureMeta,\n }\n \n #[derive(Debug, Eq, PartialEq)]\n@@ -231,8 +229,8 @@ The offending line: {:?}\"#,\n     for line in lines.by_ref() {\n         if line.starts_with(\"//-\") {\n             let meta = line[\"//-\".len()..].trim().to_string();\n-            let parsed_meta = parse_meta(&meta);\n-            res.push(FixtureEntry { meta, parsed_meta, text: String::new() })\n+            let meta = parse_meta(&meta);\n+            res.push(FixtureEntry { meta, text: String::new() })\n         } else if let Some(entry) = res.last_mut() {\n             entry.text.push_str(line);\n             entry.text.push('\\n');"}]}