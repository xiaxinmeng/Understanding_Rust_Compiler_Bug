{"sha": "8c2ec689c159e7f021d5913efb991aff875be967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMmVjNjg5YzE1OWU3ZjAyMWQ1OTEzZWZiOTkxYWZmODc1YmU5Njc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-12-11T21:27:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-12-12T07:59:25Z"}, "message": "Put miri const eval checking behind -Zmiri", "tree": {"sha": "2de32ebabc3113d00860a8862f3114ff354a1a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de32ebabc3113d00860a8862f3114ff354a1a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2ec689c159e7f021d5913efb991aff875be967", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlovjGIACgkQpp+NIls6\n19lPJg//bBVP8x6P73QfUcyLTAkWTdRcGDt0IYpUO5rpEooLszEdu2+iCzOb2sue\n5GsKix6ayApOCEDyRnrjXA6Gcm8wtgy7wacx8KMFvMz+C1CjL0RJyxvACvK3GN6V\nUcA9CHeDqDargxNJdKI5UC0w95jJpA7ILfYSofaURmNjgJ/OEXQ9Dk04NSQBQQ36\nCPIS0Ub7KxBYPKQWyladMIRcxiWg5SNpDOpiRWx2YiyvhnT56FGfnbWKqgg3j8hE\nB6cvUDZwVchaJCavNG8VOpVYmQe5cqgXl/Pj1zu5cwr9dfjGWRaMK99UBVpvzFoz\nXRxTuDhchw5SWCtA8B9Kric8DauZXwEKIse+N7wI96LOAsrglHcYdS3iEvBAATyo\nn/jlBkzSTgbHxuJDc5O9GMqbxUHuxNuc6WJYmReBvEjJQpAia6CWdpE+wNXCcUMl\nQLPI5KDxyzu9qmNYZRLYxxHGNz/C7qs60Ffpgk0LHe0FUGDG69D2dw4w6wdxASam\nU6eC3VuvKGNRqMjlQsWtNuVe/OZQiUrPrTdHdVr9sr/bvMbzMfeFf7rAeQw+AQXD\nzmSQqnFHTV4JamNROC8DDjMQFEKgAGNTQJKJtBJJ57ANCwZ6SJHIh6rYDNiYZXhY\nbE9K8Fxfp8a3Argv3GIaUe5elmdb0R7xX9otaTXjBrpbAXzNkZw=\n=LzuA\n-----END PGP SIGNATURE-----", "payload": "tree 2de32ebabc3113d00860a8862f3114ff354a1a72\nparent 7e5583b7f88c609492bf4f7b3a08313bc501b0ad\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1513027652 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1513065565 +0100\n\nPut miri const eval checking behind -Zmiri\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2ec689c159e7f021d5913efb991aff875be967", "html_url": "https://github.com/rust-lang/rust/commit/8c2ec689c159e7f021d5913efb991aff875be967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2ec689c159e7f021d5913efb991aff875be967/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5583b7f88c609492bf4f7b3a08313bc501b0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5583b7f88c609492bf4f7b3a08313bc501b0ad", "html_url": "https://github.com/rust-lang/rust/commit/7e5583b7f88c609492bf4f7b3a08313bc501b0ad"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "30afd52f4482401896dad3f7c97c51ef16ccfbbf", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ec689c159e7f021d5913efb991aff875be967/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ec689c159e7f021d5913efb991aff875be967/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=8c2ec689c159e7f021d5913efb991aff875be967", "patch": "@@ -246,6 +246,9 @@ fn main() {\n         // When running miri tests, we need to generate MIR for all libraries\n         if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") {\n             cmd.arg(\"-Zalways-encode-mir\");\n+            if stage != \"0\" {\n+                cmd.arg(\"-Zmiri\");\n+            }\n             cmd.arg(\"-Zmir-emit-validate=1\");\n         }\n "}, {"sha": "eee403dcbe3e759f5ffeebb473107146fe5d9d6c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ec689c159e7f021d5913efb991aff875be967/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ec689c159e7f021d5913efb991aff875be967/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=8c2ec689c159e7f021d5913efb991aff875be967", "patch": "@@ -769,6 +769,7 @@ impl Step for Compiletest {\n         if build.config.rust_debuginfo_tests {\n             flags.push(\"-g\".to_string());\n         }\n+        flags.push(\"-Zmiri -Zunstable-options\".to_string());\n \n         if let Some(linker) = build.linker(target) {\n             cmd.arg(\"--linker\").arg(linker);"}, {"sha": "e6138b34c8084366faf4f4a92ed89fa9fd5027ab", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ec689c159e7f021d5913efb991aff875be967/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ec689c159e7f021d5913efb991aff875be967/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8c2ec689c159e7f021d5913efb991aff875be967", "patch": "@@ -1141,6 +1141,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print some statistics about MIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n           \"encode MIR of all functions into the crate metadata\"),\n+    miri: bool = (false, parse_bool, [TRACKED],\n+          \"check the miri const evaluator against the old ctfe\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n           \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],"}, {"sha": "95b6dc80b14a0c27b7edd4939115b2153b403c58", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8c2ec689c159e7f021d5913efb991aff875be967/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2ec689c159e7f021d5913efb991aff875be967/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8c2ec689c159e7f021d5913efb991aff875be967", "patch": "@@ -729,27 +729,31 @@ pub(crate) fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trace!(\"running old const eval\");\n     let old_result = ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value);\n     trace!(\"old const eval produced {:?}\", old_result);\n-    let instance = ty::Instance::new(def_id, substs);\n-    trace!(\"const eval instance: {:?}, {:?}\", instance, key.param_env);\n-    let miri_result = ::rustc::mir::interpret::eval_body(tcx, instance, key.param_env);\n-    match (miri_result, old_result) {\n-        ((Err(err), ecx), Ok(ok)) => {\n-            trace!(\"miri failed, ctfe returned {:?}\", ok);\n-            tcx.sess.span_warn(\n-                tcx.def_span(key.value.0),\n-                \"miri failed to eval, while ctfe succeeded\",\n-            );\n-            let () = unwrap_miri(&ecx, Err(err));\n-            Ok(ok)\n-        },\n-        ((Ok(_), _), Err(err)) => {\n-            Err(err)\n-        },\n-        ((Err(_), _), Err(err)) => Err(err),\n-        ((Ok((miri_val, miri_ty)), mut ecx), Ok(ctfe)) => {\n-            check_ctfe_against_miri(&mut ecx, miri_val, miri_ty, ctfe.val);\n-            Ok(ctfe)\n+    if tcx.sess.opts.debugging_opts.miri {\n+        let instance = ty::Instance::new(def_id, substs);\n+        trace!(\"const eval instance: {:?}, {:?}\", instance, key.param_env);\n+        let miri_result = ::rustc::mir::interpret::eval_body(tcx, instance, key.param_env);\n+        match (miri_result, old_result) {\n+            ((Err(err), ecx), Ok(ok)) => {\n+                trace!(\"miri failed, ctfe returned {:?}\", ok);\n+                tcx.sess.span_warn(\n+                    tcx.def_span(key.value.0),\n+                    \"miri failed to eval, while ctfe succeeded\",\n+                );\n+                let () = unwrap_miri(&ecx, Err(err));\n+                Ok(ok)\n+            },\n+            ((Ok(_), _), Err(err)) => {\n+                Err(err)\n+            },\n+            ((Err(_), _), Err(err)) => Err(err),\n+            ((Ok((miri_val, miri_ty)), mut ecx), Ok(ctfe)) => {\n+                check_ctfe_against_miri(&mut ecx, miri_val, miri_ty, ctfe.val);\n+                Ok(ctfe)\n+            }\n         }\n+    } else {\n+        old_result\n     }\n }\n "}]}