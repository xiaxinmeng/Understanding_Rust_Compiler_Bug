{"sha": "ad433894abd4231fb2102416a520ae995ee09aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDMzODk0YWJkNDIzMWZiMjEwMjQxNmE1MjBhZTk5NWVlMDlhZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T09:49:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T09:49:08Z"}, "message": "Auto merge of #58010 - Zoxc:parallel-passes, r=michaelwoerister\n\nMove privacy checking later in the pipeline and make some passes run in parallel\n\nr? @michaelwoerister", "tree": {"sha": "f240435aa4f2154ce259f6ff3cf31aee88e73f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f240435aa4f2154ce259f6ff3cf31aee88e73f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad433894abd4231fb2102416a520ae995ee09aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad433894abd4231fb2102416a520ae995ee09aed", "html_url": "https://github.com/rust-lang/rust/commit/ad433894abd4231fb2102416a520ae995ee09aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad433894abd4231fb2102416a520ae995ee09aed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "url": "https://api.github.com/repos/rust-lang/rust/commits/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "html_url": "https://github.com/rust-lang/rust/commit/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a"}, {"sha": "38bcd4b42a1d0a5546122e78efb266161aa4c731", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bcd4b42a1d0a5546122e78efb266161aa4c731", "html_url": "https://github.com/rust-lang/rust/commit/38bcd4b42a1d0a5546122e78efb266161aa4c731"}], "stats": {"total": 261, "additions": 157, "deletions": 104}, "files": [{"sha": "3e7dd1432e1e374c98091e13c7b1d7a9777f9b8a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -30,7 +30,7 @@ use syntax::util::parser::ExprPrecedence;\n use crate::ty::AdtKind;\n use crate::ty::query::Providers;\n \n-use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n+use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n \n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n@@ -763,23 +763,17 @@ impl Crate {\n     pub fn par_visit_all_item_likes<'hir, V>(&'hir self, visitor: &V)\n         where V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send\n     {\n-        scope(|s| {\n-            s.spawn(|_| {\n-                par_iter(&self.items).for_each(|(_, item)| {\n-                    visitor.visit_item(item);\n-                });\n+        parallel!({\n+            par_iter(&self.items).for_each(|(_, item)| {\n+                visitor.visit_item(item);\n             });\n-\n-            s.spawn(|_| {\n-                par_iter(&self.trait_items).for_each(|(_, trait_item)| {\n-                    visitor.visit_trait_item(trait_item);\n-                });\n+        }, {\n+            par_iter(&self.trait_items).for_each(|(_, trait_item)| {\n+                visitor.visit_trait_item(trait_item);\n             });\n-\n-            s.spawn(|_| {\n-                par_iter(&self.impl_items).for_each(|(_, impl_item)| {\n-                    visitor.visit_impl_item(impl_item);\n-                });\n+        }, {\n+            par_iter(&self.impl_items).for_each(|(_, impl_item)| {\n+                visitor.visit_impl_item(impl_item);\n             });\n         });\n     }"}, {"sha": "4eb7b918dd8bedb066770d804262b1ac6ee6a54c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -189,7 +189,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n         tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n     }\n-    tcx.sess.abort_if_errors();\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "9f387e1eab1ef395b26e559c248a01cfae7820d3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -85,7 +85,7 @@ pub struct Session {\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n-    pub plugin_attributes: OneThread<RefCell<Vec<(String, AttributeType)>>>,\n+    pub plugin_attributes: Lock<Vec<(String, AttributeType)>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     pub dependency_formats: Once<dependency_format::Dependencies>,\n     /// The crate_disambiguator is constructed out of all the `-C metadata`\n@@ -1178,7 +1178,7 @@ pub fn build_session_(\n         buffered_lints: Lock::new(Some(Default::default())),\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n-        plugin_attributes: OneThread::new(RefCell::new(Vec::new())),\n+        plugin_attributes: Lock::new(Vec::new()),\n         crate_types: Once::new(),\n         dependency_formats: Once::new(),\n         crate_disambiguator: Once::new(),"}, {"sha": "7fef1f374d6fdfb1f651791db687805c7a3e6eea", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -127,6 +127,13 @@ cfg_if! {\n         pub use self::serial_join as join;\n         pub use self::serial_scope as scope;\n \n+        #[macro_export]\n+        macro_rules! parallel {\n+            ($($blocks:tt),*) => {\n+                $($blocks)*;\n+            }\n+        }\n+\n         pub use std::iter::Iterator as ParallelIterator;\n \n         pub fn par_iter<T: IntoIterator>(t: T) -> T::IntoIter {\n@@ -271,6 +278,26 @@ cfg_if! {\n         use std::thread;\n         pub use rayon::{join, scope};\n \n+        #[macro_export]\n+        macro_rules! parallel {\n+            (impl [$($c:tt,)*] [$block:tt $(, $rest:tt)*]) => {\n+                parallel!(impl [$block, $($c,)*] [$($rest),*])\n+            };\n+            (impl [$($blocks:tt,)*] []) => {\n+                ::rustc_data_structures::sync::scope(|s| {\n+                    $(\n+                        s.spawn(|_| $blocks);\n+                    )*\n+                })\n+            };\n+            ($($blocks:tt),*) => {\n+                // Reverse the order of the blocks since Rayon executes them in reverse order\n+                // when using a single thread. This ensures the execution order matches that\n+                // of a single threaded rustc\n+                parallel!(impl [] [$($blocks),*]);\n+            };\n+        }\n+\n         pub use rayon_core::WorkerLocal;\n \n         pub use rayon::iter::ParallelIterator;"}, {"sha": "6a23cadf877959f4f460ddd2411f59006adc59a0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 58, "deletions": 44, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1222,26 +1222,28 @@ where\n             // tcx available.\n             time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n \n-            time(sess, \"looking for entry point\", || {\n-                middle::entry::find_entry_point(tcx)\n-            });\n-\n-            time(sess, \"looking for plugin registrar\", || {\n-                plugin::build::find_plugin_registrar(tcx)\n-            });\n-\n-            time(sess, \"looking for derive registrar\", || {\n-                proc_macro_decls::find(tcx)\n-            });\n-\n-            time(sess, \"loop checking\", || loops::check_crate(tcx));\n+            parallel!({\n+                time(sess, \"looking for entry point\", || {\n+                    middle::entry::find_entry_point(tcx)\n+                });\n \n-            time(sess, \"attribute checking\", || {\n-                hir::check_attr::check_crate(tcx)\n-            });\n+                time(sess, \"looking for plugin registrar\", || {\n+                    plugin::build::find_plugin_registrar(tcx)\n+                });\n \n-            time(sess, \"stability checking\", || {\n-                stability::check_unstable_api_usage(tcx)\n+                time(sess, \"looking for derive registrar\", || {\n+                    proc_macro_decls::find(tcx)\n+                });\n+            }, {\n+                time(sess, \"loop checking\", || loops::check_crate(tcx));\n+            }, {\n+                time(sess, \"attribute checking\", || {\n+                    hir::check_attr::check_crate(tcx)\n+                });\n+            }, {\n+                time(sess, \"stability checking\", || {\n+                    stability::check_unstable_api_usage(tcx)\n+                });\n             });\n \n             // passes are timed inside typeck\n@@ -1253,27 +1255,31 @@ where\n                 }\n             }\n \n-            time(sess, \"rvalue promotion\", || {\n-                rvalue_promotion::check_crate(tcx)\n-            });\n-\n-            time(sess, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx)\n-            });\n-\n-            time(sess, \"intrinsic checking\", || {\n-                middle::intrinsicck::check_crate(tcx)\n+            time(sess, \"misc checking\", || {\n+                parallel!({\n+                    time(sess, \"rvalue promotion\", || {\n+                        rvalue_promotion::check_crate(tcx)\n+                    });\n+                }, {\n+                    time(sess, \"intrinsic checking\", || {\n+                        middle::intrinsicck::check_crate(tcx)\n+                    });\n+                }, {\n+                    time(sess, \"match checking\", || mir::matchck_crate(tcx));\n+                }, {\n+                    // this must run before MIR dump, because\n+                    // \"not all control paths return a value\" is reported here.\n+                    //\n+                    // maybe move the check to a MIR pass?\n+                    time(sess, \"liveness checking\", || {\n+                        middle::liveness::check_crate(tcx)\n+                    });\n+                });\n             });\n \n-            time(sess, \"match checking\", || mir::matchck_crate(tcx));\n-\n-            // this must run before MIR dump, because\n-            // \"not all control paths return a value\" is reported here.\n-            //\n-            // maybe move the check to a MIR pass?\n-            time(sess, \"liveness checking\", || {\n-                middle::liveness::check_crate(tcx)\n-            });\n+            // Abort so we don't try to construct MIR with liveness errors.\n+            // We also won't want to continue with errors from rvalue promotion\n+            tcx.sess.abort_if_errors();\n \n             time(sess, \"borrow checking\", || {\n                 if tcx.use_ast_borrowck() {\n@@ -1297,7 +1303,7 @@ where\n \n             time(sess, \"layout testing\", || layout_test::test_layout(tcx));\n \n-            // Avoid overwhelming user with errors if type checking failed.\n+            // Avoid overwhelming user with errors if borrow checking failed.\n             // I'm not sure how helpful this is, to be honest, but it avoids\n             // a\n             // lot of annoying errors in the compile-fail tests (basically,\n@@ -1307,14 +1313,22 @@ where\n                 return Ok(f(tcx, rx, sess.compile_status()));\n             }\n \n-            time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n-\n-            time(sess, \"unused lib feature checking\", || {\n-                stability::check_unused_or_stable_features(tcx)\n+            time(sess, \"misc checking\", || {\n+                parallel!({\n+                    time(sess, \"privacy checking\", || {\n+                        rustc_privacy::check_crate(tcx)\n+                    });\n+                }, {\n+                    time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n+                },  {\n+                    time(sess, \"unused lib feature checking\", || {\n+                        stability::check_unused_or_stable_features(tcx)\n+                    });\n+                }, {\n+                    time(sess, \"lint checking\", || lint::check_crate(tcx));\n+                });\n             });\n \n-            time(sess, \"lint checking\", || lint::check_crate(tcx));\n-\n             return Ok(f(tcx, rx, tcx.sess.compile_status()));\n         },\n     )"}, {"sha": "18f73f61e55af1a0382b4b13d18e80a0970e601e", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -30,6 +30,7 @@ extern crate rustc;\n extern crate rustc_allocator;\n extern crate rustc_target;\n extern crate rustc_borrowck;\n+#[macro_use]\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n extern crate rustc_passes;"}, {"sha": "739c96934e6abebc35312db8db94995f7387a90c", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -44,7 +44,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         let def_id = tcx.hir().body_owner_def_id(body_id);\n         tcx.const_is_rvalue_promotable_to_static(def_id);\n     }\n-    tcx.sess.abort_if_errors();\n }\n \n fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "f61c7e546166221a08cbf91f62fe759eee706882", "filename": "src/test/ui/error-codes/E0446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1,4 +1,4 @@\n-mod Foo {\n+mod foo {\n     struct Bar(u32);\n \n     pub fn bar() -> Bar { //~ ERROR E0446"}, {"sha": "9c7399515f43930c9ac74ea91303cab96e34178d", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1,8 +1,8 @@\n-error[E0446]: private type `Foo::Bar` in public interface\n+error[E0446]: private type `foo::Bar` in public interface\n   --> $DIR/E0446.rs:4:5\n    |\n LL |       struct Bar(u32);\n-   |       - `Foo::Bar` declared as private\n+   |       - `foo::Bar` declared as private\n LL | \n LL | /     pub fn bar() -> Bar { //~ ERROR E0446\n LL | |         Bar(0)"}, {"sha": "aa8f051afa7777073c7a287da82cd0595b157403", "filename": "src/test/ui/error-codes/E0451.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0451.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1,4 +1,4 @@\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         b: isize,\n@@ -10,10 +10,10 @@ mod Bar {\n     );\n }\n \n-fn pat_match(foo: Bar::Foo) {\n-    let Bar::Foo{a:a, b:b} = foo; //~ ERROR E0451\n+fn pat_match(foo: bar::Foo) {\n+    let bar::Foo{a, b} = foo; //~ ERROR E0451\n }\n \n fn main() {\n-    let f = Bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n+    let f = bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n }"}, {"sha": "11f08677246278112daf1886b209eeb0c2a5a1ce", "filename": "src/test/ui/error-codes/E0451.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1,13 +1,13 @@\n-error[E0451]: field `b` of struct `Bar::Foo` is private\n-  --> $DIR/E0451.rs:14:23\n+error[E0451]: field `b` of struct `bar::Foo` is private\n+  --> $DIR/E0451.rs:14:21\n    |\n-LL |     let Bar::Foo{a:a, b:b} = foo; //~ ERROR E0451\n-   |                       ^^^ field `b` is private\n+LL |     let bar::Foo{a, b} = foo; //~ ERROR E0451\n+   |                     ^ field `b` is private\n \n-error[E0451]: field `b` of struct `Bar::Foo` is private\n+error[E0451]: field `b` of struct `bar::Foo` is private\n   --> $DIR/E0451.rs:18:29\n    |\n-LL |     let f = Bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n+LL |     let f = bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n    |                             ^^^^ field `b` is private\n \n error: aborting due to 2 previous errors"}, {"sha": "7ae53020fe01190d9916ffd01d844d14522f436f", "filename": "src/test/ui/functional-struct-update/functional-struct-update-respects-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -6,12 +6,12 @@ use self::foo::S;\n mod foo {\n     use std::cell::{UnsafeCell};\n \n-    static mut count : UnsafeCell<u64> = UnsafeCell::new(1);\n+    static mut COUNT : UnsafeCell<u64> = UnsafeCell::new(1);\n \n     pub struct S { pub a: u8, pub b: String, secret_uid: u64 }\n \n     pub fn make_secrets(a: u8, b: String) -> S {\n-        let val = unsafe { let p = count.get(); let val = *p; *p = val + 1; val };\n+        let val = unsafe { let p = COUNT.get(); let val = *p; *p = val + 1; val };\n         println!(\"creating {}, uid {}\", b, val);\n         S { a: a, b: b, secret_uid: val }\n     }"}, {"sha": "467b83746702b4dcc1c8544546eec16080560d90", "filename": "src/test/ui/privacy/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -49,6 +49,7 @@ mod traits {\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n     //~| WARNING hard error\n+    //~| WARNING bounds on generic parameters are not enforced in type aliases\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error\n     pub trait Tr2<T: PrivTr> {} //~ ERROR private trait `traits::PrivTr` in public interface\n@@ -74,6 +75,7 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n+        //~| WARNING where clauses are not enforced in type aliases\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "621d9a57fa0769a05a5c418244254995738bf2a2", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -112,7 +112,7 @@ LL |     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr`\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:52:5\n+  --> $DIR/private-in-public-warn.rs:53:5\n    |\n LL |     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ LL |     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in pu\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:54:5\n+  --> $DIR/private-in-public-warn.rs:55:5\n    |\n LL |     pub trait Tr2<T: PrivTr> {} //~ ERROR private trait `traits::PrivTr` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -130,7 +130,7 @@ LL |     pub trait Tr2<T: PrivTr> {} //~ ERROR private trait `traits::PrivTr` in\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:56:5\n+  --> $DIR/private-in-public-warn.rs:57:5\n    |\n LL | /     pub trait Tr3 {\n LL | |         //~^ ERROR private trait `traits::PrivTr` in public interface\n@@ -145,7 +145,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:60:9\n+  --> $DIR/private-in-public-warn.rs:61:9\n    |\n LL |         fn f<T: PrivTr>(arg: T) {} //~ ERROR private trait `traits::PrivTr` in public interface\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |         fn f<T: PrivTr>(arg: T) {} //~ ERROR private trait `traits::PrivTr`\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:63:5\n+  --> $DIR/private-in-public-warn.rs:64:5\n    |\n LL |     impl<T: PrivTr> Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     impl<T: PrivTr> Pub<T> {} //~ ERROR private trait `traits::PrivTr` in p\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:65:5\n+  --> $DIR/private-in-public-warn.rs:66:5\n    |\n LL |     impl<T: PrivTr> PubTr for Pub<T> {} //~ ERROR private trait `traits::PrivTr` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     impl<T: PrivTr> PubTr for Pub<T> {} //~ ERROR private trait `traits::Pr\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:74:5\n+  --> $DIR/private-in-public-warn.rs:75:5\n    |\n LL |     pub type Alias<T> where T: PrivTr = T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -181,7 +181,7 @@ LL |     pub type Alias<T> where T: PrivTr = T;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:77:5\n+  --> $DIR/private-in-public-warn.rs:79:5\n    |\n LL |     pub trait Tr2<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -190,7 +190,7 @@ LL |     pub trait Tr2<T> where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:81:9\n+  --> $DIR/private-in-public-warn.rs:83:9\n    |\n LL |         fn f<T>(arg: T) where T: PrivTr {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -199,7 +199,7 @@ LL |         fn f<T>(arg: T) where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:85:5\n+  --> $DIR/private-in-public-warn.rs:87:5\n    |\n LL |     impl<T> Pub<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,7 +208,7 @@ LL |     impl<T> Pub<T> where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `traits_where::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:88:5\n+  --> $DIR/private-in-public-warn.rs:90:5\n    |\n LL |     impl<T> PubTr for Pub<T> where T: PrivTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -217,7 +217,7 @@ LL |     impl<T> PubTr for Pub<T> where T: PrivTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `generics::PrivTr<generics::Pub>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:99:5\n+  --> $DIR/private-in-public-warn.rs:101:5\n    |\n LL |     pub trait Tr1: PrivTr<Pub> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -226,7 +226,7 @@ LL |     pub trait Tr1: PrivTr<Pub> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:102:5\n+  --> $DIR/private-in-public-warn.rs:104:5\n    |\n LL |     pub trait Tr2: PubTr<Priv> {} //~ ERROR private type `generics::Priv` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -235,7 +235,7 @@ LL |     pub trait Tr2: PubTr<Priv> {} //~ ERROR private type `generics::Priv` i\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:104:5\n+  --> $DIR/private-in-public-warn.rs:106:5\n    |\n LL |     pub trait Tr3: PubTr<[Priv; 1]> {} //~ ERROR private type `generics::Priv` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -244,7 +244,7 @@ LL |     pub trait Tr3: PubTr<[Priv; 1]> {} //~ ERROR private type `generics::Pr\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `generics::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:106:5\n+  --> $DIR/private-in-public-warn.rs:108:5\n    |\n LL |     pub trait Tr4: PubTr<Pub<Priv>> {} //~ ERROR private type `generics::Priv` in public interface\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -253,7 +253,7 @@ LL |     pub trait Tr4: PubTr<Pub<Priv>> {} //~ ERROR private type `generics::Pr\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `impls::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:133:9\n+  --> $DIR/private-in-public-warn.rs:135:9\n    |\n LL |     struct Priv;\n    |     - `impls::Priv` declared as private\n@@ -262,7 +262,7 @@ LL |         type Alias = Priv; //~ ERROR private type `impls::Priv` in public i\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private type `aliases_pub::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:204:9\n+  --> $DIR/private-in-public-warn.rs:206:9\n    |\n LL |         pub fn f(arg: Priv) {} //~ ERROR private type `aliases_pub::Priv` in public interface\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -271,7 +271,7 @@ LL |         pub fn f(arg: Priv) {} //~ ERROR private type `aliases_pub::Priv` i\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:208:9\n+  --> $DIR/private-in-public-warn.rs:210:9\n    |\n LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n@@ -280,7 +280,7 @@ LL |         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in pu\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:211:9\n+  --> $DIR/private-in-public-warn.rs:213:9\n    |\n LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n@@ -289,7 +289,7 @@ LL |         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in pu\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:214:9\n+  --> $DIR/private-in-public-warn.rs:216:9\n    |\n LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n@@ -298,7 +298,7 @@ LL |         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in pu\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n-  --> $DIR/private-in-public-warn.rs:217:9\n+  --> $DIR/private-in-public-warn.rs:219:9\n    |\n LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n@@ -307,7 +307,7 @@ LL |         type Check = Priv; //~ ERROR private type `aliases_pub::Priv` in pu\n    |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: private trait `aliases_priv::PrivTr1` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:247:5\n+  --> $DIR/private-in-public-warn.rs:249:5\n    |\n LL |     pub trait Tr1: PrivUseAliasTr {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -316,7 +316,7 @@ LL |     pub trait Tr1: PrivUseAliasTr {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private trait `aliases_priv::PrivTr1<aliases_priv::Priv2>` in public interface (error E0445)\n-  --> $DIR/private-in-public-warn.rs:250:5\n+  --> $DIR/private-in-public-warn.rs:252:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -325,14 +325,31 @@ LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error: private type `aliases_priv::Priv2` in public interface (error E0446)\n-  --> $DIR/private-in-public-warn.rs:250:5\n+  --> $DIR/private-in-public-warn.rs:252:5\n    |\n LL |     pub trait Tr2: PrivUseAliasTr<PrivAlias> {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/private-in-public-warn.rs:50:23\n+   |\n+LL |     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n+   |                       ^^^^^^\n+   |\n+   = note: #[warn(type_alias_bounds)] on by default\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/private-in-public-warn.rs:75:29\n+   |\n+LL |     pub type Alias<T> where T: PrivTr = T;\n+   |                             ^^^^^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+\n error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0446`."}, {"sha": "d98cf5991efeb9e15f50e1eaecce4c89433eeaf2", "filename": "src/test/ui/privacy/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad433894abd4231fb2102416a520ae995ee09aed/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs?ref=ad433894abd4231fb2102416a520ae995ee09aed", "patch": "@@ -1,4 +1,3 @@\n-#![feature(associated_consts)]\n #![feature(decl_macro)]\n #![allow(private_in_public)]\n \n@@ -15,6 +14,7 @@ mod m {\n     pub struct PubTupleStruct(u8);\n     impl PubTupleStruct { fn method() {} }\n \n+    #[derive(Clone, Copy)]\n     struct Priv;\n     pub type Alias = Priv;\n     pub struct Pub<T = Alias>(pub T);"}]}