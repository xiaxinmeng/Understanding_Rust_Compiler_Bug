{"sha": "3956a5b757dffb5bfd475b89146aa9eb655818e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NTZhNWI3NTdkZmZiNWJmZDQ3NWI4OTE0NmFhOWViNjU1ODE4ZTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T16:31:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T16:34:43Z"}, "message": "Simplify", "tree": {"sha": "c85f861b1149f3b67ab8bc8c652f184de93a8d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85f861b1149f3b67ab8bc8c652f184de93a8d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3956a5b757dffb5bfd475b89146aa9eb655818e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3956a5b757dffb5bfd475b89146aa9eb655818e0", "html_url": "https://github.com/rust-lang/rust/commit/3956a5b757dffb5bfd475b89146aa9eb655818e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3956a5b757dffb5bfd475b89146aa9eb655818e0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b0cbf607f85ac05056fe2232f576c2c7dd6768", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b0cbf607f85ac05056fe2232f576c2c7dd6768", "html_url": "https://github.com/rust-lang/rust/commit/06b0cbf607f85ac05056fe2232f576c2c7dd6768"}], "stats": {"total": 142, "additions": 91, "deletions": 51}, "files": [{"sha": "9a4cd8628aeafdc4fa1385c78122896837ac6761", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -1,4 +1,6 @@\n-//! Completes keywords.\n+//! Completes keywords, except:\n+//! - `self`, `super` and `crate`, as these are considered part of path completions.\n+//! - `await`, as this is a postfix completion we handle this in the postfix completions.\n \n use syntax::{SyntaxKind, T};\n \n@@ -25,18 +27,6 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n \n-    // Suggest .await syntax for types that implement Future trait\n-    if let Some(receiver) = ctx.dot_receiver() {\n-        if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n-            if ty.impls_future(ctx.db) {\n-                let mut item =\n-                    CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n-                item.kind(CompletionItemKind::Keyword).detail(\"expr.await\");\n-                item.add_to(acc);\n-            }\n-        };\n-    }\n-\n     let mut add_keyword = |kw, snippet| add_keyword(ctx, acc, kw, snippet);\n \n     let expects_assoc_item = ctx.expects_assoc_item();"}, {"sha": "8aaaa1047790339e8b09ab20e5046c0cd546ac0c", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -42,6 +42,13 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n+    // Suggest .await syntax for types that implement Future trait\n+    if receiver_ty.impls_future(ctx.db) {\n+        let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n+        item.kind(CompletionItemKind::Keyword).detail(\"expr.await\");\n+        item.add_to(acc);\n+    }\n+\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,"}, {"sha": "1d3a0ec86823dacffb588399d3e465ade7a4f391", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -6,10 +6,12 @@ use hir::HasVisibility;\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n-use crate::{context::PathCompletionContext, CompletionContext, Completions};\n+use crate::{\n+    context::PathCompletionContext, patterns::ImmediateLocation, CompletionContext, Completions,\n+};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() {\n+    if ctx.is_path_disallowed() || ctx.has_impl_or_trait_prev_sibling() {\n         return;\n     }\n     let (path, use_tree_parent) = match &ctx.path_context {\n@@ -26,10 +28,11 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n     let context_module = ctx.scope.module();\n \n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n+    if let Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) =\n+        ctx.completion_location\n+    {\n         if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n-            let module_scope = module.scope(ctx.db, context_module);\n-            for (name, def) in module_scope {\n+            for (name, def) in module.scope(ctx.db, context_module) {\n                 if let hir::ScopeDef::MacroDef(macro_def) = def {\n                     if macro_def.is_fn_like() {\n                         acc.add_macro(ctx, Some(name.clone()), macro_def);"}, {"sha": "eaf117d6780ac71870063326c5448de8c35f3b3d", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -12,7 +12,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n \n     if ctx.in_use_tree() {\n         // only show modules in a fresh UseTree\n-        cov_mark::hit!(only_completes_modules_in_import);\n+        cov_mark::hit!(unqualified_path_only_modules_in_import);\n         ctx.scope.process_all_names(&mut |name, res| {\n             if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n                 acc.add_resolution(ctx, name, &res);\n@@ -24,37 +24,39 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n     std::array::IntoIter::new([\"self\", \"super\", \"crate\"]).for_each(|kw| acc.add_keyword(ctx, kw));\n-    if let Some(ImmediateLocation::Visibility(_)) = ctx.completion_location {\n-        return;\n-    }\n \n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n-        // only show macros in {Assoc}ItemList\n-        ctx.scope.process_all_names(&mut |name, res| {\n-            if let hir::ScopeDef::MacroDef(mac) = res {\n-                if mac.is_fn_like() {\n-                    acc.add_macro(ctx, Some(name.clone()), mac);\n+    match &ctx.completion_location {\n+        Some(ImmediateLocation::Visibility(_)) => return,\n+        Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n+            // only show macros in {Assoc}ItemList\n+            ctx.scope.process_all_names(&mut |name, res| {\n+                if let hir::ScopeDef::MacroDef(mac) = res {\n+                    if mac.is_fn_like() {\n+                        acc.add_macro(ctx, Some(name.clone()), mac);\n+                    }\n                 }\n-            }\n-            if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                acc.add_resolution(ctx, name, &res);\n-            }\n-        });\n-        return;\n-    }\n-\n-    if matches!(&ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n-        ctx.scope.process_all_names(&mut |name, res| {\n-            let add_resolution = match res {\n-                ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n-                ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => true,\n-                _ => false,\n-            };\n-            if add_resolution {\n-                acc.add_resolution(ctx, name, &res);\n-            }\n-        });\n-        return;\n+                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                    acc.add_resolution(ctx, name, &res);\n+                }\n+            });\n+            return;\n+        }\n+        Some(ImmediateLocation::TypeBound) => {\n+            ctx.scope.process_all_names(&mut |name, res| {\n+                let add_resolution = match res {\n+                    ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => {\n+                        true\n+                    }\n+                    _ => false,\n+                };\n+                if add_resolution {\n+                    acc.add_resolution(ctx, name, &res);\n+                }\n+            });\n+            return;\n+        }\n+        _ => (),\n     }\n \n     if !ctx.expects_type() {"}, {"sha": "cbe21b35f2aa2f110b7ff6533860c2d68c60d6fc", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -1,4 +1,8 @@\n //! Patterns telling us certain facts about current syntax element, they are used in completion context\n+//!\n+//! Most logic in this module first expands the token below the cursor to a maximum node that acts similar to the token itself.\n+//! This means we for example expand a NameRef token to its outermost Path node, as semantically these act in the same location\n+//! and the completions usually query for path specific things on the Path context instead. This simplifies some location handling.\n \n use hir::Semantics;\n use ide_db::RootDatabase;"}, {"sha": "3e65c65963fdf8298cc9a68d6f7f870bce581312", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -201,7 +201,7 @@ pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElemen\n \n pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<CompletionItem> {\n     let (db, position) = position(code);\n-    crate::completions(&db, &config, position).unwrap().into()\n+    crate::completions(&db, &config, position).map_or_else(Vec::default, Into::into)\n }\n \n fn check_no_completion(ra_fixture: &str) {"}, {"sha": "f4e13018328009f83d825d9c86b7661443d05242", "filename": "crates/ide_completion/src/tests/item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -68,14 +68,16 @@ fn after_trait_name_in_trait_def() {\n }\n \n #[test]\n-fn after_trait_or_target_name_in_impl() {\n+fn after_target_name_in_impl() {\n     check(\n         r\"impl Trait $0\",\n         expect![[r#\"\n             kw where\n             kw for\n         \"#]],\n     );\n+    // FIXME: This should emit `kw where`\n+    check(r\"impl Trait for Type $0\", expect![[r#\"\"#]]);\n }\n \n #[test]"}, {"sha": "853081c9be73969e5421700c48f2e00372ba09b1", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -10,7 +10,7 @@ fn check(ra_fixture: &str, expect: Expect) {\n \n #[test]\n fn use_tree_start() {\n-    cov_mark::check!(only_completes_modules_in_import);\n+    cov_mark::check!(unqualified_path_only_modules_in_import);\n     check(\n         r#\"\n //- /lib.rs crate:main deps:other_crate"}, {"sha": "984155cfd2ff02c388b561d1f1c3c5d882620a04", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3956a5b757dffb5bfd475b89146aa9eb655818e0/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=3956a5b757dffb5bfd475b89146aa9eb655818e0", "patch": "@@ -23,3 +23,35 @@ pub($0)\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn after_in_kw() {\n+    check(\n+        r#\"\n+pub(in $0)\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn qualified() {\n+    // FIXME: only show parent modules\n+    check(\n+        r#\"\n+mod foo {\n+    pub(in crate::$0)\n+}\n+\n+mod bar {}\n+\"#,\n+        expect![[r#\"\n+            md bar\n+            md foo\n+        \"#]],\n+    );\n+}"}]}