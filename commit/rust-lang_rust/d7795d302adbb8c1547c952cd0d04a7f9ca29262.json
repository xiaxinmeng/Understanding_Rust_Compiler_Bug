{"sha": "d7795d302adbb8c1547c952cd0d04a7f9ca29262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Nzk1ZDMwMmFkYmI4YzE1NDdjOTUyY2QwZDA0YTdmOWNhMjkyNjI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-15T20:19:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-19T22:29:53Z"}, "message": "Do not store visibility in *ItemRef.", "tree": {"sha": "09876d4cfc594def97f939c09c0e5780004170b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09876d4cfc594def97f939c09c0e5780004170b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7795d302adbb8c1547c952cd0d04a7f9ca29262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7795d302adbb8c1547c952cd0d04a7f9ca29262", "html_url": "https://github.com/rust-lang/rust/commit/d7795d302adbb8c1547c952cd0d04a7f9ca29262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7795d302adbb8c1547c952cd0d04a7f9ca29262/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ecc8ad8462574354a55162a0c16b10eb95e3e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecc8ad8462574354a55162a0c16b10eb95e3e70", "html_url": "https://github.com/rust-lang/rust/commit/5ecc8ad8462574354a55162a0c16b10eb95e3e70"}], "stats": {"total": 119, "additions": 49, "deletions": 70}, "files": [{"sha": "ddb00d17c0a118688fbff48472cf42839d107249", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -55,7 +55,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         0,\n                         ParenthesizedGenericArgs::Err,\n                         ImplTraitContext::disallowed(),\n-                        None,\n                     ));\n                     let args = self.lower_exprs(args);\n                     hir::ExprKind::MethodCall("}, {"sha": "b18e57331154f1c5593edc91645c744d5955f8a2", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -188,7 +188,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     pub fn lower_item(&mut self, i: &Item) -> hir::Item<'hir> {\n         let mut ident = i.ident;\n-        let mut vis = self.lower_visibility(&i.vis, None);\n+        let mut vis = self.lower_visibility(&i.vis);\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n@@ -493,7 +493,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let res = this.lower_res(res);\n-                        let path = this.lower_path_extra(res, &path, ParamMode::Explicit, None);\n+                        let path = this.lower_path_extra(res, &path, ParamMode::Explicit);\n                         let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n                         let vis = this.rebuild_vis(&vis);\n                         if let Some(attrs) = attrs {\n@@ -510,7 +510,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n                 }\n \n-                let path = self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None);\n+                let path = self.lower_path_extra(ret_res, &path, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n@@ -610,7 +610,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n                 let res = self.lower_res(res);\n-                let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit, None);\n+                let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n         }\n@@ -679,17 +679,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n                 ForeignItemKind::MacCall(_) => panic!(\"macro shouldn't exist here\"),\n             },\n-            vis: self.lower_visibility(&i.vis, None),\n+            vis: self.lower_visibility(&i.vis),\n             span: self.lower_span(i.span),\n         }\n     }\n \n-    fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef<'hir> {\n+    fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef {\n         hir::ForeignItemRef {\n             id: hir::ForeignItemId { def_id: self.allocate_hir_id_counter(i.id) },\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n-            vis: self.lower_visibility(&i.vis, Some(i.id)),\n         }\n     }\n \n@@ -757,7 +756,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // FIXME(jseyfried): positional field hygiene.\n                 None => Ident::new(sym::integer(index), self.lower_span(f.span)),\n             },\n-            vis: self.lower_visibility(&f.vis, None),\n+            vis: self.lower_visibility(&f.vis),\n             ty,\n         }\n     }\n@@ -899,22 +898,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(i.ident),\n             generics,\n-            vis: self.lower_visibility(&i.vis, None),\n+            vis: self.lower_visibility(&i.vis),\n             defaultness,\n             kind,\n             span: self.lower_span(i.span),\n         }\n     }\n \n-    fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef<'hir> {\n+    fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef {\n         // Since `default impl` is not yet implemented, this is always true in impls.\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n             id: hir::ImplItemId { def_id: self.allocate_hir_id_counter(i.id) },\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n-            vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness,\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n@@ -932,25 +930,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// lowered. This can happen during `lower_impl_item_ref()` where we need to\n     /// lower a `Visibility` value although we haven't lowered the owning\n     /// `ImplItem` in question yet.\n-    fn lower_visibility(\n-        &mut self,\n-        v: &Visibility,\n-        explicit_owner: Option<NodeId>,\n-    ) -> hir::Visibility<'hir> {\n+    fn lower_visibility(&mut self, v: &Visibility) -> hir::Visibility<'hir> {\n         let node = match v.kind {\n             VisibilityKind::Public => hir::VisibilityKind::Public,\n             VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n             VisibilityKind::Restricted { ref path, id } => {\n                 debug!(\"lower_visibility: restricted path id = {:?}\", id);\n-                let lowered_id = if let Some(owner) = explicit_owner {\n-                    self.lower_node_id_with_owner(id, owner)\n-                } else {\n-                    self.lower_node_id(id)\n-                };\n-                let res = self.expect_full_res(id);\n-                let res = self.lower_res(res);\n+                let lowered_id = self.lower_node_id(id);\n                 hir::VisibilityKind::Restricted {\n-                    path: self.lower_path_extra(res, path, ParamMode::Explicit, explicit_owner),\n+                    path: self.lower_path(id, path, ParamMode::Explicit),\n                     hir_id: lowered_id,\n                 }\n             }"}, {"sha": "929f427484dba4ac28ba65fd7bf931c067c46376", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -99,7 +99,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         num_lifetimes,\n                         parenthesized_generic_args,\n                         itctx.reborrow(),\n-                        None,\n                     )\n                 },\n             )),\n@@ -147,7 +146,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 0,\n                 ParenthesizedGenericArgs::Err,\n                 itctx.reborrow(),\n-                None,\n             ));\n             let qpath = hir::QPath::TypeRelative(ty, hir_segment);\n \n@@ -178,7 +176,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         res: Res,\n         p: &Path,\n         param_mode: ParamMode,\n-        explicit_owner: Option<NodeId>,\n     ) -> &'hir hir::Path<'hir> {\n         self.arena.alloc(hir::Path {\n             res,\n@@ -190,7 +187,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     0,\n                     ParenthesizedGenericArgs::Err,\n                     ImplTraitContext::disallowed(),\n-                    explicit_owner,\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -205,7 +201,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> &'hir hir::Path<'hir> {\n         let res = self.expect_full_res(id);\n         let res = self.lower_res(res);\n-        self.lower_path_extra(res, p, param_mode, None)\n+        self.lower_path_extra(res, p, param_mode)\n     }\n \n     crate fn lower_path_segment(\n@@ -216,7 +212,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         expected_lifetimes: usize,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n         itctx: ImplTraitContext<'_, 'hir>,\n-        explicit_owner: Option<NodeId>,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\n             \"path_span: {:?}, lower_path_segment(segment: {:?}, expected_lifetimes: {:?})\",\n@@ -354,11 +349,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let res = self.expect_full_res(segment.id);\n-        let id = if let Some(owner) = explicit_owner {\n-            self.lower_node_id_with_owner(segment.id, owner)\n-        } else {\n-            self.lower_node_id(segment.id)\n-        };\n+        let id = self.lower_node_id(segment.id);\n         debug!(\n             \"lower_path_segment: ident={:?} original-id={:?} new-id={:?}\",\n             segment.ident, segment.id, id,"}, {"sha": "f07e52e04daa9d8020ee9b6ee58c2d6f72de845f", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -28,9 +28,9 @@ macro_rules! arena_types {\n             [] pat_field: rustc_hir::PatField<$tcx>,\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [few] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n+            [few] foreign_item_ref: rustc_hir::ForeignItemRef,\n             [] impl_item: rustc_hir::ImplItem<$tcx>,\n-            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [] impl_item_ref: rustc_hir::ImplItemRef,\n             [] item: rustc_hir::Item<$tcx>,\n             [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,"}, {"sha": "05b652fd5af2c4245dd6d727e7b9c4ef0a941abc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -2745,7 +2745,7 @@ pub enum ItemKind<'hir> {\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n-    ForeignMod { abi: Abi, items: &'hir [ForeignItemRef<'hir>] },\n+    ForeignMod { abi: Abi, items: &'hir [ForeignItemRef] },\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(&'hir InlineAsm<'hir>),\n     /// A type alias, e.g., `type Foo = Bar<u8>`.\n@@ -2782,7 +2782,7 @@ pub struct Impl<'hir> {\n     pub of_trait: Option<TraitRef<'hir>>,\n \n     pub self_ty: &'hir Ty<'hir>,\n-    pub items: &'hir [ImplItemRef<'hir>],\n+    pub items: &'hir [ImplItemRef],\n }\n \n impl ItemKind<'_> {\n@@ -2846,13 +2846,12 @@ pub struct TraitItemRef {\n /// passes to find the impl they want without loading the ID (which\n /// means fewer edges in the incremental compilation graph).\n #[derive(Debug, HashStable_Generic)]\n-pub struct ImplItemRef<'hir> {\n+pub struct ImplItemRef {\n     pub id: ImplItemId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n     pub kind: AssocItemKind,\n     pub span: Span,\n-    pub vis: Visibility<'hir>,\n     pub defaultness: Defaultness,\n }\n \n@@ -2886,12 +2885,11 @@ impl ForeignItemId {\n /// passes to find the impl they want without loading the ID (which\n /// means fewer edges in the incremental compilation graph).\n #[derive(Debug, HashStable_Generic)]\n-pub struct ForeignItemRef<'hir> {\n+pub struct ForeignItemRef {\n     pub id: ForeignItemId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n     pub span: Span,\n-    pub vis: Visibility<'hir>,\n }\n \n #[derive(Debug)]"}, {"sha": "1ac2625dd475483edce4e66030a81f5f222eb741", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -392,10 +392,10 @@ pub trait Visitor<'v>: Sized {\n     fn visit_impl_item(&mut self, ii: &'v ImplItem<'v>) {\n         walk_impl_item(self, ii)\n     }\n-    fn visit_foreign_item_ref(&mut self, ii: &'v ForeignItemRef<'v>) {\n+    fn visit_foreign_item_ref(&mut self, ii: &'v ForeignItemRef) {\n         walk_foreign_item_ref(self, ii)\n     }\n-    fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef<'v>) {\n+    fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef) {\n         walk_impl_item_ref(self, ii)\n     }\n     fn visit_trait_ref(&mut self, t: &'v TraitRef<'v>) {\n@@ -1042,22 +1042,20 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n \n pub fn walk_foreign_item_ref<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n-    foreign_item_ref: &'v ForeignItemRef<'v>,\n+    foreign_item_ref: &'v ForeignItemRef,\n ) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ForeignItemRef { id, ident, span: _, ref vis } = *foreign_item_ref;\n+    let ForeignItemRef { id, ident, span: _ } = *foreign_item_ref;\n     visitor.visit_nested_foreign_item(id);\n     visitor.visit_ident(ident);\n-    visitor.visit_vis(vis);\n }\n \n-pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef<'v>) {\n+pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItemRef { id, ident, ref kind, span: _, ref vis, ref defaultness } = *impl_item_ref;\n+    let ImplItemRef { id, ident, ref kind, span: _, ref defaultness } = *impl_item_ref;\n     visitor.visit_nested_impl_item(id);\n     visitor.visit_ident(ident);\n     visitor.visit_associated_item_kind(kind);\n-    visitor.visit_vis(vis);\n     visitor.visit_defaultness(defaultness);\n }\n "}, {"sha": "5ad55dbf5c80d38ba9415413204d6aa34a9f3aea", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -382,7 +382,7 @@ impl Collector<'tcx> {\n         }\n     }\n \n-    fn i686_arg_list_size(&self, item: &hir::ForeignItemRef<'_>) -> usize {\n+    fn i686_arg_list_size(&self, item: &hir::ForeignItemRef) -> usize {\n         let argument_types: &List<Ty<'_>> = self.tcx.erase_late_bound_regions(\n             self.tcx\n                 .type_of(item.id.def_id)\n@@ -406,7 +406,7 @@ impl Collector<'tcx> {\n             .sum()\n     }\n \n-    fn build_dll_import(&self, abi: Abi, item: &hir::ForeignItemRef<'_>) -> DllImport {\n+    fn build_dll_import(&self, abi: Abi, item: &hir::ForeignItemRef) -> DllImport {\n         let calling_convention = if self.tcx.sess.target.arch == \"x86\" {\n             match abi {\n                 Abi::C { .. } | Abi::Cdecl => DllCallingConvention::C,"}, {"sha": "5ecb1c9b0ffcc3b62cf49b960178704dab9ea131", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -413,18 +413,18 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.visit_nested_trait_item(id);\n     }\n \n-    fn visit_impl_item_ref(&mut self, ii: &'hir ImplItemRef<'hir>) {\n+    fn visit_impl_item_ref(&mut self, ii: &'hir ImplItemRef) {\n         // Do not visit the duplicate information in ImplItemRef. We want to\n         // map the actual nodes, not the duplicate ones in the *Ref.\n-        let ImplItemRef { id, ident: _, kind: _, span: _, vis: _, defaultness: _ } = *ii;\n+        let ImplItemRef { id, ident: _, kind: _, span: _, defaultness: _ } = *ii;\n \n         self.visit_nested_impl_item(id);\n     }\n \n-    fn visit_foreign_item_ref(&mut self, fi: &'hir ForeignItemRef<'hir>) {\n+    fn visit_foreign_item_ref(&mut self, fi: &'hir ForeignItemRef) {\n         // Do not visit the duplicate information in ForeignItemRef. We want to\n         // map the actual nodes, not the duplicate ones in the *Ref.\n-        let ForeignItemRef { id, ident: _, span: _, vis: _ } = *fi;\n+        let ForeignItemRef { id, ident: _, span: _ } = *fi;\n \n         self.visit_nested_foreign_item(id);\n     }"}, {"sha": "0e60ca9f900107a011ecfaa229c220b298de45b1", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -163,14 +163,14 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         self.hir_ids_seen.insert(hir_id.local_id);\n     }\n \n-    fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef<'hir>) {\n+    fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef) {\n         // Explicitly do nothing here. ImplItemRefs contain hir::Visibility\n         // values that actually belong to an ImplItem instead of the ItemKind::Impl\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n \n-    fn visit_foreign_item_ref(&mut self, _: &'hir hir::ForeignItemRef<'hir>) {\n+    fn visit_foreign_item_ref(&mut self, _: &'hir hir::ForeignItemRef) {\n         // Explicitly do nothing here. ForeignItemRefs contain hir::Visibility\n         // values that actually belong to an ForeignItem instead of the ItemKind::ForeignMod\n         // we are currently in. So for those it's correct that they have a"}, {"sha": "e14f758ddae79662db51d039b80d2cff40985112", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -743,7 +743,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             hir::ItemKind::Impl(ref impl_) => {\n                 for impl_item_ref in impl_.items {\n-                    if impl_.of_trait.is_some() || impl_item_ref.vis.node.is_pub() {\n+                    if impl_.of_trait.is_some()\n+                        || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public\n+                    {\n                         self.update(impl_item_ref.id.def_id, item_level);\n                     }\n                 }\n@@ -768,7 +770,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    if foreign_item.vis.node.is_pub() {\n+                    if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {\n                         self.update(foreign_item.id.def_id, item_level);\n                     }\n                 }\n@@ -1678,7 +1680,10 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     // methods will be visible as `Public::foo`.\n                     let mut found_pub_static = false;\n                     for impl_item_ref in impl_.items {\n-                        if self.item_is_public(impl_item_ref.id.def_id, &impl_item_ref.vis) {\n+                        if self.access_levels.is_reachable(impl_item_ref.id.def_id)\n+                            || self.tcx.visibility(impl_item_ref.id.def_id)\n+                                == ty::Visibility::Public\n+                        {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n                                 AssocItemKind::Const => {"}, {"sha": "611ff26d652277ebfc3ef482faff31a4624af93f", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -209,7 +209,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         _ => return,\n     };\n     let fix_span =\n-        |impl_item_ref: &hir::ImplItemRef<'_>| match tcx.hir().impl_item(impl_item_ref.id).kind {\n+        |impl_item_ref: &hir::ImplItemRef| match tcx.hir().impl_item(impl_item_ref.id).kind {\n             hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::TyAlias(ty) => ty.span,\n             _ => impl_item_ref.span,\n         };"}, {"sha": "3d3b2743700917090e208f651426d5b3d5d3e79a", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -100,7 +100,7 @@ fn associated_item_from_trait_item_ref(\n fn associated_item_from_impl_item_ref(\n     tcx: TyCtxt<'_>,\n     parent_def_id: LocalDefId,\n-    impl_item_ref: &hir::ImplItemRef<'_>,\n+    impl_item_ref: &hir::ImplItemRef,\n ) -> ty::AssocItem {\n     let def_id = impl_item_ref.id.def_id;\n     let (kind, has_self) = match impl_item_ref.kind {"}, {"sha": "d6c59312c0bc8d558ae68866b7299df470649eac", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -906,7 +906,7 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n     full_impl_span: Span,\n     impl_id: LocalDefId,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n-    impl_item_refs: &[hir::ImplItemRef<'_>],\n+    impl_item_refs: &[hir::ImplItemRef],\n ) {\n     // If the trait reference itself is erroneous (so the compilation is going\n     // to fail), skip checking the items here -- the `impl_item` table in `tcx`"}, {"sha": "f3fe09ac0033d4802b8d1797d40fb91c57b343b2", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -401,7 +401,7 @@ impl InherentCollect<'tcx> {\n         lang: &str,\n         ty: &str,\n         span: Span,\n-        assoc_items: &[hir::ImplItemRef<'_>],\n+        assoc_items: &[hir::ImplItemRef],\n     ) {\n         match (lang_def_id, lang_def_id2) {\n             (Some(lang_def_id), _) if lang_def_id == impl_def_id.to_def_id() => {"}, {"sha": "5d2f8fc4242756b798c1c9485cf999603f78fce3", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -97,7 +97,7 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n fn enforce_impl_params_are_constrained(\n     tcx: TyCtxt<'_>,\n     impl_def_id: LocalDefId,\n-    impl_item_refs: &[hir::ImplItemRef<'_>],\n+    impl_item_refs: &[hir::ImplItemRef],\n ) {\n     // Every lifetime used in an associated type must be constrained.\n     let impl_self_ty = tcx.type_of(impl_def_id);\n@@ -228,7 +228,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str)\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef<'_>]) {\n+fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef]) {\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {"}, {"sha": "f22f52b949e1a8609bb55be59bac866544a02758", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7795d302adbb8c1547c952cd0d04a7f9ca29262/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7795d302adbb8c1547c952cd0d04a7f9ca29262/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=d7795d302adbb8c1547c952cd0d04a7f9ca29262", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef<'_>]) {\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc_hir::{Expr, ExprKind, ImplItemKind, QPath};\n "}]}