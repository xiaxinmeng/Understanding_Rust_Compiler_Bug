{"sha": "888055eb4cbd6136d7f7f5d32be98a477fbde749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODA1NWViNGNiZDYxMzZkN2Y3ZjVkMzJiZTk4YTQ3N2ZiZGU3NDk=", "commit": {"author": {"name": "mendess", "email": "pedro.mendes.26@gmail.com", "date": "2020-11-24T11:05:55Z"}, "committer": {"name": "mendess", "email": "pedro.mendes.26@gmail.com", "date": "2020-11-24T11:05:55Z"}, "message": "Swap note for help", "tree": {"sha": "2639a788566972fd0d24a825a23948edd673306e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2639a788566972fd0d24a825a23948edd673306e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888055eb4cbd6136d7f7f5d32be98a477fbde749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888055eb4cbd6136d7f7f5d32be98a477fbde749", "html_url": "https://github.com/rust-lang/rust/commit/888055eb4cbd6136d7f7f5d32be98a477fbde749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888055eb4cbd6136d7f7f5d32be98a477fbde749/comments", "author": {"login": "mendess", "id": 19352680, "node_id": "MDQ6VXNlcjE5MzUyNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/19352680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mendess", "html_url": "https://github.com/mendess", "followers_url": "https://api.github.com/users/mendess/followers", "following_url": "https://api.github.com/users/mendess/following{/other_user}", "gists_url": "https://api.github.com/users/mendess/gists{/gist_id}", "starred_url": "https://api.github.com/users/mendess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mendess/subscriptions", "organizations_url": "https://api.github.com/users/mendess/orgs", "repos_url": "https://api.github.com/users/mendess/repos", "events_url": "https://api.github.com/users/mendess/events{/privacy}", "received_events_url": "https://api.github.com/users/mendess/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mendess", "id": 19352680, "node_id": "MDQ6VXNlcjE5MzUyNjgw", "avatar_url": "https://avatars.githubusercontent.com/u/19352680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mendess", "html_url": "https://github.com/mendess", "followers_url": "https://api.github.com/users/mendess/followers", "following_url": "https://api.github.com/users/mendess/following{/other_user}", "gists_url": "https://api.github.com/users/mendess/gists{/gist_id}", "starred_url": "https://api.github.com/users/mendess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mendess/subscriptions", "organizations_url": "https://api.github.com/users/mendess/orgs", "repos_url": "https://api.github.com/users/mendess/repos", "events_url": "https://api.github.com/users/mendess/events{/privacy}", "received_events_url": "https://api.github.com/users/mendess/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af978e3b63dce24e81a9ebecde08c9116f871a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af978e3b63dce24e81a9ebecde08c9116f871a4e", "html_url": "https://github.com/rust-lang/rust/commit/af978e3b63dce24e81a9ebecde08c9116f871a4e"}], "stats": {"total": 226, "additions": 113, "deletions": 113}, "files": [{"sha": "a0d5b61e8bd1b590f2d9b529df705a860fc13424", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -481,7 +481,7 @@ impl<'a> Resolver<'a> {\n                         name\n                     ));\n                 }\n-                err.note(\"use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\");\n+                err.help(\"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\");\n \n                 err\n             }"}, {"sha": "aeca801a4ee00a88ad152cd333889f364610a670", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -329,7 +329,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                             ),\n                         )\n                         .note(\"the only supported types are integers, `bool` and `char`\")\n-                        .note(\"more complex types are supported with `#[feature(const_generics)]`\")\n+                        .help(\"more complex types are supported with `#[feature(const_generics)]`\")\n                         .emit()\n                 }\n             };"}, {"sha": "73c9ea59c955bddc4f9f1c4005afc148899f0f7f", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n@@ -14,7 +14,7 @@ LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21\n@@ -23,7 +23,7 @@ LL | struct B<const CFG: Config> {\n    |                     ^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "042fa9ad958b18d4bf22026d20a774c949c867d9", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:15:23\n@@ -14,7 +14,7 @@ LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:25:23\n@@ -23,7 +23,7 @@ LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:30:24\n@@ -32,7 +32,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:31:24\n@@ -41,7 +41,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:36:27\n@@ -50,7 +50,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:37:27\n@@ -59,7 +59,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:16:23"}, {"sha": "8a1074392a5cbd09bf65f568cda92eb9a791a432", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12"}, {"sha": "354c6d0615f1b5947db9ce8c41be1cb3050224b5", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -17,7 +17,7 @@ LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |                 ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-before-other-params.rs:11:17\n@@ -26,7 +26,7 @@ LL | fn foo<const X: (), T>(_: &T) {}\n    |                 ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ed30182690a7abb2f1113e9a071a9658136b6bb3", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -35,7 +35,7 @@ LL | struct A<const N: &u8>;\n    |                   ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:16:15\n@@ -44,7 +44,7 @@ LL | impl<const N: &u8> A<N> {\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:24:15\n@@ -53,7 +53,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:28:17\n@@ -62,7 +62,7 @@ LL | fn bar<const N: &u8>() {}\n    |                 ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:19:21\n@@ -71,7 +71,7 @@ LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "6b7a218ada5ddef7b805b7e354056f63ac8f40d7", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -17,7 +17,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:16:35\n@@ -26,7 +26,7 @@ LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                   ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "573bc66b7c7e86afa88c1e272e76aad6806b4d73", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "d476a7eb6455cb95882da003faf9c2724d0f480a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:35\n@@ -14,7 +14,7 @@ LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd81e0bc5a8cfa6d46ba33db138e346df1668d20", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "e5b393ffe99ebb5c152685fd456973ecf77fcb95", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const V: [usize; 1]> {}\n    |                       ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "014200178b9ca5ad8a37bac466a364d2d33c8f9b", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct B<const X: A>; // ok\n    |                   ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `C` is forbidden as the type of a const generic parameter\n   --> $DIR/forbid-non-structural_match-types.rs:15:19\n@@ -14,7 +14,7 @@ LL | struct D<const X: C>;\n    |                   ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/forbid-non-structural_match-types.rs:15:19"}, {"sha": "526f98fe8cd4f3e182b13c636c606df744797baf", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:12:13\n@@ -14,7 +14,7 @@ LL |     [0; foo(N)]\n    |             ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e531b612b5609d5dfe7d5215c578ad7701edd3e1", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ cannot perform const operation using `A`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `A`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:57\n@@ -14,7 +14,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                         ^ cannot perform const operation using `B`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `B`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02467df193c39d380ffb3d952dff3959edac3339", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n@@ -14,7 +14,7 @@ LL | trait Trait<const S: &'static str> {}\n    |                      ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2eaef95c2321607a80a97921dd641b6cec3cdfcc", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n@@ -14,7 +14,7 @@ LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c2e7e069a1819948f57a09462b876647c6a8f16", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | trait Trait<const NAME: &'static str> {\n    |                         ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "da96b5374a57dfd8acad7e85417099d6cf14dcbf", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |                         ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:7:12"}, {"sha": "8fea130baa57c50afe47fbfded37c471f46c6f1d", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:17:45\n@@ -14,7 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:11:12"}, {"sha": "50633772b75a91c3062cb9207176f21240c8a5d3", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:15:45\n@@ -14,7 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:9:12"}, {"sha": "1de9e71b6eb008021eda8525827033770a8f6907", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     fn successor() -> Const<{C + 1}> {\n    |                              ^ cannot perform const operation using `C`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `C`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "b1d92056a544c259b0438dd606047f924142386d", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |         Self:FooImpl<{N==0}>\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "b338cdb87e1e5ee03e868329e36c3e5adc68dd11", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n    |                                                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "a4b501a7bb109f343a1965b020ec9af07f768cea", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = [0u64; N + 1];\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "5117e20d6266b5a26dc0ed999d6a6c876fa942d8", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const T: NoMatch>() -> bool {\n    |                 ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "9f95e5d88623e13bd21e0d3661a302a30fafa5b5", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                 ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5dbfdc6d652b6708f817ddc15f9890c4d498f0f1", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:10:18"}, {"sha": "681166b1d2b94b7d270dfc9c361913bba2896d83", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:19:38\n@@ -14,7 +14,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "ecd96ac37e404c059329b91d632ff0023a91d563", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     fact::<{ N - 1 }>();\n    |              ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "acaf4a33ee0a88548c34a6fd72e23f9d0e4009e9", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |                                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:12:13"}, {"sha": "59653114a6b61f81582fc39526532c5de1b629ab", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const V: [usize; 0]> {}\n    |                       ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "1ee881b96ec6037185bae03f24373e21f3ccd244", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const V: [usize; 0] > {}\n    |                     ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "ea91df1e0bf4db0c171bcf4a80a4a240188d4eee", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `INT_BITS`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:28\n@@ -14,7 +14,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `FRAC_BITS`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9b0a2946ca6cfa14dff6f1593f1d8fd2cb81e2d9", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                      ^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "27bbc28011f2e5c9e84fcb69b216d41577dbdfb1", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:24\n@@ -14,7 +14,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:25\n@@ -23,7 +23,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `I`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:36\n@@ -32,7 +32,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:22:26"}, {"sha": "2394b23d7995be7ed55ed882353dbc1c1229c3a0", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "3ff0563acc77d0281e3be0cd128ff5a33b0cb8f9", "filename": "src/test/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn hoge<const IN: [u32; LEN]>() {}\n    |                   ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "1351246667e9bb9802b24898fb1454c243799d46", "filename": "src/test/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    |                  ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:10:21\n@@ -14,7 +14,7 @@ LL | struct Foo<const N: [u8; 1 + 2]>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e3e8502ae6349312f0528b86ec1cc2c19f48733b", "filename": "src/test/ui/const-generics/issues/issue-74255.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     fn ice_struct_fn<const I: IceEnum>() {}\n    |                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "12947a2ab37583497d7dd27645b14a6c206be47c", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n@@ -14,7 +14,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n@@ -23,7 +23,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n@@ -32,7 +32,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n@@ -41,7 +41,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b87bb18a5a6830cdd8d1e904700d02187b25e8ab", "filename": "src/test/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "551b8e43e1d4c00298f8f733f4ad74320400a615", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n@@ -14,7 +14,7 @@ LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                          ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c400e2c814dd70a872ec58e3a18dff04eff140ce", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -27,7 +27,7 @@ LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:41:19\n@@ -36,7 +36,7 @@ LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:46:20\n@@ -45,7 +45,7 @@ LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:51:19\n@@ -54,7 +54,7 @@ LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2ea66279d460881ed3c97f73bb90d01f91269a96", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:14:40\n@@ -14,7 +14,7 @@ LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:18:17\n@@ -23,7 +23,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:23:17\n@@ -32,7 +32,7 @@ LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:27:45\n@@ -41,7 +41,7 @@ LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    |                                             ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:30:47\n@@ -50,7 +50,7 @@ LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    |                                               ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:34:32\n@@ -59,7 +59,7 @@ LL |     let _: [u8; size_of::<*mut T>() + 1];\n    |                                ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/complex-expression.rs:39:17"}, {"sha": "5d473f1f8769fa8d477fd7770b888a3a57296d9b", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; 0]>;\n    |                     ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:7:21\n@@ -14,7 +14,7 @@ LL | struct Bar<const N: ()>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `No` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:12:21\n@@ -23,7 +23,7 @@ LL | struct Fez<const N: No>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:15:21\n@@ -32,7 +32,7 @@ LL | struct Faz<const N: &'static u8>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `!` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:18:21\n@@ -41,7 +41,7 @@ LL | struct Fiz<const N: !>;\n    |                     ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:21:19\n@@ -50,7 +50,7 @@ LL | enum Goo<const N: ()> { A, B }\n    |                   ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:24:20\n@@ -59,7 +59,7 @@ LL | union Boo<const N: ()> { a: () }\n    |                    ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "40c73f0b95136bdb9114fa69939eef0c5591afe5", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^ cannot perform const operation using `Self`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "6c39f6b4c1dc3b8c9f623f0bc3a400fb20e4a480", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | fn a<const X: &'static [u32]>() {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "6b90329b72cee19b193cfe3ea3e0776ecd96119d", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const P: &'static ()>;\n    |                       ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "369e387508e9fc46275fa292dd4362a582f4182d", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -12,7 +12,7 @@ LL | | }]>;\n    | |__^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/nested-type.rs:16:5"}, {"sha": "9e0837a0a620c656254809b597f0d020f4f260b7", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -13,7 +13,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "46997fed770ac34fb0390fc647d9df383eb337ad", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct ConstString<const T: &'static str>;\n    |                             ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param-mismatch.rs:10:28\n@@ -14,7 +14,7 @@ LL | struct ConstBytes<const T: &'static [u8]>;\n    |                            ^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a9f65233e7937d3b82858313dca05bb0cd4a513", "filename": "src/test/ui/const-generics/slice-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n    |                                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param.rs:13:41\n@@ -14,7 +14,7 @@ LL | pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n    |                                         ^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9274ccd2b921a9965a621ee0676168c58f6bf4a3", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | struct _Range<const R: std::ops::Range<usize>>;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `RangeFrom<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:13:28\n@@ -14,7 +14,7 @@ LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `RangeFull` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:18:28\n@@ -23,7 +23,7 @@ LL | struct _RangeFull<const R: std::ops::RangeFull>;\n    |                            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:24:33\n@@ -32,7 +32,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `RangeTo<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:29:26\n@@ -41,7 +41,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:34:35\n@@ -50,7 +50,7 @@ LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8f240f0d930a4ba7d2bcb04e58b02c91f5f59018", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL | trait Get<'a, const N: &'static str> {\n    |                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71348.rs:19:25\n@@ -14,7 +14,7 @@ LL |     fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Ta\n    |                         ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99142cb6ce7a585d959109023fb87942596d6796", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888055eb4cbd6136d7f7f5d32be98a477fbde749/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=888055eb4cbd6136d7f7f5d32be98a477fbde749", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:17:21\n@@ -14,7 +14,7 @@ LL |     let _: Const::<{N + 1}>;\n    |                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = note: use #![feature(const_generics)] and #![feature(const_evaluatable_checked)] to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}]}