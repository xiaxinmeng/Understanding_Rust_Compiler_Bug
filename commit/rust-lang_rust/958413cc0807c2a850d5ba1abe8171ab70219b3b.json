{"sha": "958413cc0807c2a850d5ba1abe8171ab70219b3b", "node_id": "C_kwDOAAsO6NoAKDk1ODQxM2NjMDgwN2MyYTg1MGQ1YmExYWJlODE3MWFiNzAyMTliM2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-13T09:21:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-13T09:21:00Z"}, "message": "Rollup merge of #110195 - compiler-errors:issue-110052, r=aliemjay\n\nErase lifetimes above `ty::INNERMOST` when probing ambiguous types\n\nTurns out that `TyCtxt::replace_escaping_bound_vars_uncached` only erases bound vars exactly at `ty::INNERMOST`, and not everything above. This regresses the suggestions for non-lifetime binders, but oh well, I don't really care about those.\n\nFixes #110052", "tree": {"sha": "d76db240ec89e36024717798c7f491864d78bd01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d76db240ec89e36024717798c7f491864d78bd01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958413cc0807c2a850d5ba1abe8171ab70219b3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkN8l8CRBK7hj4Ov3rIwAAdlMIAAtnueA/sffLv++8c6e5uPQV\n6IL1NqSIdV4x8Nr3N2/EzFewwZSul8yr+KbW7eTl2Ns4FRkDOA/nMYw64s7UnXi5\n39fRpS6Jl/F86M/wt023axDRHzLnUY/mkwafSjRECif4vaSP8sZHXM6uLT8y1w0I\ncga2zjHf4jH1zKMb93RHrprZpdnwWtxCL0vFtx8k6CWmisPS3Q7LkirLur9n02lT\n+I0krtuz1gTHwibwvTB0hLdMI4WUKWq5QF50GFKxcs74oSvlZ7zHAknfGmrYgIhf\nym4bObZPqA7jo5v1f22jNy4H3LrnyRsYzDvMyEmZ82jFQuqa+nTSLt5d/nrk088=\n=hCCh\n-----END PGP SIGNATURE-----\n", "payload": "tree d76db240ec89e36024717798c7f491864d78bd01\nparent 6161fb8c65de602b34702a5891d22baf624fe54a\nparent 5eb0528483ddb7614578fe5ef4b1104047b10ce6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681377660 +0200\ncommitter GitHub <noreply@github.com> 1681377660 +0200\n\nRollup merge of #110195 - compiler-errors:issue-110052, r=aliemjay\n\nErase lifetimes above `ty::INNERMOST` when probing ambiguous types\n\nTurns out that `TyCtxt::replace_escaping_bound_vars_uncached` only erases bound vars exactly at `ty::INNERMOST`, and not everything above. This regresses the suggestions for non-lifetime binders, but oh well, I don't really care about those.\n\nFixes #110052\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958413cc0807c2a850d5ba1abe8171ab70219b3b", "html_url": "https://github.com/rust-lang/rust/commit/958413cc0807c2a850d5ba1abe8171ab70219b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958413cc0807c2a850d5ba1abe8171ab70219b3b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6161fb8c65de602b34702a5891d22baf624fe54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6161fb8c65de602b34702a5891d22baf624fe54a", "html_url": "https://github.com/rust-lang/rust/commit/6161fb8c65de602b34702a5891d22baf624fe54a"}, {"sha": "5eb0528483ddb7614578fe5ef4b1104047b10ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb0528483ddb7614578fe5ef4b1104047b10ce6", "html_url": "https://github.com/rust-lang/rust/commit/5eb0528483ddb7614578fe5ef4b1104047b10ce6"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "8d1156c1771e9cd4c3cce7851bc81e0d1c0ea9cc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/958413cc0807c2a850d5ba1abe8171ab70219b3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958413cc0807c2a850d5ba1abe8171ab70219b3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=958413cc0807c2a850d5ba1abe8171ab70219b3b", "patch": "@@ -2520,24 +2520,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     tcx,\n                                     infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id),\n                                 );\n-                                // I guess we don't need to make a universe unless we need it,\n-                                // but also we're on the error path, so it doesn't matter here.\n-                                let universe = infcx.create_next_universe();\n+                                let value = tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased);\n+                                // FIXME: Don't bother dealing with non-lifetime binders here...\n+                                if value.has_escaping_bound_vars() {\n+                                    return false;\n+                                }\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n                                         impl_.self_ty(),\n-                                        tcx.replace_escaping_bound_vars_uncached(qself_ty, ty::fold::FnMutDelegate {\n-                                            regions: &mut |_| tcx.lifetimes.re_erased,\n-                                            types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n-                                                universe,\n-                                                bound: bv,\n-                                            }),\n-                                            consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n-                                                universe,\n-                                                bound: bv,\n-                                            }, ty),\n-                                        })\n+                                        value,\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative"}, {"sha": "d985386423d29c07debe82952e73a53f703341b4", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr?ref=958413cc0807c2a850d5ba1abe8171ab70219b3b", "patch": "@@ -11,7 +11,12 @@ error[E0223]: ambiguous associated type\n   --> $DIR/missing-assoc-item.rs:6:12\n    |\n LL |     for<B> B::Item: Send,\n-   |            ^^^^^^^ help: use the fully-qualified path: `<B as IntoIterator>::Item`\n+   |            ^^^^^^^\n+   |\n+help: if there were a trait named `Example` with associated type `Item` implemented for `B`, you could use the fully-qualified path\n+   |\n+LL |     for<B> <B as Example>::Item: Send,\n+   |            ~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f124b58b5b605c234e58d3d346b7525c1329e0b2", "filename": "tests/ui/typeck/issue-110052.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftypeck%2Fissue-110052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftypeck%2Fissue-110052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-110052.rs?ref=958413cc0807c2a850d5ba1abe8171ab70219b3b", "patch": "@@ -0,0 +1,12 @@\n+// Makes sure we deal with escaping lifetimes *above* INNERMOST when\n+// suggesting trait for ambiguous associated type.\n+\n+impl<I, V> Validator<I> for ()\n+where\n+    for<'iter> dyn Validator<<&'iter I>::Item>:,\n+    //~^ ERROR ambiguous associated type\n+{}\n+\n+pub trait Validator<T> {}\n+\n+fn main() {}"}, {"sha": "0c15c03a7408de20612cacf16c748d7a069c9faf", "filename": "tests/ui/typeck/issue-110052.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftypeck%2Fissue-110052.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/958413cc0807c2a850d5ba1abe8171ab70219b3b/tests%2Fui%2Ftypeck%2Fissue-110052.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-110052.stderr?ref=958413cc0807c2a850d5ba1abe8171ab70219b3b", "patch": "@@ -0,0 +1,9 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/issue-110052.rs:6:30\n+   |\n+LL |     for<'iter> dyn Validator<<&'iter I>::Item>:,\n+   |                              ^^^^^^^^^^^^^^^^ help: use the fully-qualified path: `<&'iter I as IntoIterator>::Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0223`."}]}