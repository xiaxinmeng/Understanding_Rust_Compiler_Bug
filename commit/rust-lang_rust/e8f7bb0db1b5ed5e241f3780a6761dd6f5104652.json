{"sha": "e8f7bb0db1b5ed5e241f3780a6761dd6f5104652", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjdiYjBkYjFiNWVkNWUyNDFmMzc4MGE2NzYxZGQ2ZjUxMDQ2NTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T02:01:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T02:01:01Z"}, "message": "core: Cleanup bool module\n\nInstead of defining a type for bool, just use the bool type directly in order\nto be more consistent with other modules. Cleanup the comments a bit.", "tree": {"sha": "9d47a02f0cc765a1983e1e46b1a594638654c1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d47a02f0cc765a1983e1e46b1a594638654c1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652", "html_url": "https://github.com/rust-lang/rust/commit/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e5a1c8b3c56979b0d7025e83dc378f3d05b208", "html_url": "https://github.com/rust-lang/rust/commit/91e5a1c8b3c56979b0d7025e83dc378f3d05b208"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "42df0e29a994749ca420a8990be672b57abcd04d", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f7bb0db1b5ed5e241f3780a6761dd6f5104652/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=e8f7bb0db1b5ed5e241f3780a6761dd6f5104652", "patch": "@@ -1,46 +1,46 @@\n // -*- rust -*-\n \n-#[doc = \"Classic Boolean logic reified as ADT\"];\n+#[doc = \"Boolean logic\"];\n \n-export t;\n export not, and, or, xor, implies;\n export eq, ne, is_true, is_false;\n export from_str, to_str, all_values, to_bit;\n \n-#[doc = \"The type of boolean logic values\"]\n-type t = bool;\n-\n-#[doc = \"Negation/Inverse\"]\n-pure fn not(v: t) -> t { !v }\n+#[doc = \"Negation / inverse\"]\n+pure fn not(v: bool) -> bool { !v }\n \n #[doc = \"Conjunction\"]\n-pure fn and(a: t, b: t) -> t { a && b }\n+pure fn and(a: bool, b: bool) -> bool { a && b }\n \n #[doc = \"Disjunction\"]\n-pure fn or(a: t, b: t) -> t { a || b }\n+pure fn or(a: bool, b: bool) -> bool { a || b }\n+\n+#[doc = \"\n+Exclusive or\n \n-#[doc = \"Exclusive or, i.e. `or(and(a, not(b)), and(not(a), b))`\"]\n-pure fn xor(a: t, b: t) -> t { (a && !b) || (!a && b) }\n+Identical to `or(and(a, not(b)), and(not(a), b))`\n+\"]\n+pure fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n \n #[doc = \"Implication in the logic, i.e. from `a` follows `b`\"]\n-pure fn implies(a: t, b: t) -> t { !a || b }\n+pure fn implies(a: bool, b: bool) -> bool { !a || b }\n \n #[doc = \"\n true if truth values `a` and `b` are indistinguishable in the logic\n \"]\n-pure fn eq(a: t, b: t) -> bool { a == b }\n+pure fn eq(a: bool, b: bool) -> bool { a == b }\n \n #[doc = \"true if truth values `a` and `b` are distinguishable in the logic\"]\n-pure fn ne(a: t, b: t) -> bool { a != b }\n+pure fn ne(a: bool, b: bool) -> bool { a != b }\n \n #[doc = \"true if `v` represents truth in the logic\"]\n-pure fn is_true(v: t) -> bool { v }\n+pure fn is_true(v: bool) -> bool { v }\n \n #[doc = \"true if `v` represents falsehood in the logic\"]\n-pure fn is_false(v: t) -> bool { !v }\n+pure fn is_false(v: bool) -> bool { !v }\n \n #[doc = \"Parse logic value from `s`\"]\n-pure fn from_str(s: str) -> option<t> {\n+pure fn from_str(s: str) -> option<bool> {\n     alt check s {\n       \"true\" { some(true) }\n       \"false\" { some(false) }\n@@ -49,19 +49,19 @@ pure fn from_str(s: str) -> option<t> {\n }\n \n #[doc = \"Convert `v` into a string\"]\n-pure fn to_str(v: t) -> str { if v { \"true\" } else { \"false\" } }\n+pure fn to_str(v: bool) -> str { if v { \"true\" } else { \"false\" } }\n \n #[doc = \"\n Iterates over all truth values by passing them to `blk` in an unspecified\n order\n \"]\n-fn all_values(blk: fn(v: t)) {\n+fn all_values(blk: fn(v: bool)) {\n     blk(true);\n     blk(false);\n }\n \n #[doc = \"converts truth value to an 8 bit byte\"]\n-pure fn to_bit(v: t) -> u8 { if v { 1u8 } else { 0u8 } }\n+pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n #[test]\n fn test_bool_from_str() {"}]}