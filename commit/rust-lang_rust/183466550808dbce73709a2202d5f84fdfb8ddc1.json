{"sha": "183466550808dbce73709a2202d5f84fdfb8ddc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzQ2NjU1MDgwOGRiY2U3MzcwOWEyMjAyZDVmODRmZGZiOGRkYzE=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-02-08T12:10:52Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-03-20T19:09:26Z"}, "message": "Add unsize impls for arrays", "tree": {"sha": "2d0c0586ea92e8498090d9ccdf5315b2c795b098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0c0586ea92e8498090d9ccdf5315b2c795b098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183466550808dbce73709a2202d5f84fdfb8ddc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183466550808dbce73709a2202d5f84fdfb8ddc1", "html_url": "https://github.com/rust-lang/rust/commit/183466550808dbce73709a2202d5f84fdfb8ddc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183466550808dbce73709a2202d5f84fdfb8ddc1/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b4a0852d4726dc9b4836e50cf7e23662c47ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b4a0852d4726dc9b4836e50cf7e23662c47ae2", "html_url": "https://github.com/rust-lang/rust/commit/66b4a0852d4726dc9b4836e50cf7e23662c47ae2"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "ae9f1a27b9422f63b04fabb703b01b39cab3a157", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/183466550808dbce73709a2202d5f84fdfb8ddc1/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183466550808dbce73709a2202d5f84fdfb8ddc1/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=183466550808dbce73709a2202d5f84fdfb8ddc1", "patch": "@@ -10,6 +10,82 @@ use rustc::hir::def_id::DefId;\n use crate::lowering::Lower;\n use crate::generic_types;\n \n+crate fn assemble_builtin_unsize_impls<'tcx>(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    unsize_def_id: DefId,\n+    source: ty::Ty<'tcx>,\n+    target: ty::Ty<'tcx>,\n+    clauses: &mut Vec<Clause<'tcx>>\n+) {\n+    match (&source.sty, &target.sty) {\n+        (ty::Dynamic(data_a, ..), ty::Dynamic(data_b, ..)) => {\n+            if data_a.principal_def_id() != data_b.principal_def_id()\n+                || data_b.auto_traits().any(|b| data_a.auto_traits().all(|a| a != b))\n+            {\n+                return;\n+            }\n+\n+            // FIXME: rules for trait upcast\n+        }\n+\n+        (_, &ty::Dynamic(..)) => {\n+            // FIXME: basically, we should have something like:\n+            // ```\n+            // forall<T> {\n+            //     Implemented(T: Unsize< for<...> dyn Trait<...> >) :-\n+            //         for<...> Implemented(T: Trait<...>).\n+            // }\n+            // ```\n+            // The question is: how to correctly handle the higher-ranked\n+            // `for<...>` binder in order to have a generic rule?\n+            // (Having generic rules is useful for caching, as we may be able\n+            // to turn this function and others into tcx queries later on).\n+        }\n+\n+        (ty::Array(_, length), ty::Slice(_)) => {\n+            let ty_param = generic_types::bound(tcx, 0);\n+            let array_ty = tcx.mk_ty(ty::Array(ty_param, length));\n+            let slice_ty = tcx.mk_ty(ty::Slice(ty_param));\n+\n+            // `forall<T> { Implemented([T; N]: Unsize<[T]>). }`\n+            let clause = ProgramClause {\n+                goal: ty::TraitPredicate {\n+                    trait_ref: ty::TraitRef {\n+                        def_id: unsize_def_id,\n+                        substs: tcx.mk_substs_trait(array_ty, &[slice_ty.into()])\n+                    },\n+                }.lower(),\n+                hypotheses: ty::List::empty(),\n+                category: ProgramClauseCategory::Other,\n+            };\n+\n+            clauses.push(Clause::ForAll(ty::Binder::bind(clause)));\n+        }\n+\n+        (ty::Infer(ty::TyVar(_)), _) | (_, ty::Infer(ty::TyVar(_))) => {\n+            // FIXME: ambiguous\n+        }\n+\n+        (ty::Adt(def_id_a, ..), ty::Adt(def_id_b, ..)) => {\n+            if def_id_a != def_id_b {\n+                return;\n+            }\n+\n+            // FIXME: rules for struct unsizing\n+        }\n+\n+        (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {\n+            if tys_a.len() != tys_b.len() {\n+                return;\n+            }\n+\n+            // FIXME: rules for tuple unsizing\n+        }\n+\n+        _ => (),\n+    }\n+}\n+\n crate fn assemble_builtin_sized_impls<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     sized_def_id: DefId,"}, {"sha": "80fbd97c5876b111a37c2e482ba79b07f1c8d3ac", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/183466550808dbce73709a2202d5f84fdfb8ddc1/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183466550808dbce73709a2202d5f84fdfb8ddc1/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=183466550808dbce73709a2202d5f84fdfb8ddc1", "patch": "@@ -84,6 +84,18 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     );\n                 }\n \n+                if Some(trait_predicate.def_id()) == self.infcx.tcx.lang_items().unsize_trait() {\n+                    let source = trait_predicate.self_ty();\n+                    let target = trait_predicate.trait_ref.substs.type_at(1);\n+                    assemble_builtin_unsize_impls(\n+                        self.infcx.tcx,\n+                        trait_predicate.def_id(),\n+                        source,\n+                        target,\n+                        &mut clauses\n+                    );\n+                }\n+\n                 // FIXME: we need to add special rules for other builtin impls:\n                 // * `Copy` / `Clone`\n                 // * `Generator`"}]}