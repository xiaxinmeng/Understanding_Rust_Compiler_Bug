{"sha": "58b11229e563da705e2579821b8c3fe1fa799c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjExMjI5ZTU2M2RhNzA1ZTI1Nzk4MjFiOGMzZmUxZmE3OTljNTI=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2013-08-06T09:35:13Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2013-08-06T16:46:58Z"}, "message": "Use FromStr for IpAddr in rt::uv::net", "tree": {"sha": "7c35d82d659b8f5381b8bd5092046fd42ef413b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c35d82d659b8f5381b8bd5092046fd42ef413b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b11229e563da705e2579821b8c3fe1fa799c52", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b11229e563da705e2579821b8c3fe1fa799c52", "html_url": "https://github.com/rust-lang/rust/commit/58b11229e563da705e2579821b8c3fe1fa799c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b11229e563da705e2579821b8c3fe1fa799c52/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95b3689b34035a0c3d7831441c1eae0904903351", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b3689b34035a0c3d7831441c1eae0904903351", "html_url": "https://github.com/rust-lang/rust/commit/95b3689b34035a0c3d7831441c1eae0904903351"}], "stats": {"total": 72, "additions": 2, "deletions": 70}, "files": [{"sha": "c8b3d41a78d79b65e8b5316e77dcc98aa38cd529", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/58b11229e563da705e2579821b8c3fe1fa799c52/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b11229e563da705e2579821b8c3fe1fa799c52/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=58b11229e563da705e2579821b8c3fe1fa799c52", "patch": "@@ -20,7 +20,6 @@ use rt::uv::last_uv_error;\n use vec;\n use str;\n use from_str::{FromStr};\n-use num;\n \n pub enum UvSocketAddr {\n     UvIpv4SocketAddr(*sockaddr_in),\n@@ -85,77 +84,10 @@ fn uv_socket_addr_as_socket_addr<T>(addr: UvSocketAddr, f: &fn(SocketAddr) -> T)\n         port as u16\n     };\n     let ip_str = str::from_bytes_slice(ip_name).trim_right_chars(&'\\x00');\n-    let ip = match addr {\n-        UvIpv4SocketAddr(*) => {\n-            let ip: ~[u8] =\n-                ip_str.split_iter('.')\n-                      .transform(|s: &str| -> u8 { FromStr::from_str(s).unwrap() })\n-                      .collect();\n-            assert_eq!(ip.len(), 4);\n-            SocketAddr {\n-                ip: Ipv4Addr(ip[0], ip[1], ip[2], ip[3]),\n-                port: ip_port\n-            }\n-        },\n-        UvIpv6SocketAddr(*) => {\n-            let ip: ~[u16] = {\n-                let expand_shorthand_and_convert = |s: &str| -> ~[~[u16]] {\n-                    let convert_each_segment = |s: &str| -> ~[u16] {\n-                        let read_hex_segment = |s: &str| -> u16 {\n-                            num::FromStrRadix::from_str_radix(s, 16u).unwrap()\n-                        };\n-                        match s {\n-                            \"\" => ~[],\n-                            // IPv4-Mapped/Compatible IPv6 Address?\n-                            s if s.find('.').is_some() => {\n-                                let i = s.rfind(':').unwrap_or_default(-1);\n-\n-                                let b = s.slice(i + 1, s.len()); // the ipv4 part\n-\n-                                let h = b.split_iter('.')\n-                                   .transform(|s: &str| -> u8 { FromStr::from_str(s).unwrap() })\n-                                   .transform(|s: u8| -> ~str { fmt!(\"%02x\", s as uint) })\n-                                   .collect::<~[~str]>();\n-\n-                                if i == -1 {\n-                                    // Ipv4 Compatible Address (::x.x.x.x)\n-                                    // first 96 bits are zero leaving 32 bits\n-                                    // for the ipv4 part\n-                                    // (i.e ::127.0.0.1 == ::7F00:1)\n-                                    ~[num::FromStrRadix::from_str_radix(h[0] + h[1], 16).unwrap(),\n-                                      num::FromStrRadix::from_str_radix(h[2] + h[3], 16).unwrap()]\n-                                } else {\n-                                    // Ipv4-Mapped Address (::FFFF:x.x.x.x)\n-                                    // first 80 bits are zero, followed by all ones\n-                                    // for the next 16 bits, leaving 32 bits for\n-                                    // the ipv4 part\n-                                    // (i.e ::FFFF:127.0.0.1 == ::FFFF:7F00:1)\n-                                    ~[1,\n-                                      num::FromStrRadix::from_str_radix(h[0] + h[1], 16).unwrap(),\n-                                      num::FromStrRadix::from_str_radix(h[2] + h[3], 16).unwrap()]\n-                                }\n-                            },\n-                            s => s.split_iter(':').transform(read_hex_segment).collect()\n-                        }\n-                    };\n-                    s.split_str_iter(\"::\").transform(convert_each_segment).collect()\n-                };\n-                match expand_shorthand_and_convert(ip_str) {\n-                    [x] => x, // no shorthand found\n-                    [l, r] => l + vec::from_elem(8 - l.len() - r.len(), 0u16) + r, // fill the gap\n-                    _ => fail!(), // impossible. only one shorthand allowed.\n-                }\n-            };\n-            assert_eq!(ip.len(), 8);\n-            SocketAddr {\n-                ip: Ipv6Addr(ip[0], ip[1], ip[2], ip[3], ip[4], ip[5], ip[6], ip[7]),\n-                port: ip_port\n-            }\n-        },\n-    };\n+    let ip_addr = FromStr::from_str(ip_str).unwrap();\n \n     // finally run the closure\n-    f(ip)\n+    f(SocketAddr { ip: ip_addr, port: ip_port })\n }\n \n pub fn uv_socket_addr_to_socket_addr(addr: UvSocketAddr) -> SocketAddr {"}]}