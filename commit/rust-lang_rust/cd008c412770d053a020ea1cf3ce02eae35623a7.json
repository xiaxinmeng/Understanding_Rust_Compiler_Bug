{"sha": "cd008c412770d053a020ea1cf3ce02eae35623a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMDA4YzQxMjc3MGQwNTNhMDIwZWExY2YzY2UwMmVhZTM1NjIzYTc=", "commit": {"author": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-04T04:10:06Z"}, "committer": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-12T01:42:06Z"}, "message": "Add an implementation of the BitOps for BTreeSets.\n\nAdd initial attempt at implementing BitOr for BTreeSet.\n\nUpdate the implementation of the bitor operator for BTreeSets.\n\n`make check` ran fine through this.\n\nAdd implementations for BitAnd, BitXor, and Sub as well.\n\nRemove the FIXME comment and add unstable flags.\n\nAdd doctests for the bitop functions.", "tree": {"sha": "cc9824b5a4549634eab135fb61e67f1e8b437d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9824b5a4549634eab135fb61e67f1e8b437d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd008c412770d053a020ea1cf3ce02eae35623a7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd008c412770d053a020ea1cf3ce02eae35623a7", "html_url": "https://github.com/rust-lang/rust/commit/cd008c412770d053a020ea1cf3ce02eae35623a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd008c412770d053a020ea1cf3ce02eae35623a7/comments", "author": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207a5084110d106149f7aba96603abba5850fdcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/207a5084110d106149f7aba96603abba5850fdcb", "html_url": "https://github.com/rust-lang/rust/commit/207a5084110d106149f7aba96603abba5850fdcb"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "27c3fd1af3ecffce11d68b5b4dac34b4d022be6b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cd008c412770d053a020ea1cf3ce02eae35623a7/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd008c412770d053a020ea1cf3ce02eae35623a7/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=cd008c412770d053a020ea1cf3ce02eae35623a7", "patch": "@@ -22,7 +22,6 @@ use core::iter::Peekable;\n use core::fmt::Show;\n \n // FIXME(conventions): implement bounded iterators\n-// FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n \n /// A set based on a B-Tree.\n ///\n@@ -340,6 +339,90 @@ impl<T: Ord> Default for BTreeSet<T> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> Sub<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3,4,5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a - b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,2]);\n+    /// ```\n+    fn sub(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitXor<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2,3,4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a ^ b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,4]);\n+    /// ```\n+    fn bitxor(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitAnd<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![2,3,4].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a & b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![2,3]);\n+    /// ```\n+    fn bitand(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitOr<BTreeSet<T>,BTreeSet<T>> for BTreeSet<T> {\n+    /// Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let a: BTreeSet<int> = vec![1,2,3].into_iter().collect();\n+    /// let b: BTreeSet<int> = vec![3,4,5].into_iter().collect();\n+    ///\n+    /// let result: BTreeSet<int> = a | b;\n+    /// let result_vec: Vec<int> = result.into_iter().collect();\n+    /// assert_eq!(result_vec, vec![1,2,3,4,5]);\n+    /// ```\n+    fn bitor(&self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n impl<T: Show> Show for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}]}