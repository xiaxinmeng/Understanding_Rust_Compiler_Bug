{"sha": "35bf1ae25799a4e62131159f052e0a3cbd27c960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YmYxYWUyNTc5OWE0ZTYyMTMxMTU5ZjA1MmUwYTNjYmQyN2M5NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-23T11:46:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-23T11:46:24Z"}, "message": "Auto merge of #52602 - scottmcm:tryblock-expr, r=nikomatsakis\n\nImplement try block expressions\n\nI noticed that `try` wasn't a keyword yet in Rust 2018, so...\n\n~~Fix\u200bes https://github.com/rust-lang/rust/issues/52604~~ That was fixed by PR https://github.com/rust-lang/rust/pull/53135\ncc https://github.com/rust-lang/rust/issues/31436 https://github.com/rust-lang/rust/issues/50412", "tree": {"sha": "5f02fe2f099363dc95e480b4f9a62d6c79eaaafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f02fe2f099363dc95e480b4f9a62d6c79eaaafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35bf1ae25799a4e62131159f052e0a3cbd27c960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35bf1ae25799a4e62131159f052e0a3cbd27c960", "html_url": "https://github.com/rust-lang/rust/commit/35bf1ae25799a4e62131159f052e0a3cbd27c960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35bf1ae25799a4e62131159f052e0a3cbd27c960/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "827e57c2f69a9caad36fab189770ad0bb8957d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/827e57c2f69a9caad36fab189770ad0bb8957d4f", "html_url": "https://github.com/rust-lang/rust/commit/827e57c2f69a9caad36fab189770ad0bb8957d4f"}, {"sha": "009547141729b6d66f721065820edf9ddbde4831", "url": "https://api.github.com/repos/rust-lang/rust/commits/009547141729b6d66f721065820edf9ddbde4831", "html_url": "https://github.com/rust-lang/rust/commit/009547141729b6d66f721065820edf9ddbde4831"}], "stats": {"total": 544, "additions": 320, "deletions": 224}, "files": [{"sha": "866b37a39a7817e2fa1e99a464f18e9595df730e", "filename": "src/doc/unstable-book/src/language-features/try-blocks.md", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftry-blocks.md?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,27 +1,29 @@\n-# `catch_expr`\n+# `try_blocks`\n \n The tracking issue for this feature is: [#31436]\n \n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n \n-The `catch_expr` feature adds support for a `catch` expression. The `catch`\n-expression creates a new scope one can use the `?` operator in.\n+The `try_blocks` feature adds support for `try` blocks. A `try`\n+block creates a new scope one can use the `?` operator in.\n \n-```rust\n-#![feature(catch_expr)]\n+```rust,ignore\n+// This code needs the 2018 edition\n+\n+#![feature(try_blocks)]\n \n use std::num::ParseIntError;\n \n-let result: Result<i32, ParseIntError> = do catch {\n+let result: Result<i32, ParseIntError> = try {\n     \"1\".parse::<i32>()?\n         + \"2\".parse::<i32>()?\n         + \"3\".parse::<i32>()?\n };\n assert_eq!(result, Ok(6));\n \n-let result: Result<i32, ParseIntError> = do catch {\n+let result: Result<i32, ParseIntError> = try {\n     \"1\".parse::<i32>()?\n         + \"foo\".parse::<i32>()?\n         + \"3\".parse::<i32>()?", "previous_filename": "src/doc/unstable-book/src/language-features/catch-expr.md"}, {"sha": "acfda4c0055fce59535a1f24dbd0d1b2e0c64d1e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -3613,10 +3613,10 @@ impl<'a> LoweringContext<'a> {\n                     hir::LoopSource::Loop,\n                 )\n             }),\n-            ExprKind::Catch(ref body) => {\n+            ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n                     let unstable_span =\n-                        this.allow_internal_unstable(CompilerDesugaringKind::Catch, body.span);\n+                        this.allow_internal_unstable(CompilerDesugaringKind::TryBlock, body.span);\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n                         || {"}, {"sha": "4811f84635c7f9f20c0e59e5b0dddaa87232ffcc", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -412,7 +412,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n     QuestionMark,\n     ExistentialReturnType,\n     ForLoop,\n-    Catch\n+    TryBlock\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::FileName {"}, {"sha": "a232bcd67102e7805543c90ec36c6ce2085035d4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -65,7 +65,6 @@\n #![feature(trace_macros)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]\n-#![feature(catch_expr)]\n #![feature(step_trait)]\n #![feature(integer_atomics)]\n #![feature(test)]"}, {"sha": "40df78d6bfd37736440877658e44a8680485d240", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -312,14 +312,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     );\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;"}, {"sha": "6a8157df0ccff03cd6e93029e5b7e80f857366d4", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -21,7 +21,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(slice_sort_by_cached_key)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(catch_expr)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n@@ -63,6 +62,14 @@ extern crate rustc_apfloat;\n extern crate byteorder;\n extern crate core;\n \n+// Once we can use edition 2018 in the compiler,\n+// replace this with real try blocks.\n+macro_rules! try_block {\n+    ($($inside:tt)*) => (\n+        (||{ ::std::ops::Try::from_ok({ $($inside)* }) })()\n+    )\n+}\n+\n mod diagnostics;\n \n mod borrow_check;"}, {"sha": "886f83b8f2f3b2e173a696416cbcdd018650b703", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -140,7 +140,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n@@ -156,7 +156,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     };\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-        let _: io::Result<()> = do catch {\n+        let _: io::Result<()> = try_block! {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;"}, {"sha": "db4dda0da5b4e88100b3a2f8e2955de6aee7bfaa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -4471,7 +4471,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // In some cases, blocks have just one exit, but other blocks\n         // can be targeted by multiple breaks. This can happen both\n         // with labeled blocks as well as when we desugar\n-        // a `do catch { ... }` expression.\n+        // a `try { ... }` expression.\n         //\n         // Example 1:\n         //"}, {"sha": "b6084bcf343072aafefdca06983550ac8196ee76", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -987,7 +987,7 @@ impl Expr {\n             ExprKind::Match(..) => ExprPrecedence::Match,\n             ExprKind::Closure(..) => ExprPrecedence::Closure,\n             ExprKind::Block(..) => ExprPrecedence::Block,\n-            ExprKind::Catch(..) => ExprPrecedence::Catch,\n+            ExprKind::TryBlock(..) => ExprPrecedence::TryBlock,\n             ExprKind::Async(..) => ExprPrecedence::Async,\n             ExprKind::Assign(..) => ExprPrecedence::Assign,\n             ExprKind::AssignOp(..) => ExprPrecedence::AssignOp,\n@@ -1108,8 +1108,8 @@ pub enum ExprKind {\n     /// created during lowering cannot be made the parent of any other\n     /// preexisting defs.\n     Async(CaptureBy, NodeId, P<Block>),\n-    /// A catch block (`catch { ... }`)\n-    Catch(P<Block>),\n+    /// A try block (`try { ... }`)\n+    TryBlock(P<Block>),\n \n     /// An assignment (`a = foo()`)\n     Assign(P<Expr>, P<Expr>),"}, {"sha": "1ffb6e55f06e3f249c36d9c187ac60a324be9487", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -333,8 +333,8 @@ declare_features! (\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436), None),\n+    // Allows the `try {...}` expression\n+    (active, try_blocks, \"1.29.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n     (active, used, \"1.18.0\", Some(40289), None),\n@@ -1734,8 +1734,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   e.span,\n                                   \"yield syntax is experimental\");\n             }\n-            ast::ExprKind::Catch(_) => {\n-                gate_feature_post!(&self, catch_expr, e.span, \"`catch` expression is experimental\");\n+            ast::ExprKind::TryBlock(_) => {\n+                gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n             ast::ExprKind::IfLet(ref pats, ..) | ast::ExprKind::WhileLet(ref pats, ..) => {\n                 if pats.len() > 1 {"}, {"sha": "050d21674f91aff5767488fec87dd2cd117db37b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1351,7 +1351,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             }\n             ExprKind::Yield(ex) => ExprKind::Yield(ex.map(|x| folder.fold_expr(x))),\n             ExprKind::Try(ex) => ExprKind::Try(folder.fold_expr(ex)),\n-            ExprKind::Catch(body) => ExprKind::Catch(folder.fold_block(body)),\n+            ExprKind::TryBlock(body) => ExprKind::TryBlock(folder.fold_block(body)),\n         },\n         id: folder.new_id(id),\n         span: folder.new_span(span),"}, {"sha": "366b91fc8286e83de50cc9b3add14bfd20766ac7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -26,8 +26,8 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n+#![feature(try_trait)]\n #![feature(unicode_internals)]\n-#![feature(catch_expr)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "99f9d0511fe5e406046be5588594818d66c36089", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -31,7 +31,7 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n         ast::ExprKind::WhileLet(..) |\n         ast::ExprKind::Loop(..) |\n         ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Catch(..) => false,\n+        ast::ExprKind::TryBlock(..) => false,\n         _ => true,\n     }\n }"}, {"sha": "1e72f834b8ec6c1eaac040c2a9ad21458fe32179", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1757,9 +1757,17 @@ impl<'a> Parser<'a> {\n \n             let parser_snapshot_before_pat = self.clone();\n \n+            // Once we can use edition 2018 in the compiler,\n+            // replace this with real try blocks.\n+            macro_rules! try_block {\n+                ($($inside:tt)*) => (\n+                    (||{ ::std::ops::Try::from_ok({ $($inside)* }) })()\n+                )\n+            }\n+\n             // We're going to try parsing the argument as a pattern (even though it's not\n             // allowed). This way we can provide better errors to the user.\n-            let pat_arg: PResult<'a, _> = do catch {\n+            let pat_arg: PResult<'a, _> = try_block! {\n                 let pat = self.parse_pat()?;\n                 self.expect(&token::Colon)?;\n                 (pat, self.parse_ty()?)\n@@ -2387,11 +2395,15 @@ impl<'a> Parser<'a> {\n                         BlockCheckMode::Unsafe(ast::UserProvided),\n                         attrs);\n                 }\n-                if self.is_catch_expr() {\n+                if self.is_do_catch_block() {\n+                    let mut db = self.fatal(\"found removed `do catch` syntax\");\n+                    db.help(\"Following RFC #2388, the new non-placeholder syntax is `try`\");\n+                    return Err(db);\n+                }\n+                if self.is_try_block() {\n                     let lo = self.span;\n-                    assert!(self.eat_keyword(keywords::Do));\n-                    assert!(self.eat_keyword(keywords::Catch));\n-                    return self.parse_catch_expr(lo, attrs);\n+                    assert!(self.eat_keyword(keywords::Try));\n+                    return self.parse_try_block(lo, attrs);\n                 }\n                 if self.eat_keyword(keywords::Return) {\n                     if self.token.can_begin_expr() {\n@@ -3453,13 +3465,13 @@ impl<'a> Parser<'a> {\n             ExprKind::Async(capture_clause, ast::DUMMY_NODE_ID, body), attrs))\n     }\n \n-    /// Parse a `do catch {...}` expression (`do catch` token already eaten)\n-    fn parse_catch_expr(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n+    /// Parse a `try {...}` expression (`try` token already eaten)\n+    fn parse_try_block(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n         -> PResult<'a, P<Expr>>\n     {\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n-        Ok(self.mk_expr(span_lo.to(body.span), ExprKind::Catch(body), attrs))\n+        Ok(self.mk_expr(span_lo.to(body.span), ExprKind::TryBlock(body), attrs))\n     }\n \n     // `match` token already eaten\n@@ -4408,12 +4420,20 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    fn is_catch_expr(&mut self) -> bool {\n+    fn is_do_catch_block(&mut self) -> bool {\n         self.token.is_keyword(keywords::Do) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n         self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n+        !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n+    }\n+\n+    fn is_try_block(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Try) &&\n+        self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n+\n+        self.span.edition() >= Edition::Edition2018 &&\n \n-        // prevent `while catch {} {}`, `if catch {} {} else {}`, etc.\n+        // prevent `while try {} {}`, `if try {} {} else {}`, etc.\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n "}, {"sha": "be63c8f060a8e58756491ec19cb4fbf3af8aee50", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -2379,8 +2379,8 @@ impl<'a> State<'a> {\n                 self.print_expr_maybe_paren(e, parser::PREC_POSTFIX)?;\n                 self.s.word(\"?\")?\n             }\n-            ast::ExprKind::Catch(ref blk) => {\n-                self.head(\"do catch\")?;\n+            ast::ExprKind::TryBlock(ref blk) => {\n+                self.head(\"try\")?;\n                 self.s.space()?;\n                 self.print_block_with_attrs(blk, attrs)?\n             }"}, {"sha": "6866806cd7c669d0f19af0ce25c8efb3855cfed1", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -273,7 +273,7 @@ pub enum ExprPrecedence {\n     Loop,\n     Match,\n     Block,\n-    Catch,\n+    TryBlock,\n     Struct,\n     Async,\n }\n@@ -332,7 +332,7 @@ impl ExprPrecedence {\n             ExprPrecedence::Loop |\n             ExprPrecedence::Match |\n             ExprPrecedence::Block |\n-            ExprPrecedence::Catch |\n+            ExprPrecedence::TryBlock |\n             ExprPrecedence::Async |\n             ExprPrecedence::Struct => PREC_PAREN,\n         }"}, {"sha": "e57d692faae53de63a428a61c17342beb98459d9", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -809,7 +809,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Try(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprKind::Catch(ref body) => {\n+        ExprKind::TryBlock(ref body) => {\n             visitor.visit_block(body)\n         }\n     }"}, {"sha": "364c640debb16caddb1319464945b64b75a5bf7d", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -595,7 +595,7 @@ impl ExpnFormat {\n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum CompilerDesugaringKind {\n     QuestionMark,\n-    Catch,\n+    TryBlock,\n     /// Desugaring of an `impl Trait` in return type position\n     /// to an `existential type Foo: Trait;` + replacing the\n     /// `impl Trait` with `Foo`.\n@@ -609,7 +609,7 @@ impl CompilerDesugaringKind {\n         Symbol::intern(match self {\n             CompilerDesugaringKind::Async => \"async\",\n             CompilerDesugaringKind::QuestionMark => \"?\",\n-            CompilerDesugaringKind::Catch => \"do catch\",\n+            CompilerDesugaringKind::TryBlock => \"try block\",\n             CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n             CompilerDesugaringKind::ForLoop => \"for loop\",\n         })"}, {"sha": "defdca9abd15ae89ab057f20b2cb057ec759ecd3", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -415,23 +415,25 @@ declare_keywords! {\n \n     // Edition-specific keywords reserved for future use.\n     (51, Async,              \"async\") // >= 2018 Edition Only\n+    (52, Try,                \"try\") // >= 2018 Edition Only\n \n     // Special lifetime names\n-    (52, UnderscoreLifetime, \"'_\")\n-    (53, StaticLifetime,     \"'static\")\n+    (53, UnderscoreLifetime, \"'_\")\n+    (54, StaticLifetime,     \"'static\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (54, Auto,               \"auto\")\n-    (55, Catch,              \"catch\")\n-    (56, Default,            \"default\")\n-    (57, Dyn,                \"dyn\")\n-    (58, Union,              \"union\")\n-    (59, Existential,        \"existential\")\n+    (55, Auto,               \"auto\")\n+    (56, Catch,              \"catch\")\n+    (57, Default,            \"default\")\n+    (58, Dyn,                \"dyn\")\n+    (59, Union,              \"union\")\n+    (60, Existential,        \"existential\")\n }\n \n impl Symbol {\n     fn is_unused_keyword_2018(self) -> bool {\n-        self == keywords::Async.name()\n+        self >= keywords::Async.name() &&\n+        self <= keywords::Try.name()\n     }\n }\n "}, {"sha": "449135e69c3197c22bd39509efcf9c74e36428a0", "filename": "src/test/parse-fail/do-catch-suggests-try.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fparse-fail%2Fdo-catch-suggests-try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fparse-fail%2Fdo-catch-suggests-try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdo-catch-suggests-try.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn main() {\n+    let _: Option<()> = do catch {};\n+    //~^ ERROR found removed `do catch` syntax\n+    //~^^ HELP Following RFC #2388, the new non-placeholder syntax is `try`\n+}"}, {"sha": "1e4f85c122d6c154cafa615457e0b7dc09fc7b0f", "filename": "src/test/parse-fail/keyword-try-as-identifier-edition2018.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fparse-fail%2Fkeyword-try-as-identifier-edition2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fparse-fail%2Fkeyword-try-as-identifier-edition2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeyword-try-as-identifier-edition2018.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only --edition 2018\n+\n+fn main() {\n+    let try = \"foo\"; //~ error: expected pattern, found reserved keyword `try`\n+}"}, {"sha": "cb79eda8b07399c3a7b48ea947a013cb787584c7", "filename": "src/test/run-pass/issue-45124.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Fissue-45124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Fissue-45124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-45124.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n fn main() {\n     let mut a = 0;\n     let () = {\n-        let _: Result<(), ()> = do catch {\n+        let _: Result<(), ()> = try {\n             let _ = Err(())?;\n             return\n         };"}, {"sha": "a7e7cc2062095de7669aaee90c8e5c9060e66844", "filename": "src/test/run-pass/try-block.rs", "status": "renamed", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Ftry-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Ftry-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-block.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n struct catch {}\n \n pub fn main() {\n-    let catch_result: Option<_> = do catch {\n+    let catch_result: Option<_> = try {\n         let x = 5;\n         x\n     };\n@@ -30,20 +32,20 @@ pub fn main() {\n         _ => {}\n     };\n \n-    let catch_err: Result<_, i32> = do catch {\n+    let catch_err: Result<_, i32> = try {\n         Err(22)?;\n         1\n     };\n     assert_eq!(catch_err, Err(22));\n \n-    let catch_okay: Result<i32, i32> = do catch {\n+    let catch_okay: Result<i32, i32> = try {\n         if false { Err(25)?; }\n         Ok::<(), i32>(())?;\n         28\n     };\n     assert_eq!(catch_okay, Ok(28));\n \n-    let catch_from_loop: Result<i32, i32> = do catch {\n+    let catch_from_loop: Result<i32, i32> = try {\n         for i in 0..10 {\n             if i < 5 { Ok::<i32, i32>(i)?; } else { Err(i)?; }\n         }\n@@ -52,28 +54,28 @@ pub fn main() {\n     assert_eq!(catch_from_loop, Err(5));\n \n     let cfg_init;\n-    let _res: Result<(), ()> = do catch {\n+    let _res: Result<(), ()> = try {\n         cfg_init = 5;\n     };\n     assert_eq!(cfg_init, 5);\n \n     let cfg_init_2;\n-    let _res: Result<(), ()> = do catch {\n+    let _res: Result<(), ()> = try {\n         cfg_init_2 = 6;\n         Err(())?;\n     };\n     assert_eq!(cfg_init_2, 6);\n \n     let my_string = \"test\".to_string();\n-    let res: Result<&str, ()> = do catch {\n+    let res: Result<&str, ()> = try {\n         // Unfortunately, deref doesn't fire here (#49356)\n         &my_string[..]\n     };\n     assert_eq!(res, Ok(\"test\"));\n \n-    let my_opt: Option<_> = do catch { () };\n+    let my_opt: Option<_> = try { () };\n     assert_eq!(my_opt, Some(()));\n \n-    let my_opt: Option<_> = do catch { };\n+    let my_opt: Option<_> = try { };\n     assert_eq!(my_opt, Some(()));\n }", "previous_filename": "src/test/run-pass/catch-expr.rs"}, {"sha": "aafb52e4c491fd73683435eaed533f62e71c03ff", "filename": "src/test/run-pass/try-is-identifier-edition2015.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Ftry-is-identifier-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Frun-pass%2Ftry-is-identifier-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-is-identifier-edition2015.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition 2015\n+\n+fn main() {\n+    let try = 2;\n+    struct try { try: u32 };\n+    let try: try = try { try };\n+    assert_eq!(try.try, 2);\n+}"}, {"sha": "2ea54d1fb24dbdce63f4edecd4e633aaa987b873", "filename": "src/test/ui/catch/catch-bad-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,44 +0,0 @@\n-error[E0597]: `my_string` does not live long enough\n-  --> $DIR/catch-bad-lifetime.rs:20:35\n-   |\n-LL |             let my_str: & str = & my_string;\n-   |                                   ^^^^^^^^^ borrowed value does not live long enough\n-...\n-LL |         };\n-   |         - `my_string` dropped here while still borrowed\n-LL |     }\n-   |     - borrowed value needs to live until here\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:33:13\n-   |\n-LL |         let k = &mut i;\n-   |                      - borrow of `i` occurs here\n-...\n-LL |             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n-   |             ^^^^^^ assignment to borrowed `i` occurs here\n-\n-error[E0382]: use of moved value: `k`\n-  --> $DIR/catch-bad-lifetime.rs:35:26\n-   |\n-LL |             Err(k) ?;\n-   |                 - value moved here\n-...\n-LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n-   |                          ^ value used here after move\n-   |\n-   = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:36:9\n-   |\n-LL |         let k = &mut i;\n-   |                      - borrow of `i` occurs here\n-...\n-LL |         i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n-   |         ^^^^^^ assignment to borrowed `i` occurs here\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0382, E0506, E0597.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "1542989cc359a2b9b38cd97cf6697164ee87dee2", "filename": "src/test/ui/catch/catch-in-match.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,8 +0,0 @@\n-error: expected expression, found reserved keyword `do`\n-  --> $DIR/catch-in-match.rs:14:11\n-   |\n-LL |     match do catch { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `do`\n-   |           ^^ expected expression\n-\n-error: aborting due to previous error\n-"}, {"sha": "9316bbcd4bcfbf1cd9b2fc56bd951ccefe5387a1", "filename": "src/test/ui/catch/catch-in-while.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,8 +0,0 @@\n-error: expected expression, found reserved keyword `do`\n-  --> $DIR/catch-in-while.rs:14:11\n-   |\n-LL |     while do catch { false } {} //~ ERROR expected expression, found reserved keyword `do`\n-   |           ^^ expected expression\n-\n-error: aborting due to previous error\n-"}, {"sha": "157793160ce4ee288abcc2d07eaec404da5fe525", "filename": "src/test/ui/catch/catch-maybe-bad-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,14 +0,0 @@\n-error[E0382]: borrow of moved value: `x`\n-  --> $DIR/catch-maybe-bad-lifetime.rs:33:24\n-   |\n-LL |             ::std::mem::drop(x);\n-   |                              - value moved here\n-LL |         };\n-LL |         println!(\"{}\", x); //~ ERROR use of moved value: `x`\n-   |                        ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "6a14ba17f9e806b4360d9d7eac32b6945861c3e9", "filename": "src/test/ui/catch/catch-opt-init.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly uninitialized variable: `cfg_res`\n-  --> $DIR/catch-opt-init.rs:23:16\n-   |\n-LL |     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n-   |                ^^^^^^^ use of possibly uninitialized `cfg_res`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "4ab71460c0dac3af7a342d643fb6ce085c17dede", "filename": "src/test/ui/feature-gates/feature-gate-catch_expr.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827e57c2f69a9caad36fab189770ad0bb8957d4f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr?ref=827e57c2f69a9caad36fab189770ad0bb8957d4f", "patch": "@@ -1,15 +0,0 @@\n-error[E0658]: `catch` expression is experimental (see issue #31436)\n-  --> $DIR/feature-gate-catch_expr.rs:12:24\n-   |\n-LL |       let catch_result = do catch { //~ ERROR `catch` expression is experimental\n-   |  ________________________^\n-LL | |         let x = 5;\n-LL | |         x\n-LL | |     };\n-   | |_____^\n-   |\n-   = help: add #![feature(catch_expr)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6536280c71f09ecd027106da48d7c4c2b4108c30", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n pub fn main() {\n-    let catch_result = do catch { //~ ERROR `catch` expression is experimental\n+    let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n         let x = 5;\n         x\n     };\n-    assert_eq!(catch_result, 5);\n+    assert_eq!(try_result, Some(5));\n }", "previous_filename": "src/test/ui/feature-gates/feature-gate-catch_expr.rs"}, {"sha": "29ef2f87b9d0d5e917ddd395280f75b4a107ec90", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,15 @@\n+error[E0658]: `try` expression is experimental (see issue #31436)\n+  --> $DIR/feature-gate-try_blocks.rs:14:33\n+   |\n+LL |       let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n+   |  _________________________________^\n+LL | |         let x = 5;\n+LL | |         x\n+LL | |     };\n+   | |_____^\n+   |\n+   = help: add #![feature(try_blocks)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "576a0202018b6ae5b00fa8e020e9a1fc5efbf85a", "filename": "src/test/ui/try-block/try-block-bad-lifetime.rs", "status": "renamed", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,27 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n \n-// This test checks that borrows made and returned inside catch blocks are properly constrained\n+#![feature(try_blocks)]\n+\n+#![inline(never)]\n+fn do_something_with<T>(_x: T) {}\n+\n+// This test checks that borrows made and returned inside try blocks are properly constrained\n pub fn main() {\n     {\n-        // Test that borrows returned from a catch block must be valid for the lifetime of the\n+        // Test that borrows returned from a try block must be valid for the lifetime of the\n         // result variable\n-        let _result: Result<(), &str> = do catch {\n+        let result: Result<(), &str> = try {\n             let my_string = String::from(\"\");\n             let my_str: & str = & my_string;\n             //~^ ERROR `my_string` does not live long enough\n             Err(my_str) ?;\n             Err(\"\") ?;\n         };\n+        do_something_with(result);\n     }\n \n     {\n-        // Test that borrows returned from catch blocks freeze their referent\n+        // Test that borrows returned from try blocks freeze their referent\n         let mut i = 5;\n         let k = &mut i;\n-        let mut j: Result<(), &mut i32> = do catch {\n+        let mut j: Result<(), &mut i32> = try {\n             Err(k) ?;\n             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n         };", "previous_filename": "src/test/ui/catch/catch-bad-lifetime.rs"}, {"sha": "36c89faf5a2ca8f35489c164d3d05f8f6cc88746", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "renamed", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,5 +1,16 @@\n+error[E0597]: `my_string` does not live long enough\n+  --> $DIR/try-block-bad-lifetime.rs:25:33\n+   |\n+LL |             let my_str: & str = & my_string;\n+   |                                 ^^^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL |         };\n+   |         - `my_string` dropped here while still borrowed\n+LL |         do_something_with(result);\n+   |                           ------ borrow later used here\n+\n error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:33:13\n+  --> $DIR/try-block-bad-lifetime.rs:39:13\n    |\n LL |         let k = &mut i;\n    |                 ------ borrow of `i` occurs here\n@@ -11,7 +22,7 @@ LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n    |                          - borrow later used here\n \n error[E0382]: use of moved value: `k`\n-  --> $DIR/catch-bad-lifetime.rs:35:26\n+  --> $DIR/try-block-bad-lifetime.rs:41:26\n    |\n LL |             Err(k) ?;\n    |                 - value moved here\n@@ -22,7 +33,7 @@ LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n    = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:36:9\n+  --> $DIR/try-block-bad-lifetime.rs:42:9\n    |\n LL |         let k = &mut i;\n    |                 ------ borrow of `i` occurs here\n@@ -33,7 +44,7 @@ LL |\n LL |         let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n    |                                         - borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0382, E0506.\n+Some errors occurred: E0382, E0506, E0597.\n For more information about an error, try `rustc --explain E0382`.", "previous_filename": "src/test/ui/catch/catch-bad-lifetime.nll.stderr"}, {"sha": "a984b63af4575b3602e9302fb6ff53f9e0ce6e11", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,21 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n pub fn main() {\n-    let res: Result<u32, i32> = do catch {\n+    let res: Result<u32, i32> = try {\n         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n         5\n     };\n \n-    let res: Result<i32, i32> = do catch {\n+    let res: Result<i32, i32> = try {\n         \"\" //~ ERROR type mismatch\n     };\n \n-    let res: Result<i32, i32> = do catch { }; //~ ERROR type mismatch\n+    let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n \n-    let res: () = do catch { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n+    let res: () = try { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n \n-    let res: i32 = do catch { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n+    let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n }", "previous_filename": "src/test/ui/catch/catch-bad-type.rs"}, {"sha": "159e43e13e4053b0ae4fcdcea9d45f0c24e2b3f4", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `i32: std::convert::From<&str>` is not satisfied\n-  --> $DIR/catch-bad-type.rs:15:9\n+  --> $DIR/try-block-bad-type.rs:17:9\n    |\n LL |         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n    |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n@@ -13,7 +13,7 @@ LL |         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>`\n    = note: required by `std::convert::From::from`\n \n error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == &str`\n-  --> $DIR/catch-bad-type.rs:20:9\n+  --> $DIR/try-block-bad-type.rs:22:9\n    |\n LL |         \"\" //~ ERROR type mismatch\n    |         ^^ expected i32, found &str\n@@ -22,27 +22,27 @@ LL |         \"\" //~ ERROR type mismatch\n               found type `&str`\n \n error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == ()`\n-  --> $DIR/catch-bad-type.rs:23:44\n+  --> $DIR/try-block-bad-type.rs:25:39\n    |\n-LL |     let res: Result<i32, i32> = do catch { }; //~ ERROR type mismatch\n-   |                                            ^ expected i32, found ()\n+LL |     let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n+   |                                       ^ expected i32, found ()\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/catch-bad-type.rs:25:28\n+  --> $DIR/try-block-bad-type.rs:27:23\n    |\n-LL |     let res: () = do catch { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n-   |                            ^^^ the trait `std::ops::Try` is not implemented for `()`\n+LL |     let res: () = try { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n+   |                       ^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n    = note: required by `std::ops::Try::from_ok`\n \n error[E0277]: the trait bound `i32: std::ops::Try` is not satisfied\n-  --> $DIR/catch-bad-type.rs:27:29\n+  --> $DIR/try-block-bad-type.rs:29:24\n    |\n-LL |     let res: i32 = do catch { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n-   |                             ^^^^^ the trait `std::ops::Try` is not implemented for `i32`\n+LL |     let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n+   |                        ^^^^^ the trait `std::ops::Try` is not implemented for `i32`\n    |\n    = note: required by `std::ops::Try::from_ok`\n ", "previous_filename": "src/test/ui/catch/catch-bad-type.stderr"}, {"sha": "64485bb8318f1754493625697ef0bad27fd14fe1", "filename": "src/test/ui/try-block/try-block-in-edition2015.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition 2015\n+\n+pub fn main() {\n+    let try_result: Option<_> = try {\n+    //~^ ERROR expected struct, variant or union type, found macro `try`\n+        let x = 5; //~ ERROR expected identifier, found keyword\n+        x\n+    };\n+    assert_eq!(try_result, Some(5));\n+}"}, {"sha": "7e6d515e111d060cf3bb967869f4ef2057933270", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,18 @@\n+error: expected identifier, found keyword `let`\n+  --> $DIR/try-block-in-edition2015.rs:16:9\n+   |\n+LL |     let try_result: Option<_> = try {\n+   |                                 --- while parsing this struct\n+LL |     //~^ ERROR expected struct, variant or union type, found macro `try`\n+LL |         let x = 5; //~ ERROR expected identifier, found keyword\n+   |         ^^^ expected identifier, found keyword\n+\n+error[E0574]: expected struct, variant or union type, found macro `try`\n+  --> $DIR/try-block-in-edition2015.rs:14:33\n+   |\n+LL |     let try_result: Option<_> = try {\n+   |                                 ^^^ did you mean `try!(...)`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0574`."}, {"sha": "d10149126ee891f4ca9af8786293f7d8f95968ab", "filename": "src/test/ui/try-block/try-block-in-match.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n fn main() {\n-    match do catch { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `do`\n+    match try { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `try`\n }", "previous_filename": "src/test/ui/catch/catch-in-match.rs"}, {"sha": "f07d23885aca19cef708a47bba7b2015ddf3cd60", "filename": "src/test/ui/try-block/try-block-in-match.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-match.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found reserved keyword `try`\n+  --> $DIR/try-block-in-match.rs:16:11\n+   |\n+LL |     match try { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `try`\n+   |           ^^^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "b531267a55bbafeafea1ba1d67b4d4b36cd9d573", "filename": "src/test/ui/try-block/try-block-in-while.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n fn main() {\n-    while do catch { false } {} //~ ERROR expected expression, found reserved keyword `do`\n+    while try { false } {} //~ ERROR expected expression, found reserved keyword `try`\n }", "previous_filename": "src/test/ui/catch/catch-in-while.rs"}, {"sha": "36577d784b83f5bf44988dbf820500438ab58cb2", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found reserved keyword `try`\n+  --> $DIR/try-block-in-while.rs:16:11\n+   |\n+LL |     while try { false } {} //~ ERROR expected expression, found reserved keyword `try`\n+   |           ^^^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5e0ebdbc222ef10adcfc2979fd87ea3c04070ba", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.rs", "status": "renamed", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,42 +8,48 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n \n-// This test checks that borrows made and returned inside catch blocks are properly constrained\n+#![feature(try_blocks)]\n+\n+#![inline(never)]\n+fn do_something_with<T>(_x: T) {}\n+\n+// This test checks that borrows made and returned inside try blocks are properly constrained\n pub fn main() {\n     {\n         // Test that a borrow which *might* be returned still freezes its referent\n         let mut i = 222;\n-        let x: Result<&i32, ()> = do catch {\n+        let x: Result<&i32, ()> = try {\n             Err(())?;\n             &i\n         };\n-        x.ok().cloned();\n         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n         let _ = i;\n+        do_something_with(x);\n     }\n \n     {\n         let x = String::new();\n-        let _y: Result<(), ()> = do catch {\n+        let _y: Result<(), ()> = try {\n             Err(())?;\n             ::std::mem::drop(x);\n         };\n-        println!(\"{}\", x); //~ ERROR use of moved value: `x`\n+        println!(\"{}\", x); //~ ERROR borrow of moved value: `x`\n     }\n \n     {\n         // Test that a borrow which *might* be assigned to an outer variable still freezes\n         // its referent\n         let mut i = 222;\n-        let j;\n-        let x: Result<(), ()> = do catch {\n+        let mut j = &-1;\n+        let _x: Result<(), ()> = try {\n             Err(())?;\n             j = &i;\n         };\n         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n         let _ = i;\n+        do_something_with(j);\n     }\n }\n ", "previous_filename": "src/test/ui/catch/catch-maybe-bad-lifetime.rs"}, {"sha": "366a8da4b6e837da9fe21878193a8c40b34f725c", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "renamed", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,31 +1,37 @@\n error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-maybe-bad-lifetime.rs:23:9\n+  --> $DIR/try-block-maybe-bad-lifetime.rs:27:9\n    |\n LL |             &i\n-   |              - borrow of `i` occurs here\n-...\n+   |             -- borrow of `i` occurs here\n+LL |         };\n LL |         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n    |         ^^^^^ assignment to borrowed `i` occurs here\n+LL |         let _ = i;\n+LL |         do_something_with(x);\n+   |                           - borrow later used here\n \n-error[E0382]: use of moved value: `x`\n-  --> $DIR/catch-maybe-bad-lifetime.rs:33:24\n+error[E0382]: borrow of moved value: `x`\n+  --> $DIR/try-block-maybe-bad-lifetime.rs:38:24\n    |\n LL |             ::std::mem::drop(x);\n    |                              - value moved here\n LL |         };\n-LL |         println!(\"{}\", x); //~ ERROR use of moved value: `x`\n-   |                        ^ value used here after move\n+LL |         println!(\"{}\", x); //~ ERROR borrow of moved value: `x`\n+   |                        ^ value borrowed here after move\n    |\n    = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-maybe-bad-lifetime.rs:45:9\n+  --> $DIR/try-block-maybe-bad-lifetime.rs:50:9\n    |\n LL |             j = &i;\n-   |                  - borrow of `i` occurs here\n+   |                 -- borrow of `i` occurs here\n LL |         };\n LL |         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n    |         ^^^^^ assignment to borrowed `i` occurs here\n+LL |         let _ = i;\n+LL |         do_something_with(j);\n+   |                           - borrow later used here\n \n error: aborting due to 3 previous errors\n ", "previous_filename": "src/test/ui/catch/catch-maybe-bad-lifetime.stderr"}, {"sha": "ca81a9c311037cc98e3f4cd085c078f3ae6537a4", "filename": "src/test/ui/try-block/try-block-opt-init.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n fn use_val<T: Sized>(_x: T) {}\n \n pub fn main() {\n     let cfg_res;\n-    let _: Result<(), ()> = do catch {\n+    let _: Result<(), ()> = try {\n         Err(())?;\n         cfg_res = 5;\n         Ok::<(), ()>(())?;\n         use_val(cfg_res);\n     };\n-    assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n+    assert_eq!(cfg_res, 5); //~ ERROR borrow of possibly uninitialized variable: `cfg_res`\n }\n ", "previous_filename": "src/test/ui/catch/catch-opt-init.rs"}, {"sha": "3ebcb7dc37af1c982d2db4b19d9fb871862561f5", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `cfg_res`\n-  --> $DIR/catch-opt-init.rs:23:5\n+  --> $DIR/try-block-opt-init.rs:25:5\n    |\n-LL |     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n+LL |     assert_eq!(cfg_res, 5); //~ ERROR borrow of possibly uninitialized variable: `cfg_res`\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `cfg_res`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)", "previous_filename": "src/test/ui/catch/catch-opt-init.nll.stderr"}, {"sha": "6a69cff48836fc8f2708c58fa824006b4a490490", "filename": "src/test/ui/try-block/try-block-type-error.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.rs?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(catch_expr)]\n+// compile-flags: --edition 2018\n+\n+#![feature(try_blocks)]\n \n fn foo() -> Option<()> { Some(()) }\n \n fn main() {\n-    let _: Option<f32> = do catch {\n+    let _: Option<f32> = try {\n         foo()?;\n         42\n         //~^ ERROR type mismatch\n     };\n \n-    let _: Option<i32> = do catch {\n+    let _: Option<i32> = try {\n         foo()?;\n     };\n     //~^ ERROR type mismatch", "previous_filename": "src/test/ui/catch/catch-block-type-error.rs"}, {"sha": "3b67e92ec61bf0dcf871d48648c4cede5f1c7307", "filename": "src/test/ui/try-block/try-block-type-error.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35bf1ae25799a4e62131159f052e0a3cbd27c960/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr?ref=35bf1ae25799a4e62131159f052e0a3cbd27c960", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<std::option::Option<f32> as std::ops::Try>::Ok == {integer}`\n-  --> $DIR/catch-block-type-error.rs:18:9\n+  --> $DIR/try-block-type-error.rs:20:9\n    |\n LL |         42\n    |         ^^\n@@ -11,7 +11,7 @@ LL |         42\n               found type `{integer}`\n \n error[E0271]: type mismatch resolving `<std::option::Option<i32> as std::ops::Try>::Ok == ()`\n-  --> $DIR/catch-block-type-error.rs:24:5\n+  --> $DIR/try-block-type-error.rs:26:5\n    |\n LL |     };\n    |     ^ expected i32, found ()", "previous_filename": "src/test/ui/catch/catch-block-type-error.stderr"}]}