{"sha": "35bee753dea812bb8112c5bf5c02e1311bbca2fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YmVlNzUzZGVhODEyYmI4MTEyYzViZjVjMDJlMTMxMWJiY2EyZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T21:00:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-08T21:00:31Z"}, "message": "rustc: Pass explicit type substitutions to later passes", "tree": {"sha": "94f4949ba5a65a56633e374aee0e1851b4f42ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f4949ba5a65a56633e374aee0e1851b4f42ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35bee753dea812bb8112c5bf5c02e1311bbca2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35bee753dea812bb8112c5bf5c02e1311bbca2fa", "html_url": "https://github.com/rust-lang/rust/commit/35bee753dea812bb8112c5bf5c02e1311bbca2fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35bee753dea812bb8112c5bf5c02e1311bbca2fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4654faa67c831728c677027f2beb48fe3592b511", "url": "https://api.github.com/repos/rust-lang/rust/commits/4654faa67c831728c677027f2beb48fe3592b511", "html_url": "https://github.com/rust-lang/rust/commit/4654faa67c831728c677027f2beb48fe3592b511"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "1538302011e5782f932bddf777936b6db6a88f5d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35bee753dea812bb8112c5bf5c02e1311bbca2fa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bee753dea812bb8112c5bf5c02e1311bbca2fa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=35bee753dea812bb8112c5bf5c02e1311bbca2fa", "patch": "@@ -86,11 +86,11 @@ fn generalize_ty(@crate_ctxt cx, @ty.t t) -> @ty.t {\n fn substitute_ty_params(&@crate_ctxt ccx,\n                         @ty.t typ,\n                         vec[ast.def_id] ty_params,\n-                        vec[@ast.ty] supplied,\n+                        vec[@ty.t] supplied,\n                         &span sp) -> @ty.t {\n     state obj ty_substituter(@crate_ctxt ccx,\n                              vec[ast.def_id] ty_params,\n-                             vec[@ast.ty] supplied) {\n+                             vec[@ty.t] supplied) {\n         fn fold_simple_ty(@ty.t typ) -> @ty.t {\n             alt (typ.struct) {\n                 case (ty.ty_param(?pid)) {\n@@ -108,15 +108,15 @@ fn substitute_ty_params(&@crate_ctxt ccx,\n                     }\n \n                     // Substitute it in.\n-                    ret ast_ty_to_ty_crate(ccx, supplied.(i));\n+                    ret supplied.(i);\n                 }\n                 case (_) { ret typ; }\n             }\n         }\n     }\n \n     auto ty_param_len = _vec.len[ast.def_id](ty_params);\n-    auto supplied_len = _vec.len[@ast.ty](supplied);\n+    auto supplied_len = _vec.len[@ty.t](supplied);\n     if (ty_param_len != supplied_len) {\n         ccx.sess.span_err(sp, \"expected \" + _uint.to_str(ty_param_len, 10u) +\n                           \" type parameter(s) but found \" +\n@@ -1564,19 +1564,33 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             }\n \n             // Substitute type parameters if the user provided some.\n-            if (_vec.len[@ast.ty](pth.node.types) > 0u) {\n+            auto ty_substs_opt;\n+            auto ty_substs_len = _vec.len[@ast.ty](pth.node.types);\n+            if (ty_substs_len > 0u) {\n+                let vec[@ty.t] ty_substs = vec();\n+                auto i = 0u;\n+                while (i < ty_substs_len) {\n+                    ty_substs += vec(ast_ty_to_ty_crate(fcx.ccx,\n+                                                        pth.node.types.(i)));\n+                    i += 1u;\n+                }\n+                ty_substs_opt = some[vec[@ty.t]](ty_substs);\n+\n                 alt (ty_params) {\n                     case (none[vec[ast.def_id]]) {\n                         fcx.ccx.sess.span_err(expr.span, \"this kind of \" +\n                                               \"item may not take type \" +\n                                               \"parameters\");\n+                        fail;\n                     }\n                     case (some[vec[ast.def_id]](?tps)) {\n-                        t = substitute_ty_params(fcx.ccx, t, tps,\n-                                                 pth.node.types, expr.span);\n+                        t = substitute_ty_params(fcx.ccx, t, tps, ty_substs,\n+                                                 expr.span);\n                     }\n                 }\n             } else {\n+                ty_substs_opt = none[vec[@ty.t]];\n+\n                 alt (ty_params) {\n                     case (none[vec[ast.def_id]]) {  /* nothing */ }\n                     case (some[vec[ast.def_id]](_)) {\n@@ -1587,7 +1601,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                 }\n             }\n \n-            auto ann = ast.ann_type(t, none[vec[@ty.t]]);\n+            auto ann = ast.ann_type(t, ty_substs_opt);\n             ret @fold.respan[ast.expr_](expr.span,\n                                         ast.expr_path(pth, defopt, ann));\n         }"}]}