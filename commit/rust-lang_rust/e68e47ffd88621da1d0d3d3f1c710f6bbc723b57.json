{"sha": "e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "node_id": "C_kwDOAAsO6NoAKGU2OGU0N2ZmZDg4NjIxZGExZDBkM2QzZjFjNzEwZjZiYmM3MjNiNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T08:20:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T08:20:36Z"}, "message": "Auto merge of #14658 - Veykril:proc-macro-ra-srv, r=Veykril\n\nRemove proc-macro server command from the rust-analyzer binary\n\nWe dropped support for concrete proc-macro abi versions so this no longer serves any purposes.", "tree": {"sha": "a1243402d1464fb32e56947680ff6853a9cc1636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1243402d1464fb32e56947680ff6853a9cc1636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "html_url": "https://github.com/rust-lang/rust/commit/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943d2a8a1ca15e8b28a1f51f5a5c135e3728da04", "url": "https://api.github.com/repos/rust-lang/rust/commits/943d2a8a1ca15e8b28a1f51f5a5c135e3728da04", "html_url": "https://github.com/rust-lang/rust/commit/943d2a8a1ca15e8b28a1f51f5a5c135e3728da04"}, {"sha": "c21860bd6a8ec683f881aa8509fd7c61b074f2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21860bd6a8ec683f881aa8509fd7c61b074f2eb", "html_url": "https://github.com/rust-lang/rust/commit/c21860bd6a8ec683f881aa8509fd7c61b074f2eb"}], "stats": {"total": 271, "additions": 109, "deletions": 162}, "files": [{"sha": "e0d5878d7fae20425bb284042ef0a110cb831aee", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -1464,7 +1464,6 @@ dependencies = [\n  \"parking_lot 0.12.1\",\n  \"parking_lot_core 0.9.6\",\n  \"proc-macro-api\",\n- \"proc-macro-srv-cli\",\n  \"profile\",\n  \"project-model\",\n  \"rayon\","}, {"sha": "ab15f414bbfdae41e75025007cce168e21d01704", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -13,7 +13,6 @@ mod version;\n \n use paths::AbsPathBuf;\n use std::{\n-    ffi::OsStr,\n     fmt, io,\n     sync::{Arc, Mutex},\n };\n@@ -103,11 +102,8 @@ pub struct MacroPanic {\n \n impl ProcMacroServer {\n     /// Spawns an external process as the proc macro server and returns a client connected to it.\n-    pub fn spawn(\n-        process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n-    ) -> io::Result<ProcMacroServer> {\n-        let process = ProcMacroProcessSrv::run(process_path, args)?;\n+    pub fn spawn(process_path: AbsPathBuf) -> io::Result<ProcMacroServer> {\n+        let process = ProcMacroProcessSrv::run(process_path)?;\n         Ok(ProcMacroServer { process: Arc::new(Mutex::new(process)) })\n     }\n "}, {"sha": "9a20fa63ed700f9a376bfdf689a5d88a1f580d8f", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -1,7 +1,6 @@\n //! Handle process life-time and message passing for proc-macro client\n \n use std::{\n-    ffi::{OsStr, OsString},\n     io::{self, BufRead, BufReader, Write},\n     process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n };\n@@ -23,12 +22,9 @@ pub(crate) struct ProcMacroProcessSrv {\n }\n \n impl ProcMacroProcessSrv {\n-    pub(crate) fn run(\n-        process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n-    ) -> io::Result<ProcMacroProcessSrv> {\n+    pub(crate) fn run(process_path: AbsPathBuf) -> io::Result<ProcMacroProcessSrv> {\n         let create_srv = |null_stderr| {\n-            let mut process = Process::run(process_path.clone(), args.clone(), null_stderr)?;\n+            let mut process = Process::run(process_path.clone(), null_stderr)?;\n             let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n \n             io::Result::Ok(ProcMacroProcessSrv { _process: process, stdin, stdout, version: 0 })\n@@ -100,13 +96,8 @@ struct Process {\n }\n \n impl Process {\n-    fn run(\n-        path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-        null_stderr: bool,\n-    ) -> io::Result<Process> {\n-        let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n-        let child = JodChild(mk_child(&path, args, null_stderr)?);\n+    fn run(path: AbsPathBuf, null_stderr: bool) -> io::Result<Process> {\n+        let child = JodChild(mk_child(&path, null_stderr)?);\n         Ok(Process { child })\n     }\n \n@@ -119,13 +110,8 @@ impl Process {\n     }\n }\n \n-fn mk_child(\n-    path: &AbsPath,\n-    args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-    null_stderr: bool,\n-) -> io::Result<Child> {\n+fn mk_child(path: &AbsPath, null_stderr: bool) -> io::Result<Child> {\n     Command::new(path.as_os_str())\n-        .args(args)\n         .env(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\", \"this is unstable\")\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())"}, {"sha": "b307701e19fbbafe513d2784a8d1d7e5c5d22577", "filename": "crates/proc-macro-srv-cli/src/lib.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/943d2a8a1ca15e8b28a1f51f5a5c135e3728da04/crates%2Fproc-macro-srv-cli%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943d2a8a1ca15e8b28a1f51f5a5c135e3728da04/crates%2Fproc-macro-srv-cli%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2Fsrc%2Flib.rs?ref=943d2a8a1ca15e8b28a1f51f5a5c135e3728da04", "patch": "@@ -1,54 +0,0 @@\n-//! Driver for proc macro server\n-use std::io;\n-\n-use proc_macro_api::msg::{self, Message};\n-\n-#[cfg(feature = \"sysroot-abi\")]\n-pub fn run() -> io::Result<()> {\n-    let mut srv = proc_macro_srv::ProcMacroSrv::default();\n-    let mut buf = String::new();\n-\n-    while let Some(req) = read_request(&mut buf)? {\n-        let res = match req {\n-            msg::Request::ListMacros { dylib_path } => {\n-                msg::Response::ListMacros(srv.list_macros(&dylib_path))\n-            }\n-            msg::Request::ExpandMacro(task) => msg::Response::ExpandMacro(srv.expand(task)),\n-            msg::Request::ApiVersionCheck {} => {\n-                msg::Response::ApiVersionCheck(proc_macro_api::msg::CURRENT_API_VERSION)\n-            }\n-        };\n-        write_response(res)?\n-    }\n-\n-    Ok(())\n-}\n-#[cfg(not(feature = \"sysroot-abi\"))]\n-pub fn run() -> io::Result<()> {\n-    let mut buf = String::new();\n-\n-    while let Some(req) = read_request(&mut buf)? {\n-        let res = match req {\n-            msg::Request::ListMacros { .. } => {\n-                msg::Response::ListMacros(Err(\"server is built without sysroot support\".to_owned()))\n-            }\n-            msg::Request::ExpandMacro(..) => msg::Response::ExpandMacro(Err(msg::PanicMessage(\n-                \"server is built without sysroot support\".to_owned(),\n-            ))),\n-            msg::Request::ApiVersionCheck {} => {\n-                msg::Response::ApiVersionCheck(proc_macro_api::msg::CURRENT_API_VERSION)\n-            }\n-        };\n-        write_response(res)?\n-    }\n-\n-    Ok(())\n-}\n-\n-fn read_request(buf: &mut String) -> io::Result<Option<msg::Request>> {\n-    msg::Request::read(&mut io::stdin().lock(), buf)\n-}\n-\n-fn write_response(msg: msg::Response) -> io::Result<()> {\n-    msg.write(&mut io::stdout().lock())\n-}"}, {"sha": "bece1951872c40af2781b77bee63a6c6b5d1b886", "filename": "crates/proc-macro-srv-cli/src/main.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -1,5 +1,6 @@\n //! A standalone binary for `proc-macro-srv`.\n //! Driver for proc macro server\n+use std::io;\n \n fn main() -> std::io::Result<()> {\n     let v = std::env::var(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\");\n@@ -14,5 +15,37 @@ fn main() -> std::io::Result<()> {\n         }\n     }\n \n-    proc_macro_srv_cli::run()\n+    run()\n+}\n+\n+#[cfg(not(feature = \"sysroot-abi\"))]\n+fn run() -> io::Result<()> {\n+    panic!(\"proc-macro-srv-cli requires the `sysroot-abi` feature to be enabled\");\n+}\n+\n+#[cfg(feature = \"sysroot-abi\")]\n+fn run() -> io::Result<()> {\n+    use proc_macro_api::msg::{self, Message};\n+\n+    let read_request = |buf: &mut String| msg::Request::read(&mut io::stdin().lock(), buf);\n+\n+    let write_response = |msg: msg::Response| msg.write(&mut io::stdout().lock());\n+\n+    let mut srv = proc_macro_srv::ProcMacroSrv::default();\n+    let mut buf = String::new();\n+\n+    while let Some(req) = read_request(&mut buf)? {\n+        let res = match req {\n+            msg::Request::ListMacros { dylib_path } => {\n+                msg::Response::ListMacros(srv.list_macros(&dylib_path))\n+            }\n+            msg::Request::ExpandMacro(task) => msg::Response::ExpandMacro(srv.expand(task)),\n+            msg::Request::ApiVersionCheck {} => {\n+                msg::Response::ApiVersionCheck(proc_macro_api::msg::CURRENT_API_VERSION)\n+            }\n+        };\n+        write_response(res)?\n+    }\n+\n+    Ok(())\n }"}, {"sha": "02fda6e6ea8a6aa39e03a3e56269d104dd898759", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -459,18 +459,35 @@ impl ProjectWorkspace {\n         }\n     }\n \n-    pub fn find_sysroot_proc_macro_srv(&self) -> Option<AbsPathBuf> {\n+    pub fn find_sysroot_proc_macro_srv(&self) -> Result<AbsPathBuf> {\n         match self {\n             ProjectWorkspace::Cargo { sysroot: Ok(sysroot), .. }\n-            | ProjectWorkspace::Json { sysroot: Ok(sysroot), .. } => {\n+            | ProjectWorkspace::Json { sysroot: Ok(sysroot), .. }\n+            | ProjectWorkspace::DetachedFiles { sysroot: Ok(sysroot), .. } => {\n                 let standalone_server_name =\n                     format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n                 [\"libexec\", \"lib\"]\n                     .into_iter()\n                     .map(|segment| sysroot.root().join(segment).join(&standalone_server_name))\n                     .find(|server_path| std::fs::metadata(server_path).is_ok())\n+                    .ok_or_else(|| {\n+                        anyhow::anyhow!(\n+                            \"cannot find proc-macro server in sysroot `{}`\",\n+                            sysroot.root().display()\n+                        )\n+                    })\n+            }\n+            ProjectWorkspace::DetachedFiles { .. } => {\n+                Err(anyhow::anyhow!(\"cannot find proc-macro server, no sysroot was found\"))\n             }\n-            _ => None,\n+            ProjectWorkspace::Cargo { cargo, .. } => Err(anyhow::anyhow!(\n+                \"cannot find proc-macro-srv, the workspace `{}` is missing a sysroot\",\n+                cargo.workspace_root().display()\n+            )),\n+            ProjectWorkspace::Json { project, .. } => Err(anyhow::anyhow!(\n+                \"cannot find proc-macro-srv, the workspace `{}` is missing a sysroot\",\n+                project.path().display()\n+            )),\n         }\n     }\n "}, {"sha": "ea4f155bfd578063952f9c73c5aa175550d6d0b1", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -67,7 +67,6 @@ ide-db.workspace = true\n ide-ssr.workspace = true\n ide.workspace = true\n proc-macro-api.workspace = true\n-proc-macro-srv-cli.workspace = true\n profile.workspace = true\n project-model.workspace = true\n stdx.workspace = true\n@@ -95,9 +94,7 @@ mbe.workspace = true\n [features]\n jemalloc = [\"jemallocator\", \"profile/jemalloc\"]\n force-always-assert = [\"always-assert/force\"]\n-sysroot-abi = [\"proc-macro-srv-cli/sysroot-abi\"]\n in-rust-tree = [\n-    \"sysroot-abi\",\n     \"ide/in-rust-tree\",\n     \"syntax/in-rust-tree\",\n ]"}, {"sha": "9b416d1ef009a4ffaa0ffe6dd2b5c524c586393f", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -76,9 +76,6 @@ fn try_main(flags: flags::RustAnalyzer) -> Result<()> {\n             }\n             with_extra_thread(\"LspServer\", run_server)?;\n         }\n-        flags::RustAnalyzerCmd::ProcMacro(flags::ProcMacro) => {\n-            with_extra_thread(\"MacroExpander\", || proc_macro_srv_cli::run().map_err(Into::into))?;\n-        }\n         flags::RustAnalyzerCmd::Parse(cmd) => cmd.run()?,\n         flags::RustAnalyzerCmd::Symbols(cmd) => cmd.run()?,\n         flags::RustAnalyzerCmd::Highlight(cmd) => cmd.run()?,"}, {"sha": "891d99c5ad59586d551bd2a9f0c782181b1e3fa3", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -106,8 +106,6 @@ xflags::xflags! {\n             optional --debug snippet: String\n         }\n \n-        cmd proc-macro {}\n-\n         cmd lsif {\n             required path: PathBuf\n         }\n@@ -141,7 +139,6 @@ pub enum RustAnalyzerCmd {\n     Diagnostics(Diagnostics),\n     Ssr(Ssr),\n     Search(Search),\n-    ProcMacro(ProcMacro),\n     Lsif(Lsif),\n     Scip(Scip),\n }\n@@ -203,9 +200,6 @@ pub struct Search {\n     pub debug: Option<String>,\n }\n \n-#[derive(Debug)]\n-pub struct ProcMacro;\n-\n #[derive(Debug)]\n pub struct Lsif {\n     pub path: PathBuf,"}, {"sha": "625f1f2b1934d9df6b7a9a6819ffc54ac0abb584", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -1,8 +1,8 @@\n //! Loads a Cargo project into a static instance of analysis, without support\n //! for incorporating changes.\n-use std::{convert::identity, path::Path, sync::Arc};\n+use std::{path::Path, sync::Arc};\n \n-use anyhow::Result;\n+use anyhow::{anyhow, Result};\n use crossbeam_channel::{unbounded, Receiver};\n use ide::{AnalysisHost, Change};\n use ide_db::{\n@@ -26,7 +26,7 @@ pub struct LoadCargoConfig {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ProcMacroServerChoice {\n     Sysroot,\n-    Explicit(AbsPathBuf, Vec<String>),\n+    Explicit(AbsPathBuf),\n     None,\n }\n \n@@ -71,14 +71,11 @@ pub fn load_workspace(\n     let proc_macro_server = match &load_config.with_proc_macro_server {\n         ProcMacroServerChoice::Sysroot => ws\n             .find_sysroot_proc_macro_srv()\n-            .ok_or_else(|| \"failed to find sysroot proc-macro server\".to_owned())\n-            .and_then(|it| {\n-                ProcMacroServer::spawn(it, identity::<&[&str]>(&[])).map_err(|e| e.to_string())\n-            }),\n-        ProcMacroServerChoice::Explicit(path, args) => {\n-            ProcMacroServer::spawn(path.clone(), args).map_err(|e| e.to_string())\n+            .and_then(|it| ProcMacroServer::spawn(it).map_err(Into::into)),\n+        ProcMacroServerChoice::Explicit(path) => {\n+            ProcMacroServer::spawn(path.clone()).map_err(Into::into)\n         }\n-        ProcMacroServerChoice::None => Err(\"proc macro server disabled\".to_owned()),\n+        ProcMacroServerChoice::None => Err(anyhow!(\"proc macro server disabled\")),\n     };\n \n     let (crate_graph, proc_macros) = ws.to_crate_graph(\n@@ -93,7 +90,7 @@ pub fn load_workspace(\n     let proc_macros = {\n         let proc_macro_server = match &proc_macro_server {\n             Ok(it) => Ok(it),\n-            Err(e) => Err(e.as_str()),\n+            Err(e) => Err(e.to_string()),\n         };\n         proc_macros\n             .into_iter()\n@@ -102,7 +99,11 @@ pub fn load_workspace(\n                     crate_id,\n                     path.map_or_else(\n                         |_| Err(\"proc macro crate is missing dylib\".to_owned()),\n-                        |(_, path)| load_proc_macro(proc_macro_server, &path, &[]),\n+                        |(_, path)| {\n+                            proc_macro_server.as_ref().map_err(Clone::clone).and_then(\n+                                |proc_macro_server| load_proc_macro(proc_macro_server, &path, &[]),\n+                            )\n+                        },\n                     ),\n                 )\n             })"}, {"sha": "89ca8e635676c419c76f6e6f69e7afc44f39b827", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -437,8 +437,7 @@ config_data! {\n         ///\n         /// This config takes a map of crate names with the exported proc-macro names to ignore as values.\n         procMacro_ignored: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n-        /// Internal config, path to proc-macro server executable (typically,\n-        /// this is rust-analyzer itself, but we override this in tests).\n+        /// Internal config, path to proc-macro server executable.\n         procMacro_server: Option<PathBuf>          = \"null\",\n \n         /// Exclude imports from find-all-references.\n@@ -1102,17 +1101,13 @@ impl Config {\n         self.data.lru_query_capacities.is_empty().not().then(|| &self.data.lru_query_capacities)\n     }\n \n-    pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, /* is path explicitly set */ bool)> {\n-        if !self.data.procMacro_enable {\n-            return None;\n-        }\n-        Some(match &self.data.procMacro_server {\n-            Some(it) => (\n-                AbsPathBuf::try_from(it.clone()).unwrap_or_else(|path| self.root_path.join(path)),\n-                true,\n-            ),\n-            None => (AbsPathBuf::assert(std::env::current_exe().ok()?), false),\n-        })\n+    pub fn proc_macro_srv(&self) -> Option<AbsPathBuf> {\n+        self.data\n+            .procMacro_server\n+            .clone()\n+            .map(AbsPathBuf::try_from)?\n+            .ok()\n+            .map(|path| self.root_path.join(path))\n     }\n \n     pub fn dummy_replacements(&self) -> &FxHashMap<Box<str>, Box<[Box<str>]>> {"}, {"sha": "07778d2b59f9eae1158ab341b2da834793c6d8d9", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -63,7 +63,7 @@ pub(crate) struct GlobalState {\n     pub(crate) source_root_config: SourceRootConfig,\n \n     pub(crate) proc_macro_changed: bool,\n-    pub(crate) proc_macro_clients: Arc<[Result<ProcMacroServer, String>]>,\n+    pub(crate) proc_macro_clients: Arc<[anyhow::Result<ProcMacroServer>]>,\n \n     pub(crate) flycheck: Arc<[FlycheckHandle]>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,"}, {"sha": "4d840e11df7446a313ba30e3fbeac61ac8d28258", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -283,8 +283,8 @@ impl GlobalState {\n             let mut res = FxHashMap::default();\n             let chain = proc_macro_clients\n                 .iter()\n-                .map(|res| res.as_ref().map_err(|e| &**e))\n-                .chain(iter::repeat_with(|| Err(\"Proc macros servers are not running\")));\n+                .map(|res| res.as_ref().map_err(|e| e.to_string()))\n+                .chain(iter::repeat_with(|| Err(\"Proc macros servers are not running\".into())));\n             for (client, paths) in chain.zip(paths) {\n                 res.extend(paths.into_iter().map(move |(crate_id, res)| {\n                     (\n@@ -293,16 +293,18 @@ impl GlobalState {\n                             |_| Err(\"proc macro crate is missing dylib\".to_owned()),\n                             |(crate_name, path)| {\n                                 progress(path.display().to_string());\n-                                load_proc_macro(\n-                                    client,\n-                                    &path,\n-                                    crate_name\n-                                        .as_deref()\n-                                        .and_then(|crate_name| {\n-                                            dummy_replacements.get(crate_name).map(|v| &**v)\n-                                        })\n-                                        .unwrap_or_default(),\n-                                )\n+                                client.as_ref().map_err(Clone::clone).and_then(|client| {\n+                                    load_proc_macro(\n+                                        client,\n+                                        &path,\n+                                        crate_name\n+                                            .as_deref()\n+                                            .and_then(|crate_name| {\n+                                                dummy_replacements.get(crate_name).map(|v| &**v)\n+                                            })\n+                                            .unwrap_or_default(),\n+                                    )\n+                                })\n                             },\n                         ),\n                     )\n@@ -410,39 +412,25 @@ impl GlobalState {\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n         if self.proc_macro_clients.is_empty() || !same_workspaces {\n-            if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n+            if self.config.expand_proc_macros() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n+\n                 self.proc_macro_clients = self\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n-                        let path = if path_manually_set {\n-                            tracing::debug!(\n-                                \"Pro-macro server path explicitly set: {}\",\n-                                path.display()\n-                            );\n-                            path.clone()\n-                        } else {\n-                            match ws.find_sysroot_proc_macro_srv() {\n-                                Some(server_path) => server_path,\n-                                None => path.clone(),\n-                            }\n-                        };\n-                        let args: &[_] = if path.file_stem() == Some(\"rust-analyzer\".as_ref()) {\n-                            &[\"proc-macro\"]\n-                        } else {\n-                            &[]\n+                        let path = match self.config.proc_macro_srv() {\n+                            Some(path) => path,\n+                            None => ws.find_sysroot_proc_macro_srv()?,\n                         };\n \n-                        tracing::info!(?args, \"Using proc-macro server at {}\", path.display(),);\n-                        ProcMacroServer::spawn(path.clone(), args).map_err(|err| {\n-                            let error = format!(\n+                        tracing::info!(\"Using proc-macro server at {}\", path.display(),);\n+                        ProcMacroServer::spawn(path.clone()).map_err(|err| {\n+                            anyhow::anyhow!(\n                                 \"Failed to run proc-macro server from path {}, error: {:?}\",\n                                 path.display(),\n                                 err\n-                            );\n-                            tracing::error!(error);\n-                            error\n+                            )\n                         })\n                     })\n                     .collect()\n@@ -740,11 +728,10 @@ impl SourceRootConfig {\n /// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n /// with an identity dummy expander.\n pub(crate) fn load_proc_macro(\n-    server: Result<&ProcMacroServer, &str>,\n+    server: &ProcMacroServer,\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n ) -> ProcMacroLoadResult {\n-    let server = server.map_err(ToOwned::to_owned)?;\n     let res: Result<Vec<_>, String> = (|| {\n         let dylib = MacroDylib::new(path.to_path_buf());\n         let vec = server.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;"}, {"sha": "e9b3d45a3737dad573bf6473a6006956b82d4b07", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -679,8 +679,7 @@ This config takes a map of crate names with the exported proc-macro names to ign\n [[rust-analyzer.procMacro.server]]rust-analyzer.procMacro.server (default: `null`)::\n +\n --\n-Internal config, path to proc-macro server executable (typically,\n-this is rust-analyzer itself, but we override this in tests).\n+Internal config, path to proc-macro server executable.\n --\n [[rust-analyzer.references.excludeImports]]rust-analyzer.references.excludeImports (default: `false`)::\n +"}, {"sha": "c164595aff8cf4c25c98da2407e97464156d9b59", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e68e47ffd88621da1d0d3d3f1c710f6bbc723b57/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e68e47ffd88621da1d0d3d3f1c710f6bbc723b57", "patch": "@@ -1305,7 +1305,7 @@\n                     \"type\": \"object\"\n                 },\n                 \"rust-analyzer.procMacro.server\": {\n-                    \"markdownDescription\": \"Internal config, path to proc-macro server executable (typically,\\nthis is rust-analyzer itself, but we override this in tests).\",\n+                    \"markdownDescription\": \"Internal config, path to proc-macro server executable.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\","}]}