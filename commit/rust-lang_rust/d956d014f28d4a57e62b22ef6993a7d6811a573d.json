{"sha": "d956d014f28d4a57e62b22ef6993a7d6811a573d", "node_id": "C_kwDOAAsO6NoAKGQ5NTZkMDE0ZjI4ZDRhNTdlNjJiMjJlZjY5OTNhN2Q2ODExYTU3M2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-28T00:40:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T00:40:34Z"}, "message": "Rollup merge of #96432 - SparrowLii:dbg_scope, r=davidtwco\n\nnot need `Option` for `dbg_scope`\n\nThis PR fixes a few FIXME about not using `Option` in `dbg_scope` field of `DebugScope`, during `create_function_debug_context` func in codegen parts.\nAdded a `BitSet<SourceScope>` parameter to `make_mir_scope` to indicate whether the `DebugScope` has been instantiated.\ncc ````@eddyb````", "tree": {"sha": "2c1a17b7ba902df2352229f468dc8e9d831e6f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1a17b7ba902df2352229f468dc8e9d831e6f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d956d014f28d4a57e62b22ef6993a7d6811a573d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiaeKCCRBK7hj4Ov3rIwAAGX8IAHboWh7gdoAfQS8TdlONVoT5\ngBV1EldRr0s1gyF/lceKHMoXDJXUQ0o8nAcCBm/wd61XfvRwBmuTSfXf7yLEDJD9\nXEvR//R0TTnsdjfUwPirmn5snNshF2oqdZH6wqPr7mzWkse01IxLSfpp8tXvZUji\nQiKEMIEbhOQPR5hdKzXgyDjRi8lQwtIcn14YJufgix6RL46FvQZdRMUhe1Hf7wDh\nKzJtS0j/pvJMdpBT6lTz/A9pOpYW00m7gGm1cHBSf0B+m2GsryrF42CwgLvTX9oY\n9o+75BmBYNkE8e7oQpPILXYAX54maiThG76ltsTxwZZIxd5hgauAvVqAXfQvTCA=\n=cy1s\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c1a17b7ba902df2352229f468dc8e9d831e6f54\nparent 80045d65e111568f0fe2f5371a6d0f7d8c81b496\nparent 843e8d19ec9dc0f1c0ddd700210761aef2b180d5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651106434 +0200\ncommitter GitHub <noreply@github.com> 1651106434 +0200\n\nRollup merge of #96432 - SparrowLii:dbg_scope, r=davidtwco\n\nnot need `Option` for `dbg_scope`\n\nThis PR fixes a few FIXME about not using `Option` in `dbg_scope` field of `DebugScope`, during `create_function_debug_context` func in codegen parts.\nAdded a `BitSet<SourceScope>` parameter to `make_mir_scope` to indicate whether the `DebugScope` has been instantiated.\ncc ````@eddyb````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d956d014f28d4a57e62b22ef6993a7d6811a573d", "html_url": "https://github.com/rust-lang/rust/commit/d956d014f28d4a57e62b22ef6993a7d6811a573d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d956d014f28d4a57e62b22ef6993a7d6811a573d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80045d65e111568f0fe2f5371a6d0f7d8c81b496", "url": "https://api.github.com/repos/rust-lang/rust/commits/80045d65e111568f0fe2f5371a6d0f7d8c81b496", "html_url": "https://github.com/rust-lang/rust/commit/80045d65e111568f0fe2f5371a6d0f7d8c81b496"}, {"sha": "843e8d19ec9dc0f1c0ddd700210761aef2b180d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/843e8d19ec9dc0f1c0ddd700210761aef2b180d5", "html_url": "https://github.com/rust-lang/rust/commit/843e8d19ec9dc0f1c0ddd700210761aef2b180d5"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "99e4ded62f1a7f3ae75997b134c8677173182e76", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d956d014f28d4a57e62b22ef6993a7d6811a573d", "patch": "@@ -20,7 +20,6 @@ pub fn compute_mir_scopes<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     instance: Instance<'tcx>,\n     mir: &Body<'tcx>,\n-    fn_dbg_scope: &'ll DIScope,\n     debug_context: &mut FunctionDebugContext<&'ll DIScope, &'ll DILocation>,\n ) {\n     // Find all scopes with variables defined in them.\n@@ -38,47 +37,49 @@ pub fn compute_mir_scopes<'ll, 'tcx>(\n         // Nothing to emit, of course.\n         None\n     };\n-\n+    let mut instantiated = BitSet::new_empty(mir.source_scopes.len());\n     // Instantiate all scopes.\n     for idx in 0..mir.source_scopes.len() {\n         let scope = SourceScope::new(idx);\n-        make_mir_scope(cx, instance, mir, fn_dbg_scope, &variables, debug_context, scope);\n+        make_mir_scope(cx, instance, mir, &variables, debug_context, &mut instantiated, scope);\n     }\n+    assert!(instantiated.count() == mir.source_scopes.len());\n }\n \n fn make_mir_scope<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     instance: Instance<'tcx>,\n     mir: &Body<'tcx>,\n-    fn_dbg_scope: &'ll DIScope,\n     variables: &Option<BitSet<SourceScope>>,\n     debug_context: &mut FunctionDebugContext<&'ll DIScope, &'ll DILocation>,\n+    instantiated: &mut BitSet<SourceScope>,\n     scope: SourceScope,\n ) {\n-    if debug_context.scopes[scope].dbg_scope.is_some() {\n+    if instantiated.contains(scope) {\n         return;\n     }\n \n     let scope_data = &mir.source_scopes[scope];\n     let parent_scope = if let Some(parent) = scope_data.parent_scope {\n-        make_mir_scope(cx, instance, mir, fn_dbg_scope, variables, debug_context, parent);\n+        make_mir_scope(cx, instance, mir, variables, debug_context, instantiated, parent);\n         debug_context.scopes[parent]\n     } else {\n         // The root is the function itself.\n         let loc = cx.lookup_debug_loc(mir.span.lo());\n         debug_context.scopes[scope] = DebugScope {\n-            dbg_scope: Some(fn_dbg_scope),\n-            inlined_at: None,\n             file_start_pos: loc.file.start_pos,\n             file_end_pos: loc.file.end_pos,\n+            ..debug_context.scopes[scope]\n         };\n+        instantiated.insert(scope);\n         return;\n     };\n \n     if let Some(vars) = variables && !vars.contains(scope) && scope_data.inlined.is_none() {\n         // Do not create a DIScope if there are no variables defined in this\n         // MIR `SourceScope`, and it's not `inlined`, to avoid debuginfo bloat.\n         debug_context.scopes[scope] = parent_scope;\n+        instantiated.insert(scope);\n         return;\n     }\n \n@@ -100,7 +101,7 @@ fn make_mir_scope<'ll, 'tcx>(\n         None => unsafe {\n             llvm::LLVMRustDIBuilderCreateLexicalBlock(\n                 DIB(cx),\n-                parent_scope.dbg_scope.unwrap(),\n+                parent_scope.dbg_scope,\n                 file_metadata,\n                 loc.line,\n                 loc.col,\n@@ -116,9 +117,10 @@ fn make_mir_scope<'ll, 'tcx>(\n     });\n \n     debug_context.scopes[scope] = DebugScope {\n-        dbg_scope: Some(dbg_scope),\n+        dbg_scope,\n         inlined_at: inlined_at.or(parent_scope.inlined_at),\n         file_start_pos: loc.file.start_pos,\n         file_end_pos: loc.file.end_pos,\n     };\n+    instantiated.insert(scope);\n }"}, {"sha": "6a164557a4719ae97fac9a1bbe98610d8242d6f4", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=d956d014f28d4a57e62b22ef6993a7d6811a573d", "patch": "@@ -286,9 +286,8 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n \n         // Initialize fn debug context (including scopes).\n-        // FIXME(eddyb) figure out a way to not need `Option` for `dbg_scope`.\n         let empty_scope = DebugScope {\n-            dbg_scope: None,\n+            dbg_scope: self.dbg_scope_fn(instance, fn_abi, Some(llfn)),\n             inlined_at: None,\n             file_start_pos: BytePos(0),\n             file_end_pos: BytePos(0),\n@@ -297,13 +296,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             FunctionDebugContext { scopes: IndexVec::from_elem(empty_scope, &mir.source_scopes) };\n \n         // Fill in all the scopes, with the information from the MIR body.\n-        compute_mir_scopes(\n-            self,\n-            instance,\n-            mir,\n-            self.dbg_scope_fn(instance, fn_abi, Some(llfn)),\n-            &mut fn_debug_context,\n-        );\n+        compute_mir_scopes(self, instance, mir, &mut fn_debug_context);\n \n         Some(fn_debug_context)\n     }"}, {"sha": "f2d1827c792dbb38fda30623fb861dad8797cad7", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956d014f28d4a57e62b22ef6993a7d6811a573d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=d956d014f28d4a57e62b22ef6993a7d6811a573d", "patch": "@@ -39,8 +39,7 @@ pub struct PerLocalVarDebugInfo<'tcx, D> {\n \n #[derive(Clone, Copy, Debug)]\n pub struct DebugScope<S, L> {\n-    // FIXME(eddyb) this should never be `None`, after initialization.\n-    pub dbg_scope: Option<S>,\n+    pub dbg_scope: S,\n \n     /// Call site location, if this scope was inlined from another function.\n     pub inlined_at: Option<L>,\n@@ -61,17 +60,12 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n         cx: &Cx,\n         span: Span,\n     ) -> S {\n-        // FIXME(eddyb) this should never be `None`.\n-        let dbg_scope = self\n-            .dbg_scope\n-            .unwrap_or_else(|| bug!(\"`dbg_scope` is only `None` during initialization\"));\n-\n         let pos = span.lo();\n         if pos < self.file_start_pos || pos >= self.file_end_pos {\n             let sm = cx.sess().source_map();\n-            cx.extend_scope_to_file(dbg_scope, &sm.lookup_char_pos(pos).file)\n+            cx.extend_scope_to_file(self.dbg_scope, &sm.lookup_char_pos(pos).file)\n         } else {\n-            dbg_scope\n+            self.dbg_scope\n         }\n     }\n }"}]}