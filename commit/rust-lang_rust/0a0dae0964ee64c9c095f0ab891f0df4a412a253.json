{"sha": "0a0dae0964ee64c9c095f0ab891f0df4a412a253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGRhZTA5NjRlZTY0YzljMDk1ZjBhYjg5MWYwZGY0YTQxMmEyNTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T19:17:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T19:45:49Z"}, "message": "pull out `ParamEnvAnd` and remove `QueryKey`", "tree": {"sha": "c91e5d7c03d6af889a739cdc1a0e832106d19ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91e5d7c03d6af889a739cdc1a0e832106d19ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0dae0964ee64c9c095f0ab891f0df4a412a253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0dae0964ee64c9c095f0ab891f0df4a412a253", "html_url": "https://github.com/rust-lang/rust/commit/0a0dae0964ee64c9c095f0ab891f0df4a412a253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0dae0964ee64c9c095f0ab891f0df4a412a253/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e899f843fd94ed3188f4feceb84c74039a30e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e899f843fd94ed3188f4feceb84c74039a30e2", "html_url": "https://github.com/rust-lang/rust/commit/b2e899f843fd94ed3188f4feceb84c74039a30e2"}], "stats": {"total": 353, "additions": 172, "deletions": 181}, "files": [{"sha": "54b67edb1360b91d1d1fe3dab4433b6f4ef5c667", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -34,16 +34,16 @@ pub type CanonicalPredicateGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>>;\n \n pub type CanonicalTypeOpEqGoal<'tcx> =\n-    Canonical<'tcx, type_op::eq::Eq<'tcx>>;\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::eq::Eq<'tcx>>>;\n \n pub type CanonicalTypeOpSubtypeGoal<'tcx> =\n-    Canonical<'tcx, type_op::subtype::Subtype<'tcx>>;\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::subtype::Subtype<'tcx>>>;\n \n pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n-    Canonical<'tcx, type_op::prove_predicate::ProvePredicate<'tcx>>;\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::prove_predicate::ProvePredicate<'tcx>>>;\n \n pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n-    Canonical<'tcx, type_op::normalize::Normalize<'tcx, T>>;\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::normalize::Normalize<T>>>;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;"}, {"sha": "7c35f448a312e9a7b833bd99a28a9dab996129e2", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -8,42 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use traits::query::Fallible;\n-use ty::{ParamEnv, Ty, TyCtxt};\n+use ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Eq<'tcx> {\n-    pub param_env: ParamEnv<'tcx>,\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n }\n \n impl<'tcx> Eq<'tcx> {\n-    pub fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n-        Self { param_env, a, b }\n+    pub fn new(a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n+        Self { a, b }\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n-    type QueryKey = Self;\n     type QueryResult = ();\n \n-    fn prequery(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self> {\n-        if self.a == self.b {\n-            Ok(())\n+    fn prequery(_tcx: TyCtxt<'_, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Eq<'tcx>>) -> Option<Self::QueryResult> {\n+        if key.value.a == key.value.b {\n+            Some(())\n         } else {\n-            Err(self)\n+            None\n         }\n     }\n \n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx> {\n-        key.param_env\n-    }\n-\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonical<'gcx, Eq<'gcx>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n         tcx.type_op_eq(canonicalized)\n     }\n@@ -57,7 +51,6 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Eq<'tcx> {\n-        param_env,\n         a,\n         b,\n     }\n@@ -66,12 +59,11 @@ BraceStructTypeFoldableImpl! {\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for Eq<'a> {\n         type Lifted = Eq<'tcx>;\n-        param_env,\n         a,\n         b,\n     }\n }\n \n impl_stable_hash_for! {\n-    struct Eq<'tcx> { param_env, a, b }\n+    struct Eq<'tcx> { a, b }\n }"}, {"sha": "191fc1aabb17ffb834086b0d414b45feab385178", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 52, "deletions": 49, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{\n-    Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint, QueryResult,\n-};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint,\n+                       QueryResult};\n use infer::{InferCtxt, InferOk};\n use std::fmt;\n use std::rc::Rc;\n use traits::query::Fallible;\n use traits::ObligationCause;\n use ty::fold::TypeFoldable;\n-use ty::{Lift, ParamEnv, TyCtxt};\n+use ty::{Lift, ParamEnvAnd, TyCtxt};\n \n pub mod custom;\n pub mod eq;\n pub mod normalize;\n pub mod outlives;\n pub mod prove_predicate;\n+use self::prove_predicate::ProvePredicate;\n pub mod subtype;\n \n pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n@@ -38,16 +38,18 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)>;\n }\n \n-pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n-    type QueryKey: TypeFoldable<'tcx> + Lift<'gcx>;\n+pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n+    fmt::Debug + Sized + TypeFoldable<'tcx> + Lift<'gcx>\n+{\n     type QueryResult: TypeFoldable<'tcx> + Lift<'gcx>;\n \n     /// Either converts `self` directly into a `QueryResult` (for\n     /// simple cases) or into a `QueryKey` (for more complex cases\n     /// where we actually have work to do).\n-    fn prequery(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self::QueryKey>;\n-\n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx>;\n+    fn prequery(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        key: &ParamEnvAnd<'tcx, Self>,\n+    ) -> Option<Self::QueryResult>;\n \n     /// Performs the actual query with the canonicalized key -- the\n     /// real work happens here. This method is not given an `infcx`\n@@ -57,7 +59,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n     /// not captured in the return value.\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Self::QueryKey>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>>;\n \n     /// Casts a lifted query result (which is in the gcx lifetime)\n@@ -77,52 +79,53 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>>;\n \n     fn fully_perform_into(\n-        self,\n+        query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n     ) -> Fallible<Self::QueryResult> {\n-        match QueryTypeOp::prequery(self, infcx.tcx) {\n-            Ok(result) => Ok(result),\n-            Err(query_key) => {\n-                // FIXME(#33684) -- We need to use\n-                // `canonicalize_hr_query_hack` here because of things\n-                // like the subtype query, which go awry around\n-                // `'static` otherwise.\n-                let (canonical_self, canonical_var_values) =\n-                    infcx.canonicalize_hr_query_hack(&query_key);\n-                let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;\n-                let canonical_result = Self::shrink_to_tcx_lifetime(&canonical_result);\n-\n-                let param_env = Self::param_env(&query_key);\n-\n-                let InferOk { value, obligations } = infcx\n-                    .instantiate_nll_query_result_and_region_obligations(\n-                        &ObligationCause::dummy(),\n-                        param_env,\n-                        &canonical_var_values,\n-                        canonical_result,\n-                        output_query_region_constraints,\n-                    )?;\n-\n-                // Typically, instantiating NLL query results does not\n-                // create obligations. However, in some cases there\n-                // are unresolved type variables, and unify them *can*\n-                // create obligations. In that case, we have to go\n-                // fulfill them. We do this via a (recursive) query.\n-                for obligation in obligations {\n-                    let () = prove_predicate::ProvePredicate::new(\n-                        obligation.param_env,\n-                        obligation.predicate,\n-                    ).fully_perform_into(infcx, output_query_region_constraints)?;\n-                }\n-\n-                Ok(value)\n-            }\n+        if let Some(result) = QueryTypeOp::prequery(infcx.tcx, &query_key) {\n+            return Ok(result);\n         }\n+\n+        // FIXME(#33684) -- We need to use\n+        // `canonicalize_hr_query_hack` here because of things\n+        // like the subtype query, which go awry around\n+        // `'static` otherwise.\n+        let (canonical_self, canonical_var_values) = infcx.canonicalize_hr_query_hack(&query_key);\n+        let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;\n+        let canonical_result = Self::shrink_to_tcx_lifetime(&canonical_result);\n+\n+        let param_env = query_key.param_env;\n+\n+        let InferOk { value, obligations } = infcx\n+            .instantiate_nll_query_result_and_region_obligations(\n+                &ObligationCause::dummy(),\n+                param_env,\n+                &canonical_var_values,\n+                canonical_result,\n+                output_query_region_constraints,\n+            )?;\n+\n+        // Typically, instantiating NLL query results does not\n+        // create obligations. However, in some cases there\n+        // are unresolved type variables, and unify them *can*\n+        // create obligations. In that case, we have to go\n+        // fulfill them. We do this via a (recursive) query.\n+        for obligation in obligations {\n+            let () = ProvePredicate::fully_perform_into(\n+                obligation\n+                    .param_env\n+                    .and(ProvePredicate::new(obligation.predicate)),\n+                infcx,\n+                output_query_region_constraints,\n+            )?;\n+        }\n+\n+        Ok(value)\n     }\n }\n \n-impl<'gcx: 'tcx, 'tcx, Q> TypeOp<'gcx, 'tcx> for Q\n+impl<'gcx: 'tcx, 'tcx, Q> TypeOp<'gcx, 'tcx> for ParamEnvAnd<'tcx, Q>\n where\n     Q: QueryTypeOp<'gcx, 'tcx>,\n {"}, {"sha": "3491b0b4b4ecefaabed2f88b916e16a9503e89a3", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -12,45 +12,39 @@ use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, Query\n use std::fmt;\n use traits::query::Fallible;\n use ty::fold::TypeFoldable;\n-use ty::{self, Lift, ParamEnv, Ty, TyCtxt};\n+use ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub struct Normalize<'tcx, T> {\n-    pub param_env: ParamEnv<'tcx>,\n+pub struct Normalize<T> {\n     pub value: T,\n }\n \n-impl<'tcx, T> Normalize<'tcx, T>\n+impl<'tcx, T> Normalize<T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n-    pub fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n-        Self { param_env, value }\n+    pub fn new(value: T) -> Self {\n+        Self { value }\n     }\n }\n \n-impl<'gcx: 'tcx, 'tcx, T> super::QueryTypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n+impl<'gcx: 'tcx, 'tcx, T> super::QueryTypeOp<'gcx, 'tcx> for Normalize<T>\n where\n     T: Normalizable<'gcx, 'tcx>,\n {\n-    type QueryKey = Self;\n     type QueryResult = T;\n \n-    fn prequery(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<T, Self> {\n-        if !self.value.has_projections() {\n-            Ok(self.value)\n+    fn prequery(_tcx: TyCtxt<'_, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<T> {\n+        if !key.value.value.has_projections() {\n+            Some(key.value.value)\n         } else {\n-            Err(self)\n+            None\n         }\n     }\n \n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx> {\n-        key.param_env\n-    }\n-\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Self>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n         T::type_op_method(tcx, canonicalized)\n     }\n@@ -62,10 +56,10 @@ where\n     }\n }\n \n-pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx> {\n+pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx> + Copy {\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>>;\n \n     /// Convert from the `'gcx` (lifted) form of `Self` into the `tcx`\n@@ -81,7 +75,7 @@ where\n {\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n@@ -99,7 +93,7 @@ where\n {\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n@@ -117,7 +111,7 @@ where\n {\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n@@ -135,7 +129,7 @@ where\n {\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Normalize<'gcx, Self>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n@@ -148,22 +142,20 @@ where\n }\n \n BraceStructTypeFoldableImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Normalize<'tcx, T> {\n-        param_env,\n+    impl<'tcx, T> TypeFoldable<'tcx> for Normalize<T> {\n         value,\n     } where T: TypeFoldable<'tcx>,\n }\n \n BraceStructLiftImpl! {\n-    impl<'a, 'tcx, T> Lift<'tcx> for Normalize<'a, T> {\n-        type Lifted = Normalize<'tcx, T::Lifted>;\n-        param_env,\n+    impl<'tcx, T> Lift<'tcx> for Normalize<T> {\n+        type Lifted = Normalize<T::Lifted>;\n         value,\n     } where T: Lift<'tcx>,\n }\n \n impl_stable_hash_for! {\n-    impl<'tcx, T> for struct Normalize<'tcx, T> {\n-        param_env, value\n+    impl<'tcx, T> for struct Normalize<T> {\n+        value\n     }\n }"}, {"sha": "bfb476055c8256005de5677d49bb0ea9e065afce", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -12,45 +12,39 @@ use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, Query\n use traits::query::dropck_outlives::trivial_dropck_outlives;\n use traits::query::dropck_outlives::DropckOutlivesResult;\n use traits::query::Fallible;\n-use ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n+use ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct DropckOutlives<'tcx> {\n-    param_env: ParamEnv<'tcx>,\n     dropped_ty: Ty<'tcx>,\n }\n \n impl<'tcx> DropckOutlives<'tcx> {\n-    pub fn new(param_env: ParamEnv<'tcx>, dropped_ty: Ty<'tcx>) -> Self {\n-        DropckOutlives {\n-            param_env,\n-            dropped_ty,\n-        }\n+    pub fn new(dropped_ty: Ty<'tcx>) -> Self {\n+        DropckOutlives { dropped_ty }\n     }\n }\n \n impl super::QueryTypeOp<'gcx, 'tcx> for DropckOutlives<'tcx>\n where\n     'gcx: 'tcx,\n {\n-    type QueryKey = ParamEnvAnd<'tcx, Ty<'tcx>>;\n     type QueryResult = DropckOutlivesResult<'tcx>;\n \n-    fn prequery(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self::QueryKey> {\n-        if trivial_dropck_outlives(tcx, self.dropped_ty) {\n-            Ok(DropckOutlivesResult::default())\n+    fn prequery(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        key: &ParamEnvAnd<'tcx, Self>,\n+    ) -> Option<Self::QueryResult> {\n+        if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n+            Some(DropckOutlivesResult::default())\n         } else {\n-            Err(self.param_env.and(self.dropped_ty))\n+            None\n         }\n     }\n \n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx> {\n-        key.param_env\n-    }\n-\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Self::QueryKey>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n         // Subtle: note that we are not invoking\n         // `infcx.at(...).dropck_outlives(...)` here, but rather the\n@@ -61,6 +55,23 @@ where\n         // good because the interface doesn't give us one (so that we\n         // know we are not registering any subregion relations or\n         // other things).\n+\n+        // FIXME convert to the type expected by the `dropck_outlives`\n+        // query. This should eventually be fixed by changing the\n+        // *underlying query*.\n+        let Canonical {\n+            variables,\n+            value:\n+                ParamEnvAnd {\n+                    param_env,\n+                    value: DropckOutlives { dropped_ty },\n+                },\n+        } = canonicalized;\n+        let canonicalized = Canonical {\n+            variables,\n+            value: param_env.and(dropped_ty),\n+        };\n+\n         tcx.dropck_outlives(canonicalized)\n     }\n \n@@ -70,3 +81,20 @@ where\n         lifted_query_result\n     }\n }\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for DropckOutlives<'tcx> {\n+        dropped_ty\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for DropckOutlives<'a> {\n+        type Lifted = DropckOutlives<'tcx>;\n+        dropped_ty\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct DropckOutlives<'tcx> { dropped_ty }\n+}"}, {"sha": "dfe640f7431fc748dab5a7c99ccf4413b73e3e12", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -8,40 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use traits::query::Fallible;\n-use ty::{ParamEnv, Predicate, TyCtxt};\n+use ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ProvePredicate<'tcx> {\n-    pub param_env: ParamEnv<'tcx>,\n     pub predicate: Predicate<'tcx>,\n }\n \n impl<'tcx> ProvePredicate<'tcx> {\n-    pub fn new(param_env: ParamEnv<'tcx>, predicate: Predicate<'tcx>) -> Self {\n+    pub fn new(predicate: Predicate<'tcx>) -> Self {\n         ProvePredicate {\n-            param_env,\n             predicate,\n         }\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n-    type QueryKey = Self;\n     type QueryResult = ();\n \n-    fn prequery(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self::QueryKey> {\n-        Err(self)\n-    }\n-\n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx> {\n-        key.param_env\n+    fn prequery(_tcx: TyCtxt<'_, 'gcx, 'tcx>, _key: &ParamEnvAnd<'tcx, Self>) -> Option<Self::QueryResult> {\n+        None\n     }\n \n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonical<'gcx, ProvePredicate<'gcx>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n@@ -55,19 +48,17 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ProvePredicate<'tcx> {\n-        param_env,\n         predicate,\n     }\n }\n \n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for ProvePredicate<'a> {\n         type Lifted = ProvePredicate<'tcx>;\n-        param_env,\n         predicate,\n     }\n }\n \n impl_stable_hash_for! {\n-    struct ProvePredicate<'tcx> { param_env, predicate }\n+    struct ProvePredicate<'tcx> { predicate }\n }"}, {"sha": "db535e3dd13db5de2cd3b6015104fa668e980de7", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -8,46 +8,39 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n use traits::query::Fallible;\n-use ty::{ParamEnv, Ty, TyCtxt};\n+use ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Subtype<'tcx> {\n-    pub param_env: ParamEnv<'tcx>,\n     pub sub: Ty<'tcx>,\n     pub sup: Ty<'tcx>,\n }\n \n impl<'tcx> Subtype<'tcx> {\n-    pub fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n+    pub fn new(sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n         Self {\n-            param_env,\n             sub,\n             sup,\n         }\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n-    type QueryKey = Self;\n     type QueryResult = ();\n \n-    fn prequery(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<(), Self::QueryKey> {\n-        if self.sub == self.sup {\n-            Ok(())\n+    fn prequery(_tcx: TyCtxt<'_, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<()> {\n+        if key.value.sub == key.value.sup {\n+            Some(())\n         } else {\n-            Err(self)\n+            None\n         }\n     }\n \n-    fn param_env(key: &Self::QueryKey) -> ParamEnv<'tcx> {\n-        key.param_env\n-    }\n-\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonical<'gcx, Subtype<'gcx>>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n         tcx.type_op_subtype(canonicalized)\n     }\n@@ -61,7 +54,6 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Subtype<'tcx> {\n-        param_env,\n         sub,\n         sup,\n     }\n@@ -70,12 +62,11 @@ BraceStructTypeFoldableImpl! {\n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for Subtype<'a> {\n         type Lifted = Subtype<'tcx>;\n-        param_env,\n         sub,\n         sup,\n     }\n }\n \n impl_stable_hash_for! {\n-    struct Subtype<'tcx> { param_env, sub, sup }\n+    struct Subtype<'tcx> { sub, sup }\n }"}, {"sha": "f27de92c6215a9eecdb7bfafd7fb07ef7588efac", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -13,10 +13,10 @@ use borrow_check::nll::type_check::AtLocation;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n-use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::Local;\n use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n use rustc::ty::{Ty, TypeFoldable};\n@@ -223,7 +223,8 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n         debug!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty,);\n \n         let param_env = cx.param_env;\n-        let (dropck_result, region_constraint_data) = DropckOutlives::new(param_env, dropped_ty)\n+        let (dropck_result, region_constraint_data) = param_env\n+            .and(DropckOutlives::new(dropped_ty))\n             .fully_perform(cx.infcx)\n             .unwrap();\n "}, {"sha": "39f6c6a686426af67798d89fe9568c233e2f5272", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -778,13 +778,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             locations,\n-            type_op::subtype::Subtype::new(param_env, sub, sup),\n+            param_env.and(type_op::subtype::Subtype::new(sub, sup)),\n         )\n     }\n \n     fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> Fallible<()> {\n         let param_env = self.param_env;\n-        self.fully_perform_op(locations, type_op::eq::Eq::new(param_env, b, a))\n+        self.fully_perform_op(locations, param_env.and(type_op::eq::Eq::new(b, a)))\n     }\n \n     fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -1576,7 +1576,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             location.at_self(),\n-            type_op::prove_predicate::ProvePredicate::new(param_env, predicate),\n+            param_env.and(type_op::prove_predicate::ProvePredicate::new(predicate)),\n         ).unwrap_or_else(|NoSolution| {\n             span_mirbug!(self, NoSolution, \"could not prove {:?}\", predicate);\n         })\n@@ -1616,7 +1616,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             location.to_locations(),\n-            type_op::normalize::Normalize::new(param_env, value),\n+            param_env.and(type_op::normalize::Normalize::new(value)),\n         ).unwrap_or_else(|NoSolution| {\n             span_mirbug!(self, NoSolution, \"failed to normalize `{:?}`\", value);\n             value"}, {"sha": "9940608222230abcaf7138715a8c80e3984b60fa", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0dae0964ee64c9c095f0ab891f0df4a412a253/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=0a0dae0964ee64c9c095f0ab891f0df4a412a253", "patch": "@@ -17,7 +17,7 @@ use rustc::traits::query::type_op::subtype::Subtype;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{Obligation, Normalized, ObligationCause};\n use rustc::ty::query::Providers;\n-use rustc::ty::{FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{ParamEnvAnd, FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n \n@@ -36,22 +36,23 @@ crate fn provide(p: &mut Providers) {\n \n fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Eq<'tcx>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter_canonical_trait_query(&canonicalized, |infcx, Eq { param_env, a, b }| {\n+        .enter_canonical_trait_query(&canonicalized, |infcx, key| {\n+            let (param_env, Eq { a, b }) = key.into_parts();\n             Ok(infcx.at(&ObligationCause::dummy(), param_env).eq(a, b)?)\n         })\n }\n \n fn type_op_normalize<T>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    key: Normalize<'tcx, T>,\n+    key: ParamEnvAnd<'tcx, Normalize<T>>,\n ) -> Fallible<InferOk<'tcx, T>>\n where\n     T: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n {\n-    let Normalize { param_env, value } = key;\n+    let (param_env, Normalize { value }) = key.into_parts();\n     let Normalized { value, obligations } = infcx\n         .at(&ObligationCause::dummy(), param_env)\n         .normalize(&value)?;\n@@ -60,48 +61,43 @@ where\n \n fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Normalize<'tcx, Ty<'tcx>>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Ty<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Normalize<'tcx, Predicate<'tcx>>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Predicate<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Normalize<'tcx, FnSig<'tcx>>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, FnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Normalize<'tcx, PolyFnSig<'tcx>>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Subtype<'tcx>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(\n-        &canonicalized,\n-        |infcx,\n-         Subtype {\n-             param_env,\n-             sub,\n-             sup,\n-         }| {\n+        &canonicalized, |infcx, key| {\n+            let (param_env, Subtype { sub, sup }) = key.into_parts();\n             Ok(infcx\n                 .at(&ObligationCause::dummy(), param_env)\n                 .sup(sup, sub)?)\n@@ -111,14 +107,11 @@ fn type_op_subtype<'tcx>(\n \n fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, ProvePredicate<'tcx>>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |_infcx, key| {\n-            let ProvePredicate {\n-                param_env,\n-                predicate,\n-            } = key;\n+            let (param_env, ProvePredicate { predicate }) = key.into_parts();\n             Ok(InferOk {\n                 value: (),\n                 obligations: vec![Obligation::new("}]}