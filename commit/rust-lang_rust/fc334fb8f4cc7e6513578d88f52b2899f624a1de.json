{"sha": "fc334fb8f4cc7e6513578d88f52b2899f624a1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzM0ZmI4ZjRjYzdlNjUxMzU3OGQ4OGY1MmIyODk5ZjYyNGExZGU=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-09T22:26:12Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-10T10:57:28Z"}, "message": "use_self - fix issue with `hir_ty_to_ty`", "tree": {"sha": "5273e9298ec9a8ac844de835275c113510068925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5273e9298ec9a8ac844de835275c113510068925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc334fb8f4cc7e6513578d88f52b2899f624a1de", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAjvBgACgkQHKDfKvWd\naKUCjBAAq/iv0XmvPn8I38nM4Pcw8DYRl/RxxXIXnfkV85xAoRScShjgbe7oNZ4G\netc/pwgnVl2u7wvFbbnvtdes9mQv2mPMps51UXKUEZoAeweG0zDD45xBos2P5NqF\n0zyNQA0J3tvLv9xuXrCdY0HfwjmG9ByTPwyBevbVdh9P4+OvZp4CX6GXa0f92Toa\nNYlfoTBebS7RSkcZ7q6r0zHN3+xm4OZRhuhhus+4/rn+mZ9paWjFpy7Q85u3BEpd\nJBHykc0/EU6W4fWOK+EUMwuLn0ZKOh5Lhk97scQYR4to37/26A7hlYQMQoD46ZyZ\n72R7YkkXiWTSSUQBQp7M2brR1K97YthNHF0IHqOhWkoN1RsNBCMbxBWIWvWy5n+V\nyl0OxoraRIWbKGROlA3+tUQ8thl3zTkDy7NNcThDktywvCVL7Tsbu53ANzLjqPgG\nGo5TIIULphLAcZha+OVy8r0328vcFmcAttC6QCSoKCnA06uiFUFsNCZst5LYd86o\n1ABdrIkUd5MealXD9NG8mLr0jMHl+6kVu1jBL1YFUTBScGhYQR2GVaiK5YcbVFa8\nqREvF9t7ROL5j4pWQ+6XWPqwJqwU8EwFy/svaJaqIsUWUx8RrhQVsOZ4h3yQMQCK\nJgB3MUzh05k/2UhPWCp5lVKQKsRhmEVd2QLnIxx+hUshmnKMoXE=\n=NoG4\n-----END PGP SIGNATURE-----", "payload": "tree 5273e9298ec9a8ac844de835275c113510068925\nparent 347b01eb1f41154e3e1d6f13c54afa0336d80516\nauthor Tim Nielens <tim.nielens@gmail.com> 1602282372 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1612954648 +0100\n\nuse_self - fix issue with `hir_ty_to_ty`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc334fb8f4cc7e6513578d88f52b2899f624a1de", "html_url": "https://github.com/rust-lang/rust/commit/fc334fb8f4cc7e6513578d88f52b2899f624a1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc334fb8f4cc7e6513578d88f52b2899f624a1de/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "347b01eb1f41154e3e1d6f13c54afa0336d80516", "url": "https://api.github.com/repos/rust-lang/rust/commits/347b01eb1f41154e3e1d6f13c54afa0336d80516", "html_url": "https://github.com/rust-lang/rust/commit/347b01eb1f41154e3e1d6f13c54afa0336d80516"}], "stats": {"total": 279, "additions": 112, "deletions": 167}, "files": [{"sha": "023fce947b3aa95034eba95d65ba8a136ba4a708", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -57,7 +57,7 @@ declare_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n-fn span_lint<'tcx>(cx: &LateContext<'tcx>, span: Span) {\n+fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,\n         USE_SELF,\n@@ -99,12 +99,12 @@ fn span_lint_on_qpath_resolved<'tcx>(cx: &LateContext<'tcx>, qpath: &'tcx QPath<\n     }\n }\n \n-struct ImplVisitor<'a, 'tcx> {\n+struct BodyVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     self_ty: Ty<'tcx>,\n }\n \n-impl<'a, 'tcx> ImplVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> BodyVisitor<'a, 'tcx> {\n     fn check_trait_method_impl_decl(\n         &mut self,\n         impl_item: &ImplItem<'tcx>,\n@@ -151,46 +151,13 @@ impl<'a, 'tcx> ImplVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ImplVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for BodyVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n     }\n \n-    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {\n-        if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind {\n-            match path.res {\n-                def::Res::SelfTy(..) => {},\n-                _ => {\n-                    match self.cx.tcx.hir().find(self.cx.tcx.hir().get_parent_node(hir_ty.hir_id)) {\n-                        Some(Node::Expr(Expr {\n-                            kind: ExprKind::Path(QPath::TypeRelative(_, _segment)),\n-                            ..\n-                        })) => {\n-                            // The following block correctly identifies applicable lint locations\n-                            // but `hir_ty_to_ty` calls cause odd ICEs.\n-                            //\n-                            // if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n-                            //     // FIXME: this span manipulation should not be necessary\n-                            //     // @flip1995 found an ast lowering issue in\n-                            //     // https://github.com/rust-lang/rust/blob/master/src/librustc_ast_lowering/path.rs#L142-L162\n-                            //     span_lint_until_last_segment(self.cx, hir_ty.span, segment);\n-                            // }\n-                        },\n-                        _ => {\n-                            if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n-                                span_lint(self.cx, hir_ty.span)\n-                            }\n-                        },\n-                    }\n-                },\n-            }\n-        }\n-\n-        walk_ty(self, hir_ty);\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         fn expr_ty_matches<'tcx>(expr: &'tcx Expr<'tcx>, self_ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n             let def_id = expr.hir_id.owner;\n@@ -247,6 +214,52 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplVisitor<'a, 'tcx> {\n     }\n }\n \n+struct FnSigVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    self_ty: Ty<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FnSigVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind {\n+            match path.res {\n+                def::Res::SelfTy(..) => {},\n+                _ => {\n+                    match self.cx.tcx.hir().find(self.cx.tcx.hir().get_parent_node(hir_ty.hir_id)) {\n+                        Some(Node::Expr(Expr {\n+                            kind: ExprKind::Path(QPath::TypeRelative(_, segment)),\n+                            ..\n+                        })) => {\n+                            // The following block correctly identifies applicable lint locations\n+                            // but `hir_ty_to_ty` calls cause odd ICEs.\n+                            //\n+                            if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n+                                // fixme: this span manipulation should not be necessary\n+                                // @flip1995 found an ast lowering issue in\n+                                // https://github.com/rust-lang/rust/blob/master/src/librustc_ast_lowering/path.rs#l142-l162\n+                                span_lint_until_last_segment(self.cx, hir_ty.span, segment);\n+                            }\n+                        },\n+                        _ => {\n+                            if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n+                                span_lint(self.cx, hir_ty.span)\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        }\n+\n+        walk_ty(self, hir_ty);\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if in_external_macro(cx.sess(), impl_item.span) {\n@@ -270,7 +283,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 // TODO: don't short-circuit upon lifetime parameters\n                 if should_check {\n                     let self_ty = hir_ty_to_ty(cx.tcx, hir_self_ty);\n-                    let visitor = &mut ImplVisitor { cx, self_ty };\n+                    let body_visitor = &mut BodyVisitor { cx, self_ty };\n+                    let fn_sig_visitor = &mut FnSigVisitor { cx, self_ty };\n \n                     let tcx = cx.tcx;\n                     let impl_def_id = tcx.hir().local_def_id(imp.hir_id);\n@@ -279,11 +293,12 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                         if let Some(impl_trait_ref) = impl_trait_ref;\n                         if let ImplItemKind::Fn(FnSig { decl: impl_decl, .. }, impl_body_id) = &impl_item.kind;\n                         then {\n-                            visitor.check_trait_method_impl_decl(impl_item, impl_decl, impl_trait_ref);\n+                            body_visitor.check_trait_method_impl_decl(impl_item, impl_decl, impl_trait_ref);\n                             let body = tcx.hir().body(*impl_body_id);\n-                            visitor.visit_body(body);\n+                            body_visitor.visit_body(body);\n                         } else {\n-                            walk_impl_item(visitor, impl_item)\n+                            walk_impl_item(body_visitor, impl_item);\n+                            walk_impl_item(fn_sig_visitor, impl_item);\n                         }\n                     }\n                 }"}, {"sha": "d59750cbfd8d949cc6d043009bd639a5f6730b3e", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -15,12 +15,14 @@ mod use_self {\n             Self {}\n         }\n         fn test() -> Self {\n+            // FIXME: applicable here\n             Foo::new()\n         }\n     }\n \n     impl Default for Foo {\n-        fn default() -> Self {\n+        // FIXME: applicable here\n+        fn default() -> Foo {\n             // FIXME: applicable here\n             Foo::new()\n         }\n@@ -213,7 +215,9 @@ mod rustfix {\n         fn fun_1() {}\n \n         fn fun_2() {\n+            // FIXME: applicable here\n             nested::A::fun_1();\n+            // FIXME: applicable here\n             nested::A::A;\n \n             Self {};"}, {"sha": "85606049774e1cfb28dc8b8aebbd6b68887454c7", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -15,11 +15,13 @@ mod use_self {\n             Foo {}\n         }\n         fn test() -> Foo {\n+            // FIXME: applicable here\n             Foo::new()\n         }\n     }\n \n     impl Default for Foo {\n+        // FIXME: applicable here\n         fn default() -> Foo {\n             // FIXME: applicable here\n             Foo::new()\n@@ -213,7 +215,9 @@ mod rustfix {\n         fn fun_1() {}\n \n         fn fun_2() {\n+            // FIXME: applicable here\n             nested::A::fun_1();\n+            // FIXME: applicable here\n             nested::A::A;\n \n             nested::A {};"}, {"sha": "4d213316cf53cd12be163e41875afce60121ac3a", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 39, "deletions": 45, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -1,16 +1,16 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:21\n+  --> $DIR/use_self.rs:15:13\n    |\n-LL |         fn new() -> Foo {\n-   |                     ^^^ help: use the applicable keyword: `Self`\n+LL |             Foo {}\n+   |             ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:13\n+  --> $DIR/use_self.rs:14:21\n    |\n-LL |             Foo {}\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |         fn new() -> Foo {\n+   |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:17:22\n@@ -19,122 +19,116 @@ LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:25\n-   |\n-LL |         fn default() -> Foo {\n-   |                         ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:94:24\n+  --> $DIR/use_self.rs:96:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:109:13\n+  --> $DIR/use_self.rs:111:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:117:25\n+  --> $DIR/use_self.rs:120:17\n    |\n-LL |             fn new() -> Foo {\n-   |                         ^^^ help: use the applicable keyword: `Self`\n+LL |                 Foo {}\n+   |                 ^^^ help: use the applicable keyword: `Self`\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:118:17\n+  --> $DIR/use_self.rs:119:25\n    |\n-LL |                 Foo {}\n-   |                 ^^^ help: use the applicable keyword: `Self`\n+LL |             fn new() -> Foo {\n+   |                         ^^^ help: use the applicable keyword: `Self`\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:141:29\n-   |\n-LL |                 fn bar() -> Bar {\n-   |                             ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:142:21\n+  --> $DIR/use_self.rs:144:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:153:21\n+  --> $DIR/use_self.rs:143:29\n    |\n-LL |         fn baz() -> Foo {\n-   |                     ^^^ help: use the applicable keyword: `Self`\n+LL |                 fn bar() -> Bar {\n+   |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:154:13\n+  --> $DIR/use_self.rs:156:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:171:21\n+  --> $DIR/use_self.rs:155:21\n+   |\n+LL |         fn baz() -> Foo {\n+   |                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:173:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:172:21\n+  --> $DIR/use_self.rs:174:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:173:21\n+  --> $DIR/use_self.rs:175:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:218:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:254:13\n+  --> $DIR/use_self.rs:258:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:282:29\n+  --> $DIR/use_self.rs:287:13\n    |\n-LL |         fn foo(value: T) -> Foo<T> {\n-   |                             ^^^^^^ help: use the applicable keyword: `Self`\n+LL |             Foo { value }\n+   |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:283:13\n+  --> $DIR/use_self.rs:286:29\n    |\n-LL |             Foo { value }\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |         fn foo(value: T) -> Foo<T> {\n+   |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:320:21\n+  --> $DIR/use_self.rs:324:21\n    |\n LL |         type From = T::From;\n    |                     ^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:321:19\n+  --> $DIR/use_self.rs:325:19\n    |\n LL |         type To = T::To;\n    |                   ^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "680a0623839e0c81c3b0ceeb7326571e8d38ded9", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -18,29 +18,29 @@ trait SelfTrait {\n struct Bad;\n \n impl SelfTrait for Bad {\n-    fn refs(p1: &Self) -> &Self {\n+    fn refs(p1: &Bad) -> &Bad {\n         p1\n     }\n \n-    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+    fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n         p1\n     }\n \n-    fn mut_refs(p1: &mut Self) -> &mut Self {\n+    fn mut_refs(p1: &mut Bad) -> &mut Bad {\n         p1\n     }\n \n-    fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+    fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n \n-    fn vals(_: Self) -> Self {\n+    fn vals(_: Bad) -> Bad {\n         Bad::default()\n     }\n }\n \n impl Mul for Bad {\n     type Output = Self;\n \n-    fn mul(self, rhs: Self) -> Self {\n+    fn mul(self, rhs: Bad) -> Bad {\n         rhs\n     }\n }"}, {"sha": "5409ccedf859243338ed9eb54e560c88e8a95e0b", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc334fb8f4cc7e6513578d88f52b2899f624a1de/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=fc334fb8f4cc7e6513578d88f52b2899f624a1de", "patch": "@@ -1,82 +1,10 @@\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:21:18\n-   |\n-LL |     fn refs(p1: &Bad) -> &Bad {\n-   |                  ^^^ help: use the applicable keyword: `Self`\n-   |\n-   = note: `-D clippy::use-self` implied by `-D warnings`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:21:27\n-   |\n-LL |     fn refs(p1: &Bad) -> &Bad {\n-   |                           ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:25:33\n-   |\n-LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n-   |                                 ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:25:49\n-   |\n-LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n-   |                                                 ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:29:26\n-   |\n-LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n-   |                          ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:29:39\n-   |\n-LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n-   |                                       ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:33:24\n-   |\n-LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n-   |                        ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:33:42\n-   |\n-LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n-   |                                          ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:35:16\n-   |\n-LL |     fn vals(_: Bad) -> Bad {\n-   |                ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:35:24\n-   |\n-LL |     fn vals(_: Bad) -> Bad {\n-   |                        ^^^ help: use the applicable keyword: `Self`\n-\n error: unnecessary structure name repetition\n   --> $DIR/use_self_trait.rs:41:19\n    |\n LL |     type Output = Bad;\n    |                   ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:43:23\n    |\n-LL |     fn mul(self, rhs: Bad) -> Bad {\n-   |                       ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self_trait.rs:43:31\n-   |\n-LL |     fn mul(self, rhs: Bad) -> Bad {\n-   |                               ^^^ help: use the applicable keyword: `Self`\n+   = note: `-D clippy::use-self` implied by `-D warnings`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to previous error\n "}]}