{"sha": "53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjg3MzEwY2QyZmQ5NjVkYWYyMmYxNTVjYjRhMjUzNmVmOGM4YzY=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-11T21:06:41Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-11T21:06:41Z"}, "message": "Simplify `cast_ptr_alignment` `pointer::casr` case", "tree": {"sha": "8132606cf32b921a009049a71c85e6c69ab78b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8132606cf32b921a009049a71c85e6c69ab78b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "html_url": "https://github.com/rust-lang/rust/commit/53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f87310cd2fd965daf22f155cb4a2536ef8c8c6/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "html_url": "https://github.com/rust-lang/rust/commit/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "75042d846d87206ec4afde6f8d25b06b0b42c8af", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53f87310cd2fd965daf22f155cb4a2536ef8c8c6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f87310cd2fd965daf22f155cb4a2536ef8c8c6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=53f87310cd2fd965daf22f155cb4a2536ef8c8c6", "patch": "@@ -1691,20 +1691,18 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n \n             lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n         } else if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind {\n-            if method_path.ident.name != sym!(cast) {\n-                return;\n-            }\n             if_chain! {\n-                if let Some(generic_args) = method_path.args;\n-                if let [GenericArg::Type(cast_to)] = generic_args.args;\n-                // There probably is no obvious reason to do this, just to be consistent with `as` cases.\n-                if is_hir_ty_cfg_dependant(cx, cast_to);\n-                then {\n-                    return;\n-                }\n+            if method_path.ident.name == sym!(cast);\n+            if let Some(generic_args) = method_path.args;\n+            if let [GenericArg::Type(cast_to)] = generic_args.args;\n+            // There probably is no obvious reason to do this, just to be consistent with `as` cases.\n+            if !is_hir_ty_cfg_dependant(cx, cast_to);\n+            then {\n+                let (cast_from, cast_to) =\n+                    (cx.typeck_results().expr_ty(&args[0]), cx.typeck_results().expr_ty(expr));\n+                lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n+            }\n             }\n-            let (cast_from, cast_to) = (cx.typeck_results().expr_ty(&args[0]), cx.typeck_results().expr_ty(expr));\n-            lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n         }\n     }\n }"}]}