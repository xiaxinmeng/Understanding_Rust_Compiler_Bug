{"sha": "0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MDVjOGE1ZWM4NTZhNmI5NzJmY2IyMzlkZjJiOGY2ZTgyZDI0MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-01T06:32:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-01T06:32:54Z"}, "message": "Auto merge of #22909 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "dae5d3ebde7eaaeeaad8b0e67bfb835b33fb5258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae5d3ebde7eaaeeaad8b0e67bfb835b33fb5258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "html_url": "https://github.com/rust-lang/rust/commit/0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341a9ca1e324d7b7427334b32e99e6d8bc82e9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/341a9ca1e324d7b7427334b32e99e6d8bc82e9a6", "html_url": "https://github.com/rust-lang/rust/commit/341a9ca1e324d7b7427334b32e99e6d8bc82e9a6"}, {"sha": "60f7732ccd9b0ad50490457ddd02a4a48cf74e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f7732ccd9b0ad50490457ddd02a4a48cf74e74", "html_url": "https://github.com/rust-lang/rust/commit/60f7732ccd9b0ad50490457ddd02a4a48cf74e74"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "e5333b45525fc3eb0636ad585bacbdba0985f5d1", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -875,7 +875,7 @@ then\n             | cut -d ' ' -f 2)\n \n         case $CFG_CLANG_VERSION in\n-            (3.0svn | 3.0 | 3.1* | 3.2* | 3.3* | 3.4* | 3.5* | 3.6*)\n+            (3.2* | 3.3* | 3.4* | 3.5* | 3.6*)\n             step_msg \"found ok version of CLANG: $CFG_CLANG_VERSION\"\n             if [ -z \"$CC\" ]\n             then"}, {"sha": "86fcac3e4b8a09ca34e98ab499568c3bb83153f4", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -1455,9 +1455,9 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     ///\n     /// `is_cjk` determines behavior for characters in the Ambiguous category: if `is_cjk` is\n     /// `true`, these are 2 columns wide; otherwise, they are 1. In CJK locales, `is_cjk` should be\n-    /// `true`, else it should be `false`. [Unicode Standard Annex\n-    /// #11](http://www.unicode.org/reports/tr11/) recommends that these characters be treated as 1\n-    /// column (i.e., `is_cjk` = `false`) if the locale is unknown.\n+    /// `true`, else it should be `false`.\n+    /// [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/) recommends that these\n+    /// characters be treated as 1 column (i.e., `is_cjk = false`) if the locale is unknown.\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     fn width(&self, is_cjk: bool) -> usize {"}, {"sha": "9544fbaa55b256b65fd48dd58ee682dc14c1386a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -700,7 +700,7 @@ impl Display for char {\n impl<T> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.flags |= 1 << (FlagV1::Alternate as u32);\n-        let ret = LowerHex::fmt(&(*self as u32), f);\n+        let ret = LowerHex::fmt(&(*self as usize), f);\n         f.flags &= !(1 << (FlagV1::Alternate as u32));\n         ret\n     }"}, {"sha": "cd14fe529b1a7b45453c19a141c7d168116b2b5a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -851,7 +851,9 @@ pub fn run_passes(sess: &Session,\n \n     // FIXME: time_llvm_passes support - does this use a global context or\n     // something?\n-    //if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n+    if sess.opts.cg.codegen_units == 1 && sess.time_llvm_passes() {\n+        unsafe { llvm::LLVMRustPrintPassTimings(); }\n+    }\n }\n \n struct WorkItem {"}, {"sha": "fdeef11f36c84c2adc4f2f373ae21b1ca284a394", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -2332,6 +2332,11 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n           // Do static_assert checking. It can't really be done much earlier\n           // because we need to get the value of the bool out of LLVM\n           if attr::contains_name(&item.attrs, \"static_assert\") {\n+              if !ty::type_is_bool(ty::expr_ty(ccx.tcx(), expr)) {\n+                  ccx.sess().span_fatal(expr.span,\n+                                        \"can only have static_assert on a static \\\n+                                         with type `bool`\");\n+              }\n               if m == ast::MutMutable {\n                   ccx.sess().span_fatal(expr.span,\n                                         \"cannot have static_assert on a mutable \\"}, {"sha": "827e2afdca85c81eaaecd97a50ae4e82fa549359", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -164,7 +164,7 @@ pub mod guard {\n \n         if pthread_main_np() == 1 {\n             // main thread\n-            current_stack.ss_sp as uint - current_stack.ss_size as uint + 3 * PAGE_SIZE as uint\n+            current_stack.ss_sp as uint - current_stack.ss_size as uint + PAGE_SIZE as uint\n \n         } else {\n             // new thread"}, {"sha": "d85f58edc90d451d7f913936d2bbf8bd9e0b73f2", "filename": "src/test/compile-fail/nonbool_static_assert.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Ftest%2Fcompile-fail%2Fnonbool_static_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Ftest%2Fcompile-fail%2Fnonbool_static_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonbool_static_assert.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+#[static_assert]\n+static E: i32 = 1; //~ ERROR can only have static_assert on a static with type `bool`\n+\n+fn main() {}"}, {"sha": "62b8ff528a5e2e1395881d72a19a6dba16a8765e", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0905c8a5ec856a6b972fcb239df2b8f6e82d2418/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=0905c8a5ec856a6b972fcb239df2b8f6e82d2418", "patch": "@@ -17,6 +17,7 @@\n #![feature(box_syntax)]\n \n use std::fmt;\n+use std::usize;\n \n struct A;\n struct B;\n@@ -137,6 +138,13 @@ pub fn main() {\n     t!(format!(\"{:+10.3e}\", 1.2345e6f64),  \"  +1.234e6\");\n     t!(format!(\"{:+10.3e}\", -1.2345e6f64), \"  -1.234e6\");\n \n+    // Test that pointers don't get truncated.\n+    {\n+        let val = usize::MAX;\n+        let exp = format!(\"{:#x}\", val);\n+        t!(format!(\"{:p}\", val as *const isize), exp);\n+    }\n+\n     // Escaping\n     t!(format!(\"{{\"), \"{\");\n     t!(format!(\"}}\"), \"}\");"}]}