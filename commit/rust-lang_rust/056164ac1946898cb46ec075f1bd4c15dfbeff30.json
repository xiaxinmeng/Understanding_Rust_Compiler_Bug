{"sha": "056164ac1946898cb46ec075f1bd4c15dfbeff30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NjE2NGFjMTk0Njg5OGNiNDZlYzA3NWYxYmQ0YzE1ZGZiZWZmMzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-17T02:45:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-18T21:07:35Z"}, "message": "core: Inline the protocol definitions of sendp and oneshot\n\nI want to be able to see what is going on", "tree": {"sha": "a6fea547b9c738ec9b0aae3027c8727858b74749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6fea547b9c738ec9b0aae3027c8727858b74749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056164ac1946898cb46ec075f1bd4c15dfbeff30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056164ac1946898cb46ec075f1bd4c15dfbeff30", "html_url": "https://github.com/rust-lang/rust/commit/056164ac1946898cb46ec075f1bd4c15dfbeff30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056164ac1946898cb46ec075f1bd4c15dfbeff30/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dce936753b90dcf80f25251034ccee7afd8ea71", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dce936753b90dcf80f25251034ccee7afd8ea71", "html_url": "https://github.com/rust-lang/rust/commit/3dce936753b90dcf80f25251034ccee7afd8ea71"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "b4d5a4f240d7f1e51acb5ac9bc08b9c1d5df7e70", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 128, "deletions": 4, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/056164ac1946898cb46ec075f1bd4c15dfbeff30/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056164ac1946898cb46ec075f1bd4c15dfbeff30/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=056164ac1946898cb46ec075f1bd4c15dfbeff30", "patch": "@@ -73,11 +73,64 @@ pub fn select2i<A: Selectable, B: Selectable>(a: &A, b: &B) ->\n \n // Streams - Make pipes a little easier in general.\n \n-proto! streamp (\n+/*proto! streamp (\n     Open:send<T: Owned> {\n         data(T) -> Open<T>\n     }\n-)\n+)*/\n+\n+#[allow(non_camel_case_types)]\n+pub mod streamp {\n+    priv use core::kinds::Owned;\n+\n+    pub fn init<T: Owned>() -> (client::Open<T>, server::Open<T>) {\n+        pub use core::pipes::HasBuffer;\n+        ::core::pipes::entangle()\n+    }\n+\n+    #[allow(non_camel_case_types)]\n+    pub enum Open<T> { pub data(T, server::Open<T>), }\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod client {\n+        priv use core::kinds::Owned;\n+\n+        #[allow(non_camel_case_types)]\n+        pub fn try_data<T: Owned>(pipe: Open<T>, x_0: T) ->\n+            ::core::option::Option<Open<T>> {\n+            {\n+                use super::data;\n+                let (c, s) = ::core::pipes::entangle();\n+                let message = data(x_0, s);\n+                if ::core::pipes::send(pipe, message) {\n+                    ::core::pipes::rt::make_some(c)\n+                } else { ::core::pipes::rt::make_none() }\n+            }\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub fn data<T: Owned>(pipe: Open<T>, x_0: T) -> Open<T> {\n+            {\n+                use super::data;\n+                let (c, s) = ::core::pipes::entangle();\n+                let message = data(x_0, s);\n+                ::core::pipes::send(pipe, message);\n+                c\n+            }\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub type Open<T> = ::core::pipes::SendPacket<super::Open<T>>;\n+    }\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod server {\n+        priv use core::kinds::Owned;\n+\n+        #[allow(non_camel_case_types)]\n+        pub type Open<T> = ::core::pipes::RecvPacket<super::Open<T>>;\n+    }\n+}\n \n #[doc(hidden)]\n struct Chan_<T> {\n@@ -364,11 +417,82 @@ impl<T: Owned, U: Owned,\n     }\n }\n \n-proto! oneshot (\n+/*proto! oneshot (\n     Oneshot:send<T:Owned> {\n         send(T) -> !\n     }\n-)\n+)*/\n+\n+#[allow(non_camel_case_types)]\n+pub mod oneshot {\n+    priv use core::kinds::Owned;\n+\n+    pub fn init<T: Owned>() -> (client::Oneshot<T>, server::Oneshot<T>) {\n+        pub use core::pipes::HasBuffer;\n+\n+        let buffer =\n+            ~::core::pipes::Buffer{\n+            header: ::core::pipes::BufferHeader(),\n+            data: __Buffer{\n+                Oneshot: ::core::pipes::mk_packet::<Oneshot<T>>()\n+            },\n+        };\n+        do ::core::pipes::entangle_buffer(buffer) |buffer, data| {\n+            {\n+                data.Oneshot.set_buffer(buffer);\n+                ::ptr::addr_of(&(data.Oneshot))\n+            }\n+        }\n+    }\n+    #[allow(non_camel_case_types)]\n+    pub enum Oneshot<T> { pub send(T), }\n+    #[allow(non_camel_case_types)]\n+    pub struct __Buffer<T> {\n+        Oneshot: ::core::pipes::Packet<Oneshot<T>>,\n+    }\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod client {\n+\n+        priv use core::kinds::Owned;\n+\n+        #[allow(non_camel_case_types)]\n+        pub fn try_send<T: Owned>(pipe: Oneshot<T>, x_0: T) ->\n+            ::core::option::Option<()> {\n+            {\n+                use super::send;\n+                let message = send(x_0);\n+                if ::core::pipes::send(pipe, message) {\n+                    ::core::pipes::rt::make_some(())\n+                } else { ::core::pipes::rt::make_none() }\n+            }\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub fn send<T: Owned>(pipe: Oneshot<T>, x_0: T) {\n+            {\n+                use super::send;\n+                let message = send(x_0);\n+                ::core::pipes::send(pipe, message);\n+            }\n+        }\n+\n+        #[allow(non_camel_case_types)]\n+        pub type Oneshot<T> =\n+            ::core::pipes::SendPacketBuffered<super::Oneshot<T>,\n+                                              super::__Buffer<T>>;\n+    }\n+\n+    #[allow(non_camel_case_types)]\n+    pub mod server {\n+        priv use core::kinds::Owned;\n+\n+        #[allow(non_camel_case_types)]\n+        pub type Oneshot<T> =\n+            ::core::pipes::RecvPacketBuffered<super::Oneshot<T>,\n+                                              super::__Buffer<T>>;\n+    }\n+}\n \n /// The send end of a oneshot pipe.\n pub type ChanOne<T> = oneshot::client::Oneshot<T>;"}]}