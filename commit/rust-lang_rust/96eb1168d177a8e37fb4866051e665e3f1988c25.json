{"sha": "96eb1168d177a8e37fb4866051e665e3f1988c25", "node_id": "C_kwDOAAsO6NoAKDk2ZWIxMTY4ZDE3N2E4ZTM3ZmI0ODY2MDUxZTY2NWUzZjE5ODhjMjU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-01T20:15:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-06T21:25:50Z"}, "message": "Introduce `ConstAllocation`.\n\nCurrently some `Allocation`s are interned, some are not, and it's very\nhard to tell at a use point which is which.\n\nThis commit introduces `ConstAllocation` for the known-interned ones,\nwhich makes the division much clearer. `ConstAllocation::inner()` is\nused to get the underlying `Allocation`.\n\nIn some places it's natural to use an `Allocation`, in some it's natural\nto use a `ConstAllocation`, and in some places there's no clear choice.\nI've tried to make things look as nice as possible, while generally\nfavouring `ConstAllocation`, which is the type that embodies more\ninformation. This does require quite a few calls to `inner()`.\n\nThe commit also tweaks how `PartialOrd` works for `Interned`. The\nprevious code was too clever by half, building on `T: Ord` to make the\ncode shorter. That caused problems with deriving `PartialOrd` and `Ord`\nfor `ConstAllocation`, so I changed it to build on `T: PartialOrd`,\nwhich is slightly more verbose but much more standard and avoided the\nproblems.", "tree": {"sha": "98e2d45dc687ad6b38d5013b3f0bfc35c8b0dfb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e2d45dc687ad6b38d5013b3f0bfc35c8b0dfb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96eb1168d177a8e37fb4866051e665e3f1988c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96eb1168d177a8e37fb4866051e665e3f1988c25", "html_url": "https://github.com/rust-lang/rust/commit/96eb1168d177a8e37fb4866051e665e3f1988c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96eb1168d177a8e37fb4866051e665e3f1988c25/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc6ecf6abf25c0ed3b9c44220323c38ebc4b54b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc6ecf6abf25c0ed3b9c44220323c38ebc4b54b", "html_url": "https://github.com/rust-lang/rust/commit/dcc6ecf6abf25c0ed3b9c44220323c38ebc4b54b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "42b9e692d3ff4cbcf5198ffd29f3a8ef49805ca4", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96eb1168d177a8e37fb4866051e665e3f1988c25/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96eb1168d177a8e37fb4866051e665e3f1988c25/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=96eb1168d177a8e37fb4866051e665e3f1988c25", "patch": "@@ -593,7 +593,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n         ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n             ty::Ref(_, tam, _) => match tam.kind() {\n                 ty::Str => String::from_utf8(\n-                    data.inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n+                    data.inner().inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n                         .to_owned(),\n                 )\n                 .ok()\n@@ -605,7 +605,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n         ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n                 ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n+                    Some(Constant::Int(len)) => alloc.inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n                         .to_owned()\n                         .chunks(4)\n@@ -619,7 +619,7 @@ pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n                     _ => None,\n                 },\n                 ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n+                    Some(Constant::Int(len)) => alloc.inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n                         .to_owned()\n                         .chunks(8)"}]}