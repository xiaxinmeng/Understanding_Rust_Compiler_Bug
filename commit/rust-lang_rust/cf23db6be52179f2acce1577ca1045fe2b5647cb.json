{"sha": "cf23db6be52179f2acce1577ca1045fe2b5647cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjNkYjZiZTUyMTc5ZjJhY2NlMTU3N2NhMTA0NWZlMmI1NjQ3Y2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-26T01:05:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-26T01:08:13Z"}, "message": "A little more guarding against wasted work in ty, typeck.", "tree": {"sha": "64437970a3dc27c3b626b752c7f044880519e471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64437970a3dc27c3b626b752c7f044880519e471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf23db6be52179f2acce1577ca1045fe2b5647cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf23db6be52179f2acce1577ca1045fe2b5647cb", "html_url": "https://github.com/rust-lang/rust/commit/cf23db6be52179f2acce1577ca1045fe2b5647cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf23db6be52179f2acce1577ca1045fe2b5647cb/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e13cd1fa451327a756efc0c23bbbdbb9e7e1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e13cd1fa451327a756efc0c23bbbdbb9e7e1ae", "html_url": "https://github.com/rust-lang/rust/commit/c4e13cd1fa451327a756efc0c23bbbdbb9e7e1ae"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "04bea450f7d99c3435c4e25f76f1a97256c6085c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf23db6be52179f2acce1577ca1045fe2b5647cb/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf23db6be52179f2acce1577ca1045fe2b5647cb/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=cf23db6be52179f2acce1577ca1045fe2b5647cb", "patch": "@@ -1629,6 +1629,10 @@ fn type_contains_vars(ctxt cx, t typ) -> bool {\n     ret typ.has_vars;\n }\n \n+fn type_contains_locals(ctxt cx, t typ) -> bool {\n+    ret typ.has_locals;\n+}\n+\n fn type_contains_params(ctxt cx, t typ) -> bool {\n     ret typ.has_params;\n }\n@@ -2606,6 +2610,10 @@ mod Unify {\n \n     // Performs type binding substitution.\n     fn substitute(@ctxt cx, vec[t] set_types, t typ) -> t {\n+        if (!type_contains_vars(cx.tcx, typ)) {\n+            ret typ;\n+        }\n+\n         fn substituter(@ctxt cx, vec[t] types, t typ) -> t {\n             alt (struct(cx.tcx, typ)) {\n                 case (ty_var(?id)) {\n@@ -2755,8 +2763,9 @@ fn substitute_type_params(ctxt cx, vec[t] bindings, t typ) -> t {\n \n // Converts type parameters in a type to bound type parameters.\n fn bind_params_in_type(ctxt cx, t typ) -> t {\n-    if (!type_contains_params(cx, typ)) { ret typ; }\n-\n+    if (!type_contains_params(cx, typ)) {\n+        ret typ;\n+    }\n     fn binder(ctxt cx, t typ) -> t {\n         alt (struct(cx, typ)) {\n             case (ty_bound_param(?index)) {"}, {"sha": "24aa8db04921030c3430cb08b56fbc429bd2b765", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf23db6be52179f2acce1577ca1045fe2b5647cb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf23db6be52179f2acce1577ca1045fe2b5647cb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cf23db6be52179f2acce1577ca1045fe2b5647cb", "patch": "@@ -96,6 +96,10 @@ fn substitute_ty_params(&@crate_ctxt ccx,\n         fail;\n     }\n \n+    if (!ty.type_contains_bound_params(ccx.tcx, typ)) {\n+        ret typ;\n+    }\n+\n     auto f = bind substituter(ccx, supplied, _);\n     ret ty.fold_ty(ccx.tcx, f, typ);\n }\n@@ -1532,6 +1536,10 @@ fn resolve_local_types_in_annotation(&option.t[@fn_ctxt] env, ast.ann ann)\n             ret ann;\n         }\n         case (ast.ann_type(?typ, ?tps, ?ts_info)) {\n+            auto tt = ann_to_type(ann);\n+            if (!ty.type_contains_locals(fcx.ccx.tcx, tt)) {\n+                ret ann;\n+            }\n             auto f = bind resolver(fcx, _);\n             auto new_type = ty.fold_ty(fcx.ccx.tcx, f, ann_to_type(ann));\n             ret ast.ann_type(new_type, tps, ts_info);"}]}