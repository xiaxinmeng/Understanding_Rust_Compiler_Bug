{"sha": "9f0e39ba16a319e5d30f16c579e3fa205824862b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMGUzOWJhMTZhMzE5ZTVkMzBmMTZjNTc5ZTNmYTIwNTgyNDg2MmI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-17T23:14:35Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-17T23:14:35Z"}, "message": "Rollup merge of #31565 - SDX2000:docfixes4, r=steveklabnik\n\nSee title and diff for more information.", "tree": {"sha": "6f968ce1561f45a6602a7e0d9539286294d18269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f968ce1561f45a6602a7e0d9539286294d18269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0e39ba16a319e5d30f16c579e3fa205824862b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0e39ba16a319e5d30f16c579e3fa205824862b", "html_url": "https://github.com/rust-lang/rust/commit/9f0e39ba16a319e5d30f16c579e3fa205824862b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0e39ba16a319e5d30f16c579e3fa205824862b/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2051a92134bae8b4c5fd3fdeab32c78b7bd74014", "url": "https://api.github.com/repos/rust-lang/rust/commits/2051a92134bae8b4c5fd3fdeab32c78b7bd74014", "html_url": "https://github.com/rust-lang/rust/commit/2051a92134bae8b4c5fd3fdeab32c78b7bd74014"}, {"sha": "1536195ce66dcf764782e1f36ced4aa5eefef321", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536195ce66dcf764782e1f36ced4aa5eefef321", "html_url": "https://github.com/rust-lang/rust/commit/1536195ce66dcf764782e1f36ced4aa5eefef321"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "8f15544b20b2b3a724f3425179bee934a6f94dc2", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9f0e39ba16a319e5d30f16c579e3fa205824862b/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f0e39ba16a319e5d30f16c579e3fa205824862b/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=9f0e39ba16a319e5d30f16c579e3fa205824862b", "patch": "@@ -124,21 +124,65 @@ special annotation here, it\u2019s the default thing that Rust does.\n ## The details\n \n The reason that we cannot use a binding after we\u2019ve moved it is subtle, but\n-important. When we write code like this:\n+important. \n+\n+When we write code like this:\n+\n+```rust\n+let x = 10;\n+```\n+\n+Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n+pattern representing the value of 10 to the allocated memory and binds the\n+variable name x to this memory region for future reference.\n+\n+Now consider the following code fragment:\n \n ```rust\n let v = vec![1, 2, 3];\n \n-let v2 = v;\n+let mut v2 = v;\n+```\n+\n+The first line allocates memory for the vector object `v` on the stack like\n+it does for `x` above. But in addition to that it also allocates some memory\n+on the [heap][sh] for the actual data (`[1, 2, 3]`). Rust copies the address\n+of this heap allocation to an internal pointer, which is part of the vector\n+object placed on the stack (let's call it the data pointer). \n+\n+It is worth pointing out (even at the risk of stating the obvious) that the\n+vector object and its data live in separate memory regions instead of being a\n+single contiguous memory allocation (due to reasons we will not go into at\n+this point of time). These two parts of the vector (the one on the stack and\n+one on the heap) must agree with each other at all times with regards to\n+things like the length, capacity etc.\n+\n+When we move `v` to `v2`, rust actually does a bitwise copy of the vector\n+object `v` into the stack allocation represented by `v2`. This shallow copy\n+does not create a copy of the heap allocation containing the actual data.\n+Which means that there would be two pointers to the contents of the vector\n+both pointing to the same memory allocation on the heap. It would violate\n+Rust\u2019s safety guarantees by introducing a data race if one could access both\n+`v` and `v2` at the same time. \n+\n+For example if we truncated the vector to just two elements through `v2`:\n+\n+```rust\n+# let v = vec![1, 2, 3];\n+# let mut v2 = v;\n+v2.truncate(2);\n ```\n \n-The first line allocates memory for the vector object, `v`, and for the data it\n-contains. The vector object is stored on the [stack][sh] and contains a pointer\n-to the content (`[1, 2, 3]`) stored on the [heap][sh]. When we move `v` to `v2`,\n-it creates a copy of that pointer, for `v2`. Which means that there would be two\n-pointers to the content of the vector on the heap. It would violate Rust\u2019s\n-safety guarantees by introducing a data race. Therefore, Rust forbids using `v`\n-after we\u2019ve done the move.\n+and `v1` were still accessible we'd end up with an invalid vector since `v1`\n+would not know that the heap data has been truncated. Now, the part of the\n+vector `v1` on the stack does not agree with the corresponding part on the\n+heap. `v1` still thinks there are three elements in the vector and will\n+happily let us access the non existent element `v1[2]` but as you might\n+already know this is a recipe for disaster. Especially because it might lead\n+to a segmentation fault or worse allow an unauthorized user to read from\n+memory to which they don't have access.\n+\n+This is why Rust forbids using `v` after we\u2019ve done the move.\n \n [sh]: the-stack-and-the-heap.html\n "}]}