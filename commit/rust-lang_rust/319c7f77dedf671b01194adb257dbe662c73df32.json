{"sha": "319c7f77dedf671b01194adb257dbe662c73df32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWM3Zjc3ZGVkZjY3MWIwMTE5NGFkYjI1N2RiZTY2MmM3M2RmMzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T14:01:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T14:01:18Z"}, "message": "fmt", "tree": {"sha": "4afbb1d2fdb53e3a9e3a5e5df73bc54e4ac68dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4afbb1d2fdb53e3a9e3a5e5df73bc54e4ac68dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319c7f77dedf671b01194adb257dbe662c73df32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319c7f77dedf671b01194adb257dbe662c73df32", "html_url": "https://github.com/rust-lang/rust/commit/319c7f77dedf671b01194adb257dbe662c73df32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319c7f77dedf671b01194adb257dbe662c73df32/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751b594cc843a28c660a662db1a822a759af9603", "url": "https://api.github.com/repos/rust-lang/rust/commits/751b594cc843a28c660a662db1a822a759af9603", "html_url": "https://github.com/rust-lang/rust/commit/751b594cc843a28c660a662db1a822a759af9603"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "ab836595a7acc57e39f6ebc5bc8aba4386212bad", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/319c7f77dedf671b01194adb257dbe662c73df32/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c7f77dedf671b01194adb257dbe662c73df32/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=319c7f77dedf671b01194adb257dbe662c73df32", "patch": "@@ -651,7 +651,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         &self.ecx\n     }\n \n-    fn read_discriminant(&mut self, op: OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, VariantIdx> {\n+    fn read_discriminant(\n+        &mut self,\n+        op: OpTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, VariantIdx> {\n         self.with_elem(PathElem::EnumTag, move |this| {\n             Ok(try_validation!(\n                 this.ecx.read_discriminant(op),\n@@ -662,7 +665,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n                 err_unsup!(ReadPointerAsBytes) =>\n                     { \"a pointer\" } expected { \"a valid enum tag\" },\n-            ).1)\n+            )\n+            .1)\n         })\n     }\n \n@@ -829,8 +833,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                                 throw_validation_failure!(self.path, { \"uninitialized bytes\" })\n                             }\n-                            err_unsup!(ReadPointerAsBytes) =>\n-                                throw_validation_failure!(self.path, { \"a pointer\" } expected { \"plain (non-pointer) bytes\" }),\n+                            err_unsup!(ReadPointerAsBytes) => {\n+                                throw_validation_failure!(self.path, { \"a pointer\" } expected { \"plain (non-pointer) bytes\" })\n+                            }\n \n                             // Propagate upwards (that will also check for unexpected errors).\n                             _ => return Err(err),"}]}