{"sha": "70db57cc5959654004dc8bd044dc65b712e79553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZGI1N2NjNTk1OTY1NDAwNGRjOGJkMDQ0ZGM2NWI3MTJlNzk1NTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-12T10:18:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-12T10:18:16Z"}, "message": "Merge #6839\n\n6839: Infer labeled blocks r=flodiebold a=Veykril\n\nThe test should cover all the interesting cases I believe(main part of it is copied from the loop label break test above it).\r\n\r\nThe test is indented to stay consistent with the rest of the tests in the file, I can dedent all the tests in the file in a follow up PR if desired.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b5753240aa626ccc30701f132e1538ad86462a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5753240aa626ccc30701f132e1538ad86462a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70db57cc5959654004dc8bd044dc65b712e79553", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf1JjoCRBK7hj4Ov3rIwAAdHIIAAPu8ZRLJwaDkqI/zO39g7IV\n+8JAoTds0TcEEycsL+bjN+aQ7nu1UL+biL4xNC/OTV486bCBRnwmC/Ao8lRBm17P\ngA2VItgvJueC7OmS+eLU7j+KST04T9gz+sucniDU+LnjrvwC/azd4LB5iGZsXAzG\nERB0RSn64N4XOrrIC4TLsOQBodDE3cDJ4TXZXNNNSwac89OeeWv7BLAi9k50GpFN\nPSyOvdyBViBA7ArOskNcjb6NOYdq6P4ldvku3payKScy98YtfiW1DG6RFK4VpYYN\nS2b1l8rbWg0JplYkB5Qxr/Wou2ZBy/aiJMBbHzrXq3QxFUkWokK0ZXbKePb9AaQ=\n=qFF/\n-----END PGP SIGNATURE-----\n", "payload": "tree b5753240aa626ccc30701f132e1538ad86462a7c\nparent 4998807039095cdfbc8725197dfcec1cc4671da9\nparent 378ec2841bf344c05fe6119c0013edeabcf33a35\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607768296 +0000\ncommitter GitHub <noreply@github.com> 1607768296 +0000\n\nMerge #6839\n\n6839: Infer labeled blocks r=flodiebold a=Veykril\n\nThe test should cover all the interesting cases I believe(main part of it is copied from the loop label break test above it).\r\n\r\nThe test is indented to stay consistent with the rest of the tests in the file, I can dedent all the tests in the file in a follow up PR if desired.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70db57cc5959654004dc8bd044dc65b712e79553", "html_url": "https://github.com/rust-lang/rust/commit/70db57cc5959654004dc8bd044dc65b712e79553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70db57cc5959654004dc8bd044dc65b712e79553/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4998807039095cdfbc8725197dfcec1cc4671da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4998807039095cdfbc8725197dfcec1cc4671da9", "html_url": "https://github.com/rust-lang/rust/commit/4998807039095cdfbc8725197dfcec1cc4671da9"}, {"sha": "378ec2841bf344c05fe6119c0013edeabcf33a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/378ec2841bf344c05fe6119c0013edeabcf33a35", "html_url": "https://github.com/rust-lang/rust/commit/378ec2841bf344c05fe6119c0013edeabcf33a35"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "d7ad198b34b979f84c52581cfa18c69884c81c83", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70db57cc5959654004dc8bd044dc65b712e79553/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db57cc5959654004dc8bd044dc65b712e79553/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=70db57cc5959654004dc8bd044dc65b712e79553", "patch": "@@ -137,10 +137,24 @@ impl<'a> InferenceContext<'a> {\n \n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n-            Expr::Block { statements, tail, .. } => {\n-                // FIXME: Breakable block inference\n-                self.infer_block(statements, *tail, expected)\n-            }\n+            Expr::Block { statements, tail, label } => match label {\n+                Some(_) => {\n+                    let break_ty = self.table.new_type_var();\n+                    self.breakables.push(BreakableContext {\n+                        may_break: false,\n+                        break_ty: break_ty.clone(),\n+                        label: label.clone(),\n+                    });\n+                    let ty = self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n+                    let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n+                    if ctxt.may_break {\n+                        ctxt.break_ty\n+                    } else {\n+                        ty\n+                    }\n+                }\n+                None => self.infer_block(statements, *tail, expected),\n+            },\n             Expr::Unsafe { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);"}, {"sha": "a569223b4b25d4561639278f8e12a94dc5186b19", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/70db57cc5959654004dc8bd044dc65b712e79553/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70db57cc5959654004dc8bd044dc65b712e79553/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=70db57cc5959654004dc8bd044dc65b712e79553", "patch": "@@ -2074,6 +2074,62 @@ fn infer_labelled_break_with_val() {\n     );\n }\n \n+#[test]\n+fn infer_labelled_block_break_with_val() {\n+    check_infer(\n+        r#\"\n+        fn default<T>() -> T { loop {} }\n+        fn foo() {\n+            let _x = 'outer: {\n+                let inner = 'inner: {\n+                    let i = default();\n+                    if (break 'outer i) {\n+                        break 'inner 5i8;\n+                    } else if true {\n+                        break 'inner 6;\n+                    }\n+                    break 'inner 'innermost: { 0 };\n+                    42\n+                };\n+                break 'outer inner < 8;\n+            };\n+        }\n+        \"#,\n+        expect![[r#\"\n+            21..32 '{ loop {} }': T\n+            23..30 'loop {}': !\n+            28..30 '{}': ()\n+            42..381 '{     ...  }; }': ()\n+            52..54 '_x': bool\n+            65..378 '{     ...     }': bool\n+            79..84 'inner': i8\n+            95..339 '{     ...     }': i8\n+            113..114 'i': bool\n+            117..124 'default': fn default<bool>() -> bool\n+            117..126 'default()': bool\n+            140..270 'if (br...     }': ()\n+            144..158 'break 'outer i': !\n+            157..158 'i': bool\n+            160..209 '{     ...     }': ()\n+            178..194 'break ...er 5i8': !\n+            191..194 '5i8': i8\n+            215..270 'if tru...     }': ()\n+            218..222 'true': bool\n+            223..270 '{     ...     }': ()\n+            241..255 'break 'inner 6': !\n+            254..255 '6': i8\n+            283..313 'break ... { 0 }': !\n+            308..313 '{ 0 }': i8\n+            310..311 '0': i8\n+            327..329 '42': i8\n+            349..371 'break ...er < 8': !\n+            362..367 'inner': i8\n+            362..371 'inner < 8': bool\n+            370..371 '8': i8\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn generic_default() {\n     check_infer("}]}