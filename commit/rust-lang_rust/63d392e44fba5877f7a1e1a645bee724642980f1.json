{"sha": "63d392e44fba5877f7a1e1a645bee724642980f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZDM5MmU0NGZiYTU4NzdmN2ExZTFhNjQ1YmVlNzI0NjQyOTgwZjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T07:16:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T07:16:24Z"}, "message": "Rollup merge of #73414 - lzutao:slice_strip, r=dtolnay\n\nImplement `slice_strip` feature\n\nTracking issue: #73413", "tree": {"sha": "54911f34846469f63b121965ed3796509d5c17c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54911f34846469f63b121965ed3796509d5c17c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d392e44fba5877f7a1e1a645bee724642980f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/YnJCRBK7hj4Ov3rIwAAdHIIAIwcOIL5q3r1QCBK+4KfBTXm\nQjRv6StgSRG6+0Qknx33CBHNOSwLWsTKDf0dkTDZjbyHgKQ7uX8dcHdtMGlvR3U3\nlTxIcpIIi+WfmBvtkqBEDCP4HwD1T9FKSeaR9nwhipCq2L1E0TpyPsYhXtUdAcnb\n7hZ5mB1/BQtHxv4SuI0yw8/U4A8kPfoxBodZH4HKTCGT5OTc8B8/3/ioH20JTkvX\nVOXjejdzpBHzcUzvREp7nVdjvstCVfatpzB7bzuwBTRkD7/mlbqGTYz+P3SAhorr\nnz67qP//84YRsTyEPNAPT7GmSmly5LlKfwZl+i7dyUF1001K3DTJxGQoGL/9je8=\n=zGoN\n-----END PGP SIGNATURE-----\n", "payload": "tree 54911f34846469f63b121965ed3796509d5c17c9\nparent 9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c\nparent cd9d8334bd75b33c2c84e6d221621bdfff33e1f3\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593674184 -0700\ncommitter GitHub <noreply@github.com> 1593674184 -0700\n\nRollup merge of #73414 - lzutao:slice_strip, r=dtolnay\n\nImplement `slice_strip` feature\n\nTracking issue: #73413\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d392e44fba5877f7a1e1a645bee724642980f1", "html_url": "https://github.com/rust-lang/rust/commit/63d392e44fba5877f7a1e1a645bee724642980f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d392e44fba5877f7a1e1a645bee724642980f1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "html_url": "https://github.com/rust-lang/rust/commit/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c"}, {"sha": "cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3", "html_url": "https://github.com/rust-lang/rust/commit/cd9d8334bd75b33c2c84e6d221621bdfff33e1f3"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "81c1cb295e5d714787502db5555946f0638fca12", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/63d392e44fba5877f7a1e1a645bee724642980f1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d392e44fba5877f7a1e1a645bee724642980f1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=63d392e44fba5877f7a1e1a645bee724642980f1", "patch": "@@ -1459,6 +1459,68 @@ impl<T> [T] {\n         m >= n && needle == &self[m - n..]\n     }\n \n+    /// Returns a subslice with the prefix removed.\n+    ///\n+    /// This method returns [`None`] if slice does not start with `prefix`.\n+    /// Also it returns the original slice if `prefix` is an empty slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_strip)]\n+    /// let v = &[10, 40, 30];\n+    /// assert_eq!(v.strip_prefix(&[10]), Some(&[40, 30][..]));\n+    /// assert_eq!(v.strip_prefix(&[10, 40]), Some(&[30][..]));\n+    /// assert_eq!(v.strip_prefix(&[50]), None);\n+    /// assert_eq!(v.strip_prefix(&[10, 50]), None);\n+    /// ```\n+    #[must_use = \"returns the subslice without modifying the original\"]\n+    #[unstable(feature = \"slice_strip\", issue = \"73413\")]\n+    pub fn strip_prefix(&self, prefix: &[T]) -> Option<&[T]>\n+    where\n+        T: PartialEq,\n+    {\n+        let n = prefix.len();\n+        if n <= self.len() {\n+            let (head, tail) = self.split_at(n);\n+            if head == prefix {\n+                return Some(tail);\n+            }\n+        }\n+        None\n+    }\n+\n+    /// Returns a subslice with the suffix removed.\n+    ///\n+    /// This method returns [`None`] if slice does not end with `suffix`.\n+    /// Also it returns the original slice if `suffix` is an empty slice\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_strip)]\n+    /// let v = &[10, 40, 30];\n+    /// assert_eq!(v.strip_suffix(&[30]), Some(&[10, 40][..]));\n+    /// assert_eq!(v.strip_suffix(&[40, 30]), Some(&[10][..]));\n+    /// assert_eq!(v.strip_suffix(&[50]), None);\n+    /// assert_eq!(v.strip_suffix(&[50, 30]), None);\n+    /// ```\n+    #[must_use = \"returns the subslice without modifying the original\"]\n+    #[unstable(feature = \"slice_strip\", issue = \"73413\")]\n+    pub fn strip_suffix(&self, suffix: &[T]) -> Option<&[T]>\n+    where\n+        T: PartialEq,\n+    {\n+        let (len, n) = (self.len(), suffix.len());\n+        if n <= len {\n+            let (head, tail) = self.split_at(len - n);\n+            if tail == suffix {\n+                return Some(head);\n+            }\n+        }\n+        None\n+    }\n+\n     /// Binary searches this sorted slice for a given element.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the"}]}