{"sha": "e2b1c69f7488b942360bb3c398a1c831510d1afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjFjNjlmNzQ4OGI5NDIzNjBiYjNjMzk4YTFjODMxNTEwZDFhZmM=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T05:57:10Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T06:08:59Z"}, "message": "Check patterns for type match recursively.", "tree": {"sha": "fa3e88ea5b1ad0ff4f5e3de535b6dc188a2f1a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa3e88ea5b1ad0ff4f5e3de535b6dc188a2f1a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b1c69f7488b942360bb3c398a1c831510d1afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b1c69f7488b942360bb3c398a1c831510d1afc", "html_url": "https://github.com/rust-lang/rust/commit/e2b1c69f7488b942360bb3c398a1c831510d1afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b1c69f7488b942360bb3c398a1c831510d1afc/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472317c00870c007f552cde1f3c490e04f29919a", "url": "https://api.github.com/repos/rust-lang/rust/commits/472317c00870c007f552cde1f3c490e04f29919a", "html_url": "https://github.com/rust-lang/rust/commit/472317c00870c007f552cde1f3c490e04f29919a"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "b9a69b79c81d61f66ffdabb3b922af43e42d6bda", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2b1c69f7488b942360bb3c398a1c831510d1afc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b1c69f7488b942360bb3c398a1c831510d1afc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=e2b1c69f7488b942360bb3c398a1c831510d1afc", "patch": "@@ -311,11 +311,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 // necessary.\n                 //\n                 // FIXME we should use the type checker for this.\n-                if pat_ty == match_expr_ty\n+                if (pat_ty == match_expr_ty\n                     || match_expr_ty\n                         .as_reference()\n                         .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n-                        .unwrap_or(false)\n+                        .unwrap_or(false))\n+                    && types_of_subpatterns_do_match(pat, &cx.body, &infer)\n                 {\n                     // If we had a NotUsefulMatchArm diagnostic, we could\n                     // check the usefulness of each pattern as we added it\n@@ -496,6 +497,21 @@ pub fn record_pattern_missing_fields(\n     Some((variant_def, missed_fields, exhaustive))\n }\n \n+fn types_of_subpatterns_do_match(pat: PatId, body: &Body, infer: &InferenceResult) -> bool {\n+    fn walk(pat: PatId, body: &Body, infer: &InferenceResult, has_type_mismatches: &mut bool) {\n+        match infer.type_mismatch_for_pat(pat) {\n+            Some(_) => *has_type_mismatches = true,\n+            None => {\n+                body[pat].walk_child_pats(|subpat| walk(subpat, body, infer, has_type_mismatches))\n+            }\n+        }\n+    }\n+\n+    let mut has_type_mismatches = false;\n+    walk(pat, body, infer, &mut has_type_mismatches);\n+    !has_type_mismatches\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::diagnostics::tests::check_diagnostics;"}, {"sha": "e8dd669bf6d979eb8decc2ac1c27d68ed0e5d8b2", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2b1c69f7488b942360bb3c398a1c831510d1afc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b1c69f7488b942360bb3c398a1c831510d1afc/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=e2b1c69f7488b942360bb3c398a1c831510d1afc", "patch": "@@ -1127,6 +1127,18 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn mismatched_types_in_or_patterns() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    match false { true | () => {} }\n+    match (false,) { (true | (),) => {} }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn malformed_match_arm_tuple_enum_missing_pattern() {\n         // We are testing to be sure we don't panic here when the match"}]}