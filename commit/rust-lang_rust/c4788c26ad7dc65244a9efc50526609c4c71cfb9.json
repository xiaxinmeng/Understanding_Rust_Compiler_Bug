{"sha": "c4788c26ad7dc65244a9efc50526609c4c71cfb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Nzg4YzI2YWQ3ZGM2NTI0NGE5ZWZjNTA1MjY2MDljNGM3MWNmYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-16T05:21:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-16T05:21:40Z"}, "message": "Auto merge of #34676 - aravind-pg:inner-attr, r=brson\n\nBetter error message for inner attribute following doc comment\n\nBefore it was always just \"an inner attribute is not permitted in this context\", whereas now we add a special case for when an inner attr follows an outer attr. If the outer attr is a doc comment, then the error is \"an inner attr is not permitted following a doc comment\", and otherwise it's \"an inner attr is not permitted following an outer attribute\". In all other cases it's still  \"an inner attribute is not permitted in this context\".\n\nNote that the public API and behaviour of `parse_attribute` is unchanged. Also, all new names are very open to bikeshedding -- they're arguably clunky.\n\nFixes #34516. cc @brson", "tree": {"sha": "7dc80138567b96189cbc10cd0672a392acf207eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc80138567b96189cbc10cd0672a392acf207eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4788c26ad7dc65244a9efc50526609c4c71cfb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4788c26ad7dc65244a9efc50526609c4c71cfb9", "html_url": "https://github.com/rust-lang/rust/commit/c4788c26ad7dc65244a9efc50526609c4c71cfb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4788c26ad7dc65244a9efc50526609c4c71cfb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145f0ec88caaae531d7ba0232c4ef39704a23af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/145f0ec88caaae531d7ba0232c4ef39704a23af2", "html_url": "https://github.com/rust-lang/rust/commit/145f0ec88caaae531d7ba0232c4ef39704a23af2"}, {"sha": "ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d", "html_url": "https://github.com/rust-lang/rust/commit/ff95ba3a8c1cc2cf9b1901a18ba73434f3380c0d"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "2ae3236cd5aa72f818d353cf3e6aa75c722cc255", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c4788c26ad7dc65244a9efc50526609c4c71cfb9", "patch": "@@ -18,23 +18,43 @@ use parse::token;\n use parse::parser::{Parser, TokenType};\n use ptr::P;\n \n+#[derive(PartialEq, Eq, Debug)]\n+enum InnerAttributeParsePolicy<'a> {\n+    Permitted,\n+    NotPermitted { reason: &'a str },\n+}\n+\n+const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &'static str = \"an inner attribute is not \\\n+                                                             permitted in this context\";\n+\n impl<'a> Parser<'a> {\n     /// Parse attributes that appear before an item\n     pub fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n+        let mut just_parsed_doc_comment = false;\n         loop {\n             debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n             match self.token {\n                 token::Pound => {\n-                    attrs.push(self.parse_attribute(false)?);\n+                    let inner_error_reason = if just_parsed_doc_comment {\n+                        \"an inner attribute is not permitted following an outer doc comment\"\n+                    } else if !attrs.is_empty() {\n+                        \"an inner attribute is not permitted following an outer attribute\"\n+                    } else {\n+                        DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n+                    };\n+                    let inner_parse_policy =\n+                        InnerAttributeParsePolicy::NotPermitted { reason: inner_error_reason };\n+                    attrs.push(self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?);\n+                    just_parsed_doc_comment = false;\n                 }\n                 token::DocComment(s) => {\n                     let attr = ::attr::mk_sugared_doc_attr(\n-                    attr::mk_attr_id(),\n-                    self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n-                    self.span.lo,\n-                    self.span.hi\n-                );\n+                        attr::mk_attr_id(),\n+                        self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n+                        self.span.lo,\n+                        self.span.hi\n+                    );\n                     if attr.node.style != ast::AttrStyle::Outer {\n                         let mut err = self.fatal(\"expected outer doc comment\");\n                         err.note(\"inner doc comments like this (starting with \\\n@@ -43,6 +63,7 @@ impl<'a> Parser<'a> {\n                     }\n                     attrs.push(attr);\n                     self.bump();\n+                    just_parsed_doc_comment = true;\n                 }\n                 _ => break,\n             }\n@@ -55,26 +76,46 @@ impl<'a> Parser<'a> {\n     /// If permit_inner is true, then a leading `!` indicates an inner\n     /// attribute\n     pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> {\n-        debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n+        debug!(\"parse_attribute: permit_inner={:?} self.token={:?}\",\n                permit_inner,\n                self.token);\n+        let inner_parse_policy = if permit_inner {\n+            InnerAttributeParsePolicy::Permitted\n+        } else {\n+            InnerAttributeParsePolicy::NotPermitted\n+                { reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG }\n+        };\n+        self.parse_attribute_with_inner_parse_policy(inner_parse_policy)\n+    }\n+\n+    /// The same as `parse_attribute`, except it takes in an `InnerAttributeParsePolicy`\n+    /// that prescribes how to handle inner attributes.\n+    fn parse_attribute_with_inner_parse_policy(&mut self,\n+                                               inner_parse_policy: InnerAttributeParsePolicy)\n+                                               -> PResult<'a, ast::Attribute> {\n+        debug!(\"parse_attribute_with_inner_parse_policy: inner_parse_policy={:?} self.token={:?}\",\n+               inner_parse_policy,\n+               self.token);\n         let (span, value, mut style) = match self.token {\n             token::Pound => {\n                 let lo = self.span.lo;\n                 self.bump();\n \n-                if permit_inner {\n+                if inner_parse_policy == InnerAttributeParsePolicy::Permitted {\n                     self.expected_tokens.push(TokenType::Token(token::Not));\n                 }\n                 let style = if self.token == token::Not {\n                     self.bump();\n-                    if !permit_inner {\n+                    if let InnerAttributeParsePolicy::NotPermitted { reason } = inner_parse_policy\n+                    {\n                         let span = self.span;\n                         self.diagnostic()\n-                            .struct_span_err(span,\n-                                             \"an inner attribute is not permitted in this context\")\n-                            .help(\"place inner attribute at the top of the module or \\\n-                                   block\")\n+                            .struct_span_err(span, reason)\n+                            .note(\"inner attributes and doc comments, like `#![no_std]` or \\\n+                                   `//! My crate`, annotate the item enclosing them, and are \\\n+                                   usually found at the beginning of source files. Outer \\\n+                                   attributes and doc comments, like `#[test]` and\n+                                   `/// My function`, annotate the item following them.\")\n                             .emit()\n                     }\n                     ast::AttrStyle::Inner\n@@ -95,7 +136,8 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        if permit_inner && self.token == token::Semi {\n+        if inner_parse_policy == InnerAttributeParsePolicy::Permitted &&\n+           self.token == token::Semi {\n             self.bump();\n             self.span_warn(span,\n                            \"this inner attribute syntax is deprecated. The new syntax is \\"}, {"sha": "ed8342d9f5aaf80857eff924305ecac02769c589", "filename": "src/test/parse-fail/inner-attr-after-doc-comment.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Finner-attr-after-doc-comment.rs?ref=c4788c26ad7dc65244a9efc50526609c4c71cfb9", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+#![feature(lang_items)]\n+/**\n+ * My module\n+ */\n+\n+#![recursion_limit=\"100\"]\n+//~^ ERROR an inner attribute is not permitted following an outer doc comment\n+fn main() {}"}, {"sha": "8cebda6644565c8b0d79f879d77d464a8aa05729", "filename": "src/test/parse-fail/inner-attr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Ftest%2Fparse-fail%2Finner-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4788c26ad7dc65244a9efc50526609c4c71cfb9/src%2Ftest%2Fparse-fail%2Finner-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Finner-attr.rs?ref=c4788c26ad7dc65244a9efc50526609c4c71cfb9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+#[feature(lang_items)]\n+\n+#![recursion_limit=\"100\"] //~ ERROR an inner attribute is not permitted following an outer attribute\n+fn main() {}"}]}