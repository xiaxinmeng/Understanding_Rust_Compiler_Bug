{"sha": "12fe0e4ffe9839a80e709eae3f865bf2036758ef", "node_id": "C_kwDOAAsO6NoAKDEyZmUwZTRmZmU5ODM5YTgwZTcwOWVhZTNmODY1YmYyMDM2NzU4ZWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-30T14:37:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T14:37:43Z"}, "message": "Merge #10397\n\n10397: fix: fix format string highlighting for `panic!` and `assert!` r=jonas-schievink a=jonas-schievink\n\npart of https://github.com/rust-analyzer/rust-analyzer/issues/10394\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "0dfd2f07f7b04e39fae556baa236654179df96a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dfd2f07f7b04e39fae556baa236654179df96a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12fe0e4ffe9839a80e709eae3f865bf2036758ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVcu3CRBK7hj4Ov3rIwAAinEIABolDTDx3ZSAWypwfaCWcI9S\n/6H/TMLX5NXaj48/qSfphatu3avaVaRHVxxalwq2gN4gSxAzAg4FMi1OT2gxvcSV\naMNvPN6VDU4IIWPNNS3z4/+K0enUtRlJvFbkjKYCXZcmf7YqRj06bUBIduZwz3Av\nD1RQhwAHtMwNgbRMybge+ne9uTFwW6v6q+Hefhe/y78hHmvfuVmjmAYX6V1ibo34\nHcXdOtmIcmksMZiC7WgijZPWYr5MkRCmLH1PAkxcPZkNjp3Vh/rut5MbjVOk3p9B\ny2u75QlAGGbXyCTXgj0fcbr7+p6EnT9KrdgrcQGWNgDmcrgj8d1ra3US7N+95BU=\n=LNB1\n-----END PGP SIGNATURE-----\n", "payload": "tree 0dfd2f07f7b04e39fae556baa236654179df96a8\nparent 161a5e872415af20c175936779a101ad503337c6\nparent 375a0ff785a296cee66e9a431a8b1671809b579a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633012663 +0000\ncommitter GitHub <noreply@github.com> 1633012663 +0000\n\nMerge #10397\n\n10397: fix: fix format string highlighting for `panic!` and `assert!` r=jonas-schievink a=jonas-schievink\n\npart of https://github.com/rust-analyzer/rust-analyzer/issues/10394\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12fe0e4ffe9839a80e709eae3f865bf2036758ef", "html_url": "https://github.com/rust-lang/rust/commit/12fe0e4ffe9839a80e709eae3f865bf2036758ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12fe0e4ffe9839a80e709eae3f865bf2036758ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "161a5e872415af20c175936779a101ad503337c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/161a5e872415af20c175936779a101ad503337c6", "html_url": "https://github.com/rust-lang/rust/commit/161a5e872415af20c175936779a101ad503337c6"}, {"sha": "375a0ff785a296cee66e9a431a8b1671809b579a", "url": "https://api.github.com/repos/rust-lang/rust/commits/375a0ff785a296cee66e9a431a8b1671809b579a", "html_url": "https://github.com/rust-lang/rust/commit/375a0ff785a296cee66e9a431a8b1671809b579a"}], "stats": {"total": 109, "additions": 91, "deletions": 18}, "files": [{"sha": "e14811834826f658c32a39fade2fd5e82342c1fd", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=12fe0e4ffe9839a80e709eae3f865bf2036758ef", "patch": "@@ -180,22 +180,29 @@ fn assert_expand(\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n-    // A hacky implementation for goto def and hover\n-    // We expand `assert!(cond, arg1, arg2)` to\n-    // ```\n-    // {(cond, &(arg1), &(arg2));}\n-    // ```,\n-    // which is wrong but useful.\n-\n+    let krate = tt::Ident { text: \"$crate\".into(), id: tt::TokenId::unspecified() };\n     let args = parse_exprs_with_sep(tt, ',');\n-\n-    let arg_tts = args.into_iter().flat_map(|arg| {\n-        quote! { &(#arg), }\n-    }.token_trees);\n-\n-    let expanded = quote! {\n-        { { (##arg_tts); } }\n+    let expanded = match &*args {\n+        [cond, panic_args @ ..] => {\n+            let comma = tt::Subtree {\n+                delimiter: None,\n+                token_trees: vec![tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct {\n+                    char: ',',\n+                    spacing: tt::Spacing::Alone,\n+                    id: tt::TokenId::unspecified(),\n+                }))],\n+            };\n+            let cond = cond.clone();\n+            let panic_args = itertools::Itertools::intersperse(panic_args.iter().cloned(), comma);\n+            quote! {{\n+                if !#cond {\n+                    #krate::panic!(##panic_args);\n+                }\n+            }}\n+        }\n+        [] => quote! {{}},\n     };\n+\n     ExpandResult::ok(expanded)\n }\n \n@@ -731,7 +738,7 @@ mod tests {\n             }\n             assert!(true, \"{} {:?}\", arg1(a, b, c), arg2);\n             \"#,\n-            expect![[\"{{(&(true), &(\\\"{} {:?}\\\"), &(arg1(a,b,c)), &(arg2),);}}\"]],\n+            expect![[r#\"{if!true{$crate::panic!(\"{} {:?}\",arg1(a,b,c),arg2);}}\"#]],\n         );\n     }\n "}, {"sha": "ce24311115c7e7ab8ea3bdf0b75d0aa7898c22ee", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=12fe0e4ffe9839a80e709eae3f865bf2036758ef", "patch": "@@ -31,14 +31,16 @@ fn is_format_string(string: &ast::String) -> Option<()> {\n     let parent = string.syntax().parent()?;\n \n     let name = parent.parent().and_then(ast::MacroCall::cast)?.path()?.segment()?.name_ref()?;\n-    if !matches!(name.text().as_str(), \"format_args\" | \"format_args_nl\") {\n+    if !matches!(\n+        name.text().as_str(),\n+        \"format_args\" | \"format_args_nl\" | \"const_format_args\" | \"panic_2015\" | \"panic_2021\"\n+    ) {\n         return None;\n     }\n \n     let first_literal = parent\n         .children_with_tokens()\n-        .filter_map(|it| it.as_token().cloned().and_then(ast::String::cast))\n-        .next()?;\n+        .find_map(|it| it.as_token().cloned().and_then(ast::String::cast))?;\n     if &first_literal != string {\n         return None;\n     }"}, {"sha": "2992755dede8412c81783e679e176e66606f42bd", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=12fe0e4ffe9839a80e709eae3f865bf2036758ef", "patch": "@@ -51,6 +51,34 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>args<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">panic</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">macro</span> <span class=\"macro declaration\">panic_2015</span> <span class=\"brace\">{</span>\n+        <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"string_literal\">\"explicit panic\"</span><span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>literal <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"comment\">// Use `panic_str` instead of `panic_display::&lt;&str&gt;` for non_fmt_panic lint.</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_str<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"comment\">// Special-case the single-argument case for const_panic.</span>\n+        <span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{}\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_display<span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_fmt<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>const_format_args<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">panic</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">assert</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n@@ -100,4 +128,8 @@\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> thingy<span class=\"comma\">,</span> n2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> asdasd\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "d5018f23276de205457d84f3f3365497f6fb2de7", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fe0e4ffe9839a80e709eae3f865bf2036758ef/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=12fe0e4ffe9839a80e709eae3f865bf2036758ef", "patch": "@@ -446,6 +446,34 @@ macro_rules! format_args_nl {\n     ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n }\n \n+mod panic {\n+    pub macro panic_2015 {\n+        () => (\n+            $crate::panicking::panic(\"explicit panic\")\n+        ),\n+        ($msg:literal $(,)?) => (\n+            $crate::panicking::panic($msg)\n+        ),\n+        // Use `panic_str` instead of `panic_display::<&str>` for non_fmt_panic lint.\n+        ($msg:expr $(,)?) => (\n+            $crate::panicking::panic_str($msg)\n+        ),\n+        // Special-case the single-argument case for const_panic.\n+        (\"{}\", $arg:expr $(,)?) => (\n+            $crate::panicking::panic_display(&$arg)\n+        ),\n+        ($fmt:expr, $($arg:tt)+) => (\n+            $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n+        ),\n+    }\n+}\n+\n+#[rustc_builtin_macro(std_panic)]\n+#[macro_export]\n+macro_rules! panic {}\n+#[rustc_builtin_macro]\n+macro_rules! assert {}\n+\n fn main() {\n     // from https://doc.rust-lang.org/std/fmt/index.html\n     println!(\"Hello\");                 // => \"Hello\"\n@@ -495,6 +523,10 @@ fn main() {\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n \n     println!(\"{:x?} {} \", thingy, n2);\n+    panic!(\"{}\", 0);\n+    panic!(\"more {}\", 1);\n+    assert!(true, \"{}\", 1);\n+    assert!(true, \"{} asdasd\", 1);\n }\"#\n         .trim(),\n         expect_file![\"./test_data/highlight_strings.html\"],"}]}