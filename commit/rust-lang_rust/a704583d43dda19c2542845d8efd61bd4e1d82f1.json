{"sha": "a704583d43dda19c2542845d8efd61bd4e1d82f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MDQ1ODNkNDNkZGExOWMyNTQyODQ1ZDhlZmQ2MWJkNGUxZDgyZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-07T00:51:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-07T00:51:42Z"}, "message": "Auto merge of #47156 - petrochenkov:extpath, r=nikomatsakis\n\nSupport `extern` in paths\n\nImplement the primary alternative to https://github.com/rust-lang/rust/pull/46613 + https://github.com/rust-lang/rust/pull/45771, achieving the same effect without requiring changes to other imports.\nBoth need to be experimentally evaluated before making further progress.\n\nThe PR also adds docs for all these related features into the unstable book.\n\ncc https://github.com/rust-lang/rust/issues/44660\nr? @nikomatsakis", "tree": {"sha": "7f934100750e46fe9662f968413c5a99afd181a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f934100750e46fe9662f968413c5a99afd181a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a704583d43dda19c2542845d8efd61bd4e1d82f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a704583d43dda19c2542845d8efd61bd4e1d82f1", "html_url": "https://github.com/rust-lang/rust/commit/a704583d43dda19c2542845d8efd61bd4e1d82f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a704583d43dda19c2542845d8efd61bd4e1d82f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6828cf90146c7fefc4ba4f16dffe75f763f2d910", "url": "https://api.github.com/repos/rust-lang/rust/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "html_url": "https://github.com/rust-lang/rust/commit/6828cf90146c7fefc4ba4f16dffe75f763f2d910"}, {"sha": "ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b131144bc0d3d7814c9967e47a8d4e834caa5", "html_url": "https://github.com/rust-lang/rust/commit/ef2b131144bc0d3d7814c9967e47a8d4e834caa5"}], "stats": {"total": 348, "additions": 322, "deletions": 26}, "files": [{"sha": "f1656993e87a5f12c159680a43592468b62a56a2", "filename": "src/doc/unstable-book/src/language-features/crate_in_paths.md", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate_in_paths.md?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,54 @@\n+# `crate_in_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `crate_in_paths` feature allows to explicitly refer to the crate root in absolute paths\n+using keyword `crate`.\n+\n+`crate` can be used *only* in absolute paths, i.e. either in `::crate::a::b::c` form or in `use`\n+items where the starting `::` is added implicitly.  \n+Paths like `crate::a::b::c` are not accepted currently.\n+\n+This feature is required in `feature(extern_absolute_paths)` mode to refer to any absolute path\n+in the local crate (absolute paths refer to extern crates by default in that mode), but can be\n+used without `feature(extern_absolute_paths)` as well.\n+\n+```rust\n+#![feature(crate_in_paths)]\n+\n+// Imports, `::` is added implicitly\n+use crate::m::f;\n+use crate as root;\n+\n+mod m {\n+    pub fn f() -> u8 { 1 }\n+    pub fn g() -> u8 { 2 }\n+    pub fn h() -> u8 { 3 }\n+\n+    // OK, visibilities implicitly add starting `::` as well, like imports\n+    pub(in crate::m) struct S;\n+}\n+\n+mod n\n+{\n+    use crate::m::f;\n+    use crate as root;\n+    pub fn check() {\n+        assert_eq!(f(), 1);\n+        // `::` is required in non-import paths\n+        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(root::m::h(), 3);\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(f(), 1);\n+    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(root::m::h(), 3);\n+    n::check();\n+}\n+```"}, {"sha": "f45c5053e8dbcd84b7a8a215b2f8439b1c1ba5f5", "filename": "src/doc/unstable-book/src/language-features/extern_absolute_paths.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_absolute_paths.md?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,43 @@\n+# `extern_absolute_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `extern_absolute_paths` feature enables mode allowing to refer to names from other crates\n+\"inline\", without introducing `extern crate` items, using absolute paths like `::my_crate::a::b`.\n+\n+`::my_crate::a::b` will resolve to path `a::b` in crate `my_crate`.\n+\n+`feature(crate_in_paths)` can be used in `feature(extern_absolute_paths)` mode for referring\n+to absolute paths in the local crate (`::crate::a::b`).\n+\n+`feature(extern_in_paths)` provides the same effect by using keyword `extern` to refer to\n+paths from other crates (`extern::my_crate::a::b`).\n+\n+```rust,ignore\n+#![feature(extern_absolute_paths)]\n+\n+// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n+// options, or standard Rust distribution, or some other means.\n+\n+use xcrate::Z;\n+\n+fn f() {\n+    use xcrate;\n+    use xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = ::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+```"}, {"sha": "3ae6cc29df0b871537102122fdf06448eea5d132", "filename": "src/doc/unstable-book/src/language-features/extern_in_paths.md", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern_in_paths.md?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,40 @@\n+# `extern_in_paths`\n+\n+The tracking issue for this feature is: [#44660]\n+\n+[#44660]: https://github.com/rust-lang/rust/issues/44660\n+\n+------------------------\n+\n+The `extern_in_paths` feature allows to refer to names from other crates \"inline\", without\n+introducing `extern crate` items, using keyword `extern`.\n+\n+For example, `extern::my_crat::a::b` will resolve to path `a::b` in crate `my_crate`.\n+\n+`feature(extern_absolute_paths)` mode provides the same effect by resolving absolute paths like\n+`::my_crate::a::b` to paths from extern crates by default.\n+\n+```rust,ignore\n+#![feature(extern_in_paths)]\n+\n+// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n+// options, or standard Rust distribution, or some other means.\n+\n+use extern::xcrate::Z;\n+\n+fn f() {\n+    use extern::xcrate;\n+    use extern::xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = extern::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+```"}, {"sha": "34e32dc9b640f0e6ce457a91b6c47ce460e70cce", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -2982,6 +2982,8 @@ impl<'a> Resolver<'a> {\n                     let msg = \"There are too many initial `super`s.\".to_string();\n                     return PathResult::Failed(ident.span, msg, false);\n                 }\n+            } else if i == 0 && ns == TypeNS && name == keywords::Extern.name() {\n+                continue;\n             }\n             allow_super = false;\n \n@@ -2996,16 +2998,19 @@ impl<'a> Resolver<'a> {\n                     // `$crate::a::b`\n                     module = Some(self.resolve_crate_root(ident.node.ctxt));\n                     continue\n-                } else if i == 1 && self.session.features.borrow().extern_absolute_paths &&\n-                                    path[0].node.name == keywords::CrateRoot.name() &&\n-                                    !token::Ident(ident.node).is_path_segment_keyword() {\n-                    // `::extern_crate::a::b`\n-                    let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n-                    let crate_root =\n-                        self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                    self.populate_module_if_necessary(crate_root);\n-                    module = Some(crate_root);\n-                    continue\n+                } else if i == 1 && !token::Ident(ident.node).is_path_segment_keyword() {\n+                    let prev_name = path[0].node.name;\n+                    if prev_name == keywords::Extern.name() ||\n+                       prev_name == keywords::CrateRoot.name() &&\n+                       self.session.features.borrow().extern_absolute_paths {\n+                        // `::extern_crate::a::b`\n+                        let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n+                        let crate_root =\n+                            self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                        self.populate_module_if_necessary(crate_root);\n+                        module = Some(crate_root);\n+                        continue\n+                    }\n                 }\n             }\n \n@@ -3015,6 +3020,7 @@ impl<'a> Resolver<'a> {\n                name == keywords::SelfValue.name() && i != 0 ||\n                name == keywords::SelfType.name() && i != 0 ||\n                name == keywords::Super.name() && i != 0 ||\n+               name == keywords::Extern.name() && i != 0 ||\n                name == keywords::Crate.name() && i != 1 &&\n                     path[0].node.name != keywords::CrateRoot.name() {\n                 let name_str = if name == keywords::CrateRoot.name() {"}, {"sha": "98cbb6609085cf34fd4c638d6e85c9d391999121", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -604,26 +604,28 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.current_module = directive.parent;\n         let ImportDirective { ref module_path, span, .. } = *directive;\n \n-        // Extern crate mode for absolute paths needs some\n-        // special support for single-segment imports.\n-        let extern_absolute_paths = self.session.features.borrow().extern_absolute_paths;\n-        if module_path.len() == 1 && module_path[0].node.name == keywords::CrateRoot.name() {\n+        // FIXME: Last path segment is treated specially in import resolution, so extern crate\n+        // mode for absolute paths needs some special support for single-segment imports.\n+        if module_path.len() == 1 && (module_path[0].node.name == keywords::CrateRoot.name() ||\n+                                      module_path[0].node.name == keywords::Extern.name()) {\n+            let is_extern = module_path[0].node.name == keywords::Extern.name() ||\n+                            self.session.features.borrow().extern_absolute_paths;\n             match directive.subclass {\n-                GlobImport { .. } if extern_absolute_paths => {\n+                GlobImport { .. } if is_extern => {\n                     return Some((directive.span,\n                                  \"cannot glob-import all possible crates\".to_string()));\n                 }\n                 SingleImport { source, target, .. } => {\n-                    let crate_root = if source.name == keywords::Crate.name() {\n+                    let crate_root = if source.name == keywords::Crate.name() &&\n+                                        module_path[0].node.name != keywords::Extern.name() {\n                         if target.name == keywords::Crate.name() {\n                             return Some((directive.span,\n                                          \"crate root imports need to be explicitly named: \\\n                                           `use crate as name;`\".to_string()));\n                         } else {\n                             Some(self.resolve_crate_root(source.ctxt.modern()))\n                         }\n-                    } else if extern_absolute_paths &&\n-                              !token::Ident(source).is_path_segment_keyword() {\n+                    } else if is_extern && !token::Ident(source).is_path_segment_keyword() {\n                         let crate_id =\n                             self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n                         let crate_root ="}, {"sha": "08eec0f9117f8723ec32864fa81ce00a1d72db36", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -450,6 +450,9 @@ declare_features! (\n \n     // Allows use of the :lifetime macro fragment specifier\n     (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n+\n+    // `extern` in paths\n+    (active, extern_in_paths, \"1.23.0\", Some(44660)),\n );\n \n declare_features! (\n@@ -1790,6 +1793,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             if segment.identifier.name == keywords::Crate.name() {\n                 gate_feature_post!(&self, crate_in_paths, segment.span,\n                                    \"`crate` in paths is experimental\");\n+            } else if segment.identifier.name == keywords::Extern.name() {\n+                gate_feature_post!(&self, extern_in_paths, segment.span,\n+                                   \"`extern` in paths is experimental\");\n             }\n         }\n "}, {"sha": "e7c648d5e37d3f882c3a48847bc3d323e080fbf6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -1387,7 +1387,7 @@ impl<'a> Parser<'a> {\n                 None\n             };\n             (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n-        } else if self.token.is_path_start() {\n+        } else if self.token.is_path_start() && !self.is_extern_non_path() {\n             // trait item macro.\n             // code copied from parse_macro_use_or_failure... abstraction!\n             let prev_span = self.prev_span;\n@@ -4037,6 +4037,10 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n+    fn is_extern_non_path(&self) -> bool {\n+        self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n+    }\n+\n     fn eat_auto_trait(&mut self) -> bool {\n         if self.token.is_keyword(keywords::Auto)\n             && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n@@ -4152,10 +4156,12 @@ impl<'a> Parser<'a> {\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n         // `crate::b::c` - path, `crate struct S;` - not a path.\n+        // `extern::b::c` - path, `extern crate c;` - not a path.\n         } else if self.token.is_path_start() &&\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n-                  !self.is_crate_vis() {\n+                  !self.is_crate_vis() &&\n+                  !self.is_extern_non_path() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -5236,7 +5242,7 @@ impl<'a> Parser<'a> {\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics,\n                              ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n-        if self.token.is_path_start() {\n+        if self.token.is_path_start() && !self.is_extern_non_path() {\n             // Method macro.\n \n             let prev_span = self.prev_span;\n@@ -6238,7 +6244,8 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        if self.eat_keyword(keywords::Extern) {\n+        if self.check_keyword(keywords::Extern) && self.is_extern_non_path() {\n+            self.bump(); // `extern`\n             if self.eat_keyword(keywords::Crate) {\n                 return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n             }"}, {"sha": "2be93c07d5ad771774fd5beaa727d9a284db04d1", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -359,6 +359,7 @@ impl Token {\n             Some(id) => id.name == keywords::Super.name() ||\n                         id.name == keywords::SelfValue.name() ||\n                         id.name == keywords::SelfType.name() ||\n+                        id.name == keywords::Extern.name() ||\n                         id.name == keywords::Crate.name() ||\n                         id.name == keywords::DollarCrate.name(),\n             None => false,"}, {"sha": "e5927d09b41653b12ccc877a9a1929f95ec8de10", "filename": "src/test/compile-fail/keyword-extern-as-identifier.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-extern-as-identifier.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n-// This file was auto-generated using 'src/etc/generate-keyword-tests.py extern'\n+#![feature(extern_in_paths)]\n \n fn main() {\n-    let extern = \"foo\"; //~ error: expected pattern, found keyword `extern`\n+    let extern = 0; //~ ERROR expected unit struct/variant or constant, found module `extern`\n }", "previous_filename": "src/test/parse-fail/keyword-extern-as-identifier.rs"}, {"sha": "c3da4a518720d4e8ccdc8efcfe7e4b254e6d93da", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/auxiliary/xcrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Debug)]\n+pub struct S;\n+\n+#[derive(Debug)]\n+pub struct Z;"}, {"sha": "7eba02ed444bb89417aaad0c4c58da9605e32b81", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+\n+fn main() {}"}, {"sha": "4d09a05253ec2c338abbdd9381c86d68a3a0e699", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+fn main() {\n+    let s = extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+}"}, {"sha": "402d294b2e324d98dea61b313dc39b72409cc941", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/non-existent-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::ycrate; //~ ERROR can't find crate for `ycrate`\n+\n+fn main() {}"}, {"sha": "ebc42aa9d4492f8e7fe7b66fd249f60f631ae0f3", "filename": "src/test/compile-fail/rfc-2126-extern-in-paths/single-segment.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(extern_in_paths)]\n+\n+use extern; //~ ERROR unresolved import `extern`\n+            //~^ NOTE no `extern` in the root\n+use extern::*; //~ ERROR unresolved import `extern::*`\n+               //~^ NOTE cannot glob-import all possible crates\n+\n+fn main() {\n+    let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n+                            //~^ NOTE not a value\n+}"}, {"sha": "52b52b23c874abf2a67f5a68e1603c54fd8a886c", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/extern.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fextern.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::xcrate::Z;\n+\n+fn f() {\n+    use extern::xcrate;\n+    use extern::xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = extern::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}"}, {"sha": "3c01fcf68331bcb49c0f10d8fdee21d83c8538fa", "filename": "src/test/ui/feature-gate-extern_in_paths.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.rs?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+fn main() {\n+    let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n+}"}, {"sha": "ac68e79e1ca0f82bef11511a051f2460a3ee0e06", "filename": "src/test/ui/feature-gate-extern_in_paths.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a704583d43dda19c2542845d8efd61bd4e1d82f1/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr?ref=a704583d43dda19c2542845d8efd61bd4e1d82f1", "patch": "@@ -0,0 +1,10 @@\n+error: `extern` in paths is experimental (see issue #44660)\n+  --> $DIR/feature-gate-extern_in_paths.rs:14:13\n+   |\n+14 |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n+   |             ^^^^^^\n+   |\n+   = help: add #![feature(extern_in_paths)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}