{"sha": "1cac693bc767e6c5648baeab1164feb4aea6ae30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWM2OTNiYzc2N2U2YzU2NDhiYWVhYjExNjRmZWI0YWVhNmFlMzA=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-17T19:12:44Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-17T19:12:44Z"}, "message": "Lint on folds implementing .all, .sum and .product", "tree": {"sha": "84399de30bdcda055e878a9aef27062a899f0ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84399de30bdcda055e878a9aef27062a899f0ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cac693bc767e6c5648baeab1164feb4aea6ae30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cac693bc767e6c5648baeab1164feb4aea6ae30", "html_url": "https://github.com/rust-lang/rust/commit/1cac693bc767e6c5648baeab1164feb4aea6ae30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cac693bc767e6c5648baeab1164feb4aea6ae30/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "html_url": "https://github.com/rust-lang/rust/commit/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3"}], "stats": {"total": 164, "additions": 111, "deletions": 53}, "files": [{"sha": "6eb48a1bc2927e473fc9307f778ab52f0af2e26c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 60, "deletions": 33, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1cac693bc767e6c5648baeab1164feb4aea6ae30/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cac693bc767e6c5648baeab1164feb4aea6ae30/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=1cac693bc767e6c5648baeab1164feb4aea6ae30", "patch": "@@ -1134,47 +1134,74 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n     assert!(fold_args.len() == 3,\n         \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n \n-    if_chain! {\n-        // Check if the initial value for the fold is the literal `false`\n-        if let hir::ExprLit(ref lit) = fold_args[1].node;\n-        if lit.node == ast::LitKind::Bool(false);\n+    fn check_fold_with_op(\n+        cx: &LateContext,\n+        fold_args: &[hir::Expr],\n+        op: hir::BinOp_,\n+        replacement_method_name: &str) {\n \n-        // Extract the body of the closure passed to fold\n-        if let hir::ExprClosure(_, _, body_id, _, _) = fold_args[2].node;\n-        let closure_body = cx.tcx.hir.body(body_id);\n-        let closure_expr = remove_blocks(&closure_body.value);\n+        if_chain! {\n+            // Extract the body of the closure passed to fold\n+            if let hir::ExprClosure(_, _, body_id, _, _) = fold_args[2].node;\n+            let closure_body = cx.tcx.hir.body(body_id);\n+            let closure_expr = remove_blocks(&closure_body.value);\n \n-        // Extract the names of the two arguments to the closure\n-        if let Some(first_arg_ident) = get_arg_name(&closure_body.arguments[0].pat);\n-        if let Some(second_arg_ident) = get_arg_name(&closure_body.arguments[1].pat);\n+            // Check if the closure body is of the form `acc <op> some_expr(x)`\n+            if let hir::ExprBinary(ref bin_op, ref left_expr, ref right_expr) = closure_expr.node;\n+            if bin_op.node == op;\n \n-        // Check if the closure body is of the form `acc || some_expr(x)`\n-        if let hir::ExprBinary(ref bin_op, ref left_expr, ref right_expr) = closure_expr.node;\n-        if bin_op.node == hir::BinOp_::BiOr;\n-        if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = left_expr.node;\n-        if path.segments.len() == 1 && &path.segments[0].name == &first_arg_ident;\n+            // Extract the names of the two arguments to the closure\n+            if let Some(first_arg_ident) = get_arg_name(&closure_body.arguments[0].pat);\n+            if let Some(second_arg_ident) = get_arg_name(&closure_body.arguments[1].pat);\n \n-        then {\n-            let right_source = snippet(cx, right_expr.span, \"EXPR\");\n+            if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = left_expr.node;\n+            if path.segments.len() == 1 && &path.segments[0].name == &first_arg_ident;\n+\n+            then {\n+                let right_source = snippet(cx, right_expr.span, \"EXPR\");\n \n-            // Span containing `.fold(...)`\n-            let fold_span = fold_args[0].span.next_point().with_hi(fold_args[2].span.hi() + BytePos(1));\n+                // Span containing `.fold(...)`\n+                let fold_span = fold_args[0].span.next_point().with_hi(fold_args[2].span.hi() + BytePos(1));\n \n-            span_lint_and_sugg(\n-                cx,\n-                FOLD_ANY,\n-                fold_span,\n-                // TODO: don't suggest .any(|x| f(x)) if we can suggest .any(f)\n-                \"this `.fold` can more succintly be expressed as `.any`\",\n-                \"try\",\n-                format!(\n-                    \".any(|{s}| {r})\",\n-                    s = second_arg_ident,\n-                    r = right_source\n-                )\n-            );\n+                span_lint_and_sugg(\n+                    cx,\n+                    FOLD_ANY,\n+                    fold_span,\n+                    // TODO: don't suggest e.g. .any(|x| f(x)) if we can suggest .any(f)\n+                    \"this `.fold` can be written more succinctly using another method\",\n+                    \"try\",\n+                    format!(\n+                        \".{replacement}(|{s}| {r})\",\n+                        replacement = replacement_method_name,\n+                        s = second_arg_ident,\n+                        r = right_source\n+                    )\n+                );\n+            }\n         }\n     }\n+\n+    // Check if the first argument to .fold is a suitable literal\n+    match fold_args[1].node {\n+        hir::ExprLit(ref lit) => {\n+            match lit.node {\n+                ast::LitKind::Bool(false) => check_fold_with_op(\n+                    cx, fold_args, hir::BinOp_::BiOr, \"any\"\n+                ),\n+                ast::LitKind::Bool(true) => check_fold_with_op(\n+                    cx, fold_args, hir::BinOp_::BiAnd, \"all\"\n+                ),\n+                ast::LitKind::Int(0, _) => check_fold_with_op(\n+                    cx, fold_args, hir::BinOp_::BiAdd, \"sum\"\n+                ),\n+                ast::LitKind::Int(1, _) => check_fold_with_op(\n+                    cx, fold_args, hir::BinOp_::BiMul, \"product\"\n+                ),\n+                _ => return\n+            }\n+        }\n+        _ => return\n+    };\n }\n \n fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &[hir::Expr], is_mut: bool) {"}, {"sha": "3ca77f744fe09ea91dac30b9226ccc87545a63fc", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1cac693bc767e6c5648baeab1164feb4aea6ae30/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cac693bc767e6c5648baeab1164feb4aea6ae30/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=1cac693bc767e6c5648baeab1164feb4aea6ae30", "patch": "@@ -385,26 +385,39 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n-/// Should trigger the `FOLD_ANY` lint\n-fn fold_any() {\n+/// Calls which should trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold() {\n+    // Can be replaced by .any\n     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-}\n+    let _ = (0..3).fold(false, |acc, x| x > 2 || acc);\n \n-/// Should not trigger the `FOLD_ANY` lint as the initial value is not the literal `false`\n-fn fold_any_ignores_initial_value_of_true() {\n-    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n-}\n+    // Can be replaced by .all\n+    let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n+    let _ = (0..3).fold(true, |acc, x| x > 2 && acc);\n+\n+    // Can be replaced by .sum\n+    let _ = (0..3).fold(0, |acc, x| acc + x);\n+    let _ = (0..3).fold(0, |acc, x| x + acc);\n \n-/// Should not trigger the `FOLD_ANY` lint as the accumulator is not integer valued\n-fn fold_any_ignores_non_boolean_accumalator() {\n-    let _ = (0..3).fold(0, |acc, x| acc + if x > 2 { 1 } else { 0 });\n+    // Can be replaced by .product\n+    let _ = (0..3).fold(1, |acc, x| acc * x);\n+    let _ = (0..3).fold(1, |acc, x| x * acc);\n }\n \n-/// Should trigger the `FOLD_ANY` lint, with the error span including exactly `.fold(...)`\n-fn fold_any_span_for_multi_element_chain() {\n+/// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n+fn unnecessary_fold_span_for_multi_element_chain() {\n     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n }\n \n+/// Calls which should not trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold_should_ignore() {\n+    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n+    let _ = (0..3).fold(false, |acc, x| acc && x > 2);\n+    let _ = (0..3).fold(1, |acc, x| acc + x);\n+    let _ = (0..3).fold(0, |acc, x| acc * x);\n+    let _ = (0..3).fold(0, |acc, x| 1 + acc + x);\n+}\n+\n #[allow(similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "1c8569e8d6ba3c9e92db0b9ccad15380d8183806", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1cac693bc767e6c5648baeab1164feb4aea6ae30/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cac693bc767e6c5648baeab1164feb4aea6ae30/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=1cac693bc767e6c5648baeab1164feb4aea6ae30", "patch": "@@ -493,24 +493,42 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n 382 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this `.fold` can more succintly be expressed as `.any`\n-   --> $DIR/methods.rs:390:19\n+error: this `.fold` can be written more succinctly using another method\n+   --> $DIR/methods.rs:391:19\n     |\n-390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+391 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n     |\n     = note: `-D fold-any` implied by `-D warnings`\n \n-error: this `.fold` can more succintly be expressed as `.any`\n-   --> $DIR/methods.rs:405:34\n+error: this `.fold` can be written more succinctly using another method\n+   --> $DIR/methods.rs:395:19\n     |\n-405 |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+395 |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n+\n+error: this `.fold` can be written more succinctly using another method\n+   --> $DIR/methods.rs:399:19\n+    |\n+399 |     let _ = (0..3).fold(0, |acc, x| acc + x);\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum(|x| x)`\n+\n+error: this `.fold` can be written more succinctly using another method\n+   --> $DIR/methods.rs:403:19\n+    |\n+403 |     let _ = (0..3).fold(1, |acc, x| acc * x);\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product(|x| x)`\n+\n+error: this `.fold` can be written more succinctly using another method\n+   --> $DIR/methods.rs:409:34\n+    |\n+409 |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:411:13\n+   --> $DIR/methods.rs:424:13\n     |\n-411 |     let _ = opt.unwrap();\n+424 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}