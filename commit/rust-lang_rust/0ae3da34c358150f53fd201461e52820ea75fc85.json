{"sha": "0ae3da34c358150f53fd201461e52820ea75fc85", "node_id": "C_kwDOAAsO6NoAKDBhZTNkYTM0YzM1ODE1MGY1M2ZkMjAxNDYxZTUyODIwZWE3NWZjODU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T11:25:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Remove TraitRef::new", "tree": {"sha": "87ecddedce52864c0d5be8a569f717230367921c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ecddedce52864c0d5be8a569f717230367921c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae3da34c358150f53fd201461e52820ea75fc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae3da34c358150f53fd201461e52820ea75fc85", "html_url": "https://github.com/rust-lang/rust/commit/0ae3da34c358150f53fd201461e52820ea75fc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae3da34c358150f53fd201461e52820ea75fc85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af36387095b5578711fb9bc75f45140d3c77410", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af36387095b5578711fb9bc75f45140d3c77410", "html_url": "https://github.com/rust-lang/rust/commit/6af36387095b5578711fb9bc75f45140d3c77410"}], "stats": {"total": 62, "additions": 22, "deletions": 40}, "files": [{"sha": "71f26eb60c9628e880f5f5b71ca4274e4fed5598", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -680,7 +680,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let assoc_bindings = self.create_assoc_bindings_for_generic_args(args);\n \n         let poly_trait_ref =\n-            ty::Binder::bind_with_vars(ty::TraitRef::new(trait_def_id, substs), bound_vars);\n+            ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n         bounds.trait_bounds.push((poly_trait_ref, span, constness));\n@@ -813,7 +813,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(b) = trait_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n-        ty::TraitRef::new(trait_def_id, substs)\n+        self.tcx().mk_trait_ref(trait_def_id, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, span))]"}, {"sha": "8e520e563ff630ecdeb62b0e4a1b046feb7dbe14", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -2132,19 +2132,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {\n                     // Look for a user-provided impl of a `Fn` trait, and point to it.\n                     let new_def_id = self.probe(|_| {\n-                        let trait_ref = ty::TraitRef::new(\n+                        let trait_ref = self.tcx.mk_trait_ref(\n                             call_kind.to_def_id(self.tcx),\n-                            self.tcx.mk_substs(\n-                                [\n-                                    ty::GenericArg::from(callee_ty),\n-                                    self.next_ty_var(TypeVariableOrigin {\n-                                        kind: TypeVariableOriginKind::MiscVariable,\n-                                        span: rustc_span::DUMMY_SP,\n-                                    })\n-                                    .into(),\n-                                ]\n-                                .into_iter(),\n-                            ),\n+                            [\n+                                callee_ty,\n+                                self.next_ty_var(TypeVariableOrigin {\n+                                    kind: TypeVariableOriginKind::MiscVariable,\n+                                    span: rustc_span::DUMMY_SP,\n+                                }),\n+                            ],\n                         );\n                         let obligation = traits::Obligation::new(\n                             self.tcx,"}, {"sha": "3f3af53d199b12918512a1597a9f7b1eb34532a5", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.var_for_def(span, param)\n         });\n \n-        let trait_ref = ty::TraitRef::new(trait_def_id, substs);\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n@@ -326,7 +326,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.var_for_def(span, param)\n         });\n \n-        let trait_ref = ty::TraitRef::new(trait_def_id, substs);\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);"}, {"sha": "b9e7830bf079214af2a29491fff1ab458fbee011", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n         let trait_substs = self.fresh_item_substs(trait_def_id);\n-        let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, assume all supertraits are relevant."}, {"sha": "ae913c6a3674549f8969b41fd73744b9594f42f5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -2871,7 +2871,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             substs.collect::<Vec<_>>(),\n         );\n         let substs = self.mk_substs(substs);\n-        ty::TraitRef::new(trait_def_id, substs)\n+        ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n     }\n \n     pub fn mk_alias_ty("}, {"sha": "29bad33e4bc0f36aa5ef8f955e1ec30da54ef19a", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -169,10 +169,8 @@ pub trait Printer<'tcx>: Sized {\n                 self.path_append(\n                     |cx: Self| {\n                         if trait_qualify_parent {\n-                            let trait_ref = ty::TraitRef::new(\n-                                parent_def_id,\n-                                cx.tcx().intern_substs(parent_substs),\n-                            );\n+                            let trait_ref =\n+                                cx.tcx().mk_trait_ref(parent_def_id, parent_substs.iter().copied());\n                             cx.path_qualified(trait_ref.self_ty(), Some(trait_ref))\n                         } else {\n                             cx.print_def_path(parent_def_id, parent_substs)"}, {"sha": "e073637402fceeb0006cf4a1ab5c362d7b29d38c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -818,14 +818,10 @@ pub struct TraitRef<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n     /// This field exists to prevent the creation of `TraitRef` without\n     /// calling [TyCtxt::mk_trait_ref].\n-    _use_mk_trait_ref_instead: (),\n+    pub(super) _use_mk_trait_ref_instead: (),\n }\n \n impl<'tcx> TraitRef<'tcx> {\n-    pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {\n-        TraitRef { def_id, substs, _use_mk_trait_ref_instead: () }\n-    }\n-\n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n         tcx.mk_trait_ref(\n             self.def_id,\n@@ -836,11 +832,7 @@ impl<'tcx> TraitRef<'tcx> {\n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n     pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n-        ty::Binder::dummy(TraitRef {\n-            def_id,\n-            substs: InternalSubsts::identity_for_item(tcx, def_id),\n-            _use_mk_trait_ref_instead: (),\n-        })\n+        ty::Binder::dummy(tcx.mk_trait_ref(def_id, InternalSubsts::identity_for_item(tcx, def_id)))\n     }\n \n     #[inline]\n@@ -854,11 +846,7 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-        ty::TraitRef {\n-            def_id: trait_id,\n-            substs: tcx.intern_substs(&substs[..defs.params.len()]),\n-            _use_mk_trait_ref_instead: (),\n-        }\n+        tcx.mk_trait_ref(trait_id, tcx.intern_substs(&substs[..defs.params.len()]))\n     }\n }\n "}, {"sha": "3f0b165f2b604a006e253bf4972c458611599212", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3da34c358150f53fd201461e52820ea75fc85/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3da34c358150f53fd201461e52820ea75fc85/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=0ae3da34c358150f53fd201461e52820ea75fc85", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n     self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate,\n-    TraitRef, Ty, TyCtxt,\n+    Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -513,9 +513,9 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: TraitRef::new(\n+                    trait_ref: tcx.mk_trait_ref(\n                         eq_trait_id,\n-                        tcx.mk_substs(std::iter::once(tcx.mk_param_from_def(param))),\n+                        [tcx.mk_param_from_def(param)],\n                     ),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,"}]}