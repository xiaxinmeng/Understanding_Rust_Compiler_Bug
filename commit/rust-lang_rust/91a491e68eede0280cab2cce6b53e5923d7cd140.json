{"sha": "91a491e68eede0280cab2cce6b53e5923d7cd140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYTQ5MWU2OGVlZGUwMjgwY2FiMmNjZTZiNTNlNTkyM2Q3Y2QxNDA=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-22T02:07:53Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-22T02:07:53Z"}, "message": "Reduce cognitive complexity lint span\n\nCurrently the cognitive complexity lint spans the entire function\nbody making it really difficult to read and refactor the code in\neditors. To fix this we reduce the lint span to the function name.", "tree": {"sha": "6a5db598441b41ad58f6653341090a548a305685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5db598441b41ad58f6653341090a548a305685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a491e68eede0280cab2cce6b53e5923d7cd140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a491e68eede0280cab2cce6b53e5923d7cd140", "html_url": "https://github.com/rust-lang/rust/commit/91a491e68eede0280cab2cce6b53e5923d7cd140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a491e68eede0280cab2cce6b53e5923d7cd140/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb332005845883f2abb50fe183fc91221bad9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb332005845883f2abb50fe183fc91221bad9d1", "html_url": "https://github.com/rust-lang/rust/commit/cfb332005845883f2abb50fe183fc91221bad9d1"}], "stats": {"total": 275, "additions": 125, "deletions": 150}, "files": [{"sha": "405e7335ed44185243e1a7e1946e886f8ba1d171", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/91a491e68eede0280cab2cce6b53e5923d7cd140/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a491e68eede0280cab2cce6b53e5923d7cd140/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=91a491e68eede0280cab2cce6b53e5923d7cd140", "patch": "@@ -1,14 +1,15 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc_session::declare_tool_lint;\n use syntax::ast::Attribute;\n use syntax::source_map::Span;\n+use syntax_pos::BytePos;\n \n-use crate::utils::{match_type, paths, span_help_and_lint, LimitStack};\n+use crate::utils::{match_type, paths, snippet_opt, span_help_and_lint, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n@@ -41,8 +42,16 @@ impl CognitiveComplexity {\n impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n-    fn check<'a, 'tcx>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n-        if span.from_expansion() {\n+    #[allow(clippy::cast_possible_truncation)]\n+    fn check<'a, 'tcx>(\n+        &mut self,\n+        cx: &'a LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        body_span: Span,\n+    ) {\n+        if body_span.from_expansion() {\n             return;\n         }\n \n@@ -64,11 +73,33 @@ impl CognitiveComplexity {\n         if rust_cc >= ret_adjust {\n             rust_cc -= ret_adjust;\n         }\n+\n         if rust_cc > self.limit.limit() {\n+            let fn_span = match kind {\n+                FnKind::ItemFn(ident, _, _, _, _) | FnKind::Method(ident, _, _, _) => ident.span,\n+                FnKind::Closure(_) => {\n+                    let header_span = body_span.with_hi(decl.output.span().lo());\n+                    let pos = snippet_opt(cx, header_span).and_then(|snip| {\n+                        let low_offset = snip.find('|')?;\n+                        let high_offset = 1 + snip.get(low_offset + 1..)?.find('|')?;\n+                        let low = header_span.lo() + BytePos(low_offset as u32);\n+                        let high = low + BytePos(high_offset as u32 + 1);\n+\n+                        Some((low, high))\n+                    });\n+\n+                    if let Some((low, high)) = pos {\n+                        Span::new(low, high, header_span.ctxt())\n+                    } else {\n+                        return;\n+                    }\n+                },\n+            };\n+\n             span_help_and_lint(\n                 cx,\n                 COGNITIVE_COMPLEXITY,\n-                span,\n+                fn_span,\n                 &format!(\n                     \"the function has a cognitive complexity of ({}/{})\",\n                     rust_cc,\n@@ -84,15 +115,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n-        _: intravisit::FnKind<'tcx>,\n-        _: &'tcx FnDecl,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n         body: &'tcx Body,\n         span: Span,\n         hir_id: HirId,\n     ) {\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n         if !cx.tcx.has_attr(def_id, sym!(test)) {\n-            self.check(cx, body, span);\n+            self.check(cx, kind, decl, body, span);\n         }\n     }\n "}, {"sha": "1d3fe405521cdbc936c2f82836611571a85acb7f", "filename": "tests/ui/cognitive_complexity.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=91a491e68eede0280cab2cce6b53e5923d7cd140", "patch": "@@ -371,3 +371,25 @@ fn early_ret() -> i32 {\n         _ => return 6,\n     }\n }\n+\n+#[clippy::cognitive_complexity = \"1\"]\n+fn closures() {\n+    let x = |a: i32, b: i32| -> i32 {\n+        if true {\n+            println!(\"moo\");\n+        }\n+\n+        a + b\n+    };\n+}\n+\n+struct Moo;\n+\n+#[clippy::cognitive_complexity = \"1\"]\n+impl Moo {\n+    fn moo(&self) {\n+        if true {\n+            println!(\"moo\");\n+        }\n+    }\n+}"}, {"sha": "a0ddc673abcc103f8a94456947834d407a0c7257", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 61, "deletions": 133, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=91a491e68eede0280cab2cce6b53e5923d7cd140", "patch": "@@ -1,211 +1,139 @@\n error: the function has a cognitive complexity of (28/25)\n-  --> $DIR/cognitive_complexity.rs:6:1\n+  --> $DIR/cognitive_complexity.rs:6:4\n    |\n-LL | / fn main() {\n-LL | |     if true {\n-LL | |         println!(\"a\");\n-LL | |     }\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   |    ^^^^\n    |\n    = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (7/1)\n-  --> $DIR/cognitive_complexity.rs:91:1\n+  --> $DIR/cognitive_complexity.rs:91:4\n    |\n-LL | / fn kaboom() {\n-LL | |     let n = 0;\n-LL | |     'a: for i in 0..20 {\n-LL | |         'b: for j in i..20 {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn kaboom() {\n+   |    ^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:149:1\n+  --> $DIR/cognitive_complexity.rs:149:4\n    |\n-LL | / fn baa() {\n-LL | |     let x = || match 99 {\n-LL | |         0 => 0,\n-LL | |         1 => 1,\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn baa() {\n+   |    ^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n   --> $DIR/cognitive_complexity.rs:150:13\n    |\n-LL |       let x = || match 99 {\n-   |  _____________^\n-LL | |         0 => 0,\n-LL | |         1 => 1,\n-LL | |         2 => 2,\n-...  |\n-LL | |         _ => 42,\n-LL | |     };\n-   | |_____^\n+LL |     let x = || match 99 {\n+   |             ^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:167:1\n+  --> $DIR/cognitive_complexity.rs:167:4\n    |\n-LL | / fn bar() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         _ => println!(\"bye\"),\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn bar() {\n+   |    ^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:186:1\n+  --> $DIR/cognitive_complexity.rs:186:4\n    |\n-LL | / fn barr() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => println!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barr() {\n+   |    ^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (3/1)\n-  --> $DIR/cognitive_complexity.rs:196:1\n+  --> $DIR/cognitive_complexity.rs:196:4\n    |\n-LL | / fn barr2() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => println!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barr2() {\n+   |    ^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:212:1\n+  --> $DIR/cognitive_complexity.rs:212:4\n    |\n-LL | / fn barrr() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => panic!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barrr() {\n+   |    ^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (3/1)\n-  --> $DIR/cognitive_complexity.rs:222:1\n+  --> $DIR/cognitive_complexity.rs:222:4\n    |\n-LL | / fn barrr2() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => panic!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barrr2() {\n+   |    ^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:238:1\n+  --> $DIR/cognitive_complexity.rs:238:4\n    |\n-LL | / fn barrrr() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => println!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barrrr() {\n+   |    ^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (3/1)\n-  --> $DIR/cognitive_complexity.rs:248:1\n+  --> $DIR/cognitive_complexity.rs:248:4\n    |\n-LL | / fn barrrr2() {\n-LL | |     match 99 {\n-LL | |         0 => println!(\"hi\"),\n-LL | |         1 => println!(\"bla\"),\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn barrrr2() {\n+   |    ^^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:264:1\n+  --> $DIR/cognitive_complexity.rs:264:4\n    |\n-LL | / fn cake() {\n-LL | |     if 4 == 5 {\n-LL | |         println!(\"yea\");\n-LL | |     } else {\n-...  |\n-LL | |     println!(\"whee\");\n-LL | | }\n-   | |_^\n+LL | fn cake() {\n+   |    ^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (4/1)\n-  --> $DIR/cognitive_complexity.rs:274:1\n+  --> $DIR/cognitive_complexity.rs:274:8\n    |\n-LL | / pub fn read_file(input_path: &str) -> String {\n-LL | |     use std::fs::File;\n-LL | |     use std::io::{Read, Write};\n-LL | |     use std::path::Path;\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | pub fn read_file(input_path: &str) -> String {\n+   |        ^^^^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (2/1)\n-  --> $DIR/cognitive_complexity.rs:305:1\n+  --> $DIR/cognitive_complexity.rs:305:4\n    |\n-LL | / fn void(void: Void) {\n-LL | |     if true {\n-LL | |         match void {}\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn void(void: Void) {\n+   |    ^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cognitive complexity of (8/1)\n-  --> $DIR/cognitive_complexity.rs:356:1\n+  --> $DIR/cognitive_complexity.rs:356:4\n    |\n-LL | / fn early_ret() -> i32 {\n-LL | |     let a = if true { 42 } else { return 0; };\n-LL | |     let a = if a < 99 { 42 } else { return 0; };\n-LL | |     let a = if a < 99 { 42 } else { return 0; };\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn early_ret() -> i32 {\n+   |    ^^^^^^^^^\n    |\n    = help: you could split it up into multiple smaller functions\n \n-error: aborting due to 15 previous errors\n+error: the function has a cognitive complexity of (2/1)\n+  --> $DIR/cognitive_complexity.rs:377:13\n+   |\n+LL |     let x = |a: i32, b: i32| -> i32 {\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cognitive complexity of (2/1)\n+  --> $DIR/cognitive_complexity.rs:390:8\n+   |\n+LL |     fn moo(&self) {\n+   |        ^^^\n+   |\n+   = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "f5ff53dda603b388329940d2ad6d70a2003e9e0f", "filename": "tests/ui/cognitive_complexity_attr_used.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91a491e68eede0280cab2cce6b53e5923d7cd140/tests%2Fui%2Fcognitive_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity_attr_used.stderr?ref=91a491e68eede0280cab2cce6b53e5923d7cd140", "patch": "@@ -1,14 +1,8 @@\n error: the function has a cognitive complexity of (3/0)\n-  --> $DIR/cognitive_complexity_attr_used.rs:9:1\n+  --> $DIR/cognitive_complexity_attr_used.rs:9:4\n    |\n-LL | / fn kaboom() {\n-LL | |     if 42 == 43 {\n-LL | |         panic!();\n-LL | |     } else if \"cake\" == \"lie\" {\n-LL | |         println!(\"what?\");\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn kaboom() {\n+   |    ^^^^^^\n    |\n    = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions"}]}