{"sha": "76e9ea73822a859815ed78c31403e15354f3c4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZTllYTczODIyYTg1OTgxNWVkNzhjMzE0MDNlMTUzNTRmM2M0YzM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-05T14:14:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-05T14:14:42Z"}, "message": "Rollup merge of #39289 - shahn:option_entry, r=alexcrichton\n\nProvide Entry-like API for Option\n\nThis implements #39288.\n\nI am wondering whether to use std::intrinsics::unreachable!() here. Both seems fine to me (the second match optimizes away in release mode).", "tree": {"sha": "19394d3bd75d20bdbdddc3f3d9758918593c8503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19394d3bd75d20bdbdddc3f3d9758918593c8503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e9ea73822a859815ed78c31403e15354f3c4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e9ea73822a859815ed78c31403e15354f3c4c3", "html_url": "https://github.com/rust-lang/rust/commit/76e9ea73822a859815ed78c31403e15354f3c4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e9ea73822a859815ed78c31403e15354f3c4c3/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49cd748a07a1a9ea443843d3b84b620350ee9655", "url": "https://api.github.com/repos/rust-lang/rust/commits/49cd748a07a1a9ea443843d3b84b620350ee9655", "html_url": "https://github.com/rust-lang/rust/commit/49cd748a07a1a9ea443843d3b84b620350ee9655"}, {"sha": "8e02ad0adab29c018148eaa399ccdfba9c098bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e02ad0adab29c018148eaa399ccdfba9c098bb5", "html_url": "https://github.com/rust-lang/rust/commit/8e02ad0adab29c018148eaa399ccdfba9c098bb5"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "9df8350d90ffdc8cb864ed4899b57018e390139f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/76e9ea73822a859815ed78c31403e15354f3c4c3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e9ea73822a859815ed78c31403e15354f3c4c3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=76e9ea73822a859815ed78c31403e15354f3c4c3", "patch": "@@ -632,6 +632,76 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /////////////////////////////////////////////////////////////////////////\n+    // Entry-like operations to insert if None and return a reference\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Inserts `v` into the option if it is `None`, then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_entry)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_insert(5);\n+    ///     assert_eq!(y, &5);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    pub fn get_or_insert(&mut self, v: T) -> &mut T {\n+        match *self {\n+            None => *self = Some(v),\n+            _ => (),\n+        }\n+\n+        match *self {\n+            Some(ref mut v) => v,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    /// Inserts a value computed from `f` into the option if it is `None`, then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_entry)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_insert_with(|| 5);\n+    ///     assert_eq!(y, &5);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    pub fn get_or_insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n+        match *self {\n+            None => *self = Some(f()),\n+            _ => (),\n+        }\n+\n+        match *self {\n+            Some(ref mut v) => v,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Misc\n     /////////////////////////////////////////////////////////////////////////"}]}