{"sha": "01d8b8947c54999eb15d88b60fa17bdde18b4875", "node_id": "C_kwDOAAsO6NoAKDAxZDhiODk0N2M1NDk5OWViMTVkODhiNjBmYTE3YmRkZTE4YjQ4NzU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-22T15:11:16Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-22T15:22:46Z"}, "message": "Don't escape non-snippets in assist", "tree": {"sha": "f7b6c3be95d93e30f5d175d6bf81da6577df3411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b6c3be95d93e30f5d175d6bf81da6577df3411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d8b8947c54999eb15d88b60fa17bdde18b4875", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPNVMYACgkQ4laYqTBY\nYXEo1RAAmwly1CfkHuhNPYuLBIW3u2Ppi0I3B1TFAeY1I83hHjp2F13hOIXr14Fd\nRv1Vcwja0D8Hj7lg94x3oIlKy5vy5+0/X0ciqRD3RrpkDbIB4K4HOcviukh8PmB2\npZ18vYC7MQAFb3uT0BTR1bk75V0sk/vfLSsJE+vEIruK5jJ+f9Alg45kIe0ONJCC\nVuh1lZgDa0854futoY7/xvtMXsOAynPGxM6lB1R9YMlNy6LcDTYWOdYEwEJ+ZY5K\nZ+9s0H+euRjarswLfoDJY+ARO5P+QpFNFEhaIra3B/bOl2sVPgkEknxjE2LHWdfi\nL8S+H91ckHbOeKF0F23FWsUjXFF36JWK9V2a/vXLYJJzA0svp67VIW5yOOR6UaJ6\nxcNWgO/phCLeKVzhZGO8txIgRi3zfyIxyuv01H6NFPY9ZARnEEGhE5hmG8Nm+VT2\n+eWvw/bn1gFcysr1BOKtM677vfvK4wjW26MJ1XZRWQFvGMeA3Yh7NorWXHV1KjTl\nDWcoK/FwGOmILY/Av1VdGxkqLrygE6D5109nXjpLZ+rBXeKfARFBLTsQHT/ZoedH\n5+jgH0MnTET0spGx3cPjEeT6N9HhHYHmbWWSv7o9zo98IMqp8ZSTqbS0K1eX5DX2\nj3jQXALxQnqBIXiuG7sdBRuIvh2VI/E4Rbv1G+mdhpDwZ8qApfc=\n=QCLC\n-----END PGP SIGNATURE-----", "payload": "tree f7b6c3be95d93e30f5d175d6bf81da6577df3411\nparent 9a6294d7038e7eab00beafdf64ec4aa50a4c66a2\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1674400276 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1674400966 +0900\n\nDon't escape non-snippets in assist\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d8b8947c54999eb15d88b60fa17bdde18b4875", "html_url": "https://github.com/rust-lang/rust/commit/01d8b8947c54999eb15d88b60fa17bdde18b4875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d8b8947c54999eb15d88b60fa17bdde18b4875/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6294d7038e7eab00beafdf64ec4aa50a4c66a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6294d7038e7eab00beafdf64ec4aa50a4c66a2", "html_url": "https://github.com/rust-lang/rust/commit/9a6294d7038e7eab00beafdf64ec4aa50a4c66a2"}], "stats": {"total": 61, "additions": 2, "deletions": 59}, "files": [{"sha": "d848fce4be821b79585bd3854c1dff06ccb3bc41", "filename": "crates/ide-assists/src/handlers/move_const_to_impl.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/01d8b8947c54999eb15d88b60fa17bdde18b4875/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d8b8947c54999eb15d88b60fa17bdde18b4875/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs?ref=01d8b8947c54999eb15d88b60fa17bdde18b4875", "patch": "@@ -5,10 +5,7 @@ use syntax::{\n     SyntaxKind,\n };\n \n-use crate::{\n-    assist_context::{AssistContext, Assists},\n-    utils,\n-};\n+use crate::assist_context::{AssistContext, Assists};\n \n // NOTE: Code may break if the self type implements a trait that has associated const with the same\n // name, but it's pretty expensive to check that (`hir::Impl::all_for_type()`) and we assume that's\n@@ -130,9 +127,7 @@ pub(crate) fn move_const_to_impl(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n             let const_ = const_.clone_for_update();\n             const_.reindent_to(indent);\n-            let mut const_text = format!(\"\\n{indent}{const_}{fixup}\");\n-            utils::escape_non_snippet(&mut const_text);\n-            builder.insert(insert_offset, const_text);\n+            builder.insert(insert_offset, format!(\"\\n{indent}{const_}{fixup}\"));\n         },\n     )\n }\n@@ -443,39 +438,4 @@ impl S {\n \"#,\n         );\n     }\n-\n-    #[test]\n-    fn moved_const_body_is_escaped() {\n-        // Note that the last argument is what *lsp clients would see* rather than\n-        // what users would see. Unescaping happens thereafter.\n-        check_assist(\n-            move_const_to_impl,\n-            r#\"\n-struct S;\n-impl S {\n-    fn f() -> usize {\n-        /// doc comment\n-        /// \\\\\n-        /// ${snippet}\n-        const C$0: &str = \"\\ and $1\";\n-\n-        C.len()\n-    }\n-}\n-\"#,\n-            r#\"\n-struct S;\n-impl S {\n-    /// doc comment\n-    /// \\\\\\\\\n-    /// \\${snippet}\n-    const C: &str = \"\\\\ and \\$1\";\n-\n-    fn f() -> usize {\n-        Self::C.len()\n-    }\n-}\n-\"#,\n-        )\n-    }\n }"}, {"sha": "f323ebcf7a3bdc76af45069d353d20557daf44ec", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01d8b8947c54999eb15d88b60fa17bdde18b4875/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d8b8947c54999eb15d88b60fa17bdde18b4875/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=01d8b8947c54999eb15d88b60fa17bdde18b4875", "patch": "@@ -208,23 +208,6 @@ pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor\n     }\n }\n \n-/// Escapes text that should be rendered as-is, typically those that we're copy-pasting what the\n-/// users wrote.\n-///\n-/// This function should only be used when the text doesn't contain snippet **AND** the text\n-/// wouldn't be included in a snippet.\n-pub(crate) fn escape_non_snippet(text: &mut String) {\n-    // While we *can* escape `}`, we don't really have to in this specific case. We only need to\n-    // escape it inside `${}` to disambiguate it from the ending token of the syntax, but after we\n-    // escape every occurrence of `$`, we wouldn't have `${}` in the first place.\n-    //\n-    // This will break if the text contains snippet or it will be included in a snippet (hence doc\n-    // comment). Compare `fn escape(buf)` in `render_snippet()` above, where the escaped text is\n-    // included in a snippet.\n-    stdx::replace(text, '\\\\', r\"\\\\\");\n-    stdx::replace(text, '$', r\"\\$\");\n-}\n-\n pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n     node.children_with_tokens()\n         .find(|it| !matches!(it.kind(), WHITESPACE | COMMENT | ATTR))"}]}