{"sha": "9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTA1YTRkM2U1YThjYTVhNWNhOTU4NWY4OGQzZmFkZGE4M2I2MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-17T06:39:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-17T06:39:29Z"}, "message": "auto merge of #4978 : z0w0/rust/issue-607, r=graydon", "tree": {"sha": "ed79a43390c3aaf012491c165adb27b05621bb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed79a43390c3aaf012491c165adb27b05621bb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "html_url": "https://github.com/rust-lang/rust/commit/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa8af12228f023877ab9f6c39878f95a8ee05bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8af12228f023877ab9f6c39878f95a8ee05bf9", "html_url": "https://github.com/rust-lang/rust/commit/aa8af12228f023877ab9f6c39878f95a8ee05bf9"}, {"sha": "fe9f1d155ab674e402cdb1b530df8ecb66bb7dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9f1d155ab674e402cdb1b530df8ecb66bb7dd4", "html_url": "https://github.com/rust-lang/rust/commit/fe9f1d155ab674e402cdb1b530df8ecb66bb7dd4"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "bd9c7f1616dc7b054754d1b2b846f733741c37c4", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "patch": "@@ -497,8 +497,7 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n \n         let cmh_items = attr::sort_meta_items(cmh_items);\n \n-        symbol_hasher.reset();\n-        for cmh_items.each |m| {\n+        fn hash(symbol_hasher: &hash::State, m: &@ast::meta_item) {\n             match m.node {\n               ast::meta_name_value(ref key, value) => {\n                 symbol_hasher.write_str(len_and_str((*key)));\n@@ -507,13 +506,20 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n               ast::meta_word(ref name) => {\n                 symbol_hasher.write_str(len_and_str((*name)));\n               }\n-              ast::meta_list(_, _) => {\n-                // FIXME (#607): Implement this\n-                fail!(~\"unimplemented meta_item variant\");\n+              ast::meta_list(ref name, ref mis) => {\n+                symbol_hasher.write_str(len_and_str((*name)));\n+                for mis.each |m_| {\n+                    hash(symbol_hasher, m_);\n+                }\n               }\n             }\n         }\n \n+        symbol_hasher.reset();\n+        for cmh_items.each |m| {\n+            hash(symbol_hasher, m);\n+        }\n+\n         for dep_hashes.each |dh| {\n             symbol_hasher.write_str(len_and_str(*dh));\n         }"}, {"sha": "605d944c70db95455a4512c1b7690f276f05be10", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9ea05a4d3e5a8ca5a5ca9585f88d3fadda83b60c", "patch": "@@ -192,13 +192,15 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n             }\n             _ => false\n           },\n-          ast::meta_list(*) => {\n-\n-            // ~[Fixme-sorting]\n-            // FIXME (#607): Needs implementing\n-            // This involves probably sorting the list by name and\n-            // meta_item variant\n-            fail!(~\"unimplemented meta_item variant\")\n+          ast::meta_list(ref na, misa) => match b.node {\n+            ast::meta_list(ref nb, misb) => {\n+                if na != nb { return false; }\n+                for misa.each |&mi| {\n+                    if !contains(misb, mi) { return false; }\n+                }\n+                true\n+            }\n+            _ => false\n           }\n         }\n }\n@@ -253,8 +255,6 @@ pub fn last_meta_item_list_by_name(items: ~[@ast::meta_item], name: ~str)\n \n /* Higher-level applications */\n \n-// FIXME (#607): This needs to sort by meta_item variant in addition to\n-// the item name (See [Fixme-sorting])\n pub fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     pure fn lteq(ma: &@ast::meta_item, mb: &@ast::meta_item) -> bool {\n         pure fn key(m: &ast::meta_item) -> ~str {\n@@ -270,7 +270,17 @@ pub fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n     let mut v: ~[@ast::meta_item] = items;\n     std::sort::quick_sort(v, lteq);\n-    v\n+\n+    // There doesn't seem to be a more optimal way to do this\n+    do v.map |&m| {\n+        match m.node {\n+          ast::meta_list(n, mis) => @spanned {\n+              node: ast::meta_list(n, sort_meta_items(mis)),\n+              .. *m\n+          },\n+          _ => m\n+        }\n+    }\n }\n \n pub fn remove_meta_items_by_name(items: ~[@ast::meta_item], name: ~str) ->"}]}