{"sha": "d703622ce08d51eb91a909278f7917762e743438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDM2MjJjZTA4ZDUxZWI5MWE5MDkyNzhmNzkxNzc2MmU3NDM0Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T11:31:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-17T11:31:19Z"}, "message": "Auto merge of #49626 - fanzier:chalk-lowering, r=scalexm\n\nImplement Chalk lowering rule Normalize-From-Impl\n\nThis extends the Chalk lowering pass with the \"Normalize-From-Impl\" rule for generating program clauses from a trait definition as part of #49177.\n\nr? @nikomatsakis", "tree": {"sha": "0c543e3e7e700a6c6c78b7631ae3d926186a7bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c543e3e7e700a6c6c78b7631ae3d926186a7bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d703622ce08d51eb91a909278f7917762e743438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d703622ce08d51eb91a909278f7917762e743438", "html_url": "https://github.com/rust-lang/rust/commit/d703622ce08d51eb91a909278f7917762e743438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d703622ce08d51eb91a909278f7917762e743438/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8728c7a726f3e8854f5a80b474d1a8bacab10304", "url": "https://api.github.com/repos/rust-lang/rust/commits/8728c7a726f3e8854f5a80b474d1a8bacab10304", "html_url": "https://github.com/rust-lang/rust/commit/8728c7a726f3e8854f5a80b474d1a8bacab10304"}, {"sha": "b7c4a57465b8d5599c7e799e1aafe12a458156f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c4a57465b8d5599c7e799e1aafe12a458156f8", "html_url": "https://github.com/rust-lang/rust/commit/b7c4a57465b8d5599c7e799e1aafe12a458156f8"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "70c152b40c0d25fdbc77561268c46efa6c192459", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -1387,6 +1387,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::DomainGoal<'tcx>\n             FromEnv(where_clause) => where_clause.hash_stable(hcx, hasher),\n \n             WellFormedTy(ty) => ty.hash_stable(hcx, hasher),\n+            Normalize(projection) => projection.hash_stable(hcx, hasher),\n             FromEnvTy(ty) => ty.hash_stable(hcx, hasher),\n             RegionOutlives(predicate) => predicate.hash_stable(hcx, hasher),\n             TypeOutlives(predicate) => predicate.hash_stable(hcx, hasher),"}, {"sha": "8d2398d34090d8d6f8ddc327150ef42466141217", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -266,6 +266,7 @@ pub enum DomainGoal<'tcx> {\n     WellFormed(WhereClauseAtom<'tcx>),\n     FromEnv(WhereClauseAtom<'tcx>),\n     WellFormedTy(Ty<'tcx>),\n+    Normalize(ty::ProjectionPredicate<'tcx>),\n     FromEnvTy(Ty<'tcx>),\n     RegionOutlives(ty::RegionOutlivesPredicate<'tcx>),\n     TypeOutlives(ty::TypeOutlivesPredicate<'tcx>),"}, {"sha": "31c5bf1bbad84fd45870dd2b302f4b283d4e72bb", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -450,6 +450,7 @@ impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n             FromEnv(Implemented(trait_ref)) => write!(fmt, \"FromEnv({})\", trait_ref),\n             FromEnv(ProjectionEq(projection)) => write!(fmt, \"FromEnv({})\", projection),\n             WellFormedTy(ty) => write!(fmt, \"WellFormed({})\", ty),\n+            Normalize(projection) => write!(fmt, \"Normalize({})\", projection),\n             FromEnvTy(ty) => write!(fmt, \"FromEnv({})\", ty),\n             RegionOutlives(predicate) => write!(fmt, \"RegionOutlives({})\", predicate),\n             TypeOutlives(predicate) => write!(fmt, \"TypeOutlives({})\", predicate),\n@@ -538,6 +539,7 @@ EnumTypeFoldableImpl! {\n         (traits::DomainGoal::WellFormed)(wc),\n         (traits::DomainGoal::FromEnv)(wc),\n         (traits::DomainGoal::WellFormedTy)(ty),\n+        (traits::DomainGoal::Normalize)(projection),\n         (traits::DomainGoal::FromEnvTy)(ty),\n         (traits::DomainGoal::RegionOutlives)(predicate),\n         (traits::DomainGoal::TypeOutlives)(predicate),"}, {"sha": "36e60cee788dc6ea2f04ad9e947b09d84843804e", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -108,6 +108,7 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n             FromEnv(..) |\n             WellFormedTy(..) |\n             FromEnvTy(..) |\n+            Normalize(..) |\n             RegionOutlives(..) |\n             TypeOutlives(..) => self,\n         }\n@@ -118,10 +119,20 @@ crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n                                        -> Lrc<&'tcx Slice<Clause<'tcx>>>\n {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let item = tcx.hir.expect_item(node_id);\n-    match item.node {\n-        hir::ItemTrait(..) => program_clauses_for_trait(tcx, def_id),\n-        hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n+    let node = tcx.hir.find(node_id).unwrap();\n+    match node {\n+        hir::map::Node::NodeItem(item) => match item.node {\n+            hir::ItemTrait(..) => program_clauses_for_trait(tcx, def_id),\n+            hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n+            _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n+        }\n+        hir::map::Node::NodeImplItem(item) => {\n+            if let hir::ImplItemKind::Type(..) = item.node {\n+                program_clauses_for_associated_type_value(tcx, def_id)\n+            } else {\n+                Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()))\n+            }\n+        },\n \n         // FIXME: other constructions e.g. traits, associated types...\n         _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n@@ -233,6 +244,58 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n }\n \n+pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: DefId,\n+) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+    // Rule Normalize-From-Impl (see rustc guide)\n+    //\n+    // ```impl<P0..Pn> Trait<A1..An> for A0\n+    // {\n+    //     type AssocType<Pn+1..Pm> where WC = T;\n+    // }```\n+    //\n+    // ```\n+    // forall<P0..Pm> {\n+    //   forall<Pn+1..Pm> {\n+    //     Normalize(<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm> -> T) :-\n+    //       Implemented(A0: Trait<A1..An>) && WC\n+    //   }\n+    // }\n+    // ```\n+\n+    let item = tcx.associated_item(item_id);\n+    debug_assert_eq!(item.kind, ty::AssociatedKind::Type);\n+    let impl_id = if let ty::AssociatedItemContainer::ImplContainer(impl_id) = item.container {\n+        impl_id\n+    } else {\n+        bug!()\n+    };\n+    // `A0 as Trait<A1..An>`\n+    let trait_ref = tcx.impl_trait_ref(impl_id).unwrap();\n+    // `T`\n+    let ty = tcx.type_of(item_id);\n+    // `Implemented(A0: Trait<A1..An>)`\n+    let trait_implemented = ty::Binder::dummy(ty::TraitPredicate { trait_ref }.lower());\n+    // `WC`\n+    let item_where_clauses = tcx.predicates_of(item_id).predicates.lower();\n+    // `Implemented(A0: Trait<A1..An>) && WC`\n+    let mut where_clauses = vec![trait_implemented];\n+    where_clauses.extend(item_where_clauses);\n+    // `<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm>`\n+    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.name);\n+    // `Normalize(<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm> -> T)`\n+    let normalize_goal = DomainGoal::Normalize(ty::ProjectionPredicate { projection_ty, ty });\n+    // `Normalize(... -> T) :- ...`\n+    let clause = ProgramClause {\n+        goal: normalize_goal,\n+        hypotheses: tcx.mk_goals(\n+            where_clauses.into_iter().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+        ),\n+    };\n+    Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n+}\n+\n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     if !tcx.features().rustc_attrs {\n         return;"}, {"sha": "671d77efbea3aac7f50850cdfef324cbdb481415", "filename": "src/test/ui/chalkify/lower_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -15,6 +15,15 @@ trait Foo { }\n #[rustc_dump_program_clauses] //~ ERROR Implemented(T: Foo) :-\n impl<T: 'static> Foo for T where T: Iterator<Item = i32> { }\n \n+trait Bar {\n+    type Assoc;\n+}\n+\n+impl<T> Bar for T where T: Iterator<Item = i32> {\n+    #[rustc_dump_program_clauses] //~ ERROR Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :-\n+    type Assoc = Vec<T>;\n+}\n+\n fn main() {\n     println!(\"hello\");\n }"}, {"sha": "f253f9847d16294bc9fe39e55bb6c68e9351ee51", "filename": "src/test/ui/chalkify/lower_impl.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d703622ce08d51eb91a909278f7917762e743438/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d703622ce08d51eb91a909278f7917762e743438/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr?ref=d703622ce08d51eb91a909278f7917762e743438", "patch": "@@ -4,5 +4,11 @@ error: Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i\n LL | #[rustc_dump_program_clauses] //~ ERROR Implemented(T: Foo) :-\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :- Implemented(T: Bar).\n+  --> $DIR/lower_impl.rs:23:5\n+   |\n+LL |     #[rustc_dump_program_clauses] //~ ERROR Normalize(<T as Bar>::Assoc == std::vec::Vec<T>) :-\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}