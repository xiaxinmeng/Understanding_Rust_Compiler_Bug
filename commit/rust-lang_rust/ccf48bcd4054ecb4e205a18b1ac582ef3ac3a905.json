{"sha": "ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjQ4YmNkNDA1NGVjYjRlMjA1YTE4YjFhYzU4MmVmM2FjM2E5MDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T15:09:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::FloatTy variants", "tree": {"sha": "6a8f3b5bf12f7540c2f31575a9b1a6a31cbac231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8f3b5bf12f7540c2f31575a9b1a6a31cbac231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "html_url": "https://github.com/rust-lang/rust/commit/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bf9ae18a133571d694aa866b824dcaea875d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bf9ae18a133571d694aa866b824dcaea875d32", "html_url": "https://github.com/rust-lang/rust/commit/80bf9ae18a133571d694aa866b824dcaea875d32"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "4b4f9eefe2238ad0fe7b78b5d77c769eff0d6182", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -1314,8 +1314,8 @@ fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n         ty::TyUint(ast::TyU32) => convert_val!(u32, Uint, u64),\n         ty::TyUint(ast::TyU64) => convert_val!(u64, Uint, u64),\n \n-        ty::TyFloat(ast::TyF32) => convert_val!(f32, Float, f64),\n-        ty::TyFloat(ast::TyF64) => convert_val!(f64, Float, f64),\n+        ty::TyFloat(ast::FloatTy::F32) => convert_val!(f32, Float, f64),\n+        ty::TyFloat(ast::FloatTy::F64) => convert_val!(f64, Float, f64),\n         _ => Err(ErrKind::CannotCast),\n     }\n }"}, {"sha": "ac924962485f976046de207268e2df278042f6ef", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -202,8 +202,8 @@ impl<'tcx> CommonTypes<'tcx> {\n             u16: mk(TyUint(ast::TyU16)),\n             u32: mk(TyUint(ast::TyU32)),\n             u64: mk(TyUint(ast::TyU64)),\n-            f32: mk(TyFloat(ast::TyF32)),\n-            f64: mk(TyFloat(ast::TyF64)),\n+            f32: mk(TyFloat(ast::FloatTy::F32)),\n+            f64: mk(TyFloat(ast::FloatTy::F64)),\n         }\n     }\n }\n@@ -860,8 +860,8 @@ impl<'tcx> ctxt<'tcx> {\n \n     pub fn mk_mach_float(&self, tm: ast::FloatTy) -> Ty<'tcx> {\n         match tm {\n-            ast::TyF32  => self.types.f32,\n-            ast::TyF64  => self.types.f64,\n+            ast::FloatTy::F32  => self.types.f32,\n+            ast::FloatTy::F64  => self.types.f64,\n         }\n     }\n "}, {"sha": "6adec347ac6087bc81c5d91a2fcc083edcf25fd4", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -267,8 +267,8 @@ impl LateLintPass for TypeLimits {\n \n         fn float_ty_range(float_ty: ast::FloatTy) -> (f64, f64) {\n             match float_ty {\n-                ast::TyF32 => (f32::MIN as f64, f32::MAX as f64),\n-                ast::TyF64 => (f64::MIN,        f64::MAX)\n+                ast::FloatTy::F32 => (f32::MIN as f64, f32::MAX as f64),\n+                ast::FloatTy::F64 => (f64::MIN,        f64::MAX)\n             }\n         }\n "}, {"sha": "d4060165c1ddc801871e1a6eb803d28b46d7cc6b", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -94,8 +94,8 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n         }\n         ty::TyFloat(t) => {\n             match t {\n-                ast::TyF32 => write!(w, \"Mf\"),\n-                ast::TyF64 => write!(w, \"MF\"),\n+                ast::FloatTy::F32 => write!(w, \"Mf\"),\n+                ast::FloatTy::F64 => write!(w, \"MF\"),\n             };\n         }\n         ty::TyEnum(def, substs) => {"}, {"sha": "573bc91bbcb691da74cc0ee75b3b1c4da4ff46fb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -60,9 +60,9 @@ use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n-use syntax::ast;\n+use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, TyIs, TyI8, TyI16, TyI32, TyI64};\n-use syntax::ast::{TyUs, TyU8, TyU16, TyU32, TyU64, TyF64, TyF32};\n+use syntax::ast::{TyUs, TyU8, TyU16, TyU32, TyU64};\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Pos};\n use syntax::errors::DiagnosticBuilder;\n@@ -1074,8 +1074,8 @@ impl PrimitiveTypeTable {\n \n         table.intern(\"bool\", TyBool);\n         table.intern(\"char\", TyChar);\n-        table.intern(\"f32\", TyFloat(TyF32));\n-        table.intern(\"f64\", TyFloat(TyF64));\n+        table.intern(\"f32\", TyFloat(FloatTy::F32));\n+        table.intern(\"f64\", TyFloat(FloatTy::F64));\n         table.intern(\"isize\", TyInt(TyIs));\n         table.intern(\"i8\", TyInt(TyI8));\n         table.intern(\"i16\", TyInt(TyI16));"}, {"sha": "1c127b90f27df5ce9330ebfc182fd21ce08d517f", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -1230,8 +1230,8 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyUint(ast::TyU16)  => output.push_str(\"u16\"),\n         ty::TyUint(ast::TyU32)  => output.push_str(\"u32\"),\n         ty::TyUint(ast::TyU64)  => output.push_str(\"u64\"),\n-        ty::TyFloat(ast::TyF32) => output.push_str(\"f32\"),\n-        ty::TyFloat(ast::TyF64) => output.push_str(\"f64\"),\n+        ty::TyFloat(ast::FloatTy::F32) => output.push_str(\"f32\"),\n+        ty::TyFloat(ast::FloatTy::F64) => output.push_str(\"f64\"),\n         ty::TyStruct(adt_def, substs) |\n         ty::TyEnum(adt_def, substs) => {\n             push_item_name(cx, adt_def.did, output);"}, {"sha": "5d5aa5240d693df77775fafe0955d2598aaac69b", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -147,8 +147,8 @@ impl Type {\n \n     pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type {\n         match t {\n-            ast::TyF32 => Type::f32(ccx),\n-            ast::TyF64 => Type::f64(ccx),\n+            ast::FloatTy::F32 => Type::f32(ccx),\n+            ast::FloatTy::F64 => Type::f64(ccx),\n         }\n     }\n "}, {"sha": "0f3cce18ea2bdfacfcc24f2d6f16492137f38988", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -443,8 +443,8 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n                                        n = bits)),\n         },\n         Float(bits) => match (bits, &t.sty) {\n-            (32, &ty::TyFloat(ast::FloatTy::TyF32)) |\n-            (64, &ty::TyFloat(ast::FloatTy::TyF64)) => {},\n+            (32, &ty::TyFloat(ast::FloatTy::F32)) |\n+            (64, &ty::TyFloat(ast::FloatTy::F64)) => {},\n             _ => simple_error(&format!(\"`{}`\", t),\n                               &format!(\"`f{n}`\", n = bits)),\n         },"}, {"sha": "becb0c93b261bdc8661701169278efb10a03bccf", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -357,11 +357,11 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyFloat(ast::TyF32) => {\n+            ty::TyFloat(ast::FloatTy::F32) => {\n                 let lang_def_id = self.tcx().lang_items.f32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyFloat(ast::TyF64) => {\n+            ty::TyFloat(ast::FloatTy::F64) => {\n                 let lang_def_id = self.tcx().lang_items.f64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "7a38a4a0cbf15a750388e9c317241af9373571eb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -2556,7 +2556,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             let arg_ty = structurally_resolved_type(fcx, arg.span,\n                                                     fcx.expr_ty(&**arg));\n             match arg_ty.sty {\n-                ty::TyFloat(ast::TyF32) => {\n+                ty::TyFloat(ast::FloatTy::F32) => {\n                     fcx.type_error_message(arg.span,\n                                            |t| {\n                         format!(\"can't pass an {} to variadic \\"}, {"sha": "e03bbfd09f251d1c8c7f4979eb5a8b5d2fd79965", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -191,14 +191,14 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"usize\",\n                                                   item.span);\n                     }\n-                    ty::TyFloat(ast::TyF32) => {\n+                    ty::TyFloat(ast::FloatTy::F32) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.f32_impl(),\n                                                   \"f32\",\n                                                   \"f32\",\n                                                   item.span);\n                     }\n-                    ty::TyFloat(ast::TyF64) => {\n+                    ty::TyFloat(ast::FloatTy::F64) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.f64_impl(),\n                                                   \"f64\","}, {"sha": "254106434faa4d293a791a96fd7252b1e4d304de", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -1650,8 +1650,8 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyUint(ast::TyU16) => Primitive(U16),\n             ty::TyUint(ast::TyU32) => Primitive(U32),\n             ty::TyUint(ast::TyU64) => Primitive(U64),\n-            ty::TyFloat(ast::TyF32) => Primitive(F32),\n-            ty::TyFloat(ast::TyF64) => Primitive(F64),\n+            ty::TyFloat(ast::FloatTy::F32) => Primitive(F32),\n+            ty::TyFloat(ast::FloatTy::F64) => Primitive(F64),\n             ty::TyStr => Primitive(Str),\n             ty::TyBox(t) => {\n                 let box_did = cx.tcx_opt().and_then(|tcx| {\n@@ -2629,8 +2629,8 @@ fn resolve_type(cx: &DocContext,\n             hir::TyUint(ast::TyU16) => return Primitive(U16),\n             hir::TyUint(ast::TyU32) => return Primitive(U32),\n             hir::TyUint(ast::TyU64) => return Primitive(U64),\n-            hir::TyFloat(ast::TyF32) => return Primitive(F32),\n-            hir::TyFloat(ast::TyF64) => return Primitive(F64),\n+            hir::TyFloat(ast::FloatTy::F32) => return Primitive(F32),\n+            hir::TyFloat(ast::FloatTy::F64) => return Primitive(F64),\n         },\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(special_idents::type_self.name.to_string());"}, {"sha": "a43874f99905dd2fe0567016999aa010c9cd884a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::FloatTy::*;\n pub use self::ForeignItem_::*;\n pub use self::IntTy::*;\n pub use self::Item_::*;\n@@ -1509,8 +1508,8 @@ impl fmt::Display for UintTy {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum FloatTy {\n-    TyF32,\n-    TyF64,\n+    F32,\n+    F64,\n }\n \n impl fmt::Debug for FloatTy {\n@@ -1528,15 +1527,15 @@ impl fmt::Display for FloatTy {\n impl FloatTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            TyF32 => \"f32\",\n-            TyF64 => \"f64\",\n+            FloatTy::F32 => \"f32\",\n+            FloatTy::F64 => \"f64\",\n         }\n     }\n \n     pub fn bit_width(&self) -> usize {\n         match *self {\n-            TyF32 => 32,\n-            TyF64 => 64,\n+            FloatTy::F32 => 32,\n+            FloatTy::F64 => 64,\n         }\n     }\n }"}, {"sha": "bbcb0c70ff4a991b86bb1dac0ea5df9684d047c4", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "patch": "@@ -452,8 +452,8 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n                       sd: &Handler, sp: Span) -> ast::Lit_ {\n     debug!(\"filtered_float_lit: {}, {:?}\", data, suffix);\n     match suffix.as_ref().map(|s| &**s) {\n-        Some(\"f32\") => ast::LitFloat(data, ast::TyF32),\n-        Some(\"f64\") => ast::LitFloat(data, ast::TyF64),\n+        Some(\"f32\") => ast::LitFloat(data, ast::FloatTy::F32),\n+        Some(\"f64\") => ast::LitFloat(data, ast::FloatTy::F64),\n         Some(suf) => {\n             if suf.len() >= 2 && looks_like_width_suffix(&['f'], suf) {\n                 // if it looks like a width, lets try to be helpful."}]}