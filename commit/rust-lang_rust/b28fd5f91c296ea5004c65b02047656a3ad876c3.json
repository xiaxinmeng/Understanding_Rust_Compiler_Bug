{"sha": "b28fd5f91c296ea5004c65b02047656a3ad876c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGZkNWY5MWMyOTZlYTUwMDRjNjViMDIwNDc2NTZhM2FkODc2YzM=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-11T18:22:37Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-11T18:22:37Z"}, "message": "deps: apply upstream rustc-* changes", "tree": {"sha": "2d7ca3304dbe069c7aae9f1ab78b6422f8da00ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d7ca3304dbe069c7aae9f1ab78b6422f8da00ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28fd5f91c296ea5004c65b02047656a3ad876c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28fd5f91c296ea5004c65b02047656a3ad876c3", "html_url": "https://github.com/rust-lang/rust/commit/b28fd5f91c296ea5004c65b02047656a3ad876c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28fd5f91c296ea5004c65b02047656a3ad876c3/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de4ff814b0a76546535478cd657dd1b5fd610ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4ff814b0a76546535478cd657dd1b5fd610ca2", "html_url": "https://github.com/rust-lang/rust/commit/de4ff814b0a76546535478cd657dd1b5fd610ca2"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "95fc4adec8dc8ff7b8d5a22e15f5b0c3a3714cca", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -27,7 +27,7 @@ pub enum FileName {\n impl From<rustc_span::FileName> for FileName {\n     fn from(name: rustc_span::FileName) -> FileName {\n         match name {\n-            rustc_span::FileName::Real(p) => FileName::Real(p),\n+            rustc_span::FileName::Real(p) => FileName::Real(p.into_local_path()),\n             rustc_span::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n             _ => unreachable!(),\n         }"}, {"sha": "ef7278a3a873aa26ae6e6ced12d69143ee5918ea", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -322,7 +322,11 @@ pub(crate) fn format_expr(\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n-        ast::ExprKind::LlvmInlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n+        // Style Guide RFC for InlineAsm variant pending\n+        // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n+        ast::ExprKind::LlvmInlineAsm(..) | ast::ExprKind::InlineAsm(..) => {\n+            Some(context.snippet(expr.span).to_owned())\n+        }\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)"}, {"sha": "77d670dca592913f089a1c02b0c2d09ee7f4e78c", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -1204,6 +1204,7 @@ pub(crate) fn convert_try_mac(\n             kind: ast::ExprKind::Try(parser.parse_expr().ok()?),\n             span: mac.span(), // incorrect span, but shouldn't matter too much\n             attrs: ast::AttrVec::new(),\n+            tokens: Some(ts),\n         })\n     } else {\n         None"}, {"sha": "1d22c25d922cccb5d3caacdeb1022254a98d87ab", "filename": "src/source_file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -68,7 +68,9 @@ where\n     impl From<&FileName> for rustc_span::FileName {\n         fn from(filename: &FileName) -> rustc_span::FileName {\n             match filename {\n-                FileName::Real(path) => rustc_span::FileName::Real(path.to_owned()),\n+                FileName::Real(path) => {\n+                    rustc_span::FileName::Real(rustc_span::RealFileName::Named(path.to_owned()))\n+                }\n                 FileName::Stdin => rustc_span::FileName::Custom(\"stdin\".to_owned()),\n             }\n         }"}, {"sha": "5045eab29dd58a8f86c5f487df7275138098055c", "filename": "src/syntux/session.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -66,7 +66,8 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         if let Some(primary_span) = &db.span.primary_span() {\n             let file_name = self.source_map.span_to_filename(*primary_span);\n-            if let rustc_span::FileName::Real(ref path) = file_name {\n+            if let rustc_span::FileName::Real(rustc_span::RealFileName::Named(ref path)) = file_name\n+            {\n                 if self\n                     .ignore_path_set\n                     .is_match(&FileName::Real(path.to_path_buf()))\n@@ -162,7 +163,9 @@ impl ParseSess {\n     pub(crate) fn is_file_parsed(&self, path: &Path) -> bool {\n         self.parse_sess\n             .source_map()\n-            .get_source_file(&rustc_span::FileName::Real(path.to_path_buf()))\n+            .get_source_file(&rustc_span::FileName::Real(\n+                rustc_span::RealFileName::Named(path.to_path_buf()),\n+            ))\n             .is_some()\n     }\n \n@@ -277,7 +280,7 @@ mod tests {\n         use crate::config::IgnoreList;\n         use crate::is_nightly_channel;\n         use crate::utils::mk_sp;\n-        use rustc_span::{FileName as SourceMapFileName, MultiSpan, DUMMY_SP};\n+        use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName, DUMMY_SP};\n         use std::path::PathBuf;\n \n         struct TestEmitter {\n@@ -337,7 +340,10 @@ mod tests {\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -361,7 +367,10 @@ mod tests {\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -384,7 +393,10 @@ mod tests {\n             let can_reset_errors = Rc::new(RefCell::new(false));\n             let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n-            source_map.new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), source);\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                source,\n+            );\n             let mut emitter = build_emitter(\n                 Rc::clone(&num_emitted_errors),\n                 Rc::clone(&can_reset_errors),\n@@ -411,12 +423,16 @@ mod tests {\n             let foo_source = String::from(r#\"pub fn foo() { 1x; }\"#);\n             let fatal_source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n-            source_map\n-                .new_source_file(SourceMapFileName::Real(PathBuf::from(\"bar.rs\")), bar_source);\n-            source_map\n-                .new_source_file(SourceMapFileName::Real(PathBuf::from(\"foo.rs\")), foo_source);\n             source_map.new_source_file(\n-                SourceMapFileName::Real(PathBuf::from(\"fatal.rs\")),\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"bar.rs\"))),\n+                bar_source,\n+            );\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n+                foo_source,\n+            );\n+            source_map.new_source_file(\n+                SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"fatal.rs\"))),\n                 fatal_source,\n             );\n             let mut emitter = build_emitter("}, {"sha": "bb0c6b7fb227232024a30d85bad28021b6d78092", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28fd5f91c296ea5004c65b02047656a3ad876c3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=b28fd5f91c296ea5004c65b02047656a3ad876c3", "patch": "@@ -487,6 +487,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Continue(..)\n         | ast::ExprKind::Err\n         | ast::ExprKind::Field(..)\n+        | ast::ExprKind::InlineAsm(..)\n         | ast::ExprKind::LlvmInlineAsm(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)"}]}