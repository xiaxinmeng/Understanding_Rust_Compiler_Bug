{"sha": "cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTdiMzlkYmRkOTYwZmRjNTI5ODIzYmMzZTlmNDBhNmVmOTZmM2M=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-06-16T21:59:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T21:59:09Z"}, "message": "Merge pull request #1022 from devonhollowood/extend-iter-nth\n\nExtend iter nth", "tree": {"sha": "55ea659c040bf731eac8be022403b5fd4f6d9ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ea659c040bf731eac8be022403b5fd4f6d9ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "html_url": "https://github.com/rust-lang/rust/commit/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3397afacbedaf8c8c8d8928b7c146ed000d3a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3397afacbedaf8c8c8d8928b7c146ed000d3a2c", "html_url": "https://github.com/rust-lang/rust/commit/f3397afacbedaf8c8c8d8928b7c146ed000d3a2c"}, {"sha": "0e04153a7051135dafd8c86b5eab3f591639a96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e04153a7051135dafd8c86b5eab3f591639a96b", "html_url": "https://github.com/rust-lang/rust/commit/0e04153a7051135dafd8c86b5eab3f591639a96b"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "f410ff990d9cde98175eb07a42fc41280b7650c7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "patch": "@@ -78,7 +78,7 @@ name\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | allow   | a comparison involving an upcast which is always true or false\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n-[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a slice or Vec\n+[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block"}, {"sha": "795e4e18d8780b2eb0951c0f97d63fb9ca911896", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "patch": "@@ -312,9 +312,10 @@ declare_lint! {\n     \"getting the inner pointer of a temporary `CString`\"\n }\n \n-/// **What it does:** This lint checks for use of `.iter().nth()` on a slice or Vec.\n+/// **What it does:** This lint checks for use of `.iter().nth()` (and the related\n+/// `.iter_mut().nth()`) on standard library types with O(1) element access.\n ///\n-/// **Why is this bad?** `.get()` is more efficient and more readable.\n+/// **Why is this bad?** `.get()` and `.get_mut()` are more efficient and more readable.\n ///\n /// **Known problems:** None.\n ///\n@@ -333,7 +334,7 @@ declare_lint! {\n declare_lint! {\n     pub ITER_NTH,\n     Warn,\n-    \"using `.iter().nth()` on a slice or Vec\"\n+    \"using `.iter().nth()` on a standard library type with O(1) element access\"\n }\n \n impl LintPass for Pass {\n@@ -389,7 +390,9 @@ impl LateLintPass for Pass {\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\", \"as_ptr\"]) {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"iter\", \"nth\"]) {\n-                    lint_iter_nth(cx, expr, arglists[0]);\n+                    lint_iter_nth(cx, expr, arglists[0], false);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"iter_mut\", \"nth\"]) {\n+                    lint_iter_nth(cx, expr, arglists[0], true);\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n@@ -645,21 +648,28 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n \n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n-fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs){\n-    // lint if the caller of `.iter().nth()` is a `slice`\n+fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs, is_mut: bool){\n+    let caller_type;\n+    let mut_str = if is_mut { \"_mut\" } else {\"\"};\n     if let Some(_) = derefs_to_slice(cx, &iter_args[0], &cx.tcx.expr_ty(&iter_args[0])) {\n-        span_lint(cx,\n-                  ITER_NTH,\n-                  expr.span,\n-                  \"called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\");\n+        caller_type = \"slice\";\n     }\n-    // lint if the caller of `.iter().nth()` is a `Vec`\n     else if match_type(cx, cx.tcx.expr_ty(&iter_args[0]), &paths::VEC) {\n-        span_lint(cx,\n-                  ITER_NTH,\n-                  expr.span,\n-                  \"called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\");\n+        caller_type = \"Vec\";\n+    }\n+    else if match_type(cx, cx.tcx.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n+        caller_type = \"VecDeque\";\n+    }\n+    else {\n+        return; // caller is not a type that we want to lint\n     }\n+    span_lint(\n+        cx,\n+        ITER_NTH,\n+        expr.span,\n+        &format!(\"called `.iter{0}().nth()` on a {1}. Calling `.get{0}()` is both faster and more readable\",\n+                 mut_str, caller_type)\n+    );\n }\n \n fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {"}, {"sha": "647cca5a39cc4d93c3ffd7ef1b6fc84dd216cf3d", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=cbe7b39dbdd960fdc529823bc3e9f40a6ef96f3c", "patch": "@@ -8,6 +8,7 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::HashSet;\n+use std::collections::VecDeque;\n use std::ops::Mul;\n \n struct T;\n@@ -136,6 +137,10 @@ impl HasIter {\n     fn iter(self) -> IteratorFalsePositives {\n         IteratorFalsePositives { foo: 0 }\n     }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n }\n \n /// Struct to generate false positive for Iterator-based lints\n@@ -325,15 +330,37 @@ fn or_fun_call() {\n \n /// Checks implementation of `ITER_NTH` lint\n fn iter_nth() {\n-    let some_vec = vec![0, 1, 2, 3];\n-    let bad_vec = some_vec.iter().nth(3);\n-    //~^ERROR called `.iter().nth()` on a Vec.\n-    let bad_slice = &some_vec[..].iter().nth(3);\n-    //~^ERROR called `.iter().nth()` on a slice.\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types\n+        let bad_vec = some_vec.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+        let bad_slice = &some_vec[..].iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+        let bad_vec_deque = some_vec_deque.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types\n+        let bad_vec = some_vec.iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+    }\n \n+    // Make sure we don't lint for non-relevant types\n     let false_positive = HasIter;\n     let ok = false_positive.iter().nth(3);\n-    // ^This should be okay, because false_positive is not a slice or Vec\n+    let ok_mut = false_positive.iter_mut().nth(3);\n }\n \n #[allow(similar_names)]"}]}