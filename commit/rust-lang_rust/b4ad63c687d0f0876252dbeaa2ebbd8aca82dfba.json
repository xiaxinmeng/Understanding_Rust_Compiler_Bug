{"sha": "b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "node_id": "C_kwDOAAsO6NoAKGI0YWQ2M2M2ODdkMGYwODc2MjUyZGJlYWEyZWJiZDhhY2E4MmRmYmE", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-02-01T17:32:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T17:32:43Z"}, "message": "Merge pull request #122 from bjorn3/rustup\n\nRustup to rustc 1.60.0-nightly (a00e130da 2022-01-29)", "tree": {"sha": "3ba953ceaf65b3ae8ecf36edb5671c2856bb1a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba953ceaf65b3ae8ecf36edb5671c2856bb1a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+W67CRBK7hj4Ov3rIwAACP0IAB7zvgDbXVk/8ZGhMfgBmsOT\nN3nVX8PaIwdb4yBpTBHW2Ny4Cul4ybVcoRoJuR7XECc06W9jzprQgz86tWtUbX8w\n2yR9LDjFIB7II9AjAA6RyEml6D7k+vUYuwYg1S36U1ZUmGGRX5ZYn3AjhHU5IQiU\nnfj0BzfQBnSXEr28rW1hwXC6wHSn9QCBEN1rN7U6iytvdNx1OoEd1TPXBN6vsIZw\nSVy0LEacgaSgpbbX+TlkNTl/qnDDzf+ReekNn1zWoe9FJoaD/FQBOqiEjENrj5Gc\ngkJoeuYSN88Z0TSyuxC+x6QhTZPsD/EAnAgMVhpKqO9x/PrJ4dIzuF9ZD6wkthQ=\n=XX7v\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ba953ceaf65b3ae8ecf36edb5671c2856bb1a9b\nparent 72d89b0c85a2a4e773061c4b850121dea153c00f\nparent 477d102697654e45d1a89e087eb3e0127aeb539d\nauthor antoyo <antoyo@users.noreply.github.com> 1643736763 -0500\ncommitter GitHub <noreply@github.com> 1643736763 -0500\n\nMerge pull request #122 from bjorn3/rustup\n\nRustup to rustc 1.60.0-nightly (a00e130da 2022-01-29)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "html_url": "https://github.com/rust-lang/rust/commit/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d89b0c85a2a4e773061c4b850121dea153c00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d89b0c85a2a4e773061c4b850121dea153c00f", "html_url": "https://github.com/rust-lang/rust/commit/72d89b0c85a2a4e773061c4b850121dea153c00f"}, {"sha": "477d102697654e45d1a89e087eb3e0127aeb539d", "url": "https://api.github.com/repos/rust-lang/rust/commits/477d102697654e45d1a89e087eb3e0127aeb539d", "html_url": "https://github.com/rust-lang/rust/commit/477d102697654e45d1a89e087eb3e0127aeb539d"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "a932c1c8372b488dc479bbba4d8fd85f864d14f5", "filename": "config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -38,7 +38,7 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=\"$linker -Cpanic=abort -Zsymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n+export RUSTFLAGS=\"$linker -Cpanic=abort -Csymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n \n # FIXME(antoyo): remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then"}, {"sha": "301b3f9bde4dd73ff882ffbe675b4e2053758984", "filename": "patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/patches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/patches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-core-Disable-not-compiling-tests.patch?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -22,7 +22,7 @@ index 0000000..46fd999\n +[package]\n +name = \"core\"\n +version = \"0.0.0\"\n-+edition = \"2018\"\n++edition = \"2021\"\n +\n +[lib]\n +name = \"coretests\""}, {"sha": "bf316efc324b9ba755d6a987a01e2199c90fe1eb", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-30\"\n+channel = \"nightly-2022-01-30\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "8a74c4c07e0cf2ba331aec30a9839942b7ce0d99", "filename": "src/asm.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -4,9 +4,8 @@ use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::{AsmBuilderMethods, AsmMethods, BaseTypeMethods, BuilderMethods, GlobalAsmOperandRef, InlineAsmOperandRef};\n \n-use rustc_hir::LlvmInlineAsmInner;\n use rustc_middle::{bug, ty::Instance};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::asm::*;\n \n use std::borrow::Cow;\n@@ -106,17 +105,6 @@ enum ConstraintOrRegister {\n \n \n impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n-    fn codegen_llvm_inline_asm(&mut self, _ia: &LlvmInlineAsmInner, _outputs: Vec<PlaceRef<'tcx, RValue<'gcc>>>, _inputs: Vec<RValue<'gcc>>, span: Span) -> bool {\n-        self.sess().struct_span_err(span, \"GCC backend does not support `llvm_asm!`\")\n-            .help(\"consider using the `asm!` macro instead\")\n-            .emit();\n-\n-        // We return `true` even if we've failed to generate the asm\n-        // because we want to suppress the \"malformed inline assembly\" error\n-        // generated by the frontend.\n-        true\n-    }\n-\n     fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n         if options.contains(InlineAsmOptions::MAY_UNWIND) {\n             self.sess()\n@@ -184,7 +172,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                             let is_target_supported = reg.reg_class().supported_types(asm_arch).iter()\n                                 .any(|&(_, feature)| {\n                                     if let Some(feature) = feature {\n-                                        self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                        self.tcx.sess.target_features.contains(&feature)\n                                     } else {\n                                         true // Register class is unconditionally supported\n                                     }\n@@ -572,6 +560,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => unimplemented!(),\n+            InlineAsmRegClass::Msp430(_) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => unimplemented!(),\n@@ -634,6 +623,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => cx.type_f32(),\n+        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n@@ -741,6 +731,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n         InlineAsmRegClass::Mips(_) => unimplemented!(),\n+        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n         InlineAsmRegClass::Nvptx(_) => unimplemented!(),\n         InlineAsmRegClass::PowerPC(_) => unimplemented!(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)"}, {"sha": "78e765fbc86dc0c852f6af78fc44310d26a6c226", "filename": "src/builder.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -1110,7 +1110,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         aggregate_value\n     }\n \n-    fn landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>, _num_clauses: usize) -> RValue<'gcc> {\n+    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n+        // TODO(antoyo)\n+    }\n+\n+    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n@@ -1121,38 +1125,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // rustc_codegen_ssa now calls the unwinding builder methods even on panic=abort.\n     }\n \n-    fn set_cleanup(&mut self, _landing_pad: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n-    fn resume(&mut self, _exn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn resume(&mut self, _exn: RValue<'gcc>) {\n         unimplemented!();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) -> RValue<'gcc> {\n+    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) {\n         unimplemented!();\n     }\n \n     fn catch_pad(&mut self, _parent: RValue<'gcc>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn catch_switch(&mut self, _parent: Option<RValue<'gcc>>, _unwind: Option<Block<'gcc>>, _num_handlers: usize) -> RValue<'gcc> {\n+    fn catch_switch(\n+        &mut self,\n+        _parent: Option<RValue<'gcc>>,\n+        _unwind: Option<Block<'gcc>>,\n+        _handlers: &[Block<'gcc>],\n+    ) -> RValue<'gcc> {\n         unimplemented!();\n     }\n \n-    fn add_handler(&mut self, _catch_switch: RValue<'gcc>, _handler: Block<'gcc>) {\n-        unimplemented!();\n-    }\n-\n-    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n     // Atomic Operations\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");\n@@ -1257,8 +1254,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n-        unimplemented!();\n+    fn apply_attrs_to_cleanup_callsite(&mut self, _llret: RValue<'gcc>) {\n+        // TODO\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "e95058085216e94aa9482e579ad4b21097e29b33", "filename": "src/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -121,10 +121,10 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         if self.is_int_type_or_bool(typ) {\n             TypeKind::Integer\n         }\n-        else if typ == self.float_type {\n+        else if typ.is_compatible_with(self.float_type) {\n             TypeKind::Float\n         }\n-        else if typ == self.double_type {\n+        else if typ.is_compatible_with(self.double_type) {\n             TypeKind::Double\n         }\n         else if typ.dyncast_vector().is_some() {"}, {"sha": "281e49fa8a35ed4b6344c58688b792236b42fa3d", "filename": "src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -57,7 +57,7 @@ pub fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLa\n                 (layout.ty.kind(), &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n-                    write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n+                    write!(&mut name, \"::{}\", def.variants[index].name).unwrap();\n                 }\n             }\n             if let (&ty::Generator(_, _, _), &Variants::Single { index }) ="}, {"sha": "ebe663a0b742613bda0f35f9887a5c8686fcdba4", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=b4ad63c687d0f0876252dbeaa2ebbd8aca82dfba", "patch": "@@ -195,7 +195,7 @@ EOF\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n     rm src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs || true # TODO(antoyo): Enable back this test if I ever implement the llvm_asm! macro.\n \n-    RUSTC_ARGS=\"-Zpanic-abort-tests -Zsymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+    RUSTC_ARGS=\"-Zpanic-abort-tests -Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n \n     echo \"[TEST] rustc test suite\"\n     COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/ui/ --rustc-args \"$RUSTC_ARGS\""}]}