{"sha": "f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZWJiM2YwOWZhOThjZjU1ODNmNmJkOGQ1Njc3YTFmNGRkMDk0MWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-27T14:48:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-27T14:48:50Z"}, "message": "fix wording on panics in binary operators on RefCells\"", "tree": {"sha": "99b87e612a1e36e4e70419841591991484a61401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99b87e612a1e36e4e70419841591991484a61401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "html_url": "https://github.com/rust-lang/rust/commit/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bde855518b9f21fe877e1ed62eaa114861131d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde855518b9f21fe877e1ed62eaa114861131d15", "html_url": "https://github.com/rust-lang/rust/commit/bde855518b9f21fe877e1ed62eaa114861131d15"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "419ae96b94bd6caf4fc425b9363239c19d490dfc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "patch": "@@ -885,7 +885,7 @@ impl<T:Default> Default for RefCell<T> {\n impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n@@ -899,39 +899,39 @@ impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n         self.borrow().partial_cmp(&*other.borrow())\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn lt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() < *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn le(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() <= *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn gt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() > *other.borrow()\n     }\n \n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn ge(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() >= *other.borrow()\n@@ -942,7 +942,7 @@ impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n impl<T: ?Sized + Ord> Ord for RefCell<T> {\n     /// # Panics\n     ///\n-    /// Panics if the value is currently mutably borrowed.\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn cmp(&self, other: &RefCell<T>) -> Ordering {\n         self.borrow().cmp(&*other.borrow())"}]}