{"sha": "a5c88366f83893364533421b3b21306c246c17f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Yzg4MzY2ZjgzODkzMzY0NTMzNDIxYjNiMjEzMDZjMjQ2YzE3ZjM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-10T23:59:41Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-11T19:02:18Z"}, "message": "treemap: indentation fixes", "tree": {"sha": "5f17ad767da8da182b0147a0cabb098c1aaeefdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f17ad767da8da182b0147a0cabb098c1aaeefdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c88366f83893364533421b3b21306c246c17f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c88366f83893364533421b3b21306c246c17f3", "html_url": "https://github.com/rust-lang/rust/commit/a5c88366f83893364533421b3b21306c246c17f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c88366f83893364533421b3b21306c246c17f3/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58cec701277cc7dd881bb41d7f9469f077574a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/58cec701277cc7dd881bb41d7f9469f077574a75", "html_url": "https://github.com/rust-lang/rust/commit/58cec701277cc7dd881bb41d7f9469f077574a75"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "45ae11ed76945517a2c4daeabaf4b5faeeaf852e", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a5c88366f83893364533421b3b21306c246c17f3/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c88366f83893364533421b3b21306c246c17f3/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=a5c88366f83893364533421b3b21306c246c17f3", "patch": "@@ -149,9 +149,9 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n             match *current {\n               Some(ref r) => {\n                 match key.cmp(&r.key) {\n-                   Less => current = &r.left,\n-                   Greater => current = &r.right,\n-                   Equal => return Some(&r.value)\n+                  Less => current = &r.left,\n+                  Greater => current = &r.right,\n+                  Equal => return Some(&r.value)\n                 }\n               }\n               None => return None\n@@ -532,15 +532,15 @@ pub impl<K: TotalOrd, V> TreeNode<K, V> {\n }\n \n pure fn each<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n-                        f: &fn(&(&r/K, &r/V)) -> bool) {\n+                             f: &fn(&(&r/K, &r/V)) -> bool) {\n     for node.each |x| {\n         each(&x.left, f);\n         if f(&(&x.key, &x.value)) { each(&x.right, f) }\n     }\n }\n \n pure fn each_reverse<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n-                                f: &fn(&(&r/K, &r/V)) -> bool) {\n+                                     f: &fn(&(&r/K, &r/V)) -> bool) {\n     for node.each |x| {\n         each_reverse(&x.right, f);\n         if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n@@ -665,20 +665,20 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n                 skew(save);\n \n                 match save.right {\n-                    Some(ref mut right) => {\n-                        skew(right);\n-                        match right.right {\n-                            Some(ref mut x) => { skew(x) },\n-                            None => ()\n-                        }\n+                  Some(ref mut right) => {\n+                    skew(right);\n+                    match right.right {\n+                      Some(ref mut x) => { skew(x) },\n+                      None => ()\n                     }\n-                    None => ()\n+                  }\n+                  None => ()\n                 }\n \n                 split(save);\n                 match save.right {\n-                    Some(ref mut x) => { split(x) },\n-                    None => ()\n+                  Some(ref mut x) => { split(x) },\n+                  None => ()\n                 }\n             }\n "}]}