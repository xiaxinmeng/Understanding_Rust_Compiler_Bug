{"sha": "5ea69781f46a556b3d6f7e8e52d5641d61d12131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTY5NzgxZjQ2YTU1NmIzZDZmN2U4ZTUyZDU2NDFkNjFkMTIxMzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T23:22:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T23:22:10Z"}, "message": "Rollup merge of #67966 - popzxc:core-std-matches, r=Centril\n\nUse matches macro in libcore and libstd\n\nThis PR replaces matches like\n\n```rust\nmatch var {\n    value => true,\n    _ => false,\n}\n```\n\nwith use of `matches!` macro.\n\nr? @Centril", "tree": {"sha": "a5024d981e459032f7ca7c9c59485fd783ef0405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5024d981e459032f7ca7c9c59485fd783ef0405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea69781f46a556b3d6f7e8e52d5641d61d12131", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFmQiCRBK7hj4Ov3rIwAAdHIIAAaZFsVljpIuOyLYc2yiF5fI\nBFJrhsH78+ouyuVOpgXPjq7zyMI4fdmFtePrIG3mm4o5dMW0t6BykG1ocNwHHgsD\nHHMMr6PmbDmwcx9ZBNalrEkGxTaDf4vyWsx8MfmLnDAkPVyhDgpwL6VoKPR+gmcM\njhne2yb39rjwRKu53MQ5Ah9dWeaVekdnbJ/r+vXWxo+1YD1l+jRPNRPOi+dSCcH3\n7ih49zHUky855j2giIgwyEz+JFRdsJu2YlbppXYxk9Ckq/JhhTdMg+ZpfEjLMge3\njdJrouKC68mNzjccynHgomLIQoWoT33n94KEd76+B0E6RVrC+9jOw4OPyAUd/+w=\n=LEwz\n-----END PGP SIGNATURE-----\n", "payload": "tree a5024d981e459032f7ca7c9c59485fd783ef0405\nparent 11f0013378f8a7ec7a2ca3e09afd78e1397273e7\nparent f720469fd0c4dff6d92e2f778ea2f252f76dcc2e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578525730 +0100\ncommitter GitHub <noreply@github.com> 1578525730 +0100\n\nRollup merge of #67966 - popzxc:core-std-matches, r=Centril\n\nUse matches macro in libcore and libstd\n\nThis PR replaces matches like\n\n```rust\nmatch var {\n    value => true,\n    _ => false,\n}\n```\n\nwith use of `matches!` macro.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea69781f46a556b3d6f7e8e52d5641d61d12131", "html_url": "https://github.com/rust-lang/rust/commit/5ea69781f46a556b3d6f7e8e52d5641d61d12131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea69781f46a556b3d6f7e8e52d5641d61d12131/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f0013378f8a7ec7a2ca3e09afd78e1397273e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f0013378f8a7ec7a2ca3e09afd78e1397273e7", "html_url": "https://github.com/rust-lang/rust/commit/11f0013378f8a7ec7a2ca3e09afd78e1397273e7"}, {"sha": "f720469fd0c4dff6d92e2f778ea2f252f76dcc2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f720469fd0c4dff6d92e2f778ea2f252f76dcc2e", "html_url": "https://github.com/rust-lang/rust/commit/f720469fd0c4dff6d92e2f778ea2f252f76dcc2e"}], "stats": {"total": 147, "additions": 29, "deletions": 118}, "files": [{"sha": "3ea4baa57b49efb1acf3de276ced9d3e1150b07d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -821,10 +821,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lt(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Less) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Less))\n     }\n \n     /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\n@@ -843,10 +840,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Less) | Some(Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Less) | Some(Equal))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n@@ -864,10 +858,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gt(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Greater) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Greater))\n     }\n \n     /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\n@@ -886,10 +877,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ge(&self, other: &Rhs) -> bool {\n-        match self.partial_cmp(other) {\n-            Some(Greater) | Some(Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Greater) | Some(Equal))\n     }\n }\n "}, {"sha": "21a569867b17830626cf0f595b6512025becce77", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -2968,10 +2968,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        match self.partial_cmp(other) {\n-            Some(Ordering::Less) | Some(Ordering::Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Ordering::Less) | Some(Ordering::Equal))\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n@@ -3011,10 +3008,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        match self.partial_cmp(other) {\n-            Some(Ordering::Greater) | Some(Ordering::Equal) => true,\n-            _ => false,\n-        }\n+        matches!(self.partial_cmp(other), Some(Ordering::Greater) | Some(Ordering::Equal))\n     }\n \n     /// Checks if the elements of this iterator are sorted."}, {"sha": "072966abf2c40226d928c51e7d16bc41aac76d1d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 40, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -4286,10 +4286,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n-        match *self {\n-            b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -4321,10 +4318,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n-        match *self {\n-            b'A'..=b'Z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'A'..=b'Z')\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -4356,10 +4350,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n-        match *self {\n-            b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -4394,10 +4385,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -4429,10 +4417,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9')\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -4467,10 +4452,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n-        match *self {\n-            b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -4506,10 +4488,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n-        match *self {\n-            b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -4541,10 +4520,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n-        match *self {\n-            b'!'..=b'~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'!'..=b'~')\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -4593,10 +4569,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n-        match *self {\n-            b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -4630,10 +4603,7 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n-        match *self {\n-            b'\\0'..=b'\\x1F' | b'\\x7F' => true,\n-            _ => false,\n-        }\n+        matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')\n     }\n }\n "}, {"sha": "a471b174534aa4e11d16781ecb1d1731d00ace64", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -187,10 +187,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n-        match *self {\n-            Some(_) => true,\n-            None => false,\n-        }\n+        matches!(*self, Some(_))\n     }\n \n     /// Returns `true` if the option is a [`None`] value."}, {"sha": "c6062493b8608846ebc21a2116dd635a4fa10a13", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -282,10 +282,7 @@ impl<T, E> Result<T, E> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_ok(&self) -> bool {\n-        match *self {\n-            Ok(_) => true,\n-            Err(_) => false,\n-        }\n+        matches!(*self, Ok(_))\n     }\n \n     /// Returns `true` if the result is [`Err`]."}, {"sha": "46d9499394a381c33eb8450ecb16a57b5739247e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -46,10 +46,7 @@ pub trait Pattern<'a>: Sized {\n     /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        match self.into_searcher(haystack).next() {\n-            SearchStep::Match(0, _) => true,\n-            _ => false,\n-        }\n+        matches!(self.into_searcher(haystack).next(), SearchStep::Match(0, _))\n     }\n \n     /// Checks whether the pattern matches at the back of the haystack\n@@ -58,10 +55,7 @@ pub trait Pattern<'a>: Sized {\n     where\n         Self::Searcher: ReverseSearcher<'a>,\n     {\n-        match self.into_searcher(haystack).next_back() {\n-            SearchStep::Match(_, j) if haystack.len() == j => true,\n-            _ => false,\n-        }\n+        matches!(self.into_searcher(haystack).next_back(), SearchStep::Match(_, j) if haystack.len() == j)\n     }\n }\n "}, {"sha": "b3a4bd20b8f042fabf7d818fab9eda88a0bd861b", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -39,10 +39,7 @@ impl<T> Poll<T> {\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn is_ready(&self) -> bool {\n-        match *self {\n-            Poll::Ready(_) => true,\n-            Poll::Pending => false,\n-        }\n+        matches!(*self, Poll::Ready(_))\n     }\n \n     /// Returns `true` if this is `Poll::Pending`"}, {"sha": "a59d7f0263bb0a3b7955d9cb407a3b7b7c34be45", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -227,10 +227,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match *self {\n-            SocketAddr::V4(_) => true,\n-            SocketAddr::V6(_) => false,\n-        }\n+        matches!(*self, SocketAddr::V4(_))\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n@@ -252,10 +249,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match *self {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(_) => true,\n-        }\n+        matches!(*self, SocketAddr::V6(_))\n     }\n }\n "}, {"sha": "6410a4f2b65b3762fd15044a8de4a862990fb69c", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -281,10 +281,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match self {\n-            IpAddr::V4(_) => true,\n-            IpAddr::V6(_) => false,\n-        }\n+        matches!(self, IpAddr::V4(_))\n     }\n \n     /// Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.\n@@ -303,10 +300,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match self {\n-            IpAddr::V4(_) => false,\n-            IpAddr::V6(_) => true,\n-        }\n+        matches!(self, IpAddr::V6(_))\n     }\n }\n "}, {"sha": "fbbdc1ddac297acc1a7e4c155f7466cc0c586155", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -224,18 +224,12 @@ impl<'a> Prefix<'a> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n-        match *self {\n-            Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(..))\n     }\n \n     #[inline]\n     fn is_drive(&self) -> bool {\n-        match *self {\n-            Prefix::Disk(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Prefix::Disk(_))\n     }\n \n     #[inline]"}, {"sha": "01314370ce3994842a625c213a233ef3cb3b5414", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -199,10 +199,7 @@ mod tests {\n \n         // At this point, all spawned threads should be blocked,\n         // so we shouldn't get anything from the port\n-        assert!(match rx.try_recv() {\n-            Err(TryRecvError::Empty) => true,\n-            _ => false,\n-        });\n+        assert!(matches!(rx.try_recv(), Err(TryRecvError::Empty)));\n \n         let mut leader_found = barrier.wait().is_leader();\n "}, {"sha": "5b41525e06aaaccaa565945e47bb733e0b83c783", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea69781f46a556b3d6f7e8e52d5641d61d12131/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=5ea69781f46a556b3d6f7e8e52d5641d61d12131", "patch": "@@ -118,12 +118,7 @@ impl<T> Packet<T> {\n     // Just tests whether this channel has been sent on or not, this is only\n     // safe to use from the sender.\n     pub fn sent(&self) -> bool {\n-        unsafe {\n-            match *self.upgrade.get() {\n-                NothingSent => false,\n-                _ => true,\n-            }\n-        }\n+        unsafe { !matches!(*self.upgrade.get(), NothingSent) }\n     }\n \n     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {"}]}