{"sha": "d16d02b0114bbe86e5b674bf15b324cf7805b059", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNmQwMmIwMTE0YmJlODZlNWI2NzRiZjE1YjMyNGNmNzgwNWIwNTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-09T01:10:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-09T01:10:07Z"}, "message": "Rollup merge of #71890 - cuviper:simple-error-Registry, r=cramertj\n\nSimplify the error Registry methods a little", "tree": {"sha": "95236526de7a89025cebe142ab070ba673cd21b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95236526de7a89025cebe142ab070ba673cd21b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16d02b0114bbe86e5b674bf15b324cf7805b059", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetgLvCRBK7hj4Ov3rIwAAdHIIAECeSN6lgTmHCmlkgaB0lVyl\nKHK9FcQ2BFNE5gAhLK28MHaxMJDyUceqg/394QGPIyrj8pxum/qzGUimAOMm5rpu\nbLZikRRtydHINUT7MxkiQnAqKVc0eRe/WJunAhdep02tts25LlHcyuSDgZiKp8in\n1GwWjhG9NEeDozoM3iZFnUy4fA2Bmbj3AFsbl9bQjb23++uP0Nuvh2LyC5Md8K++\noNjwi+rAt0Xm6CpnVBk/MMCfDBhT3s5b+M++RNxbLtH5/VwH/Aa1JTluJIrEbyu3\njKXiIPhxWC2syepT1U3iessCURh0FOZvKJuu3+Q+cjL3K/q3sNduFXbIEsM24v4=\n=0qF1\n-----END PGP SIGNATURE-----\n", "payload": "tree 95236526de7a89025cebe142ab070ba673cd21b8\nparent f16c27f1c4821a0d763cb4a5a2c1d518126f024b\nparent 1a439d286530a020bbf7683011f07227e236bd7f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588986607 +0200\ncommitter GitHub <noreply@github.com> 1588986607 +0200\n\nRollup merge of #71890 - cuviper:simple-error-Registry, r=cramertj\n\nSimplify the error Registry methods a little\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16d02b0114bbe86e5b674bf15b324cf7805b059", "html_url": "https://github.com/rust-lang/rust/commit/d16d02b0114bbe86e5b674bf15b324cf7805b059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16d02b0114bbe86e5b674bf15b324cf7805b059/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16c27f1c4821a0d763cb4a5a2c1d518126f024b", "html_url": "https://github.com/rust-lang/rust/commit/f16c27f1c4821a0d763cb4a5a2c1d518126f024b"}, {"sha": "1a439d286530a020bbf7683011f07227e236bd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a439d286530a020bbf7683011f07227e236bd7f", "html_url": "https://github.com/rust-lang/rust/commit/1a439d286530a020bbf7683011f07227e236bd7f"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "b1d770d5bd5237e12f3a571d510512c822dff184", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d16d02b0114bbe86e5b674bf15b324cf7805b059/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16d02b0114bbe86e5b674bf15b324cf7805b059/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=d16d02b0114bbe86e5b674bf15b324cf7805b059", "patch": "@@ -10,12 +10,12 @@ pub struct Registry {\n \n impl Registry {\n     pub fn new(long_descriptions: &[(&'static str, Option<&'static str>)]) -> Registry {\n-        Registry { long_descriptions: long_descriptions.iter().cloned().collect() }\n+        Registry { long_descriptions: long_descriptions.iter().copied().collect() }\n     }\n \n     /// This will panic if an invalid error code is passed in\n     pub fn find_description(&self, code: &str) -> Option<&'static str> {\n-        self.try_find_description(code).unwrap()\n+        self.long_descriptions[code]\n     }\n     /// Returns `InvalidErrorCode` if the code requested does not exist in the\n     /// registry. Otherwise, returns an `Option` where `None` means the error\n@@ -24,9 +24,6 @@ impl Registry {\n         &self,\n         code: &str,\n     ) -> Result<Option<&'static str>, InvalidErrorCode> {\n-        if !self.long_descriptions.contains_key(code) {\n-            return Err(InvalidErrorCode);\n-        }\n-        Ok(*self.long_descriptions.get(code).unwrap())\n+        self.long_descriptions.get(code).copied().ok_or(InvalidErrorCode)\n     }\n }"}]}