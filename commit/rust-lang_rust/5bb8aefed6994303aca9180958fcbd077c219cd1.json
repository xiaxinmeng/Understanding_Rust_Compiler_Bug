{"sha": "5bb8aefed6994303aca9180958fcbd077c219cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjhhZWZlZDY5OTQzMDNhY2E5MTgwOTU4ZmNiZDA3N2MyMTljZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T10:11:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T10:11:05Z"}, "message": "auto merge of #9007 : dcrewi/rust/random-bigints, r=huonw", "tree": {"sha": "a0ec69eafdd137af52123005d32695b0a227b63c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ec69eafdd137af52123005d32695b0a227b63c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb8aefed6994303aca9180958fcbd077c219cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb8aefed6994303aca9180958fcbd077c219cd1", "html_url": "https://github.com/rust-lang/rust/commit/5bb8aefed6994303aca9180958fcbd077c219cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb8aefed6994303aca9180958fcbd077c219cd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8cbf41064869f0e99137d64cc236831c565247c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cbf41064869f0e99137d64cc236831c565247c", "html_url": "https://github.com/rust-lang/rust/commit/f8cbf41064869f0e99137d64cc236831c565247c"}, {"sha": "4946e0ea5ee727893a74321be2fb3b291f320809", "url": "https://api.github.com/repos/rust-lang/rust/commits/4946e0ea5ee727893a74321be2fb3b291f320809", "html_url": "https://github.com/rust-lang/rust/commit/4946e0ea5ee727893a74321be2fb3b291f320809"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "c46652b6c4f211185c21920b94f67dc577638174", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5bb8aefed6994303aca9180958fcbd077c219cd1/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb8aefed6994303aca9180958fcbd077c219cd1/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=5bb8aefed6994303aca9180958fcbd077c219cd1", "patch": "@@ -23,6 +23,7 @@ use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use std::int;\n use std::num;\n use std::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n+use std::rand::{Rng, RngUtil};\n use std::str;\n use std::uint;\n use std::vec;\n@@ -1088,6 +1089,53 @@ impl FromStrRadix for BigInt {\n     }\n }\n \n+trait RandBigInt {\n+    /// Generate a random BigUint of the given bit size.\n+    fn gen_biguint(&mut self, bit_size: uint) -> BigUint;\n+\n+    /// Generate a random BigInt of the given bit size.\n+    fn gen_bigint(&mut self, bit_size: uint) -> BigInt;\n+}\n+\n+impl<R: Rng> RandBigInt for R {\n+    /// Generate a random BigUint of the given bit size.\n+    fn gen_biguint(&mut self, bit_size: uint) -> BigUint {\n+        let (digits, rem) = bit_size.div_rem(&BigDigit::bits);\n+        let mut data = vec::with_capacity(digits+1);\n+        for _ in range(0, digits) {\n+            data.push(self.gen());\n+        }\n+        if rem > 0 {\n+            let final_digit: BigDigit = self.gen();\n+            data.push(final_digit >> (BigDigit::bits - rem));\n+        }\n+        return BigUint::new(data);\n+    }\n+\n+    /// Generate a random BigInt of the given bit size.\n+    fn gen_bigint(&mut self, bit_size: uint) -> BigInt {\n+        // Generate a random BigUint...\n+        let biguint = self.gen_biguint(bit_size);\n+        // ...and then randomly assign it a Sign...\n+        let sign = if biguint.is_zero() {\n+            // ...except that if the BigUint is zero, we need to try\n+            // again with probability 0.5. This is because otherwise,\n+            // the probability of generating a zero BigInt would be\n+            // double that of any other number.\n+            if self.gen() {\n+                return self.gen_bigint(bit_size);\n+            } else {\n+                Zero\n+            }\n+        } else if self.gen() {\n+            Plus\n+        } else {\n+            Minus\n+        };\n+        return BigInt::from_biguint(sign, biguint);\n+    }\n+}\n+\n impl BigInt {\n     /// Creates and initializes an BigInt.\n     #[inline]\n@@ -1149,6 +1197,7 @@ mod biguint_tests {\n     use std::cmp::{Less, Equal, Greater};\n     use std::int;\n     use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::rand::{task_rng};\n     use std::str;\n     use std::uint;\n     use std::vec;\n@@ -1656,6 +1705,13 @@ mod biguint_tests {\n         check(20, \"2432902008176640000\");\n         check(30, \"265252859812191058636308480000000\");\n     }\n+\n+    #[test]\n+    fn test_rand() {\n+        let mut rng = task_rng();\n+        let _n: BigUint = rng.gen_biguint(137);\n+        assert!(rng.gen_biguint(0).is_zero());\n+    }\n }\n \n #[cfg(test)]\n@@ -1665,6 +1721,7 @@ mod bigint_tests {\n     use std::cmp::{Less, Equal, Greater};\n     use std::int;\n     use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::rand::{task_rng};\n     use std::uint;\n \n     #[test]\n@@ -2085,6 +2142,13 @@ mod bigint_tests {\n         let zero: BigInt = Zero::zero();\n         assert_eq!(-zero, zero);\n     }\n+\n+    #[test]\n+    fn test_rand() {\n+        let mut rng = task_rng();\n+        let _n: BigInt = rng.gen_bigint(137);\n+        assert!(rng.gen_bigint(0).is_zero());\n+    }\n }\n \n #[cfg(test)]"}]}