{"sha": "203e6d265d88bee97f89bb0529f3a33cb46e0477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2U2ZDI2NWQ4OGJlZTk3Zjg5YmIwNTI5ZjNhMzNjYjQ2ZTA0Nzc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-01-27T07:28:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-27T07:28:28Z"}, "message": "Merge pull request #3294 from rchaser53/issue-3278\n\nchange new line point in the case of no args", "tree": {"sha": "9fae0cdc6eac99af15551a5fdbb4268470e509ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fae0cdc6eac99af15551a5fdbb4268470e509ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203e6d265d88bee97f89bb0529f3a33cb46e0477", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcTV2cCRBK7hj4Ov3rIwAAdHIIAIK2gTl2S6c/g08vC1CgR+tE\n2TRxyHACL1mBVYUiqQNTBX3dWt9q75m9Qrj4x7XW6VcCkOX1TwC+DgP6fPazkrA7\nMUWEGq1JQT07lDb3zFQl11imNKmiPhens2gq29z3BAbaIEB9htQpdPR4/8AYiiib\nmP0fDFTdcPnj902iTRAErVvVITT/GcOJriEfm2LeAQP8nfmuavHhWGtMFYwTtk93\nJG8ySxGVz1NQ0XNBWkd7JAbRKd0iDSoFSR+MPmWPbbAEJrDQ3RO/RfDjIuIjLYXW\nNo0x28hyQyxssSiQhCodiyKuMB3WFmhkTeKmaSVkEb/46QHyhHDXy5G2uZOTnww=\n=JIE9\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fae0cdc6eac99af15551a5fdbb4268470e509ff\nparent 35d5ef78282ff3011d0a73d40c11ac6bd62dd009\nparent f92f3e3bda3550752b2483bb6b6e4c91f24a34f1\nauthor Seiichi Uchida <seuchida@gmail.com> 1548574108 +0900\ncommitter GitHub <noreply@github.com> 1548574108 +0900\n\nMerge pull request #3294 from rchaser53/issue-3278\n\nchange new line point in the case of no args"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203e6d265d88bee97f89bb0529f3a33cb46e0477", "html_url": "https://github.com/rust-lang/rust/commit/203e6d265d88bee97f89bb0529f3a33cb46e0477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203e6d265d88bee97f89bb0529f3a33cb46e0477/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d5ef78282ff3011d0a73d40c11ac6bd62dd009", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d5ef78282ff3011d0a73d40c11ac6bd62dd009", "html_url": "https://github.com/rust-lang/rust/commit/35d5ef78282ff3011d0a73d40c11ac6bd62dd009"}, {"sha": "f92f3e3bda3550752b2483bb6b6e4c91f24a34f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92f3e3bda3550752b2483bb6b6e4c91f24a34f1", "html_url": "https://github.com/rust-lang/rust/commit/f92f3e3bda3550752b2483bb6b6e4c91f24a34f1"}], "stats": {"total": 112, "additions": 107, "deletions": 5}, "files": [{"sha": "a2bf023a33eb475c2f37780bdd6914a7341c289a", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -24,7 +24,7 @@ use comment::{\n     combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n     recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented,\n };\n-use config::{BraceStyle, Config, Density, IndentStyle};\n+use config::{BraceStyle, Config, Density, IndentStyle, Version};\n use expr::{\n     format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n     ExprType, RhsTactics,\n@@ -2064,6 +2064,8 @@ fn rewrite_fn_base(\n     } && !fd.inputs.is_empty();\n \n     let mut args_last_line_contains_comment = false;\n+    let mut no_args_and_over_max_width = false;\n+\n     if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n         result.push_str(&arg_indent.to_string_with_newline(context.config));\n@@ -2083,10 +2085,19 @@ fn rewrite_fn_base(\n             .lines()\n             .last()\n             .map_or(false, |last_line| last_line.contains(\"//\"));\n-        if closing_paren_overflow_max_width || args_last_line_contains_comment {\n-            result.push_str(&indent.to_string_with_newline(context.config));\n+\n+        if context.config.version() == Version::Two {\n+            result.push(')');\n+            if closing_paren_overflow_max_width || args_last_line_contains_comment {\n+                result.push_str(&indent.to_string_with_newline(context.config));\n+                no_args_and_over_max_width = true;\n+            }\n+        } else {\n+            if closing_paren_overflow_max_width || args_last_line_contains_comment {\n+                result.push_str(&indent.to_string_with_newline(context.config));\n+            }\n+            result.push(')');\n         }\n-        result.push(')');\n     }\n \n     // Return type.\n@@ -2126,7 +2137,14 @@ fn rewrite_fn_base(\n             result.push_str(&indent.to_string_with_newline(context.config));\n             indent\n         } else {\n-            result.push(' ');\n+            if context.config.version() == Version::Two {\n+                if arg_str.len() != 0 || !no_args_and_over_max_width {\n+                    result.push(' ');\n+                }\n+            } else {\n+                result.push(' ');\n+            }\n+\n             Indent::new(indent.block_indent, last_line_width(&result))\n         };\n "}, {"sha": "580679fbae34b07782ac1408f1ff287afbdce851", "filename": "tests/source/issue-3278/version_one.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Fissue-3278%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Fissue-3278%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3278%2Fversion_one.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-version: One\n+\n+pub fn parse_conditional<'a, I: 'a>(\n+) -> impl Parser<Input = I, Output = Expr, PartialState = ()> + 'a\n+where\n+    I: Stream<Item = char>,\n+{\n+}"}, {"sha": "c17b1742d396b8c00693a65a2764f2f68ed5a0d6", "filename": "tests/source/issue-3278/version_two.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Fissue-3278%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Fissue-3278%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3278%2Fversion_two.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-version: Two\n+\n+pub fn parse_conditional<'a, I: 'a>()\n+-> impl Parser<Input = I, Output = Expr, PartialState = ()> + 'a\n+where\n+    I: Stream<Item = char>,\n+{\n+}"}, {"sha": "d6832c2af09548307ef9f1f49c1894983ef216c4", "filename": "tests/source/long-fn-1/version_one.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Flong-fn-1%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Flong-fn-1%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flong-fn-1%2Fversion_one.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -1,3 +1,4 @@\n+// rustfmt-version: One\n // Tests that a function which is almost short enough, but not quite, gets\n // formatted correctly.\n ", "previous_filename": "tests/source/long-fn-1.rs"}, {"sha": "f402a26e8b6a80597323a31bfdd40a0c51c89467", "filename": "tests/source/long-fn-1/version_two.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Flong-fn-1%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Fsource%2Flong-fn-1%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flong-fn-1%2Fversion_two.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-version: Two\n+// Tests that a function which is almost short enough, but not quite, gets\n+// formatted correctly.\n+\n+impl Foo {\n+    fn some_input(&mut self, input: Input, input_path: Option<PathBuf>, ) -> (Input, Option<PathBuf>) {}\n+\n+    fn some_inpu(&mut self, input: Input, input_path: Option<PathBuf>) -> (Input, Option<PathBuf>) {}\n+}\n+\n+// #1843\n+#[allow(non_snake_case)]\n+pub extern \"C\" fn Java_com_exonum_binding_storage_indices_ValueSetIndexProxy_nativeContainsByHash() -> bool {\n+    false\n+}\n+\n+// #3009\n+impl Something {\n+    fn my_function_name_is_way_to_long_but_used_as_a_case_study_or_an_example_its_fine(\n+) -> Result<  (), String  > {}\n+}"}, {"sha": "580679fbae34b07782ac1408f1ff287afbdce851", "filename": "tests/target/issue-3278/version_one.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Fissue-3278%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Fissue-3278%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3278%2Fversion_one.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-version: One\n+\n+pub fn parse_conditional<'a, I: 'a>(\n+) -> impl Parser<Input = I, Output = Expr, PartialState = ()> + 'a\n+where\n+    I: Stream<Item = char>,\n+{\n+}"}, {"sha": "c17b1742d396b8c00693a65a2764f2f68ed5a0d6", "filename": "tests/target/issue-3278/version_two.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Fissue-3278%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Fissue-3278%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3278%2Fversion_two.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-version: Two\n+\n+pub fn parse_conditional<'a, I: 'a>()\n+-> impl Parser<Input = I, Output = Expr, PartialState = ()> + 'a\n+where\n+    I: Stream<Item = char>,\n+{\n+}"}, {"sha": "05f69953c26d788c25637b4695a9aaa186522e9e", "filename": "tests/target/long-fn-1/version_one.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Flong-fn-1%2Fversion_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Flong-fn-1%2Fversion_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-fn-1%2Fversion_one.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -1,3 +1,4 @@\n+// rustfmt-version: One\n // Tests that a function which is almost short enough, but not quite, gets\n // formatted correctly.\n ", "previous_filename": "tests/target/long-fn-1.rs"}, {"sha": "32794bccde2e823ccc8318f2aa85a1af47a4dbee", "filename": "tests/target/long-fn-1/version_two.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Flong-fn-1%2Fversion_two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203e6d265d88bee97f89bb0529f3a33cb46e0477/tests%2Ftarget%2Flong-fn-1%2Fversion_two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-fn-1%2Fversion_two.rs?ref=203e6d265d88bee97f89bb0529f3a33cb46e0477", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-version: Two\n+// Tests that a function which is almost short enough, but not quite, gets\n+// formatted correctly.\n+\n+impl Foo {\n+    fn some_input(\n+        &mut self,\n+        input: Input,\n+        input_path: Option<PathBuf>,\n+    ) -> (Input, Option<PathBuf>) {\n+    }\n+\n+    fn some_inpu(&mut self, input: Input, input_path: Option<PathBuf>) -> (Input, Option<PathBuf>) {\n+    }\n+}\n+\n+// #1843\n+#[allow(non_snake_case)]\n+pub extern \"C\" fn Java_com_exonum_binding_storage_indices_ValueSetIndexProxy_nativeContainsByHash()\n+-> bool {\n+    false\n+}\n+\n+// #3009\n+impl Something {\n+    fn my_function_name_is_way_to_long_but_used_as_a_case_study_or_an_example_its_fine()\n+    -> Result<(), String> {\n+    }\n+}"}]}