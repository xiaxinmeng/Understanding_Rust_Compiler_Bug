{"sha": "46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZjcxYTAzZjliN2JhZDJmYTQ2OTExM2UzODU4ZWEyYmRiYmI1ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-05T16:47:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-05T16:47:45Z"}, "message": "Auto merge of #41086 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 19 pull requests\n\n- Successful merges: #40608, #40870, #40949, #40977, #40981, #40988, #40992, #40997, #40999, #41007, #41014, #41019, #41035, #41043, #41049, #41062, #41066, #41076, #41085\n- Failed merges:", "tree": {"sha": "f1781c8eee2c19a80fc40159ebe7c9de37817f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1781c8eee2c19a80fc40159ebe7c9de37817f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "html_url": "https://github.com/rust-lang/rust/commit/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5dfecc6ae23bb7d2b8075d705011918ab4f399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5dfecc6ae23bb7d2b8075d705011918ab4f399", "html_url": "https://github.com/rust-lang/rust/commit/ad5dfecc6ae23bb7d2b8075d705011918ab4f399"}, {"sha": "97a1f4b1f4e2acc25f939ea08ff634f70e1ab58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a1f4b1f4e2acc25f939ea08ff634f70e1ab58d", "html_url": "https://github.com/rust-lang/rust/commit/97a1f4b1f4e2acc25f939ea08ff634f70e1ab58d"}], "stats": {"total": 767, "additions": 522, "deletions": 245}, "files": [{"sha": "0ffba70d2ef4401b85060756e1324316867370ff", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -63,7 +63,7 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-apple-darwin &&\n+        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/sccache &&\n         travis_retry curl -o /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n           chmod +x /usr/local/bin/stamp"}, {"sha": "83cfea0dd834e519c67f143398eb655380b0d33a", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -115,8 +115,8 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-03-24-sccache-x86_64-pc-windows-msvc sccache.exe\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-pc-windows-msvc\n+  - mv 2017-04-04-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n   # Download and install ninja"}, {"sha": "d42b35d488c3d5be27afee72e36174a513ec5e47", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -74,7 +74,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7c1984410078f990c969c74e836638c4a248ddce", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -22,7 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "d9a5429d2b8e894b8b3dbff2b06f09015ea7406f", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -62,7 +62,7 @@ RUN ./build-toolchains.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin"}, {"sha": "31f4b8b777be5be44967e61694dbea67144ff069", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -32,7 +32,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV TARGETS=arm-linux-androideabi"}, {"sha": "7162aa0efc0cfa1eae6ca5d1bc3608f6603692be", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -62,7 +62,7 @@ RUN ./build-toolchains.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin"}, {"sha": "8fa1cbe492fac67ab03ed1365a57909b3ebcf482", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -62,7 +62,7 @@ RUN ./build-toolchains.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin"}, {"sha": "9fcd827fc9962cda2f27ef26033fc831618f354d", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -62,7 +62,7 @@ RUN ./build-toolchains.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin"}, {"sha": "bfffd9637fcee5049405354f8152739bf11f00e4", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -29,7 +29,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "d2727cbdb3508b35a5a8cc223597397fbed9bacd", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "3b81216c6431edc91ec7e3148b7329d9cbf38c58", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -25,7 +25,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "b322f56f0d0480aade00539c8795aec18ddfb23f", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -82,7 +82,7 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=i686-unknown-linux-gnu"}, {"sha": "33cca061103a333406ddf9d648c1db9cf5ed36b2", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "157de83abb783bc5e9cf608a3c7b75f4050dc754", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "739d5ff6ac4aaddcce445c4f3ba8c414bdf81d2e", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "9339063bc19ebb91c4a84f1d3c30a88141170bc0", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "92342caed2a9540da682ce3dab052b27e2e3c26d", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -63,7 +63,7 @@ RUN ./build-powerpc-toolchain.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin"}, {"sha": "182dfd93cc76fea34780f15c11cc62050de6977b", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -63,7 +63,7 @@ RUN ./build-powerpc64-toolchain.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin"}, {"sha": "6b9f964d5a38379f12e58d09e80c7bd0156bcda3", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -63,7 +63,7 @@ COPY shared.sh build-powerpc64le-toolchain.sh /tmp/\n RUN ./build-powerpc64le-toolchain.sh\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "7c94f713e18759a7b55fb83e7c6440f13495dd49", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -63,7 +63,7 @@ RUN ./build-s390x-toolchain.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin"}, {"sha": "a2939c8c48591065be4515e3840d0d2e3a90aa1c", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -25,7 +25,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\"}, {"sha": "cbe5f5936a506a404004fb5eeef0c29c342fb03a", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -82,7 +82,7 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=x86_64-unknown-linux-gnu"}, {"sha": "a41c0cca3b5f0e5b086b2da1243faadce941bd9b", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -26,7 +26,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "a1dd9a3724a882004e62f8038a8c993aeb3f7f50", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -62,7 +62,7 @@ RUN ./build-netbsd-toolchain.sh\n USER root\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin"}, {"sha": "ffdb1d18a94ef8dd122222dc335bde25bc789a5e", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   lib32stdc++6\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "34d0567a440f9debc694a256a4b54aeaf7149b9f", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "960a0fa7a385f9aec3dd05e9111065fe5e54323d", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "9871df90e00d509e55f22ad9a8c4050e5bb56cb2", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "197b0ec9b9bb64bbe041682cdfb7771997c50004", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "60af302791a74406e67923bbc71c7bb1c25aa943", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "4ec0b5c152575951bd6022d423670db169330af9", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "6448f88950f0df30e7bee4b02f6b348b695294c7", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "c00667fe1dd00020f22007714fd98d71c9872684", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7284d231b844bd67c8b3bc3abbdac29cb8a49231", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "1dce84bc5fd73e61eda10ef6f4440151e1fba357", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-24-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-04-04-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "72c2461c8bb5e55586b1f19a0cbf213750db87ec", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -209,5 +209,4 @@\n - [windows_handle](windows-handle.md)\n - [windows_net](windows-net.md)\n - [windows_stdio](windows-stdio.md)\n-- [windows_subsystem](windows-subsystem.md)\n - [zero_one](zero-one.md)"}, {"sha": "80583352fbf967d5a77b9d525b3d993f7a2525fc", "filename": "src/doc/unstable-book/src/windows-subsystem.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad5dfecc6ae23bb7d2b8075d705011918ab4f399/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "raw_url": "https://github.com/rust-lang/rust/raw/ad5dfecc6ae23bb7d2b8075d705011918ab4f399/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md?ref=ad5dfecc6ae23bb7d2b8075d705011918ab4f399", "patch": "@@ -1,10 +0,0 @@\n-# `windows_subsystem`\n-\n-The tracking issue for this feature is: [#37499]\n-\n-[#37499]: https://github.com/rust-lang/rust/issues/37499\n-\n-------------------------\n-\n-\n-"}, {"sha": "1b3eeb837d909aba3257b66c3680bbc7b59faaef", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -697,8 +697,8 @@ impl<T> LinkedList<T> {\n \n     /// Returns a place for insertion at the front of the list.\n     ///\n-    /// Using this method with placement syntax is equivalent to [`push_front`]\n-    /// (#method.push_front), but may be more efficient.\n+    /// Using this method with placement syntax is equivalent to\n+    /// [`push_front`](#method.push_front), but may be more efficient.\n     ///\n     /// # Examples\n     ///"}, {"sha": "be613e06b02e87e5c845660aaff657f55496896c", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -678,8 +678,9 @@ impl<T> Vec<T> {\n         self.len = len;\n     }\n \n-    /// Removes an element from anywhere in the vector and return it, replacing\n-    /// it with the last element.\n+    /// Removes an element from the vector and returns it.\n+    ///\n+    /// The removed element is replaced by the last element of the vector.\n     ///\n     /// This does not preserve ordering, but is O(1).\n     ///"}, {"sha": "22f2ff1a3461830b13fd9ff25cdb579bd9c1c429", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -635,7 +635,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Shortens a `VecDeque`, dropping excess elements from the back.\n+    /// Shortens the `VecDeque`, dropping excess elements from the back.\n     ///\n     /// If `len` is greater than the `VecDeque`'s current length, this has no\n     /// effect.\n@@ -941,7 +941,7 @@ impl<T> VecDeque<T> {\n         a.contains(x) || b.contains(x)\n     }\n \n-    /// Provides a reference to the front element, or `None` if the sequence is\n+    /// Provides a reference to the front element, or `None` if the `VecDeque` is\n     /// empty.\n     ///\n     /// # Examples\n@@ -966,7 +966,7 @@ impl<T> VecDeque<T> {\n     }\n \n     /// Provides a mutable reference to the front element, or `None` if the\n-    /// sequence is empty.\n+    /// `VecDeque` is empty.\n     ///\n     /// # Examples\n     ///\n@@ -993,7 +993,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Provides a reference to the back element, or `None` if the sequence is\n+    /// Provides a reference to the back element, or `None` if the `VecDeque` is\n     /// empty.\n     ///\n     /// # Examples\n@@ -1018,7 +1018,7 @@ impl<T> VecDeque<T> {\n     }\n \n     /// Provides a mutable reference to the back element, or `None` if the\n-    /// sequence is empty.\n+    /// `VecDeque` is empty.\n     ///\n     /// # Examples\n     ///\n@@ -1046,7 +1046,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Removes the first element and returns it, or `None` if the sequence is\n+    /// Removes the first element and returns it, or `None` if the `VecDeque` is\n     /// empty.\n     ///\n     /// # Examples\n@@ -1073,7 +1073,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Inserts an element first in the sequence.\n+    /// Prepends an element to the `VecDeque`.\n     ///\n     /// # Examples\n     ///\n@@ -1096,7 +1096,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Appends an element to the back of a buffer\n+    /// Appends an element to the back of the `VecDeque`.\n     ///\n     /// # Examples\n     ///\n@@ -1117,7 +1117,7 @@ impl<T> VecDeque<T> {\n         unsafe { self.buffer_write(head, value) }\n     }\n \n-    /// Removes the last element from a buffer and returns it, or `None` if\n+    /// Removes the last element from the `VecDeque` and returns it, or `None` if\n     /// it is empty.\n     ///\n     /// # Examples"}, {"sha": "e0a4707ff665f58c0bdedbb8fed6f6e29bc897be", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 57, "deletions": 39, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -61,16 +61,18 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -79,8 +81,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -89,16 +92,18 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -107,8 +112,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -117,8 +123,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -127,8 +134,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -137,25 +145,28 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -164,8 +175,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -174,16 +186,18 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -192,8 +206,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -202,8 +217,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -212,8 +228,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -222,8 +239,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n+    ///\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer.\n@@ -1253,17 +1271,17 @@ extern \"rust-intrinsic\" {\n     #[cfg(not(stage0))]\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n-    /// Returns (a + b) mod 2^N, where N is the width of T in bits.\n+    /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n-    /// Returns (a - b) mod 2^N, where N is the width of T in bits.\n+    /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n-    /// Returns (a * b) mod 2^N, where N is the width of T in bits.\n+    /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)"}, {"sha": "45fa721a5a33e0b71c8504e3e0b5ef9a1ab6487c", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -10,12 +10,12 @@\n \n //! Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\n //! Normal floating point numbers have a canonical representation as (frac, exp) such that the\n-//! value is 2^exp * (1 + sum(frac[N-i] / 2^i)) where N is the number of bits. Subnormals are\n-//! slightly different and weird, but the same principle applies.\n+//! value is 2<sup>exp</sup> * (1 + sum(frac[N-i] / 2<sup>i</sup>)) where N is the number of bits.\n+//! Subnormals are slightly different and weird, but the same principle applies.\n //!\n-//! Here, however, we represent them as (sig, k) with f positive, such that the value is f * 2^e.\n-//! Besides making the \"hidden bit\" explicit, this changes the exponent by the so-called\n-//! mantissa shift.\n+//! Here, however, we represent them as (sig, k) with f positive, such that the value is f *\n+//! 2<sup>e</sup>. Besides making the \"hidden bit\" explicit, this changes the exponent by the\n+//! so-called mantissa shift.\n //!\n //! Put another way, normally floats are written as (1) but here they are written as (2):\n //!\n@@ -94,7 +94,8 @@ pub trait RawFloat : Float + Copy + Debug + LowerExp\n     /// represented, the other code in this module makes sure to never let that happen.\n     fn from_int(x: u64) -> Self;\n \n-    /// Get the value 10^e from a pre-computed table. Panics for e >= ceil_log5_of_max_sig().\n+    /// Get the value 10<sup>e</sup> from a pre-computed table. Panics for e >=\n+    /// ceil_log5_of_max_sig().\n     fn short_fast_pow10(e: usize) -> Self;\n \n     // FIXME Everything that follows should be associated constants, but taking the value of an"}, {"sha": "1a48f27762580e38047b87ad5468adb21b58114f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -894,9 +894,15 @@ impl<A> ExactSizeIterator for Item<A> {}\n impl<A> FusedIterator for Item<A> {}\n unsafe impl<A> TrustedLen for Item<A> {}\n \n-/// An iterator over a reference of the contained item in an [`Option`].\n+/// An iterator over a reference to the [`Some`] variant of an [`Option`].\n+///\n+/// The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.\n+///\n+/// This `struct` is created by the [`Option::iter`] function.\n ///\n /// [`Option`]: enum.Option.html\n+/// [`Some`]: enum.Option.html#variant.Some\n+/// [`Option::iter`]: enum.Option.html#method.iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Iter<'a, A: 'a> { inner: Item<&'a A> }\n@@ -933,9 +939,15 @@ impl<'a, A> Clone for Iter<'a, A> {\n     }\n }\n \n-/// An iterator over a mutable reference of the contained item in an [`Option`].\n+/// An iterator over a mutable reference to the [`Some`] variant of an [`Option`].\n+///\n+/// The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.\n+///\n+/// This `struct` is created by the [`Option::iter_mut`] function.\n ///\n /// [`Option`]: enum.Option.html\n+/// [`Some`]: enum.Option.html#variant.Some\n+/// [`Option::iter_mut`]: enum.Option.html#method.iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, A: 'a> { inner: Item<&'a mut A> }\n@@ -964,9 +976,15 @@ impl<'a, A> FusedIterator for IterMut<'a, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n \n-/// An iterator over the item contained inside an [`Option`].\n+/// An iterator over the value in [`Some`] variant of an [`Option`].\n+///\n+/// The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.\n+///\n+/// This `struct` is created by the [`Option::into_iter`] function.\n ///\n /// [`Option`]: enum.Option.html\n+/// [`Some`]: enum.Option.html#variant.Some\n+/// [`Option::into_iter`]: enum.Option.html#method.into_iter\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<A> { inner: Item<A> }"}, {"sha": "352cc926994e3685ae5ca5554eba5f9fbfd3e3c6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -152,11 +152,16 @@ impl fmt::Display for ParseBoolError {\n Section: Creating a string\n */\n \n-/// Errors which can occur when attempting to interpret a sequence of `u8`\n+/// Errors which can occur when attempting to interpret a sequence of [`u8`]\n /// as a string.\n ///\n-/// As such, the `from_utf8` family of functions and methods for both `String`s\n-/// and `&str`s make use of this error, for example.\n+/// [`u8`]: ../../std/primitive.u8.html\n+///\n+/// As such, the `from_utf8` family of functions and methods for both [`String`]s\n+/// and [`&str`]s make use of this error, for example.\n+///\n+/// [`String`]: ../../std/string/struct.String.html#method.from_utf8\n+/// [`&str`]: ../../std/str/fn.from_utf8.html\n #[derive(Copy, Eq, PartialEq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Utf8Error {\n@@ -210,11 +215,15 @@ impl Utf8Error {\n \n /// Converts a slice of bytes to a string slice.\n ///\n-/// A string slice (`&str`) is made of bytes (`u8`), and a byte slice (`&[u8]`)\n-/// is made of bytes, so this function converts between the two. Not all byte\n-/// slices are valid string slices, however: `&str` requires that it is valid\n-/// UTF-8. `from_utf8()` checks to ensure that the bytes are valid UTF-8, and\n-/// then does the conversion.\n+/// A string slice ([`&str`]) is made of bytes ([`u8`]), and a byte slice\n+/// ([`&[u8]`][byteslice]) is made of bytes, so this function converts between\n+/// the two. Not all byte slices are valid string slices, however: [`&str`] requires\n+/// that it is valid UTF-8. `from_utf8()` checks to ensure that the bytes are valid\n+/// UTF-8, and then does the conversion.\n+///\n+/// [`&str`]: ../../std/primitive.str.html\n+/// [`u8`]: ../../std/primitive.u8.html\n+/// [byteslice]: ../../std/primitive.slice.html\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n@@ -228,9 +237,12 @@ impl Utf8Error {\n ///\n /// [string]: ../../std/string/struct.String.html#method.from_utf8\n ///\n-/// Because you can stack-allocate a `[u8; N]`, and you can take a `&[u8]` of\n-/// it, this function is one way to have a stack-allocated string. There is\n-/// an example of this in the examples section below.\n+/// Because you can stack-allocate a `[u8; N]`, and you can take a\n+/// [`&[u8]`][byteslice] of it, this function is one way to have a\n+/// stack-allocated string. There is an example of this in the\n+/// examples section below.\n+///\n+/// [byteslice]: ../../std/primitive.slice.html\n ///\n /// # Errors\n ///"}, {"sha": "571ef30b6b9096356a0f92b216088c5d6571d036", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -267,7 +267,7 @@ impl Size {\n \n /// Alignment of a type in bytes, both ABI-mandated and preferred.\n /// Since alignments are always powers of 2, we can pack both in one byte,\n-/// giving each a nibble (4 bits) for a maximum alignment of 2^15 = 32768.\n+/// giving each a nibble (4 bits) for a maximum alignment of 2<sup>15</sup> = 32768.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Align {\n     raw: u8"}, {"sha": "96eb5dd602f514470b006aab390a80cacef04ede", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -1358,10 +1358,9 @@ pub fn build_output_filenames(input: &Input,\n                                            .values()\n                                            .filter(|a| a.is_none())\n                                            .count();\n-            let ofile = if unnamed_output_types > 1 &&\n-                            sess.opts.output_types.contains_key(&OutputType::Exe) {\n-                sess.warn(\"ignoring specified output filename for 'link' output because multiple \\\n-                           outputs were requested\");\n+            let ofile = if unnamed_output_types > 1 {\n+                sess.warn(\"due to multiple output types requested, the explicitly specified \\\n+                           output file name will be adapted for each output type\");\n                 None\n             } else {\n                 Some(out_file.clone())"}, {"sha": "4b975d7b324f99c492ef96ab3d2a448db289fadf", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -196,19 +196,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                                     let field_ty = field.ty(tcx, substs);\n \n-                                    if self.is_fn_ty(&field_ty, span) {\n-                                        err.help(&format!(\"use `({0}.{1})(...)` if you \\\n-                                                           meant to call the function \\\n-                                                           stored in the `{1}` field\",\n-                                                          expr_string,\n-                                                          item_name));\n+                                    if tcx.vis_is_accessible_from(field.vis, self.body_id) {\n+                                        if self.is_fn_ty(&field_ty, span) {\n+                                            err.help(&format!(\"use `({0}.{1})(...)` if you \\\n+                                                               meant to call the function \\\n+                                                               stored in the `{1}` field\",\n+                                                              expr_string,\n+                                                              item_name));\n+                                        } else {\n+                                            err.help(&format!(\"did you mean to write `{0}.{1}` \\\n+                                                               instead of `{0}.{1}(...)`?\",\n+                                                              expr_string,\n+                                                              item_name));\n+                                        }\n+                                        err.span_label(span, &\"field, not a method\");\n                                     } else {\n-                                        err.help(&format!(\"did you mean to write `{0}.{1}` \\\n-                                                           instead of `{0}.{1}(...)`?\",\n-                                                          expr_string,\n-                                                          item_name));\n+                                        err.span_label(span, &\"private field, not a method\");\n                                     }\n-                                    err.span_label(span, &\"field, not a method\");\n                                     break;\n                                 }\n                             }"}, {"sha": "245a3946a3709c31f8c5e0c759d927e037504d7d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -427,12 +427,15 @@ pub fn render(w: &mut fmt::Formatter,\n                     looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n+            if shorter.is_compact() {\n+                break\n+            }\n         }\n         buffer.push_str(&format!(\"<li>{}</li>\", content));\n     }\n \n     fn list(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n-            shorter: MarkdownOutputStyle) {\n+            shorter: MarkdownOutputStyle, is_sorted_list: bool) {\n         debug!(\"List\");\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n@@ -445,8 +448,13 @@ pub fn render(w: &mut fmt::Formatter,\n                     looper(parser, &mut content, Some(x), toc_builder, shorter, &mut None);\n                 }\n             }\n+            if shorter.is_compact() {\n+                break\n+            }\n         }\n-        buffer.push_str(&format!(\"<ul>{}</ul>\", content));\n+        buffer.push_str(&format!(\"<{0}>{1}</{0}>\",\n+                                 if is_sorted_list { \"ol\" } else { \"ul\" },\n+                                 content));\n     }\n \n     fn emphasis(parser: &mut ParserWrapper, buffer: &mut String,\n@@ -516,8 +524,8 @@ pub fn render(w: &mut fmt::Formatter,\n                 Event::Start(Tag::BlockQuote) => {\n                     blockquote(parser, buffer, toc_builder, shorter);\n                 }\n-                Event::Start(Tag::List(_)) => {\n-                    list(parser, buffer, toc_builder, shorter);\n+                Event::Start(Tag::List(x)) => {\n+                    list(parser, buffer, toc_builder, shorter, x.is_some());\n                 }\n                 Event::Start(Tag::Emphasis) => {\n                     emphasis(parser, buffer, toc_builder, shorter, id);"}, {"sha": "b36253862094f4acf1c6aff41f1c89dd23193edb", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -9,6 +9,20 @@\n // except according to those terms.\n \n //! Operations on ASCII strings and characters.\n+//!\n+//! Most string operations in Rust act on UTF-8 strings. However, at times it\n+//! makes more sense to only consider the ASCII character set for a specific\n+//! operation.\n+//!\n+//! The [`AsciiExt`] trait provides methods that allow for character\n+//! operations that only act on the ASCII subset and leave non-ASCII characters\n+//! alone.\n+//!\n+//! The [`escape_default`] function provides an iterator over the bytes of an\n+//! escaped version of the character given.\n+//!\n+//! [`AsciiExt`]: trait.AsciiExt.html\n+//! [`escape_default`]: fn.escape_default.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -53,11 +67,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert!(ascii.is_ascii());\n-    /// assert!(!utf8.is_ascii());\n+    /// assert!(!non_ascii.is_ascii());\n     /// assert!(int_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -79,11 +93,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'a';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 97;\n     ///\n     /// assert_eq!('A', ascii.to_ascii_uppercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// assert_eq!(65, int_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n@@ -108,11 +122,11 @@ pub trait AsciiExt {\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let ascii = 'A';\n-    /// let utf8 = '\u2764';\n+    /// let non_ascii = '\u2764';\n     /// let int_ascii = 65;\n     ///\n     /// assert_eq!('a', ascii.to_ascii_lowercase());\n-    /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n+    /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// assert_eq!(97, int_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n@@ -934,8 +948,12 @@ impl AsciiExt for char {\n     }\n }\n \n-/// An iterator over the escaped version of a byte, constructed via\n-/// `std::ascii::escape_default`.\n+/// An iterator over the escaped version of a byte.\n+///\n+/// This `struct` is created by the [`escape_default`] function. See its\n+/// documentation for more.\n+///\n+/// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {\n     range: Range<usize>,\n@@ -966,6 +984,38 @@ pub struct EscapeDefault {\n ///\n /// assert_eq!(b'\\\\', escaped.next().unwrap());\n /// assert_eq!(b't', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\r');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'r', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\n');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'n', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\'');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\'', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\"');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\"', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\\\');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+///\n+/// let mut escaped = ascii::escape_default(b'\\x9d');\n+///\n+/// assert_eq!(b'\\\\', escaped.next().unwrap());\n+/// assert_eq!(b'x', escaped.next().unwrap());\n+/// assert_eq!(b'9', escaped.next().unwrap());\n+/// assert_eq!(b'd', escaped.next().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {"}, {"sha": "1b00eb95de2bc434340918ffeeda17c62d2ce8db", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -1726,9 +1726,9 @@ impl DirBuilder {\n         }\n     }\n \n-    /// Indicate that directories create should be created recursively, creating\n-    /// all parent directories if they do not exist with the same security and\n-    /// permissions settings.\n+    /// Indicates that directories should be created recursively, creating all\n+    /// parent directories. Parents that do not exist are created with the same\n+    /// security and permissions settings.\n     ///\n     /// This option defaults to `false`.\n     ///\n@@ -1749,6 +1749,9 @@ impl DirBuilder {\n     /// Create the specified directory with the options configured in this\n     /// builder.\n     ///\n+    /// It is considered an error if the directory already exists unless\n+    /// recursive mode is enabled.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}, {"sha": "a7b01e49d2bb625f2654b1bd13d5e30c81fae272", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -50,12 +50,11 @@ struct BarrierState {\n     generation_id: usize,\n }\n \n-/// A result returned from wait.\n+/// A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]\n+/// have rendezvoused.\n ///\n-/// Currently this opaque structure only has one method, [`.is_leader`]. Only\n-/// one thread will receive a result that will return `true` from this function.\n-///\n-/// [`.is_leader`]: #method.is_leader\n+/// [`wait`]: struct.Barrier.html#method.wait\n+/// [`Barrier`]: struct.Barrier.html\n ///\n /// # Examples\n ///"}, {"sha": "0da65a4f2e12f2c9ed8d256d583515612a888092", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 172, "deletions": 46, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -13,40 +13,50 @@\n //! This module provides message-based communication over channels, concretely\n //! defined among three types:\n //!\n-//! * `Sender`\n-//! * `SyncSender`\n-//! * `Receiver`\n+//! * [`Sender`]\n+//! * [`SyncSender`]\n+//! * [`Receiver`]\n //!\n-//! A `Sender` or `SyncSender` is used to send data to a `Receiver`. Both\n+//! A [`Sender`] or [`SyncSender`] is used to send data to a [`Receiver`]. Both\n //! senders are clone-able (multi-producer) such that many threads can send\n //! simultaneously to one receiver (single-consumer).\n //!\n //! These channels come in two flavors:\n //!\n-//! 1. An asynchronous, infinitely buffered channel. The `channel()` function\n+//! 1. An asynchronous, infinitely buffered channel. The [`channel`] function\n //!    will return a `(Sender, Receiver)` tuple where all sends will be\n //!    **asynchronous** (they never block). The channel conceptually has an\n //!    infinite buffer.\n //!\n-//! 2. A synchronous, bounded channel. The `sync_channel()` function will return\n-//!    a `(SyncSender, Receiver)` tuple where the storage for pending messages\n-//!    is a pre-allocated buffer of a fixed size. All sends will be\n+//! 2. A synchronous, bounded channel. The [`sync_channel`] function will\n+//!    return a `(SyncSender, Receiver)` tuple where the storage for pending\n+//!    messages is a pre-allocated buffer of a fixed size. All sends will be\n //!    **synchronous** by blocking until there is buffer space available. Note\n-//!    that a bound of 0 is allowed, causing the channel to become a\n-//!    \"rendezvous\" channel where each sender atomically hands off a message to\n-//!    a receiver.\n+//!    that a bound of 0 is allowed, causing the channel to become a \"rendezvous\"\n+//!    channel where each sender atomically hands off a message to a receiver.\n+//!\n+//! [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+//! [`SyncSender`]: ../../../std/sync/mpsc/struct.SyncSender.html\n+//! [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n+//! [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+//! [`channel`]: ../../../std/sync/mpsc/fn.channel.html\n+//! [`sync_channel`]: ../../../std/sync/mpsc/fn.sync_channel.html\n //!\n //! ## Disconnection\n //!\n-//! The send and receive operations on channels will all return a `Result`\n+//! The send and receive operations on channels will all return a [`Result`]\n //! indicating whether the operation succeeded or not. An unsuccessful operation\n //! is normally indicative of the other half of a channel having \"hung up\" by\n //! being dropped in its corresponding thread.\n //!\n //! Once half of a channel has been deallocated, most operations can no longer\n-//! continue to make progress, so `Err` will be returned. Many applications will\n-//! continue to `unwrap()` the results returned from this module, instigating a\n-//! propagation of failure among threads if one unexpectedly dies.\n+//! continue to make progress, so [`Err`] will be returned. Many applications\n+//! will continue to [`unwrap`] the results returned from this module,\n+//! instigating a propagation of failure among threads if one unexpectedly dies.\n+//!\n+//! [`Result`]: ../../../std/result/enum.Result.html\n+//! [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+//! [`unwrap`]: ../../../std/result/enum.Result.html#method.unwrap\n //!\n //! # Examples\n //!\n@@ -288,7 +298,31 @@ mod mpsc_queue;\n mod spsc_queue;\n \n /// The receiving-half of Rust's channel type. This half can only be owned by\n-/// one thread\n+/// one thread.\n+///\n+/// Messages sent to the channel can be retrieved using [`recv`].\n+///\n+/// [`recv`]: ../../../std/sync/mpsc/struct.Receiver.html#method.recv\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::channel;\n+/// use std::thread;\n+/// use std::time::Duration;\n+///\n+/// let (send, recv) = channel();\n+///\n+/// thread::spawn(move || {\n+///     send.send(\"Hello world!\").unwrap();\n+///     thread::sleep(Duration::from_secs(2)); // block for two seconds\n+///     send.send(\"Delayed for 2 seconds\").unwrap();\n+/// });\n+///\n+/// println!(\"{}\", recv.recv().unwrap()); // Received immediately\n+/// println!(\"Waiting...\");\n+/// println!(\"{}\", recv.recv().unwrap()); // Received after 2 seconds\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Receiver<T> {\n     inner: UnsafeCell<Flavor<T>>,\n@@ -302,30 +336,39 @@ unsafe impl<T: Send> Send for Receiver<T> { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for Receiver<T> { }\n \n-/// An iterator over messages on a receiver, this iterator will block\n-/// whenever `next` is called, waiting for a new message, and `None` will be\n-/// returned when the corresponding channel has hung up.\n+/// An iterator over messages on a receiver, this iterator will block whenever\n+/// [`next`] is called, waiting for a new message, and [`None`] will be returned\n+/// when the corresponding channel has hung up.\n+///\n+/// [`next`]: ../../../std/iter/trait.Iterator.html#tymethod.next\n+/// [`None`]: ../../../std/option/enum.Option.html#variant.None\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Iter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n /// An iterator that attempts to yield all pending values for a receiver.\n-/// `None` will be returned when there are no pending values remaining or\n-/// if the corresponding channel has hung up.\n+/// [`None`] will be returned when there are no pending values remaining or if\n+/// the corresponding channel has hung up.\n ///\n /// This Iterator will never block the caller in order to wait for data to\n-/// become available. Instead, it will return `None`.\n+/// become available. Instead, it will return [`None`].\n+///\n+/// [`None`]: ../../../std/option/enum.Option.html#variant.None\n #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n #[derive(Debug)]\n pub struct TryIter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n /// An owning iterator over messages on a receiver, this iterator will block\n-/// whenever `next` is called, waiting for a new message, and `None` will be\n+/// whenever [`next`] is called, waiting for a new message, and [`None`] will be\n /// returned when the corresponding channel has hung up.\n+///\n+/// [`next`]: ../../../std/iter/trait.Iterator.html#tymethod.next\n+/// [`None`]: ../../../std/option/enum.Option.html#variant.None\n+///\n #[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n@@ -334,6 +377,35 @@ pub struct IntoIter<T> {\n \n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one thread, but it can be cloned to send to other threads.\n+///\n+/// Messages can be sent through this channel with [`send`].\n+///\n+/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::sync::mpsc::channel;\n+/// use std::thread;\n+///\n+/// let (sender, receiver) = channel();\n+/// let sender2 = sender.clone();\n+///\n+/// // First thread owns sender\n+/// thread::spawn(move || {\n+///     sender.send(1).unwrap();\n+/// });\n+///\n+/// // Second thread owns sender2\n+/// thread::spawn(move || {\n+///     sender2.send(2).unwrap();\n+/// });\n+///\n+/// let msg = receiver.recv().unwrap();\n+/// let msg2 = receiver.recv().unwrap();\n+///\n+/// assert_eq!(3, msg + msg2);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Sender<T> {\n     inner: UnsafeCell<Flavor<T>>,\n@@ -349,6 +421,10 @@ impl<T> !Sync for Sender<T> { }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one thread, but it can be cloned to send to other threads.\n+///\n+/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+/// [`SyncSender::send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SyncSender<T> {\n     inner: Arc<sync::Packet<T>>,\n@@ -360,25 +436,32 @@ unsafe impl<T: Send> Send for SyncSender<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for SyncSender<T> {}\n \n-/// An error returned from the `send` function on channels.\n+/// An error returned from the [`send`] function on channels.\n ///\n-/// A `send` operation can only fail if the receiving end of a channel is\n+/// A [`send`] operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n+///\n+/// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, Clone, Copy)]\n pub struct SendError<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n \n-/// An error returned from the `recv` function on a `Receiver`.\n+/// An error returned from the [`recv`] function on a [`Receiver`].\n ///\n-/// The `recv` operation can only fail if the sending half of a channel is\n+/// The [`recv`] operation can only fail if the sending half of a channel is\n /// disconnected, implying that no further messages will ever be received.\n+///\n+/// [`recv`]: ../../../std/sync/mpsc/struct.Receiver.html#method.recv\n+/// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RecvError;\n \n-/// This enumeration is the list of the possible reasons that `try_recv` could\n+/// This enumeration is the list of the possible reasons that [`try_recv`] could\n /// not return data when called.\n+///\n+/// [`try_recv`]: ../../../std/sync/mpsc/struct.Receiver.html#method.try_recv\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryRecvError {\n@@ -393,8 +476,10 @@ pub enum TryRecvError {\n     Disconnected,\n }\n \n-/// This enumeration is the list of possible errors that `recv_timeout` could\n+/// This enumeration is the list of possible errors that [`recv_timeout`] could\n /// not return data when called.\n+///\n+/// [`recv_timeout`]: ../../../std/sync/mpsc/struct.Receiver.html#method.recv_timeout\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n pub enum RecvTimeoutError {\n@@ -409,7 +494,9 @@ pub enum RecvTimeoutError {\n }\n \n /// This enumeration is the list of the possible error outcomes for the\n-/// `SyncSender::try_send` method.\n+/// [`SyncSender::try_send`] method.\n+///\n+/// [`SyncSender::try_send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.try_send\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, Clone, Copy)]\n pub enum TrySendError<T> {\n@@ -556,10 +643,13 @@ impl<T> Sender<T> {\n     /// A successful send occurs when it is determined that the other end of\n     /// the channel has not hung up already. An unsuccessful send would be one\n     /// where the corresponding receiver has already been deallocated. Note\n-    /// that a return value of `Err` means that the data will never be\n-    /// received, but a return value of `Ok` does *not* mean that the data\n+    /// that a return value of [`Err`] means that the data will never be\n+    /// received, but a return value of [`Ok`] does *not* mean that the data\n     /// will be received.  It is possible for the corresponding receiver to\n-    /// hang up immediately after this function returns `Ok`.\n+    /// hang up immediately after this function returns [`Ok`].\n+    ///\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    /// [`Ok`]: ../../../std/result/enum.Result.html#variant.Ok\n     ///\n     /// This method will never block the current thread.\n     ///\n@@ -702,23 +792,29 @@ impl<T> SyncSender<T> {\n     /// time. If the buffer size is 0, however, it can be guaranteed that the\n     /// receiver has indeed received the data if this function returns success.\n     ///\n-    /// This function will never panic, but it may return `Err` if the\n-    /// `Receiver` has disconnected and is no longer able to receive\n+    /// This function will never panic, but it may return [`Err`] if the\n+    /// [`Receiver`] has disconnected and is no longer able to receive\n     /// information.\n+    ///\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    /// [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn send(&self, t: T) -> Result<(), SendError<T>> {\n         self.inner.send(t).map_err(SendError)\n     }\n \n     /// Attempts to send a value on this channel without blocking.\n     ///\n-    /// This method differs from `send` by returning immediately if the\n+    /// This method differs from [`send`] by returning immediately if the\n     /// channel's buffer is full or no receiver is waiting to acquire some\n-    /// data. Compared with `send`, this function has two failure cases\n+    /// data. Compared with [`send`], this function has two failure cases\n     /// instead of one (one for disconnection, one for a full buffer).\n     ///\n-    /// See `SyncSender::send` for notes about guarantees of whether the\n+    /// See [`SyncSender::send`] for notes about guarantees of whether the\n     /// receiver has received the data or not if this function is successful.\n+    ///\n+    /// [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+    /// [`SyncSender::send`]: ../../../std/sync/mpsc/struct.SyncSender.html#method.send\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_send(&self, t: T) -> Result<(), TrySendError<T>> {\n         self.inner.try_send(t)\n@@ -819,15 +915,18 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding `Sender`, then this receiver will wake up and\n+    /// sent to the corresponding [`Sender`], then this receiver will wake up and\n     /// return that message.\n     ///\n-    /// If the corresponding `Sender` has disconnected, or it disconnects while\n-    /// this call is blocking, this call will wake up and return `Err` to\n+    /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n+    /// this call is blocking, this call will wake up and return [`Err`] to\n     /// indicate that no more messages can ever be received on this channel.\n     /// However, since channels are buffered, messages sent before the disconnect\n     /// will still be properly received.\n     ///\n+    /// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -907,15 +1006,18 @@ impl<T> Receiver<T> {\n     ///\n     /// This function will always block the current thread if there is no data\n     /// available and it's possible for more data to be sent. Once a message is\n-    /// sent to the corresponding `Sender`, then this receiver will wake up and\n+    /// sent to the corresponding [`Sender`], then this receiver will wake up and\n     /// return that message.\n     ///\n-    /// If the corresponding `Sender` has disconnected, or it disconnects while\n-    /// this call is blocking, this call will wake up and return `Err` to\n+    /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n+    /// this call is blocking, this call will wake up and return [`Err`] to\n     /// indicate that no more messages can ever be received on this channel.\n     /// However, since channels are buffered, messages sent before the disconnect\n     /// will still be properly received.\n     ///\n+    /// [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -993,16 +1095,40 @@ impl<T> Receiver<T> {\n     }\n \n     /// Returns an iterator that will block waiting for messages, but never\n-    /// `panic!`. It will return `None` when the channel has hung up.\n+    /// [`panic!`]. It will return [`None`] when the channel has hung up.\n+    ///\n+    /// [`panic!`]: ../../../std/macro.panic.html\n+    /// [`None`]: ../../../std/option/enum.Option.html#variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::sync::mpsc::channel;\n+    /// use std::thread;\n+    ///\n+    /// let (send, recv) = channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     send.send(1u8).unwrap();\n+    ///     send.send(2u8).unwrap();\n+    ///     send.send(3u8).unwrap();\n+    /// });\n+    ///\n+    /// for x in recv.iter() {\n+    ///     println!(\"Got: {}\", x);\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n         Iter { rx: self }\n     }\n \n     /// Returns an iterator that will attempt to yield all pending values.\n     /// It will return `None` if there are no more pending values or if the\n-    /// channel has hung up. The iterator will never `panic!` or block the\n+    /// channel has hung up. The iterator will never [`panic!`] or block the\n     /// user by waiting for values.\n+    ///\n+    /// [`panic!`]: ../../../std/macro.panic.html\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n     pub fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }"}, {"sha": "f2c178a1ad503f6e21f62ac574b41bb759a40316", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -30,7 +30,7 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n ///\n /// The mutexes in this module implement a strategy called \"poisoning\" where a\n /// mutex is considered poisoned whenever a thread panics while holding the\n-/// lock. Once a mutex is poisoned, all other threads are unable to access the\n+/// mutex. Once a mutex is poisoned, all other threads are unable to access the\n /// data by default as it is likely tainted (some invariant is not being\n /// upheld).\n ///\n@@ -115,7 +115,7 @@ pub struct Mutex<T: ?Sized> {\n     // Note that this mutex is in a *box*, not inlined into the struct itself.\n     // Once a native mutex has been used once, its address can never change (it\n     // can't be moved). This mutex type can be safely moved at any time, so to\n-    // ensure that the native mutex is used correctly we box the inner lock to\n+    // ensure that the native mutex is used correctly we box the inner mutex to\n     // give it a constant address.\n     inner: Box<sys::Mutex>,\n     poison: poison::Flag,\n@@ -183,7 +183,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// Acquires a mutex, blocking the current thread until it is able to do so.\n     ///\n     /// This function will block the local thread until it is available to acquire\n-    /// the mutex. Upon returning, the thread is the only thread with the mutex\n+    /// the mutex. Upon returning, the thread is the only thread with the lock\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked.\n     ///\n@@ -267,9 +267,9 @@ impl<T: ?Sized> Mutex<T> {\n         }\n     }\n \n-    /// Determines whether the lock is poisoned.\n+    /// Determines whether the mutex is poisoned.\n     ///\n-    /// If another thread is active, the lock can still become poisoned at any\n+    /// If another thread is active, the mutex can still become poisoned at any\n     /// time. You should not trust a `false` value for program correctness\n     /// without additional synchronization.\n     ///\n@@ -312,7 +312,7 @@ impl<T: ?Sized> Mutex<T> {\n     #[stable(feature = \"mutex_into_inner\", since = \"1.6.0\")]\n     pub fn into_inner(self) -> LockResult<T> where T: Sized {\n         // We know statically that there are no outstanding references to\n-        // `self` so there's no need to lock the inner lock.\n+        // `self` so there's no need to lock the inner mutex.\n         //\n         // To get the inner value, we'd like to call `data.into_inner()`,\n         // but because `Mutex` impl-s `Drop`, we can't move out of it, so\n@@ -353,7 +353,7 @@ impl<T: ?Sized> Mutex<T> {\n     #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         // We know statically that there are no other references to `self`, so\n-        // there's no need to lock the inner lock.\n+        // there's no need to lock the inner mutex.\n         let data = unsafe { &mut *self.data.get() };\n         poison::map_result(self.poison.borrow(), |_| data )\n     }"}, {"sha": "296235e173d13f575a04b395b1042b9a47a1b470", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -72,13 +72,6 @@ pub trait IntoRawFd {\n     fn into_raw_fd(self) -> RawFd;\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for RawFd {\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for fs::File {\n     fn as_raw_fd(&self) -> RawFd {\n@@ -91,14 +84,6 @@ impl FromRawFd for fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n-\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for RawFd {\n-    fn into_raw_fd(self) -> RawFd {\n-        self\n-    }\n-}\n-\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for fs::File {\n     fn into_raw_fd(self) -> RawFd {"}, {"sha": "18c00e7c5f1b6af27e54e090257271651c5da4f5", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -158,7 +158,7 @@\n //! [`Err`]: ../../std/result/enum.Result.html#variant.Err\n //! [`panic!`]: ../../std/macro.panic.html\n //! [`Builder`]: ../../std/thread/struct.Builder.html\n-//! [`thread::current`]: ../../std/thread/fn.spawn.html\n+//! [`thread::current`]: ../../std/thread/fn.current.html\n //! [`Thread`]: ../../std/thread/struct.Thread.html\n //! [`park`]: ../../std/thread/fn.park.html\n //! [`unpark`]: ../../std/thread/struct.Thread.html#method.unpark"}, {"sha": "412803ddcd5a3d1b5eb160dddc82c3c1d03824c2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -292,9 +292,6 @@ declare_features! (\n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n     (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n \n-    // The #![windows_subsystem] attribute\n-    (active, windows_subsystem, \"1.14.0\", Some(37499)),\n-\n     // Allows #[link(..., cfg(..))]\n     (active, link_cfg, \"1.14.0\", Some(37406)),\n \n@@ -408,7 +405,8 @@ declare_features! (\n     (accepted, static_recursion, \"1.17.0\", Some(29719)),\n     // pub(restricted) visibilities (RFC 1422)\n     (accepted, pub_restricted, \"1.17.0\", Some(32409)),\n-\n+    // The #![windows_subsystem] attribute\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499)),\n );\n // If you change this, please modify src/doc/unstable-book as well. You must\n // move that documentation into the relevant place in the other docs, and\n@@ -768,11 +766,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n \n-    (\"windows_subsystem\", Whitelisted, Gated(Stability::Unstable,\n-                                             \"windows_subsystem\",\n-                                             \"the windows subsystem attribute \\\n-                                              is currently unstable\",\n-                                             cfg_fn!(windows_subsystem))),\n+    (\"windows_subsystem\", Whitelisted, Ungated),\n \n     (\"proc_macro_attribute\", Normal, Gated(Stability::Unstable,\n                                            \"proc_macro\","}, {"sha": "f04394f716660e6a0460dd55efc98eba25635f88", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -39,8 +39,10 @@ pub trait Stats {\n     ///\n     /// Note: this method sacrifices performance at the altar of accuracy\n     /// Depends on IEEE-754 arithmetic guarantees. See proof of correctness at:\n-    /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates\"]\n-    /// (http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps)\n+    /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric\n+    /// Predicates\"][paper]\n+    ///\n+    /// [paper]: http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps\n     fn sum(&self) -> f64;\n \n     /// Minimum value of the samples."}, {"sha": "7772cfd6a2c93894bd9e7e843661c6922b214c60", "filename": "src/test/compile-fail/windows-subsystem-invalid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern: invalid windows subsystem `wrong`, only `windows` and `console` are allowed\n \n-#![feature(windows_subsystem)]\n #![windows_subsystem = \"wrong\"]\n \n fn main() {}"}, {"sha": "e126422835cae8e050f8d01e908bfb003dfc8b7a", "filename": "src/test/run-make/multiple-emits/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fmultiple-emits%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fmultiple-emits%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmultiple-emits%2FMakefile?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs --emit=asm,llvm-ir -o $(TMPDIR)/out 2>&1\n+\trm $(TMPDIR)/out.ll $(TMPDIR)/out.s\n+\t$(RUSTC) foo.rs --emit=asm,llvm-ir -o $(TMPDIR)/out2.ext 2>&1\n+\trm $(TMPDIR)/out2.ll $(TMPDIR)/out2.s"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make/multiple-emits/foo.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fmultiple-emits%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fmultiple-emits%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmultiple-emits%2Ffoo.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-windows_subsystem\n-\n-#![windows_subsystem = \"console\"]\n-//~^ ERROR: the windows subsystem attribute is currently unstable\n-\n fn main() {}", "previous_filename": "src/test/compile-fail/windows-subsystem-gated.rs"}, {"sha": "ffad1e35ee6607df6e3a0854e5e8310690cdcf19", "filename": "src/test/run-make/windows-subsystem/console.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(windows_subsystem)]\n #![windows_subsystem = \"console\"]\n \n fn main() {}"}, {"sha": "33cbe32059190fb2c0bebe95db127534827a192b", "filename": "src/test/run-make/windows-subsystem/windows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(windows_subsystem)]\n #![windows_subsystem = \"windows\"]\n \n fn main() {}"}, {"sha": "71a826a2bed7fa5ef2e011f04cf1376a8861cb95", "filename": "src/test/rustdoc/test-lists.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frustdoc%2Ftest-lists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Frustdoc%2Ftest-lists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest-lists.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/fn.f.html\n+// @has - \"<pre class='rust fn'>pub fn f()</pre><div class='docblock'><ol><li>list<ol><li>fooooo</li><li>x</li></ol></li><li>foo</li></ol>\"\n+/// 1. list\n+///     1. fooooo\n+///     2. x\n+/// 2. foo\n+pub fn f() {}\n+\n+// @has foo/fn.foo2.html\n+// @has - \"<pre class='rust fn'>pub fn foo2()</pre><div class='docblock'><ul><li>normal list<ul><li><p>sub list</p></li><li><p>new elem still same elem</p><p>and again same elem!</p></li></ul></li><li>new big elem</li></ul>\"\n+/// * normal list\n+///     * sub list\n+///     * new elem\n+///       still same elem\n+///\n+///       and again same elem!\n+/// * new big elem\n+pub fn foo2() {}\n\\ No newline at end of file"}, {"sha": "94cf38fb32f2f79a73b4b4bec297f79532936c33", "filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.rs?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod animal {\n+    pub struct Dog {\n+        pub age: usize,\n+        dog_age: usize,\n+    }\n+\n+    impl Dog {\n+        pub fn new(age: usize) -> Dog {\n+            Dog { age: age, dog_age: age * 7 }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let dog = animal::Dog::new(3);\n+    let dog_age = dog.dog_age();\n+    //let dog_age = dog.dog_age;\n+    println!(\"{}\", dog_age);\n+}"}, {"sha": "d07885915d2b7a1139bca563b7c986879ec62ab1", "filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=46f71a03f9b7bad2fa469113e3858ea2bdbbb5e5", "patch": "@@ -0,0 +1,8 @@\n+error: no method named `dog_age` found for type `animal::Dog` in the current scope\n+  --> $DIR/private-field.rs:26:23\n+   |\n+26 |     let dog_age = dog.dog_age();\n+   |                       ^^^^^^^ private field, not a method\n+\n+error: aborting due to previous error\n+"}]}