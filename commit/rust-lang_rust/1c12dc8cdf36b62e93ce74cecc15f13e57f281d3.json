{"sha": "1c12dc8cdf36b62e93ce74cecc15f13e57f281d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMTJkYzhjZGYzNmI2MmU5M2NlNzRjZWNjMTVmMTNlNTdmMjgxZDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T04:23:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-16T04:23:33Z"}, "message": "Rollup merge of #66735 - SOF3:feature/str_strip, r=KodrAus\n\nAdd str::strip_prefix and str::strip_suffix\n\nIntroduces a counterpart for `Path::strip_prefix` on `str`.\n\nThis was also discussed in https://internals.rust-lang.org/t/pre-pr-path-strip-prefix-counterpart-in-str/11364/.", "tree": {"sha": "8a9b3512eb4eb5d0ab30aef5d50ba757605737cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9b3512eb4eb5d0ab30aef5d50ba757605737cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9wbFCRBK7hj4Ov3rIwAAdHIIAD/QxUxYgzHV2SzgPAqyddIS\nJAv8pCKDDewW7xRm9YLv0FxFUIQ9d8ygoALEFBc7ksKLJJEITAGMa5g61ZVWBM9I\nuJh/rXuMJPUblWxxqwOCwD7klOV4/W3fFyj1orRmwOYFB9ivWkfKhEp48+YalyZE\nvplL2/ledkFZ4Ifwhr5VMgpgHw9XCGjPJbi/PxcnsP3n3SrQrHD61LVK6TY03bdt\nRcV391uuNoHn0/8ncYWpBmUgUTvOH9PQe8ysWdvawlRu6nppkdzbgJHf8ArsR2cS\nRYs1aGwkiP4MLDq9IGPp+vWbacmYhsmZQVfBuYW3E4yFp40oDxgLTcUu4FuYEBE=\n=3dRK\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a9b3512eb4eb5d0ab30aef5d50ba757605737cc\nparent 84ef88975bff75fc82e6950c688b8d57a6c02bdb\nparent 6176051dd0605b77c304aa647f277f4b069763a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576470213 +0100\ncommitter GitHub <noreply@github.com> 1576470213 +0100\n\nRollup merge of #66735 - SOF3:feature/str_strip, r=KodrAus\n\nAdd str::strip_prefix and str::strip_suffix\n\nIntroduces a counterpart for `Path::strip_prefix` on `str`.\n\nThis was also discussed in https://internals.rust-lang.org/t/pre-pr-path-strip-prefix-counterpart-in-str/11364/.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3", "html_url": "https://github.com/rust-lang/rust/commit/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ef88975bff75fc82e6950c688b8d57a6c02bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ef88975bff75fc82e6950c688b8d57a6c02bdb", "html_url": "https://github.com/rust-lang/rust/commit/84ef88975bff75fc82e6950c688b8d57a6c02bdb"}, {"sha": "6176051dd0605b77c304aa647f277f4b069763a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6176051dd0605b77c304aa647f277f4b069763a9", "html_url": "https://github.com/rust-lang/rust/commit/6176051dd0605b77c304aa647f277f4b069763a9"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "763714e536edc04746142bddd78c431713946dc0", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c12dc8cdf36b62e93ce74cecc15f13e57f281d3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1c12dc8cdf36b62e93ce74cecc15f13e57f281d3", "patch": "@@ -8,7 +8,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use self::pattern::Pattern;\n-use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n+use self::pattern::{Searcher, SearchStep, ReverseSearcher, DoubleEndedSearcher};\n \n use crate::char;\n use crate::fmt::{self, Write};\n@@ -3798,6 +3798,77 @@ impl str {\n         }\n     }\n \n+    /// Returns a string slice with the prefix removed.\n+    ///\n+    /// If the string starts with the pattern `prefix`, `Some` is returned with the substring where\n+    /// the prefix is removed. Unlike `trim_start_matches`, this method removes the prefix exactly\n+    /// once.\n+    ///\n+    /// If the string does not start with `prefix`, `None` is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_strip)]\n+    ///\n+    /// assert_eq!(\"foobar\".strip_prefix(\"foo\"), Some(\"bar\"));\n+    /// assert_eq!(\"foobar\".strip_prefix(\"bar\"), None);\n+    /// assert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n+    /// ```\n+    #[must_use = \"this returns the remaining substring as a new slice, \\\n+                  without modifying the original\"]\n+    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"67302\")]\n+    pub fn strip_prefix<'a, P: Pattern<'a>>(&'a self, prefix: P) -> Option<&'a str> {\n+        let mut matcher = prefix.into_searcher(self);\n+        if let SearchStep::Match(start, len) = matcher.next() {\n+            debug_assert_eq!(start, 0, \"The first search step from Searcher \\\n+                must include the first character\");\n+            unsafe {\n+                // Searcher is known to return valid indices.\n+                Some(self.get_unchecked(len..))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns a string slice with the suffix removed.\n+    ///\n+    /// If the string ends with the pattern `suffix`, `Some` is returned with the substring where\n+    /// the suffix is removed. Unlike `trim_end_matches`, this method removes the suffix exactly\n+    /// once.\n+    ///\n+    /// If the string does not end with `suffix`, `None` is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_strip)]\n+    /// assert_eq!(\"barfoo\".strip_suffix(\"foo\"), Some(\"bar\"));\n+    /// assert_eq!(\"barfoo\".strip_suffix(\"bar\"), None);\n+    /// assert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n+    /// ```\n+    #[must_use = \"this returns the remaining substring as a new slice, \\\n+                  without modifying the original\"]\n+    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"67302\")]\n+    pub fn strip_suffix<'a, P>(&'a self, suffix: P) -> Option<&'a str>\n+    where\n+        P: Pattern<'a>,\n+        <P as Pattern<'a>>::Searcher: ReverseSearcher<'a>,\n+    {\n+        let mut matcher = suffix.into_searcher(self);\n+        if let SearchStep::Match(start, end) = matcher.next_back() {\n+            debug_assert_eq!(end, self.len(), \"The first search step from ReverseSearcher \\\n+                must include the last character\");\n+            unsafe {\n+                // Searcher is known to return valid indices.\n+                Some(self.get_unchecked(..start))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Returns a string slice with all suffixes that match a pattern\n     /// repeatedly removed.\n     ///"}]}