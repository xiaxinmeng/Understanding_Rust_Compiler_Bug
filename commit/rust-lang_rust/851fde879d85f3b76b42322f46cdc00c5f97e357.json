{"sha": "851fde879d85f3b76b42322f46cdc00c5f97e357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MWZkZTg3OWQ4NWYzYjc2YjQyMzIyZjQ2Y2RjMDBjNWY5N2UzNTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-04-05T03:32:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-04-05T04:40:34Z"}, "message": "rt: Add architecture-specific general-purpose register definitions\n\nThis will be used for stack crawling, which in turn will be used for GC and\nunwinding.", "tree": {"sha": "e826806a24cc88268a9012b8c9361284c549b8a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e826806a24cc88268a9012b8c9361284c549b8a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/851fde879d85f3b76b42322f46cdc00c5f97e357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/851fde879d85f3b76b42322f46cdc00c5f97e357", "html_url": "https://github.com/rust-lang/rust/commit/851fde879d85f3b76b42322f46cdc00c5f97e357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/851fde879d85f3b76b42322f46cdc00c5f97e357/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9310015c2584e254349388c0f4a97fcb2abd2b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9310015c2584e254349388c0f4a97fcb2abd2b6f", "html_url": "https://github.com/rust-lang/rust/commit/9310015c2584e254349388c0f4a97fcb2abd2b6f"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "af991f747b9886ea6bc5293072eb0d75684f32dd", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -72,7 +72,8 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_box_annihilator.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n-              rt/arch/$$(HOST_$(1))/context.cpp\n+              rt/arch/$$(HOST_$(1))/context.cpp \\\n+              rt/arch/$$(HOST_$(1))/gpr.cpp\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\"}, {"sha": "778d64490bafac29022bea41b3c8951b08b3e7e6", "filename": "src/rt/arch/i386/gpr.cpp", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fi386%2Fgpr.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fi386%2Fgpr.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fgpr.cpp?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -0,0 +1,13 @@\n+#include \"gpr.h\"\n+\n+#define LOAD(rn) do { \\\n+    uintptr_t tmp; \\\n+    asm(\"movl %%\" #rn \",%0\" : \"=r\" (tmp) :); \\\n+    this->rn = tmp; \\\n+} while (0)\n+\n+void rust_gpr::load() {\n+    LOAD(eax); LOAD(ebx); LOAD(ecx); LOAD(edx);\n+    LOAD(esi); LOAD(edi); LOAD(ebp); LOAD(esi);\n+}\n+"}, {"sha": "6c9685e2a5a56b97793ddf2ca6233761b3ec6be6", "filename": "src/rt/arch/i386/gpr.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fi386%2Fgpr.h", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fi386%2Fgpr.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fgpr.h?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -0,0 +1,22 @@\n+// General-purpose registers. This structure is used during stack crawling.\n+\n+#ifndef GPR_H\n+#define GPR_H\n+\n+#include \"rust_gpr_base.h\"\n+\n+class rust_gpr : public rust_gpr_base {\n+public:\n+    uintptr_t eax, ebx, ecx, edx, esi, edi, ebp, eip;\n+\n+    inline uintptr_t get_fp() { return ebp; }\n+    inline uintptr_t get_ip() { return eip; }\n+\n+    inline void set_fp(uintptr_t new_fp) { ebp = new_fp; }\n+    inline void set_ip(uintptr_t new_ip) { eip = new_ip; }\n+\n+    void load();\n+};\n+\n+#endif\n+"}, {"sha": "2533e826d4bd644d312a8a5fc9d9541ffe6adb0b", "filename": "src/rt/arch/x86_64/gpr.cpp", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fx86_64%2Fgpr.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fx86_64%2Fgpr.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fgpr.cpp?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -0,0 +1,15 @@\n+#include \"gpr.h\"\n+\n+#define LOAD(rn) do { \\\n+    uintptr_t tmp; \\\n+    asm(\"movq %%\" #rn \",%0\" : \"=r\" (tmp) :); \\\n+    this->rn = tmp; \\\n+} while (0)\n+\n+void rust_gpr::load() {\n+    LOAD(rax); LOAD(rbx); LOAD(rcx); LOAD(rdx);\n+    LOAD(rsi); LOAD(rdi); LOAD(rbp); LOAD(rsi);\n+    LOAD(r8);  LOAD(r9);  LOAD(r10); LOAD(r11);\n+    LOAD(r12); LOAD(r13); LOAD(r14); LOAD(r15);\n+}\n+"}, {"sha": "620392c579f6a73e433d88a748118f6079708978", "filename": "src/rt/arch/x86_64/gpr.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fx86_64%2Fgpr.h", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Farch%2Fx86_64%2Fgpr.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fgpr.h?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -0,0 +1,23 @@\n+// General-purpose registers. This structure is used during stack crawling.\n+\n+#ifndef GPR_H\n+#define GPR_H\n+\n+#include \"rust_gpr_base.h\"\n+\n+class rust_gpr : public rust_gpr_base {\n+public:\n+    uintptr_t rax, rbx, rcx, rdx, rsi, rdi, rbp, rip;\n+    uintptr_t  r8,  r9, r10, r11, r12, r13, r14, r15;\n+\n+    inline uintptr_t get_fp() { return rbp; }\n+    inline uintptr_t get_ip() { return rip; }\n+\n+    inline void set_fp(uintptr_t new_fp) { rbp = new_fp; }\n+    inline void set_ip(uintptr_t new_ip) { rip = new_ip; }\n+\n+    void load();\n+};\n+\n+#endif\n+"}, {"sha": "d648800aae93753c43aca3a02dfd568b148774d4", "filename": "src/rt/rust_gpr_base.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Frust_gpr_base.h", "raw_url": "https://github.com/rust-lang/rust/raw/851fde879d85f3b76b42322f46cdc00c5f97e357/src%2Frt%2Frust_gpr_base.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gpr_base.h?ref=851fde879d85f3b76b42322f46cdc00c5f97e357", "patch": "@@ -0,0 +1,24 @@\n+// Base class for architecture-specific general-purpose registers. This\n+// structure is used during stack crawling.\n+\n+#ifndef GPR_BASE_H\n+#define GPR_BASE_H\n+\n+#include <stdint.h>\n+\n+class rust_gpr_base {\n+public:\n+    // Returns the value of a register by number.\n+    inline uintptr_t &get(uint32_t i) {\n+        return reinterpret_cast<uintptr_t *>(this)[i];\n+    }\n+\n+    // Sets the value of a register by number.\n+    inline void set(uint32_t i, uintptr_t val) {\n+        reinterpret_cast<uintptr_t *>(this)[i] = val;\n+    }\n+};\n+\n+\n+#endif\n+"}]}