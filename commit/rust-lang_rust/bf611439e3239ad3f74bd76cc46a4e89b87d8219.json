{"sha": "bf611439e3239ad3f74bd76cc46a4e89b87d8219", "node_id": "C_kwDOAAsO6NoAKGJmNjExNDM5ZTMyMzlhZDNmNzRiZDc2Y2M0NmE0ZTg5Yjg3ZDgyMTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T00:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T00:50:46Z"}, "message": "Auto merge of #95362 - scottmcm:calloc-arrays, r=Mark-Simulacrum\n\nSupport arrays of zeros in Vec's __rust_alloc_zeroed optimization\n\nI happened to notice in https://users.rust-lang.org/t/any-advantage-of-box-u64-16-16-16-over-vec-u64/73500/3?u=scottmcm that the calloc optimization wasn't applying to vectors-of-arrays, so here's the easy fix for that.", "tree": {"sha": "b10670aa268126bb05f46eaa1808fe47d1012bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b10670aa268126bb05f46eaa1808fe47d1012bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf611439e3239ad3f74bd76cc46a4e89b87d8219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf611439e3239ad3f74bd76cc46a4e89b87d8219", "html_url": "https://github.com/rust-lang/rust/commit/bf611439e3239ad3f74bd76cc46a4e89b87d8219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf611439e3239ad3f74bd76cc46a4e89b87d8219/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c858a7c3f189eb11ad89d9bf9f2e87cac9d2b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c858a7c3f189eb11ad89d9bf9f2e87cac9d2b76", "html_url": "https://github.com/rust-lang/rust/commit/2c858a7c3f189eb11ad89d9bf9f2e87cac9d2b76"}, {"sha": "8034c45a07ff782b32f3fdc054338b524847aea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8034c45a07ff782b32f3fdc054338b524847aea1", "html_url": "https://github.com/rust-lang/rust/commit/8034c45a07ff782b32f3fdc054338b524847aea1"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "868f2f1e3231b089fd906854216871a7feb63a84", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf611439e3239ad3f74bd76cc46a4e89b87d8219/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf611439e3239ad3f74bd76cc46a4e89b87d8219/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=bf611439e3239ad3f74bd76cc46a4e89b87d8219", "patch": "@@ -2,7 +2,7 @@ use crate::boxed::Box;\n \n #[rustc_specialization_trait]\n pub(super) unsafe trait IsZero {\n-    /// Whether this value is zero\n+    /// Whether this value's representation is all zeros\n     fn is_zero(&self) -> bool;\n }\n \n@@ -49,6 +49,13 @@ unsafe impl<T> IsZero for *mut T {\n     }\n }\n \n+unsafe impl<T: IsZero, const N: usize> IsZero for [T; N] {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        self.iter().all(IsZero::is_zero)\n+    }\n+}\n+\n // `Option<&T>` and `Option<Box<T>>` are guaranteed to represent `None` as null.\n // For fat pointers, the bytes that would be the pointer metadata in the `Some`\n // variant are padding in the `None` variant, so ignoring them and"}]}