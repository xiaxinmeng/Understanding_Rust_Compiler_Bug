{"sha": "3094cc1db00aec531a2b31c1d904453ae2ad8e9c", "node_id": "C_kwDOAAsO6NoAKDMwOTRjYzFkYjAwYWVjNTMxYTJiMzFjMWQ5MDQ0NTNhZTJhZDhlOWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-29T19:12:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T19:12:58Z"}, "message": "Rollup merge of #101141 - compiler-errors:get-trait-ref-is-a-misleading-name, r=oli-obk\n\nSimplify `get_trait_ref` fn used for `virtual_function_elimination`\n\n1. The name `get_trait_ref` is misleading, so I renamed it to something more like `expect_...` because it ICEs if used incorrectly.\n2. No need to manually go through the existential trait refs, we already have `.principal()` for that.", "tree": {"sha": "17a46e6773a94449d74d7314fee0c887ff3210c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a46e6773a94449d74d7314fee0c887ff3210c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3094cc1db00aec531a2b31c1d904453ae2ad8e9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDQ+6CRBK7hj4Ov3rIwAAOwgIACcBawU5ROYVELxFoCkRYZCd\nLK8TwRpZm+ucuzY87aV8uXw4qulj2eVXZd4fjMhyPymCrkDHcygNCkJ60G0Sspn4\nCdbDIecBwu0NXFYb85+Jk8uU6ut6w55Z7R1Og9o75XJze0mXhfeWIJ+YZn364I6x\nEsILY/pe0ysRCF+dRdBcbaJ9MNWo/Ge/dfhjJZd+w2M03XHPrDUvEERee7rG+VLu\n4lhPC7MTlRu9KcHD5K5dd4Y+19bxtIxaeg197mrWzNm8EzSiaU1Oh7JjUxuO8egE\n4ybp0GzSBnJdeRu8nHnhau7rKIEcodmaVM+ZQlOHhquToW0CpSyG8Bt43iFc0GE=\n=c1ur\n-----END PGP SIGNATURE-----\n", "payload": "tree 17a46e6773a94449d74d7314fee0c887ff3210c1\nparent cd53b4dba535f1fa5ded91595d8aacaf3aef075d\nparent 72fe79244d39c356e6fa1da4dfa58354983f98f7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661800378 +0200\ncommitter GitHub <noreply@github.com> 1661800378 +0200\n\nRollup merge of #101141 - compiler-errors:get-trait-ref-is-a-misleading-name, r=oli-obk\n\nSimplify `get_trait_ref` fn used for `virtual_function_elimination`\n\n1. The name `get_trait_ref` is misleading, so I renamed it to something more like `expect_...` because it ICEs if used incorrectly.\n2. No need to manually go through the existential trait refs, we already have `.principal()` for that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3094cc1db00aec531a2b31c1d904453ae2ad8e9c", "html_url": "https://github.com/rust-lang/rust/commit/3094cc1db00aec531a2b31c1d904453ae2ad8e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3094cc1db00aec531a2b31c1d904453ae2ad8e9c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd53b4dba535f1fa5ded91595d8aacaf3aef075d", "html_url": "https://github.com/rust-lang/rust/commit/cd53b4dba535f1fa5ded91595d8aacaf3aef075d"}, {"sha": "72fe79244d39c356e6fa1da4dfa58354983f98f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fe79244d39c356e6fa1da4dfa58354983f98f7", "html_url": "https://github.com/rust-lang/rust/commit/72fe79244d39c356e6fa1da4dfa58354983f98f7"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "f8e982b775189f7ed45ae19b5f0e572bb657f3af", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3094cc1db00aec531a2b31c1d904453ae2ad8e9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3094cc1db00aec531a2b31c1d904453ae2ad8e9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=3094cc1db00aec531a2b31c1d904453ae2ad8e9c", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::*;\n \n-use rustc_middle::ty::{self, subst::GenericArgKind, ExistentialPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::config::Lto;\n use rustc_symbol_mangling::typeid_for_trait_ref;\n use rustc_target::abi::call::FnAbi;\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> VirtualIndex {\n             && bx.cx().sess().lto() == Lto::Fat\n         {\n             let typeid =\n-                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), get_trait_ref(bx.tcx(), ty)));\n+                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)));\n             let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n             let type_checked_load = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n             let func = bx.extract_value(type_checked_load, 0);\n@@ -64,17 +64,13 @@ impl<'a, 'tcx> VirtualIndex {\n     }\n }\n \n-fn get_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n+/// This takes a valid `self` receiver type and extracts the principal trait\n+/// ref of the type.\n+fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n     for arg in ty.peel_refs().walk() {\n         if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(trait_refs, _) = ty.kind() {\n-                return trait_refs[0].map_bound(|trait_ref| match trait_ref {\n-                    ExistentialPredicate::Trait(tr) => tr,\n-                    ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n-                    ExistentialPredicate::AutoTrait(_) => {\n-                        bug!(\"auto traits don't have functions\")\n-                    }\n-                });\n+            if let ty::Dynamic(data, _) = ty.kind() {\n+                return data.principal().expect(\"expected principal trait object\");\n             }\n         }\n     }"}]}