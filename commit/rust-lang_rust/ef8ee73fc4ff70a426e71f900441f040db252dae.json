{"sha": "ef8ee73fc4ff70a426e71f900441f040db252dae", "node_id": "C_kwDOAAsO6NoAKGVmOGVlNzNmYzRmZjcwYTQyNmU3MWY5MDA0NDFmMDQwZGIyNTJkYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T15:49:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T15:49:43Z"}, "message": "Auto merge of #112494 - matthiaskrgr:rollup-xdf3om8, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #112297 (bootstrap: Disallow `--exclude test::std`)\n - #112298 (Update field-offset and enable unstable_offset_of)\n - #112335 (ci: Upgrade loongarch64-linux-gnu GCC to 13.1.0)\n - #112413 (Adjust span labels for `HIDDEN_GLOB_REEXPORTS`)\n - #112483 (Add deprecation warning to python versions <3.6 in x.py)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a08e863beffc8590c28675d4feb73a80ba6d1c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08e863beffc8590c28675d4feb73a80ba6d1c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8ee73fc4ff70a426e71f900441f040db252dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8ee73fc4ff70a426e71f900441f040db252dae", "html_url": "https://github.com/rust-lang/rust/commit/ef8ee73fc4ff70a426e71f900441f040db252dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8ee73fc4ff70a426e71f900441f040db252dae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788c98df5995c9fe360ba9ba5efb103ee69d05c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/788c98df5995c9fe360ba9ba5efb103ee69d05c4", "html_url": "https://github.com/rust-lang/rust/commit/788c98df5995c9fe360ba9ba5efb103ee69d05c4"}, {"sha": "68e162d3643516240b6b1fd2e6ba27e4fd8c091a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e162d3643516240b6b1fd2e6ba27e4fd8c091a", "html_url": "https://github.com/rust-lang/rust/commit/68e162d3643516240b6b1fd2e6ba27e4fd8c091a"}], "stats": {"total": 190, "additions": 104, "deletions": 86}, "files": [{"sha": "ef6b0a5959f8cc072d5cbe7e1e1a102585e017f7", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -848,7 +848,7 @@ dependencies = [\n  \"autocfg\",\n  \"cfg-if\",\n  \"crossbeam-utils\",\n- \"memoffset\",\n+ \"memoffset 0.8.0\",\n  \"scopeguard\",\n ]\n \n@@ -1193,11 +1193,11 @@ dependencies = [\n \n [[package]]\n name = \"field-offset\"\n-version = \"0.3.5\"\n+version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a3cf3a800ff6e860c863ca6d4b16fd999db8b752819c1606884047b73e468535\"\n+checksum = \"38e2275cc4e4fc009b0669731a1e5ab7ebf11f469eaede2bab9309a5b4d6057f\"\n dependencies = [\n- \"memoffset\",\n+ \"memoffset 0.9.0\",\n  \"rustc_version\",\n ]\n \n@@ -2145,6 +2145,15 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"memoffset\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n [[package]]\n name = \"mime\"\n version = \"0.3.16\"\n@@ -3976,7 +3985,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"field-offset\",\n  \"measureme\",\n- \"memoffset\",\n+ \"memoffset 0.9.0\",\n  \"rustc-rayon-core\",\n  \"rustc_ast\",\n  \"rustc_data_structures\","}, {"sha": "13164b0b339a35b08a6f44524f30db0c6a54cb2e", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -953,8 +953,8 @@ pub trait LintContext: Sized {\n                     db.span_label(duplicate_reexport_span, format!(\"but the name `{}` in the {} namespace is also re-exported here\", name, namespace));\n                 }\n                 BuiltinLintDiagnostics::HiddenGlobReexports { name, namespace, glob_reexport_span, private_item_span } => {\n-                    db.span_label(glob_reexport_span, format!(\"the name `{}` in the {} namespace is supposed to be publicly re-exported here\", name, namespace));\n-                    db.span_label(private_item_span, \"but the private item here shadows it\");\n+                    db.span_note(glob_reexport_span, format!(\"the name `{}` in the {} namespace is supposed to be publicly re-exported here\", name, namespace));\n+                    db.span_note(private_item_span, \"but the private item here shadows it\".to_owned());\n                 }\n             }\n             // Rewrap `db`, and pass control to the user."}, {"sha": "ac697a3ae3e991642c069d521ec5f1e346329e75", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -7,7 +7,6 @@ edition = \"2021\"\n \n \n [dependencies]\n-memoffset = { version = \"0.8.0\", features = [\"unstable_const\"] }\n field-offset = \"0.3.5\"\n measureme = \"10.0.0\"\n rustc_ast = { path = \"../rustc_ast\" }\n@@ -25,5 +24,8 @@ rustc_span = { path = \"../rustc_span\" }\n thin-vec = \"0.2.12\"\n tracing = \"0.1\"\n \n+# Not used directly, but included to enable the unstable_offset_of feature\n+memoffset = { version = \"0.9.0\", features = [\"unstable_offset_of\"] }\n+\n [features]\n rustc_use_parallel_compiler = [\"rustc-rayon-core\", \"rustc_query_system/rustc_use_parallel_compiler\"]"}, {"sha": "1aba0713850aef9216cd75818de11fb0d9559082", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -18,6 +18,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - `x.py fmt` now formats only files modified between the merge-base of HEAD and the last commit in the master branch of the rust-lang repository and the current working directory. To restore old behaviour, use `x.py fmt .`. The check mode is not affected by this change. [#105702](https://github.com/rust-lang/rust/pull/105702)\n - The `llvm.version-check` config option has been removed. Older versions were never supported. If you still need to support older versions (e.g. you are applying custom patches), patch `check_llvm_version` in bootstrap to change the minimum version. [#108619](https://github.com/rust-lang/rust/pull/108619)\n - The `rust.ignore-git` option has been renamed to `rust.omit-git-hash`. [#110059](https://github.com/rust-lang/rust/pull/110059)\n+- `--exclude` no longer accepts a `Kind` as part of a Step; instead it uses the top-level Kind of the subcommand. If this matches how you were already using --exclude (e.g. `x test --exclude test::std`), simply remove the kind: `--exclude std`. If you were using a kind that did not match the top-level subcommand, please open an issue explaining why you wanted this feature.\n \n ### Non-breaking changes\n "}, {"sha": "ea1b34812e5cafad0590ad60ad6586a86cdc3df3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -8,7 +8,7 @@ use std::fs::{self, File};\n use std::hash::Hash;\n use std::io::{BufRead, BufReader};\n use std::ops::Deref;\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n@@ -150,29 +150,6 @@ pub struct TaskPath {\n     pub kind: Option<Kind>,\n }\n \n-impl TaskPath {\n-    pub fn parse(path: impl Into<PathBuf>) -> TaskPath {\n-        let mut kind = None;\n-        let mut path = path.into();\n-\n-        let mut components = path.components();\n-        if let Some(Component::Normal(os_str)) = components.next() {\n-            if let Some(str) = os_str.to_str() {\n-                if let Some((found_kind, found_prefix)) = str.split_once(\"::\") {\n-                    if found_kind.is_empty() {\n-                        panic!(\"empty kind in task path {}\", path.display());\n-                    }\n-                    kind = Kind::parse(found_kind);\n-                    assert!(kind.is_some());\n-                    path = Path::new(found_prefix).join(components.as_path());\n-                }\n-            }\n-        }\n-\n-        TaskPath { path, kind }\n-    }\n-}\n-\n impl Debug for TaskPath {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         if let Some(kind) = &self.kind {\n@@ -216,17 +193,17 @@ impl PathSet {\n         PathSet::Set(set)\n     }\n \n-    fn has(&self, needle: &Path, module: Option<Kind>) -> bool {\n+    fn has(&self, needle: &Path, module: Kind) -> bool {\n         match self {\n             PathSet::Set(set) => set.iter().any(|p| Self::check(p, needle, module)),\n             PathSet::Suite(suite) => Self::check(suite, needle, module),\n         }\n     }\n \n     // internal use only\n-    fn check(p: &TaskPath, needle: &Path, module: Option<Kind>) -> bool {\n-        if let (Some(p_kind), Some(kind)) = (&p.kind, module) {\n-            p.path.ends_with(needle) && *p_kind == kind\n+    fn check(p: &TaskPath, needle: &Path, module: Kind) -> bool {\n+        if let Some(p_kind) = &p.kind {\n+            p.path.ends_with(needle) && *p_kind == module\n         } else {\n             p.path.ends_with(needle)\n         }\n@@ -238,11 +215,7 @@ impl PathSet {\n     /// This is used for `StepDescription::krate`, which passes all matching crates at once to\n     /// `Step::make_run`, rather than calling it many times with a single crate.\n     /// See `tests.rs` for examples.\n-    fn intersection_removing_matches(\n-        &self,\n-        needles: &mut Vec<&Path>,\n-        module: Option<Kind>,\n-    ) -> PathSet {\n+    fn intersection_removing_matches(&self, needles: &mut Vec<&Path>, module: Kind) -> PathSet {\n         let mut check = |p| {\n             for (i, n) in needles.iter().enumerate() {\n                 let matched = Self::check(p, n, module);\n@@ -307,7 +280,7 @@ impl StepDescription {\n     }\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n-        if builder.config.exclude.iter().any(|e| pathset.has(&e.path, e.kind)) {\n+        if builder.config.exclude.iter().any(|e| pathset.has(&e, builder.kind)) {\n             println!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n@@ -562,7 +535,7 @@ impl<'a> ShouldRun<'a> {\n     ) -> Vec<PathSet> {\n         let mut sets = vec![];\n         for pathset in &self.paths {\n-            let subset = pathset.intersection_removing_matches(paths, Some(kind));\n+            let subset = pathset.intersection_removing_matches(paths, kind);\n             if subset != PathSet::empty() {\n                 sets.push(subset);\n             }\n@@ -2138,7 +2111,7 @@ impl<'a> Builder<'a> {\n         let should_run = (desc.should_run)(ShouldRun::new(self, desc.kind));\n \n         for path in &self.paths {\n-            if should_run.paths.iter().any(|s| s.has(path, Some(desc.kind)))\n+            if should_run.paths.iter().any(|s| s.has(path, desc.kind))\n                 && !desc.is_excluded(\n                     self,\n                     &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind) }),"}, {"sha": "31dcee58216ae01c259de7e6857bce18b817533b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -101,23 +101,21 @@ fn test_invalid() {\n \n #[test]\n fn test_intersection() {\n-    let set = PathSet::Set(\n-        [\"library/core\", \"library/alloc\", \"library/std\"].into_iter().map(TaskPath::parse).collect(),\n-    );\n+    let set = |paths: &[&str]| {\n+        PathSet::Set(paths.into_iter().map(|p| TaskPath { path: p.into(), kind: None }).collect())\n+    };\n+    let library_set = set(&[\"library/core\", \"library/alloc\", \"library/std\"]);\n     let mut command_paths =\n         vec![Path::new(\"library/core\"), Path::new(\"library/alloc\"), Path::new(\"library/stdarch\")];\n-    let subset = set.intersection_removing_matches(&mut command_paths, None);\n-    assert_eq!(\n-        subset,\n-        PathSet::Set([\"library/core\", \"library/alloc\"].into_iter().map(TaskPath::parse).collect())\n-    );\n+    let subset = library_set.intersection_removing_matches(&mut command_paths, Kind::Build);\n+    assert_eq!(subset, set(&[\"library/core\", \"library/alloc\"]),);\n     assert_eq!(command_paths, vec![Path::new(\"library/stdarch\")]);\n }\n \n #[test]\n fn test_exclude() {\n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n+    config.exclude = vec![\"src/tools/tidy\".into()];\n     let cache = run_build(&[], config);\n \n     // Ensure we have really excluded tidy\n@@ -129,21 +127,16 @@ fn test_exclude() {\n \n #[test]\n fn test_exclude_kind() {\n-    let path = PathBuf::from(\"src/tools/cargotest\");\n-    let exclude = TaskPath::parse(\"test::src/tools/cargotest\");\n-    assert_eq!(exclude, TaskPath { kind: Some(Kind::Test), path: path.clone() });\n+    let path = PathBuf::from(\"compiler/rustc_data_structures\");\n \n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    // Ensure our test is valid, and `test::Cargotest` would be run without the exclude.\n-    assert!(run_build(&[path.clone()], config.clone()).contains::<test::Cargotest>());\n-    // Ensure tests for cargotest are skipped.\n-    config.exclude = vec![exclude.clone()];\n-    assert!(!run_build(&[path.clone()], config).contains::<test::Cargotest>());\n-\n-    // Ensure builds for cargotest are not skipped.\n-    let mut config = configure(\"build\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![exclude];\n-    assert!(run_build(&[path], config).contains::<tool::CargoTest>());\n+    // Ensure our test is valid, and `test::Rustc` would be run without the exclude.\n+    assert!(run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure tests for rustc are skipped.\n+    config.exclude = vec![path.clone()];\n+    assert!(!run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure builds for rustc are not skipped.\n+    assert!(run_build(&[], config).contains::<compile::Rustc>());\n }\n \n /// Ensure that if someone passes both a single crate and `library`, all library crates get built."}, {"sha": "c59df7eecf680adf3df710ae2a05aeedfe6551bb", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -17,7 +17,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n-use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::cc_detect::{ndk_compiler, Language};\n use crate::channel::{self, GitInfo};\n@@ -80,7 +79,7 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub omit_git_hash: bool,\n-    pub exclude: Vec<TaskPath>,\n+    pub exclude: Vec<PathBuf>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n@@ -957,7 +956,7 @@ impl Config {\n \n         // Set flags.\n         config.paths = std::mem::take(&mut flags.paths);\n-        config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n+        config.exclude = flags.exclude;\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;"}, {"sha": "8af0565cd38de1dd1b0b35d0446cd2733f8eb73e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -1537,7 +1537,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         for exclude in &builder.config.exclude {\n             cmd.arg(\"--skip\");\n-            cmd.arg(&exclude.path);\n+            cmd.arg(&exclude);\n         }\n \n         // Get paths from cmd args"}, {"sha": "852f2e2093595be04869c00dda6a94bfe176b28c", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -270,7 +270,7 @@ For targets: `loongarch64-unknown-linux-gnu`\n - Operating System > Linux kernel version = 5.19.16\n - Binary utilities > Version of binutils = 2.40\n - C-library > glibc version = 2.36\n-- C compiler > gcc version = 12.2.0\n+- C compiler > gcc version = 13.1.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n ### `mips-linux-gnu.defconfig`"}, {"sha": "b8d399153271700d525d0dab3cbf63e94f6c0967", "filename": "src/ci/docker/scripts/crosstool-ng-git.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-git.sh?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -2,7 +2,7 @@\n set -ex\n \n URL=https://github.com/crosstool-ng/crosstool-ng\n-REV=943364711a650d9b9e84c1b42c91cc0265b6ab5c\n+REV=227d99d7f3115f3a078595a580d2b307dcd23e93\n \n mkdir crosstool-ng\n cd crosstool-ng"}, {"sha": "102b5656245268f786c2896ded96db576f6291ef", "filename": "tests/ui/resolve/hidden_glob_reexports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.rs?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -6,10 +6,10 @@ pub mod upstream_a {\n         pub struct Bar {}\n     }\n \n-    pub use self::inner::*;\n-\n     struct Foo;\n     //~^ WARN private item shadows public glob re-export\n+\n+    pub use self::inner::*;\n }\n \n pub mod upstream_b {"}, {"sha": "11fa94d6fee987f8160edc4f615063d7eacfc6e5", "filename": "tests/ui/resolve/hidden_glob_reexports.stderr", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fhidden_glob_reexports.stderr?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -1,31 +1,54 @@\n warning: private item shadows public glob re-export\n-  --> $DIR/hidden_glob_reexports.rs:11:5\n+  --> $DIR/hidden_glob_reexports.rs:9:5\n    |\n-LL |     pub use self::inner::*;\n-   |             -------------- the name `Foo` in the type namespace is supposed to be publicly re-exported here\n-LL |\n LL |     struct Foo;\n-   |     ^^^^^^^^^^^ but the private item here shadows it\n+   |     ^^^^^^^^^^^\n+   |\n+note: the name `Foo` in the type namespace is supposed to be publicly re-exported here\n+  --> $DIR/hidden_glob_reexports.rs:12:13\n+   |\n+LL |     pub use self::inner::*;\n+   |             ^^^^^^^^^^^^^^\n+note: but the private item here shadows it\n+  --> $DIR/hidden_glob_reexports.rs:9:5\n    |\n+LL |     struct Foo;\n+   |     ^^^^^^^^^^^\n    = note: `#[warn(hidden_glob_reexports)]` on by default\n \n warning: private item shadows public glob re-export\n   --> $DIR/hidden_glob_reexports.rs:27:9\n    |\n+LL |     use self::other::Foo;\n+   |         ^^^^^^^^^^^^^^^^\n+   |\n+note: the name `Foo` in the type namespace is supposed to be publicly re-exported here\n+  --> $DIR/hidden_glob_reexports.rs:25:13\n+   |\n LL |     pub use self::inner::*;\n-   |             -------------- the name `Foo` in the type namespace is supposed to be publicly re-exported here\n-LL |\n+   |             ^^^^^^^^^^^^^^\n+note: but the private item here shadows it\n+  --> $DIR/hidden_glob_reexports.rs:27:9\n+   |\n LL |     use self::other::Foo;\n-   |         ^^^^^^^^^^^^^^^^ but the private item here shadows it\n+   |         ^^^^^^^^^^^^^^^^\n \n warning: private item shadows public glob re-export\n   --> $DIR/hidden_glob_reexports.rs:40:9\n    |\n+LL |     use std::primitive::u8;\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the name `u8` in the type namespace is supposed to be publicly re-exported here\n+  --> $DIR/hidden_glob_reexports.rs:38:13\n+   |\n LL |     pub use self::no_def_id::*;\n-   |             ------------------ the name `u8` in the type namespace is supposed to be publicly re-exported here\n-LL |\n+   |             ^^^^^^^^^^^^^^^^^^\n+note: but the private item here shadows it\n+  --> $DIR/hidden_glob_reexports.rs:40:9\n+   |\n LL |     use std::primitive::u8;\n-   |         ^^^^^^^^^^^^^^^^^^ but the private item here shadows it\n+   |         ^^^^^^^^^^^^^^^^^^\n \n warning: 3 warnings emitted\n "}, {"sha": "7163df5cfe99b0d63419d31ef0de2796208a438b", "filename": "x.py", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef8ee73fc4ff70a426e71f900441f040db252dae/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/ef8ee73fc4ff70a426e71f900441f040db252dae/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=ef8ee73fc4ff70a426e71f900441f040db252dae", "patch": "@@ -9,12 +9,17 @@\n if __name__ == '__main__':\n     import os\n     import sys\n+    import warnings\n+    from inspect import cleandoc\n+\n+    major = sys.version_info.major\n+    minor = sys.version_info.minor\n \n     # If this is python2, check if python3 is available and re-execute with that\n     # interpreter. Only python3 allows downloading CI LLVM.\n     #\n     # This matters if someone's system `python` is python2.\n-    if sys.version_info.major < 3:\n+    if major < 3:\n         try:\n             os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n         except OSError:\n@@ -24,6 +29,19 @@\n                 # Python 3 isn't available, fall back to python 2\n                 pass\n \n+    # soft deprecation of old python versions\n+    skip_check = os.environ.get(\"RUST_IGNORE_OLD_PYTHON\") == \"1\"\n+    if major < 3 or (major == 3 and minor < 6):\n+        msg = cleandoc(\"\"\"\n+            Using python {}.{} but >= 3.6 is recommended. Your python version\n+            should continue to work for the near future, but this will\n+            eventually change. If python >= 3.6 is not available on your system,\n+            please file an issue to help us understand timelines.\n+\n+            This message can be suppressed by setting `RUST_IGNORE_OLD_PYTHON=1`\n+        \"\"\".format(major, minor))\n+        warnings.warn(msg)\n+\n     rust_dir = os.path.dirname(os.path.abspath(__file__))\n     # For the import below, have Python search in src/bootstrap first.\n     sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))"}]}