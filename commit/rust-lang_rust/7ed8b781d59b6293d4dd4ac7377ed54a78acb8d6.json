{"sha": "7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDhiNzgxZDU5YjYyOTNkNGRkNGFjNzM3N2VkNTRhNzhhY2I4ZDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-26T01:12:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-26T01:16:34Z"}, "message": "Thread a source location though for type error reporting instead of the awful \"List.hd scopes\" hack", "tree": {"sha": "4bf146434a63f5bb21cbbe063a3032fa674421b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf146434a63f5bb21cbbe063a3032fa674421b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "html_url": "https://github.com/rust-lang/rust/commit/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af39e222bc4ff5341accaf75c70a1a271ac18905", "url": "https://api.github.com/repos/rust-lang/rust/commits/af39e222bc4ff5341accaf75c70a1a271ac18905", "html_url": "https://github.com/rust-lang/rust/commit/af39e222bc4ff5341accaf75c70a1a271ac18905"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "9574f0c157bc8c2c422f45d106876ca958ddf64c", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "patch": "@@ -261,6 +261,7 @@ let push_node r n =\n \n \n let rec lookup_type_by_name\n+    ?loc:loc\n     (cx:ctxt)\n     (scopes:scope list)\n     (recur:recur_info)\n@@ -302,7 +303,7 @@ let rec lookup_type_by_name\n             begin\n               fun i t ->\n                 let t =\n-                  resolve_type cx scopes recur t\n+                  resolve_type ?loc:loc cx scopes recur t\n                 in\n                   iflog cx (fun _ -> log cx\n                               \"lookup_type_by_name resolved arg %d to %a\" i\n@@ -325,16 +326,15 @@ let rec lookup_type_by_name\n                   (Fmt.fmt_to_str Ast.fmt_app_args args);\n             end;\n           let ty =\n-            rebuild_ty_under_params\n-              ~node_id:(id_of_scope (List.hd scopes))\n-              cx None ty params args true\n+            rebuild_ty_under_params ?node_id:loc cx None ty params args true\n           in\n             iflog cx (fun _ -> log cx \"--- lookup_type_by_name %a ==> %a\"\n                         Ast.sprintf_name name\n                         Ast.sprintf_ty ty);\n             (scopes', id, ty)\n \n and resolve_type\n+    ?loc:loc\n     (cx:ctxt)\n     (scopes:(scope list))\n     (recur:recur_info)\n@@ -344,7 +344,7 @@ and resolve_type\n   let base = ty_fold_rebuild (fun t -> t) in\n   let ty_fold_named name =\n     let (scopes, node, t) =\n-      lookup_type_by_name cx scopes recur name\n+      lookup_type_by_name ?loc:loc cx scopes recur name\n     in\n       iflog cx (fun _ ->\n                   log cx \"resolved type name '%a' to item %d with ty %a\"\n@@ -356,7 +356,7 @@ and resolve_type\n         let recur = push_node recur node in\n           iflog cx (fun _ -> log cx \"recursively resolving type %a\"\n                       Ast.sprintf_ty t);\n-          resolve_type cx scopes recur t\n+          resolve_type ?loc:loc cx scopes recur t\n   in\n   let fold =\n     { base with\n@@ -379,7 +379,8 @@ let type_resolving_visitor\n   let tinfos = Hashtbl.create 0 in\n \n   let resolve_ty (t:Ast.ty) : Ast.ty =\n-    resolve_type cx (!scopes) empty_recur_info t\n+    resolve_type ~loc:(id_of_scope (List.hd (!scopes)))\n+      cx (!scopes) empty_recur_info t\n   in\n \n   let resolve_slot (s:Ast.slot) : Ast.slot =\n@@ -412,7 +413,7 @@ let type_resolving_visitor\n     let resolve_and_store_type _ =\n       let t = ty_of_mod_item item in\n       let ty =\n-        resolve_type cx (!scopes) empty_recur_info t\n+        resolve_type ~loc:item.id cx (!scopes) empty_recur_info t\n       in\n         log cx \"resolved item %s, type as %a\" id Ast.sprintf_ty ty;\n         htab_put cx.ctxt_all_item_types item.id ty;\n@@ -422,7 +423,7 @@ let type_resolving_visitor\n         match item.node.Ast.decl_item with\n             Ast.MOD_ITEM_type (_, ty) ->\n               let ty =\n-                resolve_type cx (!scopes) empty_recur_info ty\n+                resolve_type ~loc:item.id cx (!scopes) empty_recur_info ty\n               in\n                 log cx \"resolved item %s, defining type %a\"\n                   id Ast.sprintf_ty ty;\n@@ -468,7 +469,7 @@ let type_resolving_visitor\n \n   let visit_obj_fn_pre obj ident fn =\n     let fty =\n-      resolve_type cx (!scopes)\n+      resolve_type ~loc:fn.id cx (!scopes)\n         empty_recur_info (Ast.TY_fn (ty_fn_of_fn fn.node))\n     in\n       log cx \"resolved obj fn %s as %a\" ident Ast.sprintf_ty fty;"}]}