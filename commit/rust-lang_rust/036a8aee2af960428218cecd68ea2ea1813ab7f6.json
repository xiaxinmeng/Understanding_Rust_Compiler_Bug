{"sha": "036a8aee2af960428218cecd68ea2ea1813ab7f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNmE4YWVlMmFmOTYwNDI4MjE4Y2VjZDY4ZWEyZWExODEzYWI3ZjY=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T00:35:58Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T08:13:38Z"}, "message": "vscode: postrefactor", "tree": {"sha": "4e9d5e68530fb5dc60415c85ce996f6e64194667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e9d5e68530fb5dc60415c85ce996f6e64194667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036a8aee2af960428218cecd68ea2ea1813ab7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036a8aee2af960428218cecd68ea2ea1813ab7f6", "html_url": "https://github.com/rust-lang/rust/commit/036a8aee2af960428218cecd68ea2ea1813ab7f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036a8aee2af960428218cecd68ea2ea1813ab7f6/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c69443e7fac2843262d6890557de1f9803e34a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c69443e7fac2843262d6890557de1f9803e34a", "html_url": "https://github.com/rust-lang/rust/commit/e4c69443e7fac2843262d6890557de1f9803e34a"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "b7a397414ebdcacd84a2d85bfd30ad058a93d486", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/036a8aee2af960428218cecd68ea2ea1813ab7f6/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/036a8aee2af960428218cecd68ea2ea1813ab7f6/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=036a8aee2af960428218cecd68ea2ea1813ab7f6", "patch": "@@ -82,7 +82,7 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n \n // FIXME: consider implementing this via the Tree View API?\n // https://code.visualstudio.com/api/extension-guides/tree-view\n-class AstInspector implements vscode.HoverProvider, Disposable {\n+class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n     private readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n         borderColor: new vscode.ThemeColor('rust_analyzer.syntaxTreeBorder'),\n         borderStyle: \"solid\",\n@@ -96,8 +96,7 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         const astEditor = this.findAstTextEditor();\n         if (!this.rustEditor || !astEditor) return undefined;\n \n-        console.time(\"Build goto def index\");\n-        let buf: [vscode.Range, vscode.Range][] = [];\n+        const buf: [vscode.Range, vscode.Range][] = [];\n         for (let i = 0; i < astEditor.document.lineCount; ++i) {\n             const astLine = astEditor.document.lineAt(i);\n \n@@ -108,10 +107,8 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n             const rustRange = this.parseRustTextRange(this.rustEditor.document, astLine.text);\n             if (!rustRange) continue;\n \n-            buf.push([rustRange, this.findAstRange(astLine)]);\n+            buf.push([rustRange, this.findAstNodeRange(astLine)]);\n         }\n-\n-        console.timeEnd(\"Build goto def index\");\n         return buf;\n     });\n \n@@ -167,9 +164,7 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         const astEditor = this.findAstTextEditor();\n         if (!astEditor) return;\n \n-        console.time(\"Goto def\");\n         const rust2AstRanges = this.rust2Ast.get()?.find(([rustRange, _]) => rustRange.contains(pos));\n-        console.timeEnd(\"Goto def\");\n         if (!rust2AstRanges) return;\n \n         const [rustFileRange, astFileRange] = rust2AstRanges;\n@@ -198,12 +193,12 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         this.rustEditor.revealRange(rustFileRange);\n \n         const rustSourceCode = this.rustEditor.document.getText(rustFileRange);\n-        const astFileRange = this.findAstRange(astFileLine);\n+        const astFileRange = this.findAstNodeRange(astFileLine);\n \n         return new vscode.Hover([\"```rust\\n\" + rustSourceCode + \"\\n```\"], astFileRange);\n     }\n \n-    private findAstRange(astLine: vscode.TextLine) {\n+    private findAstNodeRange(astLine: vscode.TextLine) {\n         const lineOffset = astLine.range.start;\n         const begin = lineOffset.translate(undefined, astLine.firstNonWhitespaceCharacterIndex);\n         const end = lineOffset.translate(undefined, astLine.text.trimEnd().length);\n@@ -223,7 +218,7 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n class Lazy<T> {\n     val: undefined | T;\n \n-    constructor(private readonly compute: () => undefined | T) {}\n+    constructor(private readonly compute: () => undefined | T) { }\n \n     get() {\n         return this.val ?? (this.val = this.compute());\n@@ -232,5 +227,4 @@ class Lazy<T> {\n     reset() {\n         this.val = undefined;\n     }\n-\n }"}]}