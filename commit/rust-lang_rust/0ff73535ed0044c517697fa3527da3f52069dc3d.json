{"sha": "0ff73535ed0044c517697fa3527da3f52069dc3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjczNTM1ZWQwMDQ0YzUxNzY5N2ZhMzUyN2RhM2Y1MjA2OWRjM2Q=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-17T22:57:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-18T17:55:54Z"}, "message": "Move `trait_ref_to_existential` to a closure\n\nreview comment", "tree": {"sha": "0ea1219c2a51d493269156d70495937a184c1799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea1219c2a51d493269156d70495937a184c1799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff73535ed0044c517697fa3527da3f52069dc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff73535ed0044c517697fa3527da3f52069dc3d", "html_url": "https://github.com/rust-lang/rust/commit/0ff73535ed0044c517697fa3527da3f52069dc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff73535ed0044c517697fa3527da3f52069dc3d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1c2612f818f6db6c626347138d5a20cababcb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1c2612f818f6db6c626347138d5a20cababcb2", "html_url": "https://github.com/rust-lang/rust/commit/8d1c2612f818f6db6c626347138d5a20cababcb2"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "a33b2e32c86585d6d499052fbc32152a60a00a33", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ff73535ed0044c517697fa3527da3f52069dc3d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff73535ed0044c517697fa3527da3f52069dc3d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0ff73535ed0044c517697fa3527da3f52069dc3d", "patch": "@@ -1224,25 +1224,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         )\n     }\n \n-    /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n-    /// removing the dummy `Self` type (`trait_object_dummy_self`).\n-    fn trait_ref_to_existential(\n-        &self,\n-        trait_ref: ty::TraitRef<'tcx>,\n-    ) -> ty::ExistentialTraitRef<'tcx> {\n-        if trait_ref.self_ty() != self.tcx().types.trait_object_dummy_self {\n-            // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`, which\n-            // picks up non-supertraits where clauses - but also, the object safety completely\n-            // ignores trait aliases, which could be object safety hazards. We `delay_span_bug`\n-            // here to avoid an ICE in stable even when the feature is disabled. (#66420)\n-            self.tcx().sess.delay_span_bug(DUMMY_SP, &format!(\n-                \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n-                trait_ref,\n-            ));\n-        }\n-        ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n-    }\n-\n     fn conv_object_ty_poly_trait_ref(&self,\n         span: Span,\n         trait_bounds: &[hir::PolyTraitRef],\n@@ -1424,13 +1405,30 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         debug!(\"regular_traits: {:?}\", regular_traits);\n         debug!(\"auto_traits: {:?}\", auto_traits);\n \n+        // Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n+        // removing the dummy `Self` type (`trait_object_dummy_self`).\n+        let trait_ref_to_existential = |trait_ref: ty::TraitRef<'tcx>| {\n+            if trait_ref.self_ty() != dummy_self {\n+                // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n+                // which picks up non-supertraits where clauses - but also, the object safety\n+                // completely ignores trait aliases, which could be object safety hazards. We\n+                // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n+                // disabled. (#66420)\n+                tcx.sess.delay_span_bug(DUMMY_SP, &format!(\n+                    \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n+                    trait_ref,\n+                ));\n+            }\n+            ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+        };\n+\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n         let existential_trait_refs = regular_traits.iter().map(|i| {\n-            i.trait_ref().map_bound(|trait_ref| self.trait_ref_to_existential(trait_ref))\n+            i.trait_ref().map_bound(|trait_ref| trait_ref_to_existential(trait_ref))\n         });\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n-                let trait_ref = self.trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n+                let trait_ref = trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n                 ty::ExistentialProjection {\n                     ty: b.ty,\n                     item_def_id: b.projection_ty.item_def_id,"}]}