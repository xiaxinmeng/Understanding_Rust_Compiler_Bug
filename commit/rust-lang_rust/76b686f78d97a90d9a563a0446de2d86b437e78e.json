{"sha": "76b686f78d97a90d9a563a0446de2d86b437e78e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjY4NmY3OGQ5N2E5MGQ5YTU2M2EwNDQ2ZGUyZDg2YjQzN2U3OGU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-10T08:30:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Rename NonNull::empty to dangling.", "tree": {"sha": "0b704bd9205327eaa832476dbc000598ac880e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b704bd9205327eaa832476dbc000598ac880e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b686f78d97a90d9a563a0446de2d86b437e78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b686f78d97a90d9a563a0446de2d86b437e78e", "html_url": "https://github.com/rust-lang/rust/commit/76b686f78d97a90d9a563a0446de2d86b437e78e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b686f78d97a90d9a563a0446de2d86b437e78e/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aeeafff49bf099e95caf94719fabcc5008ab95a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aeeafff49bf099e95caf94719fabcc5008ab95a", "html_url": "https://github.com/rust-lang/rust/commit/5aeeafff49bf099e95caf94719fabcc5008ab95a"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "fab5832d905df8262bfbaa85971ef913e8711844", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76b686f78d97a90d9a563a0446de2d86b437e78e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b686f78d97a90d9a563a0446de2d86b437e78e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=76b686f78d97a90d9a563a0446de2d86b437e78e", "patch": "@@ -2370,6 +2370,7 @@ impl<T: Sized> Unique<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    // FIXME: rename to dangling() to match NonNull?\n     pub fn empty() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2509,7 +2510,7 @@ impl<T: Sized> NonNull<T> {\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n     #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n-    pub fn empty() -> Self {\n+    pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n             NonNull::new_unchecked(ptr)"}]}