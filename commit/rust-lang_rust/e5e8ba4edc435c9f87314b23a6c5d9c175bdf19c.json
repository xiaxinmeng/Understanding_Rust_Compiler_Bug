{"sha": "e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZThiYTRlZGM0MzVjOWY4NzMxNGIyM2E2YzVkOWMxNzViZGYxOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T04:01:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T04:01:02Z"}, "message": "Auto merge of #68191 - simlay:add-tvSO-target, r=nagisa\n\nAdded tvOS as targets\n\nThis is a first attempt of adding support tvOS as described in #48862. It's got a lot of overlap with [src/librustc_target/spec/apple_ios_base.rs](https://github.com/rust-lang/rust/blob/31dd4f4acbcbdb02b0745d2136399ed664a28050/src/librustc_target/spec/apple_ios_base.rs).\n\nI thought about refactoring `apple_ios_base.rs` to include this as well but that would require each of the ios and tvos targets to be of the something like the form `let base = opts(AppleOS::TV, Arch::Arm64)?;` I also did the same thing for watchOS because from what I can tell, all three targets (iOS, tvOS, and watchOS) have the same logic but have different parameters being sent to `xcrun`. Thoughts?\n\nAs far as the `data_layout` and other parameters to `Target`, I did as much research as I could but it really seems that processor in the [iPhone 11 is the same as the apple TV](https://en.wikipedia.org/wiki/Apple-designed_processors) so I didn't change any of those parameters.\n\nI did get this to build and tested that it's actually running the the below logic (because the parameter to `xcrun` is `appletvos` not `tvos`).\n\nI didn't manage to get it to actually compile a file with `fn main(){}` because I don't have the stdlib for `aarch64-apple-tvos` compiled it seems. Is there documentation for this?\n\nSimilar to the ending of https://github.com/rust-lang/rust/pull/63467, I'm not sure what to do next.", "tree": {"sha": "e23de4b5515c476f6dc5ef37af16e9bfa202d0a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23de4b5515c476f6dc5ef37af16e9bfa202d0a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "html_url": "https://github.com/rust-lang/rust/commit/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "html_url": "https://github.com/rust-lang/rust/commit/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}, {"sha": "259977158e19acccc1bbc71c8cc4449ad40a8bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/259977158e19acccc1bbc71c8cc4449ad40a8bef", "html_url": "https://github.com/rust-lang/rust/commit/259977158e19acccc1bbc71c8cc4449ad40a8bef"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "e896b46da9a625a771c347cfaec147ceaddf3964", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64)?;\n+    let base = opts(Arch::Arm64, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "794bc7900e74748257ecfdea9e88177f97f0973b", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -0,0 +1,25 @@\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = opts(Arch::Arm64, AppleOS::tvOS)?;\n+    Ok(Target {\n+        llvm_target: \"arm64-apple-tvos\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"tvos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n+            eliminate_frame_pointer: false,\n+            max_atomic_width: Some(128),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            ..base\n+        },\n+    })\n+}"}, {"sha": "513754352fbfbbad86aebf4ab9a48dfce4c2ae28", "filename": "src/librustc_target/spec/apple_sdk_base.rs", "status": "renamed", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -5,7 +5,6 @@ use std::path::Path;\n use std::process::Command;\n \n use Arch::*;\n-\n #[allow(non_camel_case_types)]\n #[derive(Copy, Clone)]\n pub enum Arch {\n@@ -17,6 +16,13 @@ pub enum Arch {\n     X86_64_macabi,\n }\n \n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum AppleOS {\n+    tvOS,\n+    iOS,\n+}\n+\n impl Arch {\n     pub fn to_string(self) -> &'static str {\n         match self {\n@@ -41,6 +47,17 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n         let p = Path::new(&sdkroot);\n         match sdk_name {\n             // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"appletvos\"\n+                if sdkroot.contains(\"TVSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n+            \"appletvsimulator\"\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n             \"iphoneos\"\n                 if sdkroot.contains(\"iPhoneSimulator.platform\")\n                     || sdkroot.contains(\"MacOSX.platform\") =>\n@@ -82,11 +99,17 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n     }\n }\n \n-fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n-    let sdk_name = match arch {\n-        Armv7 | Armv7s | Arm64 => \"iphoneos\",\n-        I386 | X86_64 => \"iphonesimulator\",\n-        X86_64_macabi => \"macosx10.15\",\n+fn build_pre_link_args(arch: Arch, os: AppleOS) -> Result<LinkArgs, String> {\n+    let sdk_name = match (arch, os) {\n+        (Arm64, AppleOS::tvOS) => \"appletvos\",\n+        (X86_64, AppleOS::tvOS) => \"appletvsimulator\",\n+        (Armv7, AppleOS::iOS) => \"iphoneos\",\n+        (Armv7s, AppleOS::iOS) => \"iphoneos\",\n+        (Arm64, AppleOS::iOS) => \"iphoneos\",\n+        (I386, AppleOS::iOS) => \"iphonesimulator\",\n+        (X86_64, AppleOS::iOS) => \"iphonesimulator\",\n+        (X86_64_macabi, AppleOS::iOS) => \"macosx10.15\",\n+        _ => unreachable!(),\n     };\n \n     let arch_name = arch.to_string();\n@@ -128,8 +151,8 @@ fn link_env_remove(arch: Arch) -> Vec<String> {\n     }\n }\n \n-pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n-    let pre_link_args = build_pre_link_args(arch)?;\n+pub fn opts(arch: Arch, os: AppleOS) -> Result<TargetOptions, String> {\n+    let pre_link_args = build_pre_link_args(arch, os)?;\n     Ok(TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,", "previous_filename": "src/librustc_target/spec/apple_ios_base.rs"}, {"sha": "c0c2ae909f8f03c9ea1662fad8b1d92cae2c955c", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7)?;\n+    let base = opts(Arch::Armv7, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "6a5654f10d4163dce5e0962ca52235c71c50afb5", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7s)?;\n+    let base = opts(Arch::Armv7s, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "a121d49769d61096fbd3d76b7676d3fc8715b5e5", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::I386)?;\n+    let base = opts(Arch::I386, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "37eabb4f26d4b0af159f5cd3fee564a07261d8d4", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -47,7 +47,7 @@ use rustc_macros::HashStable_Generic;\n pub mod abi;\n mod android_base;\n mod apple_base;\n-mod apple_ios_base;\n+mod apple_sdk_base;\n mod arm_base;\n mod cloudabi_base;\n mod dragonfly_base;\n@@ -434,6 +434,8 @@ supported_targets! {\n     (\"armv7-apple-ios\", armv7_apple_ios),\n     (\"armv7s-apple-ios\", armv7s_apple_ios),\n     (\"x86_64-apple-ios-macabi\", x86_64_apple_ios_macabi),\n+    (\"aarch64-apple-tvos\", aarch64_apple_tvos),\n+    (\"x86_64-apple-tvos\", x86_64_apple_tvos),\n \n     (\"armebv7r-none-eabi\", armebv7r_none_eabi),\n     (\"armebv7r-none-eabihf\", armebv7r_none_eabihf),"}, {"sha": "cfcf856836b14e78c070c20e3ef2de3ec4ad80ca", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64)?;\n+    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "c42d09117259d4b76df90aab79e0e42255248d3e", "filename": "src/librustc_target/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64_macabi)?;\n+    let base = opts(Arch::X86_64_macabi, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "a56062c0b2b5df1a0deccadbad6f9c59f56c36d7", "filename": "src/librustc_target/spec/x86_64_apple_tvos.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs?ref=e5e8ba4edc435c9f87314b23a6c5d9c175bdf19c", "patch": "@@ -0,0 +1,19 @@\n+use super::apple_sdk_base::{opts, AppleOS, Arch};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n+    Ok(Target {\n+        llvm_target: \"x86_64-apple-tvos\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"tvos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+    })\n+}"}]}