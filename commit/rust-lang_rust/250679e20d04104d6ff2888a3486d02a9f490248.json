{"sha": "250679e20d04104d6ff2888a3486d02a9f490248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MDY3OWUyMGQwNDEwNGQ2ZmYyODg4YTM0ODZkMDJhOWY0OTAyNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-10T16:29:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-10T16:29:49Z"}, "message": "Auto merge of #28332 - apasel422:tests, r=alexcrichton\n\nCloses #22638.\r\nCloses #22872.\r\nCloses #23024.\r\nCloses #23046.", "tree": {"sha": "ecb111f2616d850e900f1b2103eedbf646028bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb111f2616d850e900f1b2103eedbf646028bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250679e20d04104d6ff2888a3486d02a9f490248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250679e20d04104d6ff2888a3486d02a9f490248", "html_url": "https://github.com/rust-lang/rust/commit/250679e20d04104d6ff2888a3486d02a9f490248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250679e20d04104d6ff2888a3486d02a9f490248/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9577e426824d410e21147bec73b1c7d0a64f890d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9577e426824d410e21147bec73b1c7d0a64f890d", "html_url": "https://github.com/rust-lang/rust/commit/9577e426824d410e21147bec73b1c7d0a64f890d"}, {"sha": "a33532b1b720eb87d358911e1f79cf635297dac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a33532b1b720eb87d358911e1f79cf635297dac6", "html_url": "https://github.com/rust-lang/rust/commit/a33532b1b720eb87d358911e1f79cf635297dac6"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "3f4f2ced28320a13cf97df30c4f3117670eabcc9", "filename": "src/test/compile-fail/issue-22638.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs?ref=250679e20d04104d6ff2888a3486d02a9f490248", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+#[derive(Clone)]\n+struct A (B);\n+\n+impl A {\n+    pub fn matches<F: Fn()>(&self, f: &F) {\n+        //~^ ERROR reached the recursion limit during monomorphization\n+        let &A(ref term) = self;\n+        term.matches(f);\n+    }\n+}\n+\n+#[derive(Clone)]\n+enum B {\n+    Variant1,\n+    Variant2(C),\n+}\n+\n+impl B {\n+    pub fn matches<F: Fn()>(&self, f: &F) {\n+        match self {\n+            &B::Variant2(ref factor) => {\n+                factor.matches(&|| ())\n+            }\n+            _ => unreachable!(\"\")\n+        }\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct C (D);\n+\n+impl C {\n+    pub fn matches<F: Fn()>(&self, f: &F) {\n+        let &C(ref base) = self;\n+        base.matches(&|| {\n+            C(base.clone()).matches(f)\n+        })\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct D (Box<A>);\n+\n+impl D {\n+    pub fn matches<F: Fn()>(&self, f: &F) {\n+        let &D(ref a) = self;\n+        a.matches(f)\n+    }\n+}\n+\n+pub fn matches() {\n+    A(B::Variant1).matches(&(|| ()))\n+}\n+\n+fn main() {}"}, {"sha": "86982284ac2c07da3a88c480890ed5bb1197f671", "filename": "src/test/compile-fail/issue-22872.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-22872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-22872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22872.rs?ref=250679e20d04104d6ff2888a3486d02a9f490248", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Wrap<'b> {\n+    fn foo(&'b mut self);\n+}\n+\n+struct Wrapper<P>(P);\n+\n+impl<'b, P> Wrap<'b> for Wrapper<P>\n+where P: Process<'b>,\n+      <P as Process<'b>>::Item: Iterator {\n+    fn foo(&mut self) {}\n+}\n+\n+\n+pub trait Process<'a> {\n+    type Item;\n+    fn bar(&'a self);\n+}\n+\n+fn push_process<P>(process: P) where P: Process<'static> {\n+    let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+    //~^ ERROR the trait `for<'b> Process<'b>` is not implemented for the type `P` [E0277]\n+    //~| ERROR the trait `for<'b> core::iter::Iterator` is not implemented for the type\n+    //~| ERROR cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting\n+}\n+\n+fn main() {}"}, {"sha": "92610c1c6d33cb5e254956578f31e9180db96fcd", "filename": "src/test/compile-fail/issue-23024.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs?ref=250679e20d04104d6ff2888a3486d02a9f490248", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+use std::any::Any;\n+\n+fn main()\n+{\n+    fn h(x:i32) -> i32 {3*x}\n+    let mut vfnfer:Vec<Box<Any>> = vec![];\n+    vfnfer.push(box h);\n+    println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n+    //~^ ERROR the precise format of `Fn`-family traits'\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~| ERROR the value of the associated type `Output` (from the trait `core::ops::FnOnce`)\n+}"}, {"sha": "8c83c4cefd1913701647cbdfd2108088ac2cfcbe", "filename": "src/test/compile-fail/issue-23046.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250679e20d04104d6ff2888a3486d02a9f490248/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=250679e20d04104d6ff2888a3486d02a9f490248", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum Expr<'var, VAR> {\n+    Let(Box<Expr<'var, VAR>>,\n+        Box<for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n+}\n+\n+pub fn add<'var, VAR>\n+                      (a: Expr<'var, VAR>, b: Expr<'var, VAR>) -> Expr<'var, VAR> {\n+    loop {}\n+}\n+\n+pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n+                       (a: Expr<'var, VAR>, b: F) -> Expr<'var, VAR> {\n+    loop {}\n+}\n+\n+fn main() {\n+    let ex =  (|x| {\n+        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `_`\n+            let_(add(x, x), |x|x)})});\n+}"}]}