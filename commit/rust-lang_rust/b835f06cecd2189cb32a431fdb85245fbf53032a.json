{"sha": "b835f06cecd2189cb32a431fdb85245fbf53032a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzVmMDZjZWNkMjE4OWNiMzJhNDMxZmRiODUyNDVmYmY1MzAzMmE=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-25T04:44:36Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-08-25T04:44:36Z"}, "message": "Merge remote-tracking branch 'upstream/master' into 503-hover-doc-links", "tree": {"sha": "8bb4ba65f4922e9cca571a7d4a7fa17d047ae779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb4ba65f4922e9cca571a7d4a7fa17d047ae779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b835f06cecd2189cb32a431fdb85245fbf53032a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b835f06cecd2189cb32a431fdb85245fbf53032a", "html_url": "https://github.com/rust-lang/rust/commit/b835f06cecd2189cb32a431fdb85245fbf53032a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b835f06cecd2189cb32a431fdb85245fbf53032a/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452afaebe188251cd4403e56999bf8b58de4fba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/452afaebe188251cd4403e56999bf8b58de4fba9", "html_url": "https://github.com/rust-lang/rust/commit/452afaebe188251cd4403e56999bf8b58de4fba9"}, {"sha": "ef9cea945d5767e7c60d5931a7649a73caea23ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9cea945d5767e7c60d5931a7649a73caea23ad", "html_url": "https://github.com/rust-lang/rust/commit/ef9cea945d5767e7c60d5931a7649a73caea23ad"}], "stats": {"total": 1794, "additions": 959, "deletions": 835}, "files": [{"sha": "be2c7a8ca0000fef9a0ec3420258b88db0402f53", "filename": ".github/workflows/publish.yml", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/.github%2Fworkflows%2Fpublish.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/.github%2Fworkflows%2Fpublish.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fpublish.yml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -0,0 +1,44 @@\n+name: publish\n+on:\n+  workflow_dispatch: # We can add version input when 1.0 is released and scheduled releases are removed\n+\n+  schedule:\n+    - cron: \"0 0 * * *\" # midnight UTC\n+\n+  push:\n+    branches:\n+      - release\n+\n+jobs:\n+  publish:\n+    name: publish\n+    runs-on: ubuntu-16.04\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0\n+\n+      - name: Install Rust toolchain\n+        uses: actions-rs/toolchain@v1\n+        with:\n+          toolchain: stable\n+          profile: minimal\n+          override: true\n+\n+      - name: Install cargo-workspaces\n+        uses: actions-rs/install@v0.1\n+        with:\n+          crate: cargo-workspaces\n+\n+      - name: Release\n+        env:\n+          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n+          PATCH: ${{ github.run_number }}\n+        shell: bash\n+        run: |\n+          git config --global user.email \"runner@gha.local\"\n+          git config --global user.name \"Github Action\"\n+          rm Cargo.lock\n+          cargo workspaces rename ra_ap_%n\n+          cargo workspaces publish --yes --force '*' --exact --no-git-commit --allow-dirty --skip-published custom 0.0.$PATCH"}, {"sha": "015f84ba8cce5bb7338a87a31c85e7f23973694c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1718,9 +1718,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.1.2\"\n+version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bab6142ac77be714b1ea78faca6efaed5478c50724786b0fe80d8528d10692b3\"\n+checksum = \"ca4d39065b45f658d33013f7cc93ee050708cd543f6e07dd15b4293fcf217e12\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "863eedf76913e6dd8ae74970bc4f6eb762edb231", "filename": "crates/arena/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Farena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Farena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Farena%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"arena\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "2641256518d6a20de4cae658b98b106216108d54", "filename": "crates/assists/Cargo.toml", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"assists\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -13,11 +14,11 @@ rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n either = \"1.5.3\"\n \n-stdx = { path = \"../stdx\" }\n-syntax = { path = \"../syntax\" }\n-text_edit = { path = \"../text_edit\" }\n-profile = { path = \"../profile\" }\n-base_db = { path = \"../base_db\" }\n-ide_db = { path = \"../ide_db\" }\n-hir = { path = \"../hir\" }\n-test_utils = { path = \"../test_utils\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "bf520069e88ea61214e1ced1ce67d430d3978337", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -73,10 +73,6 @@ impl<'a> AssistContext<'a> {\n         self.sema.db\n     }\n \n-    pub(crate) fn source_file(&self) -> &SourceFile {\n-        &self.source_file\n-    }\n-\n     // NB, this ignores active selection.\n     pub(crate) fn offset(&self) -> TextSize {\n         self.frange.range.start()"}, {"sha": "b39d040f6fdae62d939aa86a7ef6faa1c3a09647", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 617, "deletions": 115, "changes": 732, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,10 +1,10 @@\n use either::Either;\n-use hir::{AssocItem, MacroDef, ModuleDef, Name, PathResolution, ScopeDef, SemanticsScope};\n+use hir::{AssocItem, MacroDef, Module, ModuleDef, Name, PathResolution, ScopeDef};\n use ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n-    RootDatabase,\n+    search::SearchScope,\n };\n-use syntax::{algo, ast, match_ast, AstNode, SyntaxNode, SyntaxToken, T};\n+use syntax::{algo, ast, AstNode, Direction, SyntaxNode, SyntaxToken, T};\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n@@ -38,140 +38,259 @@ use crate::{\n // ```\n pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let star = ctx.find_token_at_offset(T![*])?;\n-    let mod_path = find_mod_path(&star)?;\n-    let module = match ctx.sema.resolve_path(&mod_path)? {\n+    let (parent, mod_path) = find_parent_and_path(&star)?;\n+    let target_module = match ctx.sema.resolve_path(&mod_path)? {\n         PathResolution::Def(ModuleDef::Module(it)) => it,\n         _ => return None,\n     };\n \n-    let source_file = ctx.source_file();\n-    let scope = ctx.sema.scope_at_offset(source_file.syntax(), ctx.offset());\n+    let current_scope = ctx.sema.scope(&star.parent());\n+    let current_module = current_scope.module()?;\n \n-    let defs_in_mod = find_defs_in_mod(ctx, scope, module)?;\n-    let name_refs_in_source_file =\n-        source_file.syntax().descendants().filter_map(ast::NameRef::cast).collect();\n-    let used_names = find_used_names(ctx, defs_in_mod, name_refs_in_source_file);\n+    let refs_in_target = find_refs_in_mod(ctx, target_module, Some(current_module))?;\n+    let imported_defs = find_imported_defs(ctx, star)?;\n+    let names_to_import = find_names_to_import(ctx, refs_in_target, imported_defs);\n \n-    let parent = star.parent().parent()?;\n+    let target = parent.clone().either(|n| n.syntax().clone(), |n| n.syntax().clone());\n     acc.add(\n         AssistId(\"expand_glob_import\", AssistKind::RefactorRewrite),\n         \"Expand glob import\",\n-        parent.text_range(),\n+        target.text_range(),\n         |builder| {\n-            replace_ast(builder, &parent, mod_path, used_names);\n+            replace_ast(builder, parent, mod_path, names_to_import);\n         },\n     )\n }\n \n-fn find_mod_path(star: &SyntaxToken) -> Option<ast::Path> {\n-    star.ancestors().find_map(|n| ast::UseTree::cast(n).and_then(|u| u.path()))\n+fn find_parent_and_path(\n+    star: &SyntaxToken,\n+) -> Option<(Either<ast::UseTree, ast::UseTreeList>, ast::Path)> {\n+    return star.ancestors().find_map(|n| {\n+        find_use_tree_list(n.clone())\n+            .and_then(|(u, p)| Some((Either::Right(u), p)))\n+            .or_else(|| find_use_tree(n).and_then(|(u, p)| Some((Either::Left(u), p))))\n+    });\n+\n+    fn find_use_tree_list(n: SyntaxNode) -> Option<(ast::UseTreeList, ast::Path)> {\n+        let use_tree_list = ast::UseTreeList::cast(n)?;\n+        let path = use_tree_list.parent_use_tree().path()?;\n+        Some((use_tree_list, path))\n+    }\n+\n+    fn find_use_tree(n: SyntaxNode) -> Option<(ast::UseTree, ast::Path)> {\n+        let use_tree = ast::UseTree::cast(n)?;\n+        let path = use_tree.path()?;\n+        Some((use_tree, path))\n+    }\n }\n \n-#[derive(PartialEq)]\n+#[derive(Debug, PartialEq, Clone)]\n enum Def {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n }\n \n impl Def {\n-    fn name(&self, db: &RootDatabase) -> Option<Name> {\n-        match self {\n-            Def::ModuleDef(def) => def.name(db),\n-            Def::MacroDef(def) => def.name(db),\n+    fn is_referenced_in(&self, ctx: &AssistContext) -> bool {\n+        let def = match self {\n+            Def::ModuleDef(def) => Definition::ModuleDef(*def),\n+            Def::MacroDef(def) => Definition::Macro(*def),\n+        };\n+\n+        let search_scope = SearchScope::single_file(ctx.frange.file_id);\n+        def.usages(&ctx.sema).in_scope(search_scope).at_least_one()\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+struct Ref {\n+    // could be alias\n+    visible_name: Name,\n+    def: Def,\n+}\n+\n+impl Ref {\n+    fn from_scope_def(name: Name, scope_def: ScopeDef) -> Option<Self> {\n+        match scope_def {\n+            ScopeDef::ModuleDef(def) => Some(Ref { visible_name: name, def: Def::ModuleDef(def) }),\n+            ScopeDef::MacroDef(def) => Some(Ref { visible_name: name, def: Def::MacroDef(def) }),\n+            _ => None,\n         }\n     }\n }\n \n-fn find_defs_in_mod(\n+#[derive(Debug, Clone)]\n+struct Refs(Vec<Ref>);\n+\n+impl Refs {\n+    fn used_refs(&self, ctx: &AssistContext) -> Refs {\n+        Refs(\n+            self.0\n+                .clone()\n+                .into_iter()\n+                .filter(|r| {\n+                    if let Def::ModuleDef(ModuleDef::Trait(tr)) = r.def {\n+                        if tr\n+                            .items(ctx.db())\n+                            .into_iter()\n+                            .find(|ai| {\n+                                if let AssocItem::Function(f) = *ai {\n+                                    Def::ModuleDef(ModuleDef::Function(f)).is_referenced_in(ctx)\n+                                } else {\n+                                    false\n+                                }\n+                            })\n+                            .is_some()\n+                        {\n+                            return true;\n+                        }\n+                    }\n+\n+                    r.def.is_referenced_in(ctx)\n+                })\n+                .collect(),\n+        )\n+    }\n+\n+    fn filter_out_by_defs(&self, defs: Vec<Def>) -> Refs {\n+        Refs(self.0.clone().into_iter().filter(|r| !defs.contains(&r.def)).collect())\n+    }\n+}\n+\n+fn find_refs_in_mod(\n     ctx: &AssistContext,\n-    from: SemanticsScope<'_>,\n-    module: hir::Module,\n-) -> Option<Vec<Def>> {\n-    let module_scope = module.scope(ctx.db(), from.module());\n-\n-    let mut defs = vec![];\n-    for (_, def) in module_scope {\n-        match def {\n-            ScopeDef::ModuleDef(def) => defs.push(Def::ModuleDef(def)),\n-            ScopeDef::MacroDef(def) => defs.push(Def::MacroDef(def)),\n-            _ => continue,\n+    module: Module,\n+    visible_from: Option<Module>,\n+) -> Option<Refs> {\n+    if let Some(from) = visible_from {\n+        if !is_mod_visible_from(ctx, module, from) {\n+            return None;\n         }\n     }\n \n-    Some(defs)\n+    let module_scope = module.scope(ctx.db(), visible_from);\n+    let refs = module_scope.into_iter().filter_map(|(n, d)| Ref::from_scope_def(n, d)).collect();\n+    Some(Refs(refs))\n }\n \n-fn find_used_names(\n-    ctx: &AssistContext,\n-    defs_in_mod: Vec<Def>,\n-    name_refs_in_source_file: Vec<ast::NameRef>,\n-) -> Vec<Name> {\n-    let defs_in_source_file = name_refs_in_source_file\n-        .iter()\n-        .filter_map(|r| classify_name_ref(&ctx.sema, r))\n-        .filter_map(|rc| match rc {\n-            NameRefClass::Definition(Definition::ModuleDef(def)) => Some(Def::ModuleDef(def)),\n-            NameRefClass::Definition(Definition::Macro(def)) => Some(Def::MacroDef(def)),\n-            _ => None,\n-        })\n-        .collect::<Vec<Def>>();\n+fn is_mod_visible_from(ctx: &AssistContext, module: Module, from: Module) -> bool {\n+    match module.parent(ctx.db()) {\n+        Some(parent) => {\n+            parent.visibility_of(ctx.db(), &ModuleDef::Module(module)).map_or(true, |vis| {\n+                vis.is_visible_from(ctx.db(), from.into()) && is_mod_visible_from(ctx, parent, from)\n+            })\n+        }\n+        None => true,\n+    }\n+}\n \n-    defs_in_mod\n-        .iter()\n-        .filter(|def| {\n-            if let Def::ModuleDef(ModuleDef::Trait(tr)) = def {\n-                for item in tr.items(ctx.db()) {\n-                    if let AssocItem::Function(f) = item {\n-                        if defs_in_source_file.contains(&Def::ModuleDef(ModuleDef::Function(f))) {\n-                            return true;\n-                        }\n-                    }\n-                }\n-            }\n+// looks for name refs in parent use block's siblings\n+//\n+// mod bar {\n+//     mod qux {\n+//         struct Qux;\n+//     }\n+//\n+//     pub use qux::Qux;\n+// }\n+//\n+// \u2193 ---------------\n+// use foo::*<|>;\n+// use baz::Baz;\n+// \u2191 ---------------\n+fn find_imported_defs(ctx: &AssistContext, star: SyntaxToken) -> Option<Vec<Def>> {\n+    let parent_use_item_syntax =\n+        star.ancestors().find_map(|n| if ast::Use::can_cast(n.kind()) { Some(n) } else { None })?;\n+\n+    Some(\n+        [Direction::Prev, Direction::Next]\n+            .iter()\n+            .map(|dir| {\n+                parent_use_item_syntax\n+                    .siblings(dir.to_owned())\n+                    .filter(|n| ast::Use::can_cast(n.kind()))\n+            })\n+            .flatten()\n+            .filter_map(|n| Some(n.descendants().filter_map(ast::NameRef::cast)))\n+            .flatten()\n+            .filter_map(|r| match classify_name_ref(&ctx.sema, &r)? {\n+                NameRefClass::Definition(Definition::ModuleDef(def)) => Some(Def::ModuleDef(def)),\n+                NameRefClass::Definition(Definition::Macro(def)) => Some(Def::MacroDef(def)),\n+                _ => None,\n+            })\n+            .collect(),\n+    )\n+}\n \n-            defs_in_source_file.contains(def)\n-        })\n-        .filter_map(|d| d.name(ctx.db()))\n-        .collect()\n+fn find_names_to_import(\n+    ctx: &AssistContext,\n+    refs_in_target: Refs,\n+    imported_defs: Vec<Def>,\n+) -> Vec<Name> {\n+    let used_refs = refs_in_target.used_refs(ctx).filter_out_by_defs(imported_defs);\n+    used_refs.0.iter().map(|r| r.visible_name.clone()).collect()\n }\n \n fn replace_ast(\n     builder: &mut AssistBuilder,\n-    node: &SyntaxNode,\n+    parent: Either<ast::UseTree, ast::UseTreeList>,\n     path: ast::Path,\n-    used_names: Vec<Name>,\n+    names_to_import: Vec<Name>,\n ) {\n-    let replacement: Either<ast::UseTree, ast::UseTreeList> = match used_names.as_slice() {\n-        [name] => Either::Left(ast::make::use_tree(\n-            ast::make::path_from_text(&format!(\"{}::{}\", path, name)),\n-            None,\n-            None,\n-            false,\n-        )),\n-        names => Either::Right(ast::make::use_tree_list(names.iter().map(|n| {\n-            ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n-        }))),\n+    let existing_use_trees = match parent.clone() {\n+        Either::Left(_) => vec![],\n+        Either::Right(u) => u\n+            .use_trees()\n+            .filter(|n|\n+            // filter out star\n+            n.star_token().is_none())\n+            .collect(),\n     };\n \n-    let mut replace_node = |replacement: Either<ast::UseTree, ast::UseTreeList>| {\n-        algo::diff(node, &replacement.either(|u| u.syntax().clone(), |ut| ut.syntax().clone()))\n+    let new_use_trees: Vec<ast::UseTree> = names_to_import\n+        .iter()\n+        .map(|n| ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false))\n+        .collect();\n+\n+    let use_trees = [&existing_use_trees[..], &new_use_trees[..]].concat();\n+\n+    match use_trees.as_slice() {\n+        [name] => {\n+            if let Some(end_path) = name.path() {\n+                let replacement = ast::make::use_tree(\n+                    ast::make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n+                    None,\n+                    None,\n+                    false,\n+                );\n+\n+                algo::diff(\n+                    &parent.either(|n| n.syntax().clone(), |n| n.syntax().clone()),\n+                    replacement.syntax(),\n+                )\n+                .into_text_edit(builder.text_edit_builder());\n+            }\n+        }\n+        names => {\n+            let replacement = match parent {\n+                Either::Left(_) => ast::make::use_tree(\n+                    path,\n+                    Some(ast::make::use_tree_list(names.to_owned())),\n+                    None,\n+                    false,\n+                )\n+                .syntax()\n+                .clone(),\n+                Either::Right(_) => ast::make::use_tree_list(names.to_owned()).syntax().clone(),\n+            };\n+\n+            algo::diff(\n+                &parent.either(|n| n.syntax().clone(), |n| n.syntax().clone()),\n+                &replacement,\n+            )\n             .into_text_edit(builder.text_edit_builder());\n-    };\n-\n-    match_ast! {\n-        match node {\n-            ast::UseTree(use_tree) => {\n-                replace_node(replacement);\n-            },\n-            ast::UseTreeList(use_tree_list) => {\n-                replace_node(replacement);\n-            },\n-            ast::Use(use_item) => {\n-                builder.replace_ast(use_item, ast::make::use_(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n-            },\n-            _ => {},\n         }\n-    }\n+    };\n }\n \n #[cfg(test)]\n@@ -245,7 +364,46 @@ mod foo {\n     pub fn f() {}\n }\n \n-use foo::{Baz, Bar, f};\n+use foo::{f, Baz, Bar};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn expanding_glob_import_with_existing_uses_in_same_module() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::Bar;\n+use foo::{*<|>, f};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+    pub struct Baz;\n+    pub struct Qux;\n+\n+    pub fn f() {}\n+}\n+\n+use foo::Bar;\n+use foo::{f, Baz};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n@@ -260,15 +418,15 @@ fn qux(bar: Bar, baz: Baz) {\n             expand_glob_import,\n             r\"\n mod foo {\n-    mod bar {\n+    pub mod bar {\n         pub struct Bar;\n         pub struct Baz;\n         pub struct Qux;\n \n         pub fn f() {}\n     }\n \n-    mod baz {\n+    pub mod baz {\n         pub fn g() {}\n     }\n }\n@@ -282,63 +440,367 @@ fn qux(bar: Bar, baz: Baz) {\n \",\n             r\"\n mod foo {\n-    mod bar {\n+    pub mod bar {\n         pub struct Bar;\n         pub struct Baz;\n         pub struct Qux;\n \n         pub fn f() {}\n     }\n \n-    mod baz {\n+    pub mod baz {\n         pub fn g() {}\n     }\n }\n \n-use foo::{bar::{Baz, Bar, f}, baz::*};\n+use foo::{bar::{f, Baz, Bar}, baz::*};\n \n fn qux(bar: Bar, baz: Baz) {\n     f();\n     g();\n }\n \",\n-        )\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{Bar, Baz, f}, baz::*<|>};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{Bar, Baz, f}, baz::g};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::*<|>}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    q::j();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{q, h}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    q::j();\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{h, q::*<|>}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{h, q::j}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{q::j, *<|>}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{q::j, h}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+        );\n     }\n \n     #[test]\n     fn expanding_glob_import_with_macro_defs() {\n+        // FIXME: this is currently fails because `Definition::find_usages` ignores macros\n+        //       https://github.com/rust-analyzer/rust-analyzer/issues/3484\n+        //\n+        //         check_assist(\n+        //             expand_glob_import,\n+        //             r\"\n+        // //- /lib.rs crate:foo\n+        // #[macro_export]\n+        // macro_rules! bar {\n+        //     () => ()\n+        // }\n+\n+        // pub fn baz() {}\n+\n+        // //- /main.rs crate:main deps:foo\n+        // use foo::*<|>;\n+\n+        // fn main() {\n+        //     bar!();\n+        //     baz();\n+        // }\n+        // \",\n+        //             r\"\n+        // use foo::{bar, baz};\n+\n+        // fn main() {\n+        //     bar!();\n+        //     baz();\n+        // }\n+        // \",\n+        //         )\n+    }\n+\n+    #[test]\n+    fn expanding_glob_import_with_trait_method_uses() {\n         check_assist(\n             expand_glob_import,\n             r\"\n //- /lib.rs crate:foo\n-#[macro_export]\n-macro_rules! bar {\n-    () => ()\n+pub trait Tr {\n+    fn method(&self) {}\n }\n-\n-pub fn baz() {}\n+impl Tr for () {}\n \n //- /main.rs crate:main deps:foo\n use foo::*<|>;\n \n fn main() {\n-    bar!();\n-    baz();\n+    ().method();\n }\n \",\n             r\"\n-use foo::{bar, baz};\n+use foo::Tr;\n \n fn main() {\n-    bar!();\n-    baz();\n+    ().method();\n }\n \",\n-        )\n-    }\n+        );\n \n-    #[test]\n-    fn expanding_glob_import_with_trait_method_uses() {\n         check_assist(\n             expand_glob_import,\n             r\"\n@@ -348,6 +810,11 @@ pub trait Tr {\n }\n impl Tr for () {}\n \n+pub trait Tr2 {\n+    fn method2(&self) {}\n+}\n+impl Tr2 for () {}\n+\n //- /main.rs crate:main deps:foo\n use foo::*<|>;\n \n@@ -362,7 +829,42 @@ fn main() {\n     ().method();\n }\n \",\n-        )\n+        );\n+    }\n+\n+    #[test]\n+    fn expanding_is_not_applicable_if_target_module_is_not_accessible_from_current_scope() {\n+        check_assist_not_applicable(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub struct Bar;\n+    }\n+}\n+\n+use foo::bar::*<|>;\n+\n+fn baz(bar: Bar) {}\n+\",\n+        );\n+\n+        check_assist_not_applicable(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub mod baz {\n+            pub struct Baz;\n+        }\n+    }\n+}\n+\n+use foo::bar::baz::*<|>;\n+\n+fn qux(baz: Baz) {}\n+\",\n+        );\n     }\n \n     #[test]"}, {"sha": "294256297b6780ce670d522ecc1e6cfb1847fd2b", "filename": "crates/assists/src/handlers/invert_if.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -106,4 +106,22 @@ mod tests {\n             \"fn f() { i<|>f let Some(_) = Some(1) { 1 } else { 0 } }\",\n         )\n     }\n+\n+    #[test]\n+    fn invert_if_option_case() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { if<|> doc_style.is_some() { Class::DocComment } else { Class::Comment } }\",\n+            \"fn f() { if doc_style.is_none() { Class::Comment } else { Class::DocComment } }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn invert_if_result_case() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { i<|>f doc_style.is_err() { Class::Err } else { Class::Ok } }\",\n+            \"fn f() { if doc_style.is_ok() { Class::Ok } else { Class::Err } }\",\n+        )\n+    }\n }"}, {"sha": "e15c982e75e86b3d5a366666b19d8b115e3369d5", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n     ast::{self, make, NameOwner},\n     AstNode, Direction,\n     SyntaxKind::*,\n-    SyntaxNode, TextSize, T,\n+    SyntaxNode, SyntaxText, TextSize, T,\n };\n \n use crate::assist_config::SnippetCap;\n@@ -179,6 +179,25 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n             _ => None,\n         },\n+        ast::Expr::MethodCallExpr(mce) => {\n+            const IS_SOME_TEXT: &str = \"is_some\";\n+            const IS_NONE_TEXT: &str = \"is_none\";\n+            const IS_OK_TEXT: &str = \"is_ok\";\n+            const IS_ERR_TEXT: &str = \"is_err\";\n+\n+            let name = mce.name_ref()?;\n+            let name_text = name.text();\n+\n+            let caller = || -> Option<SyntaxText> { Some(mce.receiver()?.syntax().text()) };\n+\n+            match name_text {\n+                x if x == IS_SOME_TEXT => make::expr_method_call(IS_NONE_TEXT, caller),\n+                x if x == IS_NONE_TEXT => make::expr_method_call(IS_SOME_TEXT, caller),\n+                x if x == IS_OK_TEXT => make::expr_method_call(IS_ERR_TEXT, caller),\n+                x if x == IS_ERR_TEXT => make::expr_method_call(IS_OK_TEXT, caller),\n+                _ => None,\n+            }\n+        }\n         ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n         // FIXME:\n         // ast::Expr::Literal(true | false )"}, {"sha": "f7bfcb0d78b09b6c9e73afb37a576d6742c1e8a6", "filename": "crates/base_db/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fbase_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fbase_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"base_db\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -12,10 +13,10 @@ doctest = false\n salsa = \"0.15.2\"\n rustc-hash = \"1.1.0\"\n \n-syntax = { path = \"../syntax\" }\n-cfg = { path = \"../cfg\" }\n-profile = { path = \"../profile\" }\n-tt = { path = \"../tt\" }\n-test_utils = { path = \"../test_utils\" }\n-vfs = { path = \"../vfs\" }\n-stdx = { path = \"../stdx\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+cfg = { path = \"../cfg\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+vfs = { path = \"../vfs\", version = \"0.0.0\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "a6785ee8e1007938e221220d72b6e302edd19475", "filename": "crates/cfg/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fcfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fcfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"cfg\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -11,7 +12,7 @@ doctest = false\n [dependencies]\n rustc-hash = \"1.1.0\"\n \n-tt = { path = \"../tt\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n \n [dev-dependencies]\n mbe = { path = \"../mbe\" }"}, {"sha": "c230fc1e26eca7274e0f77cb2f9a424547b3def6", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"flycheck\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -15,4 +16,4 @@ cargo_metadata = \"0.11.1\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n \n-toolchain = { path = \"../toolchain\" }\n+toolchain = { path = \"../toolchain\", version = \"0.0.0\" }"}, {"sha": "72f941c463fd8f9df450fbeb7278d778542d4391", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"hir\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -16,11 +17,11 @@ arrayvec = \"0.5.1\"\n itertools = \"0.9.0\"\n url = \"2.1.1\"\n \n-stdx = { path = \"../stdx\" }\n-syntax = { path = \"../syntax\" }\n-base_db = { path = \"../base_db\" }\n-profile = { path = \"../profile\" }\n-hir_expand = { path = \"../hir_expand\" }\n-hir_def = { path = \"../hir_def\" }\n-hir_ty = { path = \"../hir_ty\" }\n-tt = { path = \"../tt\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n+hir_def = { path = \"../hir_def\", version = \"0.0.0\" }\n+hir_ty = { path = \"../hir_ty\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }"}, {"sha": "011e4612ca1c48ecb36237f10254852491c34977", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"hir_def\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -20,16 +21,16 @@ itertools = \"0.9.0\"\n indexmap = \"1.4.0\"\n smallvec = \"1.4.0\"\n \n-stdx = { path = \"../stdx\" }\n-arena = { path = \"../arena\" }\n-base_db = { path = \"../base_db\" }\n-syntax = { path = \"../syntax\" }\n-profile = { path = \"../profile\" }\n-hir_expand = { path = \"../hir_expand\" }\n-test_utils = { path = \"../test_utils\" }\n-mbe = { path = \"../mbe\" }\n-cfg = { path = \"../cfg\" }\n-tt = { path = \"../tt\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+arena = { path = \"../arena\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+mbe = { path = \"../mbe\", version = \"0.0.0\" }\n+cfg = { path = \"../cfg\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"0.1\""}, {"sha": "6a503d7853ee5f81d3431f19bdbc8481bbfff04f", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -557,6 +557,10 @@ impl Ctx {\n                             let statik = self.lower_static(&ast)?;\n                             statik.into()\n                         }\n+                        ast::ExternItem::TypeAlias(ty) => {\n+                            let id = self.lower_type_alias(&ty)?;\n+                            id.into()\n+                        }\n                         ast::ExternItem::MacroCall(_) => return None,\n                     };\n                     self.add_attrs(id.into(), attrs);"}, {"sha": "5ca30dac90c4fad2843aa5cd67b8bf153f0e4f50", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -46,6 +46,7 @@ union U { to_be: bool, not_to_be: u8 }\n enum E { V }\n \n extern {\n+    type Ext;\n     static EXT: u8;\n     fn ext();\n }\n@@ -65,6 +66,7 @@ extern {\n             Baz: t v\n             E: t\n             EXT: v\n+            Ext: t\n             U: t\n             ext: v\n         \"#]],"}, {"sha": "9fad2ab946554618b478b50553ffb7348e2957b2", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"hir_expand\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -13,11 +14,11 @@ log = \"0.4.8\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n \n-arena = { path = \"../arena\" }\n-base_db = { path = \"../base_db\" }\n-syntax = { path = \"../syntax\" }\n-parser = { path = \"../parser\" }\n-profile = { path = \"../profile\" }\n-tt = { path = \"../tt\" }\n-mbe = { path = \"../mbe\" }\n-test_utils = { path = \"../test_utils\"}\n+arena = { path = \"../arena\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+parser = { path = \"../parser\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n+mbe = { path = \"../mbe\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }"}, {"sha": "33e155a70b8369012d9b52d4e3103089a9c622e5", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"hir_ty\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -20,14 +21,14 @@ chalk-solve = { version = \"0.23.0\" }\n chalk-ir = { version = \"0.23.0\" }\n chalk-recursive = { version = \"0.23.0\" }\n \n-stdx = { path = \"../stdx\" }\n-hir_def = { path = \"../hir_def\" }\n-hir_expand = { path = \"../hir_expand\" }\n-arena = { path = \"../arena\" }\n-base_db = { path = \"../base_db\" }\n-profile = { path = \"../profile\" }\n-syntax = { path = \"../syntax\" }\n-test_utils = { path = \"../test_utils\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+hir_def = { path = \"../hir_def\", version = \"0.0.0\" }\n+hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n+arena = { path = \"../arena\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"0.1\""}, {"sha": "e61c276df5e6a9b36c71eea9f1d9e99d4d8ca677", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"ide\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -18,20 +19,20 @@ oorandom = \"11.1.2\"\n pulldown-cmark-to-cmark = \"5.0.0\"\n pulldown-cmark = {version = \"0.7.2\", default-features = false}\n \n-stdx = { path = \"../stdx\" }\n-syntax = { path = \"../syntax\" }\n-text_edit = { path = \"../text_edit\" }\n-base_db = { path = \"../base_db\" }\n-ide_db = { path = \"../ide_db\" }\n-cfg = { path = \"../cfg\" }\n-profile = { path = \"../profile\" }\n-test_utils = { path = \"../test_utils\" }\n-assists = { path = \"../assists\" }\n-ssr = { path = \"../ssr\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+cfg = { path = \"../cfg\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+assists = { path = \"../assists\", version = \"0.0.0\" }\n+ssr = { path = \"../ssr\", version = \"0.0.0\" }\n \n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n-hir = { path = \"../hir\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"0.1\""}, {"sha": "33bed699172bc9692ef94d06c0ddef983b73c998", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -92,7 +92,7 @@ pub use crate::completion::{\n /// already present, it should give all possible variants for the identifier at\n /// the caret. In other words, for\n ///\n-/// ```no-run\n+/// ```no_run\n /// fn f() {\n ///     let foo = 92;\n ///     let _ = bar<|>"}, {"sha": "dd59d9e70e48ec6dcf0a359cc3758adee0880889", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -160,7 +160,7 @@ fn runnable_fn(\n             RunnableKind::Test { test_id, attr }\n         } else if fn_def.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n-        } else if has_doc_test(&fn_def) {\n+        } else if has_runnable_doc_test(&fn_def) {\n             RunnableKind::DocTest { test_id }\n         } else {\n             return None;\n@@ -211,8 +211,13 @@ fn has_test_related_attribute(fn_def: &ast::Fn) -> bool {\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n-fn has_doc_test(fn_def: &ast::Fn) -> bool {\n-    fn_def.doc_comment_text().map_or(false, |comment| comment.contains(\"```\"))\n+fn has_runnable_doc_test(fn_def: &ast::Fn) -> bool {\n+    fn_def.doc_comment_text().map_or(false, |comments_text| {\n+        comments_text.contains(\"```\")\n+            && !comments_text.contains(\"```ignore\")\n+            && !comments_text.contains(\"```no_run\")\n+            && !comments_text.contains(\"```compile_fail\")\n+    })\n }\n \n fn runnable_mod(\n@@ -417,6 +422,21 @@ fn main() {}\n /// let x = 5;\n /// ```\n fn foo() {}\n+\n+/// ```no_run\n+/// let z = 55;\n+/// ```\n+fn should_have_no_runnable() {}\n+\n+/// ```ignore\n+/// let z = 55;\n+/// ```\n+fn should_have_no_runnable_2() {}\n+\n+/// ```compile_fail\n+/// let z = 55;\n+/// ```\n+fn should_have_no_runnable_3() {}\n \"#,\n             &[&BIN, &DOCTEST],\n             expect![[r#\""}, {"sha": "320fb15e55932d5b8db7325807dde50d2c389249", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"ide_db\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -19,12 +20,12 @@ rustc-hash = \"1.1.0\"\n once_cell = \"1.3.1\"\n either = \"1.5.3\"\n \n-stdx = { path = \"../stdx\" }\n-syntax = { path = \"../syntax\" }\n-text_edit = { path = \"../text_edit\" }\n-base_db = { path = \"../base_db\" }\n-profile = { path = \"../profile\" }\n-test_utils = { path = \"../test_utils\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n-hir = { path = \"../hir\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }"}, {"sha": "af80e2be3021b9ce6c9b9a1ba56a95dd483049bc", "filename": "crates/mbe/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fmbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fmbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"mbe\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -13,9 +14,9 @@ rustc-hash = \"1.1.0\"\n smallvec = \"1.2.0\"\n log = \"0.4.8\"\n \n-syntax = { path = \"../syntax\" }\n-parser = { path = \"../parser\" }\n-tt = { path = \"../tt\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+parser = { path = \"../parser\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "1610e0d23e953eef9c2dfa09e266521f682f2d63", "filename": "crates/parser/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fparser%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fparser%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"parser\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "da26938c1230ab6b48c8dcd9347bfcb56d3d074d", "filename": "crates/paths/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fpaths%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fpaths%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"paths\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "75f67a22ed57dc0772562f9fa38dddc88d22af38", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"proc_macro_api\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -15,4 +16,4 @@ log = \"0.4.8\"\n crossbeam-channel = \"0.4.0\"\n jod-thread = \"0.1.1\"\n \n-tt = { path = \"../tt\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }"}, {"sha": "fb84e04aece10acfff6d2835b564d0801c966801", "filename": "crates/proc_macro_srv/Cargo.toml", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"proc_macro_srv\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -13,10 +14,10 @@ goblin = \"0.2.1\"\n libloading = \"0.6.0\"\n memmap = \"0.7\"\n \n-tt = { path = \"../tt\" }\n-mbe = { path = \"../mbe\" }\n-proc_macro_api = { path = \"../proc_macro_api\" }\n-test_utils = { path = \"../test_utils\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n+mbe = { path = \"../mbe\", version = \"0.0.0\" }\n+proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n \n [dev-dependencies]\n cargo_metadata = \"0.11.1\""}, {"sha": "753443be29e69e05feb36821653f3cdd947c5ddf", "filename": "crates/proc_macro_test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproc_macro_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n+publish = false\n \n [lib]\n doctest = false"}, {"sha": "261172d6110751acf452356ac696e139c673168f", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"profile\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -14,7 +15,7 @@ cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n backtrace = { version = \"0.3.44\", optional = true }\n \n-arena = { path = \"../arena\" }\n+arena = { path = \"../arena\", version = \"0.0.0\" }\n \n [target.'cfg(target_os = \"linux\")'.dependencies]\n perf-event = \"0.4\""}, {"sha": "8bee398d92a60cbd43d8e1aa723500b888035479", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"project_model\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -16,10 +17,10 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n anyhow = \"1.0.26\"\n \n-arena = { path = \"../arena\" }\n-cfg = { path = \"../cfg\" }\n-base_db = { path = \"../base_db\" }\n-toolchain = { path = \"../toolchain\" }\n-proc_macro_api =  { path = \"../proc_macro_api\" }\n-paths =  { path = \"../paths\" }\n-stdx =  { path = \"../stdx\" }\n+arena = { path = \"../arena\", version = \"0.0.0\" }\n+cfg = { path = \"../cfg\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n+proc_macro_api =  { path = \"../proc_macro_api\", version = \"0.0.0\" }\n+paths =  { path = \"../paths\", version = \"0.0.0\" }\n+stdx =  { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "044686a99fa7c011eb42312470bc7e32b65722cb", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"rust-analyzer\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n autobins = false\n@@ -32,26 +33,26 @@ rayon = \"1.3.1\"\n mimalloc = { version = \"0.1.19\", default-features = false, optional = true }\n lsp-server = \"0.3.3\"\n \n-stdx = { path = \"../stdx\" }\n-flycheck = { path = \"../flycheck\" }\n-ide = { path = \"../ide\" }\n-profile = { path = \"../profile\" }\n-project_model = { path = \"../project_model\" }\n-syntax = { path = \"../syntax\" }\n-text_edit = { path = \"../text_edit\" }\n-vfs = { path = \"../vfs\" }\n-vfs-notify = { path = \"../vfs-notify\" }\n-cfg = { path = \"../cfg\" }\n-toolchain = { path = \"../toolchain\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n+ide = { path = \"../ide\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+project_model = { path = \"../project_model\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+vfs = { path = \"../vfs\", version = \"0.0.0\" }\n+vfs-notify = { path = \"../vfs-notify\", version = \"0.0.0\" }\n+cfg = { path = \"../cfg\", version = \"0.0.0\" }\n+toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n \n # This should only be used in CLI\n-base_db = { path = \"../base_db\" }\n-ide_db = { path = \"../ide_db\" }\n-ssr = { path = \"../ssr\" }\n-hir = { path = \"../hir\" }\n-hir_def = { path = \"../hir_def\" }\n-hir_ty = { path = \"../hir_ty\" }\n-proc_macro_srv = { path = \"../proc_macro_srv\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+ssr = { path = \"../ssr\", version = \"0.0.0\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+hir_def = { path = \"../hir_def\", version = \"0.0.0\" }\n+hir_ty = { path = \"../hir_ty\", version = \"0.0.0\" }\n+proc_macro_srv = { path = \"../proc_macro_srv\", version = \"0.0.0\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3.8\""}, {"sha": "6f0f53d705158c03c4c3703329da46812fb6d756", "filename": "crates/ssr/Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -14,12 +14,12 @@ doctest = false\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n \n-text_edit = { path = \"../text_edit\" }\n-syntax = { path = \"../syntax\" }\n-base_db = { path = \"../base_db\" }\n-ide_db = { path = \"../ide_db\" }\n-hir = { path = \"../hir\" }\n-test_utils = { path = \"../test_utils\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n \n [dev-dependencies]\n expect-test = \"0.1\""}, {"sha": "8d7a51156261be9a42f5c53d3bf79dfe24d971d5", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"stdx\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "2c1bdb2957f843ea45d98372637d7d27322019a7", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -23,9 +23,9 @@ once_cell = \"1.3.1\"\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n \n-stdx = { path = \"../stdx\" }\n-text_edit = { path = \"../text_edit\" }\n-parser = { path = \"../parser\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+parser = { path = \"../parser\", version = \"0.0.0\" }\n \n [dev-dependencies]\n walkdir = \"2.3.1\""}, {"sha": "ea199f9b892204f12c88f3c1adee82ad372a90c1", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -32,7 +32,7 @@ pub fn ancestors_at_offset(\n /// imprecise: if the cursor is strictly between two nodes of the desired type,\n /// as in\n ///\n-/// ```no-run\n+/// ```no_run\n /// struct Foo {}|struct Bar;\n /// ```\n ///"}, {"sha": "d6af5755caf354ecff5d2ac7d4e21735f132ed47", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1380,6 +1380,7 @@ pub enum ExternItem {\n     Fn(Fn),\n     MacroCall(MacroCall),\n     Static(Static),\n+    TypeAlias(TypeAlias),\n }\n impl ast::AttrsOwner for ExternItem {}\n impl ast::NameOwner for ExternItem {}\n@@ -3339,10 +3340,13 @@ impl From<MacroCall> for ExternItem {\n impl From<Static> for ExternItem {\n     fn from(node: Static) -> ExternItem { ExternItem::Static(node) }\n }\n+impl From<TypeAlias> for ExternItem {\n+    fn from(node: TypeAlias) -> ExternItem { ExternItem::TypeAlias(node) }\n+}\n impl AstNode for ExternItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN | MACRO_CALL | STATIC => true,\n+            FN | MACRO_CALL | STATIC | TYPE_ALIAS => true,\n             _ => false,\n         }\n     }\n@@ -3351,6 +3355,7 @@ impl AstNode for ExternItem {\n             FN => ExternItem::Fn(Fn { syntax }),\n             MACRO_CALL => ExternItem::MacroCall(MacroCall { syntax }),\n             STATIC => ExternItem::Static(Static { syntax }),\n+            TYPE_ALIAS => ExternItem::TypeAlias(TypeAlias { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3360,6 +3365,7 @@ impl AstNode for ExternItem {\n             ExternItem::Fn(it) => &it.syntax,\n             ExternItem::MacroCall(it) => &it.syntax,\n             ExternItem::Static(it) => &it.syntax,\n+            ExternItem::TypeAlias(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "7958721e24266f2a6e85ceed00e82779657aaa28", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -7,7 +7,7 @@\n use itertools::Itertools;\n use stdx::format_to;\n \n-use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxToken};\n+use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxText, SyntaxToken};\n \n pub fn name(text: &str) -> ast::Name {\n     ast_from_text(&format!(\"mod {};\", text))\n@@ -137,6 +137,12 @@ pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n pub fn expr_call(f: ast::Expr, arg_list: ast::ArgList) -> ast::Expr {\n     expr_from_text(&format!(\"{}{}\", f, arg_list))\n }\n+pub fn expr_method_call<F>(text: &str, caller: F) -> Option<ast::Expr>\n+where\n+    F: FnOnce() -> Option<SyntaxText>,\n+{\n+    try_expr_from_text(&format!(\"{}.{}()\", caller()?, text))\n+}\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }"}, {"sha": "93eecc6788acc1cf72c7c8ebaf80bfe0a9bf8f63", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"test_utils\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -15,4 +16,4 @@ text-size = \"1.0.0\"\n serde_json = \"1.0.48\"\n rustc-hash = \"1.1.0\"\n \n-stdx = { path = \"../stdx\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "8aadc187561e2f67708612c2970eda503ba9034e", "filename": "crates/text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftext_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftext_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"text_edit\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "dcf0bfca045d4f40daad0a159734669c723c3932", "filename": "crates/toolchain/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftoolchain%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftoolchain%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftoolchain%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"toolchain\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\""}, {"sha": "5b8972ea3834b2aa13b67a96ed93dcbe5a9990d4", "filename": "crates/tt/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Ftt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"tt\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -13,4 +14,4 @@ doctest = false\n # to reduce number of compilations\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n \n-stdx = { path = \"../stdx\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "54b51faab2ee5ae46f90d2d457923cba68e67ccd", "filename": "crates/vfs-notify/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fvfs-notify%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fvfs-notify%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"vfs-notify\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -16,5 +17,5 @@ walkdir = \"2.3.1\"\n crossbeam-channel = \"0.4.0\"\n notify = \"5.0.0-pre.3\"\n \n-vfs = { path = \"../vfs\" }\n-paths = { path = \"../paths\" }\n+vfs = { path = \"../vfs\", version = \"0.0.0\" }\n+paths = { path = \"../paths\", version = \"0.0.0\" }"}, {"sha": "c318a68f7232953ab2099e26bf4d56292c788533", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"vfs\"\n version = \"0.0.0\"\n+description = \"TBD\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n@@ -12,4 +13,4 @@ doctest = false\n rustc-hash = \"1.0\"\n fst = \"0.4\"\n \n-paths = { path = \"../paths\" }\n+paths = { path = \"../paths\", version = \"0.0.0\" }"}, {"sha": "bb99c485504978901ae1987e0c7152896ffb21b6", "filename": "docs/dev/style.md", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -181,6 +181,30 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n+# Early Returns\n+\n+Do use early returns\n+\n+```rust\n+// Good\n+fn foo() -> Option<Bar> {\n+    if !condition() {\n+        return None;\n+    }\n+\n+    Some(...)\n+}\n+\n+// Not as good\n+fn foo() -> Option<Bar> {\n+    if condition() {\n+        Some(...)\n+    } else {\n+        None\n+    }\n+}\n+```\n+\n # Getters & Setters\n \n If a field can have any value without breaking invariants, make the field public.\n@@ -189,7 +213,7 @@ Never provide setters.\n \n Getters should return borrowed data:\n \n-```\n+```rust\n struct Person {\n     // Invariant: never empty\n     first_name: String,\n@@ -231,6 +255,41 @@ if words.len() != 2 {\n }\n ```\n \n+# Avoid Monomorphization\n+\n+Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n+This allows for exceptionally good performance, but leads to increased compile times.\n+Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n+Compile time **does not** obey this rule -- all code has to be compiled.\n+For this reason, avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n+\n+```rust\n+// Good\n+fn frbonicate(f: impl FnMut()) {\n+    frobnicate_impl(&mut f)\n+}\n+fn frobnicate_impl(f: &mut dyn FnMut()) {\n+    // lots of code\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl FnMut()) {\n+    // lots of code\n+}\n+```\n+\n+Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n+\n+```rust\n+// Good\n+fn frbonicate(f: &Path) {\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl AsRef<Path>) {\n+}\n+```\n+\n # Documentation\n \n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines."}, {"sha": "5eba2728d284ec64ecf864c5ca2ef70df51e81f3", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -134,6 +134,14 @@ async function downloadFile(\n \n     await pipeline(srcStream, destFileStream);\n \n+    // Don't apply the workaround in fixed versions of nodejs, since the process\n+    // freezes on them, the process waits for no-longer emitted `close` event.\n+    // The fix was applied in commit 7eed9d6bcc in v13.11.0\n+    // See the nodejs changelog:\n+    // https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V13.md\n+    const [, major, minor] = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(process.version)!;\n+    if (+major > 13 || (+major === 13 && +minor >= 11)) return;\n+\n     await new Promise<void>(resolve => {\n         destFileStream.on(\"close\", resolve);\n         destFileStream.destroy();"}, {"sha": "0750b5657fb30df191f087e15daba5f0370c2424", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b835f06cecd2189cb32a431fdb85245fbf53032a/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b835f06cecd2189cb32a431fdb85245fbf53032a/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=b835f06cecd2189cb32a431fdb85245fbf53032a", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.1.1\"\n+ungrammar = \"1.1.3\"\n walkdir = \"2.3.1\"\n write-json =  \"0.1.0\"\n # Avoid adding more dependencies to this crate"}, {"sha": "aca23890c6d617fc9d201edbf263bccad1792983", "filename": "xtask/src/codegen/rust.ungram", "status": "removed", "additions": 0, "deletions": 587, "changes": 587, "blob_url": "https://github.com/rust-lang/rust/blob/452afaebe188251cd4403e56999bf8b58de4fba9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/452afaebe188251cd4403e56999bf8b58de4fba9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=452afaebe188251cd4403e56999bf8b58de4fba9", "patch": "@@ -1,587 +0,0 @@\n-//*************************//\n-// Names, Paths and Macros //\n-//*************************//\n-\n-Name =\n-  'ident'\n-\n-NameRef =\n-  'ident' | 'int_number'\n-\n-Path =\n-  (qualifier:Path '::')? segment:PathSegment\n-\n-PathSegment =\n-  'crate' | 'self' | 'super'\n-| '::' NameRef\n-| NameRef GenericArgList?\n-| NameRef ParamList RetType?\n-| '<' PathType ('as' PathType)? '>'\n-\n-GenericArgList =\n-  '::'? '<' (GenericArg (',' GenericArg)* ','?)? '>'\n-\n-GenericArg =\n-  TypeArg\n-| AssocTypeArg\n-| LifetimeArg\n-| ConstArg\n-\n-TypeArg =\n-  Type\n-\n-AssocTypeArg =\n-  NameRef (':' TypeBoundList | '=' Type)\n-\n-LifetimeArg =\n-  'lifetime'\n-\n-ConstArg =\n-  Expr\n-\n-MacroCall =\n-  Attr* Path '!' Name? TokenTree ';'?\n-\n-TokenTree =\n-  '(' ')'\n-| '{' '}'\n-| '[' ']'\n-\n-MacroItems =\n-  Item*\n-\n-MacroStmts =\n-  statements:Stmt*\n-  Expr?\n-\n-//*************************//\n-//          Items          //\n-//*************************//\n-\n-SourceFile =\n-  'shebang'?\n-  Attr*\n-  Item*\n-\n-Item =\n-  Const\n-| Enum\n-| ExternBlock\n-| ExternCrate\n-| Fn\n-| Impl\n-| MacroCall\n-| Module\n-| Static\n-| Struct\n-| Trait\n-| TypeAlias\n-| Union\n-| Use\n-\n-Module =\n-  Attr* Visibility? 'mod' Name\n-  (ItemList | ';')\n-\n-ItemList =\n-  '{' Attr* Item* '}'\n-\n-ExternCrate =\n-  Attr* Visibility? 'extern' 'crate' (NameRef | 'self') Rename? ';'\n-\n-Rename =\n-  'as' (Name | '_')\n-\n-Use =\n-  Attr* Visibility? 'use' UseTree ';'\n-\n-UseTree =\n-  (Path? '::')? ('*' | UseTreeList )\n-| Path Rename?\n-\n-UseTreeList =\n-  '{' (UseTree (',' UseTree)* ','?)? '}'\n-\n-Fn =\n- Attr* Visibility?\n- 'default'? ('async' | 'const')? 'unsafe'? Abi?\n- 'fn' Name GenericParamList? ParamList RetType?\n- WhereClause?\n- (body:BlockExpr | ';')\n-\n-Abi =\n-  'extern' 'string'?\n-\n-ParamList =\n-  '('(\n-    SelfParam\n-  | (SelfParam ',')? (Param (',' Param)* ','?)?\n-  )')'\n-\n-SelfParam =\n-  Attr* (\n-    ('&' 'lifetime'?)? 'mut'? 'self'\n-  | 'mut'? 'self' ':' Type\n-  )\n-\n-Param =\n-  Attr* (\n-    Pat (':' Type)\n-  | Type\n-  | '...'\n-  )\n-\n-RetType =\n-  '->' Type\n-\n-TypeAlias =\n-  Attr* Visibility? 'default'? 'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n-  '=' Type ';'\n-\n-Struct =\n-  Attr* Visibility? 'struct' Name GenericParamList? (\n-    WhereClause?  (RecordFieldList | ';')\n-  | TupleFieldList WhereClause? ';'\n-  )\n-\n-RecordFieldList =\n- '{' fields:(RecordField (',' RecordField)* ','?)? '}'\n-\n-RecordField =\n-  Attr* Visibility? Name ':' Type\n-\n-TupleFieldList =\n-  '(' fields:(TupleField (',' TupleField)* ','?)? ')'\n-\n-TupleField =\n-  Attr* Visibility? Type\n-\n-FieldList =\n-  RecordFieldList\n-| TupleFieldList\n-\n-Enum =\n-  Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n-  VariantList\n-\n-VariantList =\n- '{' (Variant (',' Variant)* ','?)? '}'\n-\n-Variant =\n-  Attr* Visibility? Name FieldList ('=' Expr)?\n-\n-Union =\n-  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n-  RecordFieldList\n-\n-AdtDef =\n-  Enum\n-| Struct\n-| Union\n-\n-Const =\n-  Attr* Visibility? 'default'? 'const' (Name | '_') ':' Type\n-  '=' body:Expr ';'\n-\n-Static =\n-  Attr* Visibility? 'static'? 'mut'? Name ':' Type\n-  '=' body:Expr ';'\n-\n-Trait =\n-  Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList\n-  (':' TypeBoundList?)? WhereClause\n-  AssocItemList\n-\n-AssocItemList =\n-  '{' Attr* AssocItem* '}'\n-\n-AssocItem =\n-  Const\n-| Fn\n-| MacroCall\n-| TypeAlias\n-\n-Impl =\n-  Attr* Visibility?\n-  'default'? 'unsafe'? 'impl' 'const'? GenericParamList?\n-  ('!'? target_trait:Type 'for')? target_type:Type\n-  WhereClause?\n-  AssocItemList\n-\n-ExternBlock =\n-  Attr* Abi ExternItemList\n-\n-ExternItemList =\n-  '{' Attr* ExternItem* '}'\n-\n-ExternItem =\n-  Fn | Static | MacroCall\n-\n-GenericParamList =\n-  '<' (GenericParam (',' GenericParam)* ','?)? '>'\n-\n-GenericParam =\n-  ConstParam\n-| LifetimeParam\n-| TypeParam\n-\n-TypeParam =\n-  Attr* Name (':' TypeBoundList?)?\n-  ('=' default_type:Type)?\n-\n-ConstParam =\n-  Attr* 'const' Name ':' Type\n-  ('=' default_val:Expr)?\n-\n-LifetimeParam =\n-  Attr* 'lifetime' (':' TypeBoundList?)?\n-\n-WhereClause =\n-  'where' predicates:(WherePred (',' WherePred)* ','?)\n-\n-WherePred =\n-  ('for' GenericParamList)?  ('lifetime' | Type) ':' TypeBoundList\n-\n-Visibility =\n-  'pub' ('('\n-    'super'\n-  | 'self'\n-  | 'crate'\n-  | 'in' Path\n-  ')')?\n-\n-Attr =\n-  '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n-\n-//****************************//\n-// Statements and Expressions //\n-//****************************//\n-\n-Stmt =\n-  ExprStmt\n-| Item\n-| LetStmt\n-\n-LetStmt =\n-  Attr* 'let' Pat (':' Type)?\n-  '=' initializer:Expr ';'\n-\n-ExprStmt =\n-  Attr* Expr ';'?\n-\n-Expr =\n-  ArrayExpr\n-| AwaitExpr\n-| BinExpr\n-| BlockExpr\n-| BoxExpr\n-| BreakExpr\n-| CallExpr\n-| CastExpr\n-| ClosureExpr\n-| ContinueExpr\n-| EffectExpr\n-| FieldExpr\n-| ForExpr\n-| IfExpr\n-| IndexExpr\n-| Literal\n-| LoopExpr\n-| MacroCall\n-| MatchExpr\n-| MethodCallExpr\n-| ParenExpr\n-| PathExpr\n-| PrefixExpr\n-| RangeExpr\n-| RecordExpr\n-| RefExpr\n-| ReturnExpr\n-| TryExpr\n-| TupleExpr\n-| WhileExpr\n-\n-Literal =\n-  Attr* value:(\n-    'int_number' | 'float_number'\n-  | 'string' | 'raw_string'\n-  | 'byte_string' | 'raw_byte_string'\n-  | 'true' | 'false'\n-  | 'char' | 'byte'\n-  )\n-\n-PathExpr =\n-  Attr* Path\n-\n-BlockExpr =\n-  '{'\n-    Attr*\n-    statements:Stmt*\n-    Expr?\n-  '}'\n-\n-RefExpr =\n-  Attr* '&' ('raw' |'mut' | 'const') Expr\n-\n-TryExpr =\n-  Attr* Expr '?'\n-\n-EffectExpr =\n-  Attr* Label? ('try' | 'unsafe' | 'async') BlockExpr\n-\n-PrefixExpr =\n-  Attr* op:('-' | '!' | '*') Expr\n-\n-BinExpr =\n-  Attr*\n-  lhs:Expr\n-  op:(\n-    '||' | '&&'\n-    | '==' | '!=' | '<=' | '>=' | '<' | '>'\n-    | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'\n-    | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='\n-  )\n-  rhs:Expr\n-\n-CastExpr =\n-  Attr* Expr 'as' Type\n-\n-ParenExpr =\n-  Attr* '(' Attr* Expr ')'\n-\n-ArrayExpr =\n-  Attr* '[' Attr* (\n-    (Expr (',' Expr)* ','?)?\n-  | Expr ';' Expr\n-  ) ']'\n-\n-IndexExpr =\n-  Attr* base:Expr '[' index:Expr ']'\n-\n-TupleExpr =\n-  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'\n-\n-RecordExpr =\n-  Path RecordExprFieldList\n-\n-RecordExprFieldList =\n-  '{'\n-    Attr*\n-    fields:(RecordExprField (',' RecordExprField)* ','?)\n-    ('..' spread:Expr)?\n-  '}'\n-\n-RecordExprField =\n-  Attr* NameRef (':' Expr)?\n-\n-CallExpr =\n-  Attr* Expr ArgList\n-\n-ArgList =\n-  '(' args:(Expr (',' Expr)* ','?)? ')'\n-\n-MethodCallExpr =\n-  Attr* Expr '.' NameRef GenericArgList? ArgList\n-\n-FieldExpr =\n-  Attr* Expr '.' NameRef\n-\n-ClosureExpr =\n-  Attr* 'static'? 'async'? 'move'?  ParamList RetType?\n-  body:Expr\n-\n-IfExpr =\n-  Attr* 'if' Condition then_branch:BlockExpr\n-  ('else' else_branch:(IfExpr | BlockExpr))?\n-\n-Condition =\n-  'let' Pat '=' Expr\n-| Expr\n-\n-LoopExpr =\n-  Attr* Label? 'loop'\n-  loop_body:BlockExpr\n-\n-ForExpr =\n-  Attr* Label? 'for' Pat 'in' iterable:Expr\n-  loop_body:BlockExpr\n-\n-WhileExpr =\n-  Attr* Label? 'while' Condition\n-  loop_body:BlockExpr\n-\n-Label =\n-  'lifetime'\n-\n-BreakExpr =\n-  Attr* 'break' 'lifetime'? Expr?\n-\n-ContinueExpr =\n-  Attr* 'continue' 'lifetime'?\n-\n-RangeExpr =\n-  Attr* start:Expr? op:('..' | '..=') end:Expr?\n-\n-MatchExpr =\n-  Attr* 'match' Expr MatchArmList\n-\n-MatchArmList =\n-  '{'\n-    Attr*\n-    arms:MatchArm*\n-  '}'\n-\n-MatchArm =\n-  Attr* Pat guard:MatchGuard? '=>' Expr ','?\n-\n-MatchGuard =\n-  'if' Expr\n-\n-ReturnExpr =\n-  Attr* 'return' Expr?\n-\n-AwaitExpr =\n-  Attr* Expr '.' 'await'\n-\n-BoxExpr =\n-  Attr* 'box' Expr\n-\n-//*************************//\n-//          Types          //\n-//*************************//\n-\n-Type =\n-  ArrayType\n-| DynTraitType\n-| FnPointerType\n-| ForType\n-| ImplTraitType\n-| InferType\n-| NeverType\n-| ParenType\n-| PathType\n-| PointerType\n-| ReferenceType\n-| SliceType\n-| TupleType\n-\n-ParenType =\n-  '(' Type ')'\n-\n-NeverType =\n-  '!'\n-\n-PathType =\n-  Path\n-\n-TupleType =\n-  '(' fields:(Type (',' Type)* ','?)? ')'\n-\n-PointerType =\n-  '*' ('const' | 'mut') Type\n-\n-ReferenceType =\n-  '&' 'lifetime'? 'mut'? Type\n-\n-ArrayType =\n-  '[' Type ';' Expr ']'\n-\n-SliceType =\n-  '[' Type ']'\n-\n-InferType =\n-  '_'\n-\n-FnPointerType =\n-  'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n-\n-ForType =\n-  'for' GenericParamList Type\n-\n-ImplTraitType =\n-  'impl' TypeBoundList\n-\n-DynTraitType =\n-  'dyn' TypeBoundList\n-\n-TypeBoundList =\n-  bounds:(TypeBound ('+' TypeBound)* '+'?)\n-\n-TypeBound =\n-  'lifetime'\n-| '?'? Type\n-\n-//************************//\n-//        Patterns        //\n-//************************//\n-\n-Pat =\n-  IdentPat\n-| BoxPat\n-| RestPat\n-| LiteralPat\n-| MacroPat\n-| OrPat\n-| ParenPat\n-| PathPat\n-| WildcardPat\n-| RangePat\n-| RecordPat\n-| RefPat\n-| SlicePat\n-| TuplePat\n-| TupleStructPat\n-\n-LiteralPat =\n-  Literal\n-\n-IdentPat =\n-  Attr* 'ref'? 'mut'? Name ('@' Pat)?\n-\n-WildcardPat =\n-  '_'\n-\n-RangePat =\n-  start:Pat op:('..' | '..=') end:Pat\n-\n-RefPat =\n-  '&' 'mut'? Pat\n-\n-RecordPat =\n-  Path RecordPatFieldList\n-\n-RecordPatFieldList =\n-  '{'\n-    fields:(RecordPatField (',' RecordPatField)* ','?)\n-    '..'?\n-  '}'\n-\n-RecordPatField =\n-  Attr* (NameRef ':')? Pat\n-\n-TupleStructPat =\n-   Path '(' fields:(Pat (',' Pat)* ','?)? ')'\n-\n-TuplePat =\n-   '(' fields:(Pat (',' Pat)* ','?)? ')'\n-\n-ParenPat =\n-  '(' Pat ')'\n-\n-SlicePat =\n-  '[' (Pat (',' Pat)* ','?)? ']'\n-\n-PathPat =\n-  Path\n-\n-OrPat =\n-  (Pat ('|' Pat)* '|'?)\n-\n-BoxPat =\n-  'box' Pat\n-\n-RestPat =\n-  '..'\n-\n-MacroPat =\n-  MacroCall"}]}