{"sha": "de7b3cf02e01be08863b712a666e24e7bfe8fca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2IzY2YwMmUwMWJlMDg4NjNiNzEyYTY2NmUyNGU3YmZlOGZjYTM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-15T00:40:33Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-15T07:53:37Z"}, "message": "Forbid impls for builtin traits on types that are not structs/enums", "tree": {"sha": "148416ca5e7bf1a2eaf82f49c89fb69899868d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148416ca5e7bf1a2eaf82f49c89fb69899868d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7b3cf02e01be08863b712a666e24e7bfe8fca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7b3cf02e01be08863b712a666e24e7bfe8fca3", "html_url": "https://github.com/rust-lang/rust/commit/de7b3cf02e01be08863b712a666e24e7bfe8fca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7b3cf02e01be08863b712a666e24e7bfe8fca3/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7025582cc9c89ee37e38bcdf94482b75cf37cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7025582cc9c89ee37e38bcdf94482b75cf37cd8", "html_url": "https://github.com/rust-lang/rust/commit/a7025582cc9c89ee37e38bcdf94482b75cf37cd8"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "9b53cbe84e7c78531d29cdfe54db6f8bf82df1c9", "filename": "src/librustc_typeck/coherence/impls.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fimpls.rs?ref=de7b3cf02e01be08863b712a666e24e7bfe8fca3", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementations checker: builtin traits and default impls are allowed just\n+//! for structs and enums.\n+\n+use middle::def;\n+use middle::ty;\n+use syntax::ast::{Item, ItemImpl};\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::visit;\n+use util::ppaux::UserString;\n+\n+pub fn check(tcx: &ty::ctxt) {\n+    let mut impls = ImplsChecker { tcx: tcx };\n+    visit::walk_crate(&mut impls, tcx.map.krate());\n+}\n+\n+struct ImplsChecker<'cx, 'tcx:'cx> {\n+    tcx: &'cx ty::ctxt<'tcx>\n+}\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for ImplsChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemImpl(_, _, _, Some(ref opt_trait), _, _) => {\n+                let trait_ref = ty::node_id_to_trait_ref(self.tcx, opt_trait.ref_id);\n+                if let Some(_) = self.tcx.lang_items.to_builtin_kind(trait_ref.def_id) {\n+                    match trait_ref.self_ty().sty {\n+                        ty::ty_struct(..) | ty::ty_enum(..) => {}\n+                        _ => {\n+                            self.tcx.sess.span_err(\n+                                item.span,\n+                                &format!(\"builtin traits can only be \\\n+                                          implemented on structs or enums\")[]);\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+}"}, {"sha": "a7ef4c1e9f2a572a9c1409d61d7cb62aff5cdf09", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=de7b3cf02e01be08863b712a666e24e7bfe8fca3", "patch": "@@ -49,6 +49,7 @@ use syntax::visit;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use util::ppaux::Repr;\n \n+mod impls;\n mod orphan;\n mod overlap;\n mod unsafety;\n@@ -596,6 +597,7 @@ pub fn check_coherence(crate_context: &CrateCtxt) {\n         inference_context: new_infer_ctxt(crate_context.tcx),\n         inherent_impls: RefCell::new(FnvHashMap::new()),\n     }.check(crate_context.tcx.map.krate());\n+    impls::check(crate_context.tcx);\n     unsafety::check(crate_context.tcx);\n     orphan::check(crate_context.tcx);\n     overlap::check(crate_context.tcx);"}, {"sha": "2ca288b60a33fb8a5530014af74f609d3f3d0917", "filename": "src/test/compile-fail/coherence-impls-builtin.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7b3cf02e01be08863b712a666e24e7bfe8fca3/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs?ref=de7b3cf02e01be08863b712a666e24e7bfe8fca3", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::Send;\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+unsafe impl Send for TestE {}\n+unsafe impl Send for MyType {}\n+unsafe impl Send for (MyType, MyType) {}\n+//~^ ERROR builtin traits can only be implemented on structs or enums\n+\n+unsafe impl Send for &'static MyType {}\n+//~^ ERROR builtin traits can only be implemented on structs or enums\n+\n+unsafe impl Send for [MyType] {}\n+//~^ ERROR builtin traits can only be implemented on structs or enums\n+\n+unsafe impl Send for &'static [MyType] {}\n+//~^ ERROR builtin traits can only be implemented on structs or enums\n+\n+fn is_send<T: Send>() {}\n+\n+fn main() {\n+    is_send::<(MyType, TestE)>();\n+}"}]}