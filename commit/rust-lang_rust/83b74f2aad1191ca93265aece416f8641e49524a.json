{"sha": "83b74f2aad1191ca93265aece416f8641e49524a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjc0ZjJhYWQxMTkxY2E5MzI2NWFlY2U0MTZmODY0MWU0OTUyNGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-02T13:23:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-02T13:23:49Z"}, "message": "Rollup merge of #61438 - estebank:generics-span, r=varkor\n\nPoint at individual type args on arg count mismatch\n\n- Point at individual type arguments on arg count mismatch\n- Make generics always have a valid span, even when there are no args\n- Explain that `impl Trait` introduces an implicit type argument\n\nFix #55991.", "tree": {"sha": "084c9ec63c493b43549245d26aeccf7ab1dcfd2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084c9ec63c493b43549245d26aeccf7ab1dcfd2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b74f2aad1191ca93265aece416f8641e49524a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc883lCRBK7hj4Ov3rIwAAdHIIAFlg+vpvVFKWHiB+QxLUY1Br\nKG3hiToL4l6O9RcKeknx1iU7pJtWUw3sO5HKwwxjtyBAFg5mMHLoB4RfOpmL0eio\n/DNcWiyQDpw63ourn2T2m2O0VqiJAfJ5zdtG8pJT57mykf3pIFMZYRHms5Rt0ruU\nkJAXpgC/II2we99K06GjZtsxf+l6bOWLOGUjvzHcNQOeIx4/vMrZVC0eHcmLBoDq\nucn7cb6nLwIBZbfFNh67rQdIQH/UbKsIRkdwsiuBVSnfJ1Z0NdvL/IcrVqVBYJtP\nmp3rLamN8a0Zsd7NpwhX44oRXJoFQtkeysIlQN98yncJ9KyEXpmD55wxunzbdgM=\n=zVlq\n-----END PGP SIGNATURE-----\n", "payload": "tree 084c9ec63c493b43549245d26aeccf7ab1dcfd2b\nparent 5599985caa3d89e6f83b37fa779cae045913df89\nparent 31918d6eef4d5c6459fc4e16e4ddedf9d8ab698d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559481829 +0200\ncommitter GitHub <noreply@github.com> 1559481829 +0200\n\nRollup merge of #61438 - estebank:generics-span, r=varkor\n\nPoint at individual type args on arg count mismatch\n\n- Point at individual type arguments on arg count mismatch\n- Make generics always have a valid span, even when there are no args\n- Explain that `impl Trait` introduces an implicit type argument\n\nFix #55991.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b74f2aad1191ca93265aece416f8641e49524a", "html_url": "https://github.com/rust-lang/rust/commit/83b74f2aad1191ca93265aece416f8641e49524a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b74f2aad1191ca93265aece416f8641e49524a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5599985caa3d89e6f83b37fa779cae045913df89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5599985caa3d89e6f83b37fa779cae045913df89", "html_url": "https://github.com/rust-lang/rust/commit/5599985caa3d89e6f83b37fa779cae045913df89"}, {"sha": "31918d6eef4d5c6459fc4e16e4ddedf9d8ab698d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31918d6eef4d5c6459fc4e16e4ddedf9d8ab698d", "html_url": "https://github.com/rust-lang/rust/commit/31918d6eef4d5c6459fc4e16e4ddedf9d8ab698d"}], "stats": {"total": 169, "additions": 120, "deletions": 49}, "files": [{"sha": "cbdcf9d3918b5f8efda64d7e2605cfa47d906b29", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -628,10 +628,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn get_generics_span(&self, id: DefId) -> Option<Span> {\n-        self.get_generics(id).map(|generics| generics.span).filter(|sp| *sp != DUMMY_SP)\n-    }\n-\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n         let hir_id = self.node_to_hir_id(id);"}, {"sha": "d9c98d60b958d3ab8ca4c24f76bc6a358931fe2a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -16,7 +16,7 @@ use crate::util::nodemap::{NodeMap, FxHashSet};\n use crate::mir::mono::Linkage;\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n+use syntax_pos::{Span, DUMMY_SP, symbol::InternedString, MultiSpan};\n use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n@@ -624,6 +624,14 @@ impl Generics {\n         }\n         None\n     }\n+\n+    pub fn spans(&self) -> MultiSpan {\n+        if self.params.is_empty() {\n+            self.span.into()\n+        } else {\n+            self.params.iter().map(|p| p.span).collect::<Vec<Span>>().into()\n+        }\n+    }\n }\n \n /// Synthetic type parameters are converted to another form during lowering; this allows"}, {"sha": "b4548ac70911e8224afbf1272d92e66dd3ecfdef", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -385,7 +385,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n         let def_span = tcx.sess.source_map().def_span(span);\n-        let span = tcx.hir().get_generics_span(impl_m.def_id).unwrap_or(def_span);\n+        let span = tcx.hir().get_generics(impl_m.def_id).map(|g| g.span).unwrap_or(def_span);\n         let mut err = struct_span_err!(\n             tcx.sess,\n             span,\n@@ -396,7 +396,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         err.span_label(span, \"lifetimes do not match method in trait\");\n         if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n             let def_sp = tcx.sess.source_map().def_span(sp);\n-            let sp = tcx.hir().get_generics_span(trait_m.def_id).unwrap_or(def_sp);\n+            let sp = tcx.hir().get_generics(trait_m.def_id).map(|g| g.span).unwrap_or(def_sp);\n             err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n         }\n         err.emit();\n@@ -583,7 +583,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn compare_number_of_generics<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     impl_: &ty::AssocItem,\n-    impl_span: Span,\n+    _impl_span: Span,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n ) -> Result<(), ErrorReported> {\n@@ -600,17 +600,44 @@ fn compare_number_of_generics<'a, 'tcx>(\n         if impl_count != trait_count {\n             err_occurred = true;\n \n-            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n-            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n-            let span = if impl_item.generics.params.is_empty()\n-                || impl_item.generics.span.is_dummy() { // argument position impl Trait (#55374)\n-                impl_span\n+            let (\n+                trait_spans,\n+                impl_trait_spans,\n+            ) = if let Some(trait_hir_id) = tcx.hir().as_local_hir_id(trait_.def_id) {\n+                let trait_item = tcx.hir().expect_trait_item(trait_hir_id);\n+                if trait_item.generics.params.is_empty() {\n+                    (Some(vec![trait_item.generics.span]), vec![])\n+                } else {\n+                    let arg_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .map(|p| p.span)\n+                        .collect();\n+                    let impl_trait_spans: Vec<Span> = trait_item.generics.params.iter()\n+                        .filter_map(|p| match p.kind {\n+                            GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                            } => Some(p.span),\n+                            _ => None,\n+                        }).collect();\n+                    (Some(arg_spans), impl_trait_spans)\n+                }\n             } else {\n-                impl_item.generics.span\n+                (trait_span.map(|s| vec![s]), vec![])\n             };\n \n+            let impl_hir_id = tcx.hir().as_local_hir_id(impl_.def_id).unwrap();\n+            let impl_item = tcx.hir().expect_impl_item(impl_hir_id);\n+            let impl_item_impl_trait_spans: Vec<Span> = impl_item.generics.params.iter()\n+                .filter_map(|p| match p.kind {\n+                    GenericParamKind::Type {\n+                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                    } => Some(p.span),\n+                    _ => None,\n+                }).collect();\n+            let spans = impl_item.generics.spans();\n+            let span = spans.primary_span();\n+\n             let mut err = tcx.sess.struct_span_err_with_code(\n-                span,\n+                spans,\n                 &format!(\n                     \"method `{}` has {} {kind} parameter{} but its trait \\\n                      declaration has {} {kind} parameter{}\",\n@@ -626,22 +653,36 @@ fn compare_number_of_generics<'a, 'tcx>(\n \n             let mut suffix = None;\n \n-            if let Some(span) = trait_span {\n-                err.span_label(\n-                    span,\n-                    format!(\"expected {} {} parameter{}\", trait_count, kind,\n-                        if trait_count != 1 { \"s\" } else { \"\" })\n-                );\n+            if let Some(spans) = trait_spans {\n+                let mut spans = spans.iter();\n+                if let Some(span) = spans.next() {\n+                    err.span_label(*span, format!(\n+                        \"expected {} {} parameter{}\",\n+                        trait_count,\n+                        kind,\n+                        if trait_count != 1 { \"s\" } else { \"\" },\n+                    ));\n+                }\n+                for span in spans {\n+                    err.span_label(*span, \"\");\n+                }\n             } else {\n                 suffix = Some(format!(\", expected {}\", trait_count));\n             }\n \n-            err.span_label(\n-                span,\n-                format!(\"found {} {} parameter{}{}\", impl_count, kind,\n+            if let Some(span) = span {\n+                err.span_label(span, format!(\n+                    \"found {} {} parameter{}{}\",\n+                    impl_count,\n+                    kind,\n                     if impl_count != 1 { \"s\" } else { \"\" },\n-                    suffix.unwrap_or_else(|| String::new())),\n-            );\n+                    suffix.unwrap_or_else(|| String::new()),\n+                ));\n+            }\n+\n+            for span in impl_trait_spans.iter().chain(impl_item_impl_trait_spans.iter()) {\n+                err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n+            }\n \n             err.emit();\n         }"}, {"sha": "7bc95ad03693880920f7481ace84b5d9b08fb33a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -5050,21 +5050,22 @@ impl<'a> Parser<'a> {\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     fn parse_generics(&mut self) -> PResult<'a, ast::Generics> {\n         let span_lo = self.span;\n-        if self.eat_lt() {\n+        let (params, span) = if self.eat_lt() {\n             let params = self.parse_generic_params()?;\n             self.expect_gt()?;\n-            Ok(ast::Generics {\n-                params,\n-                where_clause: WhereClause {\n-                    id: ast::DUMMY_NODE_ID,\n-                    predicates: Vec::new(),\n-                    span: DUMMY_SP,\n-                },\n-                span: span_lo.to(self.prev_span),\n-            })\n+            (params, span_lo.to(self.prev_span))\n         } else {\n-            Ok(ast::Generics::default())\n-        }\n+            (vec![], self.prev_span.between(self.span))\n+        };\n+        Ok(ast::Generics {\n+            params,\n+            where_clause: WhereClause {\n+                id: ast::DUMMY_NODE_ID,\n+                predicates: Vec::new(),\n+                span: DUMMY_SP,\n+            },\n+            span,\n+        })\n     }\n \n     /// Parses generic args (within a path segment) with recovery for extra leading angle brackets."}, {"sha": "4c7c0d1a0dfa514f5beea8594406e3ed5e0d70b3", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -36,13 +36,13 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |                        ^^\n \n error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:20\n    |\n LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n    |                    ---------------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:48:5"}, {"sha": "3dd910019bfd08337c6a9db1f118e8e0e5488643", "filename": "src/test/ui/error-codes/E0049.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -8,5 +8,15 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n }\n \n+trait Fuzz {\n+    fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+}\n+\n+struct Baz;\n+\n+impl Fuzz for Baz {\n+    fn fuzz(x: bool, y: bool) -> Self { Baz } //~ ERROR E0049\n+}\n+\n fn main() {\n }"}, {"sha": "c0cd31faa90d60056cc31fe6d5a0446fe7b28e43", "filename": "src/test/ui/error-codes/E0049.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0049.stderr?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -1,12 +1,23 @@\n error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/E0049.rs:8:5\n+  --> $DIR/E0049.rs:8:11\n    |\n LL |     fn foo<T: Default>(x: T) -> Self;\n-   |     --------------------------------- expected 1 type parameter\n+   |            - expected 1 type parameter\n ...\n LL |     fn foo(x: bool) -> Self { Bar }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ found 0 type parameters\n+   |           ^ found 0 type parameters\n \n-error: aborting due to previous error\n+error[E0049]: method `fuzz` has 0 type parameters but its trait declaration has 2 type parameters\n+  --> $DIR/E0049.rs:18:12\n+   |\n+LL |     fn fuzz<A: Default, B>(x: A, y: B) -> Self;\n+   |             -           -\n+   |             |\n+   |             expected 2 type parameters\n+...\n+LL |     fn fuzz(x: bool, y: bool) -> Self { Baz }\n+   |            ^ found 0 type parameters\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0049`."}, {"sha": "140f19f1ff7746f0ed898c405acb7bd5564d4b8d", "filename": "src/test/ui/issues/issue-36708.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36708.stderr?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -1,8 +1,8 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/issue-36708.rs:8:11\n+  --> $DIR/issue-36708.rs:8:12\n    |\n LL |     fn foo<T>() {}\n-   |           ^^^ found 1 type parameter, expected 0\n+   |            ^ found 1 type parameter, expected 0\n \n error: aborting due to previous error\n "}, {"sha": "ecfa5c69e2f038ed19bbc6264e017d0d839c4739", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -10,6 +10,7 @@ impl Foo for u32 {\n     fn foo(&self, t: impl Clone) {}\n //~^ ERROR method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n //~| NOTE found 1 type parameter\n+//~| NOTE `impl Trait` introduces an implicit type parameter\n }\n \n fn main() {}"}, {"sha": "30322f88cca42aa6020b8d84c665b06d86ad508e", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83b74f2aad1191ca93265aece416f8641e49524a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=83b74f2aad1191ca93265aece416f8641e49524a", "patch": "@@ -1,11 +1,14 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:5\n+  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:22\n    |\n LL |     fn foo(&self, t: Self::T);\n-   |     -------------------------- expected 0 type parameters\n+   |           - expected 0 type parameters\n ...\n LL |     fn foo(&self, t: impl Clone) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found 1 type parameter\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      found 1 type parameter\n+   |                      `impl Trait` introduces an implicit type parameter\n \n error: aborting due to previous error\n "}]}