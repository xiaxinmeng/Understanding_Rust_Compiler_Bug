{"sha": "0baf6bf226062b52e9f13cb36190bd332fbd4dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWY2YmYyMjYwNjJiNTJlOWYxM2NiMzYxOTBiZDMzMmZiZDRkY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T15:43:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T15:43:02Z"}, "message": "Auto merge of #7163 - mgacek8:issue7110_needless_collect_with_type_annotations, r=flip1995\n\nneedless_collect: Lint cases with type annotations for indirect usage and recognize `BinaryHeap`\n\nfixes #7110\nchangelog: needless_collect: Lint cases with type annotations for indirect usage and recognize `BinaryHeap`.", "tree": {"sha": "bc85185e747a40e93d32353574cfd24c8b8ebc61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc85185e747a40e93d32353574cfd24c8b8ebc61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0baf6bf226062b52e9f13cb36190bd332fbd4dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0baf6bf226062b52e9f13cb36190bd332fbd4dce", "html_url": "https://github.com/rust-lang/rust/commit/0baf6bf226062b52e9f13cb36190bd332fbd4dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0baf6bf226062b52e9f13cb36190bd332fbd4dce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e538e3522797ed8fb9d4cbf6a01602fa76cae65", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e538e3522797ed8fb9d4cbf6a01602fa76cae65", "html_url": "https://github.com/rust-lang/rust/commit/7e538e3522797ed8fb9d4cbf6a01602fa76cae65"}, {"sha": "f79a2a3990e88cba2a2d4c55828a97d2293d6992", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79a2a3990e88cba2a2d4c55828a97d2293d6992", "html_url": "https://github.com/rust-lang/rust/commit/f79a2a3990e88cba2a2d4c55828a97d2293d6992"}], "stats": {"total": 124, "additions": 112, "deletions": 12}, "files": [{"sha": "9662a0b22a3ab563629a4b9e5e79f56395efb399", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0baf6bf226062b52e9f13cb36190bd332fbd4dce/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf6bf226062b52e9f13cb36190bd332fbd4dce/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=0baf6bf226062b52e9f13cb36190bd332fbd4dce", "patch": "@@ -7,9 +7,10 @@ use clippy_utils::{is_trait_method, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Block, Expr, ExprKind, GenericArg, HirId, Local, Pat, PatKind, QPath, StmtKind};\n+use rustc_hir::{Block, Expr, ExprKind, GenericArg, GenericArgs, HirId, Local, Pat, PatKind, QPath, StmtKind, Ty};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{MultiSpan, Span};\n \n@@ -26,7 +27,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         if let Some(generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n-        let ty = cx.typeck_results().node_type(ty.hir_id);\n+        if let Some(ty) = cx.typeck_results().node_type_opt(ty.hir_id);\n         if is_type_diagnostic_item(cx, ty, sym::vec_type)\n             || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n             || match_type(cx, ty, &paths::BTREEMAP)\n@@ -58,20 +59,33 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n }\n \n fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n+    fn get_hir_id<'tcx>(ty: Option<&Ty<'tcx>>, method_args: Option<&GenericArgs<'tcx>>) -> Option<HirId> {\n+        if let Some(ty) = ty {\n+            return Some(ty.hir_id);\n+        }\n+\n+        if let Some(generic_args) = method_args {\n+            if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0) {\n+                return Some(ty.hir_id);\n+            }\n+        }\n+\n+        None\n+    }\n     if let ExprKind::Block(block, _) = expr.kind {\n         for stmt in block.stmts {\n             if_chain! {\n                 if let StmtKind::Local(\n                     Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n-                    init: Some(init_expr), .. }\n+                    init: Some(init_expr), ty, .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(method_name, collect_span, &[ref iter_source], ..) = init_expr.kind;\n                 if method_name.ident.name == sym!(collect) && is_trait_method(cx, init_expr, sym::Iterator);\n-                if let Some(generic_args) = method_name.args;\n-                if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n-                if let ty = cx.typeck_results().node_type(ty.hir_id);\n+                if let Some(hir_id) = get_hir_id(*ty, method_name.args);\n+                if let Some(ty) = cx.typeck_results().node_type_opt(hir_id);\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n                     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n+                    is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if let [iter_call] = &*iter_calls;"}, {"sha": "ae67ebded437496e0d3e40c23c21a490e2b2901a", "filename": "tests/ui/copy_iterator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.rs?ref=0baf6bf226062b52e9f13cb36190bd332fbd4dce", "patch": "@@ -16,8 +16,6 @@ impl Iterator for Countdown {\n \n fn main() {\n     let my_iterator = Countdown(5);\n-    let a: Vec<_> = my_iterator.take(1).collect();\n-    assert_eq!(a.len(), 1);\n-    let b: Vec<_> = my_iterator.collect();\n-    assert_eq!(b.len(), 5);\n+    assert_eq!(my_iterator.take(1).count(), 1);\n+    assert_eq!(my_iterator.count(), 5);\n }"}, {"sha": "2458bf1e490bbf9c672de2987677c9157ed9b0a5", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=0baf6bf226062b52e9f13cb36190bd332fbd4dce", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{HashMap, VecDeque};\n+use std::collections::{BinaryHeap, HashMap, LinkedList, VecDeque};\n \n fn main() {\n     let sample = [1; 5];\n@@ -43,3 +43,35 @@ fn main() {\n             .collect::<Vec<_>>();\n     }\n }\n+\n+mod issue7110 {\n+    // #7110 - lint for type annotation cases\n+    use super::*;\n+\n+    fn lint_vec(string: &str) -> usize {\n+        let buffer: Vec<&str> = string.split('/').collect();\n+        buffer.len()\n+    }\n+    fn lint_vec_deque() -> usize {\n+        let sample = [1; 5];\n+        let indirect_len: VecDeque<_> = sample.iter().collect();\n+        indirect_len.len()\n+    }\n+    fn lint_linked_list() -> usize {\n+        let sample = [1; 5];\n+        let indirect_len: LinkedList<_> = sample.iter().collect();\n+        indirect_len.len()\n+    }\n+    fn lint_binary_heap() -> usize {\n+        let sample = [1; 5];\n+        let indirect_len: BinaryHeap<_> = sample.iter().collect();\n+        indirect_len.len()\n+    }\n+    fn dont_lint(string: &str) -> usize {\n+        let buffer: Vec<&str> = string.split('/').collect();\n+        for buff in &buffer {\n+            println!(\"{}\", buff);\n+        }\n+        buffer.len()\n+    }\n+}"}, {"sha": "f094e182a48f31eb1cb9e945581f7cf32613829d", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0baf6bf226062b52e9f13cb36190bd332fbd4dce/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=0baf6bf226062b52e9f13cb36190bd332fbd4dce", "patch": "@@ -69,5 +69,61 @@ LL |\n LL |     sample.into_iter().any(|x| x == a);\n    |\n \n-error: aborting due to 5 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:52:51\n+   |\n+LL |         let buffer: Vec<&str> = string.split('/').collect();\n+   |                                                   ^^^^^^^\n+LL |         buffer.len()\n+   |         ------------ the iterator could be used here instead\n+   |\n+help: take the original Iterator's count instead of collecting it and finding the length\n+   |\n+LL |         \n+LL |         string.split('/').count()\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:57:55\n+   |\n+LL |         let indirect_len: VecDeque<_> = sample.iter().collect();\n+   |                                                       ^^^^^^^\n+LL |         indirect_len.len()\n+   |         ------------------ the iterator could be used here instead\n+   |\n+help: take the original Iterator's count instead of collecting it and finding the length\n+   |\n+LL |         \n+LL |         sample.iter().count()\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:62:57\n+   |\n+LL |         let indirect_len: LinkedList<_> = sample.iter().collect();\n+   |                                                         ^^^^^^^\n+LL |         indirect_len.len()\n+   |         ------------------ the iterator could be used here instead\n+   |\n+help: take the original Iterator's count instead of collecting it and finding the length\n+   |\n+LL |         \n+LL |         sample.iter().count()\n+   |\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect_indirect.rs:67:57\n+   |\n+LL |         let indirect_len: BinaryHeap<_> = sample.iter().collect();\n+   |                                                         ^^^^^^^\n+LL |         indirect_len.len()\n+   |         ------------------ the iterator could be used here instead\n+   |\n+help: take the original Iterator's count instead of collecting it and finding the length\n+   |\n+LL |         \n+LL |         sample.iter().count()\n+   |\n+\n+error: aborting due to 9 previous errors\n "}]}