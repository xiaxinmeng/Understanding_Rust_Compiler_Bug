{"sha": "b005a89daeee67c10ec05a0affee09472eb3f204", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDVhODlkYWVlZTY3YzEwZWMwNWEwYWZmZWUwOTQ3MmViM2YyMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-26T21:55:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-26T21:55:49Z"}, "message": "Rollup merge of #63855 - killercup:refactor/feature-gates, r=Centril\n\nRefactor feature gates\n\nAfter #63824, this goes a few steps further by\n\n- parsing doc comments in the macros to extract descriptions for feature gates, and\n- introducing a common `Feature` type to replace the tuples used previously to improve readability.\n\nThe descriptions are not yet used, but I felt like this PR is a useful enough refactoring on its own.\n\nr? @Centril", "tree": {"sha": "02e4085156b95e1d0a098852ff1be7c9abed4c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e4085156b95e1d0a098852ff1be7c9abed4c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b005a89daeee67c10ec05a0affee09472eb3f204", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZFVlCRBK7hj4Ov3rIwAAdHIIAH3k8RvLLIu0ysoPFsvK7cuv\nYh87pB4h7smoFfuMhbuYVn6L+Qf3W099wRta07wIyd+mwmSl8CWco7reugrQK4RO\nRrzq2AaE5hTQtdaDZ7DQr3t30HvTgNuES7PM5pjcNns9J7Vc2xnla4yUmlvu0CTC\n94xGumQDGdVmlMDUjnOe3SQh5MhynIfoC9KTDMiQEdNtCkOk53TbX5BInBLqMis/\nU/BqFlusn9zJ2O1o1Rs/IYVDrTLXPmVdF+NGElFn2KcwoI/r8M8MlPAMGrgLnbSJ\nox+5JhIDrnU263AE3qo8ekrudr9gLqegqm3Q0F9AaeCYj4wc8ec+rDk3LefE4go=\n=lQj2\n-----END PGP SIGNATURE-----\n", "payload": "tree 02e4085156b95e1d0a098852ff1be7c9abed4c66\nparent 59fa966a4ddd395ef1b59861d8c8b8152020624e\nparent 94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566856549 +0200\ncommitter GitHub <noreply@github.com> 1566856549 +0200\n\nRollup merge of #63855 - killercup:refactor/feature-gates, r=Centril\n\nRefactor feature gates\n\nAfter #63824, this goes a few steps further by\n\n- parsing doc comments in the macros to extract descriptions for feature gates, and\n- introducing a common `Feature` type to replace the tuples used previously to improve readability.\n\nThe descriptions are not yet used, but I felt like this PR is a useful enough refactoring on its own.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b005a89daeee67c10ec05a0affee09472eb3f204", "html_url": "https://github.com/rust-lang/rust/commit/b005a89daeee67c10ec05a0affee09472eb3f204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b005a89daeee67c10ec05a0affee09472eb3f204/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fa966a4ddd395ef1b59861d8c8b8152020624e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fa966a4ddd395ef1b59861d8c8b8152020624e", "html_url": "https://github.com/rust-lang/rust/commit/59fa966a4ddd395ef1b59861d8c8b8152020624e"}, {"sha": "94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "html_url": "https://github.com/rust-lang/rust/commit/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966"}], "stats": {"total": 728, "additions": 419, "deletions": 309}, "files": [{"sha": "6c0b271c6c5e909dec9d18bcdef3796c6fd27d17", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 123, "deletions": 111, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -1,12 +1,24 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (accepted, $feature:ident, $ver:expr, $issue:expr, None),\n+    )+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n-        pub const ACCEPTED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const ACCEPTED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Accepted,\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     }\n }\n@@ -16,11 +28,11 @@ declare_features! (\n     // feature-group-start: for testing purposes\n     // -------------------------------------------------------------------------\n \n-    // A temporary feature gate used to enable parser extensions needed\n-    // to bootstrap fix for #5723.\n+    /// A temporary feature gate used to enable parser extensions needed\n+    /// to bootstrap fix for #5723.\n     (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n-    // These are used to test this portion of the compiler,\n-    // they don't actually mean anything.\n+    /// These are used to test this portion of the compiler,\n+    /// they don't actually mean anything.\n     (accepted, test_accepted_feature, \"1.0.0\", None, None),\n \n     // -------------------------------------------------------------------------\n@@ -31,203 +43,203 @@ declare_features! (\n     // feature-group-start: accepted features\n     // -------------------------------------------------------------------------\n \n-    // Allows using associated `type`s in `trait`s.\n+    /// Allows using associated `type`s in `trait`s.\n     (accepted, associated_types, \"1.0.0\", None, None),\n-    // Allows using assigning a default type to type parameters in algebraic data type definitions.\n+    /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n     (accepted, default_type_params, \"1.0.0\", None, None),\n     // FIXME: explain `globs`.\n     (accepted, globs, \"1.0.0\", None, None),\n-    // Allows `macro_rules!` items.\n+    /// Allows `macro_rules!` items.\n     (accepted, macro_rules, \"1.0.0\", None, None),\n-    // Allows use of `&foo[a..b]` as a slicing syntax.\n+    /// Allows use of `&foo[a..b]` as a slicing syntax.\n     (accepted, slicing_syntax, \"1.0.0\", None, None),\n-    // Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n+    /// Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n     (accepted, struct_variant, \"1.0.0\", None, None),\n-    // Allows indexing tuples.\n+    /// Allows indexing tuples.\n     (accepted, tuple_indexing, \"1.0.0\", None, None),\n-    // Allows the use of `if let` expressions.\n+    /// Allows the use of `if let` expressions.\n     (accepted, if_let, \"1.0.0\", None, None),\n-    // Allows the use of `while let` expressions.\n+    /// Allows the use of `while let` expressions.\n     (accepted, while_let, \"1.0.0\", None, None),\n-    // Allows using `#![no_std]`.\n+    /// Allows using `#![no_std]`.\n     (accepted, no_std, \"1.6.0\", None, None),\n-    // Allows overloading augmented assignment operations like `a += b`.\n+    /// Allows overloading augmented assignment operations like `a += b`.\n     (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n-    // Allows empty structs and enum variants with braces.\n+    /// Allows empty structs and enum variants with braces.\n     (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n-    // Allows `#[deprecated]` attribute.\n+    /// Allows `#[deprecated]` attribute.\n     (accepted, deprecated, \"1.9.0\", Some(29935), None),\n-    // Allows macros to appear in the type position.\n+    /// Allows macros to appear in the type position.\n     (accepted, type_macros, \"1.13.0\", Some(27245), None),\n-    // Allows use of the postfix `?` operator in expressions.\n+    /// Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n-    // Allows `..` in tuple (struct) patterns.\n+    /// Allows `..` in tuple (struct) patterns.\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n-    // Allows some increased flexibility in the name resolution rules,\n-    // especially around globs and shadowing (RFC 1560).\n+    /// Allows some increased flexibility in the name resolution rules,\n+    /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n-    // Allows using `Self` and associated types in struct expressions and patterns.\n+    /// Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n-    // Allows elision of `'static` lifetimes in `static`s and `const`s.\n+    /// Allows elision of `'static` lifetimes in `static`s and `const`s.\n     (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n-    // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n+    /// Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n-    // Allows the definition recursive static items.\n+    /// Allows the definition recursive static items.\n     (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n-    // Allows `pub(restricted)` visibilities (RFC 1422).\n+    /// Allows `pub(restricted)` visibilities (RFC 1422).\n     (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n-    // Allows `#![windows_subsystem]`.\n+    /// Allows `#![windows_subsystem]`.\n     (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n-    // Allows `break {expr}` with a value inside `loop`s.\n+    /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n-    // Allows numeric fields in struct expressions and patterns.\n+    /// Allows numeric fields in struct expressions and patterns.\n     (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n-    // Allows coercing non capturing closures to function pointers.\n+    /// Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n-    // Allows attributes on struct literal fields.\n+    /// Allows attributes on struct literal fields.\n     (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n-    // Allows the definition of associated constants in `trait` or `impl` blocks.\n+    /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n-    // Allows usage of the `compile_error!` macro.\n+    /// Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n-    // Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n+    /// Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n     (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n-    // Allows `Drop` types in constants (RFC 1440).\n+    /// Allows `Drop` types in constants (RFC 1440).\n     (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n-    // Allows the sysV64 ABI to be specified on all platforms\n-    // instead of just the platforms on which it is the C ABI.\n+    /// Allows the sysV64 ABI to be specified on all platforms\n+    /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n-    // Allows `repr(align(16))` struct attribute (RFC 1358).\n+    /// Allows `repr(align(16))` struct attribute (RFC 1358).\n     (accepted, repr_align, \"1.25.0\", Some(33626), None),\n-    // Allows '|' at beginning of match arms (RFC 1925).\n+    /// Allows '|' at beginning of match arms (RFC 1925).\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n-    // Allows nested groups in `use` items (RFC 2128).\n+    /// Allows nested groups in `use` items (RFC 2128).\n     (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n-    // Allows indexing into constant arrays.\n+    /// Allows indexing into constant arrays.\n     (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n-    // Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n+    /// Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n     (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n-    // Allows `..=` in patterns (RFC 1192).\n+    /// Allows `..=` in patterns (RFC 1192).\n     (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n-    // Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n+    /// Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n     (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n-    // Allows implementing `Clone` for closures where possible (RFC 2132).\n+    /// Allows implementing `Clone` for closures where possible (RFC 2132).\n     (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n-    // Allows implementing `Copy` for closures where possible (RFC 2132).\n+    /// Allows implementing `Copy` for closures where possible (RFC 2132).\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n-    // Allows `impl Trait` in function arguments.\n+    /// Allows `impl Trait` in function arguments.\n     (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows `impl Trait` in function return types.\n+    /// Allows `impl Trait` in function return types.\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows using the `u128` and `i128` types.\n+    /// Allows using the `u128` and `i128` types.\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n-    // Allows default match binding modes (RFC 2005).\n+    /// Allows default match binding modes (RFC 2005).\n     (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n-    // Allows `'_` placeholder lifetimes.\n+    /// Allows `'_` placeholder lifetimes.\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n-    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n+    /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n     (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n-    // Allows `cfg(target_feature = \"...\")`.\n+    /// Allows `cfg(target_feature = \"...\")`.\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n-    // Allows `#[target_feature(...)]`.\n+    /// Allows `#[target_feature(...)]`.\n     (accepted, target_feature, \"1.27.0\", None, None),\n-    // Allows using `dyn Trait` as a syntax for trait objects.\n+    /// Allows using `dyn Trait` as a syntax for trait objects.\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n-    // Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n+    /// Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n-    // Allows use of the `:lifetime` macro fragment specifier.\n+    /// Allows use of the `:lifetime` macro fragment specifier.\n     (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n-    // Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n+    /// Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n     (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n-    // Allows the `#[global_allocator]` attribute.\n+    /// Allows the `#[global_allocator]` attribute.\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n-    // Allows `#[repr(transparent)]` attribute on newtype structs.\n+    /// Allows `#[repr(transparent)]` attribute on newtype structs.\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n-    // Allows procedural macros in `proc-macro` crates.\n+    /// Allows procedural macros in `proc-macro` crates.\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n-    // Allows `foo.rs` as an alternative to `foo/mod.rs`.\n+    /// Allows `foo.rs` as an alternative to `foo/mod.rs`.\n     (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n-    // Allows use of the `:vis` macro fragment specifier\n+    /// Allows use of the `:vis` macro fragment specifier\n     (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n-    // Allows importing and reexporting macros with `use`,\n-    // enables macro modularization in general.\n+    /// Allows importing and reexporting macros with `use`,\n+    /// enables macro modularization in general.\n     (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n-    // Allows keywords to be escaped for use as identifiers.\n+    /// Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n-    // Allows attributes scoped to tools.\n+    /// Allows attributes scoped to tools.\n     (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n-    // Allows multi-segment paths in attributes and derives.\n+    /// Allows multi-segment paths in attributes and derives.\n     (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n-    // Allows all literals in attribute lists and values of key-value pairs.\n+    /// Allows all literals in attribute lists and values of key-value pairs.\n     (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n-    // Allows inferring outlives requirements (RFC 2093).\n+    /// Allows inferring outlives requirements (RFC 2093).\n     (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n-    // Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n-    // This defines the behavior of panics.\n+    /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n+    /// This defines the behavior of panics.\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    // Allows `#[used]` to preserve symbols (see llvm.used).\n+    /// Allows `#[used]` to preserve symbols (see llvm.used).\n     (accepted, used, \"1.30.0\", Some(40289), None),\n-    // Allows `crate` in paths.\n+    /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n-    // Allows resolving absolute paths as paths from other crates.\n+    /// Allows resolving absolute paths as paths from other crates.\n     (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n-    // Allows access to crate names passed via `--extern` through prelude.\n+    /// Allows access to crate names passed via `--extern` through prelude.\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n-    // Allows parentheses in patterns.\n+    /// Allows parentheses in patterns.\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n+    /// Allows the definition of `const fn` functions.\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n-    // Allows scoped lints.\n+    /// Allows scoped lints.\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n-    // Allows lifetime elision in `impl` headers. For example:\n-    // + `impl<I:Iterator> Iterator for &mut Iterator`\n-    // + `impl Debug for Foo<'_>`\n+    /// Allows lifetime elision in `impl` headers. For example:\n+    /// + `impl<I:Iterator> Iterator for &mut Iterator`\n+    /// + `impl Debug for Foo<'_>`\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n+    /// Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n-    // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n+    /// Allows use of the `:literal` macro fragment specifier (RFC 1576).\n     (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n-    // Allows use of `?` as the Kleene \"at most one\" operator in macros.\n+    /// Allows use of `?` as the Kleene \"at most one\" operator in macros.\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Allows `Self` struct constructor (RFC 2302).\n+    /// Allows `Self` struct constructor (RFC 2302).\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n-    // Allows `Self` in type definitions (RFC 2300).\n+    /// Allows `Self` in type definitions (RFC 2300).\n     (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n-    // Allows `use x::y;` to search `x` in the current scope.\n+    /// Allows `use x::y;` to search `x` in the current scope.\n     (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n-    // Allows integer match exhaustiveness checking (RFC 2591).\n+    /// Allows integer match exhaustiveness checking (RFC 2591).\n     (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n-    // Allows `use path as _;` and `extern crate c as _;`.\n+    /// Allows `use path as _;` and `extern crate c as _;`.\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n-    // Allows `#[repr(packed(N))]` attribute on structs.\n+    /// Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n-    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n+    /// Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n     (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n-    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    /// Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n     (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n-    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n-    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n-    // at the same time as let bindings.\n+    /// Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    /// As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    /// at the same time as let bindings.\n     (accepted, const_let, \"1.33.0\", Some(48821), None),\n-    // Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n+    /// Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n-    // Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n+    /// Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n     (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n-    // Allows `cfg(target_vendor = \"...\")`.\n+    /// Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n-    // Allows `extern crate self as foo;`.\n-    // This puts local crate root into extern prelude under name `foo`.\n+    /// Allows `extern crate self as foo;`.\n+    /// This puts local crate root into extern prelude under name `foo`.\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n-    // Allows arbitrary delimited token streams in non-macro attributes.\n+    /// Allows arbitrary delimited token streams in non-macro attributes.\n     (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n-    // Allows paths to enum variants on type aliases including `Self`.\n+    /// Allows paths to enum variants on type aliases including `Self`.\n     (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n-    // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n-    // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n+    /// Allows using `#[repr(align(X))]` on enums with equivalent semantics\n+    /// to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n-    // Allows `const _: TYPE = VALUE`.\n+    /// Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n-    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "c947b09fdcb57822b6363976ff90bc6567202c7d", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 171, "deletions": 144, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -3,6 +3,7 @@\n use crate::edition::Edition;\n use crate::symbol::{Symbol, sym};\n use syntax_pos::Span;\n+use super::{State, Feature};\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -14,12 +15,24 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (active, $feature:ident, $ver:expr, $issue:expr, $edition:expr),\n+    )+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         pub const ACTIVE_FEATURES:\n-            &[(Symbol, &str, Option<u32>, Option<Edition>, fn(&mut Features, Span))] =\n-            &[$((sym::$feature, $ver, $issue, $edition, set!($feature))),+];\n+            &[Feature] =\n+            &[$(\n+                // (sym::$feature, $ver, $issue, $edition, set!($feature))\n+                Feature {\n+                    state: State::Active { set: set!($feature) },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: $edition,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -28,7 +41,10 @@ macro_rules! declare_features {\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n             /// `#![feature]` attrs for non-language (library) features\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n-            $(pub $feature: bool),+\n+            $(\n+                $(#[doc = $doc])*\n+                pub $feature: bool\n+            ),+\n         }\n \n         impl Features {\n@@ -49,6 +65,16 @@ macro_rules! declare_features {\n     };\n }\n \n+impl Feature {\n+    /// Set this feature in `Features`. Panics if called on a non-active feature.\n+    pub fn set(&self, features: &mut Features, span: Span) {\n+        match self.state {\n+            State::Active { set } => set(features, span),\n+            _ => panic!(\"Called `set` on feature `{}` which is not `active`\", self.name)\n+        }\n+    }\n+}\n+\n // If you change this, please modify `src/doc/unstable-book` as well.\n //\n // Don't ever remove anything from this list; move them to `removed.rs`.\n@@ -58,7 +84,7 @@ macro_rules! declare_features {\n // stable (active).\n //\n // Note that the features are grouped into internal/user-facing and then\n-// sorted by version inside those groups. This is inforced with tidy.\n+// sorted by version inside those groups. This is enforced with tidy.\n //\n // N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n // source, so take care when modifying it.\n@@ -70,127 +96,127 @@ declare_features! (\n \n     // no-tracking-issue-start\n \n-    // Allows using compiler's own crates.\n+    /// Allows using compiler's own crates.\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n \n-    // Allows using the `rust-intrinsic`'s \"ABI\".\n+    /// Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n \n-    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n+    /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n \n-    // Allows using the `#[stable]` and `#[unstable]` attributes.\n+    /// Allows using the `#[stable]` and `#[unstable]` attributes.\n     (active, staged_api, \"1.0.0\", None, None),\n \n-    // Allows using `#[allow_internal_unstable]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n+    /// Allows using `#[allow_internal_unstable]`. This is an\n+    /// attribute on `macro_rules!` and can't use the attribute handling\n+    /// below (it has to be checked before expansion possibly makes\n+    /// macros disappear).\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n \n-    // Allows using `#[allow_internal_unsafe]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n+    /// Allows using `#[allow_internal_unsafe]`. This is an\n+    /// attribute on `macro_rules!` and can't use the attribute handling\n+    /// below (it has to be checked before expansion possibly makes\n+    /// macros disappear).\n     (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n-    // Allows using the macros:\n-    // + `__diagnostic_used`\n-    // + `__register_diagnostic`\n-    // +`__build_diagnostic_array`\n+    /// Allows using the macros:\n+    /// + `__diagnostic_used`\n+    /// + `__register_diagnostic`\n+    /// +`__build_diagnostic_array`\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n \n-    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n-    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n+    /// Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n+    /// lets a function to be `const` when opted into with `#![feature(foo)]`.\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n \n-    // no-tracking-issue-end\n+    /// no-tracking-issue-end\n \n-    // Allows using `#[link_name=\"llvm.*\"]`.\n+    /// Allows using `#[link_name=\"llvm.*\"]`.\n     (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n \n-    // Allows using `rustc_*` attributes (RFC 572).\n+    /// Allows using `rustc_*` attributes (RFC 572).\n     (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n-    // Allows using `#[on_unimplemented(..)]` on traits.\n+    /// Allows using `#[on_unimplemented(..)]` on traits.\n     (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n \n-    // Allows using the `box $expr` syntax.\n+    /// Allows using the `box $expr` syntax.\n     (active, box_syntax, \"1.0.0\", Some(49733), None),\n \n-    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n+    /// Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n     (active, main, \"1.0.0\", Some(29634), None),\n \n-    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n+    /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n \n-    // Allows using the `#[fundamental]` attribute.\n+    /// Allows using the `#[fundamental]` attribute.\n     (active, fundamental, \"1.0.0\", Some(29635), None),\n \n-    // Allows using the `rust-call` ABI.\n+    /// Allows using the `rust-call` ABI.\n     (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    // Allows using the `#[linkage = \"..\"]` attribute.\n+    /// Allows using the `#[linkage = \"..\"]` attribute.\n     (active, linkage, \"1.0.0\", Some(29603), None),\n \n-    // Allows features specific to OIBIT (auto traits).\n+    /// Allows features specific to OIBIT (auto traits).\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n-    // Allows using `box` in patterns (RFC 469).\n+    /// Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n     // no-tracking-issue-start\n \n-    // Allows using `#[prelude_import]` on glob `use` items.\n+    /// Allows using `#[prelude_import]` on glob `use` items.\n     (active, prelude_import, \"1.2.0\", None, None),\n \n     // no-tracking-issue-end\n \n     // no-tracking-issue-start\n \n-    // Allows using `#[omit_gdb_pretty_printer_section]`.\n+    /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n-    // Allows using the `vectorcall` ABI.\n+    /// Allows using the `vectorcall` ABI.\n     (active, abi_vectorcall, \"1.7.0\", None, None),\n \n     // no-tracking-issue-end\n \n-    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n     (active, structural_match, \"1.8.0\", Some(31434), None),\n \n-    // Allows using the `may_dangle` attribute (RFC 1327).\n+    /// Allows using the `may_dangle` attribute (RFC 1327).\n     (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n-    // Allows using the `#![panic_runtime]` attribute.\n+    /// Allows using the `#![panic_runtime]` attribute.\n     (active, panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n     (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n     // no-tracking-issue-start\n \n-    // Allows identifying the `compiler_builtins` crate.\n+    /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n \n-    // Allows using the `unadjusted` ABI; perma-unstable.\n+    /// Allows using the `unadjusted` ABI; perma-unstable.\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    // Allows identifying crates that contain sanitizer runtimes.\n+    /// Allows identifying crates that contain sanitizer runtimes.\n     (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n-    // Used to identify crates that contain the profiler runtime.\n+    /// Used to identify crates that contain the profiler runtime.\n     (active, profiler_runtime, \"1.18.0\", None, None),\n \n-    // Allows using the `thiscall` ABI.\n+    /// Allows using the `thiscall` ABI.\n     (active, abi_thiscall, \"1.19.0\", None, None),\n \n-    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n     (active, allocator_internals, \"1.20.0\", None, None),\n \n     // no-tracking-issue-end\n \n-    // Added for testing E0705; perma-unstable.\n+    /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n     // -------------------------------------------------------------------------\n@@ -228,281 +254,282 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    // Allows using the `#[link_args]` attribute.\n+    /// Allows using the `#[link_args]` attribute.\n     (active, link_args, \"1.0.0\", Some(29596), None),\n \n-    // Allows defining identifiers beyond ASCII.\n+    /// Allows defining identifiers beyond ASCII.\n     (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n \n-    // Allows using `#[plugin_registrar]` on functions.\n+    /// Allows using `#[plugin_registrar]` on functions.\n     (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n \n-    // Allows using `#![plugin(myplugin)]`.\n+    /// Allows using `#![plugin(myplugin)]`.\n     (active, plugin, \"1.0.0\", Some(29597), None),\n \n-    // Allows using `#[thread_local]` on `static` items.\n+    /// Allows using `#[thread_local]` on `static` items.\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n \n-    // Allows the use of SIMD types in functions declared in `extern` blocks.\n+    /// Allows the use of SIMD types in functions declared in `extern` blocks.\n     (active, simd_ffi, \"1.0.0\", Some(27731), None),\n \n-    // Allows using custom attributes (RFC 572).\n+    /// Allows using custom attributes (RFC 572).\n     (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n-    // Allows using non lexical lifetimes (RFC 2094).\n+    /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n-    // Allows using slice patterns.\n+    /// Allows using slice patterns.\n     (active, slice_patterns, \"1.0.0\", Some(62254), None),\n \n-    // Allows the definition of `const` functions with some advanced features.\n+    /// Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(57563), None),\n \n-    // Allows associated type defaults.\n+    /// Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n-    // Allows `#![no_core]`.\n+    /// Allows `#![no_core]`.\n     (active, no_core, \"1.3.0\", Some(29639), None),\n \n-    // Allows default type parameters to influence type inference.\n+    /// Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n \n-    // Allows `repr(simd)` and importing the various simd intrinsics.\n+    /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // Allows `extern \"platform-intrinsic\" { ... }`.\n+    /// Allows `extern \"platform-intrinsic\" { ... }`.\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n-    // Allows `#[unwind(..)]`.\n-    //\n-    // Permits specifying whether a function should permit unwinding or abort on unwind.\n+    /// Allows `#[unwind(..)]`.\n+    ///\n+    /// Permits specifying whether a function should permit unwinding or abort on unwind.\n     (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n-    // Allows `#[no_debug]`.\n+    /// Allows `#[no_debug]`.\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // Allows attributes on expressions and non-item statements.\n+    /// Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n-    // Allows the use of type ascription in expressions.\n+    /// Allows the use of type ascription in expressions.\n     (active, type_ascription, \"1.6.0\", Some(23416), None),\n \n-    // Allows `cfg(target_thread_local)`.\n+    /// Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n-    // Allows specialization of implementations (RFC 1210).\n+    /// Allows specialization of implementations (RFC 1210).\n     (active, specialization, \"1.7.0\", Some(31844), None),\n \n-    // Allows using `#[naked]` on functions.\n+    /// Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n-    // Allows `cfg(target_has_atomic = \"...\")`.\n+    /// Allows `cfg(target_has_atomic = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n-    // Allows `X..Y` patterns.\n+    /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n-    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n-    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n-    // Allows untagged unions `union U { ... }`.\n+    /// Allows untagged unions `union U { ... }`.\n     (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n-    // Allows `#[link(..., cfg(..))]`.\n+    /// Allows `#[link(..., cfg(..))]`.\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    // Allows `extern \"ptx-*\" fn()`.\n+    /// Allows `extern \"ptx-*\" fn()`.\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n-    // Allows the `#[repr(i128)]` attribute for enums.\n+    /// Allows the `#[repr(i128)]` attribute for enums.\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n-    // Allows `#[link(kind=\"static-nobundle\"...)]`.\n+    /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n-    // Allows `extern \"msp430-interrupt\" fn()`.\n+    /// Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n-    // Allows declarative macros 2.0 (`macro`).\n+    /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n-    // Allows `extern \"x86-interrupt\" fn()`.\n+    /// Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows overlapping impls of marker traits.\n+    /// Allows overlapping impls of marker traits.\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n-    // Allows a test to fail without failing the whole suite.\n+    /// Allows a test to fail without failing the whole suite.\n     (active, allow_fail, \"1.19.0\", Some(46488), None),\n \n-    // Allows unsized tuple coercion.\n+    /// Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n-    // Allows defining generators.\n+    /// Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n \n-    // Allows `#[doc(cfg(...))]`.\n+    /// Allows `#[doc(cfg(...))]`.\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n \n-    // Allows `#[doc(masked)]`.\n+    /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n-    // Allows `#[doc(spotlight)]`.\n+    /// Allows `#[doc(spotlight)]`.\n     (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n \n-    // Allows `#[doc(include = \"some-file\")]`.\n+    /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n+    /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n \n-    // Allows defining `extern type`s.\n+    /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n-    // Allows trait methods with arbitrary self types.\n+    /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n-    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n+    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // Allows defining `trait X = A + B;` alias items.\n+    /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n-    // Allows infering `'static` outlives requirements (RFC 2093).\n+    /// Allows infering `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    // Allows macro invocations in `extern {}` blocks.\n+    /// Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n-    // Allows accessing fields of unions inside `const` functions.\n+    /// Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    // Allows casting raw pointers to `usize` during const eval.\n+    /// Allows casting raw pointers to `usize` during const eval.\n     (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n \n-    // Allows dereferencing raw pointers during const eval.\n+    /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n-    // Allows comparing raw pointers during const eval.\n+    /// Allows comparing raw pointers during const eval.\n     (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n-    // Allows `#[doc(alias = \"...\")]`.\n+    /// Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Allows inconsistent bounds in where clauses.\n+    /// Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n-    // Allows `'a: { break 'a; }`.\n+    /// Allows `'a: { break 'a; }`.\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Allows using `#[doc(keyword = \"...\")]`.\n+    /// Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n+    /// Allows reinterpretation of the bits of a value of one type as another\n+    /// type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n-    // Allows using `try {...}` expressions.\n+    /// Allows using `try {...}` expressions.\n     (active, try_blocks, \"1.29.0\", Some(31436), None),\n \n-    // Allows defining an `#[alloc_error_handler]`.\n+    /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n \n-    // Allows using the `amdgpu-kernel` ABI.\n+    /// Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    // Allows panicking during const eval (producing compile-time errors).\n+    /// Allows panicking during const eval (producing compile-time errors).\n     (active, const_panic, \"1.30.0\", Some(51999), None),\n \n-    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n     (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n \n-    // Allows macro invocations on modules expressions and statements and\n-    // procedural macros to expand to non-items.\n+    /// Allows macro invocations on modules expressions and statements and\n+    /// procedural macros to expand to non-items.\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n \n-    // Allows unsized rvalues at arguments and parameters.\n+    /// Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n-    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n+    /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n-    // Allows non-builtin attributes in inner attribute position.\n+    /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n \n-    // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n \n-    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n+    /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n-    // Allows relaxing the coherence rules such that\n-    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n+    /// Allows relaxing the coherence rules such that\n+    /// `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n-    // Allows using `#[ffi_returns_twice]` on foreign functions.\n+    /// Allows using `#[ffi_returns_twice]` on foreign functions.\n     (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n \n-    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n+    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (active, const_generics, \"1.34.0\", Some(44580), None),\n \n-    // Allows using `#[optimize(X)]`.\n+    /// Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n-    // Allows using C-variadics.\n+    /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n \n-    // Allows the user of associated type bounds.\n+    /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    // Attributes on formal function params.\n+    /// Attributes on formal function params.\n     (active, param_attrs, \"1.36.0\", Some(60406), None),\n \n-    // Allows calling constructor functions in `const fn`.\n+    /// Allows calling constructor functions in `const fn`.\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n \n-    // Allows `if/while p && let q = r && ...` chains.\n+    /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n \n-    // Allows #[repr(transparent)] on enums (RFC 2645).\n+    /// Allows #[repr(transparent)] on enums (RFC 2645).\n     (active, transparent_enums, \"1.37.0\", Some(60405), None),\n \n-    // Allows #[repr(transparent)] on unions (RFC 2645).\n+    /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n \n-    // Allows explicit discriminants on non-unit enum variants.\n+    /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n-    // Allows `impl Trait` with multiple unrelated lifetimes.\n+    /// Allows `impl Trait` with multiple unrelated lifetimes.\n     (active, member_constraints, \"1.37.0\", Some(61977), None),\n \n-    // Allows `async || body` closures.\n+    /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n-    // Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n+    /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n     (active, cfg_doctest, \"1.37.0\", Some(62210), None),\n \n-    // Allows `[x; N]` where `x` is a constant (RFC 2203).\n+    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n \n-    // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n+    /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n-    // Allows the use of or-patterns, e.g. `0 | 1`.\n+    /// Allows the use of or-patterns, e.g. `0 | 1`.\n     (active, or_patterns, \"1.38.0\", Some(54883), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "f3a9d135125aee6abe08c123b0753080edb57452", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -1,4 +1,4 @@\n-use super::active::{ACTIVE_FEATURES, Features};\n+use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -127,17 +127,16 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n-        let issue = info.2;\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n         // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(issue.is_some())\n-        issue\n+        // assert!(info.issue.is_some())\n+        info.issue\n     } else {\n         // search in Accepted, Removed, or Stable Removed features\n         let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.0 == feature);\n+            .find(|t| t.name == feature);\n         match found {\n-            Some(&(_, _, issue, _)) => issue,\n+            Some(&Feature { issue, .. }) => issue,\n             None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n         }\n     }\n@@ -733,13 +732,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         }\n     }\n \n-    for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-        if let Some(f_edition) = f_edition {\n-            if f_edition <= crate_edition {\n-                set(&mut features, DUMMY_SP);\n-                edition_enabled_features.insert(name, crate_edition);\n-            }\n-        }\n+    for feature in active_features_up_to(crate_edition) {\n+        feature.set(&mut features, DUMMY_SP);\n+        edition_enabled_features.insert(feature.name, crate_edition);\n     }\n \n     // Process the edition umbrella feature-gates first, to ensure\n@@ -761,20 +756,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n             let name = mi.name_or_empty();\n \n-            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n-                if *edition <= crate_edition {\n+            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n+            if let Some(edition) = edition {\n+                if edition <= crate_edition {\n                     continue;\n                 }\n \n-                for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-                    if let Some(f_edition) = f_edition {\n-                        if f_edition <= *edition {\n-                            // FIXME(Manishearth) there is currently no way to set\n-                            // lib features by edition\n-                            set(&mut features, DUMMY_SP);\n-                            edition_enabled_features.insert(name, *edition);\n-                        }\n-                    }\n+                for feature in active_features_up_to(edition) {\n+                    // FIXME(Manishearth) there is currently no way to set\n+                    // lib features by edition\n+                    feature.set(&mut features, DUMMY_SP);\n+                    edition_enabled_features.insert(feature.name, edition);\n                 }\n             }\n         }\n@@ -829,14 +821,18 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue;\n             }\n \n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            if let Some((.., reason)) = removed.or(stable_removed) {\n-                feature_removed(span_handler, mi.span(), *reason);\n-                continue;\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n+                if let FeatureState::Removed { reason }\n+                | FeatureState::Stabilized { reason } = state\n+                {\n+                    feature_removed(span_handler, mi.span(), *reason);\n+                    continue;\n+                }\n             }\n \n-            if let Some((_, since, ..)) = ACCEPTED_FEATURES.iter().find(|f| name == f.0) {\n+            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n                 let since = Some(Symbol::intern(since));\n                 features.declared_lang_features.push((name, mi.span(), since));\n                 continue;\n@@ -851,8 +847,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 }\n             }\n \n-            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                set(&mut features, mi.span());\n+            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n+                f.set(&mut features, mi.span());\n                 features.declared_lang_features.push((name, mi.span(), None));\n                 continue;\n             }\n@@ -864,6 +860,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     features\n }\n \n+fn active_features_up_to(edition: Edition) -> impl Iterator<Item=&'static Feature> {\n+    ACTIVE_FEATURES.iter()\n+    .filter(move |feature| {\n+        if let Some(feature_edition) = feature.edition {\n+            feature_edition <= edition\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,"}, {"sha": "1e41667ea411ec9f495459c440516a6820debcd8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -18,6 +18,39 @@ mod active;\n mod builtin_attrs;\n mod check;\n \n+use std::fmt;\n+use crate::{edition::Edition, symbol::Symbol};\n+use syntax_pos::Span;\n+\n+#[derive(Clone, Copy)]\n+pub enum State {\n+    Accepted,\n+    Active { set: fn(&mut Features, Span) },\n+    Removed { reason: Option<&'static str> },\n+    Stabilized { reason: Option<&'static str> },\n+}\n+\n+impl fmt::Debug for State {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            State::Accepted { .. } => write!(f, \"accepted\"),\n+            State::Active { .. } => write!(f, \"active\"),\n+            State::Removed { .. } => write!(f, \"removed\"),\n+            State::Stabilized { .. } => write!(f, \"stabilized\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Feature {\n+    state: State,\n+    name: Symbol,\n+    since: &'static str,\n+    issue: Option<u32>,\n+    edition: Option<Edition>,\n+    description: &'static str,\n+}\n+\n pub use active::{Features, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     AttributeGate, AttributeType, GatedCfg,"}, {"sha": "ad7d69b3e7372e61441e6c8cc5f159c064cfdc4d", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -1,19 +1,42 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n-    ($((removed, $feature: ident, $ver: expr, $issue: expr, None, $reason: expr),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (removed, $feature:ident, $ver:expr, $issue:expr, None, $reason:expr),\n+    )+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n-        pub const REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, $reason)),+\n+        pub const REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Removed { reason: $reason },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n \n-    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (stable_removed, $feature:ident, $ver:expr, $issue:expr, None),\n+    )+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n-        pub const STABLE_REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const STABLE_REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Stabilized { reason: None },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n }\n@@ -25,17 +48,17 @@ declare_features! (\n \n     (removed, import_shadowing, \"1.0.0\", None, None, None),\n     (removed, managed_boxes, \"1.0.0\", None, None, None),\n-    // Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n+    /// Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n     (removed, negate_unsigned, \"1.0.0\", Some(29645), None, None),\n     (removed, reflect, \"1.0.0\", Some(27749), None, None),\n-    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    /// A way to temporarily opt out of opt in copy. This will *never* be accepted.\n     (removed, opt_out_copy, \"1.0.0\", None, None, None),\n     (removed, quad_precision_float, \"1.0.0\", None, None, None),\n     (removed, struct_inherit, \"1.0.0\", None, None, None),\n     (removed, test_removed_feature, \"1.0.0\", None, None, None),\n     (removed, visible_private_types, \"1.0.0\", None, None, None),\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n-    // Allows using items which are missing stability attributes\n+    /// Allows using items which are missing stability attributes\n     (removed, unmarked_api, \"1.0.0\", None, None, None),\n     (removed, allocator, \"1.0.0\", None, None, None),\n     (removed, simd, \"1.0.0\", Some(27731), None,\n@@ -57,18 +80,18 @@ declare_features! (\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n     (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n      Some(\"subsumed by `#[panic_handler]`\")),\n-    // Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n+    /// Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n     (removed, custom_derive, \"1.32.0\", Some(29644), None,\n      Some(\"subsumed by `#[proc_macro_derive]`\")),\n-    // Paths of the form: `extern::foo::bar`\n+    /// Paths of the form: `extern::foo::bar`\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n-    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n+    /// Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n-    // Allows defining `existential type`s.\n+    /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n      Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n "}, {"sha": "50e9116c778eac9f2dfd2e8a5924bf2de91f857b", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b005a89daeee67c10ec05a0affee09472eb3f204/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=b005a89daeee67c10ec05a0affee09472eb3f204", "patch": "@@ -176,7 +176,10 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) -> CollectedFeatures {\n     CollectedFeatures { lib: lib_features, lang: features }\n }\n \n-fn format_features<'a>(features: &'a Features, family: &'a str) -> impl Iterator<Item = String> + 'a {\n+fn format_features<'a>(\n+    features: &'a Features,\n+    family: &'a str,\n+) -> impl Iterator<Item = String> + 'a {\n     features.iter().map(move |(name, feature)| {\n         format!(\"{:<32} {:<8} {:<12} {:<8}\",\n                 name,\n@@ -228,7 +231,8 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n }\n \n fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features {\n-    let contents = t!(fs::read_to_string(base.join(\"libsyntax/feature_gate\").join(file)));\n+    let path = base.join(\"libsyntax/feature_gate\").join(file);\n+    let contents = t!(fs::read_to_string(&path));\n \n     // We allow rustc-internal features to omit a tracking issue.\n     // To make tidy accept omitting a tracking issue, group the list of features\n@@ -259,8 +263,9 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 if in_feature_group {\n                     tidy_error!(\n                         bad,\n-                        // ignore-tidy-linelength\n-                        \"libsyntax/feature_gate.rs:{}: new feature group is started without ending the previous one\",\n+                        \"{}:{}: \\\n+                        new feature group is started without ending the previous one\",\n+                        path.display(),\n                         line_number,\n                     );\n                 }\n@@ -289,7 +294,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 Err(err) => {\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: failed to parse since: {} ({:?})\",\n+                        \"{}:{}: failed to parse since: {} ({:?})\",\n+                        path.display(),\n                         line_number,\n                         since_str,\n                         err,\n@@ -301,7 +307,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 if prev_since > since {\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: feature {} is not sorted by since\",\n+                        \"{}:{}: feature {} is not sorted by since\",\n+                        path.display(),\n                         line_number,\n                         name,\n                     );\n@@ -315,7 +322,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                     *bad = true;\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: no tracking issue for feature {}\",\n+                        \"{}:{}: no tracking issue for feature {}\",\n+                        path.display(),\n                         line_number,\n                         name,\n                     );"}]}