{"sha": "bb50614d8871f55ad4f0306cba289681a29c14ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNTA2MTRkODg3MWY1NWFkNGYwMzA2Y2JhMjg5NjgxYTI5YzE0ZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T10:52:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:20:46Z"}, "message": "Simplify help", "tree": {"sha": "04850608609f12b67ae5018ae00861e7a950ba2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04850608609f12b67ae5018ae00861e7a950ba2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb50614d8871f55ad4f0306cba289681a29c14ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb50614d8871f55ad4f0306cba289681a29c14ef", "html_url": "https://github.com/rust-lang/rust/commit/bb50614d8871f55ad4f0306cba289681a29c14ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb50614d8871f55ad4f0306cba289681a29c14ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "html_url": "https://github.com/rust-lang/rust/commit/a53c6f6feef231ecfb4e66d0e446e4148e816a2c"}], "stats": {"total": 323, "additions": 99, "deletions": 224}, "files": [{"sha": "b724ae454622497baf549092a9bc09c70cf24619", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 96, "deletions": 216, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=bb50614d8871f55ad4f0306cba289681a29c14ef", "patch": "@@ -18,36 +18,93 @@ pub(crate) struct Args {\n }\n \n pub(crate) enum Command {\n-    Parse {\n-        no_dump: bool,\n-    },\n+    Parse { no_dump: bool },\n     Symbols,\n-    Highlight {\n-        rainbow: bool,\n-    },\n+    Highlight { rainbow: bool },\n     AnalysisStats(AnalysisStatsCmd),\n     Bench(BenchCmd),\n-    Diagnostics {\n-        path: PathBuf,\n-        load_output_dirs: bool,\n-        with_proc_macro: bool,\n-        /// Include files which are not modules. In rust-analyzer\n-        /// this would include the parser test files.\n-        all: bool,\n-    },\n-    Ssr {\n-        rules: Vec<SsrRule>,\n-    },\n-    StructuredSearch {\n-        debug_snippet: Option<String>,\n-        patterns: Vec<SsrPattern>,\n-    },\n+    Diagnostics { path: PathBuf, load_output_dirs: bool, with_proc_macro: bool },\n+    Ssr { rules: Vec<SsrRule> },\n+    StructuredSearch { debug_snippet: Option<String>, patterns: Vec<SsrPattern> },\n     ProcMacro,\n     RunServer,\n     Version,\n     Help,\n }\n \n+const HELP: &str = \"\\\n+rust-analyzer\n+\n+USAGE:\n+    rust-analyzer [FLAGS] [COMMAND] [COMMAND_OPTIONS]\n+\n+FLAGS:\n+    --version         Print version\n+    -h, --help        Print this help\n+\n+    -v,  --verbose\n+    -vv, --spammy\n+    -q,  --quiet      Set verbosity\n+\n+    --log-file <PATH> Log to the specified filed instead of stderr\n+\n+ENVIRONMENTAL VARIABLES:\n+    RA_LOG            Set log filter in env_logger format\n+    RA_PROFILE        Enable hierarchical profiler\n+\n+COMMANDS:\n+\n+not specified         Launch LSP server\n+\n+parse < main.rs       Parse tree\n+    --no-dump         Suppress printing\n+\n+symbols < main.rs     Parse input an print the list of symbols\n+\n+highlight < main.rs   Highlight input as html\n+    --rainbow         Enable rainbow highlighting of identifiers\n+\n+analysis-stats <PATH> Batch typecheck project and print summary statistics\n+    <PATH>            Directory with Cargo.toml\n+    --randomize       Randomize order in which crates, modules, and items are processed\n+    --parallel        Run type inference in parallel\n+    --memory-usage    Collect memory usage statistics\n+    -o, --only <PATH> Only analyze items matching this path\n+    --with-deps       Also analyze all dependencies\n+    --load-output-dirs\n+                      Load OUT_DIR values by running `cargo check` before analysis\n+    --with-proc-macro Use proc-macro-srv for proc-macro expanding\n+\n+analysis-bench <PATH> Benchmark specific analysis operation\n+    <PATH>            Directory with Cargo.toml\n+    --highlight <PATH>\n+                      Compute syntax highlighting for this file\n+    --complete <PATH:LINE:COLUMN>\n+                      Compute completions at this location\n+    --goto-def <PATH:LINE:COLUMN>\n+                      Compute goto definition at this location\n+    --memory-usage    Collect memory usage statistics\n+    --load-output-dirs\n+                      Load OUT_DIR values by running `cargo check` before analysis\n+    --with-proc-macro Use proc-macro-srv for proc-macro expanding\n+\n+diagnostics <PATH>\n+    <PATH>            Directory with Cargo.toml\n+    --load-output-dirs\n+                      Load OUT_DIR values by running `cargo check` before analysis\n+    --with-proc-macro Use proc-macro-srv for proc-macro expanding\n+\n+ssr [RULE...]\n+    <RULE>            A structured search replace rule (`$a.foo($b) ==> bar($a, $b)`)\n+    --debug <snippet> Prints debug information for any nodes with source exactly\n+                      equal to <snippet>\n+\n+search [PATTERN..]\n+    <PATTERN>         A structured search replace pattern (`$a.foo($b)`)\n+    --debug <snippet> Prints debug information for any nodes with source exactly\n+                      equal to <snippet>\n+\";\n+\n impl Args {\n     pub(crate) fn parse() -> Result<Args> {\n         let mut matches = Arguments::from_env();\n@@ -75,108 +132,34 @@ impl Args {\n         };\n         let log_file = matches.opt_value_from_str(\"--log-file\")?;\n \n-        let help = Ok(Args { verbosity, log_file: None, command: Command::Help });\n+        if matches.contains([\"-h\", \"--help\"]) {\n+            eprintln!(\"{}\", HELP);\n+            return Ok(Args { verbosity, log_file: None, command: Command::Help });\n+        }\n+\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    print_subcommands();\n-                    return help;\n-                }\n                 matches.finish().or_else(handle_extra_flags)?;\n                 return Ok(Args { verbosity, log_file, command: Command::RunServer });\n             }\n         };\n         let command = match subcommand.as_str() {\n             \"parse\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer parse\n-\n-USAGE:\n-    rust-analyzer parse [FLAGS]\n-\n-FLAGS:\n-    -h, --help       Prints help information\n-        --no-dump\"\n-                    );\n-                    return help;\n-                }\n-\n                 let no_dump = matches.contains(\"--no-dump\");\n                 matches.finish().or_else(handle_extra_flags)?;\n                 Command::Parse { no_dump }\n             }\n             \"symbols\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer symbols\n-\n-USAGE:\n-    rust-analyzer highlight [FLAGS]\n-\n-FLAGS:\n-    -h, --help    Prints help inforamtion\"\n-                    );\n-                    return help;\n-                }\n-\n                 matches.finish().or_else(handle_extra_flags)?;\n-\n                 Command::Symbols\n             }\n             \"highlight\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer highlight\n-\n-USAGE:\n-    rust-analyzer highlight [FLAGS]\n-\n-FLAGS:\n-    -h, --help       Prints help information\n-    -r, --rainbow\"\n-                    );\n-                    return help;\n-                }\n-\n-                let rainbow = matches.contains([\"-r\", \"--rainbow\"]);\n+                let rainbow = matches.contains(\"--rainbow\");\n                 matches.finish().or_else(handle_extra_flags)?;\n                 Command::Highlight { rainbow }\n             }\n             \"analysis-stats\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer analysis-stats\n-\n-USAGE:\n-    rust-analyzer analysis-stats [FLAGS] [OPTIONS] [PATH]\n-\n-FLAGS:\n-    -o, --only              Only analyze items matching this path\n-    -h, --help              Prints help information\n-        --memory-usage      Collect memory usage statistics\n-        --randomize         Randomize order in which crates, modules, and items are processed\n-        --parallel          Run type inference in parallel\n-        --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n-        --with-proc-macro   Use ra-proc-macro-srv for proc-macro expanding\n-        --with-deps         Also analyze all dependencies\n-    -v, --verbose\n-    -q, --quiet\n-\n-OPTIONS:\n-    -o <ONLY>\n-\n-ARGS:\n-    <PATH>\"\n-                    );\n-                    return help;\n-                }\n-\n                 let randomize = matches.contains(\"--randomize\");\n                 let parallel = matches.contains(\"--parallel\");\n                 let memory_usage = matches.contains(\"--memory-usage\");\n@@ -204,34 +187,6 @@ ARGS:\n                 })\n             }\n             \"analysis-bench\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer analysis-bench\n-\n-USAGE:\n-    rust-analyzer analysis-bench [FLAGS] [OPTIONS]\n-\n-FLAGS:\n-    -h, --help          Prints help information\n-    --memory-usage      Collect memory usage statistics\n-    --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n-    --with-proc-macro   Use ra-proc-macro-srv for proc-macro expanding\n-    -v, --verbose\n-\n-OPTIONS:\n-    --project <PATH>                 Path to directory with Cargo.toml\n-    --complete <PATH:LINE:COLUMN>    Compute completions at this location\n-    --goto-def <PATH:LINE:COLUMN>    Compute goto definition at this location\n-    --highlight <PATH>               Hightlight this file\n-\n-ARGS:\n-    <PATH>    Project to analyse\"\n-                    );\n-                    return help;\n-                }\n-\n-                let path: PathBuf = matches.opt_value_from_str(\"--project\")?.unwrap_or_default();\n                 let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n                 let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n                 let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n@@ -249,6 +204,15 @@ ARGS:\n                 let memory_usage = matches.contains(\"--memory-usage\");\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 let with_proc_macro = matches.contains(\"--with-proc-macro\");\n+\n+                let path = {\n+                    let mut trailing = matches.free()?;\n+                    if trailing.len() != 1 {\n+                        bail!(\"Invalid flags\");\n+                    }\n+                    trailing.pop().unwrap().into()\n+                };\n+\n                 Command::Bench(BenchCmd {\n                     memory_usage,\n                     path,\n@@ -258,28 +222,8 @@ ARGS:\n                 })\n             }\n             \"diagnostics\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer diagnostics\n-\n-USAGE:\n-    rust-analyzer diagnostics [FLAGS] [PATH]\n-\n-FLAGS:\n-    -h, --help              Prints help information\n-        --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n-        --all               Include all files rather than only modules\n-\n-ARGS:\n-    <PATH>\"\n-                    );\n-                    return help;\n-                }\n-\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 let with_proc_macro = matches.contains(\"--with-proc-macro\");\n-                let all = matches.contains(\"--all\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n@@ -288,57 +232,17 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Diagnostics { path, load_output_dirs, with_proc_macro, all }\n+                Command::Diagnostics { path, load_output_dirs, with_proc_macro }\n             }\n             \"proc-macro\" => Command::ProcMacro,\n             \"ssr\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer ssr\n-\n-USAGE:\n-    rust-analyzer ssr [FLAGS] [RULE...]\n-\n-EXAMPLE:\n-    rust-analyzer ssr '$a.foo($b) ==> bar($a, $b)'\n-\n-FLAGS:\n-    --debug <snippet>   Prints debug information for any nodes with source exactly equal to <snippet>\n-    -h, --help          Prints help information\n-\n-ARGS:\n-    <RULE>              A structured search replace rule\"\n-                    );\n-                    return help;\n-                }\n                 let mut rules = Vec::new();\n                 while let Some(rule) = matches.free_from_str()? {\n                     rules.push(rule);\n                 }\n                 Command::Ssr { rules }\n             }\n             \"search\" => {\n-                if matches.contains([\"-h\", \"--help\"]) {\n-                    eprintln!(\n-                        \"\\\n-rust-analyzer search\n-\n-USAGE:\n-    rust-analyzer search [FLAGS] [PATTERN...]\n-\n-EXAMPLE:\n-    rust-analyzer search '$a.foo($b)'\n-\n-FLAGS:\n-    --debug <snippet>   Prints debug information for any nodes with source exactly equal to <snippet>\n-    -h, --help          Prints help information\n-\n-ARGS:\n-    <PATTERN>           A structured search pattern\"\n-                    );\n-                    return help;\n-                }\n                 let debug_snippet = matches.opt_value_from_str(\"--debug\")?;\n                 let mut patterns = Vec::new();\n                 while let Some(rule) = matches.free_from_str()? {\n@@ -347,38 +251,14 @@ ARGS:\n                 Command::StructuredSearch { patterns, debug_snippet }\n             }\n             _ => {\n-                print_subcommands();\n-                return help;\n+                eprintln!(\"{}\", HELP);\n+                return Ok(Args { verbosity, log_file: None, command: Command::Help });\n             }\n         };\n         Ok(Args { verbosity, log_file, command })\n     }\n }\n \n-fn print_subcommands() {\n-    eprintln!(\n-        \"\\\n-rust-analyzer\n-\n-USAGE:\n-    rust-analyzer <SUBCOMMAND>\n-\n-FLAGS:\n-    -h, --help        Prints help information\n-\n-SUBCOMMANDS:\n-    analysis-bench\n-    analysis-stats\n-    highlight\n-    diagnostics\n-    proc-macro\n-    parse\n-    search\n-    ssr\n-    symbols\"\n-    )\n-}\n-\n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n     if let pico_args::Error::UnusedArgsLeft(flags) = e {\n         let mut invalid_flags = String::new();"}, {"sha": "ba4402ade3013c925ca40c8cd6f4f12578520c4c", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=bb50614d8871f55ad4f0306cba289681a29c14ef", "patch": "@@ -38,8 +38,8 @@ fn try_main() -> Result<()> {\n         args::Command::Highlight { rainbow } => cli::highlight(rainbow)?,\n         args::Command::AnalysisStats(cmd) => cmd.run(args.verbosity)?,\n         args::Command::Bench(cmd) => cmd.run(args.verbosity)?,\n-        args::Command::Diagnostics { path, load_output_dirs, with_proc_macro, all } => {\n-            cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro, all)?\n+        args::Command::Diagnostics { path, load_output_dirs, with_proc_macro } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro)?\n         }\n         args::Command::Ssr { rules } => {\n             cli::apply_ssr_rules(rules)?;"}, {"sha": "f3b6c900e6b65f3b120c2582d37c573460046f92", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb50614d8871f55ad4f0306cba289681a29c14ef/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=bb50614d8871f55ad4f0306cba289681a29c14ef", "patch": "@@ -12,12 +12,7 @@ use ide::{DiagnosticsConfig, Severity};\n \n use crate::cli::{load_cargo::load_cargo, Result};\n \n-pub fn diagnostics(\n-    path: &Path,\n-    load_output_dirs: bool,\n-    with_proc_macro: bool,\n-    _all: bool,\n-) -> Result<()> {\n+pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -> Result<()> {\n     let (host, _vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();"}]}