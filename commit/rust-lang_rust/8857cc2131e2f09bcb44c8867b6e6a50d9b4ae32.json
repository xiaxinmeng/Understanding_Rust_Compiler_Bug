{"sha": "8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32", "node_id": "C_kwDOAAsO6NoAKDg4NTdjYzIxMzFlMmYwOWJjYjQ0Yzg4NjdiNmU2YTUwZDliNGFlMzI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-28T06:44:45Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-28T06:44:45Z"}, "message": "`inline(always)` for `lt`/`le`/`ge`/`gt` on integers and floats\n\nI happened to notice one of these not getting inlined as part of `Range::next` in <https://rust.godbolt.org/z/4WKWWxj1G>\n```rust\n    bb1: {\n        StorageLive(_5);\n        _6 = &mut _4;\n        StorageLive(_21);\n        StorageLive(_14);\n        StorageLive(_15);\n        _15 = &((*_6).0: usize);\n        StorageLive(_16);\n        _16 = &((*_6).1: usize);\n        _14 = <usize as PartialOrd>::lt(move _15, move _16) -> bb7;\n    }\n```\n\nSo since a call for something this trivial is never the right choice, `#[inline(always)]` seems appropriate.", "tree": {"sha": "5f363702227dc1546c482f24d99241f7aad6da66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f363702227dc1546c482f24d99241f7aad6da66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32", "html_url": "https://github.com/rust-lang/rust/commit/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c42cb4ef0544fbfaa500216e53382d6b079c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c42cb4ef0544fbfaa500216e53382d6b079c001", "html_url": "https://github.com/rust-lang/rust/commit/1c42cb4ef0544fbfaa500216e53382d6b079c001"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "48b127716f50df112c455c97de7cdd068a2613de", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=8857cc2131e2f09bcb44c8867b6e6a50d9b4ae32", "patch": "@@ -1321,13 +1321,13 @@ mod impls {\n                         (true, true) => Some(Equal),\n                     }\n                 }\n-                #[inline]\n+                #[inline(always)]\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n             }\n         )*)\n@@ -1359,13 +1359,13 @@ mod impls {\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n                     Some(self.cmp(other))\n                 }\n-                #[inline]\n+                #[inline(always)]\n                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n-                #[inline]\n+                #[inline(always)]\n                 fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n             }\n "}]}