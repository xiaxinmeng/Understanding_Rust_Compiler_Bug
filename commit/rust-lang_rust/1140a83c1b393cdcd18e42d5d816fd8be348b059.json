{"sha": "1140a83c1b393cdcd18e42d5d816fd8be348b059", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDBhODNjMWIzOTNjZGNkMThlNDJkNWQ4MTZmZDhiZTM0OGIwNTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-10T17:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-10T17:37:21Z"}, "message": "Merge #1806\n\n1806: refactor(args): Switch to pico-args r=matklad a=Geobert\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/1768\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>", "tree": {"sha": "e2cd3ed0feabb81b4a51b1150542c5d7da920679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cd3ed0feabb81b4a51b1150542c5d7da920679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1140a83c1b393cdcd18e42d5d816fd8be348b059", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdd99RCRBK7hj4Ov3rIwAAdHIIADqs6IjJnp+2pTksj+rtPxPS\nmheLs4rxupn8VjUllTG76otLzjyff5vrnRLU2K0p84fct9JvmBlgQuCZAsujZuVw\nKbaAj1yNd1P/Db6g9cS/NZrtKdJAx2FUBdjYu59QdSP1094nnnl1xCuceuIDbKOr\n+qpKkiYP+cV1ewPCW27v81fx+iT/gWK68BvHKb5KVKEqUtsRsW2Mok5OwTpg6lqp\nYUT70S+blWUvQNs9QB0Ds75/N0cfstjkr0PKBiBiZsI6WA3wVlJ2G9MV7pi1SR7x\nZ0tJyy29pCLT+RJSUjlO4P85ZyOrJsfEHDIRH9rrgNIvEe35pQw333fL6JBz+C0=\n=fwDC\n-----END PGP SIGNATURE-----\n", "payload": "tree e2cd3ed0feabb81b4a51b1150542c5d7da920679\nparent 753a569c79c5a4a1dd7624028cc85fa9590da53d\nparent aa894ace1fc4600dbc94bccb05532154ee2288d8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568137041 +0000\ncommitter GitHub <noreply@github.com> 1568137041 +0000\n\nMerge #1806\n\n1806: refactor(args): Switch to pico-args r=matklad a=Geobert\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/1768\n\nCo-authored-by: Geobert Quach <geobert@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1140a83c1b393cdcd18e42d5d816fd8be348b059", "html_url": "https://github.com/rust-lang/rust/commit/1140a83c1b393cdcd18e42d5d816fd8be348b059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1140a83c1b393cdcd18e42d5d816fd8be348b059/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753a569c79c5a4a1dd7624028cc85fa9590da53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/753a569c79c5a4a1dd7624028cc85fa9590da53d", "html_url": "https://github.com/rust-lang/rust/commit/753a569c79c5a4a1dd7624028cc85fa9590da53d"}, {"sha": "aa894ace1fc4600dbc94bccb05532154ee2288d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa894ace1fc4600dbc94bccb05532154ee2288d8", "html_url": "https://github.com/rust-lang/rust/commit/aa894ace1fc4600dbc94bccb05532154ee2288d8"}], "stats": {"total": 411, "additions": 297, "deletions": 114}, "files": [{"sha": "4e08a0bd100fddeb370ec209c0dcc8f11cb3b635", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -184,16 +184,6 @@ dependencies = [\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"clap\"\n-version = \"2.33.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"clicolors-control\"\n version = \"1.0.1\"\n@@ -837,6 +827,11 @@ dependencies = [\n  \"ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pico-args\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.5\"\n@@ -930,9 +925,9 @@ dependencies = [\n name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.14.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indicatif 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_batch 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_hir 0.1.0\",\n@@ -1112,8 +1107,8 @@ dependencies = [\n name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1594,14 +1589,6 @@ name = \"text_unit\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"textwrap\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -1796,7 +1783,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git)\" = \"<none>\"\n \"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git)\" = \"<none>\"\n \"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n-\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum console 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b147390a412132d75d10dd3b7b175a69cf5fd95032f7503c7091b8831ba10242\"\n@@ -1874,6 +1860,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum paste-impl 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4214c9e912ef61bf42b81ba9a47e8aad1b2ffaf739ab162bf96d1e011f54e6c5\"\n \"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \"checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f\"\n+\"checksum pico-args 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fce25154205cf4360b456fd7d48994afe20663b77e3bd3d0a353a2fccf7f22c\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n \"checksum proc-macro-hack 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e688f31d92ffd7c1ddc57a1b4e6d773c0f2a14ee437a4b0a4f5a69c80eb221c8\"\n \"checksum proc-macro2 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"175a40b9cf564ce9bf050654633dbf339978706b8ead1a907bb970b63185dd95\"\n@@ -1931,7 +1918,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e08bbcb7a3adbda0eb23431206b653bdad3d8dea311e72d36bf2215e27a42579\"\n-\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865\"\n \"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\""}, {"sha": "d42ac3ad4ff0613eb33175673f5f5cb6404cdd54", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -6,7 +6,7 @@ authors = [\"rust-analyzer developers\"]\n publish = false\n \n [dependencies]\n-clap = { version = \"2.32.0\", default-features = false }\n+pico-args = \"0.2.0\"\n flexi_logger = \"0.14.0\"\n indicatif = \"0.11.0\"\n "}, {"sha": "5171578f0011e1736f28074e14aa5a56a9fe234b", "filename": "crates/ra_cli/src/help.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fhelp.rs?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -0,0 +1,72 @@\n+pub const GLOBAL_HELP: &str = \"ra-cli\r\n+\r\n+USAGE:\r\n+    ra_cli <SUBCOMMAND>\r\n+\r\n+FLAGS:\r\n+    -h, --help        Prints help information\r\n+\r\n+SUBCOMMANDS:\r\n+    analysis-bench\r\n+    analysis-stats\r\n+    highlight\r\n+    parse\r\n+    symbols\";\r\n+\r\n+pub const ANALYSIS_BENCH_HELP: &str = \"ra_cli-analysis-bench\r\n+\r\n+USAGE:\r\n+    ra_cli analysis-bench [FLAGS] [OPTIONS] [PATH]\r\n+\r\n+FLAGS:\r\n+    -h, --help        Prints help information\r\n+    -v, --verbose\r\n+    \r\n+OPTIONS:\r\n+    --complete <PATH:LINE:COLUMN>    Compute completions at this location\r\n+    --highlight <PATH>               Hightlight this file\r\n+    \r\n+ARGS:\r\n+    <PATH>    Project to analyse\";\r\n+\r\n+pub const ANALYSIS_STATS_HELP: &str = \"ra-cli-analysis-stats\r\n+\r\n+USAGE:\r\n+    ra_cli analysis-stats [FLAGS] [OPTIONS] [PATH]\r\n+    \r\n+FLAGS:\r\n+    -h, --help            Prints help information\r\n+        --memory-usage\r\n+    -v, --verbose\r\n+    \r\n+OPTIONS:\r\n+    -o <ONLY>\r\n+    \r\n+ARGS:\r\n+    <PATH>\";\r\n+\r\n+pub const HIGHLIGHT_HELP: &str = \"ra-cli-highlight\r\n+    \r\n+USAGE:\r\n+    ra_cli highlight [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help       Prints help information\r\n+    -r, --rainbow\";\r\n+\r\n+pub const SYMBOLS_HELP: &str = \"ra-cli-symbols\r\n+    \r\n+USAGE:\r\n+    ra_cli highlight [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help    Prints help inforamtion\";\r\n+\r\n+pub const PARSE_HELP: &str = \"ra-cli-parse\r\n+    \r\n+USAGE:\r\n+    ra_cli parse [FLAGS]\r\n+    \r\n+FLAGS:\r\n+    -h, --help       Prints help inforamtion\r\n+        --no-dump\";\r"}, {"sha": "e6334cf569b7dc579c031e10894fcc5459abccaf", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 85, "deletions": 58, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -1,10 +1,11 @@\n mod analysis_stats;\n mod analysis_bench;\n+mod help;\n \n-use std::{error::Error, io::Read};\n+use std::{error::Error, fmt::Write, io::Read};\n \n-use clap::{App, Arg, SubCommand};\n use flexi_logger::Logger;\n+use pico_args::Arguments;\n use ra_ide_api::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n@@ -13,77 +14,89 @@ type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n fn main() -> Result<()> {\n     Logger::with_env().start()?;\n-    let matches = App::new(\"ra-cli\")\n-        .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n-        .subcommand(SubCommand::with_name(\"symbols\"))\n-        .subcommand(\n-            SubCommand::with_name(\"highlight\")\n-                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\")),\n-        )\n-        .subcommand(\n-            SubCommand::with_name(\"analysis-stats\")\n-                .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n-                .arg(Arg::with_name(\"memory-usage\").long(\"memory-usage\"))\n-                .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true))\n-                .arg(Arg::with_name(\"path\")),\n-        )\n-        .subcommand(\n-            SubCommand::with_name(\"analysis-bench\")\n-                .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n-                .arg(\n-                    Arg::with_name(\"highlight\")\n-                        .long(\"highlight\")\n-                        .takes_value(true)\n-                        .conflicts_with(\"complete\")\n-                        .value_name(\"PATH\")\n-                        .help(\"highlight this file\"),\n-                )\n-                .arg(\n-                    Arg::with_name(\"complete\")\n-                        .long(\"complete\")\n-                        .takes_value(true)\n-                        .conflicts_with(\"highlight\")\n-                        .value_name(\"PATH:LINE:COLUMN\")\n-                        .help(\"compute completions at this location\"),\n-                )\n-                .arg(Arg::with_name(\"path\").value_name(\"PATH\").help(\"project to analyze\")),\n-        )\n-        .get_matches();\n-    match matches.subcommand() {\n-        (\"parse\", Some(matches)) => {\n+\n+    let subcommand = match std::env::args_os().nth(1) {\n+        None => {\n+            eprintln!(\"{}\", help::GLOBAL_HELP);\n+            return Ok(());\n+        }\n+        Some(s) => s,\n+    };\n+    let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n+\n+    match &*subcommand.to_string_lossy() {\n+        \"parse\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::PARSE_HELP);\n+                return Ok(());\n+            }\n+            let no_dump = matches.contains(\"--no-dump\");\n+            matches.finish().or_else(handle_extra_flags)?;\n+\n             let _p = profile(\"parsing\");\n             let file = file()?;\n-            if !matches.is_present(\"no-dump\") {\n+            if !no_dump {\n                 println!(\"{:#?}\", file.syntax());\n             }\n             std::mem::forget(file);\n         }\n-        (\"symbols\", _) => {\n+        \"symbols\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::SYMBOLS_HELP);\n+                return Ok(());\n+            }\n+            matches.finish().or_else(handle_extra_flags)?;\n             let file = file()?;\n             for s in file_structure(&file) {\n                 println!(\"{:?}\", s);\n             }\n         }\n-        (\"highlight\", Some(matches)) => {\n+        \"highlight\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::HIGHLIGHT_HELP);\n+                return Ok(());\n+            }\n+            let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n+            matches.finish().or_else(handle_extra_flags)?;\n             let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id, matches.is_present(\"rainbow\")).unwrap();\n+            let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n             println!(\"{}\", html);\n         }\n-        (\"analysis-stats\", Some(matches)) => {\n-            let verbose = matches.is_present(\"verbose\");\n-            let memory_usage = matches.is_present(\"memory-usage\");\n-            let path = matches.value_of(\"path\").unwrap_or(\"\");\n-            let only = matches.value_of(\"only\");\n-            analysis_stats::run(verbose, memory_usage, path.as_ref(), only)?;\n+        \"analysis-stats\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::ANALYSIS_STATS_HELP);\n+                return Ok(());\n+            }\n+            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+            let memory_usage = matches.contains(\"--memory-usage\");\n+            let path: String = matches.value_from_str(\"--path\")?.unwrap_or_default();\n+            let only = matches.value_from_str([\"-o\", \"--only\"])?.map(|v: String| v.to_owned());\n+            matches.finish().or_else(handle_extra_flags)?;\n+            analysis_stats::run(\n+                verbose,\n+                memory_usage,\n+                path.as_ref(),\n+                only.as_ref().map(String::as_ref),\n+            )?;\n         }\n-        (\"analysis-bench\", Some(matches)) => {\n-            let verbose = matches.is_present(\"verbose\");\n-            let path = matches.value_of(\"path\").unwrap_or(\"\");\n-            let op = if let Some(path) = matches.value_of(\"highlight\") {\n+        \"analysis-bench\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::ANALYSIS_BENCH_HELP);\n+                return Ok(());\n+            }\n+            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n+            let path: String = matches.value_from_str(\"--path\")?.unwrap_or_default();\n+            let highlight_path = matches.value_from_str(\"--highlight\")?;\n+            let complete_path = matches.value_from_str(\"--complete\")?;\n+            if highlight_path.is_some() && complete_path.is_some() {\n+                panic!(\"either --highlight or --complete must be set, not both\")\n+            }\n+            let op = if let Some(path) = highlight_path {\n+                let path: String = path;\n                 analysis_bench::Op::Highlight { path: path.into() }\n-            } else if let Some(path_line_col) = matches.value_of(\"complete\") {\n-                let (path_line, column) = rsplit_at_char(path_line_col, ':')?;\n+            } else if let Some(path_line_col) = complete_path {\n+                let path_line_col: String = path_line_col;\n+                let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n                 let (path, line) = rsplit_at_char(path_line, ':')?;\n                 analysis_bench::Op::Complete {\n                     path: path.into(),\n@@ -93,13 +106,27 @@ fn main() -> Result<()> {\n             } else {\n                 panic!(\"either --highlight or --complete must be set\")\n             };\n+            matches.finish().or_else(handle_extra_flags)?;\n             analysis_bench::run(verbose, path.as_ref(), op)?;\n         }\n-        _ => unreachable!(),\n+        _ => eprintln!(\"{}\", help::GLOBAL_HELP),\n     }\n     Ok(())\n }\n \n+fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n+    if let pico_args::Error::UnusedArgsLeft(flags) = e {\n+        let mut invalid_flags = String::new();\n+        for flag in flags {\n+            write!(&mut invalid_flags, \"{}, \", flag)?;\n+        }\n+        let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n+        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+    } else {\n+        Err(e.to_string().into())\n+    }\n+}\n+\n fn file() -> Result<SourceFile> {\n     let text = read_stdin()?;\n     Ok(SourceFile::parse(&text).tree())"}, {"sha": "848ca408d0e5725eb40172f6959df4f46b79ebec", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -8,7 +8,7 @@ publish = false\n [dependencies]\n walkdir = \"2.1.3\"\n itertools = \"0.8.0\"\n-clap = { version = \"2.32.0\", default-features = false }\n+pico-args = \"0.2.0\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.1\"\n ron = \"0.5.1\""}, {"sha": "6dde6c2d22fb621dd404f0e7bacf4045eb4b8739", "filename": "crates/ra_tools/src/help.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2Fsrc%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fhelp.rs?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -0,0 +1,45 @@\n+pub const GLOBAL_HELP: &str = \"tasks\r\n+\r\n+USAGE:\r\n+    ra_tools <SUBCOMMAND>\r\n+\r\n+FLAGS:\r\n+    -h, --help       Prints help information\r\n+\r\n+SUBCOMMANDS:\r\n+    format\r\n+    format-hook\r\n+    fuzz-tests\r\n+    gen-syntax\r\n+    gen-tests\r\n+    install-ra\r\n+    lint\";\r\n+\r\n+pub const INSTALL_RA_HELP: &str = \"ra_tools-install-ra\r\n+\r\n+USAGE:\r\n+    ra_tools.exe install-ra [FLAGS]\r\n+\r\n+FLAGS:\r\n+        --client-code\r\n+    -h, --help           Prints help information\r\n+        --jemalloc\r\n+        --server\";\r\n+\r\n+pub fn print_no_param_subcommand_help(subcommand: &str) {\r\n+    eprintln!(\r\n+        \"ra_tools-{}\r\n+\r\n+USAGE:\r\n+    ra_tools {}\r\n+\r\n+FLAGS:\r\n+    -h, --help       Prints help information\",\r\n+        subcommand, subcommand\r\n+    );\r\n+}\r\n+\r\n+pub const INSTALL_RA_CONFLICT: &str =\r\n+    \"error: The argument `--server` cannot be used with `--client-code`\r\n+                    \r\n+For more information try --help\";\r"}, {"sha": "f96f1875fa7ffddbad9b93eed9f08aaa0322d92c", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1140a83c1b393cdcd18e42d5d816fd8be348b059/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=1140a83c1b393cdcd18e42d5d816fd8be348b059", "patch": "@@ -1,5 +1,8 @@\n-use clap::{App, Arg, SubCommand};\n+mod help;\n+\n+use core::fmt::Write;\n use core::str;\n+use pico_args::Arguments;\n use ra_tools::{\n     gen_tests, generate_boilerplate, install_format_hook, run, run_clippy, run_fuzzer, run_rustfmt,\n     Cmd, Overwrite, Result,\n@@ -20,45 +23,95 @@ struct ServerOpt {\n }\n \n fn main() -> Result<()> {\n-    let matches = App::new(\"tasks\")\n-        .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(SubCommand::with_name(\"gen-syntax\"))\n-        .subcommand(SubCommand::with_name(\"gen-tests\"))\n-        .subcommand(\n-            SubCommand::with_name(\"install-ra\")\n-                .arg(Arg::with_name(\"server\").long(\"--server\"))\n-                .arg(Arg::with_name(\"jemalloc\").long(\"jemalloc\"))\n-                .arg(Arg::with_name(\"client-code\").long(\"client-code\").conflicts_with(\"server\")),\n-        )\n-        .alias(\"install-code\")\n-        .subcommand(SubCommand::with_name(\"format\"))\n-        .subcommand(SubCommand::with_name(\"format-hook\"))\n-        .subcommand(SubCommand::with_name(\"fuzz-tests\"))\n-        .subcommand(SubCommand::with_name(\"lint\"))\n-        .get_matches();\n-    match matches.subcommand() {\n-        (\"install-ra\", Some(matches)) => {\n+    let subcommand = match std::env::args_os().nth(1) {\n+        None => {\n+            eprintln!(\"{}\", help::GLOBAL_HELP);\n+            return Ok(());\n+        }\n+        Some(s) => s,\n+    };\n+    let mut matches = Arguments::from_vec(std::env::args_os().skip(2).collect());\n+    let subcommand = &*subcommand.to_string_lossy();\n+    match subcommand {\n+        \"install-ra\" | \"install-code\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                eprintln!(\"{}\", help::INSTALL_RA_HELP);\n+                return Ok(());\n+            }\n+            let server = matches.contains(\"--server\");\n+            let client_code = matches.contains(\"--client-code\");\n+            if server && client_code {\n+                eprintln!(\"{}\", help::INSTALL_RA_CONFLICT);\n+                return Ok(());\n+            }\n+            let jemalloc = matches.contains(\"--jemalloc\");\n+            matches.finish().or_else(handle_extra_flags)?;\n             let opts = InstallOpt {\n-                client: if matches.is_present(\"server\") { None } else { Some(ClientOpt::VsCode) },\n-                server: if matches.is_present(\"client-code\") {\n-                    None\n-                } else {\n-                    Some(ServerOpt { jemalloc: matches.is_present(\"jemalloc\") })\n-                },\n+                client: if server { None } else { Some(ClientOpt::VsCode) },\n+                server: if client_code { None } else { Some(ServerOpt { jemalloc: jemalloc }) },\n             };\n             install(opts)?\n         }\n-        (\"gen-tests\", _) => gen_tests(Overwrite)?,\n-        (\"gen-syntax\", _) => generate_boilerplate(Overwrite)?,\n-        (\"format\", _) => run_rustfmt(Overwrite)?,\n-        (\"format-hook\", _) => install_format_hook()?,\n-        (\"lint\", _) => run_clippy()?,\n-        (\"fuzz-tests\", _) => run_fuzzer()?,\n-        _ => unreachable!(),\n+        \"gen-tests\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            gen_tests(Overwrite)?\n+        }\n+        \"gen-syntax\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            generate_boilerplate(Overwrite)?\n+        }\n+        \"format\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            run_rustfmt(Overwrite)?\n+        }\n+        \"format-hook\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            install_format_hook()?\n+        }\n+        \"lint\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            run_clippy()?\n+        }\n+        \"fuzz-tests\" => {\n+            if matches.contains([\"-h\", \"--help\"]) {\n+                help::print_no_param_subcommand_help(&subcommand);\n+                return Ok(());\n+            }\n+            run_fuzzer()?\n+        }\n+        _ => eprintln!(\"{}\", help::GLOBAL_HELP),\n     }\n     Ok(())\n }\n \n+fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n+    if let pico_args::Error::UnusedArgsLeft(flags) = e {\n+        let mut invalid_flags = String::new();\n+        for flag in flags {\n+            write!(&mut invalid_flags, \"{}, \", flag)?;\n+        }\n+        let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n+        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+    } else {\n+        Err(e.to_string().into())\n+    }\n+}\n+\n fn install(opts: InstallOpt) -> Result<()> {\n     if cfg!(target_os = \"macos\") {\n         fix_path_for_mac()?"}]}