{"sha": "ee2286149a5f0b148334841d4f067dc819dcca3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMjI4NjE0OWE1ZjBiMTQ4MzM0ODQxZDRmMDY3ZGM4MTlkY2NhM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T20:55:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T20:55:01Z"}, "message": "Auto merge of #44932 - cuviper:unsized-ptr-is_null, r=alexcrichton\n\nRemove `T: Sized` on pointer `as_ref()` and `as_mut()`\n\n`NonZero::is_zero()` was already casting all pointers to thin `*mut u8` to check for null.  The same test on unsized fat pointers can also be used with `as_ref()` and `as_mut()` to get fat references.\n\n(This PR formerly changed `is_null()` too, but checking just the data pointer is not obviously correct for trait objects, especially if `*const self` sorts of methods are ever allowed.)", "tree": {"sha": "5b4b0668d459e417c61355d519ff3675b6ec80a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4b0668d459e417c61355d519ff3675b6ec80a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2286149a5f0b148334841d4f067dc819dcca3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2286149a5f0b148334841d4f067dc819dcca3b", "html_url": "https://github.com/rust-lang/rust/commit/ee2286149a5f0b148334841d4f067dc819dcca3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2286149a5f0b148334841d4f067dc819dcca3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6417e9b72de63666fd92caf1a6b96a778b60ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6417e9b72de63666fd92caf1a6b96a778b60ed", "html_url": "https://github.com/rust-lang/rust/commit/7f6417e9b72de63666fd92caf1a6b96a778b60ed"}, {"sha": "604f049cd5060129cf14f7bd340d442811345ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/604f049cd5060129cf14f7bd340d442811345ea8", "html_url": "https://github.com/rust-lang/rust/commit/604f049cd5060129cf14f7bd340d442811345ea8"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "126558e3025d53103362ab521a3dbf77bb4f6968", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee2286149a5f0b148334841d4f067dc819dcca3b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2286149a5f0b148334841d4f067dc819dcca3b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ee2286149a5f0b148334841d4f067dc819dcca3b", "patch": "@@ -517,8 +517,10 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n-        if self.is_null() {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+        // Check for null via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        if (self as *const u8).is_null() {\n             None\n         } else {\n             Some(&*self)\n@@ -1148,8 +1150,10 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n-        if self.is_null() {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+        // Check for null via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        if (self as *const u8).is_null() {\n             None\n         } else {\n             Some(&*self)\n@@ -1272,8 +1276,10 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> where T: Sized {\n-        if self.is_null() {\n+    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n+        // Check for null via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        if (self as *mut u8).is_null() {\n             None\n         } else {\n             Some(&mut *self)"}, {"sha": "e93e9be0cd50b378846ffe60fe6a99f3d13050cd", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ee2286149a5f0b148334841d4f067dc819dcca3b/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2286149a5f0b148334841d4f067dc819dcca3b/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=ee2286149a5f0b148334841d4f067dc819dcca3b", "patch": "@@ -85,6 +85,39 @@ fn test_as_ref() {\n             let p = &u as *const isize;\n             assert_eq!(p.as_ref().unwrap(), &2);\n         }\n+\n+        // Pointers to unsized types -- slices\n+        let s: &mut [u8] = &mut [1, 2, 3];\n+        let cs: *const [u8] = s;\n+        assert_eq!(cs.as_ref(), Some(&*s));\n+\n+        let ms: *mut [u8] = s;\n+        assert_eq!(ms.as_ref(), Some(&*s));\n+\n+        let cz: *const [u8] = &[];\n+        assert_eq!(cz.as_ref(), Some(&[][..]));\n+\n+        let mz: *mut [u8] = &mut [];\n+        assert_eq!(mz.as_ref(), Some(&[][..]));\n+\n+        let ncs: *const [u8] = null::<[u8; 3]>();\n+        assert_eq!(ncs.as_ref(), None);\n+\n+        let nms: *mut [u8] = null_mut::<[u8; 3]>();\n+        assert_eq!(nms.as_ref(), None);\n+\n+        // Pointers to unsized types -- trait objects\n+        let ci: *const ToString = &3;\n+        assert!(ci.as_ref().is_some());\n+\n+        let mi: *mut ToString = &mut 3;\n+        assert!(mi.as_ref().is_some());\n+\n+        let nci: *const ToString = null::<isize>();\n+        assert!(nci.as_ref().is_none());\n+\n+        let nmi: *mut ToString = null_mut::<isize>();\n+        assert!(nmi.as_ref().is_none());\n     }\n }\n \n@@ -103,6 +136,24 @@ fn test_as_mut() {\n             let p = &mut u as *mut isize;\n             assert!(p.as_mut().unwrap() == &mut 2);\n         }\n+\n+        // Pointers to unsized types -- slices\n+        let s: &mut [u8] = &mut [1, 2, 3];\n+        let ms: *mut [u8] = s;\n+        assert_eq!(ms.as_mut(), Some(s));\n+\n+        let mz: *mut [u8] = &mut [];\n+        assert_eq!(mz.as_mut(), Some(&mut [][..]));\n+\n+        let nms: *mut [u8] = null_mut::<[u8; 3]>();\n+        assert_eq!(nms.as_mut(), None);\n+\n+        // Pointers to unsized types -- trait objects\n+        let mi: *mut ToString = &mut 3;\n+        assert!(mi.as_mut().is_some());\n+\n+        let nmi: *mut ToString = null_mut::<isize>();\n+        assert!(nmi.as_mut().is_none());\n     }\n }\n "}]}