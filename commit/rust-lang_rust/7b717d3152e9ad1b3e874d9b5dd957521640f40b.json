{"sha": "7b717d3152e9ad1b3e874d9b5dd957521640f40b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzE3ZDMxNTJlOWFkMWIzZTg3NGQ5YjVkZDk1NzUyMTY0MGY0MGI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-08-17T16:35:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-08-17T16:35:25Z"}, "message": "fallout", "tree": {"sha": "ea81fc2d2c7c93f9999b644cd966adf9e0e8b91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea81fc2d2c7c93f9999b644cd966adf9e0e8b91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b717d3152e9ad1b3e874d9b5dd957521640f40b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXtJJNAAoJEFbW7qD8Z6xGDAEQALIhZZTuiDwRMCMoFHDk6lNn\n6yfqwk3rOsVtdlR6s4z8aAAfJY9fPseX4L7ti841Q4NwdMZfxnME/oEiarqBPhBC\nPFmKcf/TBlWGS+z3GB8idI6I4xQlJq/eLanBuGsEbtFvgDNFq3tprsPYW13Zzs6s\nuI10eCdlZJhpTvZ/kIiBl0EZRHqZMnoNYJZfMx3OAY0nOr8G3bN9wt3+YFDgpzN2\n1vnMXDT8oHctDiu2eg1B1z2CaPOv5hl6EaU4AzG9gvHtH487+IaplXGjjZrima00\nugyzZ230In00o7lNJe/CnKBmvAj02PbIk2hpshS3pJsNY4W2HEeO8ZOkuudEHjOy\nfJ439FHqDpXrqF3HzjznLPEWAPLv+VDxvyPwGyCz4BnfBUtX2ChJMDW2kqgsZcXp\nNRnLaSu/yUor04FKITPzKKS3z5cBwcrRyb2gmuai+7O/2irFUHd6Sgc5iv2Dl185\nyuScQCwpVuYGAZskxM8l3C//kEI4LD5Em4lPyiRPl6GZZjYaV1nwg5eIbUhSYJCy\nVSL8agFv2ZqSZmIa0jyjopePoQqvRXM4I9fr5G46+akk2oTyyp6ERdhsrAM6/2B0\n7X5yFpltNPSo4U/znEZACE6OoB524T+mHxYZWFdx9OKY+nKfB3WsACJHep8Se2sB\n3AT9MAmegO+MR9QMNwT4\n=OQRQ\n-----END PGP SIGNATURE-----", "payload": "tree ea81fc2d2c7c93f9999b644cd966adf9e0e8b91d\nparent 59c31d319ae376dcb1c6757e99eb059c27c7d00b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1471451725 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1471451725 +0200\n\nfallout"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b717d3152e9ad1b3e874d9b5dd957521640f40b", "html_url": "https://github.com/rust-lang/rust/commit/7b717d3152e9ad1b3e874d9b5dd957521640f40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b717d3152e9ad1b3e874d9b5dd957521640f40b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c31d319ae376dcb1c6757e99eb059c27c7d00b", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c31d319ae376dcb1c6757e99eb059c27c7d00b", "html_url": "https://github.com/rust-lang/rust/commit/59c31d319ae376dcb1c6757e99eb059c27c7d00b"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "9e83a96fee689e085ef0f66519d4cea6197d22c5", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -9,20 +9,18 @@ use rustc_plugin::Registry;\n \n extern crate clippy_lints;\n \n-pub use clippy_lints::*;\n-\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     if reg.sess.lint_store.borrow_state() == std::cell::BorrowState::Unused && reg.sess.lint_store.borrow().get_lint_groups().iter().any(|&(s, _, _)| s == \"clippy\") {\n         reg.sess.struct_warn(\"running cargo clippy on a crate that also imports the clippy plugin\").emit();\n     } else {\n-        register_plugins(reg);\n+        clippy_lints::register_plugins(reg);\n     }\n }\n \n // only exists to let the dogfood integration test works.\n // Don't run clippy as an executable directly\n-#[allow(dead_code, print_stdout)]\n+#[allow(dead_code)]\n fn main() {\n     panic!(\"Please use the cargo-clippy executable\");\n }"}, {"sha": "b7efbde6596a517a22a30032ff6ff0457daa654d", "filename": "tests/camel_case.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcamel_case.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -1,7 +1,6 @@\n-#[allow(plugin_as_library)]\n-extern crate clippy;\n+extern crate clippy_lints;\n \n-use clippy::utils::{camel_case_from, camel_case_until};\n+use clippy_lints::utils::{camel_case_from, camel_case_until};\n \n #[test]\n fn from_full() {"}, {"sha": "deadd499192d892f3ffa9b86718ee0cf76bcd21c", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -6,7 +6,7 @@ use std::env::{set_var, var};\n fn run_mode(dir: &'static str, mode: &'static str) {\n     let mut config = compiletest::default_config();\n \n-    let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n+    let cfg_mode = mode.parse().expect(\"Invalid mode\");\n     config.target_rustcflags = Some(\"-L target/debug/ -L target/debug/deps\".to_owned());\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n         let s: String = name.to_owned();"}, {"sha": "47ea4d874b67422c3f2bd8fb2a861ec25aa192dd", "filename": "tests/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -1,13 +1,12 @@\n-#![allow(plugin_as_library)]\n #![feature(rustc_private)]\n \n-extern crate clippy;\n+extern crate clippy_lints;\n extern crate rustc;\n extern crate rustc_const_eval;\n extern crate rustc_const_math;\n extern crate syntax;\n \n-use clippy::consts::{constant_simple, Constant, FloatWidth};\n+use clippy_lints::consts::{constant_simple, Constant, FloatWidth};\n use rustc_const_math::ConstInt;\n use rustc::hir::*;\n use syntax::ast::{LitIntType, LitKind, StrStyle};"}, {"sha": "1d9d3dedd5dd1a5f3d51bbb59ae7ba27cf571a0a", "filename": "tests/matches.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -1,16 +1,15 @@\n-#![allow(plugin_as_library)]\n #![feature(rustc_private)]\n \n-extern crate clippy;\n+extern crate clippy_lints;\n extern crate syntax;\n \n #[test]\n fn test_overlapping() {\n-    use clippy::matches::overlapping;\n+    use clippy_lints::matches::overlapping;\n     use syntax::codemap::DUMMY_SP;\n \n     let sp = |s, e| {\n-        clippy::matches::SpannedRange {\n+        clippy_lints::matches::SpannedRange {\n             span: DUMMY_SP,\n             node: (s, e),\n         }"}, {"sha": "90f1c76fb80e83a6fe51c1dc330ac18dcff64241", "filename": "tests/trim_multiline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Ftrim_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b717d3152e9ad1b3e874d9b5dd957521640f40b/tests%2Ftrim_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftrim_multiline.rs?ref=7b717d3152e9ad1b3e874d9b5dd957521640f40b", "patch": "@@ -1,8 +1,7 @@\n /// test the multiline-trim function\n-#[allow(plugin_as_library)]\n-extern crate clippy;\n+extern crate clippy_lints;\n \n-use clippy::utils::trim_multiline;\n+use clippy_lints::utils::trim_multiline;\n \n #[test]\n fn test_single_line() {"}]}