{"sha": "d837407339d1eedd3320fa9c25962c3f20b15811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4Mzc0MDczMzlkMWVlZGQzMzIwZmE5YzI1OTYyYzNmMjBiMTU4MTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-25T02:39:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-25T02:39:40Z"}, "message": "Rollup merge of #80319 - jyn514:async-lifetimes, r=tmandry\n\nFix elided lifetimes shown as `'_` on async functions\n\nCloses https://github.com/rust-lang/rust/issues/63037.\n\nr? `@tmandry` on the implementation, `@Darksonn` on the test cases.", "tree": {"sha": "df7fc5fbdbda4ec8c4e3c688e07c62789b3fae53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7fc5fbdbda4ec8c4e3c688e07c62789b3fae53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d837407339d1eedd3320fa9c25962c3f20b15811", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5VDtCRBK7hj4Ov3rIwAAdHIIAFFpuL84Wo2bjqa/FeEFMXhf\nS/KYmZin/slkcIFnCPNgh+P0yTGUBdrDn7nFV96N6e7b4tee7G0gsXgUmWzoji0m\nlLkozzJLFk/eLoPu2D9be0rIrn2jgHVnufePC6zDlsUK4KI0MiatJO1ixfkn7QhZ\nk6My5K8sb9QHl8Cx85+voXAZNVjlfXVDxbTf/fMuWydB92YeA9UfaPvWbeXWAXjY\nY5Ux9ltsEaHoFaCJ73OMB+a5gOONwhzUq8HIhvWQ0N4HJ29JaEmiCVera1P141mB\n/l3cPLaRKY3asHJG+bjwx83WNfPVq0XCcfLKAhT8/DTF0kKmFHhUQT/J5qX/7h8=\n=HDPL\n-----END PGP SIGNATURE-----\n", "payload": "tree df7fc5fbdbda4ec8c4e3c688e07c62789b3fae53\nparent c24fcad7be32fc14850740f24872ce8c6fbb1c68\nparent ceb66ad464287d9f2232d7b81857c514a22236c0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608863980 +0100\ncommitter GitHub <noreply@github.com> 1608863980 +0100\n\nRollup merge of #80319 - jyn514:async-lifetimes, r=tmandry\n\nFix elided lifetimes shown as `'_` on async functions\n\nCloses https://github.com/rust-lang/rust/issues/63037.\n\nr? `@tmandry` on the implementation, `@Darksonn` on the test cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d837407339d1eedd3320fa9c25962c3f20b15811", "html_url": "https://github.com/rust-lang/rust/commit/d837407339d1eedd3320fa9c25962c3f20b15811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d837407339d1eedd3320fa9c25962c3f20b15811/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24fcad7be32fc14850740f24872ce8c6fbb1c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24fcad7be32fc14850740f24872ce8c6fbb1c68", "html_url": "https://github.com/rust-lang/rust/commit/c24fcad7be32fc14850740f24872ce8c6fbb1c68"}, {"sha": "ceb66ad464287d9f2232d7b81857c514a22236c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb66ad464287d9f2232d7b81857c514a22236c0", "html_url": "https://github.com/rust-lang/rust/commit/ceb66ad464287d9f2232d7b81857c514a22236c0"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "398b6043015243fd60d781868f1217ca59f034a4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d837407339d1eedd3320fa9c25962c3f20b15811/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837407339d1eedd3320fa9c25962c3f20b15811/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d837407339d1eedd3320fa9c25962c3f20b15811", "patch": "@@ -638,6 +638,18 @@ impl Clean<Generics> for hir::Generics<'_> {\n                 _ => false,\n             }\n         }\n+        /// This can happen for `async fn`, e.g. `async fn f<'_>(&'_ self)`.\n+        ///\n+        /// See [`lifetime_to_generic_param`] in [`rustc_ast_lowering`] for more information.\n+        ///\n+        /// [`lifetime_to_generic_param`]: rustc_ast_lowering::LoweringContext::lifetime_to_generic_param\n+        fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n+            match param.kind {\n+                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided } => true,\n+                _ => false,\n+            }\n+        }\n+\n         let impl_trait_params = self\n             .params\n             .iter()\n@@ -656,7 +668,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n             .collect::<Vec<_>>();\n \n         let mut params = Vec::with_capacity(self.params.len());\n-        for p in self.params.iter().filter(|p| !is_impl_trait(p)) {\n+        for p in self.params.iter().filter(|p| !is_impl_trait(p) && !is_elided_lifetime(p)) {\n             let p = p.clean(cx);\n             params.push(p);\n         }\n@@ -1437,7 +1449,16 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Never => Never,\n             TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n-                let lifetime = if l.is_elided() { None } else { Some(l.clean(cx)) };\n+                // There are two times a `Fresh` lifetime can be created:\n+                // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n+                // 2. For `&x` as a parameter to an `async fn`. This corresponds to `elided_ref_lifetime in `rustc_ast_lowering`.\n+                //    See #59286 for more information.\n+                // Ideally we would only hide the `'_` for case 2., but I don't know a way to distinguish it.\n+                // Turning `fn f(&'_ self)` into `fn f(&self)` isn't the worst thing in the world, though;\n+                // there's no case where it could cause the function to fail to compile.\n+                let elided =\n+                    l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n+                let lifetime = if elided { None } else { Some(l.clean(cx)) };\n                 BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),"}, {"sha": "f0fd9703915e80b8491cdf3a92cdb60d9fe66594", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d837407339d1eedd3320fa9c25962c3f20b15811/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837407339d1eedd3320fa9c25962c3f20b15811/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=d837407339d1eedd3320fa9c25962c3f20b15811", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // edition:2018\n #![feature(min_const_generics)]\n \n@@ -48,7 +49,50 @@ impl Foo {\n     pub async fn mut_self(mut self, mut first: usize) {}\n }\n \n+pub trait Pattern<'a> {}\n+\n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n+\n+// test that elided lifetimes are properly elided and not displayed as `'_`\n+// regression test for #63037\n+// @has async_fn/fn.elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n+pub async fn elided(foo: &str) -> &str {}\n+// This should really be shown as written, but for implementation reasons it's difficult.\n+// See `impl Clean for TyKind::Rptr`.\n+// @has async_fn/fn.user_elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+pub async fn user_elided(foo: &'_ str) -> &str {}\n+// @has async_fn/fn.static_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n+// @has async_fn/fn.lifetime_for_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n+// @has async_fn/fn.elided_in_input_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n+\n+struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n+\n+impl Foo {\n+    // @has async_fn/struct.Foo.html\n+    // @has - '//h4[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n+    // taken from `tokio` as an example of a method that was particularly bad before\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn mut_self(&mut self)\"\n+    pub async fn mut_self(&mut self) {}\n+}\n+\n+// test named lifetimes, just in case\n+// @has async_fn/fn.named.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n+// @has async_fn/fn.named_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}]}