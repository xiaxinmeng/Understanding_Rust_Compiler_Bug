{"sha": "a5299fb6889d6eabba2b4b1a7d7e9decd49182ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Mjk5ZmI2ODg5ZDZlYWJiYTJiNGIxYTdkN2U5ZGVjZDQ5MTgyZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-16T09:16:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-16T11:16:09Z"}, "message": "add some comments regarding the two major quirks of our memory model", "tree": {"sha": "e1ac1177e7555519b7bc366d7588c9e7febb3291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ac1177e7555519b7bc366d7588c9e7febb3291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee", "html_url": "https://github.com/rust-lang/rust/commit/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c720ce6121dd878b25f8e6a645a07563e5a4b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c720ce6121dd878b25f8e6a645a07563e5a4b01", "html_url": "https://github.com/rust-lang/rust/commit/7c720ce6121dd878b25f8e6a645a07563e5a4b01"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "bbf792edcded9ee27cade96ed363776996ec9cb3", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5299fb6889d6eabba2b4b1a7d7e9decd49182ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=a5299fb6889d6eabba2b4b1a7d7e9decd49182ee", "patch": "@@ -285,6 +285,9 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// A raw pointer variant of `get_bytes_mut` that avoids invalidating existing aliases into this memory.\n     pub fn get_bytes_mut_ptr(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> *mut [u8] {\n         self.mark_init(range, true);\n+        // This also clears relocations that just overlap with the written range. So writing to some\n+        // byte can de-initialize its neighbors! See\n+        // <https://github.com/rust-lang/rust/issues/87184> for details.\n         self.clear_relocations(cx, range);\n \n         assert!(range.end().bytes_usize() <= self.bytes.len()); // need to do our own bounds-check\n@@ -327,7 +330,11 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         range: AllocRange,\n     ) -> AllocResult<ScalarMaybeUninit<Tag>> {\n-        // `get_bytes_unchecked` tests relocation edges.\n+        // `get_bytes_with_uninit_and_ptr` tests relocation edges.\n+        // We deliberately error when loading data that partially has provenance, or partially\n+        // initialized data (that's the check below), into a scalar. The LLVM semantics of this are\n+        // unclear so we are conservative. See <https://github.com/rust-lang/rust/issues/69488> for\n+        // further discussion.\n         let bytes = self.get_bytes_with_uninit_and_ptr(cx, range)?;\n         // Uninit check happens *after* we established that the alignment is correct.\n         // We must not return `Ok()` for unaligned pointers!"}]}