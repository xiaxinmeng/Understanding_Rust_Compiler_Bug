{"sha": "067bf2ac1340a9362585d0d1690b9da24195582c", "node_id": "C_kwDOAAsO6NoAKDA2N2JmMmFjMTM0MGE5MzYyNTg1ZDBkMTY5MGI5ZGEyNDE5NTU4MmM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-14T13:17:04Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-16T13:55:05Z"}, "message": "Move provider fields back to rustc_query_impl", "tree": {"sha": "425d4e06333d0c6d5a0200c3ff94b375b7d0209b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/425d4e06333d0c6d5a0200c3ff94b375b7d0209b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/067bf2ac1340a9362585d0d1690b9da24195582c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/067bf2ac1340a9362585d0d1690b9da24195582c", "html_url": "https://github.com/rust-lang/rust/commit/067bf2ac1340a9362585d0d1690b9da24195582c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/067bf2ac1340a9362585d0d1690b9da24195582c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265e1e968d918f4dc9e62dfb712c600af136f92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/265e1e968d918f4dc9e62dfb712c600af136f92f", "html_url": "https://github.com/rust-lang/rust/commit/265e1e968d918f4dc9e62dfb712c600af136f92f"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "6a94d19001e11d68b6ef718672bec3f9a9b4e281", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -676,7 +676,9 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n-    let queries = queries.get_or_init(|| TcxQueries::new(query_result_on_disk_cache));\n+    let queries = queries.get_or_init(|| {\n+        TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n+    });\n \n     sess.time(\"setup_global_ctxt\", || {\n         gcx_cell.get_or_init(move || {\n@@ -688,8 +690,6 @@ pub fn create_global_ctxt<'tcx>(\n                 untracked,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n-                local_providers,\n-                extern_providers,\n                 queries.as_dyn(),\n                 rustc_query_impl::query_callbacks(arena),\n             )"}, {"sha": "99ad604b2418915695f1dbfb16dd24db1c0f2a1d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -18,8 +18,6 @@ use crate::mir::{\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n-use crate::ty::query::ExternProviders;\n-use crate::ty::query::Providers;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, DefIdTree, FloatTy, FloatVar,\n@@ -641,8 +639,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         untracked: Untracked,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n-        local_providers: Providers,\n-        extern_providers: ExternProviders,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n     ) -> GlobalCtxt<'tcx> {\n@@ -668,7 +664,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             untracked,\n             on_disk_cache,\n             queries,\n-            query_system: query::QuerySystem::new(local_providers, extern_providers),\n+            query_system: Default::default(),\n             query_kinds,\n             ty_rcache: Default::default(),\n             pred_rcache: Default::default(),"}, {"sha": "ffde39b4db101e98e8e3a25dbb27e2848cffdd74", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -71,24 +71,12 @@ use std::sync::Arc;\n pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n \n+#[derive(Default)]\n pub struct QuerySystem<'tcx> {\n-    pub local_providers: Box<Providers>,\n-    pub extern_providers: Box<ExternProviders>,\n     pub arenas: QueryArenas<'tcx>,\n     pub caches: QueryCaches<'tcx>,\n }\n \n-impl<'tcx> QuerySystem<'tcx> {\n-    pub fn new(local_providers: Providers, extern_providers: ExternProviders) -> Self {\n-        QuerySystem {\n-            local_providers: Box::new(local_providers),\n-            extern_providers: Box::new(extern_providers),\n-            arenas: Default::default(),\n-            caches: Default::default(),\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone)]\n pub struct TyCtxtAt<'tcx> {\n     pub tcx: TyCtxt<'tcx>,"}, {"sha": "d7708a3bc3f42a59147006b024fbc0b7f56f5bb1", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -21,10 +21,10 @@ use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct};\n use rustc_middle::query::Key;\n-use rustc_middle::ty::query::QueryEngine;\n use rustc_middle::ty::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n };\n+use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n "}, {"sha": "532c1b52f53567173d8d0af819d9bbf4a2edf14a", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -278,13 +278,13 @@ macro_rules! hash_result {\n \n macro_rules! get_provider {\n     ([][$tcx:expr, $name:ident, $key:expr]) => {{\n-        $tcx.query_system.local_providers.$name\n+        $tcx.queries.local_providers.$name\n     }};\n     ([(separate_provide_extern) $($rest:tt)*][$tcx:expr, $name:ident, $key:expr]) => {{\n         if $key.query_crate_is_local() {\n-            $tcx.query_system.local_providers.$name\n+            $tcx.queries.local_providers.$name\n         } else {\n-            $tcx.query_system.extern_providers.$name\n+            $tcx.queries.extern_providers.$name\n         }\n     }};\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n@@ -500,12 +500,11 @@ macro_rules! define_queries {\n             }\n \n             #[inline]\n-            // key is only sometimes used\n             #[allow(unused_variables)]\n-            fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n+            fn compute(qcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 query_provided_to_value::$name(\n-                    tcx,\n-                    get_provider!([$($modifiers)*][tcx, $name, key])(tcx, key)\n+                    qcx.tcx,\n+                    get_provider!([$($modifiers)*][qcx, $name, key])(qcx.tcx, key)\n                 )\n             }\n \n@@ -664,12 +663,18 @@ macro_rules! define_queries {\n     }\n }\n \n-use crate::OnDiskCache;\n+use crate::{ExternProviders, OnDiskCache, Providers};\n \n impl<'tcx> Queries<'tcx> {\n-    pub fn new(on_disk_cache: Option<OnDiskCache<'tcx>>) -> Self {\n+    pub fn new(\n+        local_providers: Providers,\n+        extern_providers: ExternProviders,\n+        on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    ) -> Self {\n         use crate::query_structs;\n         Queries {\n+            local_providers: Box::new(local_providers),\n+            extern_providers: Box::new(extern_providers),\n             query_structs: make_dep_kind_array!(query_structs).to_vec(),\n             on_disk_cache,\n             jobs: AtomicU64::new(1),\n@@ -683,6 +688,8 @@ macro_rules! define_queries_struct {\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         #[derive(Default)]\n         pub struct Queries<'tcx> {\n+            local_providers: Box<Providers>,\n+            extern_providers: Box<ExternProviders>,\n             query_structs: Vec<$crate::plumbing::QueryStruct<'tcx>>,\n             pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n             jobs: AtomicU64,"}, {"sha": "56247e827a2da25ae3ef8abcca70b54bb72f3bbc", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -39,7 +39,7 @@ pub trait QueryConfig<Qcx: QueryContext> {\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn execute_query(tcx: Qcx::DepContext, k: Self::Key) -> Self::Value;\n \n-    fn compute(tcx: Qcx::DepContext, key: Self::Key) -> Self::Value;\n+    fn compute(tcx: Qcx, key: Self::Key) -> Self::Value;\n \n     fn try_load_from_disk(qcx: Qcx, idx: &Self::Key) -> TryLoadFromDisk<Qcx, Self>;\n "}, {"sha": "38f507409c6004be2bf9c95d016caed8a4eafcc2", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067bf2ac1340a9362585d0d1690b9da24195582c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=067bf2ac1340a9362585d0d1690b9da24195582c", "patch": "@@ -425,8 +425,7 @@ where\n     // Fast path for when incr. comp. is off.\n     if !dep_graph.is_fully_enabled() {\n         let prof_timer = qcx.dep_context().profiler().query_provider();\n-        let result =\n-            qcx.start_query(job_id, Q::DEPTH_LIMIT, None, || Q::compute(*qcx.dep_context(), key));\n+        let result = qcx.start_query(job_id, Q::DEPTH_LIMIT, None, || Q::compute(qcx, key));\n         let dep_node_index = dep_graph.next_virtual_depnode_index();\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n         return (result, dep_node_index);\n@@ -452,16 +451,15 @@ where\n     let (result, dep_node_index) =\n         qcx.start_query(job_id, Q::DEPTH_LIMIT, Some(&diagnostics), || {\n             if Q::ANON {\n-                return dep_graph.with_anon_task(*qcx.dep_context(), Q::DEP_KIND, || {\n-                    Q::compute(*qcx.dep_context(), key)\n-                });\n+                return dep_graph\n+                    .with_anon_task(*qcx.dep_context(), Q::DEP_KIND, || Q::compute(qcx, key));\n             }\n \n             // `to_dep_node` is expensive for some `DepKind`s.\n             let dep_node =\n                 dep_node_opt.unwrap_or_else(|| Q::construct_dep_node(*qcx.dep_context(), &key));\n \n-            dep_graph.with_task(dep_node, *qcx.dep_context(), key, Q::compute, Q::HASH_RESULT)\n+            dep_graph.with_task(dep_node, qcx, key, Q::compute, Q::HASH_RESULT)\n         });\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n@@ -552,7 +550,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = dep_graph.with_ignore(|| Q::compute(*qcx.dep_context(), key.clone()));\n+    let result = dep_graph.with_ignore(|| Q::compute(qcx, key.clone()));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}]}