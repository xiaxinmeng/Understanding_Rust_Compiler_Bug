{"sha": "23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzY2NhZGRhYTdkMWNiNzFlNDllZjFiMWY0MjNiMzI0NWZhM2E4Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-23T21:40:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-23T21:40:06Z"}, "message": "Auto merge of #33124 - sfackler:kill-ipv6-only, r=alexcrichton\n\nRemove IPV6_V6ONLY functionality\n\nThese settings can only be adjusted before bind time, which doesn't make\nsense in the current set of functionality. These methods are stable, but\nhaven't hit a stable release yet.\n\nCloses #33052\n\n[breaking-change]\n\nr? @alexcrichton\n\nWill also need a backport to the beta.", "tree": {"sha": "9e7eda14f698924c2b713e5e1f88358a778d2c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7eda14f698924c2b713e5e1f88358a778d2c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "html_url": "https://github.com/rust-lang/rust/commit/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebff6382194b40c357dba0fbe829e5af9d3cf724", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebff6382194b40c357dba0fbe829e5af9d3cf724", "html_url": "https://github.com/rust-lang/rust/commit/ebff6382194b40c357dba0fbe829e5af9d3cf724"}, {"sha": "c6480e8b6b13401030c52f3c2b4fcc4e80c14481", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6480e8b6b13401030c52f3c2b4fcc4e80c14481", "html_url": "https://github.com/rust-lang/rust/commit/c6480e8b6b13401030c52f3c2b4fcc4e80c14481"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "a7738e3170049019e12fc12c7c960bb77a134984", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "patch": "@@ -221,29 +221,6 @@ impl TcpStream {\n         self.0.ttl()\n     }\n \n-    /// Sets the value for the `IPV6_V6ONLY` option on this socket.\n-    ///\n-    /// If this is set to `true` then the socket is restricted to sending and\n-    /// receiving IPv6 packets only. If this is the case, an IPv4 and an IPv6\n-    /// application can each bind the same port at the same time.\n-    ///\n-    /// If this is set to `false` then the socket can be used to send and\n-    /// receive packets from an IPv4-mapped IPv6 address.\n-    #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {\n-        self.0.set_only_v6(only_v6)\n-    }\n-\n-    /// Gets the value of the `IPV6_V6ONLY` option for this socket.\n-    ///\n-    /// For more information about this option, see [`set_only_v6`][link].\n-    ///\n-    /// [link]: #method.set_only_v6\n-    #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    pub fn only_v6(&self) -> io::Result<bool> {\n-        self.0.only_v6()\n-    }\n-\n     /// Get the value of the `SO_ERROR` option on this socket.\n     ///\n     /// This will retrieve the stored error in the underlying socket, clearing"}, {"sha": "4683c7061c3c83aee1a308f8903b5c846676bcf2", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "patch": "@@ -243,29 +243,6 @@ impl UdpSocket {\n         self.0.ttl()\n     }\n \n-    /// Sets the value for the `IPV6_V6ONLY` option on this socket.\n-    ///\n-    /// If this is set to `true` then the socket is restricted to sending and\n-    /// receiving IPv6 packets only. If this is the case, an IPv4 and an IPv6\n-    /// application can each bind the same port at the same time.\n-    ///\n-    /// If this is set to `false` then the socket can be used to send and\n-    /// receive packets from an IPv4-mapped IPv6 address.\n-    #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {\n-        self.0.set_only_v6(only_v6)\n-    }\n-\n-    /// Gets the value of the `IPV6_V6ONLY` option for this socket.\n-    ///\n-    /// For more information about this option, see [`set_only_v6`][link].\n-    ///\n-    /// [link]: #method.set_only_v6\n-    #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n-    pub fn only_v6(&self) -> io::Result<bool> {\n-        self.0.only_v6()\n-    }\n-\n     /// Executes an operation of the `IP_ADD_MEMBERSHIP` type.\n     ///\n     /// This function specifies a new multicast group for this socket to join."}, {"sha": "54b9b466c42240b7f8dab99bb962af50f4e1e553", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=23ccaddaa7d1cb71e49ef1b1f423b3245fa3a879", "patch": "@@ -247,15 +247,6 @@ impl TcpStream {\n         Ok(raw as u32)\n     }\n \n-    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY, only_v6 as c_int)\n-    }\n-\n-    pub fn only_v6(&self) -> io::Result<bool> {\n-        let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY)?;\n-        Ok(raw != 0)\n-    }\n-\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         self.inner.take_error()\n     }\n@@ -544,15 +535,6 @@ impl UdpSocket {\n         Ok(raw as u32)\n     }\n \n-    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY, only_v6 as c_int)\n-    }\n-\n-    pub fn only_v6(&self) -> io::Result<bool> {\n-        let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY)?;\n-        Ok(raw != 0)\n-    }\n-\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         self.inner.take_error()\n     }"}]}