{"sha": "c5949c8beedc290b2638e1ad9bd7c665edc9496a", "node_id": "C_kwDOAAsO6NoAKGM1OTQ5YzhiZWVkYzI5MGIyNjM4ZTFhZDliZDdjNjY1ZWRjOTQ5NmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T18:08:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T09:01:29Z"}, "message": "Create bidirectional bounds between original and duplicated parameters.", "tree": {"sha": "55238ef3fc54d0644d83b6aa6fb40704f910072f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55238ef3fc54d0644d83b6aa6fb40704f910072f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5949c8beedc290b2638e1ad9bd7c665edc9496a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5949c8beedc290b2638e1ad9bd7c665edc9496a", "html_url": "https://github.com/rust-lang/rust/commit/c5949c8beedc290b2638e1ad9bd7c665edc9496a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5949c8beedc290b2638e1ad9bd7c665edc9496a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a5aa4f0cd2e21f071067e7a0c53474ba9e86c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a5aa4f0cd2e21f071067e7a0c53474ba9e86c6", "html_url": "https://github.com/rust-lang/rust/commit/49a5aa4f0cd2e21f071067e7a0c53474ba9e86c6"}], "stats": {"total": 160, "additions": 94, "deletions": 66}, "files": [{"sha": "d10d1b0c731366cd6f2446a3a2e0c7e05d52b06b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c5949c8beedc290b2638e1ad9bd7c665edc9496a", "patch": "@@ -61,8 +61,8 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_middle::span_bug;\n use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n-use rustc_middle::{bug, span_bug};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n@@ -1457,17 +1457,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_id = match origin {\n-            hir::OpaqueTyOrigin::TyAlias => self.create_def(\n-                self.current_hir_id_owner.def_id,\n-                opaque_ty_node_id,\n-                DefPathData::ImplTrait,\n-            ),\n-            hir::OpaqueTyOrigin::FnReturn(fn_def_id) => {\n-                self.create_def(fn_def_id, opaque_ty_node_id, DefPathData::ImplTrait)\n-            }\n-            hir::OpaqueTyOrigin::AsyncFn(..) => bug!(\"unreachable\"),\n-        };\n+        let opaque_ty_def_id = self.create_def(\n+            self.current_hir_id_owner.def_id,\n+            opaque_ty_node_id,\n+            DefPathData::ImplTrait,\n+        );\n         debug!(?opaque_ty_def_id);\n \n         // Contains the new lifetime definitions created for the TAIT (if any)."}, {"sha": "9cd721fb342de68e8304e568bca5bd9fe13310d0", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c5949c8beedc290b2638e1ad9bd7c665edc9496a", "patch": "@@ -1538,7 +1538,6 @@ fn check_fn_or_method<'tcx>(\n \n     check_return_position_impl_trait_in_trait_bounds(\n         tcx,\n-        wfcx,\n         def_id,\n         sig.output(),\n         hir_decl.output.span(),\n@@ -1574,9 +1573,9 @@ fn check_fn_or_method<'tcx>(\n \n /// Basically `check_associated_type_bounds`, but separated for now and should be\n /// deduplicated when RPITITs get lowered into real associated items.\n+#[tracing::instrument(level = \"trace\", skip(tcx))]\n fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     fn_def_id: LocalDefId,\n     fn_output: Ty<'tcx>,\n     span: Span,\n@@ -1590,18 +1589,22 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n                 && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n                 && tcx.impl_trait_in_trait_parent(proj.item_def_id) == fn_def_id.to_def_id()\n             {\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n-                let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                    let normalized_bound = wfcx.normalize(span, None, bound);\n-                    traits::wf::predicate_obligations(\n-                        wfcx.infcx,\n-                        wfcx.param_env,\n-                        wfcx.body_id,\n-                        normalized_bound,\n-                        bound_span,\n-                    )\n+                // Create a new context, since we want the opaque's ParamEnv and not the parent's.\n+                let span = tcx.def_span(proj.item_def_id);\n+                enter_wf_checking_ctxt(tcx, span, proj.item_def_id.expect_local(), |wfcx| {\n+                    let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n+                    let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+                        let normalized_bound = wfcx.normalize(span, None, bound);\n+                        traits::wf::predicate_obligations(\n+                            wfcx.infcx,\n+                            wfcx.param_env,\n+                            wfcx.body_id,\n+                            normalized_bound,\n+                            bound_span,\n+                        )\n+                    });\n+                    wfcx.register_obligations(wf_obligations);\n                 });\n-                wfcx.register_obligations(wf_obligations);\n             }\n         }\n     }"}, {"sha": "808391d12c4b4922cc540dd87b4b0033e8abcaba", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 71, "deletions": 32, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=c5949c8beedc290b2638e1ad9bd7c665edc9496a", "patch": "@@ -84,40 +84,30 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n         Node::ImplItem(item) => item.generics,\n \n-        Node::Item(item) => {\n-            match item.kind {\n-                ItemKind::Impl(ref impl_) => {\n-                    if impl_.defaultness.is_default() {\n-                        is_default_impl_trait = tcx.impl_trait_ref(def_id).map(ty::Binder::dummy);\n-                    }\n-                    &impl_.generics\n-                }\n-                ItemKind::Fn(.., ref generics, _)\n-                | ItemKind::TyAlias(_, ref generics)\n-                | ItemKind::Enum(_, ref generics)\n-                | ItemKind::Struct(_, ref generics)\n-                | ItemKind::Union(_, ref generics) => *generics,\n-\n-                ItemKind::Trait(_, _, ref generics, ..) => {\n-                    is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n-                    *generics\n-                }\n-                ItemKind::TraitAlias(ref generics, _) => {\n-                    is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n-                    *generics\n+        Node::Item(item) => match item.kind {\n+            ItemKind::Impl(ref impl_) => {\n+                if impl_.defaultness.is_default() {\n+                    is_default_impl_trait = tcx.impl_trait_ref(def_id).map(ty::Binder::dummy);\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy {\n-                    ref generics,\n-                    origin: hir::OpaqueTyOrigin::TyAlias,\n-                    ..\n-                }) => {\n-                    // type-alias impl trait\n-                    generics\n-                }\n-\n-                _ => NO_GENERICS,\n+                &impl_.generics\n             }\n-        }\n+            ItemKind::Fn(.., ref generics, _)\n+            | ItemKind::TyAlias(_, ref generics)\n+            | ItemKind::Enum(_, ref generics)\n+            | ItemKind::Struct(_, ref generics)\n+            | ItemKind::Union(_, ref generics) => *generics,\n+\n+            ItemKind::Trait(_, _, ref generics, ..) => {\n+                is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n+                *generics\n+            }\n+            ItemKind::TraitAlias(ref generics, _) => {\n+                is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n+                *generics\n+            }\n+            ItemKind::OpaqueTy(OpaqueTy { ref generics, .. }) => generics,\n+            _ => NO_GENERICS,\n+        },\n \n         Node::ForeignItem(item) => match item.kind {\n             ForeignItemKind::Static(..) => NO_GENERICS,\n@@ -161,6 +151,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n     trace!(?predicates);\n     trace!(?ast_generics);\n+    trace!(?generics);\n \n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n@@ -279,6 +270,54 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         );\n     }\n \n+    // Opaque types duplicate some of their generic parameters.\n+    // We create bi-directional Outlives predicates between the original\n+    // and the duplicated parameter, to ensure that they do not get out of sync.\n+    if let Node::Item(&Item { kind: ItemKind::OpaqueTy(..), .. }) = node {\n+        let opaque_ty_id = tcx.hir().get_parent_node(hir_id);\n+        let opaque_ty_node = tcx.hir().get(opaque_ty_id);\n+        let Node::Ty(&Ty { kind: TyKind::OpaqueDef(_, lifetimes, _), .. }) = opaque_ty_node else {\n+            bug!(\"unexpected {opaque_ty_node:?}\")\n+        };\n+        debug!(?lifetimes);\n+        for (arg, duplicate) in std::iter::zip(lifetimes, ast_generics.params) {\n+            let hir::GenericArg::Lifetime(arg) = arg else { bug!() };\n+            let orig_region = <dyn AstConv<'_>>::ast_region_to_region(&icx, &arg, None);\n+            if !matches!(orig_region.kind(), ty::ReEarlyBound(..)) {\n+                // Only early-bound regions can point to the original generic parameter.\n+                continue;\n+            }\n+\n+            let hir::GenericParamKind::Lifetime { .. } = duplicate.kind else { continue };\n+            let dup_def = tcx.hir().local_def_id(duplicate.hir_id).to_def_id();\n+\n+            let Some(dup_index) = generics.param_def_id_to_index(tcx, dup_def) else { bug!() };\n+\n+            let dup_region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                def_id: dup_def,\n+                index: dup_index,\n+                name: duplicate.name.ident().name,\n+            }));\n+            predicates.push((\n+                ty::Binder::dummy(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                    orig_region,\n+                    dup_region,\n+                )))\n+                .to_predicate(icx.tcx),\n+                duplicate.span,\n+            ));\n+            predicates.push((\n+                ty::Binder::dummy(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                    dup_region,\n+                    orig_region,\n+                )))\n+                .to_predicate(icx.tcx),\n+                duplicate.span,\n+            ));\n+        }\n+        debug!(?predicates);\n+    }\n+\n     ty::GenericPredicates {\n         parent: generics.parent,\n         predicates: tcx.arena.alloc_from_iter(predicates),"}, {"sha": "57fe38724b9a93a90c793fbb38aa9b7e76291c7b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5949c8beedc290b2638e1ad9bd7c665edc9496a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c5949c8beedc290b2638e1ad9bd7c665edc9496a", "patch": "@@ -108,12 +108,7 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n-    // The param_env of an impl Trait type is its defining function's param_env\n-    if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n-        return param_env(tcx, parent.to_def_id());\n-    }\n     // Compute the bounds on Self and the type parameters.\n-\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n "}, {"sha": "c19420bbb0cebbb9bdbe73668083807bb67abaab", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5949c8beedc290b2638e1ad9bd7c665edc9496a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5949c8beedc290b2638e1ad9bd7c665edc9496a/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr?ref=c5949c8beedc290b2638e1ad9bd7c665edc9496a", "patch": "@@ -14,10 +14,7 @@ error[E0720]: cannot resolve opaque type\n   --> $DIR/impl-fn-predefined-lifetimes.rs:4:35\n    |\n LL | fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n-   |                                   ^^^^^^^^^^^^^^^ recursive opaque type\n-...\n-LL |     |x| x\n-   |     ----- returning here with type `[closure@$DIR/impl-fn-predefined-lifetimes.rs:7:5: 7:8]`\n+   |                                   ^^^^^^^^^^^^^^^ cannot resolve opaque type\n \n error: aborting due to 2 previous errors\n "}]}