{"sha": "f7382c454fb92f6c28ac6198821304c0ae2a080a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzgyYzQ1NGZiOTJmNmMyOGFjNjE5ODgyMTMwNGMwYWUyYTA4MGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-27T22:38:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-28T00:33:05Z"}, "message": "Forbid duplicate fields in record types and exprs\n\nCloses #3033", "tree": {"sha": "5a5ef3e7e09c68874d858226a20daf855d7d8d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5ef3e7e09c68874d858226a20daf855d7d8d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7382c454fb92f6c28ac6198821304c0ae2a080a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7382c454fb92f6c28ac6198821304c0ae2a080a", "html_url": "https://github.com/rust-lang/rust/commit/f7382c454fb92f6c28ac6198821304c0ae2a080a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7382c454fb92f6c28ac6198821304c0ae2a080a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d05844ed7fa894608300646a1c086b43c21585", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d05844ed7fa894608300646a1c086b43c21585", "html_url": "https://github.com/rust-lang/rust/commit/a0d05844ed7fa894608300646a1c086b43c21585"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "8af823ac072da69427bcb17c355d6eb37f61d32d", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=f7382c454fb92f6c28ac6198821304c0ae2a080a", "patch": "@@ -47,7 +47,7 @@ import str::{connect, split_str};\n import vec::pop;\n \n import std::list::{cons, list, nil};\n-import std::map::{hashmap, int_hash, str_hash};\n+import std::map::{hashmap, int_hash};\n import ASTMap = syntax::ast_map::map;\n import str_eq = str::eq;\n "}, {"sha": "ce7536b5bf95afb3e05af834bfefb72b6059452d", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=f7382c454fb92f6c28ac6198821304c0ae2a080a", "patch": "@@ -376,6 +376,29 @@ fn check_class_member(ccx: @crate_ctxt, class_t: ty::t,\n     }\n }\n \n+fn check_no_duplicate_fields(tcx: ty::ctxt, fields:\n+                             ~[(ast::ident, span)]) {\n+    let field_names = hashmap::<@~str, span>(|x| str::hash(*x),\n+                                             |x,y| str::eq(*x, *y));\n+    for fields.each |p| {\n+        let (id, sp) = p;\n+        alt field_names.find(id) {\n+          some(orig_sp) {\n+            tcx.sess.span_err(sp, #fmt(\"Duplicate field \\\n+                                   name %s in record type declaration\",\n+                                   *id));\n+            tcx.sess.span_note(orig_sp, ~\"First declaration of \\\n+                                          this field occurred here\");\n+            break;\n+          }\n+          none {\n+            field_names.insert(id, sp);\n+          }\n+        }\n+    }\n+\n+}\n+\n fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n@@ -429,6 +452,14 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_ty(t, tps) {\n         let tpt_ty = ty::node_id_to_type(ccx.tcx, it.id);\n         check_bounds_are_used(ccx, t.span, tps, tpt_ty);\n+        // If this is a record ty, check for duplicate fields\n+        alt t.node {\n+            ast::ty_rec(fields) {\n+              check_no_duplicate_fields(ccx.tcx, fields.map(|f|\n+                                              (f.node.ident, f.span)));\n+            }\n+            _ {}\n+        }\n       }\n       ast::item_foreign_mod(m) {\n         if syntax::attr::foreign_abi(it.attrs) ==\n@@ -1617,6 +1648,13 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             fn get_node(f: spanned<field>) -> field { f.node }\n             let typ = ty::mk_rec(tcx, vec::map(fields_t, get_node));\n             fcx.write_ty(id, typ);\n+            /* Check for duplicate fields */\n+            /* Only do this check if there's no base expr -- the reason is\n+               that we're extending a record we know has no dup fields, and\n+               it would be ill-typed anyway if we duplicated one of its\n+               fields */\n+            check_no_duplicate_fields(tcx, fields.map(|f|\n+                                                    (f.node.ident, f.span)));\n           }\n           some(bexpr) {\n             let bexpr_t = fcx.expr_ty(bexpr);"}, {"sha": "f86c22bc067a5961b56d82dbe2b3804a43086e6a", "filename": "src/test/compile-fail/issue-3033.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7382c454fb92f6c28ac6198821304c0ae2a080a/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3033.rs?ref=f7382c454fb92f6c28ac6198821304c0ae2a080a", "patch": "@@ -0,0 +1,6 @@\n+type cat = {cat_name: ~str, cat_name: int};  //~ ERROR Duplicate field name cat_name\n+\n+fn main()\n+{\n+  io::println(int::str({x: 1, x: 2}.x)); //~ ERROR Duplicate field name x\n+}"}]}