{"sha": "cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmM2MzODVmZWY0ZDhiYzA3MWY1MWVjZGIxMDA0ZTczYzdmZThhOWI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-25T20:34:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-25T20:34:43Z"}, "message": "Rollup merge of #54518 - petrochenkov:regr130, r=alexcrichton\n\nresolve: Do not block derive helper resolutions on single import resolutions\n\nDerive helpers currently conflict with anything else, so if some resolution from a single import appears later, it will result in error anyway.\n\nFixes https://github.com/rust-lang/rust/issues/54471 (stable-to-beta regression)\n\nr? @ghost", "tree": {"sha": "e2b627785c1a3a26104ac74b71c4e749fc525cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b627785c1a3a26104ac74b71c4e749fc525cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbqpvjCRBK7hj4Ov3rIwAAdHIIAEG4t3iV9M/HL+rBtai63Dig\nmKPpdubBpa0P+BTPcJbkB18mUCZoV9U5n5OH3yfwXi4a4f26Yl/YC1ld3xvknXgv\nduKp35HFjm0Vq++2V9wmsZ8Z4okvcqxstuY+SfCUGbqxhaD8mpwOZqlkITINfrLy\nkPt3trn05PHmvVqnLCgFwzJ47rua3tYrxuUyGpX0TGYc8RvqP+KWyn72qoxSdC0f\n5g0UYCtC7HLUj1wBvne58esuf2gj9Xjgkmac4kmeb23v0/uizm3tZ6SaqA2b4dAi\nkBt4KXar3EcNcCUttGmqmor2Yi3jxRLSod0lrPwCY/A6Ec5ZkJHLO7keGRVvaig=\n=jQrg\n-----END PGP SIGNATURE-----\n", "payload": "tree e2b627785c1a3a26104ac74b71c4e749fc525cbd\nparent 4720126c16b4cc961b04942a30d5d6db86edfaeb\nparent ee05f6eef4f97188a94874eacf2dad59f9f11f47\nauthor Pietro Albini <pietro@pietroalbini.org> 1537907683 +0200\ncommitter GitHub <noreply@github.com> 1537907683 +0200\n\nRollup merge of #54518 - petrochenkov:regr130, r=alexcrichton\n\nresolve: Do not block derive helper resolutions on single import resolutions\n\nDerive helpers currently conflict with anything else, so if some resolution from a single import appears later, it will result in error anyway.\n\nFixes https://github.com/rust-lang/rust/issues/54471 (stable-to-beta regression)\n\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "html_url": "https://github.com/rust-lang/rust/commit/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4720126c16b4cc961b04942a30d5d6db86edfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4720126c16b4cc961b04942a30d5d6db86edfaeb", "html_url": "https://github.com/rust-lang/rust/commit/4720126c16b4cc961b04942a30d5d6db86edfaeb"}, {"sha": "ee05f6eef4f97188a94874eacf2dad59f9f11f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee05f6eef4f97188a94874eacf2dad59f9f11f47", "html_url": "https://github.com/rust-lang/rust/commit/ee05f6eef4f97188a94874eacf2dad59f9f11f47"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "89bc2f2709a3cf2284ea6c9faa2e0b3f64590878", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -575,6 +575,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 5. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude (closed, controlled).\n         // (Macro NS)\n+        // 0. Derive helpers (open, not controlled). All ambiguities with other names\n+        //    are currently reported as errors. They should be higher in priority than preludes\n+        //    and probably even names in modules according to the \"general principles\" above. They\n+        //    also should be subject to restricted shadowing because are effectively produced by\n+        //    derives (you need to resolve the derive first to add helpers into scope), but they\n+        //    should be available before the derive is expanded for compatibility.\n+        //    It's mess in general, so we are being conservative for now.\n         // 1. Names in modules (both normal `mod`ules and blocks), loop through hygienic parents\n         //    (open, not controlled).\n         // 2. `macro_use` prelude (open, the open part is from macro expansions, not controlled).\n@@ -583,13 +590,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 2b. Standard library prelude is currently implemented as `macro-use` (closed, controlled)\n         // 3. Language prelude: builtin macros (closed, controlled, except for legacy plugins).\n         // 4. Language prelude: builtin attributes (closed, controlled).\n-        // N (unordered). Derive helpers (open, not controlled). All ambiguities with other names\n-        //    are currently reported as errors. They should be higher in priority than preludes\n-        //    and maybe even names in modules according to the \"general principles\" above. They\n-        //    also should be subject to restricted shadowing because are effectively produced by\n-        //    derives (you need to resolve the derive first to add helpers into scope), but they\n-        //    should be available before the derive is expanded for compatibility.\n-        //    It's mess in general, so we are being conservative for now.\n \n         assert!(ns == TypeNS  || ns == MacroNS);\n         assert!(force || !record_used); // `record_used` implies `force`\n@@ -621,7 +621,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         }\n \n         // Go through all the scopes and try to resolve the name.\n-        let mut where_to_resolve = WhereToResolve::Module(parent_scope.module);\n+        let mut where_to_resolve = WhereToResolve::DeriveHelpers;\n         let mut use_prelude = !parent_scope.module.no_implicit_prelude;\n         loop {\n             let result = match where_to_resolve {\n@@ -751,8 +751,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                     WhereToResolve::MacroUsePrelude => WhereToResolve::BuiltinMacros,\n                     WhereToResolve::BuiltinMacros => WhereToResolve::BuiltinAttrs,\n-                    WhereToResolve::BuiltinAttrs => WhereToResolve::DeriveHelpers,\n-                    WhereToResolve::DeriveHelpers => break, // nowhere else to search\n+                    WhereToResolve::BuiltinAttrs => break, // nowhere else to search\n+                    WhereToResolve::DeriveHelpers => WhereToResolve::Module(parent_scope.module),\n                     WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n                     WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n                     WhereToResolve::StdLibPrelude => WhereToResolve::BuiltinTypes,"}, {"sha": "d0aed8b1624867c721de0dd544be438ee6ff68f5", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -11,13 +11,11 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![allow(warnings)]\n-\n #[macro_use]\n extern crate derive_b;\n \n-#[B] //~ ERROR `B` is a derive mode\n-#[C]\n+#[B]\n+#[C] //~ ERROR attribute `C` is currently unknown to the compiler\n #[B(D)]\n #[B(E = \"foo\")]\n #[B(arbitrary tokens)]"}, {"sha": "124bc05b7a348cff354af2bdc772ee054efa4b69", "filename": "src/test/ui-fulldeps/custom-derive/auxiliary/plugin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fauxiliary%2Fplugin.rs?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -25,3 +25,13 @@ pub fn derive_foo(input: TokenStream) -> TokenStream {\n pub fn derive_bar(input: TokenStream) -> TokenStream {\n     panic!(\"lolnope\");\n }\n+\n+#[proc_macro_derive(WithHelper, attributes(helper))]\n+pub fn with_helper(input: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn helper(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "b750a8bb0d932d5880064ed43ee19b4b4aec747e", "filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import-ambig.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:plugin.rs\n+// ignore-stage1\n+\n+#[macro_use(WithHelper)]\n+extern crate plugin;\n+\n+use plugin::helper;\n+\n+#[derive(WithHelper)]\n+#[helper] //~ ERROR `helper` is ambiguous\n+struct S;\n+\n+fn main() {}"}, {"sha": "059629c0b62d5ad17b33ef6c015381d01cea313e", "filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import-ambig.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -0,0 +1,20 @@\n+error[E0659]: `helper` is ambiguous\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:10:3\n+   |\n+LL | #[helper] //~ ERROR `helper` is ambiguous\n+   |   ^^^^^^ ambiguous name\n+   |\n+note: `helper` could refer to the name defined here\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:9:10\n+   |\n+LL | #[derive(WithHelper)]\n+   |          ^^^^^^^^^^\n+note: `helper` could also refer to the name imported here\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:7:5\n+   |\n+LL | use plugin::helper;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "03b774f6c64002ac2c73b328d3d4b1b45648866f", "filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -0,0 +1,29 @@\n+// compile-pass\n+// aux-build:plugin.rs\n+// ignore-stage1\n+\n+#[macro_use(WithHelper)]\n+extern crate plugin;\n+\n+use self::one::*;\n+use self::two::*;\n+\n+mod helper {}\n+\n+mod one {\n+    use helper;\n+\n+    #[derive(WithHelper)]\n+    #[helper]\n+    struct One;\n+}\n+\n+mod two {\n+    use helper;\n+\n+    #[derive(WithHelper)]\n+    #[helper]\n+    struct Two;\n+}\n+\n+fn main() {}"}, {"sha": "e0aeae4ba6c54ffa2202bccc166f042d061c3c91", "filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=cf3c385fef4d8bc071f51ecdb1004e73c7fe8a9b", "patch": "@@ -4,17 +4,16 @@ error[E0659]: `my_attr` is ambiguous\n LL | #[my_attr] //~ ERROR `my_attr` is ambiguous\n    |   ^^^^^^^ ambiguous name\n    |\n-note: `my_attr` could refer to the name imported here\n-  --> $DIR/derive-helper-shadowing.rs:4:5\n-   |\n-LL | use derive_helper_shadowing::*;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: `my_attr` could also refer to the name defined here\n+note: `my_attr` could refer to the name defined here\n   --> $DIR/derive-helper-shadowing.rs:7:10\n    |\n LL | #[derive(MyTrait)]\n    |          ^^^^^^^\n-   = note: consider adding an explicit import of `my_attr` to disambiguate\n+note: `my_attr` could also refer to the name imported here\n+  --> $DIR/derive-helper-shadowing.rs:4:5\n+   |\n+LL | use derive_helper_shadowing::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}