{"sha": "275795fab321d860cd9f01243f861bf804b1e53c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTc5NWZhYjMyMWQ4NjBjZDlmMDEyNDNmODYxYmY4MDRiMWU1M2M=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-09T05:18:08Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-09T05:18:08Z"}, "message": "speed up lint using blocks and types", "tree": {"sha": "7d03d0883cfddfcebda6b568d2e1a703d86be9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d03d0883cfddfcebda6b568d2e1a703d86be9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/275795fab321d860cd9f01243f861bf804b1e53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/275795fab321d860cd9f01243f861bf804b1e53c", "html_url": "https://github.com/rust-lang/rust/commit/275795fab321d860cd9f01243f861bf804b1e53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/275795fab321d860cd9f01243f861bf804b1e53c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0b9e0e06176a6e4f49aa6c1aec88ede904ba11", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0b9e0e06176a6e4f49aa6c1aec88ede904ba11", "html_url": "https://github.com/rust-lang/rust/commit/3b0b9e0e06176a6e4f49aa6c1aec88ede904ba11"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "cf938dcf4b39382813fbc9f23a42510b3320c2f1", "filename": "src/regex.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/275795fab321d860cd9f01243f861bf804b1e53c/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275795fab321d860cd9f01243f861bf804b1e53c/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=275795fab321d860cd9f01243f861bf804b1e53c", "patch": "@@ -5,12 +5,12 @@ use syntax::ast::Lit_::LitStr;\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_expr};\n+use rustc_front::intravisit::{Visitor, walk_block};\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n \n-use utils::{is_expn_of, match_path, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n+use utils::{is_expn_of, match_path, match_type, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax.\n ///\n@@ -167,19 +167,23 @@ struct RegexVisitor<'v, 't: 'v> {\n }\n \n impl<'v, 't: 'v> Visitor<'v> for RegexVisitor<'v, 't> {\n-    fn visit_expr(&mut self, expr: &'v Expr) {\n-        if let Some(span) = is_expn_of(self.cx, expr.span, \"regex\") {\n-            if self.spans.contains(&span) {\n+    fn visit_block(&mut self, block: &'v Block) {\n+        if_let_chain!{[\n+            let Some(ref expr) = block.expr,\n+            match_type(self.cx, self.cx.tcx.expr_ty(expr), &[\"regex\", \"re\", \"Regex\"]),\n+            let Some(span) = is_expn_of(self.cx, expr.span, \"regex\")\n+        ], {\n+                if self.spans.contains(&span) {\n+                    return;\n+                }\n+                span_lint(self.cx, \n+                          REGEX_MACRO, \n+                          span,\n+                          \"`regex!(_)` found. \\\n+                          Please use `Regex::new(_)`, which is faster for now.\");\n+                self.spans.insert(span);\n                 return;\n-            }\n-            span_lint(self.cx, \n-                      REGEX_MACRO, \n-                      span,\n-                      \"`regex!(_)` found. \\\n-                      Please use `Regex::new(_)`, which is faster for now.\");\n-            self.spans.insert(span);\n-            return;\n-        }\n-        walk_expr(self, expr);\n+        }}\n+        walk_block(self, block);\n     }\n }"}]}