{"sha": "8a23ad17f8fa4f11335eb51215234af95cb9821d", "node_id": "C_kwDOAAsO6NoAKDhhMjNhZDE3ZjhmYTRmMTEzMzVlYjUxMjE1MjM0YWY5NWNiOTgyMWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-12T19:06:38Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-12T19:06:38Z"}, "message": "Update comments in rustc_ast_lowering/src/format.rs.", "tree": {"sha": "671afd0ba7fa441d0a97c62882d678379df53f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671afd0ba7fa441d0a97c62882d678379df53f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a23ad17f8fa4f11335eb51215234af95cb9821d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a23ad17f8fa4f11335eb51215234af95cb9821d", "html_url": "https://github.com/rust-lang/rust/commit/8a23ad17f8fa4f11335eb51215234af95cb9821d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a23ad17f8fa4f11335eb51215234af95cb9821d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1934a32c51609be92259dca32af394087989d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1934a32c51609be92259dca32af394087989d3", "html_url": "https://github.com/rust-lang/rust/commit/0a1934a32c51609be92259dca32af394087989d3"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "d5da1a666f90f539f4bed0b39231bcef602615dc", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8a23ad17f8fa4f11335eb51215234af95cb9821d/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a23ad17f8fa4f11335eb51215234af95cb9821d/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=8a23ad17f8fa4f11335eb51215234af95cb9821d", "patch": "@@ -22,14 +22,19 @@ enum ArgumentType {\n     Usize,\n }\n \n+/// Generate a hir expression representing an argument to a format_args invocation.\n+///\n+/// Generates:\n+///\n+/// ```text\n+///     <core::fmt::ArgumentV1>::new_\u2026(arg)\n+/// ```\n fn make_argument<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     sp: Span,\n     arg: &'hir hir::Expr<'hir>,\n     ty: ArgumentType,\n ) -> hir::Expr<'hir> {\n-    // Generate:\n-    //     ::core::fmt::ArgumentV1::new_\u2026(arg)\n     use ArgumentType::*;\n     use FormatTrait::*;\n     let new_fn = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n@@ -51,14 +56,31 @@ fn make_argument<'hir>(\n     ctx.expr_call_mut(sp, new_fn, std::slice::from_ref(arg))\n }\n \n+/// Generate a hir expression for a format_args Count.\n+///\n+/// Generates:\n+///\n+/// ```text\n+///     <core::fmt::rt::v1::Count>::Is(\u2026)\n+/// ```\n+///\n+/// or\n+///\n+/// ```text\n+///     <core::fmt::rt::v1::Count>::Param(\u2026)\n+/// ```\n+///\n+/// or\n+///\n+/// ```text\n+///     <core::fmt::rt::v1::Count>::Implied\n+/// ```\n fn make_count<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     sp: Span,\n     count: &Option<FormatCount>,\n     argmap: &mut FxIndexSet<(usize, ArgumentType)>,\n ) -> hir::Expr<'hir> {\n-    // Generate:\n-    //     ::core::fmt::rt::v1::Count::\u2026(\u2026)\n     match count {\n         Some(FormatCount::Literal(n)) => {\n             let count_is = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n@@ -87,21 +109,26 @@ fn make_count<'hir>(\n     }\n }\n \n+/// Generate a hir expression for a format_args placeholder specification.\n+///\n+/// Generates\n+///\n+/// ```text\n+///     <core::fmt::rt::v1::Argument::new(\n+///         \u2026usize, // position\n+///         '\u2026', // fill\n+///         <core::fmt::rt::v1::Alignment>::\u2026, // alignment\n+///         \u2026u32, // flags\n+///         <core::fmt::rt::v1::Count::\u2026>, // width\n+///         <core::fmt::rt::v1::Count::\u2026>, // precision\n+///     )\n+/// ```\n fn make_format_spec<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     sp: Span,\n     placeholder: &FormatPlaceholder,\n     argmap: &mut FxIndexSet<(usize, ArgumentType)>,\n ) -> hir::Expr<'hir> {\n-    // Generate:\n-    //     ::core::fmt::rt::v1::Argument::new(\n-    //         0usize, // position\n-    //         ' ', // fill\n-    //         ::core::fmt::rt::v1::Alignment::Unknown,\n-    //         0u32, // flags\n-    //         ::core::fmt::rt::v1::Count::Implied, // width\n-    //         ::core::fmt::rt::v1::Count::Implied, // precision\n-    //     )\n     let position = match placeholder.argument.index {\n         Ok(arg_index) => {\n             let (i, _) =\n@@ -203,9 +230,10 @@ fn expand_format_args<'hir>(\n     let args = if use_simple_array {\n         // Generate:\n         //     &[\n-        //         ::core::fmt::ArgumentV1::new_display(&arg0),\n-        //         ::core::fmt::ArgumentV1::new_lower_hex(&arg1),\n-        //         ::core::fmt::ArgumentV1::new_debug(&arg2),\n+        //         <core::fmt::ArgumentV1>::new_display(&arg0),\n+        //         <core::fmt::ArgumentV1>::new_lower_hex(&arg1),\n+        //         <core::fmt::ArgumentV1>::new_debug(&arg2),\n+        //         \u2026\n         //     ]\n         let elements: Vec<_> = arguments\n             .iter()\n@@ -223,11 +251,12 @@ fn expand_format_args<'hir>(\n         ctx.expr_array_ref(macsp, ctx.arena.alloc_from_iter(elements))\n     } else {\n         // Generate:\n-        //     &match (&arg0, &arg1, &arg2) {\n+        //     &match (&arg0, &arg1, &\u2026) {\n         //         args => [\n-        //             ::core::fmt::ArgumentV1::new_display(args.0),\n-        //             ::core::fmt::ArgumentV1::new_lower_hex(args.1),\n-        //             ::core::fmt::ArgumentV1::new_debug(args.0),\n+        //             <core::fmt::ArgumentV1>::new_display(args.0),\n+        //             <core::fmt::ArgumentV1>::new_lower_hex(args.1),\n+        //             <core::fmt::ArgumentV1>::new_debug(args.0),\n+        //             \u2026\n         //         ]\n         //     }\n         let args_ident = Ident::new(sym::args, macsp);\n@@ -277,7 +306,7 @@ fn expand_format_args<'hir>(\n \n     if let Some(format_options) = format_options {\n         // Generate:\n-        //     ::core::fmt::Arguments::new_v1_formatted(\n+        //     <core::fmt::Arguments>::new_v1_formatted(\n         //         lit_pieces,\n         //         args,\n         //         format_options,\n@@ -307,7 +336,7 @@ fn expand_format_args<'hir>(\n         hir::ExprKind::Call(new_v1_formatted, args)\n     } else {\n         // Generate:\n-        //     ::core::fmt::Arguments::new_v1(\n+        //     <core::fmt::Arguments>::new_v1(\n         //         lit_pieces,\n         //         args,\n         //     )"}]}