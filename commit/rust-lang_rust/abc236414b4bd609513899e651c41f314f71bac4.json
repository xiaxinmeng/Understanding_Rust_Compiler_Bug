{"sha": "abc236414b4bd609513899e651c41f314f71bac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzIzNjQxNGI0YmQ2MDk1MTM4OTllNjUxYzQxZjMxNGY3MWJhYzQ=", "commit": {"author": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-13T22:19:46Z"}, "committer": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-05-19T23:16:11Z"}, "message": "Implement `#[ffi_const]` and `#[ffi_pure]` function attributes\n\nIntroduce function attribute corresponding to the `const`/`pure`\nattributes supported by GCC, clang and other compilers.\n\nBased on the work of gnzlbg <gonzalobg88@gmail.com>.", "tree": {"sha": "4e3b3908a2ab5ec936da026ef507b2366af9229b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e3b3908a2ab5ec936da026ef507b2366af9229b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc236414b4bd609513899e651c41f314f71bac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc236414b4bd609513899e651c41f314f71bac4", "html_url": "https://github.com/rust-lang/rust/commit/abc236414b4bd609513899e651c41f314f71bac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc236414b4bd609513899e651c41f314f71bac4/comments", "author": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "html_url": "https://github.com/rust-lang/rust/commit/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "421c6aca1a978a0a0cf19b57d72e3fe3296dfc1e", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -284,6 +284,12 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_RETURNS_TWICE) {\n         Attribute::ReturnsTwice.apply_llfn(Function, llfn);\n     }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_PURE) {\n+        Attribute::ReadOnly.apply_llfn(Function, llfn);\n+    }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_CONST) {\n+        Attribute::ReadNone.apply_llfn(Function, llfn);\n+    }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         naked(llfn, true);\n     }"}, {"sha": "5865042859dca227d1d271c596016e817e128d80", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -616,4 +616,7 @@ E0754: include_str!(\"./error_codes/E0754.md\"),\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n+    E0755, // `#[ffi_pure]` is only allowed on foreign functions\n+    E0756, // `#[ffi_const]` is only allowed on foreign functions\n+    E0757, // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n }"}, {"sha": "90b2380d86450db261c1d07b92b78a58b75371c5", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -565,6 +565,12 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n \n+    /// Allows the use of `#[ffi_pure]` on foreign functions.\n+    (active, ffi_pure, \"1.45.0\", Some(58329), None),\n+\n+    /// Allows the use of `#[ffi_const]` on foreign functions.\n+    (active, ffi_const, \"1.45.0\", Some(58328), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "44971a98cc32f741b2a8d9848924936bb9a22653", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -331,6 +331,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n+    gated!(ffi_pure, Whitelisted, template!(Word), experimental!(ffi_pure)),\n+    gated!(ffi_const, Whitelisted, template!(Word), experimental!(ffi_const)),\n     gated!(track_caller, Whitelisted, template!(Word), experimental!(track_caller)),\n     gated!(\n         register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),"}, {"sha": "c480944069efbed2339591899ccfea1984b71fd9", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -77,6 +77,12 @@ bitflags! {\n         const NO_SANITIZE_THREAD  = 1 << 14;\n         /// All `#[no_sanitize(...)]` attributes.\n         const NO_SANITIZE_ANY = Self::NO_SANITIZE_ADDRESS.bits | Self::NO_SANITIZE_MEMORY.bits | Self::NO_SANITIZE_THREAD.bits;\n+        /// #[ffi_pure]: applies clang's `pure` attribute to a foreign function\n+        /// declaration.\n+        const FFI_PURE = 1 << 15;\n+        /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n+        /// declaration.\n+        const FFI_CONST = 1 << 16;\n     }\n }\n "}, {"sha": "6a6098710e828b736f584ee21f0fa6db0bd5d6a9", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -322,6 +322,8 @@ symbols! {\n         f32,\n         f64,\n         feature,\n+        ffi_const,\n+        ffi_pure,\n         ffi_returns_twice,\n         field,\n         field_init_shorthand,"}, {"sha": "66ef6a04be914b917524a7affec477bee1d72aab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc236414b4bd609513899e651c41f314f71bac4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=abc236414b4bd609513899e651c41f314f71bac4", "patch": "@@ -2374,6 +2374,43 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 )\n                 .emit();\n             }\n+        } else if attr.check_name(sym::ffi_pure) {\n+            if tcx.is_foreign_item(id) {\n+                if attrs.iter().any(|a| a.check_name(sym::ffi_const)) {\n+                    // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n+                    struct_span_err!(\n+                        tcx.sess,\n+                        attr.span,\n+                        E0757,\n+                        \"`#[ffi_const]` function cannot be `#[ffi_pure]`\"\n+                    )\n+                    .emit();\n+                } else {\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n+                }\n+            } else {\n+                // `#[ffi_pure]` is only allowed on foreign functions\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0755,\n+                    \"`#[ffi_pure]` may only be used on foreign functions\"\n+                )\n+                .emit();\n+            }\n+        } else if attr.check_name(sym::ffi_const) {\n+            if tcx.is_foreign_item(id) {\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n+            } else {\n+                // `#[ffi_const]` is only allowed on foreign functions\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0756,\n+                    \"`#[ffi_const]` may only be used on foreign functions\"\n+                )\n+                .emit();\n+            }\n         } else if attr.check_name(sym::rustc_allocator_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND;\n         } else if attr.check_name(sym::naked) {"}]}