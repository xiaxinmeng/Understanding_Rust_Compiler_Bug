{"sha": "048900c5b6bd8d5f6499b60703b3b5773b614608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODkwMGM1YjZiZDhkNWY2NDk5YjYwNzAzYjNiNTc3M2I2MTQ2MDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T16:01:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-28T10:21:41Z"}, "message": "make (de)reference hooks more consistent", "tree": {"sha": "4d32cf75995c702149493d6ea3382bf0e69e5cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d32cf75995c702149493d6ea3382bf0e69e5cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/048900c5b6bd8d5f6499b60703b3b5773b614608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/048900c5b6bd8d5f6499b60703b3b5773b614608", "html_url": "https://github.com/rust-lang/rust/commit/048900c5b6bd8d5f6499b60703b3b5773b614608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/048900c5b6bd8d5f6499b60703b3b5773b614608/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1982f1887ad524951f24c12a6cc7bf05148aec14", "url": "https://api.github.com/repos/rust-lang/rust/commits/1982f1887ad524951f24c12a6cc7bf05148aec14", "html_url": "https://github.com/rust-lang/rust/commit/1982f1887ad524951f24c12a6cc7bf05148aec14"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "41a70c88f566653a93bb53e049cd09c2e2c89cc1", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=048900c5b6bd8d5f6499b60703b3b5773b614608", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         _ptr: Pointer<Self::PointerTag>,\n         _pointee_ty: Ty<'tcx>,\n         _pointee_size: Size,\n-        _borrow_kind: Option<mir::BorrowKind>,\n+        _borrow_kind: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Self::PointerTag> {\n         Ok(())\n     }\n@@ -481,7 +481,9 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     fn tag_dereference(\n         _ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n         _ptr: Pointer<Self::PointerTag>,\n-        _ptr_ty: Ty<'tcx>,\n+        _pointee_ty: Ty<'tcx>,\n+        _pointee_size: Size,\n+        _borrow_kind: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Self::PointerTag> {\n         Ok(())\n     }"}, {"sha": "7184be6cd16359c030b995e27283326b22cc8ae0", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=048900c5b6bd8d5f6499b60703b3b5773b614608", "patch": "@@ -15,7 +15,7 @@\n use std::borrow::{Borrow, Cow};\n use std::hash::Hash;\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n use rustc::ty::{self, Ty, layout::{Size, TyLayout}, query::TyCtxtAt};\n \n@@ -206,21 +206,24 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n \n     /// Executed when evaluating the `&` operator: Creating a new reference.\n     /// This has the chance to adjust the tag.\n-    /// `borrow_kind` can be `None` in case a raw ptr is being created.\n+    /// `mutability` can be `None` in case a raw ptr is being created.\n     fn tag_reference(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer<Self::PointerTag>,\n         pointee_ty: Ty<'tcx>,\n         pointee_size: Size,\n-        borrow_kind: Option<mir::BorrowKind>,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Self::PointerTag>;\n \n     /// Executed when evaluating the `*` operator: Following a reference.\n     /// This has the change to adjust the tag.\n+    /// `mutability` can be `None` in case a raw ptr is being dereferenced.\n     fn tag_dereference(\n         ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer<Self::PointerTag>,\n-        ptr_ty: Ty<'tcx>,\n+        pointee_ty: Ty<'tcx>,\n+        pointee_size: Size,\n+        mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Self::PointerTag>;\n \n     /// Execute a validation operation"}, {"sha": "d0a32161485b4218e50b2834e96f7e01226b94cf", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=048900c5b6bd8d5f6499b60703b3b5773b614608", "patch": "@@ -217,6 +217,16 @@ impl<'tcx, Tag> Value<Tag> {\n             Value::ScalarPair(ptr, _) => ptr.not_undef(),\n         }\n     }\n+\n+    /// Convert the value into its metadata.\n+    /// Throws away the first half of a ScalarPair!\n+    #[inline]\n+    pub fn to_meta(self) -> EvalResult<'tcx, Option<Scalar<Tag>>> {\n+        Ok(match self {\n+            Value::Scalar(_) => None,\n+            Value::ScalarPair(_, meta) => Some(meta.not_undef()?),\n+        })\n+    }\n }\n \n // ScalarPair needs a type to interpret, so we often have a value and a type together"}, {"sha": "0bd9094ebcde6ba4e28aef87edc8c40aa7993707", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/048900c5b6bd8d5f6499b60703b3b5773b614608/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=048900c5b6bd8d5f6499b60703b3b5773b614608", "patch": "@@ -15,6 +15,7 @@\n use std::convert::TryFrom;\n use std::hash::Hash;\n \n+use rustc::hir;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout};\n@@ -270,26 +271,31 @@ where\n         &self,\n         val: ValTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let pointee_type = val.layout.ty.builtin_deref(true).unwrap().ty;\n+        let layout = self.layout_of(pointee_type)?;\n+\n+        let align = layout.align;\n+        let meta = val.to_meta()?;\n+\n         let ptr = match val.to_scalar_ptr()? {\n             Scalar::Ptr(ptr) if M::ENABLE_PTR_TRACKING_HOOKS => {\n                 // Machine might want to track the `*` operator\n-                let tag = M::tag_dereference(self, ptr, val.layout.ty)?;\n+                let (size, _) = self.size_and_align_of(meta, layout)?\n+                    .expect(\"ref_to_mplace cannot determine size\");\n+                let mutbl = match val.layout.ty.sty {\n+                    // `builtin_deref` considers boxes immutable, that's useless for our purposes\n+                    ty::Ref(_, _, mutbl) => Some(mutbl),\n+                    ty::Adt(def, _) if def.is_box() => Some(hir::MutMutable),\n+                    ty::RawPtr(_) => None,\n+                    _ => bug!(\"Unexpected pointer type {}\", val.layout.ty.sty),\n+                };\n+                let tag = M::tag_dereference(self, ptr, pointee_type, size, mutbl)?;\n                 Scalar::Ptr(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n             }\n             other => other,\n         };\n \n-        let pointee_type = val.layout.ty.builtin_deref(true).unwrap().ty;\n-        let layout = self.layout_of(pointee_type)?;\n-        let align = layout.align;\n-\n-        let mplace = match *val {\n-            Value::Scalar(_) =>\n-                MemPlace { ptr, align, meta: None },\n-            Value::ScalarPair(_, meta) =>\n-                MemPlace { ptr, align, meta: Some(meta.not_undef()?) },\n-        };\n-        Ok(MPlaceTy { mplace, layout })\n+        Ok(MPlaceTy { mplace: MemPlace { ptr, align, meta }, layout })\n     }\n \n     /// Turn a mplace into a (thin or fat) pointer, as a reference, pointing to the same space.\n@@ -304,7 +310,12 @@ where\n                 // Machine might want to track the `&` operator\n                 let (size, _) = self.size_and_align_of_mplace(place)?\n                     .expect(\"create_ref cannot determine size\");\n-                let tag = M::tag_reference(self, ptr, place.layout.ty, size, borrow_kind)?;\n+                let mutbl = match borrow_kind {\n+                    Some(mir::BorrowKind::Mut { .. }) => Some(hir::MutMutable),\n+                    Some(_) => Some(hir::MutImmutable),\n+                    None => None,\n+                };\n+                let tag = M::tag_reference(self, ptr, place.layout.ty, size, mutbl)?;\n                 Scalar::Ptr(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n             },\n             other => other,"}]}