{"sha": "485476c25a666ee89210c8ff9035836dc678547a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NTQ3NmMyNWE2NjZlZTg5MjEwYzhmZjkwMzU4MzZkYzY3ODU0N2E=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-27T19:50:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-03T00:47:44Z"}, "message": "add a pass to remove no-op landing pads", "tree": {"sha": "b5876e5f75a49b1fc3d101d060ef96b06bd7e62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5876e5f75a49b1fc3d101d060ef96b06bd7e62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485476c25a666ee89210c8ff9035836dc678547a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485476c25a666ee89210c8ff9035836dc678547a", "html_url": "https://github.com/rust-lang/rust/commit/485476c25a666ee89210c8ff9035836dc678547a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485476c25a666ee89210c8ff9035836dc678547a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25416c70814eb64a8cdd709af7aba1833832bebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/25416c70814eb64a8cdd709af7aba1833832bebf", "html_url": "https://github.com/rust-lang/rust/commit/25416c70814eb64a8cdd709af7aba1833832bebf"}], "stats": {"total": 186, "additions": 169, "deletions": 17}, "files": [{"sha": "cd4ed8081c3bda662c6dd59567ab205e0a820fcf", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=485476c25a666ee89210c8ff9035836dc678547a", "patch": "@@ -733,6 +733,10 @@ impl<'tcx> Terminator<'tcx> {\n     pub fn successors_mut(&mut self) -> Vec<&mut BasicBlock> {\n         self.kind.successors_mut()\n     }\n+\n+    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+        self.kind.unwind_mut()\n+    }\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n@@ -811,6 +815,27 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+        match *self {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::GeneratorDrop |\n+            TerminatorKind::Yield { .. } |\n+            TerminatorKind::SwitchInt { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n+                None\n+            },\n+            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n+            TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n+            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n+            TerminatorKind::Drop { ref mut unwind, .. } => {\n+                Some(unwind)\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> BasicBlockData<'tcx> {"}, {"sha": "64ba5ae3e8bd7d56bb4d88f652a665f0003a9308", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=485476c25a666ee89210c8ff9035836dc678547a", "patch": "@@ -36,6 +36,7 @@ pub mod elaborate_drops;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n+pub mod remove_noop_landing_pads;\n pub mod dump_mir;\n pub mod deaggregator;\n pub mod instcombine;\n@@ -226,8 +227,11 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n     run_passes![tcx, mir, def_id, 2;\n+        // Remove all things not needed by analysis\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n+        remove_noop_landing_pads::RemoveNoopLandingPads,\n+        simplify::SimplifyCfg::new(\"early-opt\"),\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,\n@@ -255,6 +259,7 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         instcombine::InstCombine,\n         deaggregator::Deaggregator,\n         copy_prop::CopyPropagation,\n+        remove_noop_landing_pads::RemoveNoopLandingPads,\n         simplify::SimplifyLocals,\n \n         generator::StateTransform,"}, {"sha": "c8f171d4160c61cd20280f7811584d8cd23a7ca0", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=485476c25a666ee89210c8ff9035836dc678547a", "patch": "@@ -38,23 +38,8 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n                         bb: BasicBlock,\n                         terminator: &mut Terminator<'tcx>,\n                         location: Location) {\n-        match terminator.kind {\n-            TerminatorKind::Goto { .. } |\n-            TerminatorKind::Resume |\n-            TerminatorKind::Return |\n-            TerminatorKind::Unreachable |\n-            TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Yield { .. } |\n-            TerminatorKind::SwitchInt { .. } |\n-            TerminatorKind::FalseEdges { .. } => {\n-                /* nothing to do */\n-            },\n-            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n-            TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n-            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n-            TerminatorKind::Drop { ref mut unwind, .. } => {\n-                unwind.take();\n-            },\n+        if let Some(unwind) = terminator.kind.unwind_mut() {\n+            unwind.take();\n         }\n         self.super_terminator(bb, terminator, location);\n     }"}, {"sha": "d29174d57192bf1f50df372e3d7fe70f0eb4ddf7", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485476c25a666ee89210c8ff9035836dc678547a/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=485476c25a666ee89210c8ff9035836dc678547a", "patch": "@@ -0,0 +1,137 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::*;\n+use rustc_data_structures::bitvec::BitVector;\n+use rustc_data_structures::indexed_vec::Idx;\n+use transform::{MirPass, MirSource};\n+use util::patch::MirPatch;\n+\n+/// A pass that removes no-op landing pads and replaces jumps to them with\n+/// `None`. This is important because otherwise LLVM generates terrible\n+/// code for these.\n+pub struct RemoveNoopLandingPads;\n+\n+impl MirPass for RemoveNoopLandingPads {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        if tcx.sess.no_landing_pads() {\n+            return\n+        }\n+\n+        debug!(\"remove_noop_landing_pads({:?})\", mir);\n+        self.remove_nop_landing_pads(mir);\n+    }\n+}\n+\n+impl RemoveNoopLandingPads {\n+    fn is_nop_landing_pad(&self, bb: BasicBlock, mir: &Mir, nop_landing_pads: &BitVector)\n+                          -> bool\n+    {\n+        for stmt in &mir[bb].statements {\n+            match stmt.kind {\n+                StatementKind::StorageLive(_) |\n+                StatementKind::StorageDead(_) |\n+                StatementKind::EndRegion(_) |\n+                StatementKind::Nop => {\n+                    // These are all nops in a landing pad (there's some\n+                    // borrowck interaction between EndRegion and storage\n+                    // instructions, but this should all run after borrowck).\n+                }\n+\n+                StatementKind::Assign(Place::Local(_), Rvalue::Use(_)) => {\n+                    // Writing to a local (e.g. a drop flag) does not\n+                    // turn a landing pad to a non-nop\n+                }\n+\n+                StatementKind::Assign(_, _) |\n+                StatementKind::SetDiscriminant { .. } |\n+                StatementKind::InlineAsm { .. } |\n+                StatementKind::Validate { .. } => {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        let terminator = mir[bb].terminator();\n+        match terminator.kind {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::SwitchInt { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n+                terminator.successors().iter().all(|succ| {\n+                    nop_landing_pads.contains(succ.index())\n+                })\n+            },\n+            TerminatorKind::GeneratorDrop |\n+            TerminatorKind::Yield { .. } |\n+            TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::Call { .. } |\n+            TerminatorKind::Assert { .. } |\n+            TerminatorKind::DropAndReplace { .. } |\n+            TerminatorKind::Drop { .. } => {\n+                false\n+            }\n+        }\n+    }\n+\n+    fn remove_nop_landing_pads(&self, mir: &mut Mir) {\n+        // make sure there's a single resume block\n+        let resume_block = {\n+            let patch = MirPatch::new(mir);\n+            let resume_block = patch.resume_block();\n+            patch.apply(mir);\n+            resume_block\n+        };\n+        debug!(\"remove_noop_landing_pads: resume block is {:?}\", resume_block);\n+\n+        let mut jumps_folded = 0;\n+        let mut landing_pads_removed = 0;\n+        let mut nop_landing_pads = BitVector::new(mir.basic_blocks().len());\n+\n+        // This is a post-order traversal, so that if A post-dominates B\n+        // then A will be visited before B.\n+        let postorder: Vec<_> = traversal::postorder(mir).map(|(bb, _)| bb).collect();\n+        for bb in postorder {\n+            debug!(\"  processing {:?}\", bb);\n+            for target in mir[bb].terminator_mut().successors_mut() {\n+                if *target != resume_block && nop_landing_pads.contains(target.index()) {\n+                    debug!(\"    folding noop jump to {:?} to resume block\", target);\n+                    *target = resume_block;\n+                    jumps_folded += 1;\n+                }\n+            }\n+\n+            match mir[bb].terminator_mut().unwind_mut() {\n+                Some(unwind) => {\n+                    if *unwind == Some(resume_block) {\n+                        debug!(\"    removing noop landing pad\");\n+                        jumps_folded -= 1;\n+                        landing_pads_removed += 1;\n+                        *unwind = None;\n+                    }\n+                }\n+                _ => {}\n+            }\n+\n+            let is_nop_landing_pad = self.is_nop_landing_pad(bb, mir, &nop_landing_pads);\n+            if is_nop_landing_pad {\n+                nop_landing_pads.insert(bb.index());\n+            }\n+            debug!(\"    is_nop_landing_pad({:?}) = {}\", bb, is_nop_landing_pad);\n+        }\n+\n+        debug!(\"removed {:?} jumps and {:?} landing pads\", jumps_folded, landing_pads_removed);\n+    }\n+}"}]}