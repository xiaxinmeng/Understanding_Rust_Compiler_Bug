{"sha": "7b628e18a323505c175415013bcd854f38d0216e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjI4ZTE4YTMyMzUwNWMxNzU0MTUwMTNiY2Q4NTRmMzhkMDIxNmU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-17T16:26:24Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-17T16:26:24Z"}, "message": "Add required lifetime parameter to BitDenotation.\n\nThis avoids all sorts of confusing issues with using both `dest_place`\nand `self` in the `propagate_call_return` function in the\n`BitDenotation` implementation for `Borrows`.", "tree": {"sha": "1a24420b6be6b4f2b25760313919e8459d4b9a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a24420b6be6b4f2b25760313919e8459d4b9a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b628e18a323505c175415013bcd854f38d0216e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwXzmYACgkQAXYLT59T\n8VRE7RAAvjkSQNoAJWpsA3CQyZg/mrNLoJ4jk074Y6T82scPuLMD8wYEbvIUEHUS\nCdMGRbdcURYHFrV6ftnDItnVDZ9Fg0lzEAYXiRwK5WVO2Rig5ZvlIgkqLroe3p97\n0knjhKRL+9yYLhlfCuDdaT6wBzfO2X/RRfhmq1QBGtwBgZ6lVzkWJqpFQFpKwkla\nGz2qFWJawfG4gUggK7BrU0FAszkQOQplGCSVD5h6/HH+/DelH/S0DsfwJkxOMZ2O\nJGIg/41UiujO6/uXrsHAfZs+eLE5r5ugeut2/grpFJK/QsxIgiwdTv6gdf6nBDqM\nNe96bqHsbKTmuOx7sBkgHi7HtWyvyqhTUqO3HmLI1fwz8e+Mbkr/ea6NOsvZcGcs\noY0yP/SOwhVelZhkqWwbrZGeZsaFqaT6sSXxYZg5lm+b98rHpHPjUgN10OyGHlba\n5BLlGknLHDJgkttYV74ZHZ0CyJL+wsYB8hrWI4GRvHIk5l/X3n50gZYf6+KwytR5\nIitdYOAJUWqdeu4gnqrWw+IOKLvc3FXIMfWp0G0Cb7ezAovOWo+RX9EHNmJoU/oY\nvzel/cIifsxLIi4EaQGluoi/6ka9dpc5jUr15P3VNTQ+EQOk11CocLxpum9TkwZh\nWFVVCpDYdL6azO7MnbCDSXSqW3BcZhEWc83SNFwlKM44y95EtQk=\n=LQtm\n-----END PGP SIGNATURE-----", "payload": "tree 1a24420b6be6b4f2b25760313919e8459d4b9a38\nparent db635fc5664c0a19cdb4063545ca2d2b297f0212\nauthor David Wood <david@davidtw.co> 1545063984 +0100\ncommitter David Wood <david@davidtw.co> 1545063984 +0100\n\nAdd required lifetime parameter to BitDenotation.\n\nThis avoids all sorts of confusing issues with using both `dest_place`\nand `self` in the `propagate_call_return` function in the\n`BitDenotation` implementation for `Borrows`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b628e18a323505c175415013bcd854f38d0216e", "html_url": "https://github.com/rust-lang/rust/commit/7b628e18a323505c175415013bcd854f38d0216e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b628e18a323505c175415013bcd854f38d0216e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db635fc5664c0a19cdb4063545ca2d2b297f0212", "url": "https://api.github.com/repos/rust-lang/rust/commits/db635fc5664c0a19cdb4063545ca2d2b297f0212", "html_url": "https://github.com/rust-lang/rust/commit/db635fc5664c0a19cdb4063545ca2d2b297f0212"}], "stats": {"total": 270, "additions": 138, "deletions": 132}, "files": [{"sha": "8a58cb056807446cfa61fdfae0b3892722d22470", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -33,19 +33,19 @@ use std::rc::Rc;\n \n // (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'gcx: 'tcx, 'tcx: 'b> {\n-    borrows: FlowAtLocation<Borrows<'b, 'gcx, 'tcx>>,\n-    pub uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n-    pub ever_inits: FlowAtLocation<EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n+    borrows: FlowAtLocation<'tcx, Borrows<'b, 'gcx, 'tcx>>,\n+    pub uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n+    pub ever_inits: FlowAtLocation<'tcx, EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n \n     /// Polonius Output\n     pub polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n }\n \n impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n     crate fn new(\n-        borrows: FlowAtLocation<Borrows<'b, 'gcx, 'tcx>>,\n-        uninits: FlowAtLocation<MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n-        ever_inits: FlowAtLocation<EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n+        borrows: FlowAtLocation<'tcx, Borrows<'b, 'gcx, 'tcx>>,\n+        uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'gcx, 'tcx>>,\n+        ever_inits: FlowAtLocation<'tcx, EverInitializedPlaces<'b, 'gcx, 'tcx>>,\n         polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n     ) -> Self {\n         Flows {"}, {"sha": "31866034cc3ef3520743747eebaed428a15ace48", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -85,7 +85,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'gcx>,\n-    flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'cx, 'gcx, 'tcx>>,\n+    flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'cx, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n     errors_buffer: &mut Vec<Diagnostic>,"}, {"sha": "7b216d8e587ccd185d983fa3a72f01c02d6be59f", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -39,7 +39,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n     typeck: &mut TypeChecker<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     elements: &Rc<RegionValueElements>,\n-    flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n+    flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     location_table: &LocationTable,\n ) {"}, {"sha": "1fbde2ae59dee5fb794060a414f3b821b9a07985", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -46,7 +46,7 @@ pub(super) fn trace(\n     typeck: &mut TypeChecker<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     elements: &Rc<RegionValueElements>,\n-    flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n+    flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     liveness_map: &NllLivenessMap,\n     location_table: &LocationTable,\n@@ -99,7 +99,7 @@ where\n \n     /// Results of dataflow tracking which variables (and paths) have been\n     /// initialized.\n-    flow_inits: &'me mut FlowAtLocation<MaybeInitializedPlaces<'flow, 'gcx, 'tcx>>,\n+    flow_inits: &'me mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'flow, 'gcx, 'tcx>>,\n \n     /// Index indicating where each variable is assigned, used, or\n     /// dropped."}, {"sha": "8ff7d625f2e18aa377b91ba74f9cd4f07497fce3", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -122,7 +122,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     location_table: &LocationTable,\n     borrow_set: &BorrowSet<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n-    flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n+    flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n ) -> MirTypeckResults<'tcx> {"}, {"sha": "c3c28c0ec3da47c6339703b72208628ed3fcb915", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -70,19 +70,19 @@ pub trait FlowsAtLocation {\n /// (e.g. via `reconstruct_statement_effect` and\n /// `reconstruct_terminator_effect`; don't forget to call\n /// `apply_local_effect`).\n-pub struct FlowAtLocation<BD>\n+pub struct FlowAtLocation<'tcx, BD>\n where\n-    BD: BitDenotation,\n+    BD: BitDenotation<'tcx>,\n {\n-    base_results: DataflowResults<BD>,\n+    base_results: DataflowResults<'tcx, BD>,\n     curr_state: BitSet<BD::Idx>,\n     stmt_gen: HybridBitSet<BD::Idx>,\n     stmt_kill: HybridBitSet<BD::Idx>,\n }\n \n-impl<BD> FlowAtLocation<BD>\n+impl<'tcx, BD> FlowAtLocation<'tcx, BD>\n where\n-    BD: BitDenotation,\n+    BD: BitDenotation<'tcx>,\n {\n     /// Iterate over each bit set in the current state.\n     pub fn each_state_bit<F>(&self, f: F)\n@@ -102,7 +102,7 @@ where\n         self.stmt_gen.iter().for_each(f)\n     }\n \n-    pub fn new(results: DataflowResults<BD>) -> Self {\n+    pub fn new(results: DataflowResults<'tcx, BD>) -> Self {\n         let bits_per_block = results.sets().bits_per_block();\n         let curr_state = BitSet::new_empty(bits_per_block);\n         let stmt_gen = HybridBitSet::new_empty(bits_per_block);\n@@ -143,8 +143,8 @@ where\n     }\n }\n \n-impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n-    where BD: BitDenotation\n+impl<'tcx, BD> FlowsAtLocation for FlowAtLocation<'tcx, BD>\n+    where BD: BitDenotation<'tcx>\n {\n     fn reset_to_entry_of(&mut self, bb: BasicBlock) {\n         self.curr_state.overwrite(self.base_results.sets().on_entry_set_for(bb.index()));\n@@ -213,9 +213,9 @@ impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n }\n \n \n-impl<'tcx, T> FlowAtLocation<T>\n+impl<'tcx, T> FlowAtLocation<'tcx, T>\n where\n-    T: HasMoveData<'tcx> + BitDenotation<Idx = MovePathIndex>,\n+    T: HasMoveData<'tcx> + BitDenotation<'tcx, Idx = MovePathIndex>,\n {\n     pub fn has_any_child_of(&self, mpi: T::Idx) -> Option<T::Idx> {\n         // We process `mpi` before the loop below, for two reasons:"}, {"sha": "0ab34c47f12a8f280f321d7b8cdf540d66fe4bce", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -25,19 +25,19 @@ use super::DataflowBuilder;\n use super::DebugFormatted;\n \n pub trait MirWithFlowState<'tcx> {\n-    type BD: BitDenotation;\n+    type BD: BitDenotation<'tcx>;\n     fn node_id(&self) -> NodeId;\n     fn mir(&self) -> &Mir<'tcx>;\n-    fn flow_state(&self) -> &DataflowState<Self::BD>;\n+    fn flow_state(&self) -> &DataflowState<'tcx, Self::BD>;\n }\n \n impl<'a, 'tcx, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n-    where BD: BitDenotation\n+    where BD: BitDenotation<'tcx>\n {\n     type BD = BD;\n     fn node_id(&self) -> NodeId { self.node_id }\n     fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }\n-    fn flow_state(&self) -> &DataflowState<Self::BD> { &self.flow_state.flow_state }\n+    fn flow_state(&self) -> &DataflowState<'tcx, Self::BD> { &self.flow_state.flow_state }\n }\n \n struct Graph<'a, 'tcx, MWF:'a, P> where\n@@ -53,8 +53,8 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     path: &Path,\n     render_idx: P)\n     -> io::Result<()>\n-    where BD: BitDenotation,\n-          P: Fn(&BD, BD::Idx) -> DebugFormatted\n+    where BD: BitDenotation<'tcx>,\n+          P: Fn(&BD, BD::Idx) -> DebugFormatted,\n {\n     let g = Graph { mbcx, phantom: PhantomData, render_idx };\n     let mut v = Vec::new();\n@@ -76,7 +76,7 @@ fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n \n impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     where MWF: MirWithFlowState<'tcx>,\n-          P: Fn(&MWF::BD, <MWF::BD as BitDenotation>::Idx) -> DebugFormatted,\n+          P: Fn(&MWF::BD, <MWF::BD as BitDenotation<'tcx>>::Idx) -> DebugFormatted,\n {\n     type Node = Node;\n     type Edge = Edge;\n@@ -128,7 +128,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n \n impl<'a, 'tcx, MWF, P> Graph<'a, 'tcx, MWF, P>\n where MWF: MirWithFlowState<'tcx>,\n-      P: Fn(&MWF::BD, <MWF::BD as BitDenotation>::Idx) -> DebugFormatted,\n+      P: Fn(&MWF::BD, <MWF::BD as BitDenotation<'tcx>>::Idx) -> DebugFormatted,\n {\n     /// Generate the node label\n     fn node_label_internal<W: io::Write>(&self,"}, {"sha": "374f7071ffac26ac4f53e7c66a04befd7b92aa30", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n+impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n     type Idx = Local;\n     fn name() -> &'static str { \"has_been_borrowed_locals\" }\n     fn bits_per_block(&self) -> usize {\n@@ -71,11 +71,13 @@ impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n         }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n     }\n \n-    fn propagate_call_return(&self,\n-                             _in_out: &mut BitSet<Local>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             _dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        _in_out: &mut BitSet<Local>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        _dest_place: &mir::Place<'tcx>,\n+    ) {\n         // Nothing to do when a call returns successfully\n     }\n }"}, {"sha": "9195c167c7d2ed817c4ff4ba52f4ec34068d8ca7", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -195,18 +195,14 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     fn kill_borrows_on_place(\n         &self,\n         sets: &mut BlockSets<BorrowIndex>,\n-        location: Location,\n         place: &Place<'tcx>\n     ) {\n-        debug!(\"kill_borrows_on_place: location={:?} place={:?}\", location, place);\n+        debug!(\"kill_borrows_on_place: place={:?}\", place);\n         // Handle the `Place::Local(..)` case first and exit early.\n         if let Place::Local(local) = place {\n-            if let Some(borrow_indexes) = self.borrow_set.local_map.get(&local) {\n-                debug!(\n-                    \"kill_borrows_on_place: local={:?} borrow_indexes={:?}\",\n-                    local, borrow_indexes,\n-                );\n-                sets.kill_all(borrow_indexes);\n+            if let Some(borrow_indices) = self.borrow_set.local_map.get(&local) {\n+                debug!(\"kill_borrows_on_place: borrow_indices={:?}\", borrow_indices);\n+                sets.kill_all(borrow_indices);\n                 return;\n             }\n         }\n@@ -234,16 +230,16 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                 places_conflict::PlaceConflictBias::NoOverlap,\n             ) {\n                 debug!(\n-                    \"kill_borrows_on_place: (kill) place={:?} borrow_index={:?} borrow_data={:?}\",\n-                    place, borrow_index, borrow_data,\n+                    \"kill_borrows_on_place: (kill) borrow_index={:?} borrow_data={:?}\",\n+                    borrow_index, borrow_data,\n                 );\n                 sets.kill(borrow_index);\n             }\n         }\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n     type Idx = BorrowIndex;\n     fn name() -> &'static str { \"borrows\" }\n     fn bits_per_block(&self) -> usize {\n@@ -278,12 +274,8 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::Assign(ref lhs, ref rhs) => {\n                 // Make sure there are no remaining borrows for variables\n                 // that are assigned over.\n-                self.kill_borrows_on_place(sets, location, lhs);\n+                self.kill_borrows_on_place(sets, lhs);\n \n-                // NOTE: if/when the Assign case is revised to inspect\n-                // the assigned_place here, make sure to also\n-                // re-consider the current implementations of the\n-                // propagate_call_return method.\n                 if let mir::Rvalue::Ref(_, _, ref place) = **rhs {\n                     if place.ignore_borrow(\n                         self.tcx,\n@@ -317,13 +309,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::StorageDead(local) => {\n                 // Make sure there are no remaining borrows for locals that\n                 // are gone out of scope.\n-                self.kill_borrows_on_place(sets, location, &Place::Local(local));\n+                self.kill_borrows_on_place(sets, &Place::Local(local));\n             }\n \n             mir::StatementKind::InlineAsm { ref outputs, ref asm, .. } => {\n                 for (output, kind) in outputs.iter().zip(&asm.outputs) {\n                     if !kind.is_indirect && !kind.is_rw {\n-                        self.kill_borrows_on_place(sets, location, output);\n+                        self.kill_borrows_on_place(sets, output);\n                     }\n                 }\n             }\n@@ -348,16 +340,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n \n     fn terminator_effect(&self, _: &mut BlockSets<BorrowIndex>, _: Location) {}\n \n-    fn propagate_call_return(&self,\n-                             _in_out: &mut BitSet<BorrowIndex>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             _dest_place: &mir::Place) {\n-        // there are no effects on borrows from method call return...\n-        //\n-        // ... but if overwriting a place can affect flow state, then\n-        // latter is not true; see NOTE on Assign case in\n-        // statement_effect_on_borrows.\n+    fn propagate_call_return(\n+        &self,\n+        _in_out: &mut BitSet<BorrowIndex>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        _dest_place: &mir::Place<'tcx>,\n+    ) {\n     }\n }\n "}, {"sha": "4901061732f103cc521879f71f8ed8548d74c2b3", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitDenotation for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     type Idx = MovePathIndex;\n     fn name() -> &'static str { \"maybe_init\" }\n     fn bits_per_block(&self) -> usize {\n@@ -331,11 +331,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n         )\n     }\n \n-    fn propagate_call_return(&self,\n-                             in_out: &mut BitSet<MovePathIndex>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        in_out: &mut BitSet<MovePathIndex>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        dest_place: &mir::Place<'tcx>,\n+    ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, self.move_data(),\n@@ -344,7 +346,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n     type Idx = MovePathIndex;\n     fn name() -> &'static str { \"maybe_uninit\" }\n     fn bits_per_block(&self) -> usize {\n@@ -387,11 +389,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedPlaces<'a, 'gcx, 'tcx>\n         )\n     }\n \n-    fn propagate_call_return(&self,\n-                             in_out: &mut BitSet<MovePathIndex>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        in_out: &mut BitSet<MovePathIndex>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        dest_place: &mir::Place<'tcx>,\n+    ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 0 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, self.move_data(),\n@@ -400,7 +404,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedPlaces<'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     type Idx = MovePathIndex;\n     fn name() -> &'static str { \"definite_init\" }\n     fn bits_per_block(&self) -> usize {\n@@ -441,11 +445,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedPlaces<'a, 'gcx, 'tc\n         )\n     }\n \n-    fn propagate_call_return(&self,\n-                             in_out: &mut BitSet<MovePathIndex>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        in_out: &mut BitSet<MovePathIndex>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        dest_place: &mir::Place<'tcx>,\n+    ) {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.mir, self.move_data(),\n@@ -454,7 +460,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedPlaces<'a, 'gcx, 'tc\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     type Idx = InitIndex;\n     fn name() -> &'static str { \"ever_init\" }\n     fn bits_per_block(&self) -> usize {\n@@ -530,11 +536,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    fn propagate_call_return(&self,\n-                             in_out: &mut BitSet<InitIndex>,\n-                             call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             _dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        in_out: &mut BitSet<InitIndex>,\n+        call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        _dest_place: &mir::Place<'tcx>,\n+    ) {\n         let move_data = self.move_data();\n         let bits_per_block = self.bits_per_block();\n         let init_loc_map = &move_data.init_loc_map;"}, {"sha": "caf3d3f7ab6c8d15d4dfcb24e3ad5d888cdb9ab1", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx: 'a> MaybeStorageLive<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n+impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n     type Idx = Local;\n     fn name() -> &'static str { \"maybe_storage_live\" }\n     fn bits_per_block(&self) -> usize {\n@@ -58,11 +58,13 @@ impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n         // Terminators have no effect\n     }\n \n-    fn propagate_call_return(&self,\n-                             _in_out: &mut BitSet<Local>,\n-                             _call_bb: mir::BasicBlock,\n-                             _dest_bb: mir::BasicBlock,\n-                             _dest_place: &mir::Place) {\n+    fn propagate_call_return(\n+        &self,\n+        _in_out: &mut BitSet<Local>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        _dest_place: &mir::Place<'tcx>,\n+    ) {\n         // Nothing to do when a call returns successfully\n     }\n }"}, {"sha": "4e8716f3d856e4cad0c5a0f8070236ddb2c1e7fa", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -44,7 +44,9 @@ pub mod move_paths;\n \n pub(crate) use self::move_paths::indexes;\n \n-pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD> where BD: BitDenotation\n+pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD>\n+where\n+    BD: BitDenotation<'tcx>\n {\n     node_id: ast::NodeId,\n     flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n@@ -71,7 +73,7 @@ impl fmt::Debug for DebugFormatted {\n     }\n }\n \n-pub(crate) trait Dataflow<BD: BitDenotation> {\n+pub(crate) trait Dataflow<'tcx, BD: BitDenotation<'tcx>> {\n     /// Sets up and runs the dataflow problem, using `p` to render results if\n     /// implementation so chooses.\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> DebugFormatted {\n@@ -87,7 +89,9 @@ pub(crate) trait Dataflow<BD: BitDenotation> {\n     fn propagate(&mut self);\n }\n \n-impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n+impl<'a, 'tcx: 'a, BD> Dataflow<'tcx, BD> for DataflowBuilder<'a, 'tcx, BD>\n+where\n+    BD: BitDenotation<'tcx>\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> DebugFormatted {\n         self.flow_state.build_sets();\n@@ -127,21 +131,21 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  dead_unwinds: &BitSet<BasicBlock>,\n                                                  bd: BD,\n                                                  p: P)\n-                                                 -> DataflowResults<BD>\n-    where BD: BitDenotation + InitialFlow,\n+                                                 -> DataflowResults<'tcx, BD>\n+    where BD: BitDenotation<'tcx> + InitialFlow,\n           P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n     let flow_state = DataflowAnalysis::new(mir, dead_unwinds, bd);\n     flow_state.run(tcx, node_id, attributes, p)\n }\n \n-impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n+impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     pub(crate) fn run<P>(self,\n                          tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                          node_id: ast::NodeId,\n                          attributes: &[ast::Attribute],\n-                         p: P) -> DataflowResults<BD>\n+                         p: P) -> DataflowResults<'tcx, BD>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n     {\n         let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n@@ -173,12 +177,12 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitD\n     }\n }\n \n-struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O> where O: 'b + BitDenotation\n+struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O> where O: 'b + BitDenotation<'tcx>\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n+impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn propagate(&mut self) {\n         let mut temp = BitSet::new_empty(self.flow_state.sets.bits_per_block);\n@@ -228,7 +232,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n     }\n }\n \n-impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation\n+impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n         let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n@@ -259,7 +263,7 @@ fn dataflow_path(context: &str, path: &str) -> PathBuf {\n     path\n }\n \n-impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n+impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n@@ -347,10 +351,10 @@ pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n     fn mir(&self) -> &'a Mir<'tcx>;\n }\n \n-pub fn state_for_location<'tcx, T: BitDenotation>(loc: Location,\n-                                                  analysis: &T,\n-                                                  result: &DataflowResults<T>,\n-                                                  mir: &Mir<'tcx>)\n+pub fn state_for_location<'tcx, T: BitDenotation<'tcx>>(loc: Location,\n+                                                        analysis: &T,\n+                                                        result: &DataflowResults<'tcx, T>,\n+                                                        mir: &Mir<'tcx>)\n     -> BitSet<T::Idx> {\n     let mut on_entry = result.sets().on_entry_set_for(loc.block.index()).to_owned();\n     let mut kill_set = on_entry.to_hybrid();\n@@ -381,25 +385,25 @@ pub fn state_for_location<'tcx, T: BitDenotation>(loc: Location,\n     gen_set.to_dense()\n }\n \n-pub struct DataflowAnalysis<'a, 'tcx: 'a, O> where O: BitDenotation\n+pub struct DataflowAnalysis<'a, 'tcx: 'a, O> where O: BitDenotation<'tcx>\n {\n-    flow_state: DataflowState<O>,\n+    flow_state: DataflowState<'tcx, O>,\n     dead_unwinds: &'a BitSet<mir::BasicBlock>,\n     mir: &'a Mir<'tcx>,\n }\n \n-impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation\n+impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O> where O: BitDenotation<'tcx>\n {\n-    pub fn results(self) -> DataflowResults<O> {\n+    pub fn results(self) -> DataflowResults<'tcx, O> {\n         DataflowResults(self.flow_state)\n     }\n \n     pub fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n }\n \n-pub struct DataflowResults<O>(pub(crate) DataflowState<O>) where O: BitDenotation;\n+pub struct DataflowResults<'tcx, O>(pub(crate) DataflowState<'tcx, O>) where O: BitDenotation<'tcx>;\n \n-impl<O: BitDenotation> DataflowResults<O> {\n+impl<'tcx, O: BitDenotation<'tcx>> DataflowResults<'tcx, O> {\n     pub fn sets(&self) -> &AllSets<O::Idx> {\n         &self.0.sets\n     }\n@@ -411,7 +415,7 @@ impl<O: BitDenotation> DataflowResults<O> {\n \n /// State of a dataflow analysis; couples a collection of bit sets\n /// with operator used to initialize and merge bits during analysis.\n-pub struct DataflowState<O: BitDenotation>\n+pub struct DataflowState<'tcx, O: BitDenotation<'tcx>>\n {\n     /// All the sets for the analysis. (Factored into its\n     /// own structure so that we can borrow it mutably\n@@ -422,7 +426,7 @@ pub struct DataflowState<O: BitDenotation>\n     pub(crate) operator: O,\n }\n \n-impl<O: BitDenotation> DataflowState<O> {\n+impl<'tcx, O: BitDenotation<'tcx>> DataflowState<'tcx, O> {\n     pub(crate) fn interpret_set<'c, P>(&self,\n                                        o: &'c O,\n                                        set: &BitSet<O::Idx>,\n@@ -561,7 +565,7 @@ pub trait InitialFlow {\n     fn bottom_value() -> bool;\n }\n \n-pub trait BitDenotation: BitSetOperator {\n+pub trait BitDenotation<'tcx>: BitSetOperator {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n@@ -687,14 +691,16 @@ pub trait BitDenotation: BitSetOperator {\n     /// be better to represent this as an additional gen- and\n     /// kill-sets associated with each edge coming out of the basic\n     /// block.\n-    fn propagate_call_return(&self,\n-                             in_out: &mut BitSet<Self::Idx>,\n-                             call_bb: mir::BasicBlock,\n-                             dest_bb: mir::BasicBlock,\n-                             dest_place: &mir::Place);\n+    fn propagate_call_return(\n+        &self,\n+        in_out: &mut BitSet<Self::Idx>,\n+        call_bb: mir::BasicBlock,\n+        dest_bb: mir::BasicBlock,\n+        dest_place: &mir::Place<'tcx>,\n+    );\n }\n \n-impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n+impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx>\n {\n     pub fn new(mir: &'a Mir<'tcx>,\n                dead_unwinds: &'a BitSet<mir::BasicBlock>,\n@@ -726,8 +732,7 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n     }\n }\n \n-impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n-{\n+impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx> {\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`.\n     ///\n@@ -744,7 +749,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n     fn propagate_bits_into_graph_successors_of(\n         &mut self,\n         in_out: &mut BitSet<D::Idx>,\n-        (bb, bb_data): (mir::BasicBlock, &mir::BasicBlockData),\n+        (bb, bb_data): (mir::BasicBlock, &mir::BasicBlockData<'tcx>),\n         dirty_list: &mut WorkQueue<mir::BasicBlock>)\n     {\n         match bb_data.terminator().kind {"}, {"sha": "6068af8a46d76001a1266fa6e309c4226e5f1e8b", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -303,8 +303,8 @@ struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &'a Mir<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx, 'tcx>,\n-    flow_inits: DataflowResults<MaybeInitializedPlaces<'a, 'tcx, 'tcx>>,\n-    flow_uninits:  DataflowResults<MaybeUninitializedPlaces<'a, 'tcx, 'tcx>>,\n+    flow_inits: DataflowResults<'tcx, MaybeInitializedPlaces<'a, 'tcx, 'tcx>>,\n+    flow_uninits:  DataflowResults<'tcx, MaybeUninitializedPlaces<'a, 'tcx, 'tcx>>,\n     drop_flags: FxHashMap<MovePathIndex, Local>,\n     patch: MirPatch<'tcx>,\n }"}, {"sha": "a2123449f8bafd89865c25f1f8896f1d1b171a91", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b628e18a323505c175415013bcd854f38d0216e/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=7b628e18a323505c175415013bcd854f38d0216e", "patch": "@@ -95,8 +95,8 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 mir: &Mir<'tcx>,\n                                                 id: ast::NodeId,\n                                                 _attributes: &[ast::Attribute],\n-                                                results: &DataflowResults<O>)\n-    where O: BitDenotation<Idx=MovePathIndex> + HasMoveData<'tcx>\n+                                                results: &DataflowResults<'tcx, O>)\n+    where O: BitDenotation<'tcx, Idx=MovePathIndex> + HasMoveData<'tcx>\n {\n     debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n@@ -110,9 +110,9 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            mir: &Mir<'tcx>,\n-                           results: &DataflowResults<O>,\n+                           results: &DataflowResults<'tcx, O>,\n                            bb: mir::BasicBlock) where\n-    O: BitDenotation<Idx=MovePathIndex> + HasMoveData<'tcx>\n+    O: BitDenotation<'tcx, Idx=MovePathIndex> + HasMoveData<'tcx>\n {\n     let move_data = results.0.operator.move_data();\n     let mir::BasicBlockData { ref statements, ref terminator, is_cleanup: _ } = mir[bb];"}]}