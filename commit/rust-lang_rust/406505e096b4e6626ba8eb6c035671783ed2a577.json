{"sha": "406505e096b4e6626ba8eb6c035671783ed2a577", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjUwNWUwOTZiNGU2NjI2YmE4ZWI2YzAzNTY3MTc4M2VkMmE1Nzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T13:59:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T13:59:58Z"}, "message": "super simplistic macro expansion", "tree": {"sha": "6bd7e4eef15f3632f234aaa93f869062e030b381", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bd7e4eef15f3632f234aaa93f869062e030b381"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406505e096b4e6626ba8eb6c035671783ed2a577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406505e096b4e6626ba8eb6c035671783ed2a577", "html_url": "https://github.com/rust-lang/rust/commit/406505e096b4e6626ba8eb6c035671783ed2a577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406505e096b4e6626ba8eb6c035671783ed2a577/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072028e67996162f5a9da14cfd59ed64de5e8729", "url": "https://api.github.com/repos/rust-lang/rust/commits/072028e67996162f5a9da14cfd59ed64de5e8729", "html_url": "https://github.com/rust-lang/rust/commit/072028e67996162f5a9da14cfd59ed64de5e8729"}], "stats": {"total": 115, "additions": 113, "deletions": 2}, "files": [{"sha": "80f51a09c9a5657fec18b49958fa2e48430baeb0", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=406505e096b4e6626ba8eb6c035671783ed2a577", "patch": "@@ -1,3 +1,4 @@\n+use ra_syntax::{ast, AstNode, SourceFileNode, TextRange};\n use ra_editor::HighlightedRange;\n use ra_db::SyntaxDatabase;\n \n@@ -9,6 +10,112 @@ use crate::{\n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n     let source_file = db.source_file(file_id);\n     let mut res = ra_editor::highlight(&source_file);\n-    for node in source_file.syntax().descendants() {}\n+    for macro_call in source_file\n+        .syntax()\n+        .descendants()\n+        .filter_map(ast::MacroCall::cast)\n+    {\n+        if let Some(exp) = expand(db, file_id, macro_call) {\n+            let mapped_ranges = ra_editor::highlight(exp.source_file())\n+                .into_iter()\n+                .filter_map(|r| {\n+                    let mapped_range = exp.map_range_back(r.range)?;\n+                    let res = HighlightedRange {\n+                        range: mapped_range,\n+                        tag: r.tag,\n+                    };\n+                    Some(res)\n+                });\n+            res.extend(mapped_ranges);\n+        }\n+    }\n     Ok(res)\n }\n+\n+fn expand(\n+    _db: &RootDatabase,\n+    _file_id: FileId,\n+    macro_call: ast::MacroCall,\n+) -> Option<MacroExpansion> {\n+    let path = macro_call.path()?;\n+    if path.qualifier().is_some() {\n+        return None;\n+    }\n+    let name_ref = path.segment()?.name_ref()?;\n+    if name_ref.text() != \"ctry\" {\n+        return None;\n+    }\n+\n+    let arg = macro_call.token_tree()?;\n+    let text = format!(\n+        r\"\n+        fn dummy() {{\n+            match {} {{\n+                None => return Ok(None),\n+                Some(it) => it,\n+            }}\n+        }}\",\n+        arg.syntax().text()\n+    );\n+    let file = SourceFileNode::parse(&text);\n+    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n+    let match_arg = match_expr.expr()?;\n+    let ranges_map = vec![(arg.syntax().range(), match_arg.syntax().range())];\n+    let res = MacroExpansion {\n+        source_file: file,\n+        ranges_map,\n+    };\n+    Some(res)\n+}\n+\n+struct MacroExpansion {\n+    source_file: SourceFileNode,\n+    ranges_map: Vec<(TextRange, TextRange)>,\n+}\n+\n+impl MacroExpansion {\n+    fn source_file(&self) -> &SourceFileNode {\n+        &self.source_file\n+    }\n+    fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if tgt_range.is_subrange(&t_range) {\n+                let tgt_at_zero_range = tgt_range - tgt_range.start();\n+                let tgt_range_offset = tgt_range.start() - t_range.start();\n+                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::single_file;\n+    use test_utils::assert_eq_dbg;\n+\n+    #[test]\n+    fn highlights_code_inside_macros() {\n+        let (analysis, file_id) = single_file(\n+            \"\n+            fn main() {\n+                ctry!({ let x = 92; x});\n+            }\n+        \",\n+        );\n+        let highlights = analysis.highlight(file_id).unwrap();\n+        assert_eq_dbg(\n+            r#\"[HighlightedRange { range: [13; 15), tag: \"keyword\" },\n+                HighlightedRange { range: [16; 20), tag: \"function\" },\n+                HighlightedRange { range: [41; 45), tag: \"text\" },\n+                HighlightedRange { range: [49; 52), tag: \"keyword\" },\n+                HighlightedRange { range: [57; 59), tag: \"literal\" },\n+                HighlightedRange { range: [49; 52), tag: \"keyword\" },\n+                HighlightedRange { range: [53; 54), tag: \"function\" },\n+                HighlightedRange { range: [57; 59), tag: \"literal\" },\n+                HighlightedRange { range: [61; 62), tag: \"text\" }]\"#,\n+            &highlights,\n+        )\n+    }\n+}"}, {"sha": "c5ac90a62a83caf3773e8acdc93fe2bf821b077a", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=406505e096b4e6626ba8eb6c035671783ed2a577", "patch": "@@ -1877,6 +1877,10 @@ impl<'a> MacroCall<'a> {\n     pub fn token_tree(self) -> Option<TokenTree<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn path(self) -> Option<Path<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // MatchArm"}, {"sha": "aab4839a9f634364543f3eb9d442effe163be814", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/406505e096b4e6626ba8eb6c035671783ed2a577/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=406505e096b4e6626ba8eb6c035671783ed2a577", "patch": "@@ -484,7 +484,7 @@ Grammar(\n \n         \"Name\": (),\n         \"NameRef\": (),\n-        \"MacroCall\": ( options: [ \"TokenTree\" ] ),\n+        \"MacroCall\": ( options: [ \"TokenTree\", \"Path\" ] ),\n         \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),\n         \"TokenTree\": (),\n         \"TypeParamList\": ("}]}