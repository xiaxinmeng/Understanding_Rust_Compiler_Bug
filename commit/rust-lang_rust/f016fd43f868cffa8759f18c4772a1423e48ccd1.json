{"sha": "f016fd43f868cffa8759f18c4772a1423e48ccd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMTZmZDQzZjg2OGNmZmE4NzU5ZjE4YzQ3NzJhMTQyM2U0OGNjZDE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-10T03:05:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-10T03:05:41Z"}, "message": "Remove section on 'note' expressions, they won't exist.", "tree": {"sha": "ee48bc26ecbe4c2ccda6b1fa6edfcf18a544111b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee48bc26ecbe4c2ccda6b1fa6edfcf18a544111b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f016fd43f868cffa8759f18c4772a1423e48ccd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f016fd43f868cffa8759f18c4772a1423e48ccd1", "html_url": "https://github.com/rust-lang/rust/commit/f016fd43f868cffa8759f18c4772a1423e48ccd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f016fd43f868cffa8759f18c4772a1423e48ccd1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1165f5610a5c35ec94e3524200977fdf64ef0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1165f5610a5c35ec94e3524200977fdf64ef0c", "html_url": "https://github.com/rust-lang/rust/commit/fe1165f5610a5c35ec94e3524200977fdf64ef0c"}], "stats": {"total": 48, "additions": 0, "deletions": 48}, "files": [{"sha": "f24371cb8d51479f884d66551756240cc2d6d68a", "filename": "doc/rust.md", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f016fd43f868cffa8759f18c4772a1423e48ccd1/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f016fd43f868cffa8759f18c4772a1423e48ccd1/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=f016fd43f868cffa8759f18c4772a1423e48ccd1", "patch": "@@ -2182,54 +2182,6 @@ the *failing* state, a task unwinds its stack, destroying all frames and\n freeing all resources until it reaches its entry frame, at which point it\n halts execution in the *dead* state.\n \n-### Note expressions\n-\n-~~~~~~~~{.ebnf .gram}\n-note_expr : \"note\" expr ;\n-~~~~~~~~\n-\n-**Note: Note expressions are not yet supported by the compiler.**\n-\n-A `note` expression has no effect during normal execution. The purpose of a\n-`note` expression is to provide additional diagnostic information to the\n-logging subsystem during task failure. See [log\n-expressions](#log-expressions). Using `note` expressions, normal diagnostic\n-logging can be kept relatively sparse, while still providing verbose\n-diagnostic \"back-traces\" when a task fails.\n-\n-When a task is failing, control frames *unwind* from the innermost frame to\n-the outermost, and from the innermost lexical block within an unwinding frame\n-to the outermost. When unwinding a lexical block, the runtime processes all\n-the `note` expressions in the block sequentially, from the first expression of\n-the block to the last.  During processing, a `note` expression has equivalent\n-meaning to a `log` expression: it causes the runtime to append the argument of\n-the `note` to the internal logging diagnostic buffer.\n-\n-An example of a `note` expression:\n-\n-~~~~{.xfail-test}\n-fn read_file_lines(path: ~str) -> ~[~str] {\n-    note path;\n-    let r: [~str];\n-    let f: file = open_read(path);\n-    lines(f) |s| {\n-        r += ~[s];\n-    }\n-    return r;\n-}\n-~~~~\n-\n-In this example, if the task fails while attempting to open or read a file,\n-the runtime will log the path name that was being read. If the function\n-completes normally, the runtime will not log the path.\n-\n-A value that is marked by a `note` expression is *not* copied aside\n-when control passes through the `note`. In other words, if a `note`\n-expression notes a particular `lval`, and code after the `note`\n-mutates that slot, and then a subsequent failure occurs, the *mutated*\n-value will be logged during unwinding, *not* the original value that was\n-denoted by the `lval` at the moment control passed through the `note`\n-expression.\n \n ### Return expressions\n "}]}