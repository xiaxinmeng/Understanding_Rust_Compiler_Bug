{"sha": "c6ee9d681c7c745e95f19badef271fec34ec2e36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWU5ZDY4MWM3Yzc0NWU5NWYxOWJhZGVmMjcxZmVjMzRlYzJlMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T12:14:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T12:14:11Z"}, "message": "add tests for primitive types", "tree": {"sha": "ed0511c6c0927b14ea39bf9f34032260b588b2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0511c6c0927b14ea39bf9f34032260b588b2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ee9d681c7c745e95f19badef271fec34ec2e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ee9d681c7c745e95f19badef271fec34ec2e36", "html_url": "https://github.com/rust-lang/rust/commit/c6ee9d681c7c745e95f19badef271fec34ec2e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ee9d681c7c745e95f19badef271fec34ec2e36/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "html_url": "https://github.com/rust-lang/rust/commit/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "a15e62bbe620ef2bb019bd67b07bddd6276bec64", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=c6ee9d681c7c745e95f19badef271fec34ec2e36", "patch": "@@ -1,6 +1,7 @@\n mod macros;\n mod globs;\n mod incremental;\n+mod primitives;\n \n use std::sync::Arc;\n "}, {"sha": "734744835a39d64d6b6bb0b4eb6aad41dd14687f", "filename": "crates/ra_hir/src/nameres/tests/primitives.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs?ref=c6ee9d681c7c745e95f19badef271fec34ec2e36", "patch": "@@ -0,0 +1,24 @@\n+use super::*;\n+\n+#[test]\n+fn primitive_reexport() {\n+    let map = def_map(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        use foo::int;\n+\n+        //- /foo.rs\n+        pub use i32 as int;\n+        \",\n+    );\n+    assert_snapshot_matches!(map, @r###\"\n+   \u22eecrate\n+   \u22eefoo: t\n+   \u22eeint: t\n+   \u22ee\n+   \u22eecrate::foo\n+   \u22eeint: t\n+    \"###\n+    );\n+}"}, {"sha": "71cd722345d2069d58b7142a48f62f3ca277b736", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=c6ee9d681c7c745e95f19badef271fec34ec2e36", "patch": "@@ -12,7 +12,6 @@ use crate::{\n     Function, Struct, Union, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n     HirDatabase, BuiltinType,\n     type_ref::TypeRef,\n-    name::KnownName,\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n     path::{PathSegment, GenericArg},\n@@ -22,7 +21,7 @@ use crate::{\n     generics::{WherePredicate, GenericDef},\n     ty::AdtDef,\n };\n-use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n+use super::{Ty, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n \n impl Ty {\n     pub(crate) fn from_hir(db: &impl HirDatabase, resolver: &Resolver, type_ref: &TypeRef) -> Self {"}, {"sha": "62b75b764d73909c16dba587b9c6a618aabd6862", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=c6ee9d681c7c745e95f19badef271fec34ec2e36", "patch": "@@ -1,7 +1,5 @@\n use std::fmt;\n \n-use crate::{Name, KnownName};\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum Signedness {\n     Signed,\n@@ -150,24 +148,6 @@ impl IntTy {\n         }\n     }\n \n-    pub(crate) fn from_type_name(name: &Name) -> Option<IntTy> {\n-        match name.as_known_name()? {\n-            KnownName::Isize => Some(IntTy::isize()),\n-            KnownName::I8 => Some(IntTy::i8()),\n-            KnownName::I16 => Some(IntTy::i16()),\n-            KnownName::I32 => Some(IntTy::i32()),\n-            KnownName::I64 => Some(IntTy::i64()),\n-            KnownName::I128 => Some(IntTy::i128()),\n-            KnownName::Usize => Some(IntTy::usize()),\n-            KnownName::U8 => Some(IntTy::u8()),\n-            KnownName::U16 => Some(IntTy::u16()),\n-            KnownName::U32 => Some(IntTy::u32()),\n-            KnownName::U64 => Some(IntTy::u64()),\n-            KnownName::U128 => Some(IntTy::u128()),\n-            _ => None,\n-        }\n-    }\n-\n     pub(crate) fn from_suffix(suffix: &str) -> Option<IntTy> {\n         match suffix {\n             \"isize\" => Some(IntTy::isize()),\n@@ -220,14 +200,6 @@ impl FloatTy {\n         }\n     }\n \n-    pub(crate) fn from_type_name(name: &Name) -> Option<FloatTy> {\n-        match name.as_known_name()? {\n-            KnownName::F32 => Some(FloatTy::f32()),\n-            KnownName::F64 => Some(FloatTy::f64()),\n-            _ => None,\n-        }\n-    }\n-\n     pub(crate) fn from_suffix(suffix: &str) -> Option<FloatTy> {\n         match suffix {\n             \"f32\" => Some(FloatTy::f32()),"}, {"sha": "c34e89af71fca33b7a77fb0eb8c2ee0c12e5a41d", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ee9d681c7c745e95f19badef271fec34ec2e36/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=c6ee9d681c7c745e95f19badef271fec34ec2e36", "patch": "@@ -2717,6 +2717,24 @@ fn test() { (S {}).method()<|>; }\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn shadowing_primitive() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct i32;\n+struct Foo;\n+\n+impl i32 { fn foo(&self) -> Foo { Foo } }\n+\n+fn main() {\n+    let x: i32 = i32;\n+    x.foo()<|>;\n+}\"#,\n+    );\n+    assert_eq!(t, \"Foo\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}]}