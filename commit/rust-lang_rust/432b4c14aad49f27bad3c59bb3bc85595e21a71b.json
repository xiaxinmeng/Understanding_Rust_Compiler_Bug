{"sha": "432b4c14aad49f27bad3c59bb3bc85595e21a71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmI0YzE0YWFkNDlmMjdiYWQzYzU5YmIzYmM4NTU5NWUyMWE3MWI=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-05-22T02:01:19Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-15T15:38:11Z"}, "message": "Use cfg_if in libtest.\n\nSimplifies some of the expressions, and provides a default.", "tree": {"sha": "db4b5ac9656b93a98633c2c6f1e3cf89331ca3b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4b5ac9656b93a98633c2c6f1e3cf89331ca3b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432b4c14aad49f27bad3c59bb3bc85595e21a71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432b4c14aad49f27bad3c59bb3bc85595e21a71b", "html_url": "https://github.com/rust-lang/rust/commit/432b4c14aad49f27bad3c59bb3bc85595e21a71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432b4c14aad49f27bad3c59bb3bc85595e21a71b/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "html_url": "https://github.com/rust-lang/rust/commit/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda"}], "stats": {"total": 229, "additions": 98, "deletions": 131}, "files": [{"sha": "386d5e960016a57cee2a20dad6b6d96f3c9fa03d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/432b4c14aad49f27bad3c59bb3bc85595e21a71b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/432b4c14aad49f27bad3c59bb3bc85595e21a71b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=432b4c14aad49f27bad3c59bb3bc85595e21a71b", "patch": "@@ -4552,6 +4552,7 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cfg-if\",\n  \"core\",\n  \"getopts\",\n  \"libc\","}, {"sha": "7dddfd264ef8a1fb458be70c7d303d1ec8830756", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=432b4c14aad49f27bad3c59bb3bc85595e21a71b", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n+cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n getopts = { version = \"0.2.21\", features = ['rustc-dep-of-std'] }\n term = { path = \"../libterm\" }\n std = { path = \"../libstd\" }"}, {"sha": "2fe87247e3acfc0951bb5c751d5f73f76dbb9194", "filename": "src/libtest/helpers/concurrency.rs", "status": "modified", "additions": 69, "deletions": 102, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fconcurrency.rs?ref=432b4c14aad49f27bad3c59bb3bc85595e21a71b", "patch": "@@ -14,61 +14,36 @@ pub fn get_concurrency() -> usize {\n         }\n         Err(..) => num_cpus(),\n     };\n+}\n \n-    #[cfg(windows)]\n-    #[allow(nonstandard_style)]\n-    fn num_cpus() -> usize {\n-        #[repr(C)]\n-        struct SYSTEM_INFO {\n-            wProcessorArchitecture: u16,\n-            wReserved: u16,\n-            dwPageSize: u32,\n-            lpMinimumApplicationAddress: *mut u8,\n-            lpMaximumApplicationAddress: *mut u8,\n-            dwActiveProcessorMask: *mut u8,\n-            dwNumberOfProcessors: u32,\n-            dwProcessorType: u32,\n-            dwAllocationGranularity: u32,\n-            wProcessorLevel: u16,\n-            wProcessorRevision: u16,\n-        }\n-        extern \"system\" {\n-            fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n-        }\n-        unsafe {\n-            let mut sysinfo = std::mem::zeroed();\n-            GetSystemInfo(&mut sysinfo);\n-            sysinfo.dwNumberOfProcessors as usize\n+cfg_if::cfg_if! {\n+    if #[cfg(windows)] {\n+        #[allow(nonstandard_style)]\n+        fn num_cpus() -> usize {\n+            #[repr(C)]\n+            struct SYSTEM_INFO {\n+                wProcessorArchitecture: u16,\n+                wReserved: u16,\n+                dwPageSize: u32,\n+                lpMinimumApplicationAddress: *mut u8,\n+                lpMaximumApplicationAddress: *mut u8,\n+                dwActiveProcessorMask: *mut u8,\n+                dwNumberOfProcessors: u32,\n+                dwProcessorType: u32,\n+                dwAllocationGranularity: u32,\n+                wProcessorLevel: u16,\n+                wProcessorRevision: u16,\n+            }\n+            extern \"system\" {\n+                fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n+            }\n+            unsafe {\n+                let mut sysinfo = std::mem::zeroed();\n+                GetSystemInfo(&mut sysinfo);\n+                sysinfo.dwNumberOfProcessors as usize\n+            }\n         }\n-    }\n-\n-    #[cfg(target_os = \"vxworks\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on vxWorks\n-        1\n-    }\n-\n-    #[cfg(target_os = \"redox\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on Redox\n-        1\n-    }\n-\n-    #[cfg(target_os = \"hermit\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on HermitCore\n-        1\n-    }\n-\n-    #[cfg(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    ))]\n-    fn num_cpus() -> usize {\n-        1\n-    }\n-\n-    #[cfg(any(\n+    } else if #[cfg(any(\n         target_os = \"android\",\n         target_os = \"cloudabi\",\n         target_os = \"emscripten\",\n@@ -78,23 +53,46 @@ pub fn get_concurrency() -> usize {\n         target_os = \"macos\",\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n-    ))]\n-    fn num_cpus() -> usize {\n-        unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n-    }\n-\n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))]\n-    fn num_cpus() -> usize {\n-        use std::ptr;\n+    ))] {\n+        fn num_cpus() -> usize {\n+            unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n+        }\n+    } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n+        fn num_cpus() -> usize {\n+            use std::ptr;\n \n-        let mut cpus: libc::c_uint = 0;\n-        let mut cpus_size = std::mem::size_of_val(&cpus);\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = std::mem::size_of_val(&cpus);\n \n-        unsafe {\n-            cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            unsafe {\n+                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            }\n+            if cpus < 1 {\n+                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+                unsafe {\n+                    libc::sysctl(\n+                        mib.as_mut_ptr(),\n+                        2,\n+                        &mut cpus as *mut _ as *mut _,\n+                        &mut cpus_size as *mut _ as *mut _,\n+                        ptr::null_mut(),\n+                        0,\n+                    );\n+                }\n+                if cpus < 1 {\n+                    cpus = 1;\n+                }\n+            }\n+            cpus as usize\n         }\n-        if cpus < 1 {\n+    } else if #[cfg(target_os = \"openbsd\")] {\n+        fn num_cpus() -> usize {\n+            use std::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = std::mem::size_of_val(&cpus);\n             let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+\n             unsafe {\n                 libc::sysctl(\n                     mib.as_mut_ptr(),\n@@ -108,43 +106,12 @@ pub fn get_concurrency() -> usize {\n             if cpus < 1 {\n                 cpus = 1;\n             }\n+            cpus as usize\n         }\n-        cpus as usize\n-    }\n-\n-    #[cfg(target_os = \"openbsd\")]\n-    fn num_cpus() -> usize {\n-        use std::ptr;\n-\n-        let mut cpus: libc::c_uint = 0;\n-        let mut cpus_size = std::mem::size_of_val(&cpus);\n-        let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-\n-        unsafe {\n-            libc::sysctl(\n-                mib.as_mut_ptr(),\n-                2,\n-                &mut cpus as *mut _ as *mut _,\n-                &mut cpus_size as *mut _ as *mut _,\n-                ptr::null_mut(),\n-                0,\n-            );\n-        }\n-        if cpus < 1 {\n-            cpus = 1;\n+    } else {\n+        // FIXME: implement on vxWorks, Redox, HermitCore, Haiku, l4re\n+        fn num_cpus() -> usize {\n+            1\n         }\n-        cpus as usize\n-    }\n-\n-    #[cfg(target_os = \"haiku\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: implement\n-        1\n-    }\n-\n-    #[cfg(target_os = \"l4re\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: implement\n-        1\n     }\n }"}, {"sha": "874ecc3764572b8f328a81f368a0f98cd567e7ae", "filename": "src/libtest/helpers/isatty.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2Fhelpers%2Fisatty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b4c14aad49f27bad3c59bb3bc85595e21a71b/src%2Flibtest%2Fhelpers%2Fisatty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fisatty.rs?ref=432b4c14aad49f27bad3c59bb3bc85595e21a71b", "patch": "@@ -1,34 +1,32 @@\n //! Helper module which provides a function to test\n //! if stdout is a tty.\n \n-#[cfg(any(\n-    target_os = \"cloudabi\",\n-    target_os = \"hermit\",\n-    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-))]\n-pub fn stdout_isatty() -> bool {\n-    // FIXME: Implement isatty on SGX\n-    false\n-}\n-#[cfg(unix)]\n-pub fn stdout_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-}\n-#[cfg(windows)]\n-pub fn stdout_isatty() -> bool {\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type HANDLE = *mut u8;\n-    type LPDWORD = *mut u32;\n-    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n-    extern \"system\" {\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n-    }\n-    unsafe {\n-        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n+cfg_if::cfg_if! {\n+    if #[cfg(unix)] {\n+        pub fn stdout_isatty() -> bool {\n+            unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+        }\n+    } else if #[cfg(windows)] {\n+        pub fn stdout_isatty() -> bool {\n+            type DWORD = u32;\n+            type BOOL = i32;\n+            type HANDLE = *mut u8;\n+            type LPDWORD = *mut u32;\n+            const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n+            extern \"system\" {\n+                fn GetStdHandle(which: DWORD) -> HANDLE;\n+                fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n+            }\n+            unsafe {\n+                let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n+                let mut out = 0;\n+                GetConsoleMode(handle, &mut out) != 0\n+            }\n+        }\n+    } else {\n+        // FIXME: Implement isatty on SGX\n+        pub fn stdout_isatty() -> bool {\n+            false\n+        }\n     }\n }"}]}