{"sha": "8ea71f264e384877bc1f991ad232141b1b7808a5", "node_id": "C_kwDOAAsO6NoAKDhlYTcxZjI2NGUzODQ4NzdiYzFmOTkxYWQyMzIxNDFiMWI3ODA4YTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-18T23:55:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-01T15:45:28Z"}, "message": "Do not consider associated type bounds for super_predicates_that_define_assoc_type", "tree": {"sha": "27e678322d5a40f5b90d38a60432677bea048936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e678322d5a40f5b90d38a60432677bea048936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea71f264e384877bc1f991ad232141b1b7808a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea71f264e384877bc1f991ad232141b1b7808a5", "html_url": "https://github.com/rust-lang/rust/commit/8ea71f264e384877bc1f991ad232141b1b7808a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea71f264e384877bc1f991ad232141b1b7808a5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcfff48a532f1ab974dff495ce006ec0604300a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcfff48a532f1ab974dff495ce006ec0604300a", "html_url": "https://github.com/rust-lang/rust/commit/0bcfff48a532f1ab974dff495ce006ec0604300a"}], "stats": {"total": 110, "additions": 94, "deletions": 16}, "files": [{"sha": "6cb008bc5f8a09118c78dc6732ff423282182f86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8ea71f264e384877bc1f991ad232141b1b7808a5", "patch": "@@ -56,6 +56,9 @@ use std::slice;\n #[derive(Debug)]\n pub struct PathSeg(pub DefId, pub usize);\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct OnlySelfBounds(pub bool);\n+\n pub trait AstConv<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx>;\n \n@@ -670,6 +673,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Ty<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let (substs, arg_count) = self.create_substs_for_ast_path(\n             trait_ref_span,\n@@ -706,6 +710,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n+                only_self_bounds,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -741,6 +746,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let hir_id = trait_ref.hir_ref_id;\n         let binding_span = None;\n@@ -766,6 +772,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         )\n     }\n \n@@ -777,6 +784,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         let binding_span = Some(span);\n         let constness = ty::BoundConstness::NotConst;\n@@ -799,6 +807,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         );\n     }\n \n@@ -947,6 +956,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ast_bounds: I,\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n@@ -964,11 +974,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         param_ty,\n                         bounds,\n                         false,\n+                        only_self_bounds,\n                     );\n                 }\n                 &hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => {\n                     self.instantiate_lang_item_trait_ref(\n-                        lang_item, span, hir_id, args, param_ty, bounds,\n+                        lang_item,\n+                        span,\n+                        hir_id,\n+                        args,\n+                        param_ty,\n+                        bounds,\n+                        only_self_bounds,\n                     );\n                 }\n                 hir::GenericBound::Outlives(lifetime) => {\n@@ -1006,9 +1023,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Bounds<'tcx> {\n         let mut bounds = Bounds::default();\n-        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(\n+            param_ty,\n+            ast_bounds.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            only_self_bounds,\n+        );\n         debug!(?bounds);\n \n         bounds\n@@ -1034,7 +1058,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         let mut bounds = Bounds::default();\n-        self.add_bounds(param_ty, result.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(\n+            param_ty,\n+            result.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            OnlySelfBounds(true),\n+        );\n         debug!(?bounds);\n \n         bounds\n@@ -1057,6 +1087,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n         constness: ty::BoundConstness,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1356,8 +1387,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n-                self.add_bounds(param_ty, ast_bounds.iter(), bounds, projection_ty.bound_vars());\n+                //\n+                // NOTE: If `only_self_bounds` is true, do NOT expand this associated\n+                // type bound into a trait predicate, since we only want to add predicates\n+                // for the `Self` type.\n+                if !only_self_bounds.0 {\n+                    let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n+                    self.add_bounds(\n+                        param_ty,\n+                        ast_bounds.iter(),\n+                        bounds,\n+                        projection_ty.bound_vars(),\n+                        only_self_bounds,\n+                    );\n+                }\n             }\n         }\n         Ok(())\n@@ -1398,6 +1441,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 dummy_self,\n                 &mut bounds,\n                 false,\n+                // FIXME: This should be `true`, but we don't really handle\n+                // associated type bounds or type aliases in objects in a way\n+                // that makes this meaningful, I think.\n+                OnlySelfBounds(false),\n             ) {\n                 potential_assoc_types.extend(cur_potential_assoc_types);\n             }"}, {"sha": "948b903e509adf90925d74432a03697291492862", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=8ea71f264e384877bc1f991ad232141b1b7808a5", "patch": "@@ -1,5 +1,5 @@\n use super::ItemCtxt;\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -26,7 +26,7 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n-    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n@@ -67,7 +67,7 @@ fn opaque_type_bounds<'tcx>(\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);"}, {"sha": "b142e4ae1a65134230698ae775fc65673a1bc950", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=8ea71f264e384877bc1f991ad232141b1b7808a5", "patch": "@@ -1,4 +1,4 @@\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use crate::bounds::Bounds;\n use crate::collect::ItemCtxt;\n use crate::constrained_generic_params as cgp;\n@@ -14,9 +14,6 @@ use rustc_middle::ty::{GenericPredicates, ToPredicate};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n-#[derive(Debug)]\n-struct OnlySelfBounds(bool);\n-\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n@@ -225,7 +222,13 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                 }\n \n                 let mut bounds = Bounds::default();\n-                icx.astconv().add_bounds(ty, bound_pred.bounds.iter(), &mut bounds, bound_vars);\n+                icx.astconv().add_bounds(\n+                    ty,\n+                    bound_pred.bounds.iter(),\n+                    &mut bounds,\n+                    bound_vars,\n+                    OnlySelfBounds(false),\n+                );\n                 predicates.extend(bounds.predicates());\n             }\n \n@@ -608,7 +611,7 @@ pub(super) fn implied_predicates_with_filter(\n     let (superbounds, where_bounds_that_match) = match filter {\n         PredicateFilter::All => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(false)),\n             // Also include all where clause bounds\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -620,7 +623,7 @@ pub(super) fn implied_predicates_with_filter(\n         ),\n         PredicateFilter::SelfOnly => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(true)),\n             // Include where clause bounds for `Self`\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -798,6 +801,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n                 }),\n                 &mut bounds,\n                 bound_vars,\n+                only_self_bounds,\n             );\n         }\n "}, {"sha": "961457b75794aef72d41536dfd949bc768e11eb9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea71f264e384877bc1f991ad232141b1b7808a5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=8ea71f264e384877bc1f991ad232141b1b7808a5", "patch": "@@ -116,7 +116,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::ops::Not;\n \n-use astconv::AstConv;\n+use astconv::{AstConv, OnlySelfBounds};\n use bounds::Bounds;\n \n fluent_messages! { \"../messages.ftl\" }\n@@ -531,6 +531,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         self_ty,\n         &mut bounds,\n         true,\n+        OnlySelfBounds(false),\n     );\n \n     bounds"}, {"sha": "b6f37cb908e4edc6770cf9494cc6add44d73ce1c", "filename": "tests/ui/associated-type-bounds/supertrait-defines-ty.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ea71f264e384877bc1f991ad232141b1b7808a5/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea71f264e384877bc1f991ad232141b1b7808a5/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fsupertrait-defines-ty.rs?ref=8ea71f264e384877bc1f991ad232141b1b7808a5", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+// Make sure that we don't look into associated type bounds when looking for\n+// supertraits that define an associated type. Fixes #76593.\n+\n+#![feature(associated_type_bounds)]\n+\n+trait Load: Sized {\n+    type Blob;\n+}\n+\n+trait Primitive: Load<Blob = Self> {}\n+\n+trait BlobPtr: Primitive {}\n+\n+trait CleanPtr: Load<Blob: BlobPtr> {\n+    fn to_blob(&self) -> Self::Blob;\n+}\n+\n+impl Load for () {\n+    type Blob = Self;\n+}\n+impl Primitive for () {}\n+impl BlobPtr for () {}\n+\n+fn main() {}"}]}