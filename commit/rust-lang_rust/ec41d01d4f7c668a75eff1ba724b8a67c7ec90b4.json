{"sha": "ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDFkMDFkNGY3YzY2OGE3NWVmZjFiYTcyNGI4YTY3YzdlYzkwYjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-01T14:42:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T14:42:52Z"}, "message": "Rollup merge of #73778 - nbdd0121:const_likely, r=oli-obk\n\nMake `likely` and `unlikely` const, gated by feature `const_unlikely`\n\nThis PR also contains a fix to allow `#[allow_internal_unstable]` to work properly with `#[rustc_const_unstable]`.\n\ncc @RalfJung @nagisa\n\nr? @oli-obk", "tree": {"sha": "8418d77e0d1dcb6cf2dfba9c1a951f7a3b7e0a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8418d77e0d1dcb6cf2dfba9c1a951f7a3b7e0a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/KDsCRBK7hj4Ov3rIwAAdHIIAEz8x+orwR0MJqWdT3xDF1f3\n1Hr6DzlmI6mhIHtiFfB6nnaBWkeNNDjc8yvwM2kGO2qDBA+9uVBTAnOYrTqP391D\nwkIZafc3/gTDNLu6EbEZPH2+MPfGt4fiChG6vyB20ntpCmDfFJKHk2mwpVPqsc8f\nfjx6dJ6nsownOTff6/GZBpWUcxKiXpr3a2siqGG+DdMn3BdxaM5uioST7F3aNq/l\nN3IFHrmlZ5rPp6MmEdO9823CiECsjFsBCx5gL1jwXJOl766WZ4SgJeMQqM6av/NN\n5HTVmNjWu/wxONsu7FS7dDvBunFsVWX6d/2kZ+ACg2svvGw9czW33TgUW+NyLF4=\n=cl52\n-----END PGP SIGNATURE-----\n", "payload": "tree 8418d77e0d1dcb6cf2dfba9c1a951f7a3b7e0a60\nparent d6bee55855093d86c7e110116beebb369cd89654\nparent 8b43012453de32d4e429c923171131f938d3ead8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593614572 -0700\ncommitter GitHub <noreply@github.com> 1593614572 -0700\n\nRollup merge of #73778 - nbdd0121:const_likely, r=oli-obk\n\nMake `likely` and `unlikely` const, gated by feature `const_unlikely`\n\nThis PR also contains a fix to allow `#[allow_internal_unstable]` to work properly with `#[rustc_const_unstable]`.\n\ncc @RalfJung @nagisa\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "html_url": "https://github.com/rust-lang/rust/commit/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6bee55855093d86c7e110116beebb369cd89654", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bee55855093d86c7e110116beebb369cd89654", "html_url": "https://github.com/rust-lang/rust/commit/d6bee55855093d86c7e110116beebb369cd89654"}, {"sha": "8b43012453de32d4e429c923171131f938d3ead8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b43012453de32d4e429c923171131f938d3ead8", "html_url": "https://github.com/rust-lang/rust/commit/8b43012453de32d4e429c923171131f938d3ead8"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "57ffed19c0085d29c7c7441f672f6a7103e3f12a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -952,6 +952,7 @@ extern \"rust-intrinsic\" {\n     /// Any use other than with `if` statements will probably not have an effect.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n     pub fn likely(b: bool) -> bool;\n \n     /// Hints to the compiler that branch condition is likely to be false.\n@@ -960,6 +961,7 @@ extern \"rust-intrinsic\" {\n     /// Any use other than with `if` statements will probably not have an effect.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n     pub fn unlikely(b: bool) -> bool;\n \n     /// Executes a breakpoint trap, for inspection by a debugger."}, {"sha": "63ddd97eed3df0c8a5daab5775398ae5f4c3e70b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -92,6 +92,7 @@\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_type_name)]\n+#![feature(const_likely)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "01eb2d0b8e2660cde96c5468b0cd2d8fed563d05", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -409,6 +409,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 );\n                 self.copy_op(self.operand_index(args[0], index)?, dest)?;\n             }\n+            sym::likely | sym::unlikely => {\n+                // These just return their argument\n+                self.copy_op(args[0], dest)?;\n+            }\n             // FIXME(#73156): Handle source code coverage in const eval\n             sym::count_code_region => (),\n             _ => return Ok(false),"}, {"sha": "f00fc96e5915a97e368d497ce735faa328194bc3", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -531,9 +531,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 if is_lang_panic_fn(self.tcx, def_id) {\n                     self.check_op(ops::Panic);\n                 } else if let Some(feature) = is_unstable_const_fn(self.tcx, def_id) {\n-                    // Exempt unstable const fns inside of macros with\n+                    // Exempt unstable const fns inside of macros or functions with\n                     // `#[allow_internal_unstable]`.\n-                    if !self.span.allows_unstable(feature) {\n+                    use crate::transform::qualify_min_const_fn::lib_feature_allowed;\n+                    if !self.span.allows_unstable(feature)\n+                        && !lib_feature_allowed(self.tcx, self.def_id, feature)\n+                    {\n                         self.check_op(ops::FnCallUnstable(def_id, feature));\n                     }\n                 } else {"}, {"sha": "2f5257080cd5c21f26ced2787e18acffcff65cea", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -328,6 +328,26 @@ fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bo\n         .map_or(false, |mut features| features.any(|name| name == feature_gate))\n }\n \n+/// Returns `true` if the given library feature gate is allowed within the function with the given `DefId`.\n+pub fn lib_feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+    // All features require that the corresponding gate be enabled,\n+    // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+    if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_gate) {\n+        return false;\n+    }\n+\n+    // If this crate is not using stability attributes, or this function is not claiming to be a\n+    // stable `const fn`, that is all that is required.\n+    if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n+        return true;\n+    }\n+\n+    // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n+    // opt-in via `allow_internal_unstable`.\n+    attr::allow_internal_unstable(&tcx.get_attrs(def_id), &tcx.sess.diagnostic())\n+        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+}\n+\n fn check_terminator(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n@@ -367,8 +387,17 @@ fn check_terminator(\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n-            if let ty::FnDef(def_id, _) = fn_ty.kind {\n-                if !crate::const_eval::is_min_const_fn(tcx, def_id) {\n+            if let ty::FnDef(fn_def_id, _) = fn_ty.kind {\n+                // Allow unstable const if we opt in by using #[allow_internal_unstable]\n+                // on function or macro declaration.\n+                if !crate::const_eval::is_min_const_fn(tcx, fn_def_id)\n+                    && !crate::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n+                        .map(|feature| {\n+                            span.allows_unstable(feature)\n+                                || lib_feature_allowed(tcx, def_id, feature)\n+                        })\n+                        .unwrap_or(false)\n+                {\n                     return Err((\n                         span,\n                         format!(\n@@ -380,10 +409,10 @@ fn check_terminator(\n                     ));\n                 }\n \n-                check_operand(tcx, func, span, def_id, body)?;\n+                check_operand(tcx, func, span, fn_def_id, body)?;\n \n                 for arg in args {\n-                    check_operand(tcx, arg, span, def_id, body)?;\n+                    check_operand(tcx, arg, span, fn_def_id, body)?;\n                 }\n                 Ok(())\n             } else {"}, {"sha": "e2f0d0b94c46c8c7dc3c8549a25594d07e6663ea", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=ec41d01d4f7c668a75eff1ba724b8a67c7ec90b4", "patch": "@@ -427,6 +427,7 @@ symbols! {\n         lhs,\n         lib,\n         lifetime,\n+        likely,\n         line,\n         link,\n         linkage,\n@@ -813,6 +814,7 @@ symbols! {\n         underscore_lifetimes,\n         uniform_paths,\n         universal_impl_trait,\n+        unlikely,\n         unmarked_api,\n         unreachable_code,\n         unrestricted_attribute_tokens,"}]}