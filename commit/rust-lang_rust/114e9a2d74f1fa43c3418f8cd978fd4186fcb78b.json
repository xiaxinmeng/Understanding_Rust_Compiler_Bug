{"sha": "114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNGU5YTJkNzRmMWZhNDNjMzQxOGY4Y2Q5NzhmZDQxODZmY2I3OGI=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-14T14:32:57Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-14T14:32:57Z"}, "message": "create cli.rs and make the tests passing", "tree": {"sha": "922ec7c131d19594b37c0185f894a696f3e577e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/922ec7c131d19594b37c0185f894a696f3e577e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEPNYzeVcwyOf+o1ZNnUcuizYJiVYFAlvDU5kACgkQnUcuizYJ\niVZv5w/9FU5ibOH4f1lGY9XMWZEUcqrXGeDC21lUFHCinr1FTV/a9WdlJd5WpVhA\nsVt+Ym7lFtZlMZvmrkjSCb+LzHlw11zBIxzTH6GmzJZVtoICPltiNSvxETJ+OB9F\nr6mQHWPixe0TZVeuFa62h8qGkzWsycCmlYmumf9TQxutz1V2UQpuV1DSviEKCRPE\npfq5UERORqfsC/HsDBVkb7GvP0BI6uNaS3Pnx/78EiwNKVJhQspwspsRvtLZBdJU\nfUEnUyluXjRF/nXKECX4aEt6/lRCg5HkxtcJ7suFQyKzGtz3G34C15vQaWXyv4sf\n8xwuuEmz3ezyV0lhQC5rlQwj3eUSHp2doy8ljrn4uIbXE7/hYtM2gOBQ2XpiXGgM\n1Xe0hqWHekhKXajoDXRpYdsm4e4jeAGr0hTkRClQi35x+8ufHqaXb5AQahSG80iK\nlSfoF3sGnI3sI1xO8f755I8oCzNobs9d8+nDH0W+77O/bObxVCGQgSwhlBdOfbzO\nFEpUca/RdgC9Fx3yXc6UVX8HiAaePOvYwn2MVxzYcN4ksCAfloPKzfCzsxowKT/Q\ni+LF7fv3W8PGj45QjhZVDtwn7mX/MGcg2l355G0jiBhqZxhvV8zaX5TUugIxV7if\n4OykPhCgLc2tt6PPm6MaFnIw2ZbQ0vJsQteeRliWyCU4aEkQ/Aw=\n=2P52\n-----END PGP SIGNATURE-----", "payload": "tree 922ec7c131d19594b37c0185f894a696f3e577e7\nparent 2ba6f18586d02a6dbc32e0bea88f7b4236277ea1\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1539527577 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1539527577 +0600\n\ncreate cli.rs and make the tests passing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "html_url": "https://github.com/rust-lang/rust/commit/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba6f18586d02a6dbc32e0bea88f7b4236277ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba6f18586d02a6dbc32e0bea88f7b4236277ea1", "html_url": "https://github.com/rust-lang/rust/commit/2ba6f18586d02a6dbc32e0bea88f7b4236277ea1"}], "stats": {"total": 145, "additions": 86, "deletions": 59}, "files": [{"sha": "352f4d135207b4eb00e978775ad96f2cc7eb8c99", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "patch": "@@ -1,6 +1,19 @@\n extern crate itertools;\n+#[macro_use]\n+extern crate failure;\n+extern crate ron;\n+extern crate tera;\n+extern crate heck;\n \n+use std::{\n+    collections::HashMap,\n+    fs,\n+    path::Path,\n+};\n use itertools::Itertools;\n+use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n+\n+type Result<T> = ::std::result::Result<T, failure::Error>;\n \n #[derive(Debug)]\n pub struct Test {\n@@ -41,3 +54,57 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     }\n     res\n }\n+\n+\n+pub fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n+    match fs::read_to_string(path) {\n+        Ok(ref old_contents) if old_contents == contents => {\n+            return Ok(());\n+        }\n+        _ => (),\n+    }\n+    if verify {\n+        bail!(\"`{}` is not up-to-date\", path.display());\n+    }\n+    eprintln!(\"updating {}\", path.display());\n+    fs::write(path, contents)?;\n+    Ok(())\n+}\n+\n+pub fn render_template(template: &str, grammarfile: &str) -> Result<String> {\n+    let grammar: ron::value::Value = {\n+        let text = fs::read_to_string(grammarfile)?;\n+        ron::de::from_str(&text)?\n+    };\n+    let template = fs::read_to_string(template)?;\n+    let mut tera = tera::Tera::default();\n+    tera.add_raw_template(\"grammar\", &template)\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n+    tera.register_function(\"concat\", Box::new(concat));\n+    tera.register_filter(\"camel\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_camel_case().into())\n+    });\n+    tera.register_filter(\"snake\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_snake_case().into())\n+    });\n+    tera.register_filter(\"SCREAM\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n+    });\n+    let ret = tera\n+        .render(\"grammar\", &grammar)\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n+    return Ok(ret);\n+\n+    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n+        let mut elements = Vec::new();\n+        for &key in [\"a\", \"b\", \"c\"].iter() {\n+            let val = match args.get(key) {\n+                Some(val) => val,\n+                None => continue,\n+            };\n+            let val = val.as_array().unwrap();\n+            elements.extend(val.iter().cloned());\n+        }\n+        Ok(tera::Value::Array(elements))\n+    }\n+}"}, {"sha": "cf5e662b0621a4bb3de0b105e8b2b9f531c68b32", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 59, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "patch": "@@ -1,21 +1,17 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n-extern crate ron;\n-extern crate tera;\n extern crate tools;\n extern crate walkdir;\n-extern crate heck;\n \n use clap::{App, Arg, SubCommand};\n-use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n use std::{\n     collections::HashMap,\n     fs,\n     path::{Path, PathBuf},\n     process::Command,\n };\n-use tools::{collect_tests, Test};\n+use tools::{Test, collect_tests, render_template, update};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -51,8 +47,8 @@ fn main() -> Result<()> {\n fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     match name {\n         \"gen-kinds\" => {\n-            update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE)?, verify)?;\n-            update(Path::new(AST), &render_template(AST_TEMPLATE)?, verify)?;\n+            update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE, GRAMMAR)?, verify)?;\n+            update(Path::new(AST), &render_template(AST_TEMPLATE, GRAMMAR)?, verify)?;\n         },\n         \"gen-tests\" => {\n             gen_tests(verify)?\n@@ -62,58 +58,6 @@ fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n-    match fs::read_to_string(path) {\n-        Ok(ref old_contents) if old_contents == contents => {\n-            return Ok(());\n-        }\n-        _ => (),\n-    }\n-    if verify {\n-        bail!(\"`{}` is not up-to-date\", path.display());\n-    }\n-    eprintln!(\"updating {}\", path.display());\n-    fs::write(path, contents)?;\n-    Ok(())\n-}\n-\n-fn render_template(template: &str) -> Result<String> {\n-    let grammar: ron::value::Value = {\n-        let text = fs::read_to_string(GRAMMAR)?;\n-        ron::de::from_str(&text)?\n-    };\n-    let template = fs::read_to_string(template)?;\n-    let mut tera = tera::Tera::default();\n-    tera.add_raw_template(\"grammar\", &template)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    tera.register_function(\"concat\", Box::new(concat));\n-    tera.register_filter(\"camel\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_camel_case().into())\n-    });\n-    tera.register_filter(\"snake\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_snake_case().into())\n-    });\n-    tera.register_filter(\"SCREAM\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n-    });\n-    let ret = tera\n-        .render(\"grammar\", &grammar)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    return Ok(ret);\n-\n-    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n-        let mut elements = Vec::new();\n-        for &key in [\"a\", \"b\", \"c\"].iter() {\n-            let val = match args.get(key) {\n-                Some(val) => val,\n-                None => continue,\n-            };\n-            let val = val.as_array().unwrap();\n-            elements.extend(val.iter().cloned());\n-        }\n-        Ok(tera::Value::Array(elements))\n-    }\n-}\n \n fn gen_tests(verify: bool) -> Result<()> {\n     let tests = tests_from_dir(Path::new(GRAMMAR_DIR))?;"}, {"sha": "26d9a991c182237d00e3fd97d144243df06facd2", "filename": "crates/tools/tests/cli.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114e9a2d74f1fa43c3418f8cd978fd4186fcb78b/crates%2Ftools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Ftests%2Fcli.rs?ref=114e9a2d74f1fa43c3418f8cd978fd4186fcb78b", "patch": "@@ -0,0 +1,16 @@\n+extern crate tools;\n+\n+use std::path::Path;\n+use tools::{render_template, update};\n+\n+const GRAMMAR: &str = \"../ra_syntax/src/grammar.ron\";\n+const SYNTAX_KINDS: &str = \"../ra_syntax/src/syntax_kinds/generated.rs\";\n+const SYNTAX_KINDS_TEMPLATE: &str = \"../ra_syntax/src/syntax_kinds/generated.rs.tera\";\n+const AST: &str = \"../ra_syntax/src/ast/generated.rs\";\n+const AST_TEMPLATE: &str = \"../ra_syntax/src/ast/generated.rs.tera\";\n+\n+#[test]\n+fn verify_template_generation() {\n+    update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE, GRAMMAR).unwrap(), true).unwrap();\n+    update(Path::new(AST), &render_template(AST_TEMPLATE, GRAMMAR).unwrap(), true).unwrap();\n+}\n\\ No newline at end of file"}]}