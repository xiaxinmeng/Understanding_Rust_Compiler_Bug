{"sha": "ee461a211195b093269ead477f01fcf63f20cf34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDYxYTIxMTE5NWIwOTMyNjllYWQ0NzdmMDFmY2Y2M2YyMGNmMzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T17:00:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T17:00:03Z"}, "message": "kill approximatelly_resolve_symbol", "tree": {"sha": "9021f6b236ce24d19a7a419c9f8c9c08c9ff08f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9021f6b236ce24d19a7a419c9f8c9c08c9ff08f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee461a211195b093269ead477f01fcf63f20cf34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee461a211195b093269ead477f01fcf63f20cf34", "html_url": "https://github.com/rust-lang/rust/commit/ee461a211195b093269ead477f01fcf63f20cf34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee461a211195b093269ead477f01fcf63f20cf34/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da32463cbf8dc32229eb13844c71a40df2d3b77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da32463cbf8dc32229eb13844c71a40df2d3b77e", "html_url": "https://github.com/rust-lang/rust/commit/da32463cbf8dc32229eb13844c71a40df2d3b77e"}], "stats": {"total": 101, "additions": 11, "deletions": 90}, "files": [{"sha": "e37421f8dc7ee257caf493239c6ce596f9fdb9d1", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=ee461a211195b093269ead477f01fcf63f20cf34", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn goto_defenition(\n     Ok(None)\n }\n \n-fn reference_defenition(\n+pub(crate) fn reference_defenition(\n     db: &RootDatabase,\n     file_id: FileId,\n     name_ref: ast::NameRef,"}, {"sha": "758de376e30bad891e050f4775bb05ed0607bfcc", "filename": "crates/ra_analysis/src/hover.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=ee461a211195b093269ead477f01fcf63f20cf34", "patch": "@@ -1,4 +1,5 @@\n use ra_db::{Cancelable, SyntaxDatabase};\n+use ra_editor::find_node_at_offset;\n use ra_syntax::{\n     AstNode, SyntaxNode,\n     ast::{self, NameOwner},\n@@ -11,18 +12,18 @@ pub(crate) fn hover(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Cancelable<Option<RangeInfo<String>>> {\n+    let file = db.source_file(position.file_id);\n     let mut res = Vec::new();\n-    let range = if let Some(rr) = db.approximately_resolve_symbol(position)? {\n-        for nav in rr.resolves_to {\n+    let range = if let Some(name_ref) =\n+        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n+    {\n+        let navs = crate::goto_defenition::reference_defenition(db, position.file_id, name_ref)?;\n+        for nav in navs {\n             res.extend(doc_text_for(db, nav)?)\n         }\n-        rr.reference_range\n+        name_ref.syntax().range()\n     } else {\n-        let file = db.source_file(position.file_id);\n-        let expr: ast::Expr = ctry!(ra_editor::find_node_at_offset(\n-            file.syntax(),\n-            position.offset\n-        ));\n+        let expr: ast::Expr = ctry!(find_node_at_offset(file.syntax(), position.offset));\n         let frange = FileRange {\n             file_id: position.file_id,\n             range: expr.syntax().range(),"}, {"sha": "6ab3c5476b8d598759ac9ea4f51bdd8a62f65a35", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=ee461a211195b093269ead477f01fcf63f20cf34", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     AnalysisChange,\n     Cancelable, NavigationTarget,\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n-    Query, ReferenceResolution, RootChange, SourceChange, SourceFileEdit,\n+    Query, RootChange, SourceChange, SourceFileEdit,\n     symbol_index::{LibrarySymbolsQuery, FileSymbol},\n };\n \n@@ -139,66 +139,6 @@ impl db::RootDatabase {\n     pub(crate) fn crate_root(&self, crate_id: CrateId) -> FileId {\n         self.crate_graph().crate_root(crate_id)\n     }\n-    pub(crate) fn approximately_resolve_symbol(\n-        &self,\n-        position: FilePosition,\n-    ) -> Cancelable<Option<ReferenceResolution>> {\n-        let file = self.source_file(position.file_id);\n-        let syntax = file.syntax();\n-        if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-            let mut rr = ReferenceResolution::new(name_ref.syntax().range());\n-            if let Some(fn_descr) =\n-                source_binder::function_from_child_node(self, position.file_id, name_ref.syntax())?\n-            {\n-                let scope = fn_descr.scopes(self);\n-                // First try to resolve the symbol locally\n-                if let Some(entry) = scope.resolve_local_name(name_ref) {\n-                    rr.resolves_to.push(NavigationTarget {\n-                        file_id: position.file_id,\n-                        name: entry.name().to_string().into(),\n-                        range: entry.ptr().range(),\n-                        kind: NAME,\n-                        ptr: None,\n-                    });\n-                    return Ok(Some(rr));\n-                };\n-            }\n-            // If that fails try the index based approach.\n-            rr.resolves_to.extend(\n-                self.index_resolve(name_ref)?\n-                    .into_iter()\n-                    .map(NavigationTarget::from_symbol),\n-            );\n-            return Ok(Some(rr));\n-        }\n-        if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n-            let mut rr = ReferenceResolution::new(name.syntax().range());\n-            if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n-                if module.has_semi() {\n-                    if let Some(child_module) =\n-                        source_binder::module_from_declaration(self, position.file_id, module)?\n-                    {\n-                        let file_id = child_module.file_id();\n-                        let name = match child_module.name() {\n-                            Some(name) => name.to_string().into(),\n-                            None => \"\".into(),\n-                        };\n-                        let symbol = NavigationTarget {\n-                            file_id,\n-                            name,\n-                            range: TextRange::offset_len(0.into(), 0.into()),\n-                            kind: MODULE,\n-                            ptr: None,\n-                        };\n-                        rr.resolves_to.push(symbol);\n-                        return Ok(Some(rr));\n-                    }\n-                }\n-            }\n-        }\n-        Ok(None)\n-    }\n-\n     pub(crate) fn find_all_refs(\n         &self,\n         position: FilePosition,"}, {"sha": "4d895b004454abf2d12bdba0b0d944f526e36d41", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee461a211195b093269ead477f01fcf63f20cf34/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=ee461a211195b093269ead477f01fcf63f20cf34", "patch": "@@ -274,26 +274,6 @@ impl<T> RangeInfo<T> {\n     }\n }\n \n-/// Result of \"goto def\" query.\n-#[derive(Debug)]\n-pub struct ReferenceResolution {\n-    /// The range of the reference itself. Client does not know what constitutes\n-    /// a reference, it handles us only the offset. It's helpful to tell the\n-    /// client where the reference was.\n-    pub reference_range: TextRange,\n-    /// What this reference resolves to.\n-    pub resolves_to: Vec<NavigationTarget>,\n-}\n-\n-impl ReferenceResolution {\n-    fn new(reference_range: TextRange) -> ReferenceResolution {\n-        ReferenceResolution {\n-            reference_range,\n-            resolves_to: Vec::new(),\n-        }\n-    }\n-}\n-\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug, Default)]\n pub struct AnalysisHost {"}]}