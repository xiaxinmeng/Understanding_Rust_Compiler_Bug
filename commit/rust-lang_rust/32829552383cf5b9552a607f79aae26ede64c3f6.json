{"sha": "32829552383cf5b9552a607f79aae26ede64c3f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODI5NTUyMzgzY2Y1Yjk1NTJhNjA3Zjc5YWFlMjZlZGU2NGMzZjY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-10T21:07:10Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-10T21:07:10Z"}, "message": "Update tests", "tree": {"sha": "3ec7d37649d8a3a13e01fa10f1213ef76ba8fa1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec7d37649d8a3a13e01fa10f1213ef76ba8fa1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32829552383cf5b9552a607f79aae26ede64c3f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEiETQ0pufZ0TtlY8OBEYSIdTfuVQFAlyFfIEACgkQBEYSIdTf\nuVRUfw/9HGbUbVFJfmnP5QTHsoDPNM939WXqHNx6n/wNjLYn4BRah/luyVbbPbnk\nMIG1me4/6M5pdiuhs984uMQ0J6Jqyq1yg0fRyRRg4qB2z9Bsu7+gat0K8NNJi3Zy\nGSPiGAZlitldm+YGNnQp9XuWJxpNdDOFxgNTGhBgAKH3IEiC3A0IrUi7AfGmcWV8\nwb6493Eq4AQUWjvxzQvdulb3HyTJ6DgFn4azVp2PwQ0FY4+7lGrhXyKw8IrwDOV6\nJDzi1loarOH8HLwTWmhzzwxMhL4CNjzdnUfQAhAIMlRR6XRNPvmFyKKVHK8Iz/nM\nXmodbry3lfmgyJTyDlfH3EnLuSCf+ppkxMNMgvOUdr+3SZqqTq6qY7OFby34pAG1\nYivqhlqx/0YZJX23SgZa+t0QieD8m5qxTAi8R2cnHCNr+kl9qNF2lDTLbKdxEQgu\nJqZml+miCS01r535MFGH4djRHmkCclkVBgyWMMZl5nR4sHbJzWAoWpJFmKSs/Kyp\n13m6d3ZQUlLI4cbY1GeM/lGAtw2NFT4g87FXmQhRBsKUJTzYkY8nOSVfcw+Xxk4w\nSgWbxhKjLzncbG0pn+NYWbF3JFD17SsCl+iISOsOBf3tvXp/js4kgVePcN3sMUFZ\nWmITPE31da2MnXK9pe20B/1im1ITI7AHRwDM94Fw9oIdoUM7d4Y=\n=pUUw\n-----END PGP SIGNATURE-----", "payload": "tree 3ec7d37649d8a3a13e01fa10f1213ef76ba8fa1e\nparent a7c08009382888f399eb6c6735954118dcc1d58e\nauthor flip1995 <hello@philkrones.com> 1552252030 +0100\ncommitter flip1995 <hello@philkrones.com> 1552252030 +0100\n\nUpdate tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32829552383cf5b9552a607f79aae26ede64c3f6", "html_url": "https://github.com/rust-lang/rust/commit/32829552383cf5b9552a607f79aae26ede64c3f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32829552383cf5b9552a607f79aae26ede64c3f6/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c08009382888f399eb6c6735954118dcc1d58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c08009382888f399eb6c6735954118dcc1d58e", "html_url": "https://github.com/rust-lang/rust/commit/a7c08009382888f399eb6c6735954118dcc1d58e"}], "stats": {"total": 222, "additions": 108, "deletions": 114}, "files": [{"sha": "0876d5db6964152aa585e57f11f4210f90d47909", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -31,7 +31,7 @@ LL |     if { true } {\n            } ... \n \n error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n-  --> $DIR/block_in_if_condition.rs:57:17\n+  --> $DIR/block_in_if_condition.rs:58:17\n    |\n LL |               |x| {\n    |  _________________^\n@@ -41,7 +41,7 @@ LL | |             },\n    | |_____________^\n \n error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n-  --> $DIR/block_in_if_condition.rs:66:13\n+  --> $DIR/block_in_if_condition.rs:67:13\n    |\n LL |           |x| {\n    |  _____________^\n@@ -51,7 +51,7 @@ LL | |         },\n    | |_________^\n \n error: this boolean expression can be simplified\n-  --> $DIR/block_in_if_condition.rs:76:8\n+  --> $DIR/block_in_if_condition.rs:77:8\n    |\n LL |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`"}, {"sha": "ae9bb394cb9ac726bcca6129a5e7bb1c3349741d", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -1,16 +1,10 @@\n-error: you should put `DOC_MARKDOWN` between ticks in the documentation\n-  --> $DIR/doc.rs:1:29\n-   |\n-LL | //! This file tests for the DOC_MARKDOWN lint\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n-\n error: you should put `foo_bar` between ticks in the documentation\n   --> $DIR/doc.rs:8:9\n    |\n LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n    |         ^^^^^^^\n+   |\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n \n error: you should put `foo::bar` between ticks in the documentation\n   --> $DIR/doc.rs:8:51\n@@ -19,9 +13,9 @@ LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot t\n    |                                                   ^^^^^^^^\n \n error: you should put `Foo::some_fun` between ticks in the documentation\n-  --> $DIR/doc.rs:9:84\n+  --> $DIR/doc.rs:9:83\n    |\n-LL | /// Markdown is _weird_. I mean _really weird_. This \\_ is ok. So is `_`. But not Foo::some_fun\n+LL | /// Markdown is _weird_. I mean _really weird_. This /_ is ok. So is `_`. But not Foo::some_fun\n    |                                                                                   ^^^^^^^^^^^^^\n \n error: you should put `a::global:path` between ticks in the documentation\n@@ -115,10 +109,10 @@ LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:110:42\n+  --> $DIR/doc.rs:110:43\n    |\n-LL | /** E.g. serialization of an empty list: FooBar\n-   |                                          ^^^^^^\n+LL | /** E.g., serialization of an empty list: FooBar\n+   |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n   --> $DIR/doc.rs:115:5\n@@ -133,10 +127,10 @@ LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:121:42\n+  --> $DIR/doc.rs:121:43\n    |\n-LL | /** E.g. serialization of an empty list: FooBar\n-   |                                          ^^^^^^\n+LL | /** E.g., serialization of an empty list: FooBar\n+   |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n   --> $DIR/doc.rs:126:5\n@@ -186,5 +180,5 @@ error: you should put `mycrate::Collection` between ticks in the documentation\n LL | /// An iterator over mycrate::Collection's values.\n    |                      ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "ab973e07511375f7c2cbf03d528f7577e490a49d", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -6,51 +6,51 @@\n struct Foo(pub String);\n \n macro_rules! foo {\n-  ($($t:tt)*) => (Foo(format!($($t)*)))\n+    ($($t:tt)*) => (Foo(format!($($t)*)))\n }\n \n fn main() {\n     \"foo\".to_string();\n \n     \"foo\".to_string();\n-    format!(\"{:?}\", \"foo\"); // don't warn about debug\n+    format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");\n     format!(\"{:width$}\", \"foo\", width = 8);\n-    \"foo\".to_string(); // warn when the format makes no difference\n-    \"foo\".to_string(); // warn when the format makes no difference\n+    \"foo\".to_string(); // Warn when the format makes no difference.\n+    \"foo\".to_string(); // Warn when the format makes no difference.\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n     let arg: String = \"\".to_owned();\n     arg.to_string();\n-    format!(\"{:?}\", arg); // don't warn about debug\n+    format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);\n     format!(\"{:width$}\", arg, width = 8);\n-    arg.to_string(); // warn when the format makes no difference\n-    arg.to_string(); // warn when the format makes no difference\n+    arg.to_string(); // Warn when the format makes no difference.\n+    arg.to_string(); // Warn when the format makes no difference.\n     format!(\"foo {}\", arg);\n     format!(\"{} bar\", arg);\n \n-    // we don\u2019t want to warn for non-string args, see #697\n+    // We don\u2019t want to warn for non-string args; see issue #697.\n     format!(\"{}\", 42);\n     format!(\"{:?}\", 42);\n     format!(\"{:+}\", 42);\n     format!(\"foo {}\", 42);\n     format!(\"{} bar\", 42);\n \n-    // we only want to warn about `format!` itself\n+    // We only want to warn about `format!` itself.\n     println!(\"foo\");\n     println!(\"{}\", \"foo\");\n     println!(\"foo {}\", \"foo\");\n     println!(\"{}\", 42);\n     println!(\"foo {}\", 42);\n \n-    // A format! inside a macro should not trigger a warning\n+    // A `format!` inside a macro should not trigger a warning.\n     foo!(\"should not warn\");\n \n-    // precision on string means slicing without panicking on size:\n-    format!(\"{:.1}\", \"foo\"); // could be \"foo\"[..1]\n-    format!(\"{:.10}\", \"foo\"); // could not be \"foo\"[..10]\n+    // Precision on string means slicing without panicking on size.\n+    format!(\"{:.1}\", \"foo\"); // Could be `\"foo\"[..1]`\n+    format!(\"{:.10}\", \"foo\"); // Could not be `\"foo\"[..10]`\n     format!(\"{:.prec$}\", \"foo\", prec = 1);\n     format!(\"{:.prec$}\", \"foo\", prec = 10);\n "}, {"sha": "7ca63e2fea5186a9f7731f8e1524ee0702382271", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -15,13 +15,13 @@ LL |     format!(\"{}\", \"foo\");\n error: useless use of `format!`\n   --> $DIR/format.rs:19:5\n    |\n-LL |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n+LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:20:5\n    |\n-LL |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n+LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n \n error: useless use of `format!`\n@@ -33,13 +33,13 @@ LL |     format!(\"{}\", arg);\n error: useless use of `format!`\n   --> $DIR/format.rs:29:5\n    |\n-LL |     format!(\"{:+}\", arg); // warn when the format makes no difference\n+LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:30:5\n    |\n-LL |     format!(\"{:<}\", arg); // warn when the format makes no difference\n+LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n \n error: useless use of `format!`"}, {"sha": "f2ad0bb9e1e479edc9865f3ace57b2447ccd57f6", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -19,7 +19,7 @@ LL | | }\n    | |_^\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n-  --> $DIR/len_zero.rs:89:1\n+  --> $DIR/len_zero.rs:90:1\n    |\n LL | / impl HasIsEmpty {\n LL | |     pub fn len(self: &Self) -> isize {\n@@ -31,7 +31,7 @@ LL | | }\n    | |_^\n \n error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n-  --> $DIR/len_zero.rs:118:1\n+  --> $DIR/len_zero.rs:119:1\n    |\n LL | / impl HasWrongIsEmpty {\n LL | |     pub fn len(self: &Self) -> isize {\n@@ -43,93 +43,93 @@ LL | | }\n    | |_^\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:139:8\n+  --> $DIR/len_zero.rs:140:8\n    |\n LL |     if x.len() == 0 {\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `x.is_empty()`\n    |\n    = note: `-D clippy::len-zero` implied by `-D warnings`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:143:8\n+  --> $DIR/len_zero.rs:144:8\n    |\n LL |     if \"\".len() == 0 {}\n    |        ^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `\"\".is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:158:8\n+  --> $DIR/len_zero.rs:159:8\n    |\n LL |     if has_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:161:8\n+  --> $DIR/len_zero.rs:162:8\n    |\n LL |     if has_is_empty.len() != 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:164:8\n+  --> $DIR/len_zero.rs:165:8\n    |\n LL |     if has_is_empty.len() > 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:167:8\n+  --> $DIR/len_zero.rs:168:8\n    |\n LL |     if has_is_empty.len() < 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:170:8\n+  --> $DIR/len_zero.rs:171:8\n    |\n LL |     if has_is_empty.len() >= 1 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:181:8\n+  --> $DIR/len_zero.rs:182:8\n    |\n LL |     if 0 == has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:184:8\n+  --> $DIR/len_zero.rs:185:8\n    |\n LL |     if 0 != has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:187:8\n+  --> $DIR/len_zero.rs:188:8\n    |\n LL |     if 0 < has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:190:8\n+  --> $DIR/len_zero.rs:191:8\n    |\n LL |     if 1 <= has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n-  --> $DIR/len_zero.rs:193:8\n+  --> $DIR/len_zero.rs:194:8\n    |\n LL |     if 1 > has_is_empty.len() {\n    |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:207:8\n+  --> $DIR/len_zero.rs:208:8\n    |\n LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:220:8\n+  --> $DIR/len_zero.rs:221:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!b.is_empty()`\n \n error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n-  --> $DIR/len_zero.rs:226:1\n+  --> $DIR/len_zero.rs:227:1\n    |\n LL | / pub trait DependsOnFoo: Foo {\n LL | |     fn len(&mut self) -> usize;"}, {"sha": "9eac0407e4d58fd2158af2644a7f86e23a4e3ad3", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -13,23 +13,23 @@ LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:14:1\n+  --> $DIR/lifetimes.rs:16:1\n    |\n LL | / fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n LL | |     x\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:38:1\n+  --> $DIR/lifetimes.rs:45:1\n    |\n LL | / fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n LL | |     Ok(x)\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:43:1\n+  --> $DIR/lifetimes.rs:50:1\n    |\n LL | / fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n LL | | where\n@@ -40,13 +40,13 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:54:1\n+  --> $DIR/lifetimes.rs:62:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:75:1\n+  --> $DIR/lifetimes.rs:86:1\n    |\n LL | / fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n LL | | where\n@@ -57,61 +57,61 @@ LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:108:5\n+  --> $DIR/lifetimes.rs:120:5\n    |\n LL | /     fn self_and_out<'s>(&'s self) -> &'s u8 {\n LL | |         &self.x\n LL | |     }\n    | |_____^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:116:5\n+  --> $DIR/lifetimes.rs:129:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:132:1\n+  --> $DIR/lifetimes.rs:148:1\n    |\n LL | / fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:162:1\n+  --> $DIR/lifetimes.rs:178:1\n    |\n LL | / fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:168:1\n+  --> $DIR/lifetimes.rs:184:1\n    |\n LL | / fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:187:1\n+  --> $DIR/lifetimes.rs:203:1\n    |\n LL | / fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:195:1\n+  --> $DIR/lifetimes.rs:211:1\n    |\n LL | / fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/lifetimes.rs:232:1\n+  --> $DIR/lifetimes.rs:247:1\n    |\n LL | / fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n LL | |     unimplemented!()"}, {"sha": "cfbb0152eebdb9a130b069cb13dd49960c9c7255", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32829552383cf5b9552a607f79aae26ede64c3f6/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=32829552383cf5b9552a607f79aae26ede64c3f6", "patch": "@@ -9,39 +9,39 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:69:17\n+  --> $DIR/methods.rs:70:17\n    |\n LL |     fn into_u16(&self) -> u16 {\n    |                 ^^^^^\n    |\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:73:21\n+  --> $DIR/methods.rs:74:21\n    |\n LL |     fn to_something(self) -> u32 {\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:77:12\n+  --> $DIR/methods.rs:78:12\n    |\n LL |     fn new(self) -> Self {\n    |            ^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:157:13\n+  --> $DIR/methods.rs:158:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n-LL | |\n-LL | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+LL | |                 // Should lint even though this call is on a separate line.\n+LL | |                .unwrap_or(0);\n    | |____________________________^\n    |\n    = note: `-D clippy::option-map-unwrap-or` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:161:13\n+  --> $DIR/methods.rs:162:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -51,7 +51,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:165:13\n+  --> $DIR/methods.rs:166:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -61,15 +61,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:170:13\n+  --> $DIR/methods.rs:171:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:172:13\n+  --> $DIR/methods.rs:173:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -79,7 +79,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:177:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -90,27 +90,27 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:187:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:191:13\n+  --> $DIR/methods.rs:192:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n-LL | |\n-LL | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+LL | |                 // Should lint even though this call is on a separate line.\n+LL | |                .unwrap_or_else(|| 0);\n    | |____________________________________^\n    |\n    = note: `-D clippy::option-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:195:13\n+  --> $DIR/methods.rs:196:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:199:13\n+  --> $DIR/methods.rs:200:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -130,15 +130,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:208:13\n+  --> $DIR/methods.rs:210:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:210:13\n+  --> $DIR/methods.rs:212:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -154,7 +154,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:236:13\n+  --> $DIR/methods.rs:238:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:239:13\n+  --> $DIR/methods.rs:241:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -173,7 +173,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:255:13\n+  --> $DIR/methods.rs:257:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -182,7 +182,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:258:13\n+  --> $DIR/methods.rs:260:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -192,15 +192,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:264:13\n+  --> $DIR/methods.rs:266:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:267:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -210,15 +210,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:273:13\n+  --> $DIR/methods.rs:275:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:276:13\n+  --> $DIR/methods.rs:278:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -228,125 +228,125 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:313:22\n+  --> $DIR/methods.rs:315:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:316:5\n+  --> $DIR/methods.rs:318:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:319:21\n+  --> $DIR/methods.rs:321:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:322:14\n+  --> $DIR/methods.rs:324:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:325:19\n+  --> $DIR/methods.rs:327:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:328:5\n+  --> $DIR/methods.rs:330:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:331:5\n+  --> $DIR/methods.rs:333:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:334:14\n+  --> $DIR/methods.rs:336:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:339:21\n+  --> $DIR/methods.rs:341:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:342:19\n+  --> $DIR/methods.rs:344:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:345:21\n+  --> $DIR/methods.rs:347:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:348:21\n+  --> $DIR/methods.rs:350:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:359:23\n+  --> $DIR/methods.rs:361:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:360:26\n+  --> $DIR/methods.rs:362:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:361:31\n+  --> $DIR/methods.rs:363:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:362:29\n+  --> $DIR/methods.rs:364:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:367:23\n+  --> $DIR/methods.rs:369:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:370:26\n+  --> $DIR/methods.rs:372:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:373:29\n+  --> $DIR/methods.rs:375:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:385:13\n+  --> $DIR/methods.rs:387:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}