{"sha": "64a49589e74447da668bd5acab8375206a10253f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YTQ5NTg5ZTc0NDQ3ZGE2NjhiZDVhY2FiODM3NTIwNmExMDI1M2Y=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-06-27T10:34:21Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-06-27T10:38:31Z"}, "message": "Fix handling of whitespace when applying SSR within macro expansions.\n\nI originally did replacement by passing in the full file text. Then as some point I thought I could do without it. Turns out calling .text() on a node coming from a macro expansion isn't a great idea, especially when you then try and use ranges from the original source to cut that text. The test I added here actually panics without the rest of this change (sorry I didn't notice sooner).", "tree": {"sha": "d8520baa999ebc1a3dc72030d64799634a4a63c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8520baa999ebc1a3dc72030d64799634a4a63c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a49589e74447da668bd5acab8375206a10253f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a49589e74447da668bd5acab8375206a10253f", "html_url": "https://github.com/rust-lang/rust/commit/64a49589e74447da668bd5acab8375206a10253f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a49589e74447da668bd5acab8375206a10253f/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b081018363a210ffa0b95a4d3350a0a3e9b0cd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/b081018363a210ffa0b95a4d3350a0a3e9b0cd83", "html_url": "https://github.com/rust-lang/rust/commit/b081018363a210ffa0b95a4d3350a0a3e9b0cd83"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "e148f4564bd9d6d8d5f3d9ee5dfe7bdad9c0e079", "filename": "crates/ra_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Flib.rs?ref=64a49589e74447da668bd5acab8375206a10253f", "patch": "@@ -69,7 +69,8 @@ impl<'db> MatchFinder<'db> {\n         if matches.matches.is_empty() {\n             None\n         } else {\n-            Some(replacing::matches_to_edit(&matches))\n+            use ra_db::SourceDatabaseExt;\n+            Some(replacing::matches_to_edit(&matches, &self.sema.db.file_text(file_id)))\n         }\n     }\n "}, {"sha": "bb87bda43129f943b8833c18694985ad3e805393", "filename": "crates/ra_ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fmatching.rs?ref=64a49589e74447da668bd5acab8375206a10253f", "patch": "@@ -585,7 +585,7 @@ mod tests {\n             \"1+2\"\n         );\n \n-        let edit = crate::replacing::matches_to_edit(&matches);\n+        let edit = crate::replacing::matches_to_edit(&matches, input);\n         let mut after = input.to_string();\n         edit.apply(&mut after);\n         assert_eq!(after, \"fn main() { bar(1+2); }\");"}, {"sha": "70ce1c185b55dd5beffc0d0d1e3854e96ccf6b71", "filename": "crates/ra_ssr/src/replacing.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Freplacing.rs?ref=64a49589e74447da668bd5acab8375206a10253f", "patch": "@@ -10,21 +10,25 @@ use ra_text_edit::TextEdit;\n /// Returns a text edit that will replace each match in `matches` with its corresponding replacement\n /// template. Placeholders in the template will have been substituted with whatever they matched to\n /// in the original code.\n-pub(crate) fn matches_to_edit(matches: &SsrMatches) -> TextEdit {\n-    matches_to_edit_at_offset(matches, 0.into())\n+pub(crate) fn matches_to_edit(matches: &SsrMatches, file_src: &str) -> TextEdit {\n+    matches_to_edit_at_offset(matches, file_src, 0.into())\n }\n \n-fn matches_to_edit_at_offset(matches: &SsrMatches, relative_start: TextSize) -> TextEdit {\n+fn matches_to_edit_at_offset(\n+    matches: &SsrMatches,\n+    file_src: &str,\n+    relative_start: TextSize,\n+) -> TextEdit {\n     let mut edit_builder = ra_text_edit::TextEditBuilder::default();\n     for m in &matches.matches {\n-        edit_builder.replace(m.range.checked_sub(relative_start).unwrap(), render_replace(m));\n+        edit_builder\n+            .replace(m.range.checked_sub(relative_start).unwrap(), render_replace(m, file_src));\n     }\n     edit_builder.finish()\n }\n \n-fn render_replace(match_info: &Match) -> String {\n+fn render_replace(match_info: &Match, file_src: &str) -> String {\n     let mut out = String::new();\n-    let match_start = match_info.matched_node.text_range().start();\n     for r in &match_info.template.tokens {\n         match r {\n             PatternElement::Token(t) => out.push_str(t.text.as_str()),\n@@ -33,16 +37,13 @@ fn render_replace(match_info: &Match) -> String {\n                     match_info.placeholder_values.get(&Var(p.ident.to_string()))\n                 {\n                     let range = &placeholder_value.range.range;\n-                    let mut matched_text = if let Some(node) = &placeholder_value.node {\n-                        node.text().to_string()\n-                    } else {\n-                        let relative_range = range.checked_sub(match_start).unwrap();\n-                        match_info.matched_node.text().to_string()\n-                            [usize::from(relative_range.start())..usize::from(relative_range.end())]\n-                            .to_string()\n-                    };\n-                    let edit =\n-                        matches_to_edit_at_offset(&placeholder_value.inner_matches, range.start());\n+                    let mut matched_text =\n+                        file_src[usize::from(range.start())..usize::from(range.end())].to_owned();\n+                    let edit = matches_to_edit_at_offset(\n+                        &placeholder_value.inner_matches,\n+                        file_src,\n+                        range.start(),\n+                    );\n                     edit.apply(&mut matched_text);\n                     out.push_str(&matched_text);\n                 } else {"}, {"sha": "8be60c2932955b7ca74d8ca2d5e8fd3991203428", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a49589e74447da668bd5acab8375206a10253f/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=64a49589e74447da668bd5acab8375206a10253f", "patch": "@@ -606,3 +606,20 @@ fn replace_within_macro_expansion() {\n             fn f() {macro1!(bar(5.x()).o2())}\"#,\n     )\n }\n+\n+#[test]\n+fn preserves_whitespace_within_macro_expansion() {\n+    assert_ssr_transform(\n+        \"$a + $b ==>> $b - $a\",\n+        r#\"\n+            macro_rules! macro1 {\n+                ($a:expr) => {$a}\n+            }\n+            fn f() {macro1!(1   *   2 + 3 + 4}\"#,\n+        r#\"\n+            macro_rules! macro1 {\n+                ($a:expr) => {$a}\n+            }\n+            fn f() {macro1!(4 - 3 - 1   *   2}\"#,\n+    )\n+}"}]}