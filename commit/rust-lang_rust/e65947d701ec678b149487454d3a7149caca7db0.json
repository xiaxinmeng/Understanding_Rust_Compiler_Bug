{"sha": "e65947d701ec678b149487454d3a7149caca7db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTk0N2Q3MDFlYzY3OGIxNDk0ODc0NTRkM2E3MTQ5Y2FjYTdkYjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-21T16:49:34Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-26T15:43:46Z"}, "message": "Update rustdoc", "tree": {"sha": "f41a11164c46106f7705fed0cd2e39f4ee962d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41a11164c46106f7705fed0cd2e39f4ee962d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65947d701ec678b149487454d3a7149caca7db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65947d701ec678b149487454d3a7149caca7db0", "html_url": "https://github.com/rust-lang/rust/commit/e65947d701ec678b149487454d3a7149caca7db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65947d701ec678b149487454d3a7149caca7db0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "174b7614322e41356ac76e912747efb55020a908", "url": "https://api.github.com/repos/rust-lang/rust/commits/174b7614322e41356ac76e912747efb55020a908", "html_url": "https://github.com/rust-lang/rust/commit/174b7614322e41356ac76e912747efb55020a908"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "272819ba2dd96940796d1978b14b8b8a055043b1", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e65947d701ec678b149487454d3a7149caca7db0/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65947d701ec678b149487454d3a7149caca7db0/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e65947d701ec678b149487454d3a7149caca7db0", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     }));\n                 }\n                 ty::GenericParamDefKind::Type {..} => {\n-                    args.push(hir::GenericArg::Type(P(self.ty_param_to_ty(param.clone()))));\n+                    args.push(hir::GenericArg::Type(self.ty_param_to_ty(param.clone())));\n                 }\n             }\n         }"}, {"sha": "3cc0745b195e696782c040f4c2c478ff14b4ae9c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e65947d701ec678b149487454d3a7149caca7db0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65947d701ec678b149487454d3a7149caca7db0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e65947d701ec678b149487454d3a7149caca7db0", "patch": "@@ -2150,7 +2150,7 @@ pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n \n-impl<'a> Clean<Arguments> for (&'a [P<hir::Ty>], &'a [Spanned<ast::Name>]) {\n+impl<'a> Clean<Arguments> for (&'a [hir::Ty], &'a [Spanned<ast::Name>]) {\n     fn clean(&self, cx: &DocContext) -> Arguments {\n         Arguments {\n             values: self.0.iter().enumerate().map(|(i, ty)| {\n@@ -2168,7 +2168,7 @@ impl<'a> Clean<Arguments> for (&'a [P<hir::Ty>], &'a [Spanned<ast::Name>]) {\n     }\n }\n \n-impl<'a> Clean<Arguments> for (&'a [P<hir::Ty>], hir::BodyId) {\n+impl<'a> Clean<Arguments> for (&'a [hir::Ty], hir::BodyId) {\n     fn clean(&self, cx: &DocContext) -> Arguments {\n         let body = cx.tcx.hir.body(self.1);\n \n@@ -2184,7 +2184,7 @@ impl<'a> Clean<Arguments> for (&'a [P<hir::Ty>], hir::BodyId) {\n }\n \n impl<'a, A: Copy> Clean<FnDecl> for (&'a hir::FnDecl, A)\n-    where (&'a [P<hir::Ty>], A): Clean<Arguments>\n+    where (&'a [hir::Ty], A): Clean<Arguments>\n {\n     fn clean(&self, cx: &DocContext) -> FnDecl {\n         FnDecl {\n@@ -2926,7 +2926,7 @@ impl Clean<Type> for hir::Ty {\n                                         }\n                                     });\n                                     if let Some(ty) = type_.cloned() {\n-                                        ty_substs.insert(ty_param_def, ty.into_inner().clean(cx));\n+                                        ty_substs.insert(ty_param_def, ty.clean(cx));\n                                     } else if let Some(default) = default.clone() {\n                                         ty_substs.insert(ty_param_def,\n                                                          default.into_inner().clean(cx));"}]}