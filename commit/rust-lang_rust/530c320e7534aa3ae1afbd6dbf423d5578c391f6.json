{"sha": "530c320e7534aa3ae1afbd6dbf423d5578c391f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMGMzMjBlNzUzNGFhM2FlMWFmYmQ2ZGJmNDIzZDU1NzhjMzkxZjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-25T18:28:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T18:28:12Z"}, "message": "Rollup merge of #70366 - cuviper:option-fuse, r=dtolnay\n\nImplement Fuse with Option\n\nThe former `done` flag was roughly similar to an `Option` tag, but left\nthe possibity of misuse. By using a real `Option`, we can set `None`\nwhen the iterator is exhausted, removing any way to call it again. We\nalso allow niche layout this way, so the `Fuse` may be smaller.\n\nThe `FusedIterator` specialization does want to ignore the possibility\nof exhaustion though, so it uses `unsafe { intrinsics::unreachable() }`\nto optimize that branch away. The entire `Fuse` implementation is now\nisolated in its own module to contain that unsafety.\n\nr? @scottmcm", "tree": {"sha": "ed527a0ba103d7deae67dd66eee5fcab382c0a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed527a0ba103d7deae67dd66eee5fcab382c0a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530c320e7534aa3ae1afbd6dbf423d5578c391f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJee6K9CRBK7hj4Ov3rIwAAdHIIADOYv3eFOxtre3ylM8SiAh+S\nEIaA+vk8JqO+OmusqNwCvdcsHT3rFcKbvXYu46Ke2y4xWQ5K4Zys59ELTvwp2W1f\nV0w/56DzfsdvM7GrYKNCVNyhtXRa5oIMWycNKnrQZzqXDBJ+DtjxxmfSkwpz6VLp\n0hWAKWBjWUFC60x2O1cnR3GkZCuyqSNgkMP4loMYcufkSv36PBCrpHMHbLIWOzPT\n0CRpOQ6GtJvNxBJXXHXiWvMYpxks4EOBpeUb5NByTmQSHiUhM02WGEw6GaMcN5ez\nRuwLAhDSZpcRqAzHey4GKv4OrCjD54RrySgTGPdkoZH/MIrV5vS+bAZ3/6t2iQw=\n=74oI\n-----END PGP SIGNATURE-----\n", "payload": "tree ed527a0ba103d7deae67dd66eee5fcab382c0a0f\nparent 3586ab615e40fdc5a0f2bb40d201753b1e36d875\nparent 4f429c074b865e2ae7a4dc52eb6f2e5db9244e48\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585160892 +0100\ncommitter GitHub <noreply@github.com> 1585160892 +0100\n\nRollup merge of #70366 - cuviper:option-fuse, r=dtolnay\n\nImplement Fuse with Option\n\nThe former `done` flag was roughly similar to an `Option` tag, but left\nthe possibity of misuse. By using a real `Option`, we can set `None`\nwhen the iterator is exhausted, removing any way to call it again. We\nalso allow niche layout this way, so the `Fuse` may be smaller.\n\nThe `FusedIterator` specialization does want to ignore the possibility\nof exhaustion though, so it uses `unsafe { intrinsics::unreachable() }`\nto optimize that branch away. The entire `Fuse` implementation is now\nisolated in its own module to contain that unsafety.\n\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530c320e7534aa3ae1afbd6dbf423d5578c391f6", "html_url": "https://github.com/rust-lang/rust/commit/530c320e7534aa3ae1afbd6dbf423d5578c391f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530c320e7534aa3ae1afbd6dbf423d5578c391f6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3586ab615e40fdc5a0f2bb40d201753b1e36d875", "url": "https://api.github.com/repos/rust-lang/rust/commits/3586ab615e40fdc5a0f2bb40d201753b1e36d875", "html_url": "https://github.com/rust-lang/rust/commit/3586ab615e40fdc5a0f2bb40d201753b1e36d875"}, {"sha": "4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "html_url": "https://github.com/rust-lang/rust/commit/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48"}], "stats": {"total": 599, "additions": 344, "deletions": 255}, "files": [{"sha": "a60ca64ec87c87042331e8cb78e1bfb250d6c350", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/530c320e7534aa3ae1afbd6dbf423d5578c391f6/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530c320e7534aa3ae1afbd6dbf423d5578c391f6/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=530c320e7534aa3ae1afbd6dbf423d5578c391f6", "patch": "@@ -0,0 +1,342 @@\n+use crate::intrinsics;\n+use crate::iter::{\n+    DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, TrustedRandomAccess,\n+};\n+use crate::ops::Try;\n+\n+/// An iterator that yields `None` forever after the underlying iterator\n+/// yields `None` once.\n+///\n+/// This `struct` is created by the [`fuse`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`fuse`]: trait.Iterator.html#method.fuse\n+/// [`Iterator`]: trait.Iterator.html\n+#[derive(Clone, Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Fuse<I> {\n+    // NOTE: for `I: FusedIterator`, this is always assumed `Some`!\n+    iter: Option<I>,\n+}\n+impl<I> Fuse<I> {\n+    pub(in crate::iter) fn new(iter: I) -> Fuse<I> {\n+        Fuse { iter: Some(iter) }\n+    }\n+}\n+\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> Iterator for Fuse<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = <I as Iterator>::Item;\n+\n+    #[inline]\n+    default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+        let next = self.iter.as_mut()?.next();\n+        if next.is_none() {\n+            self.iter = None;\n+        }\n+        next\n+    }\n+\n+    #[inline]\n+    default fn nth(&mut self, n: usize) -> Option<I::Item> {\n+        let nth = self.iter.as_mut()?.nth(n);\n+        if nth.is_none() {\n+            self.iter = None;\n+        }\n+        nth\n+    }\n+\n+    #[inline]\n+    default fn last(self) -> Option<I::Item> {\n+        self.iter?.last()\n+    }\n+\n+    #[inline]\n+    default fn count(self) -> usize {\n+        self.iter.map_or(0, I::count)\n+    }\n+\n+    #[inline]\n+    default fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.as_ref().map_or((0, Some(0)), I::size_hint)\n+    }\n+\n+    #[inline]\n+    default fn try_fold<Acc, Fold, R>(&mut self, mut acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        if let Some(ref mut iter) = self.iter {\n+            acc = iter.try_fold(acc, fold)?;\n+            self.iter = None;\n+        }\n+        Try::from_ok(acc)\n+    }\n+\n+    #[inline]\n+    default fn fold<Acc, Fold>(self, mut acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        if let Some(iter) = self.iter {\n+            acc = iter.fold(acc, fold);\n+        }\n+        acc\n+    }\n+\n+    #[inline]\n+    default fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        let found = self.iter.as_mut()?.find(predicate);\n+        if found.is_none() {\n+            self.iter = None;\n+        }\n+        found\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> DoubleEndedIterator for Fuse<I>\n+where\n+    I: DoubleEndedIterator,\n+{\n+    #[inline]\n+    default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+        let next = self.iter.as_mut()?.next_back();\n+        if next.is_none() {\n+            self.iter = None;\n+        }\n+        next\n+    }\n+\n+    #[inline]\n+    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        let nth = self.iter.as_mut()?.nth_back(n);\n+        if nth.is_none() {\n+            self.iter = None;\n+        }\n+        nth\n+    }\n+\n+    #[inline]\n+    default fn try_rfold<Acc, Fold, R>(&mut self, mut acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        if let Some(ref mut iter) = self.iter {\n+            acc = iter.try_rfold(acc, fold)?;\n+            self.iter = None;\n+        }\n+        Try::from_ok(acc)\n+    }\n+\n+    #[inline]\n+    default fn rfold<Acc, Fold>(self, mut acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        if let Some(iter) = self.iter {\n+            acc = iter.rfold(acc, fold);\n+        }\n+        acc\n+    }\n+\n+    #[inline]\n+    default fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        let found = self.iter.as_mut()?.rfind(predicate);\n+        if found.is_none() {\n+            self.iter = None;\n+        }\n+        found\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> ExactSizeIterator for Fuse<I>\n+where\n+    I: ExactSizeIterator,\n+{\n+    default fn len(&self) -> usize {\n+        self.iter.as_ref().map_or(0, I::len)\n+    }\n+\n+    default fn is_empty(&self) -> bool {\n+        self.iter.as_ref().map_or(true, I::is_empty)\n+    }\n+}\n+\n+// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`\n+impl<I: FusedIterator> Fuse<I> {\n+    #[inline(always)]\n+    fn as_inner(&self) -> &I {\n+        match self.iter {\n+            Some(ref iter) => iter,\n+            // SAFETY: the specialized iterator never sets `None`\n+            None => unsafe { intrinsics::unreachable() },\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn as_inner_mut(&mut self) -> &mut I {\n+        match self.iter {\n+            Some(ref mut iter) => iter,\n+            // SAFETY: the specialized iterator never sets `None`\n+            None => unsafe { intrinsics::unreachable() },\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn into_inner(self) -> I {\n+        match self.iter {\n+            Some(iter) => iter,\n+            // SAFETY: the specialized iterator never sets `None`\n+            None => unsafe { intrinsics::unreachable() },\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I> Iterator for Fuse<I>\n+where\n+    I: FusedIterator,\n+{\n+    #[inline]\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+        self.as_inner_mut().next()\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<I::Item> {\n+        self.as_inner_mut().nth(n)\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<I::Item> {\n+        self.into_inner().last()\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.into_inner().count()\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.as_inner().size_hint()\n+    }\n+\n+    #[inline]\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        self.as_inner_mut().try_fold(init, fold)\n+    }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.into_inner().fold(init, fold)\n+    }\n+\n+    #[inline]\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        self.as_inner_mut().find(predicate)\n+    }\n+}\n+\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I> DoubleEndedIterator for Fuse<I>\n+where\n+    I: DoubleEndedIterator + FusedIterator,\n+{\n+    #[inline]\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+        self.as_inner_mut().next_back()\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        self.as_inner_mut().nth_back(n)\n+    }\n+\n+    #[inline]\n+    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        self.as_inner_mut().try_rfold(init, fold)\n+    }\n+\n+    #[inline]\n+    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.into_inner().rfold(init, fold)\n+    }\n+\n+    #[inline]\n+    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        self.as_inner_mut().rfind(predicate)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> ExactSizeIterator for Fuse<I>\n+where\n+    I: ExactSizeIterator + FusedIterator,\n+{\n+    fn len(&self) -> usize {\n+        self.as_inner().len()\n+    }\n+\n+    fn is_empty(&self) -> bool {\n+        self.as_inner().is_empty()\n+    }\n+}\n+\n+unsafe impl<I> TrustedRandomAccess for Fuse<I>\n+where\n+    I: TrustedRandomAccess,\n+{\n+    unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n+        match self.iter {\n+            Some(ref mut iter) => iter.get_unchecked(i),\n+            // SAFETY: the caller asserts there is an item at `i`, so we're not exhausted.\n+            None => intrinsics::unreachable(),\n+        }\n+    }\n+\n+    fn may_have_side_effect() -> bool {\n+        I::may_have_side_effect()\n+    }\n+}"}, {"sha": "16738543eb3af57139ace44e1edd8bb4871e308e", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 255, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/530c320e7534aa3ae1afbd6dbf423d5578c391f6/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530c320e7534aa3ae1afbd6dbf423d5578c391f6/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=530c320e7534aa3ae1afbd6dbf423d5578c391f6", "patch": "@@ -9,11 +9,13 @@ use super::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator, Tru\n \n mod chain;\n mod flatten;\n+mod fuse;\n mod zip;\n \n pub use self::chain::Chain;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::flatten::{FlatMap, Flatten};\n+pub use self::fuse::Fuse;\n pub(crate) use self::zip::TrustedRandomAccess;\n pub use self::zip::Zip;\n \n@@ -2238,261 +2240,6 @@ where\n     }\n }\n \n-/// An iterator that yields `None` forever after the underlying iterator\n-/// yields `None` once.\n-///\n-/// This `struct` is created by the [`fuse`] method on [`Iterator`]. See its\n-/// documentation for more.\n-///\n-/// [`fuse`]: trait.Iterator.html#method.fuse\n-/// [`Iterator`]: trait.Iterator.html\n-#[derive(Clone, Debug)]\n-#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Fuse<I> {\n-    iter: I,\n-    done: bool,\n-}\n-impl<I> Fuse<I> {\n-    pub(super) fn new(iter: I) -> Fuse<I> {\n-        Fuse { iter, done: false }\n-    }\n-}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> Iterator for Fuse<I>\n-where\n-    I: Iterator,\n-{\n-    type Item = <I as Iterator>::Item;\n-\n-    #[inline]\n-    default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        if self.done {\n-            None\n-        } else {\n-            let next = self.iter.next();\n-            self.done = next.is_none();\n-            next\n-        }\n-    }\n-\n-    #[inline]\n-    default fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        if self.done {\n-            None\n-        } else {\n-            let nth = self.iter.nth(n);\n-            self.done = nth.is_none();\n-            nth\n-        }\n-    }\n-\n-    #[inline]\n-    default fn last(self) -> Option<I::Item> {\n-        if self.done { None } else { self.iter.last() }\n-    }\n-\n-    #[inline]\n-    default fn count(self) -> usize {\n-        if self.done { 0 } else { self.iter.count() }\n-    }\n-\n-    #[inline]\n-    default fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.done { (0, Some(0)) } else { self.iter.size_hint() }\n-    }\n-\n-    #[inline]\n-    default fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n-    {\n-        if self.done {\n-            Try::from_ok(init)\n-        } else {\n-            let acc = self.iter.try_fold(init, fold)?;\n-            self.done = true;\n-            Try::from_ok(acc)\n-        }\n-    }\n-\n-    #[inline]\n-    default fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        if self.done { init } else { self.iter.fold(init, fold) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> DoubleEndedIterator for Fuse<I>\n-where\n-    I: DoubleEndedIterator,\n-{\n-    #[inline]\n-    default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        if self.done {\n-            None\n-        } else {\n-            let next = self.iter.next_back();\n-            self.done = next.is_none();\n-            next\n-        }\n-    }\n-\n-    #[inline]\n-    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        if self.done {\n-            None\n-        } else {\n-            let nth = self.iter.nth_back(n);\n-            self.done = nth.is_none();\n-            nth\n-        }\n-    }\n-\n-    #[inline]\n-    default fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n-    {\n-        if self.done {\n-            Try::from_ok(init)\n-        } else {\n-            let acc = self.iter.try_rfold(init, fold)?;\n-            self.done = true;\n-            Try::from_ok(acc)\n-        }\n-    }\n-\n-    #[inline]\n-    default fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        if self.done { init } else { self.iter.rfold(init, fold) }\n-    }\n-}\n-\n-unsafe impl<I> TrustedRandomAccess for Fuse<I>\n-where\n-    I: TrustedRandomAccess,\n-{\n-    unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n-        self.iter.get_unchecked(i)\n-    }\n-\n-    fn may_have_side_effect() -> bool {\n-        I::may_have_side_effect()\n-    }\n-}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I> Iterator for Fuse<I>\n-where\n-    I: FusedIterator,\n-{\n-    #[inline]\n-    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.iter.next()\n-    }\n-\n-    #[inline]\n-    fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        self.iter.nth(n)\n-    }\n-\n-    #[inline]\n-    fn last(self) -> Option<I::Item> {\n-        self.iter.last()\n-    }\n-\n-    #[inline]\n-    fn count(self) -> usize {\n-        self.iter.count()\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-\n-    #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n-    {\n-        self.iter.try_fold(init, fold)\n-    }\n-\n-    #[inline]\n-    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        self.iter.fold(init, fold)\n-    }\n-}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I> DoubleEndedIterator for Fuse<I>\n-where\n-    I: DoubleEndedIterator + FusedIterator,\n-{\n-    #[inline]\n-    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.iter.next_back()\n-    }\n-\n-    #[inline]\n-    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        self.iter.nth_back(n)\n-    }\n-\n-    #[inline]\n-    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n-    where\n-        Self: Sized,\n-        Fold: FnMut(Acc, Self::Item) -> R,\n-        R: Try<Ok = Acc>,\n-    {\n-        self.iter.try_rfold(init, fold)\n-    }\n-\n-    #[inline]\n-    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n-    where\n-        Fold: FnMut(Acc, Self::Item) -> Acc,\n-    {\n-        self.iter.rfold(init, fold)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ExactSizeIterator for Fuse<I>\n-where\n-    I: ExactSizeIterator,\n-{\n-    fn len(&self) -> usize {\n-        self.iter.len()\n-    }\n-\n-    fn is_empty(&self) -> bool {\n-        self.iter.is_empty()\n-    }\n-}\n-\n /// An iterator that calls a function with a reference to each element before\n /// yielding it.\n ///"}]}