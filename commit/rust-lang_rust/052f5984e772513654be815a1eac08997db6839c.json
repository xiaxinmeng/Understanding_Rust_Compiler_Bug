{"sha": "052f5984e772513654be815a1eac08997db6839c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmY1OTg0ZTc3MjUxMzY1NGJlODE1YTFlYWMwODk5N2RiNjgzOWM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-03T18:46:10Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-08T16:00:44Z"}, "message": "Fix types comparison", "tree": {"sha": "0c369f84df38985c820bb27c85f71e3d0e41e0dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c369f84df38985c820bb27c85f71e3d0e41e0dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052f5984e772513654be815a1eac08997db6839c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052f5984e772513654be815a1eac08997db6839c", "html_url": "https://github.com/rust-lang/rust/commit/052f5984e772513654be815a1eac08997db6839c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052f5984e772513654be815a1eac08997db6839c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9e858b786c262185b279be2d78e9eea0a81ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e858b786c262185b279be2d78e9eea0a81ed8", "html_url": "https://github.com/rust-lang/rust/commit/8e9e858b786c262185b279be2d78e9eea0a81ed8"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "6d33f31d45c51009bbe1e2ab0ab85c5ec691245e", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052f5984e772513654be815a1eac08997db6839c/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052f5984e772513654be815a1eac08997db6839c/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=052f5984e772513654be815a1eac08997db6839c", "patch": "@@ -10,7 +10,7 @@ use std::{fmt, iter};\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n-            match_type, method_chain_args, return_ty, snippet, snippet_opt, span_lint,\n+            match_type, method_chain_args, return_ty, same_tys, snippet, snippet_opt, span_lint,\n             span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::{BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH, STRING_PATH,\n             VEC_PATH};\n@@ -432,7 +432,7 @@ impl LateLintPass for MethodsPass {\n                     }\n \n                     let ret_ty = return_ty(cx.tcx.node_id_to_type(implitem.id));\n-                    if &name.as_str() == &\"new\" && !ret_ty.map_or(false, |ret_ty| ret_ty.walk().any(|t| t == ty)) {\n+                    if &name.as_str() == &\"new\" && !ret_ty.map_or(false, |ret_ty| ret_ty.walk().any(|t| same_tys(cx, t, ty))) {\n                         span_lint(cx,\n                                   NEW_RET_NO_SELF,\n                                   sig.explicit_self.span,"}, {"sha": "d341afb4d92161b26344a12803d5ad6931042bd0", "filename": "src/new_without_default.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/052f5984e772513654be815a1eac08997db6839c/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052f5984e772513654be815a1eac08997db6839c/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=052f5984e772513654be815a1eac08997db6839c", "patch": "@@ -3,7 +3,8 @@ use rustc_front::hir;\n use rustc_front::intravisit::FnKind;\n use syntax::ast;\n use syntax::codemap::Span;\n-use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, span_lint, DEFAULT_TRAIT_PATH};\n+use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint,\n+            DEFAULT_TRAIT_PATH};\n \n /// **What it does:** This lints about type with a `fn new() -> Self` method and no `Default`\n /// implementation.\n@@ -49,16 +50,15 @@ impl LateLintPass for NewWithoutDefault {\n             if decl.inputs.is_empty() && name.as_str() == \"new\" {\n                 let self_ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id))).ty;\n \n-                let ret_ty = return_ty(cx.tcx.node_id_to_type(id));\n-\n-                if Some(self_ty) == ret_ty {\n-                    if let Some(default_trait_id) = get_trait_def_id(cx, &DEFAULT_TRAIT_PATH) {\n-                        if !implements_trait(cx, self_ty, default_trait_id, Vec::new()) {\n-                            span_lint(cx, NEW_WITHOUT_DEFAULT, span,\n-                                      &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty));\n-                        }\n-                    }\n-                }\n+                if_let_chain!{[\n+                    let Some(ret_ty) = return_ty(cx.tcx.node_id_to_type(id)),\n+                    same_tys(cx, self_ty, ret_ty),\n+                    let Some(default_trait_id) = get_trait_def_id(cx, &DEFAULT_TRAIT_PATH),\n+                    !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n+                ], {\n+                    span_lint(cx, NEW_WITHOUT_DEFAULT, span,\n+                              &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty));\n+                }}\n             }\n         }\n     }"}, {"sha": "c626fcb8930c5684abade39faddd0c0f36c16dee", "filename": "src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/052f5984e772513654be815a1eac08997db6839c/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052f5984e772513654be815a1eac08997db6839c/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=052f5984e772513654be815a1eac08997db6839c", "patch": "@@ -740,3 +740,11 @@ pub fn return_ty(fun: ty::Ty) -> Option<ty::Ty> {\n         None\n     }\n }\n+\n+/// Check if two types are the same.\n+// FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` == `for <'b> Foo<'b>` but\n+// not for type parameters.\n+pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>) -> bool {\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None);\n+    infcx.can_equate(&cx.tcx.erase_regions(&a), &cx.tcx.erase_regions(&b)).is_ok()\n+}"}, {"sha": "46f14d5d921c83d8f5c9e8f147bd4fce5ea7514e", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/052f5984e772513654be815a1eac08997db6839c/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052f5984e772513654be815a1eac08997db6839c/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=052f5984e772513654be815a1eac08997db6839c", "patch": "@@ -28,6 +28,25 @@ impl T {\n     //~| ERROR methods called `new` usually return `Self`\n }\n \n+struct Lt<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    #[allow(needless_lifetimes)]\n+    pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n+}\n+\n+struct Lt2<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt2<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    pub fn new(s: &str) -> Lt2 { unimplemented!() }\n+}\n+\n #[derive(Clone,Copy)]\n struct U;\n "}, {"sha": "cc033043bc59c56ae0836f5f26cccf6ae563690e", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/052f5984e772513654be815a1eac08997db6839c/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052f5984e772513654be815a1eac08997db6839c/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=052f5984e772513654be815a1eac08997db6839c", "patch": "@@ -32,4 +32,13 @@ impl Params {\n     fn new(_: u32) -> Self { Params }\n }\n \n+struct Generics<'a, T> {\n+    foo: &'a bool,\n+    bar: T,\n+}\n+\n+impl<'c, V> Generics<'c, V> {\n+    fn new<'b>() -> Generics<'b, V> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+}\n+\n fn main() {}"}]}