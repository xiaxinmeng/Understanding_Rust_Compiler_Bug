{"sha": "e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YTgwNTUyMmM3Y2VlNDBmZGM4OGVkZmI3YTZhZTA1YzJhZDE3NTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-03T10:07:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-03T10:07:06Z"}, "message": "Rollup merge of #56141 - jnqnfe:osstr_len_clarity, r=nagisa\n\n[std] Osstr len clarity", "tree": {"sha": "f66deeca2d765c9caf9a68bca4db28f057806078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66deeca2d765c9caf9a68bca4db28f057806078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcBQBKCRBK7hj4Ov3rIwAAdHIIAK5vBpZDipwQhewJG7B4rsCZ\nLNaDPsA75ZccOuIxaSu/0NI5h8LhYWGo/Kt1diMX9O4TRji2oQ9r16dKM/HwyBkR\nOWkHrjFxgqjuueh2UN4pX0VoDfg9FrDenD7qmtKKP1n/+OwYTHA3kkRrRMfsr+LF\nBOKgvgalKpYoO4zK5M9WeGzXe5UtXyUlbgemJO75kZrBmu4Mdd9fIAQUKJso0Nsw\nyz19nIP6RFVR++m/g1tQqhxWLL9QQTUdaMxg9Ge78kCJagOYB/096+IbYWVFeINw\nBp4mamI/k7+PBVAJUtSktn3NC0kgsbRbMoeBbrzCPA3X5TJQsOWGJQMUbOh+S5k=\n=E2Ka\n-----END PGP SIGNATURE-----\n", "payload": "tree f66deeca2d765c9caf9a68bca4db28f057806078\nparent 25c375413ab8e24b01bef1d80d61dff58ef7bc1c\nparent a1e9c7fc2e4806fe72c84178bf1116f645d18c43\nauthor kennytm <kennytm@gmail.com> 1543831626 +0800\ncommitter GitHub <noreply@github.com> 1543831626 +0800\n\nRollup merge of #56141 - jnqnfe:osstr_len_clarity, r=nagisa\n\n[std] Osstr len clarity\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "html_url": "https://github.com/rust-lang/rust/commit/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c375413ab8e24b01bef1d80d61dff58ef7bc1c", "html_url": "https://github.com/rust-lang/rust/commit/25c375413ab8e24b01bef1d80d61dff58ef7bc1c"}, {"sha": "a1e9c7fc2e4806fe72c84178bf1116f645d18c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e9c7fc2e4806fe72c84178bf1116f645d18c43", "html_url": "https://github.com/rust-lang/rust/commit/a1e9c7fc2e4806fe72c84178bf1116f645d18c43"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "0edfd122ceff9a080a30b28cde5e6e14658f59ae", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a805522c7cee40fdc88edfb7a6ae05c2ad1752/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=e9a805522c7cee40fdc88edfb7a6ae05c2ad1752", "patch": "@@ -42,6 +42,13 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// in each pair are owned strings; the latter are borrowed\n /// references.\n ///\n+/// Note, `OsString` and `OsStr` internally do not necessarily hold strings in\n+/// the form native to the platform; While on Unix, strings are stored as a\n+/// sequence of 8-bit values, on Windows, where strings are 16-bit value based\n+/// as just discussed, strings are also actually stored as a sequence of 8-bit\n+/// values, encoded in a less-strict variant of UTF-8. This is useful to\n+/// understand when handling capacity and length values.\n+///\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n@@ -583,14 +590,19 @@ impl OsStr {\n \n     /// Returns the length of this `OsStr`.\n     ///\n-    /// Note that this does **not** return the number of bytes in this string\n-    /// as, for example, OS strings on Windows are encoded as a list of [`u16`]\n-    /// rather than a list of bytes. This number is simply useful for passing to\n-    /// other methods like [`OsString::with_capacity`] to avoid reallocations.\n+    /// Note that this does **not** return the number of bytes in the string in\n+    /// OS string form.\n+    ///\n+    /// The length returned is that of the underlying storage used by `OsStr`;\n+    /// As discussed in the [`OsString`] introduction, [`OsString`] and `OsStr`\n+    /// store strings in a form best suited for cheap inter-conversion between\n+    /// native-platform and Rust string forms, which may differ significantly\n+    /// from both of them, including in storage size and encoding.\n     ///\n-    /// See `OsStr` introduction for more information about encoding.\n+    /// This number is simply useful for passing to other methods, like\n+    /// [`OsString::with_capacity`] to avoid reallocations.\n     ///\n-    /// [`u16`]: ../primitive.u16.html\n+    /// [`OsString`]: struct.OsString.html\n     /// [`OsString::with_capacity`]: struct.OsString.html#method.with_capacity\n     ///\n     /// # Examples"}]}