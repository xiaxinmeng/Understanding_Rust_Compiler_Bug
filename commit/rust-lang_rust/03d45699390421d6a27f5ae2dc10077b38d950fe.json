{"sha": "03d45699390421d6a27f5ae2dc10077b38d950fe", "node_id": "C_kwDOAAsO6NoAKDAzZDQ1Njk5MzkwNDIxZDZhMjdmNWFlMmRjMTAwNzdiMzhkOTUwZmU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-21T16:57:48Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-12T08:54:21Z"}, "message": "Fill-in tracking issues for features pointer_byte_offsets, const_pointer_byte_offsets and pointer_is_aligned", "tree": {"sha": "ceb4f30d741da5ea4543ebc5d10108b3d01dd589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb4f30d741da5ea4543ebc5d10108b3d01dd589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d45699390421d6a27f5ae2dc10077b38d950fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d45699390421d6a27f5ae2dc10077b38d950fe", "html_url": "https://github.com/rust-lang/rust/commit/03d45699390421d6a27f5ae2dc10077b38d950fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d45699390421d6a27f5ae2dc10077b38d950fe/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5d62aeb2a7be83bff34d6f4db4e1bbe7bd5a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5d62aeb2a7be83bff34d6f4db4e1bbe7bd5a93", "html_url": "https://github.com/rust-lang/rust/commit/5a5d62aeb2a7be83bff34d6f4db4e1bbe7bd5a93"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "f26fdc74ce1618442117085e941d85d647c7b688", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03d45699390421d6a27f5ae2dc10077b38d950fe/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d45699390421d6a27f5ae2dc10077b38d950fe/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=03d45699390421d6a27f5ae2dc10077b38d950fe", "patch": "@@ -467,8 +467,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n@@ -549,8 +549,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n         from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n     }\n@@ -659,8 +659,8 @@ impl<T: ?Sized> *const T {\n     /// For non-`Sized` pointees this operation considers only the data pointers,\n     /// ignoring the metadata.\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n@@ -880,8 +880,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n         let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n@@ -965,8 +965,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n         let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n@@ -1047,8 +1047,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n         from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n     }\n@@ -1127,8 +1127,8 @@ impl<T: ?Sized> *const T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n         from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n     }\n@@ -1296,7 +1296,7 @@ impl<T: ?Sized> *const T {\n     /// Returns whether the pointer is properly aligned for `T`.\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     pub fn is_aligned(self) -> bool\n     where\n         T: Sized,\n@@ -1314,7 +1314,7 @@ impl<T: ?Sized> *const T {\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     pub fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");"}, {"sha": "37cf2ef4bfbb5f5d0c34fe9d52d1a41d47433963", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03d45699390421d6a27f5ae2dc10077b38d950fe/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d45699390421d6a27f5ae2dc10077b38d950fe/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=03d45699390421d6a27f5ae2dc10077b38d950fe", "patch": "@@ -479,8 +479,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n@@ -560,8 +560,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n         from_raw_parts_mut::<T>(\n             self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n@@ -838,8 +838,8 @@ impl<T: ?Sized> *mut T {\n     /// For non-`Sized` pointees this operation considers only the data pointers,\n     /// ignoring the metadata.\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n@@ -992,8 +992,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n         let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n@@ -1077,8 +1077,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n         let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n@@ -1159,8 +1159,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n         from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n     }\n@@ -1239,8 +1239,8 @@ impl<T: ?Sized> *mut T {\n     /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n-    #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n+    #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n         from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n     }\n@@ -1565,7 +1565,7 @@ impl<T: ?Sized> *mut T {\n     /// Returns whether the pointer is properly aligned for `T`.\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     pub fn is_aligned(self) -> bool\n     where\n         T: Sized,\n@@ -1583,7 +1583,7 @@ impl<T: ?Sized> *mut T {\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n+    #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     pub fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");"}]}