{"sha": "5bcd0a0b5030487613bee37ed38945e42c4e6b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViY2QwYTBiNTAzMDQ4NzYxM2JlZTM3ZWQzODk0NWU0MmM0ZTZiODU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2014-10-15T17:26:43Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2014-10-15T17:26:43Z"}, "message": "prevent the creation of integers too big for the target architecture", "tree": {"sha": "ad241de1fe78378913905d09aabd658583f0ed62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad241de1fe78378913905d09aabd658583f0ed62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bcd0a0b5030487613bee37ed38945e42c4e6b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcd0a0b5030487613bee37ed38945e42c4e6b85", "html_url": "https://github.com/rust-lang/rust/commit/5bcd0a0b5030487613bee37ed38945e42c4e6b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bcd0a0b5030487613bee37ed38945e42c4e6b85/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ab2ea08ae669711c5d9c0c069da2d0a8606639", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ab2ea08ae669711c5d9c0c069da2d0a8606639", "html_url": "https://github.com/rust-lang/rust/commit/61ab2ea08ae669711c5d9c0c069da2d0a8606639"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "861ed01aa3bfa66b4ac084d5a069863b067d5b00", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bcd0a0b5030487613bee37ed38945e42c4e6b85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcd0a0b5030487613bee37ed38945e42c4e6b85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=5bcd0a0b5030487613bee37ed38945e42c4e6b85", "patch": "@@ -478,7 +478,7 @@ fn ensure_struct_fits_in_address_space(ccx: &CrateContext,\n         offset += machine::llsize_of_alloc(ccx, llty);\n \n         // We can get away with checking for overflow once per iteration,\n-        // because field sizes are less than 1<<60.\n+        // because field sizes are less than 1<<61.\n         if offset >= ccx.max_obj_size() {\n             ccx.report_overbig_object(scapegoat);\n         }\n@@ -498,7 +498,7 @@ fn ensure_enum_fits_in_address_space(ccx: &CrateContext,\n     let discr_size = machine::llsize_of_alloc(ccx, ll_inttype(ccx, discr));\n     let (field_size, field_align) = union_size_and_align(fields);\n \n-    // This can't overflow because field_size, discr_size, field_align < 1<<60\n+    // This can't overflow because field_size, discr_size, field_align < 1<<61\n     let total_size = roundup(discr_size, field_align) + field_size;\n \n     if total_size >= ccx.max_obj_size() {"}, {"sha": "38a99f16ed66cc2387c88fecc40775743b1fbd67", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5bcd0a0b5030487613bee37ed38945e42c4e6b85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcd0a0b5030487613bee37ed38945e42c4e6b85/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5bcd0a0b5030487613bee37ed38945e42c4e6b85", "patch": "@@ -596,17 +596,34 @@ pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef {\n }\n \n pub fn C_int<I: AsI64>(ccx: &CrateContext, i: I) -> ValueRef {\n-    C_integral(ccx.int_type(), i.as_i64() as u64, true)\n+    let v = i.as_i64();\n+\n+    match machine::llbitsize_of_real(ccx.int_type()) {\n+        32 => assert!(v < (1<<31) && v >= -(1<<31)),\n+        64 => {},\n+        n => fail!(\"unsupported target size: {}\", n)\n+    }\n+\n+    C_integral(ccx.int_type(), v as u64, true)\n }\n \n pub fn C_uint<I: AsU64>(ccx: &CrateContext, i: I) -> ValueRef {\n-    C_integral(ccx.int_type(), i.as_u64(), false)\n+    let v = i.as_u64();\n+\n+    match machine::llbitsize_of_real(ccx.int_type()) {\n+        32 => assert!(v < (1<<32)),\n+        64 => {},\n+        n => fail!(\"unsupported target size: {}\", n)\n+    }\n+\n+    C_integral(ccx.int_type(), v, false)\n }\n \n pub trait AsI64 { fn as_i64(self) -> i64; }\n pub trait AsU64 { fn as_u64(self) -> u64; }\n \n-// FIXME: remove the intptr conversions\n+// FIXME: remove the intptr conversions, because they\n+// are host-architecture-dependent\n impl AsI64 for i64 { fn as_i64(self) -> i64 { self as i64 }}\n impl AsI64 for i32 { fn as_i64(self) -> i64 { self as i64 }}\n impl AsI64 for int { fn as_i64(self) -> i64 { self as i64 }}"}]}