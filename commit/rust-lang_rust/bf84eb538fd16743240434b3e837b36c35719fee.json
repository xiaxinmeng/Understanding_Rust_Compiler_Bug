{"sha": "bf84eb538fd16743240434b3e837b36c35719fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODRlYjUzOGZkMTY3NDMyNDA0MzRiM2U4MzdiMzZjMzU3MTlmZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T12:49:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T12:49:12Z"}, "message": "Auto merge of #67850 - GuillaumeGomez:err-codes-checkup, r=Mark-Simulacrum\n\nError codes checkup and rustdoc test fix\n\nThis PR does a few things:\n\n * fix how rustdoc checks that an error code has been thrown (it only checked for \"E0XXX\" so if it appeared in the output because the file has it in its name or wherever, it passed the test, which was incorrect)\n * fix the failing code examples that weren't throwing the expected error code", "tree": {"sha": "b9bdb0082e4b4341905a42c9d3cef95e126f5d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bdb0082e4b4341905a42c9d3cef95e126f5d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf84eb538fd16743240434b3e837b36c35719fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf84eb538fd16743240434b3e837b36c35719fee", "html_url": "https://github.com/rust-lang/rust/commit/bf84eb538fd16743240434b3e837b36c35719fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf84eb538fd16743240434b3e837b36c35719fee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af958046e5855a4254831102b502f57dafa40f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/af958046e5855a4254831102b502f57dafa40f69", "html_url": "https://github.com/rust-lang/rust/commit/af958046e5855a4254831102b502f57dafa40f69"}, {"sha": "5b7d64e9473216dc8650ca5f910100389ab91726", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7d64e9473216dc8650ca5f910100389ab91726", "html_url": "https://github.com/rust-lang/rust/commit/5b7d64e9473216dc8650ca5f910100389ab91726"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "e6a28a9c2c460e1413fc170d26537933079ccf82", "filename": "src/librustc_error_codes/error_codes/E0445.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0445.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0445.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0445.md?ref=bf84eb538fd16743240434b3e837b36c35719fee", "patch": "@@ -12,6 +12,8 @@ trait Foo {\n pub trait Bar : Foo {} // error: private trait in public interface\n pub struct Bar2<T: Foo>(pub T); // same error\n pub fn foo<T: Foo> (t: T) {} // same error\n+\n+fn main() {}\n ```\n \n To solve this error, please ensure that the trait is also public. The trait\n@@ -26,4 +28,6 @@ pub trait Foo { // we set the Foo trait public\n pub trait Bar : Foo {} // ok!\n pub struct Bar2<T: Foo>(pub T); // ok!\n pub fn foo<T: Foo> (t: T) {} // ok!\n+\n+fn main() {}\n ```"}, {"sha": "77a1834ece42f74758c3cf85f284bf43d0c98e94", "filename": "src/librustc_error_codes/error_codes/E0446.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0446.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0446.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0446.md?ref=bf84eb538fd16743240434b3e837b36c35719fee", "patch": "@@ -12,6 +12,8 @@ mod Foo {\n         Bar(0)\n     }\n }\n+\n+fn main() {}\n ```\n \n To solve this error, please ensure that the type is also public. The type\n@@ -27,4 +29,6 @@ mod Foo {\n         Bar(0)\n     }\n }\n+\n+fn main() {}\n ```"}, {"sha": "d45663f3a5347732b302d9a637c68dcd9b07f5ed", "filename": "src/librustc_error_codes/error_codes/E0491.md", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0491.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustc_error_codes%2Ferror_codes%2FE0491.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0491.md?ref=bf84eb538fd16743240434b3e837b36c35719fee", "patch": "@@ -3,30 +3,34 @@ A reference has a longer lifetime than the data it references.\n Erroneous code example:\n \n ```compile_fail,E0491\n-trait SomeTrait<'a> {\n-    type Output;\n+struct Foo<'a> {\n+    x: fn(&'a i32),\n }\n \n-impl<'a, T> SomeTrait<'a> for T {\n-    type Output = &'a T; // compile error E0491\n+trait Trait<'a, 'b> {\n+    type Out;\n+}\n+\n+impl<'a, 'b> Trait<'a, 'b> for usize {\n+    type Out = &'a Foo<'b>; // error!\n }\n ```\n \n-Here, the problem is that a reference type like `&'a T` is only valid\n-if all the data in T outlives the lifetime `'a`. But this impl as written\n-is applicable to any lifetime `'a` and any type `T` -- we have no guarantee\n-that `T` outlives `'a`. To fix this, you can add a where clause like\n-`where T: 'a`.\n+Here, the problem is that the compiler cannot be sure that the `'b` lifetime\n+will live longer than `'a`, which should be mandatory in order to be sure that\n+`Trait::Out` will always have a reference pointing to an existing type. So in\n+this case, we just need to tell the compiler than `'b` must outlive `'a`:\n \n ```\n-trait SomeTrait<'a> {\n-    type Output;\n+struct Foo<'a> {\n+    x: fn(&'a i32),\n+}\n+\n+trait Trait<'a, 'b> {\n+    type Out;\n }\n \n-impl<'a, T> SomeTrait<'a> for T\n-where\n-    T: 'a,\n-{\n-    type Output = &'a T; // compile error E0491\n+impl<'a, 'b: 'a> Trait<'a, 'b> for usize { // we added the lifetime enforcement\n+    type Out = &'a Foo<'b>; // it now works!\n }\n ```"}, {"sha": "b5731ff0fec21cafc04f668f810958eeffe1c522", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf84eb538fd16743240434b3e837b36c35719fee/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=bf84eb538fd16743240434b3e837b36c35719fee", "patch": "@@ -300,7 +300,6 @@ fn run_test(\n             eprint!(\"{}\", self.0);\n         }\n     }\n-\n     let out = str::from_utf8(&output.stderr).unwrap();\n     let _bomb = Bomb(&out);\n     match (output.status.success(), compile_fail) {\n@@ -310,7 +309,7 @@ fn run_test(\n         (true, false) => {}\n         (false, true) => {\n             if !error_codes.is_empty() {\n-                error_codes.retain(|err| !out.contains(err));\n+                error_codes.retain(|err| !out.contains(&format!(\"error[{}]: \", err)));\n \n                 if !error_codes.is_empty() {\n                     return Err(TestFailure::MissingErrorCodes(error_codes));"}]}