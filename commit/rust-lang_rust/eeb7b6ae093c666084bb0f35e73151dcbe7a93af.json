{"sha": "eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjdiNmFlMDkzYzY2NjA4NGJiMGYzNWU3MzE1MWRjYmU3YTkzYWY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:36Z"}, "message": "Rollup merge of #52939 - ljedrz:fix_51746, r=kennytm\n\nMake io::Read::read_to_end consider io::Take::limit\n\nAdd a custom implementation of `io::Read::read_to_end` for `io::Take` that doesn't reserve the default 32 bytes but rather `Take::limit` if `Take::limit < 32`.\n\nIt's a conservative adjustment that preserves the default behavior for `Take::limit >= 32`.\n\nFixes #51746.", "tree": {"sha": "7fcc3c4c0f66c3d4d26965b8c7ae2f9c599213fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcc3c4c0f66c3d4d26965b8c7ae2f9c599213fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4cCRBK7hj4Ov3rIwAAdHIIAKh757rSHDKkz9C+mbEjegbz\nuKvrKPlpyNaApzcoxyM2FKxLBF7FDdS5ikvQyrYSD63G3Oh8H+gohv16Uf4wi0my\n5qxw58+Ggi77ESgeBh4RZMcOFZXwf+UwPSA0h930qfHguECyw5falwT1v8KuRwUG\na+usKA+oOKbH39v69/g0mTEWGgRBKMoI8bhw1BSUmyPdp5MpNhcu+ZsrMGD+d6vH\nTusV4dWp/oQkfeqSLIFvH0z2lFUcYkYVCKEHLZ+/Mh2fgpuy3EcZGj4LxnY8Q3GI\nMR6R5wAFTCvlhnHOsp6rrtwJj2Mudv8wsHQBuUcnCQswKkHh4LLrMK3cWOFjGu8=\n=P4g6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fcc3c4c0f66c3d4d26965b8c7ae2f9c599213fd\nparent 2893bd0e0c752af8c2238bf18181a4b6991bfd78\nparent b5ed39ff10f0e46be6e97b577477e0f60234fa0b\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152796 +0200\ncommitter GitHub <noreply@github.com> 1533152796 +0200\n\nRollup merge of #52939 - ljedrz:fix_51746, r=kennytm\n\nMake io::Read::read_to_end consider io::Take::limit\n\nAdd a custom implementation of `io::Read::read_to_end` for `io::Take` that doesn't reserve the default 32 bytes but rather `Take::limit` if `Take::limit < 32`.\n\nIt's a conservative adjustment that preserves the default behavior for `Take::limit >= 32`.\n\nFixes #51746.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "html_url": "https://github.com/rust-lang/rust/commit/eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb7b6ae093c666084bb0f35e73151dcbe7a93af/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2893bd0e0c752af8c2238bf18181a4b6991bfd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2893bd0e0c752af8c2238bf18181a4b6991bfd78", "html_url": "https://github.com/rust-lang/rust/commit/2893bd0e0c752af8c2238bf18181a4b6991bfd78"}, {"sha": "b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "html_url": "https://github.com/rust-lang/rust/commit/b5ed39ff10f0e46be6e97b577477e0f60234fa0b"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "b83f3fbe7a59cd94673791f7d3af7ec2bd3836fe", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eeb7b6ae093c666084bb0f35e73151dcbe7a93af/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb7b6ae093c666084bb0f35e73151dcbe7a93af/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=eeb7b6ae093c666084bb0f35e73151dcbe7a93af", "patch": "@@ -354,19 +354,26 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n // avoid paying to allocate and zero a huge chunk of memory if the reader only\n // has 4 bytes while still making large reads if the reader does have a ton\n // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every\n-// time is 4,500 times (!) slower than this if the reader has a very small\n-// amount of data to return.\n+// time is 4,500 times (!) slower than a default reservation size of 32 if the\n+// reader has a very small amount of data to return.\n //\n // Because we're extending the buffer with uninitialized data for trusted\n // readers, we need to make sure to truncate that if any of this panics.\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n+    read_to_end_with_reservation(r, buf, 32)\n+}\n+\n+fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n+                                                  buf: &mut Vec<u8>,\n+                                                  reservation_size: usize) -> Result<usize>\n+{\n     let start_len = buf.len();\n     let mut g = Guard { len: buf.len(), buf: buf };\n     let ret;\n     loop {\n         if g.len == g.buf.len() {\n             unsafe {\n-                g.buf.reserve(32);\n+                g.buf.reserve(reservation_size);\n                 let capacity = g.buf.capacity();\n                 g.buf.set_len(capacity);\n                 r.initializer().initialize(&mut g.buf[g.len..]);\n@@ -1899,6 +1906,12 @@ impl<T: Read> Read for Take<T> {\n     unsafe fn initializer(&self) -> Initializer {\n         self.inner.initializer()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n+        let reservation_size = cmp::min(self.limit, 32) as usize;\n+\n+        read_to_end_with_reservation(self, buf, reservation_size)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}