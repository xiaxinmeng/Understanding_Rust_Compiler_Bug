{"sha": "68b0d862945782f215f39980d6ac9ffabdb2031c", "node_id": "C_kwDOAAsO6NoAKDY4YjBkODYyOTQ1NzgyZjIxNWYzOTk4MGQ2YWM5ZmZhYmRiMjAzMWM", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-14T22:54:55Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-30T22:21:29Z"}, "message": "Add #[must_use] to remaining core functions", "tree": {"sha": "34d1bdbf7fa83aadc8df13f589774d7ef64174ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d1bdbf7fa83aadc8df13f589774d7ef64174ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b0d862945782f215f39980d6ac9ffabdb2031c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b0d862945782f215f39980d6ac9ffabdb2031c", "html_url": "https://github.com/rust-lang/rust/commit/68b0d862945782f215f39980d6ac9ffabdb2031c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b0d862945782f215f39980d6ac9ffabdb2031c/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e9319d93aea755c444c8f8ff863b0936d7a4b6", "html_url": "https://github.com/rust-lang/rust/commit/e1e9319d93aea755c444c8f8ff863b0936d7a4b6"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "dc7d0bff9a404ba8ec417b4ecfd17c3445e4c92d", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -1031,7 +1031,7 @@ fn test_split_at_mut() {\n #[should_panic]\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-    s.split_at(1);\n+    let _ = s.split_at(1);\n }\n \n #[test]"}, {"sha": "cc32d5223b49f655f691017d675c0d363b5de444", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -104,6 +104,7 @@ impl Layout {\n     /// The minimum size in bytes for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn size(&self) -> usize {\n         self.size_\n@@ -137,6 +138,7 @@ impl Layout {\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n@@ -171,6 +173,7 @@ impl Layout {\n     /// [trait object]: ../../book/ch17-02-trait-objects.html\n     /// [extern type]: ../../unstable-book/language-features/extern-types.html\n     #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+    #[must_use]\n     pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n         // SAFETY: we pass along the prerequisites of these functions to the caller\n         let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };\n@@ -187,6 +190,7 @@ impl Layout {\n     /// some other means.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[rustc_const_unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[must_use]\n     #[inline]\n     pub const fn dangling(&self) -> NonNull<u8> {\n         // SAFETY: align is guaranteed to be non-zero"}, {"sha": "1fd5aa27fce46562c51ddc6d3b80a7bfc9b45464", "filename": "library/core/src/any.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -458,6 +458,7 @@ impl TypeId {\n     /// assert_eq!(is_string(&0), false);\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n@@ -492,6 +493,7 @@ impl TypeId {\n ///     \"core::option::Option<alloc::string::String>\",\n /// );\n /// ```\n+#[must_use]\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name<T: ?Sized>() -> &'static str {\n@@ -534,6 +536,7 @@ pub const fn type_name<T: ?Sized>() -> &'static str {\n /// let y = 1.0;\n /// println!(\"{}\", type_name_of_val(&y));\n /// ```\n+#[must_use]\n #[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n pub const fn type_name_of_val<T: ?Sized>(_val: &T) -> &'static str {"}, {"sha": "532208e41afa2ba2b01169da64c061d0d5587347", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -18,6 +18,7 @@ use crate::str::from_utf8_unchecked;\n ///\n /// This `struct` is created by the [`escape_default`] function. See its\n /// documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EscapeDefault {"}, {"sha": "341fbf5c8d8b8a653ccb693b1790a245fab29ffd", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -1333,6 +1333,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// with the widespread use of `r.borrow().clone()` to clone the contents of\n     /// a `RefCell`.\n     #[stable(feature = \"cell_extras\", since = \"1.15.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n         Ref { value: orig.value, borrow: orig.borrow.clone() }"}, {"sha": "5dd8c5ef78941835b3619b63636e2214d00c4620", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -128,6 +128,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n \n impl DecodeUtf16Error {\n     /// Returns the unpaired surrogate which caused this error.\n+    #[must_use]\n     #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n     pub fn unpaired_surrogate(&self) -> u16 {\n         self.code"}, {"sha": "fb862f7df947bc5d688cf1bb46446a8de968ffee", "filename": "library/core/src/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -155,6 +155,7 @@ pub trait Default: Sized {\n /// }\n /// ```\n #[unstable(feature = \"default_free_fn\", issue = \"73014\")]\n+#[must_use]\n #[inline]\n pub fn default<T: Default>() -> T {\n     Default::default()"}, {"sha": "736959a494c5a8a085fd0f59a8698e901bda0e26", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -1618,6 +1618,7 @@ impl<'a> Formatter<'a> {\n     }\n \n     /// Flags for formatting\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n         since = \"1.24.0\",\n@@ -1655,6 +1656,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:G>3}\", Foo), \"GGG\");\n     /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn fill(&self) -> char {\n         self.fill\n@@ -1691,6 +1693,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:^}\", Foo), \"center\");\n     /// assert_eq!(&format!(\"{}\", Foo), \"into the void\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n     pub fn align(&self) -> Option<Alignment> {\n         match self.align {\n@@ -1725,6 +1728,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn width(&self) -> Option<usize> {\n         self.width\n@@ -1755,6 +1759,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn precision(&self) -> Option<usize> {\n         self.precision\n@@ -1785,6 +1790,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignPlus as u32) != 0\n@@ -1813,6 +1819,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignMinus as u32) != 0\n@@ -1840,6 +1847,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool {\n         self.flags & (1 << FlagV1::Alternate as u32) != 0\n@@ -1865,6 +1873,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0"}, {"sha": "7a3af70d6d97c3fa6533199960b94087ec83e3ce", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -90,6 +90,7 @@ where\n #[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[must_use]\n #[inline]\n pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     // SAFETY: the caller must guarantee that `cx.0` is a valid pointer"}, {"sha": "7abe01d17c90bd46668d87fcb437f8d35b113a25", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -25,6 +25,7 @@ pub const fn empty<T>() -> Empty<T> {\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty()`] function. See its documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n "}, {"sha": "a88736c3608a76a8071d5f9f909a0dd40b615a18", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -114,6 +114,7 @@ pub enum IntErrorKind {\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n+    #[must_use]\n     #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind"}, {"sha": "86cfce7bfd0e96cd6b0417c71c24a1f6bd80479c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -980,6 +980,7 @@ impl f32 {\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n     #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {\n         let mut left = self.to_bits() as i32;"}, {"sha": "b71f37ddb8a33ee57e74b6cbc03467c58396f9f5", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -996,6 +996,7 @@ impl f64 {\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n     #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {\n         let mut left = self.to_bits() as i64;"}, {"sha": "b74ba92c76eb6e459c5989c40e8b1388503f20fe", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -743,6 +743,7 @@ impl<T: Clone> Bound<&T> {\n     /// assert_eq!((1..12).start_bound(), Included(&1));\n     /// assert_eq!((1..12).start_bound().cloned(), Included(1));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"bound_cloned\", since = \"1.55.0\")]\n     pub fn cloned(self) -> Bound<T> {\n         match self {"}, {"sha": "d89cf96757b1e2c94dfc919770eb7ae0e66b4263", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -1450,6 +1450,7 @@ impl<T: Copy> Option<&T> {\n     /// let copied = opt_x.copied();\n     /// assert_eq!(copied, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n     #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     pub const fn copied(self) -> Option<T> {"}, {"sha": "714e9b73c78a61f71e4c32e8c2a46dc51eeaa7d2", "filename": "library/core/src/panic/location.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Flocation.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -79,6 +79,7 @@ impl<'a> Location<'a> {\n     /// assert_ne!(this_location.line(), another_location.line());\n     /// assert_ne!(this_location.column(), another_location.column());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"track_caller\", since = \"1.46.0\")]\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     #[track_caller]\n@@ -119,6 +120,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn file(&self) -> &str {\n         self.file\n@@ -141,6 +143,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn line(&self) -> u32 {\n         self.line\n@@ -163,6 +166,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_col\", since = \"1.25.0\")]\n     pub fn column(&self) -> u32 {\n         self.col"}, {"sha": "b1fdf13821176875bd70b66df381f12189a0b006", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -81,6 +81,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn payload(&self) -> &(dyn Any + Send) {\n         self.payload\n@@ -89,6 +90,7 @@ impl<'a> PanicInfo<'a> {\n     /// If the `panic!` macro from the `core` crate (not from `std`)\n     /// was used with a formatting string and some additional arguments,\n     /// returns that message ready to be used for example with [`fmt::write`]\n+    #[must_use]\n     #[unstable(feature = \"panic_info_message\", issue = \"66745\")]\n     pub fn message(&self) -> Option<&fmt::Arguments<'_>> {\n         self.message\n@@ -118,6 +120,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,"}, {"sha": "09fc6df5429759ce336bd08b7670b710d68dfce3", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -705,6 +705,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     ///\n     /// [\"pinning projections\"]: self#projections-and-structural-pinning\n     #[inline(always)]\n+    #[must_use]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub const fn get_ref(self) -> &'a T {"}, {"sha": "4e6c2bac274e044e5bc4840a310d117e44560402", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -1714,6 +1714,7 @@ impl<'a, T> ChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use]\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n@@ -2143,6 +2144,7 @@ impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `N-1`\n     /// elements.\n+    #[must_use]\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n@@ -2718,6 +2720,7 @@ impl<'a, T> RChunksExact<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use]\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem"}, {"sha": "b6460d72fef32abc13f70a7a74581411131aaeaf", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -72,6 +72,7 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn valid_up_to(&self) -> usize {\n         self.valid_up_to\n@@ -93,6 +94,7 @@ impl Utf8Error {\n     ///\n     /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)"}, {"sha": "7e0cd7d65ba691d0c8e401e464d8a545dcfe93f1", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -211,6 +211,7 @@ impl<'a> CharIndices<'a> {\n     /// assert_eq!(chars.next(), None);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"char_indices_offset\", issue = \"83871\")]\n     pub fn offset(&self) -> usize {\n         self.front_offset\n@@ -223,6 +224,7 @@ impl<'a> CharIndices<'a> {\n /// See its documentation for more.\n ///\n /// [`bytes`]: str::bytes\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(pub(super) Copied<slice::Iter<'a, u8>>);"}, {"sha": "ac07dc32d57e6ed0efb7c070fbbbe1297741ec92", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -498,6 +498,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.29.0\", reason = \"use `get_unchecked(begin..end)` instead\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n@@ -570,6 +571,7 @@ impl str {\n     /// assert_eq!(\" Martin-L\u00f6f\", last);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at(&self, mid: usize) -> (&str, &str) {\n         // is_char_boundary checks that the index is in [0, .len()]\n@@ -613,6 +615,7 @@ impl str {\n     /// assert_eq!(\"PER Martin-L\u00f6f\", s);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) {\n         // is_char_boundary checks that the index is in [0, .len()]"}, {"sha": "75f8a2a759314f3f2e3dd45f52ec56f4496d2e4e", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -251,6 +251,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n \n /// Given a first byte, determines how many bytes are in this UTF-8 character.\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n+#[must_use]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n     UTF8_CHAR_WIDTH[b as usize] as usize"}, {"sha": "6cba781c2ed8f6d41f1cc16b724b7c8022295aab", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -167,6 +167,7 @@ impl<'a> Context<'a> {\n \n     /// Returns a reference to the `Waker` for the current task.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn waker(&self) -> &'a Waker {\n         &self.waker\n@@ -242,6 +243,7 @@ impl Waker {\n     ///\n     /// This function is primarily used for optimization purposes.\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn will_wake(&self, other: &Waker) -> bool {\n         self.waker == other.waker"}, {"sha": "d0bdf1b7df27218e9aeb6a18eebf2ddf8c7c131a", "filename": "library/core/src/time.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b0d862945782f215f39980d6ac9ffabdb2031c/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=68b0d862945782f215f39980d6ac9ffabdb2031c", "patch": "@@ -357,6 +357,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 {\n         self.nanos / NANOS_PER_MILLI\n@@ -379,6 +380,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 {\n         self.nanos / NANOS_PER_MICRO\n@@ -401,6 +403,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 {\n         self.nanos"}]}