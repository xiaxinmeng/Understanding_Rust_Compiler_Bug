{"sha": "348d07f099561992d37d8e0107b9440cae021615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OGQwN2YwOTk1NjE5OTJkMzdkOGUwMTA3Yjk0NDBjYWUwMjE2MTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-20T20:08:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-20T20:08:50Z"}, "message": "Remove export_map from resolve, just use export_map2.", "tree": {"sha": "a9fcabf49685bf3dedf5dc71df0834eac28032e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fcabf49685bf3dedf5dc71df0834eac28032e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348d07f099561992d37d8e0107b9440cae021615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348d07f099561992d37d8e0107b9440cae021615", "html_url": "https://github.com/rust-lang/rust/commit/348d07f099561992d37d8e0107b9440cae021615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348d07f099561992d37d8e0107b9440cae021615/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69aaa410ca2ec499e79939aa44552192f443b44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/69aaa410ca2ec499e79939aa44552192f443b44b", "html_url": "https://github.com/rust-lang/rust/commit/69aaa410ca2ec499e79939aa44552192f443b44b"}], "stats": {"total": 100, "additions": 21, "deletions": 79}, "files": [{"sha": "93ab61e245abc7703a7c9fe8c8a1c221b77a1d30", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -201,7 +201,6 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n          middle::lang_items::collect_language_items(crate, sess));\n \n     let { def_map: def_map,\n-          exp_map: exp_map,\n           exp_map2: exp_map2,\n           trait_map: trait_map } =\n         time(time_passes, ~\"resolution\", ||\n@@ -266,7 +265,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     let (llmod, link_meta) = time(time_passes, ~\"translation\", ||\n         trans::base::trans_crate(sess, crate, ty_cx,\n                                  &outputs.obj_filename,\n-                                 exp_map, exp_map2, maps));\n+                                 exp_map2, maps));\n \n     time(time_passes, ~\"LLVM passes\", ||\n         link::write::run_passes(sess, llmod,"}, {"sha": "e0d33035022fce2e8bb7777cf5d00d44f51a5a34", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -47,7 +47,6 @@ type encode_parms = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n     reachable: HashMap<ast::node_id, ()>,\n-    reexports: ~[(~str, def_id)],\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: HashMap<ast::node_id, ~str>,\n     discrim_symbols: HashMap<ast::node_id, ~str>,\n@@ -73,7 +72,6 @@ enum encode_ctxt = {\n     tcx: ty::ctxt,\n     stats: stats,\n     reachable: HashMap<ast::node_id, ()>,\n-    reexports: ~[(~str, def_id)],\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: HashMap<ast::node_id, ~str>,\n     discrim_symbols: HashMap<ast::node_id, ~str>,\n@@ -1108,7 +1106,6 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> ~[u8] {\n         tcx: parms.tcx,\n         stats: move stats,\n         reachable: parms.reachable,\n-        reexports: parms.reexports,\n         reexports2: parms.reexports2,\n         item_symbols: parms.item_symbols,\n         discrim_symbols: parms.discrim_symbols,"}, {"sha": "18bea6338a402b6c0456fc286ec2041a78020b02", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -91,10 +91,6 @@ type Impl = { did: def_id, ident: ident, methods: ~[@MethodInfo] };\n // Trait method resolution\n type TraitMap = @HashMap<node_id,@DVec<def_id>>;\n \n-// Export mapping\n-type Export = { reexp: bool, id: def_id };\n-type ExportMap = HashMap<node_id, ~[Export]>;\n-\n // This is the replacement export map. It maps a module to all of the exports\n // within.\n type ExportMap2 = HashMap<node_id, ~[Export2]>;\n@@ -775,7 +771,6 @@ fn Resolver(session: session, lang_items: LanguageItems,\n         namespaces: ~[ ModuleNS, TypeNS, ValueNS ],\n \n         def_map: HashMap(),\n-        export_map: HashMap(),\n         export_map2: HashMap(),\n         trait_map: @HashMap(),\n \n@@ -833,7 +828,6 @@ struct Resolver {\n     namespaces: ~[Namespace],\n \n     def_map: DefMap,\n-    export_map: ExportMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n }\n@@ -2880,8 +2874,7 @@ impl Resolver {\n \n     fn record_exports_for_module(module_: @Module) {\n         let mut exports2 = ~[];\n-        for module_.exported_names.each |name, node_id| {\n-            let mut exports = ~[];\n+        for module_.exported_names.each |name, _exp_node_id| {\n             for self.namespaces.each |namespace| {\n                 match self.resolve_definition_of_name_in_module(module_,\n                                                                 name,\n@@ -2895,10 +2888,6 @@ impl Resolver {\n                                 for %?\",\n                                self.session.str_of(name),\n                                module_.def_id);\n-                        vec::push(exports, {\n-                            reexp: false,\n-                            id: def_id_of_def(target_def)\n-                        });\n                         vec::push(exports2, Export2 {\n                             reexport: false,\n                             name: self.session.str_of(name),\n@@ -2910,10 +2899,6 @@ impl Resolver {\n                                 %?\",\n                                self.session.str_of(name),\n                                module_.def_id);\n-                        vec::push(exports, {\n-                            reexp: true,\n-                            id: def_id_of_def(target_def)\n-                        });\n                         vec::push(exports2, Export2 {\n                             reexport: true,\n                             name: self.session.str_of(name),\n@@ -2922,8 +2907,6 @@ impl Resolver {\n                     }\n                 }\n             }\n-\n-            self.export_map.insert(node_id, exports);\n         }\n \n         match copy module_.def_id {\n@@ -4914,15 +4897,13 @@ impl Resolver {\n /// Entry point to crate resolution.\n fn resolve_crate(session: session, lang_items: LanguageItems, crate: @crate)\n               -> { def_map: DefMap,\n-                   exp_map: ExportMap,\n                    exp_map2: ExportMap2,\n                    trait_map: TraitMap } {\n \n     let resolver = @Resolver(session, lang_items, crate);\n     resolver.resolve(resolver);\n     return {\n         def_map: resolver.def_map,\n-        exp_map: resolver.export_map,\n         exp_map2: resolver.export_map2,\n         trait_map: resolver.trait_map\n     };"}, {"sha": "8cf9be711a3b26a94d05c01da76d21d162aaa282", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -2504,31 +2504,13 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         diag: cx.sess.diagnostic(),\n         tcx: cx.tcx,\n         reachable: cx.reachable,\n-        reexports: reexports(cx),\n         reexports2: cx.exp_map2,\n         item_symbols: cx.item_symbols,\n         discrim_symbols: cx.discrim_symbols,\n         link_meta: cx.link_meta,\n         cstore: cx.sess.cstore,\n         encode_inlined_item: encode_inlined_item\n     };\n-\n-    fn reexports(cx: @crate_ctxt) -> ~[(~str, ast::def_id)] {\n-        let mut reexports = ~[];\n-        for cx.exp_map.each |exp_id, defs| {\n-            for defs.each |def| {\n-                if !def.reexp { loop; }\n-                let path = match cx.tcx.items.get(exp_id) {\n-                  ast_map::node_export(_, path) => {\n-                      ast_map::path_to_str(*path, cx.sess.parse_sess.interner)\n-                  }\n-                  _ => fail ~\"reexports\"\n-                };\n-                vec::push(reexports, (path, def.id));\n-            }\n-        }\n-        return reexports;\n-    }\n }\n \n fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n@@ -2564,15 +2546,14 @@ fn trans_crate(sess: session::session,\n                crate: @ast::crate,\n                tcx: ty::ctxt,\n                output: &Path,\n-               emap: resolve::ExportMap,\n                emap2: resolve::ExportMap2,\n                maps: astencode::maps)\n             -> (ModuleRef, link_meta) {\n \n     let symbol_hasher = @hash::default_state();\n     let link_meta =\n         link::build_link_meta(sess, *crate, output, symbol_hasher);\n-    let reachable = reachable::find_reachable(crate.node.module, emap, tcx,\n+    let reachable = reachable::find_reachable(crate.node.module, emap2, tcx,\n                                               maps.method_map);\n \n     // Append \".rc\" to crate name as LLVM module identifier.\n@@ -2626,7 +2607,6 @@ fn trans_crate(sess: session::session,\n           externs: HashMap::<~str,ValueRef>(),\n           intrinsics: intrinsics,\n           item_vals: HashMap::<int,ValueRef>(),\n-          exp_map: emap,\n           exp_map2: emap2,\n           reachable: reachable,\n           item_symbols: HashMap::<int,~str>(),"}, {"sha": "ae539f5ebc6fcfb2b88d5e5b1844543e2b39318d", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -117,7 +117,6 @@ type crate_ctxt = {\n      externs: HashMap<~str, ValueRef>,\n      intrinsics: HashMap<~str, ValueRef>,\n      item_vals: HashMap<ast::node_id, ValueRef>,\n-     exp_map: resolve::ExportMap,\n      exp_map2: resolve::ExportMap2,\n      reachable: reachable::map,\n      item_symbols: HashMap<ast::node_id, ~str>,"}, {"sha": "7febec13add984f0ea88b23c365f468550a8e3d4", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d07f099561992d37d8e0107b9440cae021615/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=348d07f099561992d37d8e0107b9440cae021615", "patch": "@@ -17,47 +17,33 @@ export map, find_reachable;\n \n type map = std::map::HashMap<node_id, ()>;\n \n-type ctx = {exp_map: resolve::ExportMap,\n+type ctx = {exp_map2: resolve::ExportMap2,\n             tcx: ty::ctxt,\n             method_map: typeck::method_map,\n             rmap: map};\n \n-fn find_reachable(crate_mod: _mod, exp_map: resolve::ExportMap,\n+fn find_reachable(crate_mod: _mod, exp_map2: resolve::ExportMap2,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n     let rmap = std::map::HashMap();\n-    let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};\n-    traverse_public_mod(cx, crate_mod);\n+    let cx = {exp_map2: exp_map2, tcx: tcx,\n+              method_map: method_map, rmap: rmap};\n+    traverse_public_mod(cx, ast::crate_node_id, crate_mod);\n     traverse_all_resources_and_impls(cx, crate_mod);\n     rmap\n }\n \n-fn traverse_exports(cx: ctx, vis: ~[@view_item]) -> bool {\n+fn traverse_exports(cx: ctx, mod_id: node_id) -> bool {\n     let mut found_export = false;\n-    for vec::each(vis) |vi| {\n-        match vi.node {\n-          view_item_export(vps) => {\n+    match cx.exp_map2.find(mod_id) {\n+      Some(exp2s) => {\n+        for exp2s.each |e2| {\n             found_export = true;\n-            for vec::each(vps) |vp| {\n-                match vp.node {\n-                  view_path_simple(_, _, _, id) | view_path_glob(_, id) |\n-                  view_path_list(_, _, id) => {\n-                    traverse_export(cx, id);\n-                  }\n-                }\n-            }\n-          }\n-          _ => ()\n-        }\n-    }\n-    found_export\n-}\n-\n-fn traverse_export(cx: ctx, exp_id: node_id) {\n-    do option::iter(cx.exp_map.find(exp_id)) |defs| {\n-        for vec::each(defs) |def| {\n-            traverse_def_id(cx, def.id);\n-        }\n+            traverse_def_id(cx, e2.def_id)\n+        };\n+      }\n+      None => ()\n     }\n+    return found_export;\n }\n \n fn traverse_def_id(cx: ctx, did: def_id) {\n@@ -81,8 +67,8 @@ fn traverse_def_id(cx: ctx, did: def_id) {\n     }\n }\n \n-fn traverse_public_mod(cx: ctx, m: _mod) {\n-    if !traverse_exports(cx, m.view_items) {\n+fn traverse_public_mod(cx: ctx, mod_id: node_id, m: _mod) {\n+    if !traverse_exports(cx, mod_id) {\n         // No exports, so every local item is exported\n         for vec::each(m.items) |item| {\n             traverse_public_item(cx, *item);\n@@ -94,9 +80,9 @@ fn traverse_public_item(cx: ctx, item: @item) {\n     if cx.rmap.contains_key(item.id) { return; }\n     cx.rmap.insert(item.id, ());\n     match item.node {\n-      item_mod(m) => traverse_public_mod(cx, m),\n+      item_mod(m) => traverse_public_mod(cx, item.id, m),\n       item_foreign_mod(nm) => {\n-          if !traverse_exports(cx, nm.view_items) {\n+          if !traverse_exports(cx, item.id) {\n               for vec::each(nm.items) |item| {\n                   cx.rmap.insert(item.id, ());\n               }"}]}