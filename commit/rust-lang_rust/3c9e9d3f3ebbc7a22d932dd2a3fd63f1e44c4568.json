{"sha": "3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOWU5ZDNmM2ViYmM3YTIyZDkzMmRkMmEzZmQ2M2YxZTQ0YzQ1Njg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-02T12:05:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-02T12:05:46Z"}, "message": "Merge #3824\n\n3824: New config names r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0dbb6b8c37601a7d0c617a1d88a342b8f4c97a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dbb6b8c37601a7d0c617a1d88a342b8f4c97a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehdUaCRBK7hj4Ov3rIwAAdHIIAFhBnXluoZMbUb2CL5l9tRuJ\nwa/f4lu8wetnB+VVArsjdrKs6rcgPjrms/9RiNei3KlRap8hLD6vOJnHUkUOcMSD\nVGL/LjEVLJ9heRHDZfMRfnmoEiU4PfSw2c4II5dVySHZ6qpUy1Jp6qUWRW8J8Juy\nN5jbTBJiKLWTZcW0YikxilatH/jB4GXx01D3QL/WmZH+Y5eNsnvHUNfL++kjHqTJ\nkCo0R1STDxWSKSqquzTDsbbYef3OFRcFFGFFIrglOuv61v/qZlCcukEcPXJnpkWL\n/EmOMV2o4pgjfyEUn9OMRBAeVNItnTYJzG/6vQmfOzS9BM9RjDhQWhgXVMEDYU4=\n=FlS9\n-----END PGP SIGNATURE-----\n", "payload": "tree 0dbb6b8c37601a7d0c617a1d88a342b8f4c97a32\nparent 9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784\nparent 7a4ebd2c8dfee8ca15dab7ba053a6521840aa5e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585829146 +0000\ncommitter GitHub <noreply@github.com> 1585829146 +0000\n\nMerge #3824\n\n3824: New config names r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "html_url": "https://github.com/rust-lang/rust/commit/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784", "html_url": "https://github.com/rust-lang/rust/commit/9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784"}, {"sha": "7a4ebd2c8dfee8ca15dab7ba053a6521840aa5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4ebd2c8dfee8ca15dab7ba053a6521840aa5e3", "html_url": "https://github.com/rust-lang/rust/commit/7a4ebd2c8dfee8ca15dab7ba053a6521840aa5e3"}], "stats": {"total": 485, "additions": 229, "deletions": 256}, "files": [{"sha": "f3d8773cc11b63bee72267ab81edd690e7811f6a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 66, "deletions": 53, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -16,20 +16,33 @@ use serde::Deserialize;\n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n+\n+    pub with_sysroot: bool,\n     pub publish_diagnostics: bool,\n+    pub lru_capacity: Option<usize>,\n+    pub proc_macro_srv: Option<String>,\n+    pub files: FilesConfig,\n     pub notifications: NotificationsConfig,\n+\n+    pub cargo: CargoConfig,\n+    pub rustfmt: RustfmtConfig,\n+    pub check: Option<FlycheckConfig>,\n+\n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n     pub call_info_full: bool,\n-    pub rustfmt: RustfmtConfig,\n-    pub check: Option<FlycheckConfig>,\n-    pub vscode_lldb: bool,\n-    pub proc_macro_srv: Option<String>,\n-    pub lru_capacity: Option<usize>,\n-    pub use_client_watching: bool,\n-    pub exclude_globs: Vec<String>,\n-    pub cargo: CargoConfig,\n-    pub with_sysroot: bool,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct FilesConfig {\n+    pub watcher: FilesWatcher,\n+    pub exclude: Vec<String>,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub enum FilesWatcher {\n+    Client,\n+    Notify,\n }\n \n #[derive(Debug, Clone)]\n@@ -59,12 +72,26 @@ pub struct ClientCapsConfig {\n impl Default for Config {\n     fn default() -> Self {\n         Config {\n+            client_caps: ClientCapsConfig::default(),\n+\n+            with_sysroot: true,\n             publish_diagnostics: true,\n+            lru_capacity: None,\n+            proc_macro_srv: None,\n+            files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n             notifications: NotificationsConfig {\n                 workspace_loaded: true,\n                 cargo_toml_not_found: true,\n             },\n-            client_caps: ClientCapsConfig::default(),\n+\n+            cargo: CargoConfig::default(),\n+            rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n+            check: Some(FlycheckConfig::CargoCommand {\n+                command: \"check\".to_string(),\n+                all_targets: true,\n+                extra_args: Vec::new(),\n+            }),\n+\n             inlay_hints: InlayHintsConfig {\n                 type_hints: true,\n                 parameter_hints: true,\n@@ -77,19 +104,6 @@ impl Default for Config {\n                 add_call_argument_snippets: true,\n             },\n             call_info_full: true,\n-            rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n-            check: Some(FlycheckConfig::CargoCommand {\n-                command: \"check\".to_string(),\n-                all_targets: true,\n-                extra_args: Vec::new(),\n-            }),\n-            vscode_lldb: false,\n-            proc_macro_srv: None,\n-            lru_capacity: None,\n-            use_client_watching: false,\n-            exclude_globs: Vec::new(),\n-            cargo: CargoConfig::default(),\n-            with_sysroot: true,\n         }\n     }\n }\n@@ -103,45 +117,44 @@ impl Config {\n         *self = Default::default();\n         self.client_caps = client_caps;\n \n-        set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n-        set(value, \"/useClientWatching\", &mut self.use_client_watching);\n+        set(value, \"/withSysroot\", &mut self.with_sysroot);\n+        set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n+        if let Some(watcher) =  get::<String>(value, \"/files/watcher\") {\n+            self.files.watcher = match watcher.as_str() {\n+                \"client\" => FilesWatcher::Client,\n+                \"notify\"| _ => FilesWatcher::Notify,\n+            }\n+        }\n+        set(value, \"/notifications/workspaceLoaded\", &mut self.notifications.workspace_loaded);\n+        set(value, \"/notifications/cargoTomlNotFound\", &mut self.notifications.cargo_toml_not_found);\n \n-        set(value, \"/inlayHintsType\", &mut self.inlay_hints.type_hints);\n-        set(value, \"/inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n-        set(value, \"/inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n-        set(value, \"/inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n-\n-        if let Some(false) = get(value, \"cargo_watch_enable\") {\n+        set(value, \"/cargo/noDefaultFeatures\", &mut self.cargo.no_default_features);\n+        set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n+        set(value, \"/cargo/features\", &mut self.cargo.features);\n+        set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n+            set(value, \"/rustfmt/extraArgs\", extra_args);\n+        }\n+        if let Some(false) = get(value, \"/checkOnSave/enable\") {\n             self.check = None\n         } else {\n             if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n             {\n-                set(value, \"/cargoWatchArgs\", extra_args);\n-                set(value, \"/cargoWatchCommand\", command);\n-                set(value, \"/cargoWatchAllTargets\", all_targets);\n+                set(value, \"/checkOnSave/extraArgs\", extra_args);\n+                set(value, \"/checkOnSave/command\", command);\n+                set(value, \"/checkOnSave/allTargets\", all_targets);\n             }\n         };\n \n-        set(value, \"/withSysroot\", &mut self.with_sysroot);\n-        if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"/rustfmtArgs\", extra_args);\n-        }\n-\n-        set(value, \"/cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n-        set(value, \"/cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n-        set(value, \"/cargoFeatures/features\", &mut self.cargo.features);\n-        set(value, \"/cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n-\n-        set(value, \"/vscodeLldb\", &mut self.vscode_lldb);\n-\n-        set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n-        set(value, \"/featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n-        set(value, \"/featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n-        set(value, \"/featureFlags/completion.enable-postfix\", &mut self.completion.enable_postfix_completions);\n-        set(value, \"/featureFlags/completion.insertion.add-call-parenthesis\", &mut self.completion.add_call_parenthesis);\n-        set(value, \"/featureFlags/completion.insertion.add-argument-snippets\", &mut self.completion.add_call_argument_snippets);\n-        set(value, \"/featureFlags/call-info.full\", &mut self.call_info_full);\n+        set(value, \"/inlayHints/typeHints\", &mut self.inlay_hints.type_hints);\n+        set(value, \"/inlayHints/parameterHints\", &mut self.inlay_hints.parameter_hints);\n+        set(value, \"/inlayHints/chainingHints\", &mut self.inlay_hints.chaining_hints);\n+        set(value, \"/inlayHints/maxLength\", &mut self.inlay_hints.max_length);\n+        set(value, \"/completion/postfix/enable\", &mut self.completion.enable_postfix_completions);\n+        set(value, \"/completion/addCallParenthesis\", &mut self.completion.add_call_parenthesis);\n+        set(value, \"/completion/addCallArgumentSnippets\", &mut self.completion.add_call_argument_snippets);\n+        set(value, \"/callInfo/full\", &mut self.call_info_full);\n \n         log::info!(\"Config::update() = {:#?}\", self);\n "}, {"sha": "95e676e0f45cb0ad3838e54996b0d53ee5d3d09c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -30,7 +30,7 @@ use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n use crate::{\n-    config::Config,\n+    config::{Config, FilesWatcher},\n     diagnostics::DiagnosticTask,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n@@ -40,7 +40,6 @@ use crate::{\n     world::{WorldSnapshot, WorldState},\n     Result,\n };\n-use req::ConfigurationParams;\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -122,12 +121,13 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n         };\n \n         let globs = config\n-            .exclude_globs\n+            .files\n+            .exclude\n             .iter()\n             .map(|glob| crate::vfs_glob::Glob::new(glob))\n             .collect::<std::result::Result<Vec<_>, _>>()?;\n \n-        if config.use_client_watching {\n+        if let FilesWatcher::Client = config.files.watcher {\n             let registration_options = req::DidChangeWatchedFilesRegistrationOptions {\n                 watchers: workspaces\n                     .iter()\n@@ -153,7 +153,7 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n             workspaces,\n             config.lru_capacity,\n             &globs,\n-            Watch(!config.use_client_watching),\n+            Watch(matches!(config.files.watcher, FilesWatcher::Notify)),\n             config,\n         )\n     };\n@@ -607,7 +607,12 @@ fn on_notification(\n             let request_id = loop_state.next_request_id();\n             let request = request_new::<req::WorkspaceConfiguration>(\n                 request_id.clone(),\n-                ConfigurationParams::default(),\n+                req::ConfigurationParams {\n+                    items: vec![req::ConfigurationItem {\n+                        scope_uri: None,\n+                        section: Some(\"rust-analyzer\".to_string()),\n+                    }],\n+                },\n             );\n             msg_sender.send(request.into())?;\n             loop_state.configuration_request_id = Some(request_id);\n@@ -884,10 +889,9 @@ fn update_file_notifications_on_threadpool(\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n-    let publish_diagnostics = world.config.publish_diagnostics;\n-    pool.execute(move || {\n-        for file_id in subscriptions {\n-            if publish_diagnostics {\n+    if world.config.publish_diagnostics {\n+        pool.execute(move || {\n+            for file_id in subscriptions {\n                 match handlers::publish_diagnostics(&world, file_id) {\n                     Err(e) => {\n                         if !is_canceled(&e) {\n@@ -899,8 +903,8 @@ fn update_file_notifications_on_threadpool(\n                     }\n                 }\n             }\n-        }\n-    });\n+        })\n+    }\n }\n \n pub fn show_message(typ: req::MessageType, message: impl Into<String>, sender: &Sender<Message>) {"}, {"sha": "b207f0764cde144910bdb1185dc2a6e3c7ab9b95", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -810,23 +810,21 @@ pub fn handle_code_lens(\n         };\n         lenses.push(lens);\n \n-        if world.config.vscode_lldb {\n-            if r.args[0] == \"run\" {\n-                r.args[0] = \"build\".into();\n-            } else {\n-                r.args.push(\"--no-run\".into());\n-            }\n-            let debug_lens = CodeLens {\n-                range: r.range,\n-                command: Some(Command {\n-                    title: \"Debug\".into(),\n-                    command: \"rust-analyzer.debugSingle\".into(),\n-                    arguments: Some(vec![to_value(r).unwrap()]),\n-                }),\n-                data: None,\n-            };\n-            lenses.push(debug_lens);\n+        if r.args[0] == \"run\" {\n+            r.args[0] = \"build\".into();\n+        } else {\n+            r.args.push(\"--no-run\".into());\n         }\n+        let debug_lens = CodeLens {\n+            range: r.range,\n+            command: Some(Command {\n+                title: \"Debug\".into(),\n+                command: \"rust-analyzer.debugSingle\".into(),\n+                arguments: Some(vec![to_value(r).unwrap()]),\n+            }),\n+            data: None,\n+        };\n+        lenses.push(debug_lens);\n     }\n \n     // Handle impls"}, {"sha": "b8b627e28671798e742c8c720ddc8e44edc1cddc", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -6,8 +6,8 @@ use serde::{Deserialize, Serialize};\n \n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n-    CodeLensParams, CompletionParams, CompletionResponse, ConfigurationParams, DiagnosticTag,\n-    DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n+    CodeLensParams, CompletionParams, CompletionResponse, ConfigurationItem, ConfigurationParams,\n+    DiagnosticTag, DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n     DidChangeWatchedFilesRegistrationOptions, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,"}, {"sha": "1f95cd130c94906ca375226a806e66f821629a02", "filename": "editors/code/package.json", "status": "modified", "additions": 120, "deletions": 119, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -177,146 +177,99 @@\n             \"type\": \"object\",\n             \"title\": \"Rust Analyzer\",\n             \"properties\": {\n-                \"rust-analyzer.highlighting.semanticTokens\": {\n+                \"rust-analyzer.diagnostics.enable\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"Use proposed semantic tokens API for syntax highlighting\"\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\"\n                 },\n-                \"rust-analyzer.featureFlags\": {\n-                    \"type\": \"object\",\n-                    \"default\": {},\n-                    \"description\": \"Fine grained feature flags to disable annoying features\",\n-                    \"properties\": {\n-                        \"lsp.diagnostics\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show diagnostics from `cargo check`\"\n-                        },\n-                        \"completion.insertion.add-call-parenthesis\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Whether to add parenthesis when completing functions\"\n-                        },\n-                        \"completion.insertion.add-argument-snippets\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Whether to add argument snippets when completing functions\"\n-                        },\n-                        \"completion.enable-postfix\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n-                        },\n-                        \"call-info.full\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Show function name and docs in parameter hints\"\n-                        },\n-                        \"notifications.workspace-loaded\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show `workspace loaded` message\"\n-                        },\n-                        \"notifications.cargo-toml-not-found\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n-                        }\n-                    }\n+                \"rust-analyzer.lruCapacity\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n+                    ],\n+                    \"default\": null,\n+                    \"minimum\": 0,\n+                    \"exclusiveMinimum\": true,\n+                    \"description\": \"Number of syntax trees rust-analyzer keeps in memory.\"\n                 },\n-                \"rust-analyzer.updates.channel\": {\n+                \"rust-analyzer.files.watcher\": {\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"stable\",\n-                        \"nightly\"\n-                    ],\n-                    \"default\": \"stable\",\n-                    \"markdownEnumDescriptions\": [\n-                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n-                        \"`\\\"nightly\\\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n+                        \"client\",\n+                        \"notify\"\n                     ],\n-                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                    \"default\": \"client\",\n+                    \"description\": \"Controls file watching implementation.\"\n                 },\n-                \"rust-analyzer.updates.askBeforeDownload\": {\n+                \"rust-analyzer.files.exclude\": {\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"default\": [],\n+                    \"description\": \"Paths to exclude from analysis.\"\n+                },\n+                \"rust-analyzer.notifications.workspaceLoaded\": {\n                     \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n+                    \"markdownDescription\": \"Whether to show `workspace loaded` message.\"\n                 },\n-                \"rust-analyzer.serverPath\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ],\n-                    \"default\": null,\n-                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n+                \"rust-analyzer.notifications.cargoTomlNotFound\": {\n+                    \"type\": \"boolean\",\n+                    \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n+                },\n+                \"rust-analyzer.cargo.noDefaultFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"markdownDescription\": \"Do not activate the `default` feature\"\n+                },\n+                \"rust-analyzer.cargo.allFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Activate all available features\"\n                 },\n-                \"rust-analyzer.excludeGlobs\": {\n+                \"rust-analyzer.cargo.features\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n                     \"default\": [],\n-                    \"description\": \"Paths to exclude from analysis\"\n+                    \"description\": \"List of features to activate\"\n+                },\n+                \"rust-analyzer.cargo.loadOutDirsFromCheck\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n                 },\n-                \"rust-analyzer.rustfmtArgs\": {\n+                \"rust-analyzer.rustfmt.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n                     \"default\": [],\n                     \"description\": \"Additional arguments to rustfmt\"\n                 },\n-                \"rust-analyzer.useClientWatching\": {\n+                \"rust-analyzer.checkOnSave.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"client provided file watching instead of notify watching.\"\n+                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save\"\n                 },\n-                \"rust-analyzer.cargo-watch.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Run specified `cargo-watch` command for diagnostics on save\"\n-                },\n-                \"rust-analyzer.cargo-watch.arguments\": {\n+                \"rust-analyzer.checkOnSave.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"markdownDescription\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n+                    \"markdownDescription\": \"Extra arguments for `cargo check`\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.cargo-watch.command\": {\n-                    \"type\": \"string\",\n-                    \"markdownDescription\": \"`cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\",\n-                    \"default\": \"check\"\n-                },\n-                \"rust-analyzer.cargo-watch.allTargets\": {\n-                    \"type\": \"boolean\",\n-                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\",\n-                    \"default\": true\n-                },\n-                \"rust-analyzer.trace.server\": {\n+                \"rust-analyzer.checkOnSave.command\": {\n                     \"type\": \"string\",\n-                    \"scope\": \"window\",\n-                    \"enum\": [\n-                        \"off\",\n-                        \"messages\",\n-                        \"verbose\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"No traces\",\n-                        \"Error only\",\n-                        \"Full log\"\n-                    ],\n-                    \"default\": \"off\",\n-                    \"description\": \"Trace requests to the rust-analyzer\"\n+                    \"default\": \"check\",\n+                    \"markdownDescription\": \"Cargo command to use for `cargo check`\"\n                 },\n-                \"rust-analyzer.trace.extension\": {\n-                    \"description\": \"Enable logging of VS Code extensions itself\",\n+                \"rust-analyzer.checkOnSave.allTargets\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false\n-                },\n-                \"rust-analyzer.lruCapacity\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n-                    ],\n-                    \"default\": null,\n-                    \"minimum\": 0,\n-                    \"exclusiveMinimum\": true,\n-                    \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\"\n                 },\n                 \"rust-analyzer.inlayHints.typeHints\": {\n                     \"type\": \"boolean\",\n@@ -343,28 +296,76 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Maximum length for inlay hints\"\n                 },\n-                \"rust-analyzer.cargoFeatures.noDefaultFeatures\": {\n+                \"rust-analyzer.completion.addCallParenthesis\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"markdownDescription\": \"Do not activate the `default` feature\"\n+                    \"default\": true,\n+                    \"description\": \"Whether to add parenthesis when completing functions\"\n                 },\n-                \"rust-analyzer.cargoFeatures.allFeatures\": {\n+                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Activate all available features\"\n+                    \"description\": \"Whether to add argument snippets when completing functions\"\n                 },\n-                \"rust-analyzer.cargoFeatures.features\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"List of features to activate\"\n+                \"rust-analyzer.completion.postfix.enable\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n+                },\n+                \"rust-analyzer.callInfo.full\": {\n+                    \"type\": \"boolean\",\n+                    \"description\": \"Show function name and docs in parameter hints\"\n                 },\n-                \"rust-analyzer.cargoFeatures.loadOutDirsFromCheck\": {\n+                \"rust-analyzer.highlighting.semanticTokens\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,\n-                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n+                    \"description\": \"Use proposed semantic tokens API for syntax highlighting\"\n+                },\n+                \"rust-analyzer.updates.channel\": {\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"stable\",\n+                        \"nightly\"\n+                    ],\n+                    \"default\": \"stable\",\n+                    \"markdownEnumDescriptions\": [\n+                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n+                        \"`\\\"nightly\\\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n+                    ],\n+                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                },\n+                \"rust-analyzer.updates.askBeforeDownload\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n+                },\n+                \"rust-analyzer.serverPath\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n+                },\n+                \"rust-analyzer.trace.server\": {\n+                    \"type\": \"string\",\n+                    \"scope\": \"window\",\n+                    \"enum\": [\n+                        \"off\",\n+                        \"messages\",\n+                        \"verbose\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"No traces\",\n+                        \"Error only\",\n+                        \"Full log\"\n+                    ],\n+                    \"default\": \"off\",\n+                    \"description\": \"Trace requests to the rust-analyzer\"\n+                },\n+                \"rust-analyzer.trace.extension\": {\n+                    \"description\": \"Enable logging of VS Code extensions itself\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n                 }\n             }\n         },"}, {"sha": "3b1d00bcad464a6f5400ee8fc31ba16e25cac7a9", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -5,30 +5,6 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n-export function configToServerOptions(config: Config) {\n-    return {\n-        lruCapacity: config.lruCapacity,\n-\n-        inlayHintsType: config.inlayHints.typeHints,\n-        inlayHintsParameter: config.inlayHints.parameterHints,\n-        inlayHintsChaining: config.inlayHints.chainingHints,\n-        inlayHintsMaxLength: config.inlayHints.maxLength,\n-\n-        cargoWatchEnable: config.cargoWatchOptions.enable,\n-        cargoWatchArgs: config.cargoWatchOptions.arguments,\n-        cargoWatchCommand: config.cargoWatchOptions.command,\n-        cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n-\n-        excludeGlobs: config.excludeGlobs,\n-        useClientWatching: config.useClientWatching,\n-        featureFlags: config.featureFlags,\n-        withSysroot: config.withSysroot,\n-        cargoFeatures: config.cargoFeatures,\n-        rustfmtArgs: config.rustfmtArgs,\n-        vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n-    };\n-}\n-\n export async function createClient(config: Config, serverPath: string, cwd: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -48,7 +24,7 @@ export async function createClient(config: Config, serverPath: string, cwd: stri\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: configToServerOptions(config),\n+        initializationOptions: vscode.workspace.getConfiguration(\"rust-analyzer\"),\n         traceOutputChannel,\n         middleware: {\n             // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576"}, {"sha": "2635a1440863f29739187920965e33745692f96c", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -66,6 +66,10 @@ export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n+        if (!vscode.extensions.getExtension(\"vadimcn.vscode-lldb\")) {\n+            vscode.window.showErrorMessage(\"Install `vadimcn.vscode-lldb` extension for debugging\");\n+            return;\n+        }\n \n         const debugConfig = {\n             type: \"lldb\","}, {"sha": "1f45f1de02565950cc1403ca2166d63ae8e64f81", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -11,9 +11,8 @@ export class Config {\n     private readonly rootSection = \"rust-analyzer\";\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n-        \"cargoFeatures\",\n-        \"excludeGlobs\",\n-        \"useClientWatching\",\n+        \"cargo\",\n+        \"files\",\n         \"highlighting\",\n         \"updates.channel\",\n     ]\n@@ -71,17 +70,8 @@ export class Config {\n     get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n     get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n     get highlightingSemanticTokens() { return this.cfg.get<boolean>(\"highlighting.semanticTokens\")!; }\n-    get lruCapacity() { return this.cfg.get<null | number>(\"lruCapacity\")!; }\n-    get excludeGlobs() { return this.cfg.get<string[]>(\"excludeGlobs\")!; }\n-    get useClientWatching() { return this.cfg.get<boolean>(\"useClientWatching\")!; }\n-    get featureFlags() { return this.cfg.get<Record<string, boolean>>(\"featureFlags\")!; }\n-    get rustfmtArgs() { return this.cfg.get<string[]>(\"rustfmtArgs\")!; }\n-    get loadOutDirsFromCheck() { return this.cfg.get<boolean>(\"loadOutDirsFromCheck\")!; }\n     get traceExtension() { return this.cfg.get<boolean>(\"trace.extension\")!; }\n \n-    // for internal use\n-    get withSysroot() { return this.cfg.get<boolean>(\"withSysroot\", true)!; }\n-\n     get inlayHints() {\n         return {\n             typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n@@ -91,21 +81,9 @@ export class Config {\n         };\n     }\n \n-    get cargoWatchOptions() {\n-        return {\n-            enable: this.cfg.get<boolean>(\"cargo-watch.enable\")!,\n-            arguments: this.cfg.get<string[]>(\"cargo-watch.arguments\")!,\n-            allTargets: this.cfg.get<boolean>(\"cargo-watch.allTargets\")!,\n-            command: this.cfg.get<string>(\"cargo-watch.command\")!,\n-        };\n-    }\n-\n-    get cargoFeatures() {\n+    get checkOnSave() {\n         return {\n-            noDefaultFeatures: this.cfg.get<boolean>(\"cargoFeatures.noDefaultFeatures\")!,\n-            allFeatures: this.cfg.get<boolean>(\"cargoFeatures.allFeatures\")!,\n-            features: this.cfg.get<string[]>(\"cargoFeatures.features\")!,\n-            loadOutDirsFromCheck: this.cfg.get<boolean>(\"cargoFeatures.loadOutDirsFromCheck\")!,\n+            command: this.cfg.get<string>(\"checkOnSave.command\")!,\n         };\n     }\n }"}, {"sha": "bd1c3de07dbb1433f2edb8faf22b98346d11f6e7", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n-import { createClient, configToServerOptions } from './client';\n+import { createClient } from './client';\n import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n@@ -25,7 +25,6 @@ export class Ctx {\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();\n-        client.onRequest('workspace/configuration', _ => [configToServerOptions(config)]);\n         return res;\n     }\n "}, {"sha": "f9cadc8a2258c0834f3fa6a74a5efb935bcecdaf", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=3c9e9d3f3ebbc7a22d932dd2a3fd63f1e44c4568", "patch": "@@ -7,7 +7,7 @@ import { Ctx } from './ctx';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export function activateStatusDisplay(ctx: Ctx) {\n-    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n+    const statusDisplay = new StatusDisplay(ctx.config.checkOnSave.command);\n     ctx.pushCleanup(statusDisplay);\n     const client = ctx.client;\n     if (client != null) {"}]}