{"sha": "07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzVlMmIzMTBiZjIwZmRjY2VkYzZhOTI3ZjE0MTdjYjlkZGM3ZmE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-22T20:00:17Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-06-27T18:38:52Z"}, "message": "Use a more efficient iteration order for forward dataflow\n\nCurrently, dataflow begins by visiting each block in order of ID\n(`BasicBlock(0)`, `BasicBlock(1)`, etc.). This PR changes that initial\niteration to reverse post-order. This ensures that the effects of all\npredecessors will be applied before a basic block is visited if the CFG\nhas no back-edges, and should result in less total iterations even when\nback-edges exist. This should not change the results of dataflow\nanalysis.\n\nThe current ordering for basic blocks is pretty close to RPO\nalready--`BasicBlock(0)` is already the start block, so the gains from\nthis are pretty small, especially since we need to do an extra traversal\nup front.\n\nNote that some basic blocks are unreachable from the `START_BLOCK`\nduring dataflow. We add these blocks to the work queue as well to\npreserve the original behavior.", "tree": {"sha": "adc11640e181a0bc90162d9f356b5b8a66592cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc11640e181a0bc90162d9f356b5b8a66592cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "html_url": "https://github.com/rust-lang/rust/commit/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b17298f2d1c5994c73e540ce7c44830af0d4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b17298f2d1c5994c73e540ce7c44830af0d4dc", "html_url": "https://github.com/rust-lang/rust/commit/a5b17298f2d1c5994c73e540ce7c44830af0d4dc"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "6cdd9de8b954d143889dbe9ae5df3b138973db99", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "patch": "@@ -228,9 +228,25 @@ where\n     BD: BitDenotation<'tcx>,\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n-        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n-            WorkQueue::with_all(self.builder.body.basic_blocks().len());\n         let body = self.builder.body;\n+\n+        // Initialize the dirty queue in reverse post-order. This makes it more likely that the\n+        // entry state for each basic block will have the effects of its predecessors applied\n+        // before it is processed. In fact, for CFGs without back edges, this guarantees that\n+        // dataflow will converge in exactly `N` iterations, where `N` is the number of basic\n+        // blocks.\n+        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n+            WorkQueue::with_none(body.basic_blocks().len());\n+        for (bb, _) in traversal::reverse_postorder(body) {\n+            dirty_queue.insert(bb);\n+        }\n+\n+        // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+        // be processed after the ones added above.\n+        for bb in body.basic_blocks().indices() {\n+            dirty_queue.insert(bb);\n+        }\n+\n         while let Some(bb) = dirty_queue.pop() {\n             let (on_entry, trans) = self.builder.flow_state.sets.get_mut(bb.index());\n             debug_assert!(in_out.words().len() == on_entry.words().len());"}]}