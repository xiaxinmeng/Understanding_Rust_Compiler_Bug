{"sha": "7372bf88ee17088023590f73fee380db97ee68e0", "node_id": "C_kwDOAAsO6NoAKDczNzJiZjg4ZWUxNzA4ODAyMzU5MGY3M2ZlZTM4MGRiOTdlZTY4ZTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:35Z"}, "message": "Rollup merge of #96609 - ibraheemdev:arc-downcast-unchecked, r=m-ou-se\n\nAdd `{Arc, Rc}::downcast_unchecked`\n\nPart of #90850.", "tree": {"sha": "439b196e3146b8d185eb0e85223c85b1d55ebf47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439b196e3146b8d185eb0e85223c85b1d55ebf47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7372bf88ee17088023590f73fee380db97ee68e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6ECRBK7hj4Ov3rIwAAmCMIAFruTmZSyxTkqVaIKjwze1TW\nVNRpWlASv9zAUfacqYv/TM0LkveQkBCH0lgBekJmPkMiJKeo+kCEr11GPCjVpHlz\npJoty+2C5iKj9gyUrLwudQ8y+qmdTPmdRd5Jw/Bq7BW9JNk1hnMKh0cmpzCNSz22\nGr8ujaKqkWhyi/nr1G8XMMlrA0r61XvSsVwQFPLjxrWng52JMDbAKUPNIEvoqTzj\nO1FKpiSqGr845+BqvycptsxEoSBvLdN1m5QCWtwPuq4rU10x6vunDvKR+J5kIU7s\nwcsSrT3uP6idShdKS9ChFCvMtLjvnsvJPO72nZYUWmBPSkyLDDroqIuIQ86f+9U=\n=W+Ws\n-----END PGP SIGNATURE-----\n", "payload": "tree 439b196e3146b8d185eb0e85223c85b1d55ebf47\nparent 99620ad7215d58ada72eabb2d7467fd685ac1090\nparent 1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729795 +0200\ncommitter GitHub <noreply@github.com> 1655729795 +0200\n\nRollup merge of #96609 - ibraheemdev:arc-downcast-unchecked, r=m-ou-se\n\nAdd `{Arc, Rc}::downcast_unchecked`\n\nPart of #90850.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7372bf88ee17088023590f73fee380db97ee68e0", "html_url": "https://github.com/rust-lang/rust/commit/7372bf88ee17088023590f73fee380db97ee68e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7372bf88ee17088023590f73fee380db97ee68e0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99620ad7215d58ada72eabb2d7467fd685ac1090", "url": "https://api.github.com/repos/rust-lang/rust/commits/99620ad7215d58ada72eabb2d7467fd685ac1090", "html_url": "https://github.com/rust-lang/rust/commit/99620ad7215d58ada72eabb2d7467fd685ac1090"}, {"sha": "1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34", "html_url": "https://github.com/rust-lang/rust/commit/1ac54401d1b7224f1b8744b2b1f130d4d3cdfe34"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "a248cd458df81b40b9ceb7a048d1f64457a4924d", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7372bf88ee17088023590f73fee380db97ee68e0/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7372bf88ee17088023590f73fee380db97ee68e0/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7372bf88ee17088023590f73fee380db97ee68e0", "patch": "@@ -1254,8 +1254,6 @@ impl<T: Clone> Rc<T> {\n }\n \n impl Rc<dyn Any> {\n-    #[inline]\n-    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.\n     ///\n     /// # Examples\n@@ -1274,6 +1272,8 @@ impl Rc<dyn Any> {\n     /// print_if_string(Rc::new(my_string));\n     /// print_if_string(Rc::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<dyn Any>> {\n         if (*self).is::<T>() {\n             unsafe {\n@@ -1285,6 +1285,42 @@ impl Rc<dyn Any> {\n             Err(self)\n         }\n     }\n+\n+    /// Downcasts the `Rc<dyn Any>` to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x: Rc<dyn Any> = Rc::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    ///\n+    ///\n+    /// [`downcast`]: Self::downcast\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n+    pub unsafe fn downcast_unchecked<T: Any>(self) -> Rc<T> {\n+        unsafe {\n+            let ptr = self.ptr.cast::<RcBox<T>>();\n+            mem::forget(self);\n+            Rc::from_inner(ptr)\n+        }\n+    }\n }\n \n impl<T: ?Sized> Rc<T> {"}, {"sha": "2670b15982ad92c665d2a656ee00203a09aa8981", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7372bf88ee17088023590f73fee380db97ee68e0/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7372bf88ee17088023590f73fee380db97ee68e0/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7372bf88ee17088023590f73fee380db97ee68e0", "patch": "@@ -1705,8 +1705,6 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n }\n \n impl Arc<dyn Any + Send + Sync> {\n-    #[inline]\n-    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.\n     ///\n     /// # Examples\n@@ -1725,9 +1723,11 @@ impl Arc<dyn Any + Send + Sync> {\n     /// print_if_string(Arc::new(my_string));\n     /// print_if_string(Arc::new(0i8));\n     /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     pub fn downcast<T>(self) -> Result<Arc<T>, Self>\n     where\n-        T: Any + Send + Sync + 'static,\n+        T: Any + Send + Sync,\n     {\n         if (*self).is::<T>() {\n             unsafe {\n@@ -1739,6 +1739,45 @@ impl Arc<dyn Any + Send + Sync> {\n             Err(self)\n         }\n     }\n+\n+    /// Downcasts the `Arc<dyn Any + Send + Sync>` to a concrete type.\n+    ///\n+    /// For a safe alternative see [`downcast`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downcast_unchecked)]\n+    ///\n+    /// use std::any::Any;\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x: Arc<dyn Any + Send + Sync> = Arc::new(1_usize);\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n+    /// }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// The contained value must be of type `T`. Calling this method\n+    /// with the incorrect type is *undefined behavior*.\n+    ///\n+    ///\n+    /// [`downcast`]: Self::downcast\n+    #[inline]\n+    #[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]\n+    pub unsafe fn downcast_unchecked<T>(self) -> Arc<T>\n+    where\n+        T: Any + Send + Sync,\n+    {\n+        unsafe {\n+            let ptr = self.ptr.cast::<ArcInner<T>>();\n+            mem::forget(self);\n+            Arc::from_inner(ptr)\n+        }\n+    }\n }\n \n impl<T> Weak<T> {"}]}