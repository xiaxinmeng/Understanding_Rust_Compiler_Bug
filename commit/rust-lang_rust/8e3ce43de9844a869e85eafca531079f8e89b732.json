{"sha": "8e3ce43de9844a869e85eafca531079f8e89b732", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlM2NlNDNkZTk4NDRhODY5ZTg1ZWFmY2E1MzEwNzlmOGU4OWI3MzI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-14T23:54:53Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-15T00:56:21Z"}, "message": "Add `Engine::pass_name` to differentiate dataflow runs", "tree": {"sha": "25e85a23cee9634fa5285e8b49722f61a40779c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e85a23cee9634fa5285e8b49722f61a40779c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3ce43de9844a869e85eafca531079f8e89b732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3ce43de9844a869e85eafca531079f8e89b732", "html_url": "https://github.com/rust-lang/rust/commit/8e3ce43de9844a869e85eafca531079f8e89b732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3ce43de9844a869e85eafca531079f8e89b732/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4154193e8471f36b1a9e781f1ef7d492fc6a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4154193e8471f36b1a9e781f1ef7d492fc6a6c", "html_url": "https://github.com/rust-lang/rust/commit/9b4154193e8471f36b1a9e781f1ef7d492fc6a6c"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "757709f90ff8eeb5f235ffdbed8e684c9b5eb689", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e3ce43de9844a869e85eafca531079f8e89b732/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3ce43de9844a869e85eafca531079f8e89b732/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=8e3ce43de9844a869e85eafca531079f8e89b732", "patch": "@@ -84,6 +84,7 @@ where\n     def_id: DefId,\n     dead_unwinds: Option<&'a BitSet<BasicBlock>>,\n     entry_sets: IndexVec<BasicBlock, A::Domain>,\n+    pass_name: Option<&'static str>,\n     analysis: A,\n \n     /// Cached, cumulative transfer functions for each block.\n@@ -174,6 +175,7 @@ where\n             body,\n             def_id,\n             dead_unwinds: None,\n+            pass_name: None,\n             entry_sets,\n             apply_trans_for_block,\n         }\n@@ -189,6 +191,15 @@ where\n         self\n     }\n \n+    /// Adds an identifier to the graphviz output for this particular run of a dataflow analysis.\n+    ///\n+    /// Some analyses are run multiple times in the compilation pipeline. Give them a `pass_name`\n+    /// to differentiate them. Otherwise, only the results for the latest run will be saved.\n+    pub fn pass_name(mut self, name: &'static str) -> Self {\n+        self.pass_name = Some(name);\n+        self\n+    }\n+\n     /// Computes the fixpoint for this dataflow problem and returns it.\n     pub fn iterate_to_fixpoint(self) -> Results<'tcx, A>\n     where\n@@ -202,6 +213,7 @@ where\n             mut entry_sets,\n             tcx,\n             apply_trans_for_block,\n+            pass_name,\n             ..\n         } = self;\n \n@@ -249,7 +261,7 @@ where\n \n         let results = Results { analysis, entry_sets };\n \n-        let res = write_graphviz_results(tcx, def_id, &body, &results);\n+        let res = write_graphviz_results(tcx, def_id, &body, &results, pass_name);\n         if let Err(e) = res {\n             warn!(\"Failed to write graphviz dataflow results: {}\", e);\n         }\n@@ -267,6 +279,7 @@ fn write_graphviz_results<A>(\n     def_id: DefId,\n     body: &mir::Body<'tcx>,\n     results: &Results<'tcx, A>,\n+    pass_name: Option<&'static str>,\n ) -> std::io::Result<()>\n where\n     A: Analysis<'tcx>,\n@@ -285,12 +298,17 @@ where\n         None if tcx.sess.opts.debugging_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n+            // FIXME: Use some variant of `pretty::dump_path` for this\n             let mut path = PathBuf::from(&tcx.sess.opts.debugging_opts.dump_mir_dir);\n \n+            let crate_name = tcx.crate_name(def_id.krate);\n             let item_name = ty::print::with_forced_impl_filename_line(|| {\n                 tcx.def_path(def_id).to_filename_friendly_no_crate()\n             });\n-            path.push(format!(\"rustc.{}.{}.dot\", item_name, A::NAME));\n+\n+            let pass_name = pass_name.map(|s| format!(\".{}\", s)).unwrap_or_default();\n+\n+            path.push(format!(\"{}.{}.{}{}.dot\", crate_name, item_name, A::NAME, pass_name));\n             path\n         }\n "}]}