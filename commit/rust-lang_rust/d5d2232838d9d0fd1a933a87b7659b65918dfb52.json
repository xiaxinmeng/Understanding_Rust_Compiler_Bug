{"sha": "d5d2232838d9d0fd1a933a87b7659b65918dfb52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZDIyMzI4MzhkOWQwZmQxYTkzM2E4N2I3NjU5YjY1OTE4ZGZiNTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T21:34:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:30:54Z"}, "message": "auto_trait.rs: rustfmt", "tree": {"sha": "ccb3be95150eb8821089fa07c53c553759ed166c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb3be95150eb8821089fa07c53c553759ed166c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5d2232838d9d0fd1a933a87b7659b65918dfb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d2232838d9d0fd1a933a87b7659b65918dfb52", "html_url": "https://github.com/rust-lang/rust/commit/d5d2232838d9d0fd1a933a87b7659b65918dfb52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5d2232838d9d0fd1a933a87b7659b65918dfb52/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672e071a42f565c6d0611784c2f913f6dc9287d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/672e071a42f565c6d0611784c2f913f6dc9287d6", "html_url": "https://github.com/rust-lang/rust/commit/672e071a42f565c6d0611784c2f913f6dc9287d6"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "b445adea558a1f8224ed447ea1c9baecf7225094", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d5d2232838d9d0fd1a933a87b7659b65918dfb52/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5d2232838d9d0fd1a933a87b7659b65918dfb52/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=d5d2232838d9d0fd1a933a87b7659b65918dfb52", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .iter()\n                 .filter_map(|param| match param.kind {\n                     ty::GenericParamDefKind::Lifetime => Some(param.name.to_string()),\n-                    _ => None\n+                    _ => None,\n                 })\n                 .collect();\n \n@@ -359,8 +359,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 &Err(SelectionError::Unimplemented) => {\n                     if self.is_of_param(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n-                        self.add_user_pred(&mut user_computed_preds,\n-                                           ty::Predicate::Trait(pred.clone()));\n+                        self.add_user_pred(\n+                            &mut user_computed_preds,\n+                            ty::Predicate::Trait(pred.clone()),\n+                        );\n                         predicates.push_back(pred);\n                     } else {\n                         debug!(\n@@ -418,8 +420,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // under which a type implements an auto trait. A trait predicate involving\n     // a HRTB means that the type needs to work with any choice of lifetime,\n     // not just one specific lifetime (e.g. 'static).\n-    fn add_user_pred<'c>(&self, user_computed_preds: &mut FxHashSet<ty::Predicate<'c>>,\n-                         new_pred: ty::Predicate<'c>) {\n+    fn add_user_pred<'c>(\n+        &self,\n+        user_computed_preds: &mut FxHashSet<ty::Predicate<'c>>,\n+        new_pred: ty::Predicate<'c>,\n+    ) {\n         let mut should_add_new = true;\n         user_computed_preds.retain(|&old_pred| {\n             match (&new_pred, old_pred) {\n@@ -431,20 +436,19 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         if !new_substs.types().eq(old_substs.types()) {\n                             // We can't compare lifetimes if the types are different,\n                             // so skip checking old_pred\n-                            return true\n+                            return true;\n                         }\n \n-                        for (new_region, old_region) in new_substs\n-                            .regions()\n-                            .zip(old_substs.regions()) {\n-\n+                        for (new_region, old_region) in\n+                            new_substs.regions().zip(old_substs.regions())\n+                        {\n                             match (new_region, old_region) {\n                                 // If both predicates have an 'ReLateBound' (a HRTB) in the\n                                 // same spot, we do nothing\n                                 (\n                                     ty::RegionKind::ReLateBound(_, _),\n-                                    ty::RegionKind::ReLateBound(_, _)\n-                                ) => {},\n+                                    ty::RegionKind::ReLateBound(_, _),\n+                                ) => {}\n \n                                 (ty::RegionKind::ReLateBound(_, _), _) => {\n                                     // The new predicate has a HRTB in a spot where the old\n@@ -458,7 +462,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                     // so we return 'false' to remove the old predicate from\n                                     // user_computed_preds\n                                     return false;\n-                                },\n+                                }\n                                 (_, ty::RegionKind::ReLateBound(_, _)) => {\n                                     // This is the opposite situation as the previous arm - the\n                                     // old predicate has a HRTB lifetime in a place where the\n@@ -471,10 +475,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                },\n+                }\n                 _ => {}\n             }\n-            return true\n+            return true;\n         });\n \n         if should_add_new {\n@@ -513,44 +517,32 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             match constraint {\n                 &Constraint::VarSubVar(r1, r2) => {\n                     {\n-                        let deps1 = vid_map\n-                            .entry(RegionTarget::RegionVid(r1))\n-                            .or_default();\n+                        let deps1 = vid_map.entry(RegionTarget::RegionVid(r1)).or_default();\n                         deps1.larger.insert(RegionTarget::RegionVid(r2));\n                     }\n \n-                    let deps2 = vid_map\n-                        .entry(RegionTarget::RegionVid(r2))\n-                        .or_default();\n+                    let deps2 = vid_map.entry(RegionTarget::RegionVid(r2)).or_default();\n                     deps2.smaller.insert(RegionTarget::RegionVid(r1));\n                 }\n                 &Constraint::RegSubVar(region, vid) => {\n                     {\n-                        let deps1 = vid_map\n-                            .entry(RegionTarget::Region(region))\n-                            .or_default();\n+                        let deps1 = vid_map.entry(RegionTarget::Region(region)).or_default();\n                         deps1.larger.insert(RegionTarget::RegionVid(vid));\n                     }\n \n-                    let deps2 = vid_map\n-                        .entry(RegionTarget::RegionVid(vid))\n-                        .or_default();\n+                    let deps2 = vid_map.entry(RegionTarget::RegionVid(vid)).or_default();\n                     deps2.smaller.insert(RegionTarget::Region(region));\n                 }\n                 &Constraint::VarSubReg(vid, region) => {\n                     finished_map.insert(vid, region);\n                 }\n                 &Constraint::RegSubReg(r1, r2) => {\n                     {\n-                        let deps1 = vid_map\n-                            .entry(RegionTarget::Region(r1))\n-                            .or_default();\n+                        let deps1 = vid_map.entry(RegionTarget::Region(r1)).or_default();\n                         deps1.larger.insert(RegionTarget::Region(r2));\n                     }\n \n-                    let deps2 = vid_map\n-                        .entry(RegionTarget::Region(r2))\n-                        .or_default();\n+                    let deps2 = vid_map.entry(RegionTarget::Region(r2)).or_default();\n                     deps2.smaller.insert(RegionTarget::Region(r1));\n                 }\n             }\n@@ -683,7 +675,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 &ty::Predicate::RegionOutlives(ref binder) => {\n-                    if select.infcx().region_outlives_predicate(&dummy_cause, binder).is_err() {\n+                    if select\n+                        .infcx()\n+                        .region_outlives_predicate(&dummy_cause, binder)\n+                        .is_err()\n+                    {\n                         return false;\n                     }\n                 }"}]}