{"sha": "1902384d153407ff04d2048812c8b9eb9f754f74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDIzODRkMTUzNDA3ZmYwNGQyMDQ4ODEyYzhiOWViOWY3NTRmNzQ=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2019-03-09T11:24:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T11:24:42Z"}, "message": "Rollup merge of #3851 - phansch:refactor_trait_stuff, r=flip1995\n\nRefactor: Extract `trait_ref_of_method` function\n\nThis pattern was used in three places after #3844, so I think it's worth moving it into `utils/mod.rs` and documenting it.", "tree": {"sha": "eaa0f03cda8053077112923dfde84511b29d6eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaa0f03cda8053077112923dfde84511b29d6eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1902384d153407ff04d2048812c8b9eb9f754f74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg6J6CRBK7hj4Ov3rIwAAdHIIAIntcxQrglSHcAm0VR/YwNPi\nWLMb0ofSSt/6AphvrVXmEuro3LXI5E/yzQsPvffeEvalPeHAxXQTpHV/HNJJuzKV\n+Mzj3AJsZK57qjNOR4i7EY5Fk0PpQOyjtu4LVnynx+G1fLnvuQMy8i9CePb8wMU3\n2Vrgv5uhJwi06dh4FlOngL/56tOsnTAzbuvAzib3H5A4vgp3PSM+MXVsNm7BcvSD\nFOT/6dHjd0wv+nvKovFCyQ3fJeqQFlw6JTM2Zq+0Guwbz69Zpomw+w8UDYtng5ms\niwWBJRYAA4zHYVHq3/f86rpFIXwnAPgSGiMXnopONj5pIEYlyEySsoHdCpfeJm0=\n=9Mlr\n-----END PGP SIGNATURE-----\n", "payload": "tree eaa0f03cda8053077112923dfde84511b29d6eb1\nparent bd6b5a1a36cb7b105bff8c4e2629bf28eca8471e\nparent 131b89b54ecdefcf7576f556c637441aa81f2da0\nauthor Philipp Krones <hello@philkrones.com> 1552130682 +0100\ncommitter GitHub <noreply@github.com> 1552130682 +0100\n\nRollup merge of #3851 - phansch:refactor_trait_stuff, r=flip1995\n\nRefactor: Extract `trait_ref_of_method` function\n\nThis pattern was used in three places after #3844, so I think it's worth moving it into `utils/mod.rs` and documenting it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1902384d153407ff04d2048812c8b9eb9f754f74", "html_url": "https://github.com/rust-lang/rust/commit/1902384d153407ff04d2048812c8b9eb9f754f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1902384d153407ff04d2048812c8b9eb9f754f74/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6b5a1a36cb7b105bff8c4e2629bf28eca8471e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6b5a1a36cb7b105bff8c4e2629bf28eca8471e", "html_url": "https://github.com/rust-lang/rust/commit/bd6b5a1a36cb7b105bff8c4e2629bf28eca8471e"}, {"sha": "131b89b54ecdefcf7576f556c637441aa81f2da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/131b89b54ecdefcf7576f556c637441aa81f2da0", "html_url": "https://github.com/rust-lang/rust/commit/131b89b54ecdefcf7576f556c637441aa81f2da0"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "87e92c2bd2454ed4f6c8489269eea7d3da30ab11", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=1902384d153407ff04d2048812c8b9eb9f754f74", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{\n+    get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method, SpanlessEq,\n+};\n use crate::utils::{higher, sugg};\n use if_chain::if_chain;\n use rustc::hir;\n@@ -140,13 +142,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         };\n                                         // check that we are not inside an `impl AssignOp` of this exact operation\n                                         let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n-                                        let parent_impl = cx.tcx.hir().get_parent_item(parent_fn);\n-                                        // the crate node is the only one that is not in the map\n                                         if_chain! {\n-                                            if parent_impl != hir::CRATE_HIR_ID;\n-                                            if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-                                            if let hir::ItemKind::Impl(_, _, _, _, Some(trait_ref), _, _) =\n-                                                &item.node;\n+                                            if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n                                             if trait_ref.path.def.def_id() == trait_id;\n                                             then { return; }\n                                         }"}, {"sha": "5bc949a6688adff8625961945e514363f92608ab", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1902384d153407ff04d2048812c8b9eb9f754f74", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::{is_entrypoint_fn, span_lint};\n-use if_chain::if_chain;\n+use crate::utils::{is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n@@ -96,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if is_trait_method(cx, hir_id) || already_const(sig.header) {\n+                if trait_ref_of_method(cx, hir_id).is_some() || already_const(sig.header) {\n                     return;\n                 }\n             },\n@@ -115,18 +114,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n-fn is_trait_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n-    // Get the implemented trait for the current function\n-    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n-    if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-        if let hir::ItemKind::Impl(_, _, _, _, Some(_trait_ref), _, _) = &item.node;\n-        then { return true; }\n-    }\n-    false\n-}\n-\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "76ca1dc284827f8db4ecec3527637e976f942c29", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=1902384d153407ff04d2048812c8b9eb9f754f74", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_trait_def_id, span_lint};\n+use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -177,12 +177,9 @@ fn check_binop<'a>(\n \n     // Get the actually implemented trait\n     let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    let parent_impl = cx.tcx.hir().get_parent_item(parent_fn);\n \n     if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-        if let hir::ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n+        if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n         if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.def.def_id());\n         if binop != expected_ops[idx];\n         then{"}, {"sha": "96e421218868bcdddc75e89f7f9e32e099ef20f4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1902384d153407ff04d2048812c8b9eb9f754f74/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1902384d153407ff04d2048812c8b9eb9f754f74", "patch": "@@ -301,6 +301,33 @@ pub fn implements_trait<'a, 'tcx>(\n         .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n }\n \n+/// Get the `hir::TraitRef` of the trait the given method is implemented for\n+///\n+/// Use this if you want to find the `TraitRef` of the `Add` trait in this example:\n+///\n+/// ```rust\n+/// struct Point(isize, isize);\n+///\n+/// impl std::ops::Add for Point {\n+///     type Output = Self;\n+///\n+///     fn add(self, other: Self) -> Self {\n+///         Point(0, 0)\n+///     }\n+/// }\n+/// ```\n+pub fn trait_ref_of_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> Option<TraitRef> {\n+    // Get the implemented trait for the current function\n+    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n+    if_chain! {\n+        if parent_impl != hir::CRATE_HIR_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n+        if let hir::ItemKind::Impl(_, _, _, _, trait_ref, _, _) = &item.node;\n+        then { return trait_ref.clone(); }\n+    }\n+    None\n+}\n+\n /// Check whether this type implements Drop.\n pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.ty_adt_def() {"}]}