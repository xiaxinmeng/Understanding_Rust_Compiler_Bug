{"sha": "e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2Q5ZmMyYjZlNzRiM2FiMTRhNzUzMWZlOGRkYzc1NGYyZjg5Yjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-16T00:45:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-16T00:46:16Z"}, "message": "rustc: Use a regular vector instead of a hash table for type descriptors", "tree": {"sha": "dcec1f4e18797e736e87b25cfa8391ce0cd12aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcec1f4e18797e736e87b25cfa8391ce0cd12aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "html_url": "https://github.com/rust-lang/rust/commit/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e922e2ecf808cae8a59ea9d9e0d75abc09b3290", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e922e2ecf808cae8a59ea9d9e0d75abc09b3290", "html_url": "https://github.com/rust-lang/rust/commit/3e922e2ecf808cae8a59ea9d9e0d75abc09b3290"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "3d6b547c5da8c86abe0e2ecf6cff75a7c70afeff", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "patch": "@@ -128,8 +128,7 @@ state type fn_ctxt = rec(ValueRef llfn,\n                          hashmap[ast.def_id, ValueRef] llobjfields,\n                          hashmap[ast.def_id, ValueRef] lllocals,\n                          hashmap[ast.def_id, ValueRef] llupvars,\n-                         // FIXME: this should probably be just vec[ValueRef]\n-                         hashmap[uint, ValueRef] lltydescs,\n+                         mutable vec[ValueRef] lltydescs,\n                          @crate_ctxt ccx);\n \n tag cleanup {\n@@ -1486,7 +1485,7 @@ fn linearize_ty_params(@block_ctxt cx, @ty.t t) ->\n                     }\n                 }\n                 if (!seen) {\n-                    r.vals += vec(r.cx.fcx.lltydescs.get(pid));\n+                    r.vals += vec(r.cx.fcx.lltydescs.(pid));\n                     r.defs += vec(pid);\n                 }\n             }\n@@ -1508,10 +1507,7 @@ fn linearize_ty_params(@block_ctxt cx, @ty.t t) ->\n fn get_tydesc(&@block_ctxt cx, @ty.t t) -> result {\n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty.type_param(t)) {\n-        case (some[uint](?id)) {\n-            check (cx.fcx.lltydescs.contains_key(id));\n-            ret res(cx, cx.fcx.lltydescs.get(id));\n-        }\n+        case (some[uint](?id)) { ret res(cx, cx.fcx.lltydescs.(id)); }\n         case (none[uint])      { /* fall through */ }\n     }\n \n@@ -1665,13 +1661,17 @@ fn make_generic_glue(@crate_ctxt cx, @ty.t t, ValueRef llfn,\n         auto ty_param_count = _vec.len[uint](ty_params);\n \n         auto lltyparams = llvm.LLVMGetParam(llfn, 3u);\n+\n+        auto lltydescs = _vec.empty_mut[ValueRef]();\n         auto p = 0u;\n         while (p < ty_param_count) {\n             auto llparam = bcx.build.GEP(lltyparams, vec(C_int(p as int)));\n             llparam = bcx.build.Load(llparam);\n-            bcx.fcx.lltydescs.insert(ty_params.(p), llparam);\n+            _vec.grow_set[ValueRef](lltydescs, ty_params.(p), 0 as ValueRef,\n+                                    llparam);\n             p += 1u;\n         }\n+        bcx.fcx.lltydescs = _vec.freeze[ValueRef](lltydescs);\n \n         auto llrawptr = llvm.LLVMGetParam(llfn, 4u);\n         auto llval = bcx.build.BitCast(llrawptr, llty);\n@@ -5488,7 +5488,6 @@ fn new_fn_ctxt(@crate_ctxt cx,\n     let hashmap[ast.def_id, ValueRef] llobjfields = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] llupvars = new_def_hash[ValueRef]();\n-    let hashmap[uint, ValueRef] lltydescs = common.new_uint_hash[ValueRef]();\n \n     let BasicBlockRef llallocas =\n         llvm.LLVMAppendBasicBlock(llfndecl, _str.buf(\"allocas\"));\n@@ -5504,7 +5503,7 @@ fn new_fn_ctxt(@crate_ctxt cx,\n              llobjfields=llobjfields,\n              lllocals=lllocals,\n              llupvars=llupvars,\n-             lltydescs=lltydescs,\n+             mutable lltydescs=_vec.empty[ValueRef](),\n              ccx=cx);\n }\n \n@@ -5533,7 +5532,7 @@ fn create_llargs_for_fn_args(&@fn_ctxt cx,\n             for (ast.ty_param tp in ty_params) {\n                 auto llarg = llvm.LLVMGetParam(cx.llfn, arg_n);\n                 check (llarg as int != 0);\n-                cx.lltydescs.insert(i, llarg);\n+                cx.lltydescs += vec(llarg);\n                 arg_n += 1u;\n                 i += 1u;\n             }\n@@ -5685,7 +5684,7 @@ fn populate_fn_ctxt_from_llself(@fn_ctxt fcx, self_vt llself) {\n                                                vec(C_int(0),\n                                                    C_int(i)));\n         lltyparam = bcx.build.Load(lltyparam);\n-        fcx.lltydescs.insert(i as uint, lltyparam);\n+        fcx.lltydescs += vec(lltyparam);\n         i += 1;\n     }\n \n@@ -5916,7 +5915,7 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n         bcx = body_typarams.bcx;\n         let int i = 0;\n         for (ast.ty_param tp in ty_params) {\n-            auto typaram = bcx.fcx.lltydescs.get(i as uint);\n+            auto typaram = bcx.fcx.lltydescs.(i);\n             auto capture = GEP_tup_like(bcx, typarams_ty, body_typarams.val,\n                                         vec(0, i));\n             bcx = capture.bcx;\n@@ -6952,7 +6951,7 @@ fn trans_vec_append_glue(@crate_ctxt cx) {\n                     llobjfields=new_def_hash[ValueRef](),\n                     lllocals=new_def_hash[ValueRef](),\n                     llupvars=new_def_hash[ValueRef](),\n-                    lltydescs=common.new_uint_hash[ValueRef](),\n+                    mutable lltydescs=_vec.empty[ValueRef](),\n                     ccx=cx);\n \n     auto bcx = new_top_block_ctxt(fcx);"}]}