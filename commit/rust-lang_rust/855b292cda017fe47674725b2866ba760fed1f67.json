{"sha": "855b292cda017fe47674725b2866ba760fed1f67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWIyOTJjZGEwMTdmZTQ3Njc0NzI1YjI4NjZiYTc2MGZlZDFmNjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-10T07:41:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-10T07:41:34Z"}, "message": "Merge pull request #681 from oli-obk/split\n\ncargo clippy", "tree": {"sha": "8c47cd316eeba077fc022ed076b1ac45722ace02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c47cd316eeba077fc022ed076b1ac45722ace02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855b292cda017fe47674725b2866ba760fed1f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855b292cda017fe47674725b2866ba760fed1f67", "html_url": "https://github.com/rust-lang/rust/commit/855b292cda017fe47674725b2866ba760fed1f67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855b292cda017fe47674725b2866ba760fed1f67/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc75836fe1977a024834b1c9a5ac28eb25f47863", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc75836fe1977a024834b1c9a5ac28eb25f47863", "html_url": "https://github.com/rust-lang/rust/commit/dc75836fe1977a024834b1c9a5ac28eb25f47863"}, {"sha": "654154d8e7e770dc7328024efb5451a7503d5d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/654154d8e7e770dc7328024efb5451a7503d5d6d", "html_url": "https://github.com/rust-lang/rust/commit/654154d8e7e770dc7328024efb5451a7503d5d6d"}], "stats": {"total": 199, "additions": 185, "deletions": 14}, "files": [{"sha": "b204bb0b2f5a5774d338500f4fa5eb596a0d6728", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/855b292cda017fe47674725b2866ba760fed1f67/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/855b292cda017fe47674725b2866ba760fed1f67/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=855b292cda017fe47674725b2866ba760fed1f67", "patch": "@@ -18,8 +18,9 @@ script:\n  - remark -f README.md > /dev/null\n  - python util/update_lints.py -c\n  - cargo build --features debugging\n- - rm -rf target/ Cargo.lock\n  - cargo test --features debugging\n+ - SYSROOT=~/rust cargo install\n+ - cargo clippy --lib -- -D clippy\n \n after_success:\n # only test regex_macros if it compiles"}, {"sha": "470d2dd7096d5bba636eed2b9a2a2a60795790db", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/855b292cda017fe47674725b2866ba760fed1f67/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/855b292cda017fe47674725b2866ba760fed1f67/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=855b292cda017fe47674725b2866ba760fed1f67", "patch": "@@ -16,6 +16,12 @@ keywords = [\"clippy\", \"lint\", \"plugin\"]\n [lib]\n name = \"clippy\"\n plugin = true\n+test = false\n+\n+[[bin]]\n+name = \"cargo-clippy\"\n+path = \"src/lib.rs\"\n+test = false\n \n [dependencies]\n regex-syntax = \"0.3.0\""}, {"sha": "ee234432c63ee7f55efaa8d0468cfcd1b6d78632", "filename": "README.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/855b292cda017fe47674725b2866ba760fed1f67/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/855b292cda017fe47674725b2866ba760fed1f67/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=855b292cda017fe47674725b2866ba760fed1f67", "patch": "@@ -173,6 +173,8 @@ More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/\n \n ## Usage\n \n+### As a Compiler Plugin\n+\n Compiler plugins are highly unstable and will only work with a nightly Rust for now.\n Since stable Rust is backwards compatible, you should be able to compile\n your stable programs with nightly Rust with clippy plugged in to circumvent\n@@ -217,8 +219,28 @@ src/main.rs:8:5: 11:6 help: Try\n if let Some(y) = x { println!(\"{:?}\", y) }\n ```\n \n-An alternate way to use clippy is by compiling and using [`cargo clippy`](https://github.com/arcnmx/cargo-clippy),\n-a custom cargo subcommand that runs clippy on a given project.\n+### As a cargo subcommand (`cargo clippy`)\n+\n+An alternate way to use clippy is by installing clippy through cargo as a cargo\n+subcommand.\n+\n+```terminal\n+cargo install clippy\n+```\n+\n+Now you can run clippy by invoking `cargo clippy`, or\n+`multirust run nightly cargo clippy` directly from a directory that is usually\n+compiled with stable.\n+\n+In case you are not using multirust, you need to set the environment flag\n+`SYSROOT` during installation so clippy knows where to find `librustc` and\n+similar crates.\n+\n+```terminal\n+SYSROOT=/path/to/rustc/sysroot cargo install clippy\n+```\n+\n+### Configuring clippy\n \n You can add options  to `allow`/`warn`/`deny`:\n \n@@ -234,6 +256,8 @@ You can add options  to `allow`/`warn`/`deny`:\n \n Note: `deny` produces errors instead of warnings\n \n+### Running clippy from the command line without installing\n+\n To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n in your code, you can use:\n \n@@ -244,6 +268,8 @@ cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n *[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n \n+### Optional dependency\n+\n If you want to make clippy an optional dependency, you can do the following:\n \n In your `Cargo.toml`:"}, {"sha": "5dd473c8d09bfec8d3bce230b26a10162c617c5e", "filename": "src/lib.rs", "status": "modified", "additions": 139, "deletions": 5, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/855b292cda017fe47674725b2866ba760fed1f67/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855b292cda017fe47674725b2866ba760fed1f67/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=855b292cda017fe47674725b2866ba760fed1f67", "patch": "@@ -9,11 +9,145 @@\n #![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n #![allow(float_arithmetic, integer_arithmetic)]\n \n-// this only exists to allow the \"dogfood\" integration test to work\n-#[allow(dead_code)]\n-#[allow(print_stdout)]\n-fn main() {\n-    println!(\"What are you doing? Don't run clippy as an executable\");\n+extern crate rustc_driver;\n+extern crate getopts;\n+\n+use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n+use rustc::session::{config, Session};\n+use rustc::session::config::{Input, ErrorOutputType};\n+use syntax::diagnostics;\n+use std::path::PathBuf;\n+\n+struct ClippyCompilerCalls(RustcDefaultCalls);\n+\n+impl std::default::Default for ClippyCompilerCalls {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+impl ClippyCompilerCalls {\n+    fn new() -> Self {\n+        ClippyCompilerCalls(RustcDefaultCalls)\n+    }\n+}\n+\n+impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n+    fn early_callback(&mut self,\n+                      matches: &getopts::Matches,\n+                      sopts: &config::Options,\n+                      descriptions: &diagnostics::registry::Registry,\n+                      output: ErrorOutputType)\n+                      -> Compilation {\n+        self.0.early_callback(matches, sopts, descriptions, output)\n+    }\n+    fn no_input(&mut self,\n+                matches: &getopts::Matches,\n+                sopts: &config::Options,\n+                odir: &Option<PathBuf>,\n+                ofile: &Option<PathBuf>,\n+                descriptions: &diagnostics::registry::Registry)\n+                -> Option<(Input, Option<PathBuf>)> {\n+        self.0.no_input(matches, sopts, odir, ofile, descriptions)\n+    }\n+    fn late_callback(&mut self,\n+                     matches: &getopts::Matches,\n+                     sess: &Session,\n+                     input: &Input,\n+                     odir: &Option<PathBuf>,\n+                     ofile: &Option<PathBuf>)\n+                     -> Compilation {\n+        self.0.late_callback(matches, sess, input, odir, ofile)\n+    }\n+    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n+        let mut control = self.0.build_controller(sess, matches);\n+\n+        let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n+        control.after_parse.callback = Box::new(move |state| {\n+            {\n+                let mut registry = rustc_plugin::registry::Registry::new(state.session, state.krate.as_ref().expect(\"at this compilation stage the krate must be parsed\"));\n+                registry.args_hidden = Some(Vec::new());\n+                plugin_registrar(&mut registry);\n+\n+                let rustc_plugin::registry::Registry { early_lint_passes, late_lint_passes, lint_groups, llvm_passes, attributes, mir_passes, .. } = registry;\n+                let sess = &state.session;\n+                let mut ls = sess.lint_store.borrow_mut();\n+                for pass in early_lint_passes {\n+                    ls.register_early_pass(Some(sess), true, pass);\n+                }\n+                for pass in late_lint_passes {\n+                    ls.register_late_pass(Some(sess), true, pass);\n+                }\n+\n+                for (name, to) in lint_groups {\n+                    ls.register_group(Some(sess), true, name, to);\n+                }\n+\n+                sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                sess.mir_passes.borrow_mut().extend(mir_passes);\n+                sess.plugin_attributes.borrow_mut().extend(attributes);\n+            }\n+            old(state);\n+        });\n+\n+        control\n+    }\n+}\n+\n+use std::path::Path;\n+\n+pub fn main() {\n+    use std::env;\n+\n+    if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n+        return;\n+    }\n+\n+    let dep_path = env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n+    let sys_root = match (option_env!(\"MULTIRUST_HOME\"), option_env!(\"MULTIRUST_TOOLCHAIN\")) {\n+        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n+        _ => option_env!(\"SYSROOT\").expect(\"need to specify SYSROOT env var during clippy compilation or use multirust\").to_owned(),\n+    };\n+\n+    if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+        let args = wrap_args(std::env::args().skip(2), dep_path, sys_root);\n+        let path = std::env::current_exe().expect(\"current executable path invalid\");\n+        let run = std::process::Command::new(\"cargo\")\n+            .args(&args)\n+            .env(\"RUSTC\", path)\n+            .spawn().expect(\"could not run cargo\")\n+            .wait().expect(\"failed to wait for cargo?\")\n+            .success();\n+        assert!(run, \"cargo rustc failed\");\n+    } else {\n+        let args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n+            env::args().collect()\n+        } else {\n+            env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n+        };\n+        rustc_driver::run_compiler(&args, &mut ClippyCompilerCalls::new());\n+    }\n+}\n+\n+fn wrap_args<P, I>(old_args: I, dep_path: P, sysroot: String) -> Vec<String>\n+    where P: AsRef<Path>, I: Iterator<Item=String> {\n+\n+    let mut args = vec![\"rustc\".to_owned()];\n+\n+    let mut found_dashes = false;\n+    for arg in old_args {\n+        found_dashes |= arg == \"--\";\n+        args.push(arg);\n+    }\n+    if !found_dashes {\n+        args.push(\"--\".to_owned());\n+    }\n+    args.push(\"-L\".to_owned());\n+    args.push(dep_path.as_ref().to_string_lossy().into_owned());\n+    args.push(String::from(\"--sysroot\"));\n+    args.push(sysroot);\n+    args.push(\"-Zno-trans\".to_owned());\n+    args\n }\n \n #[macro_use]"}, {"sha": "d050b4fc5ba11644fdccff0073218fbb4e9fefc9", "filename": "tests/dogfood.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/855b292cda017fe47674725b2866ba760fed1f67/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855b292cda017fe47674725b2866ba760fed1f67/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=855b292cda017fe47674725b2866ba760fed1f67", "patch": "@@ -1,25 +1,26 @@\n-#![feature(test)]\n+#![feature(test, plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy, clippy_pedantic)]\n \n extern crate compiletest_rs as compiletest;\n extern crate test;\n \n-use std::env::var;\n+use std::env::{var, set_var};\n use std::path::PathBuf;\n use test::TestPaths;\n \n #[test]\n fn dogfood() {\n     let mut config = compiletest::default_config();\n \n-    let cfg_mode = \"run-pass\".parse().ok().expect(\"Invalid mode\");\n+    let cfg_mode = \"run-pass\".parse().expect(\"Invalid mode\");\n     let mut s = String::new();\n     s.push_str(\" -L target/debug/\");\n     s.push_str(\" -L target/debug/deps\");\n     s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dclippy_pedantic -Dclippy\");\n     config.target_rustcflags = Some(s);\n-    if let Ok(name) = var::<&str>(\"TESTNAME\") {\n-        let s : String = name.to_owned();\n-        config.filter = Some(s)\n+    if let Ok(name) = var(\"TESTNAME\") {\n+        config.filter = Some(name.to_owned())\n     }\n \n     config.mode = cfg_mode;\n@@ -29,5 +30,8 @@ fn dogfood() {\n         file: PathBuf::from(\"src/lib.rs\"),\n         relative_dir: PathBuf::new(),\n     };\n+\n+    set_var(\"CLIPPY_DOGFOOD\", \"tastes like chicken\");\n+\n     compiletest::runtest::run(config, &paths);\n }"}]}