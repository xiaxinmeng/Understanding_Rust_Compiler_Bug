{"sha": "1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDFmYjk3ZTE3ZjVlNDFjNjA5Y2QxMWFiMTE0YzdhYzFmM2RlMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T05:50:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T05:50:29Z"}, "message": "Auto merge of #74653 - petrochenkov:pmenv, r=dtolnay\n\nproc_macro: Add API for tracked access to environment variables\n\nContinuation of https://github.com/rust-lang/rust/pull/71858.\n\n`proc_macro::tracked_env::var` is similar to regular `env::var` called from a proc macro, except that it also adds the accessed variable to depinfo.", "tree": {"sha": "9ddf005878ea7a037fc39e8edecc98f2edf0d990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddf005878ea7a037fc39e8edecc98f2edf0d990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "html_url": "https://github.com/rust-lang/rust/commit/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f721fb5933f130b7a5b72152dbacd298e9ee7f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/f721fb5933f130b7a5b72152dbacd298e9ee7f02", "html_url": "https://github.com/rust-lang/rust/commit/f721fb5933f130b7a5b72152dbacd298e9ee7f02"}, {"sha": "62c9fa939d95fcc009afb7ab80483081c3d1f068", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c9fa939d95fcc009afb7ab80483081c3d1f068", "html_url": "https://github.com/rust-lang/rust/commit/62c9fa939d95fcc009afb7ab80483081c3d1f068"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "c00e07388b882908d2adfc18096fa4c08bce1f3c", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -157,6 +157,7 @@ macro_rules! define_handles {\n }\n define_handles! {\n     'owned:\n+    FreeFunctions,\n     TokenStream,\n     TokenStreamBuilder,\n     TokenStreamIter,"}, {"sha": "324be9f47010882d3ae900e6a0ad55b5e2e92444", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -52,6 +52,10 @@ use std::thread;\n macro_rules! with_api {\n     ($S:ident, $self:ident, $m:ident) => {\n         $m! {\n+            FreeFunctions {\n+                fn drop($self: $S::FreeFunctions);\n+                fn track_env_var(var: &str, value: Option<&str>);\n+            },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);\n                 fn clone($self: &$S::TokenStream) -> $S::TokenStream;"}, {"sha": "eb39025e4c228ac2cab05fd58ff2117c4a69ef1c", "filename": "src/libproc_macro/bridge/server.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fserver.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -8,6 +8,8 @@ use super::client::HandleStore;\n /// Declare an associated item of one of the traits below, optionally\n /// adjusting it (i.e., adding bounds to types and default bodies to methods).\n macro_rules! associated_item {\n+    (type FreeFunctions) =>\n+        (type FreeFunctions: 'static;);\n     (type TokenStream) =>\n         (type TokenStream: 'static + Clone;);\n     (type TokenStreamBuilder) =>"}, {"sha": "c050a3c591cee07b5f44efe26a983463d2e82d85", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -24,6 +24,7 @@\n #![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n+#![feature(inner_deref)]\n #![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n #![feature(restricted_std)]\n@@ -1160,3 +1161,23 @@ impl fmt::Debug for Literal {\n         self.0.fmt(f)\n     }\n }\n+\n+/// Tracked access to environment variables.\n+#[unstable(feature = \"proc_macro_tracked_env\", issue = \"74690\")]\n+pub mod tracked_env {\n+    use std::env::{self, VarError};\n+    use std::ffi::OsStr;\n+\n+    /// Retrieve an environment variable and add it to build dependency info.\n+    /// Build system executing the compiler will know that the variable was accessed during\n+    /// compilation, and will be able to rerun the build when the value of that variable changes.\n+    /// Besides the dependency tracking this function should be equivalent to `env::var` from the\n+    /// standard library, except that the argument must be UTF-8.\n+    #[unstable(feature = \"proc_macro_tracked_env\", issue = \"74690\")]\n+    pub fn var<K: AsRef<OsStr> + AsRef<str>>(key: K) -> Result<String, VarError> {\n+        let key: &str = key.as_ref();\n+        let value = env::var(key);\n+        crate::bridge::client::FreeFunctions::track_env_var(key, value.as_deref().ok());\n+        value\n+    }\n+}"}, {"sha": "881d7b84b70b085969beddb544c8ba0a1a7a7e3a", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -274,6 +274,8 @@ impl ToInternal<rustc_errors::Level> for Level {\n     }\n }\n \n+pub struct FreeFunctions;\n+\n #[derive(Clone)]\n pub struct TokenStreamIter {\n     cursor: tokenstream::Cursor,\n@@ -379,6 +381,7 @@ impl<'a> Rustc<'a> {\n }\n \n impl server::Types for Rustc<'_> {\n+    type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type TokenStreamBuilder = tokenstream::TokenStreamBuilder;\n     type TokenStreamIter = TokenStreamIter;\n@@ -392,6 +395,12 @@ impl server::Types for Rustc<'_> {\n     type Span = Span;\n }\n \n+impl server::FreeFunctions for Rustc<'_> {\n+    fn track_env_var(&mut self, var: &str, value: Option<&str>) {\n+        self.sess.env_depinfo.borrow_mut().insert((Symbol::intern(var), value.map(Symbol::intern)));\n+    }\n+}\n+\n impl server::TokenStream for Rustc<'_> {\n     fn new(&mut self) -> Self::TokenStream {\n         TokenStream::default()"}, {"sha": "25d9a31c2d6fffa7ddef670bfb0f33cc532f3f70", "filename": "src/test/run-make/env-dep-info/Makefile", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2FMakefile?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -1,8 +1,19 @@\n -include ../../run-make-fulldeps/tools.mk\n \n+# FIXME(eddyb) provide `HOST_RUSTC` and `TARGET_RUSTC`\n+# instead of hardcoding them everywhere they're needed.\n+ifeq ($(IS_MUSL_HOST),1)\n+ADDITIONAL_ARGS := $(RUSTFLAGS)\n+endif\n+\n all:\n \tEXISTING_ENV=1 EXISTING_OPT_ENV=1 $(RUSTC) --emit dep-info main.rs\n \t$(CGREP) \"# env-dep:EXISTING_ENV=1\" < $(TMPDIR)/main.d\n \t$(CGREP) \"# env-dep:EXISTING_OPT_ENV=1\" < $(TMPDIR)/main.d\n \t$(CGREP) \"# env-dep:NONEXISTENT_OPT_ENV\" < $(TMPDIR)/main.d\n \t$(CGREP) \"# env-dep:ESCAPE\\nESCAPE\\\\\" < $(TMPDIR)/main.d\n+\t# Proc macro\n+\t$(BARE_RUSTC) $(ADDITIONAL_ARGS) --out-dir $(TMPDIR) macro_def.rs\n+\tEXISTING_PROC_MACRO_ENV=1 $(RUSTC) --emit dep-info macro_use.rs\n+\t$(CGREP) \"# env-dep:EXISTING_PROC_MACRO_ENV=1\" < $(TMPDIR)/macro_use.d\n+\t$(CGREP) \"# env-dep:NONEXISTENT_PROC_MACEO_ENV\" < $(TMPDIR)/macro_use.d"}, {"sha": "e328eae48326dddb1142c3e091e6dcf3092eb608", "filename": "src/test/run-make/env-dep-info/macro_def.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_def.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -0,0 +1,12 @@\n+#![feature(proc_macro_tracked_env)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn access_env_vars(_: TokenStream) -> TokenStream {\n+    let _ = tracked_env::var(\"EXISTING_PROC_MACRO_ENV\");\n+    let _ = tracked_env::var(\"NONEXISTENT_PROC_MACEO_ENV\");\n+    TokenStream::new()\n+}"}, {"sha": "2f5267471fc82fc1731de40f9d10a4ebbc71c249", "filename": "src/test/run-make/env-dep-info/macro_use.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fenv-dep-info%2Fmacro_use.rs?ref=1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "patch": "@@ -0,0 +1,6 @@\n+#[macro_use]\n+extern crate macro_def;\n+\n+access_env_vars!();\n+\n+fn main() {}"}]}