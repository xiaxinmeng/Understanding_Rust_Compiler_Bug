{"sha": "46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "node_id": "C_kwDOAAsO6NoAKDQ2ZjZlMzlhYzYxMjQxNzI5YjgxNjcxZWQ4ZmI5MTdiOGJiMmU5ZTU", "commit": {"author": {"name": "raffimolero", "email": "49224759+raffimolero@users.noreply.github.com", "date": "2022-12-12T04:28:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-12T04:28:40Z"}, "message": "add assert messages if chunks/windows are length 0", "tree": {"sha": "d575d6ba7efd8aa22e77704e2c49403bbca4b523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d575d6ba7efd8aa22e77704e2c49403bbca4b523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjlq34CRBK7hj4Ov3rIwAApOMIAECURX9rsnSLAsWD/gU8S3/3\nnhSp/NbGoQETaSpsJjGZUitpeb0y5Iyg4v5wn5LM72Ga3r/ax6TOK94Seb5+S0LK\nNp24La2b/jawceEBC7HPg/eLO/Ex0gd4HfjePBEn/z9Z/5Te6rfGE67jdSfIAqnV\nzpP8OuxFIMs9QBR/6JItB9KtfN8CqdOau3f1uCbPnkW6GdYh+gtNaSCcPIJIqp2B\nr1Mv7jQP+/eoJUWGa3PT99Bt+Eyn+9FjyTPknWMA0X5DFYSSvetttd2MinJXyjZ8\nOvwQxe5kIeQcBFUaz2yBTs6468D9SmsBRsvtAjUDSP/gvRsmNBTO/hTYctZQFj0=\n=nHYu\n-----END PGP SIGNATURE-----\n", "payload": "tree d575d6ba7efd8aa22e77704e2c49403bbca4b523\nparent ee6533d7408f1447c028025c883a34c904d25ba4\nauthor raffimolero <49224759+raffimolero@users.noreply.github.com> 1670819320 +0800\ncommitter GitHub <noreply@github.com> 1670819320 +0800\n\nadd assert messages if chunks/windows are length 0"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "html_url": "https://github.com/rust-lang/rust/commit/46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46f6e39ac61241729b81671ed8fb917b8bb2e9e5/comments", "author": {"login": "raffimolero", "id": 49224759, "node_id": "MDQ6VXNlcjQ5MjI0NzU5", "avatar_url": "https://avatars.githubusercontent.com/u/49224759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raffimolero", "html_url": "https://github.com/raffimolero", "followers_url": "https://api.github.com/users/raffimolero/followers", "following_url": "https://api.github.com/users/raffimolero/following{/other_user}", "gists_url": "https://api.github.com/users/raffimolero/gists{/gist_id}", "starred_url": "https://api.github.com/users/raffimolero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raffimolero/subscriptions", "organizations_url": "https://api.github.com/users/raffimolero/orgs", "repos_url": "https://api.github.com/users/raffimolero/repos", "events_url": "https://api.github.com/users/raffimolero/events{/privacy}", "received_events_url": "https://api.github.com/users/raffimolero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6533d7408f1447c028025c883a34c904d25ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6533d7408f1447c028025c883a34c904d25ba4", "html_url": "https://github.com/rust-lang/rust/commit/ee6533d7408f1447c028025c883a34c904d25ba4"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "9e89c9f832fa45114583e5638900671729fc718e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46f6e39ac61241729b81671ed8fb917b8bb2e9e5/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f6e39ac61241729b81671ed8fb917b8bb2e9e5/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "patch": "@@ -893,7 +893,7 @@ impl<T> [T] {\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -935,7 +935,7 @@ impl<T> [T] {\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1006,7 +1006,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1037,7 +1037,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1076,7 +1076,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1155,7 +1155,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1192,7 +1192,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1233,7 +1233,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1265,7 +1265,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n         ArrayWindows::new(self)\n     }\n "}]}