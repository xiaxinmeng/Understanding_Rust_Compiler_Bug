{"sha": "5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTFkMmU4MGYzM2UzMzU1YzQyZWFlZmZhNGM0OWZlMjAxNGE1Zjc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-31T00:47:09Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-31T00:47:09Z"}, "message": "Merge pull request #892 from marcusklaas/closed-ranges\n\nFormat closed ranges", "tree": {"sha": "8f920315c83d0fd3c803a3a0f7a39114539515a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f920315c83d0fd3c803a3a0f7a39114539515a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "html_url": "https://github.com/rust-lang/rust/commit/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19768da5c97c108a05e6f545b73ba4b76d1b1788", "url": "https://api.github.com/repos/rust-lang/rust/commits/19768da5c97c108a05e6f545b73ba4b76d1b1788", "html_url": "https://github.com/rust-lang/rust/commit/19768da5c97c108a05e6f545b73ba4b76d1b1788"}, {"sha": "f94164611880d85f26accf8b422ee2e7609d81dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f94164611880d85f26accf8b422ee2e7609d81dd", "html_url": "https://github.com/rust-lang/rust/commit/f94164611880d85f26accf8b422ee2e7609d81dd"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "d9403ecd8b29a098fa5821ee93a55340082376a6", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "patch": "@@ -6,7 +6,7 @@ dependencies = [\n  \"env_logger 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.30.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -39,7 +39,7 @@ version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -77,20 +77,26 @@ dependencies = [\n  \"libc 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"mempool\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex\"\n-version = \"0.1.58\"\n+version = \"0.1.60\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mempool 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.3.0\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]"}, {"sha": "a0274e4db8a5b59473e15ddc48e3a9555fb60ea6", "filename": "src/expr.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "patch": "@@ -176,48 +176,48 @@ impl Rewrite for ast::Expr {\n             ast::ExprKind::Cast(ref expr, ref ty) => {\n                 rewrite_pair(&**expr, &**ty, \"\", \" as \", \"\", context, width, offset)\n             }\n-            // TODO(#848): Handle type ascription; rust tracking issue\n-            //   https://github.com/rust-lang/rust/issues/23416\n-            ast::ExprKind::Type(_, _) => unimplemented!(),\n             ast::ExprKind::Index(ref expr, ref index) => {\n                 rewrite_pair(&**expr, &**index, \"\", \"[\", \"]\", context, width, offset)\n             }\n             ast::ExprKind::Repeat(ref expr, ref repeats) => {\n                 rewrite_pair(&**expr, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n             }\n-            // TODO(#890): Handle closed ranges; rust tracking issue\n-            //   https://github.com/rust-lang/rust/issues/28237\n-            ast::ExprKind::Range(Some(ref lhs), Some(ref rhs), _range_limits) => {\n-                rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, width, offset)\n-            }\n-            ast::ExprKind::Range(None, Some(ref rhs), _range_limits) => {\n-                rewrite_unary_prefix(context, \"..\", &**rhs, width, offset)\n-            }\n-            ast::ExprKind::Range(Some(ref lhs), None, _range_limits) => {\n-                Some(format!(\"{}..\",\n-                             try_opt!(lhs.rewrite(context,\n-                                                  try_opt!(width.checked_sub(2)),\n-                                                  offset))))\n-            }\n-            ast::ExprKind::Range(None, None, _range_limits) => {\n-                if width >= 2 {\n-                    Some(\"..\".into())\n-                } else {\n-                    None\n+            ast::ExprKind::Range(ref lhs, ref rhs, limits) => {\n+                let delim = match limits {\n+                    ast::RangeLimits::HalfOpen => \"..\",\n+                    ast::RangeLimits::Closed => \"...\",\n+                };\n+\n+                match (lhs.as_ref().map(|x| &**x), rhs.as_ref().map(|x| &**x)) {\n+                    (Some(ref lhs), Some(ref rhs)) => {\n+                        rewrite_pair(&**lhs, &**rhs, \"\", delim, \"\", context, width, offset)\n+                    }\n+                    (None, Some(ref rhs)) => {\n+                        rewrite_unary_prefix(context, delim, &**rhs, width, offset)\n+                    }\n+                    (Some(ref lhs), None) => {\n+                        Some(format!(\"{}{}\",\n+                                     try_opt!(lhs.rewrite(context,\n+                                                          try_opt!(width.checked_sub(delim.len())),\n+                                                          offset)),\n+                                     delim))\n+                    }\n+                    (None, None) => wrap_str(delim.into(), context.config.max_width, width, offset),\n                 }\n             }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n             ast::ExprKind::InPlace(..) |\n-            ast::ExprKind::InlineAsm(..) => {\n+            ast::ExprKind::InlineAsm(..) |\n+            // TODO(#848): Handle type ascription\n+            ast::ExprKind::Type(_, _) |\n+            // TODO(#867): Handle try shorthand\n+            ast::ExprKind::Try(_) => {\n                 wrap_str(context.snippet(self.span),\n                          context.config.max_width,\n                          width,\n                          offset)\n             }\n-            // TODO(#867): Handle type ascription; rust tracking issue\n-            //   https://github.com/rust-lang/rust/issues/31436\n-            ast::ExprKind::Try(_) => unimplemented!(),\n         };\n         result.and_then(|res| recover_comment_removed(res, self.span, context, width, offset))\n     }"}, {"sha": "16953a932a3afb50879410fcc683cf1c21b85220", "filename": "tests/source/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "patch": "@@ -244,3 +244,15 @@ fn issue767() {\n     } else if let false = false {\n     }\n }\n+\n+fn ranges() {\n+    let x = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa .. bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let y = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ... bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let z = ... x ;\n+    let infi_range_2 = ... ;\n+\n+    a ... b\n+\n+    // the expr below won't compile for some reason...\n+    // let a = 0 ... ;\n+}"}, {"sha": "e9a051711f536e6e973198c0f9666e29429bfa7f", "filename": "tests/target/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=5b11d2e80f33e3355c42eaeffa4c49fe2014a5f7", "patch": "@@ -267,3 +267,16 @@ fn issue767() {\n     } else if let false = false {\n     }\n }\n+\n+fn ranges() {\n+    let x = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let y =\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+    let z = ...x;\n+    let infi_range_2 = ...;\n+\n+    a...b\n+\n+    // the expr below won't compile for some reason...\n+    // let a = 0 ... ;\n+}"}]}