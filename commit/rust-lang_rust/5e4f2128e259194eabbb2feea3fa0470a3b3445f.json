{"sha": "5e4f2128e259194eabbb2feea3fa0470a3b3445f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNGYyMTI4ZTI1OTE5NGVhYmJiMmZlZWEzZmEwNDcwYTNiMzQ0NWY=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-15T19:26:23Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-28T21:13:45Z"}, "message": "impl Pattern for char array", "tree": {"sha": "7f7e5af83121d05f9ccaad7c1b53247e54537567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7e5af83121d05f9ccaad7c1b53247e54537567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e4f2128e259194eabbb2feea3fa0470a3b3445f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4f2128e259194eabbb2feea3fa0470a3b3445f", "html_url": "https://github.com/rust-lang/rust/commit/5e4f2128e259194eabbb2feea3fa0470a3b3445f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e4f2128e259194eabbb2feea3fa0470a3b3445f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d6692f6c1cebd6c56a67eb21f6aae26c12a145", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d6692f6c1cebd6c56a67eb21f6aae26c12a145", "html_url": "https://github.com/rust-lang/rust/commit/99d6692f6c1cebd6c56a67eb21f6aae26c12a145"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "90e5fbdf08e5bd9aee5f70c7692dc89f7029130f", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e4f2128e259194eabbb2feea3fa0470a3b3445f/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4f2128e259194eabbb2feea3fa0470a3b3445f/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=5e4f2128e259194eabbb2feea3fa0470a3b3445f", "patch": "@@ -22,6 +22,8 @@\n //! assert_eq!(s.find(\"you\"), Some(4));\n //! // char pattern\n //! assert_eq!(s.find('n'), Some(2));\n+//! // array of chars pattern\n+//! assert_eq!(s.find(&['a', 'e', 'i', 'o', 'u']), Some(1));\n //! // slice of chars pattern\n //! assert_eq!(s.find(&['a', 'e', 'i', 'o', 'u'][..]), Some(1));\n //! // closure pattern\n@@ -79,6 +81,11 @@ use crate::slice::memchr;\n /// assert_eq!(\"abaaa\".find('b'), Some(1));\n /// assert_eq!(\"abaaa\".find('c'), None);\n ///\n+/// // &[char; N]\n+/// assert_eq!(\"ab\".find(&['b', 'a']), Some(0));\n+/// assert_eq!(\"abaaa\".find(&['a', 'z']), Some(0));\n+/// assert_eq!(\"abaaa\".find(&['c', 'd']), None);\n+///\n /// // &[char]\n /// assert_eq!(\"ab\".find(&['b', 'a'][..]), Some(0));\n /// assert_eq!(\"abaaa\".find(&['a', 'z'][..]), Some(0));\n@@ -601,6 +608,13 @@ where\n     }\n }\n \n+impl<const N: usize> MultiCharEq for &[char; N] {\n+    #[inline]\n+    fn matches(&mut self, c: char) -> bool {\n+        self.iter().any(|&m| m == c)\n+    }\n+}\n+\n impl MultiCharEq for &[char] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n@@ -752,6 +766,32 @@ macro_rules! searcher_methods {\n     };\n }\n \n+/// Associated type for `<[char; N] as Pattern<'a>>::Searcher`.\n+#[derive(Clone, Debug)]\n+pub struct CharArraySearcher<'a, 'b, const N: usize>(\n+    <MultiCharEqPattern<&'b [char; N]> as Pattern<'a>>::Searcher,\n+);\n+\n+/// Searches for chars that are equal to any of the [`char`]s in the array.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n+/// ```\n+impl<'a, 'b, const N: usize> Pattern<'a> for &'b [char; N] {\n+    pattern_methods!(CharArraySearcher<'a, 'b, N>, MultiCharEqPattern, CharArraySearcher);\n+}\n+\n+unsafe impl<'a, 'b, const N: usize> Searcher<'a> for CharArraySearcher<'a, 'b, N> {\n+    searcher_methods!(forward);\n+}\n+\n+unsafe impl<'a, 'b, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, 'b, N> {\n+    searcher_methods!(reverse);\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Impl for &[char]\n /////////////////////////////////////////////////////////////////////////////"}]}