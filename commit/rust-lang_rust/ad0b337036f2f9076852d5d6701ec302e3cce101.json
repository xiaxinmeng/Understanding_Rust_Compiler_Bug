{"sha": "ad0b337036f2f9076852d5d6701ec302e3cce101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMGIzMzcwMzZmMmY5MDc2ODUyZDVkNjcwMWVjMzAyZTNjY2UxMDE=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-25T05:30:56Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-25T19:55:26Z"}, "message": "Add is_zero method to Zero", "tree": {"sha": "c775173b7fd613916fd51f4e068aeea4d5864021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c775173b7fd613916fd51f4e068aeea4d5864021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad0b337036f2f9076852d5d6701ec302e3cce101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0b337036f2f9076852d5d6701ec302e3cce101", "html_url": "https://github.com/rust-lang/rust/commit/ad0b337036f2f9076852d5d6701ec302e3cce101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad0b337036f2f9076852d5d6701ec302e3cce101/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac69ee418b495a25ff5019d2fd08ff97a4cb34e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac69ee418b495a25ff5019d2fd08ff97a4cb34e3", "html_url": "https://github.com/rust-lang/rust/commit/ac69ee418b495a25ff5019d2fd08ff97a4cb34e3"}], "stats": {"total": 123, "additions": 67, "deletions": 56}, "files": [{"sha": "c03761c2322edcf4e916ef5943c0d2564690cd33", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -12,7 +12,7 @@\n \n use from_str;\n use libc::c_int;\n-use num::strconv;\n+use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use cmath::c_float_targ_consts::*;\n@@ -154,12 +154,6 @@ pub fn gt(x: f32, y: f32) -> bool { return x > y; }\n // FIXME (#1999): replace the predicates below with llvm intrinsics or\n // calls to the libmath macros in the rust runtime for performance.\n \n-/// Returns true if `x` is a zero number (positive or negative zero)\n-#[inline(always)]\n-pub fn is_zero(x: f32) -> bool {\n-    return x == 0.0f32 || x == -0.0f32;\n-}\n-\n /// Returns true if `x`is an infinite number\n #[inline(always)]\n pub fn is_infinite(x: f32) -> bool {\n@@ -245,12 +239,16 @@ impl Ord for f32 {\n     fn gt(&self, other: &f32) -> bool { (*self) > (*other) }\n }\n \n-impl num::Zero for f32 {\n+impl Zero for f32 {\n     #[inline(always)]\n     fn zero() -> f32 { 0.0 }\n+\n+    /// Returns true if the number is equal to either `0.0` or `-0.0`\n+    #[inline(always)]\n+    fn is_zero(&self) -> bool { *self == 0.0 || *self == -0.0 }\n }\n \n-impl num::One for f32 {\n+impl One for f32 {\n     #[inline(always)]\n     fn one() -> f32 { 1.0 }\n }"}, {"sha": "ca6416be7396ccf5aa7cb702cd9cd853c0e6506c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -12,7 +12,7 @@\n \n use from_str;\n use libc::c_int;\n-use num::strconv;\n+use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use cmath::c_double_targ_consts::*;\n@@ -174,12 +174,6 @@ pub fn ge(x: f64, y: f64) -> bool { return x >= y; }\n #[inline(always)]\n pub fn gt(x: f64, y: f64) -> bool { return x > y; }\n \n-/// Returns true if `x` is a zero number (positive or negative zero)\n-#[inline(always)]\n-pub fn is_zero(x: f64) -> bool {\n-    return x == 0.0f64 || x == -0.0f64;\n-}\n-\n /// Returns true if `x`is an infinite number\n #[inline(always)]\n pub fn is_infinite(x: f64) -> bool {\n@@ -266,12 +260,16 @@ impl Ord for f64 {\n     fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n \n-impl num::Zero for f64 {\n+impl Zero for f64 {\n     #[inline(always)]\n     fn zero() -> f64 { 0.0 }\n+\n+    /// Returns true if the number is equal to either `0.0` or `-0.0`\n+    #[inline(always)]\n+    fn is_zero(&self) -> bool { *self == 0.0 || *self == -0.0 }\n }\n \n-impl num::One for f64 {\n+impl One for f64 {\n     #[inline(always)]\n     fn one() -> f64 { 1.0 }\n }"}, {"sha": "248bc2a4d563c7c33d6297e86149e39c46aa8e58", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -22,7 +22,7 @@\n \n use from_str;\n use libc::c_int;\n-use num::strconv;\n+use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use f64::{add, sub, mul, quot, rem, lt, le, eq, ne, ge, gt};\n@@ -337,8 +337,6 @@ pub fn pow_with_uint(base: uint, pow: uint) -> float {\n     return total;\n }\n \n-#[inline(always)]\n-pub fn is_zero(x: float) -> bool { f64::is_zero(x as f64) }\n #[inline(always)]\n pub fn is_infinite(x: float) -> bool { f64::is_infinite(x as f64) }\n #[inline(always)]\n@@ -393,12 +391,16 @@ impl Ord for float {\n     fn gt(&self, other: &float) -> bool { (*self) > (*other) }\n }\n \n-impl num::Zero for float {\n+impl Zero for float {\n     #[inline(always)]\n     fn zero() -> float { 0.0 }\n+\n+    /// Returns true if the number is equal to either `0.0` or `-0.0`\n+    #[inline(always)]\n+    fn is_zero(&self) -> bool { *self == 0.0 || *self == -0.0 }\n }\n \n-impl num::One for float {\n+impl One for float {\n     #[inline(always)]\n     fn one() -> float { 1.0 }\n }\n@@ -867,11 +869,11 @@ mod tests {\n         }\n         // note: -0 == 0, hence these slightly more complex tests\n         match from_str(~\"-0\") {\n-            Some(v) if is_zero(v) => assert!(v.is_negative()),\n+            Some(v) if v.is_zero() => assert!(v.is_negative()),\n             _ => fail!()\n         }\n         match from_str(~\"0\") {\n-            Some(v) if is_zero(v) => assert!(v.is_positive()),\n+            Some(v) if v.is_zero() => assert!(v.is_positive()),\n             _ => fail!()\n         }\n \n@@ -914,11 +916,11 @@ mod tests {\n         }\n         // note: -0 == 0, hence these slightly more complex tests\n         match from_str_hex(~\"-0\") {\n-            Some(v) if is_zero(v) => assert!(v.is_negative()),\n+            Some(v) if v.is_zero() => assert!(v.is_negative()),\n             _ => fail!()\n         }\n         match from_str_hex(~\"0\") {\n-            Some(v) if is_zero(v) => assert!(v.is_positive()),\n+            Some(v) if v.is_zero() => assert!(v.is_positive()),\n             _ => fail!()\n         }\n         assert_eq!(from_str_hex(~\"e\"), Some(14.));"}, {"sha": "b53bf876f777f6262ee2cd11dd5ec3c9ebcf937a", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -12,7 +12,7 @@ use T = self::inst::T;\n \n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n-use num::strconv;\n+use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use cmp::{min, max};\n@@ -152,12 +152,15 @@ impl Eq for T {\n     fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl num::Zero for T {\n+impl Zero for T {\n     #[inline(always)]\n     fn zero() -> T { 0 }\n+\n+    #[inline(always)]\n+    fn is_zero(&self) -> bool { *self == 0 }\n }\n \n-impl num::One for T {\n+impl One for T {\n     #[inline(always)]\n     fn one() -> T { 1 }\n }"}, {"sha": "19d5340527df6ca182ff373105cf447394ccbabf", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -37,13 +37,12 @@ pub trait IntConvertible {\n }\n \n pub trait Zero {\n-    // FIXME (#5527): These should be associated constants\n-    fn zero() -> Self;\n+    fn zero() -> Self;      // FIXME (#5527): This should be an associated constant\n+    fn is_zero(&self) -> bool;\n }\n \n pub trait One {\n-    // FIXME (#5527): These should be associated constants\n-    fn one() -> Self;\n+    fn one() -> Self;       // FIXME (#5527): This should be an associated constant\n }\n \n pub trait Signed: Num"}, {"sha": "803d034c919213ce8f43e67d5558b581d75383f8", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -13,7 +13,7 @@ use T_SIGNED = self::inst::T_SIGNED;\n \n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n-use num::strconv;\n+use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use cmp::{min, max};\n@@ -118,12 +118,15 @@ impl Eq for T {\n     fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl num::Zero for T {\n+impl Zero for T {\n     #[inline(always)]\n     fn zero() -> T { 0 }\n+\n+    #[inline(always)]\n+    fn is_zero(&self) -> bool { *self == 0 }\n }\n \n-impl num::One for T {\n+impl One for T {\n     #[inline(always)]\n     fn one() -> T { 1 }\n }"}, {"sha": "214bb0be0ed2876d5170710f9ae238bedf687e50", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -148,10 +148,12 @@ impl Shr<uint, BigUint> for BigUint {\n \n impl Zero for BigUint {\n     fn zero() -> BigUint { BigUint::new(~[]) }\n+\n+    fn is_zero(&self) -> bool { self.data.is_empty() }\n }\n \n impl One for BigUint {\n-    pub fn one() -> BigUint { BigUint::new(~[1]) }\n+    fn one() -> BigUint { BigUint::new(~[1]) }\n }\n \n impl Unsigned for BigUint {}\n@@ -310,7 +312,7 @@ impl ToStrRadix for BigUint {\n                 result += [m0.to_uint() as BigDigit];\n                 m = d;\n             }\n-            if m.is_not_zero() {\n+            if !m.is_zero() {\n                 result += [m.to_uint() as BigDigit];\n             }\n             return result;\n@@ -470,10 +472,6 @@ pub impl BigUint {\n         self.div_mod(other)\n     }\n \n-    fn is_zero(&self) -> bool { self.data.is_empty() }\n-\n-    fn is_not_zero(&self) -> bool { !self.data.is_empty() }\n-\n     fn to_uint(&self) -> uint {\n         match self.data.len() {\n             0 => 0,\n@@ -684,6 +682,8 @@ impl Zero for BigInt {\n     pub fn zero() -> BigInt {\n         BigInt::from_biguint(Zero, Zero::zero())\n     }\n+\n+    fn is_zero(&self) -> bool { self.sign == Zero }\n }\n \n impl One for BigInt {\n@@ -909,8 +909,6 @@ pub impl BigInt {\n \n     fn is_zero(&self) -> bool { self.sign == Zero }\n \n-    fn is_not_zero(&self) -> bool { self.sign != Zero }\n-\n     fn to_uint(&self) -> uint {\n         match self.sign {\n             Plus  => self.data.to_uint(),\n@@ -1212,10 +1210,10 @@ mod biguint_tests {\n             let b = BigUint::from_slice(bVec);\n             let c = BigUint::from_slice(cVec);\n \n-            if a.is_not_zero() {\n+            if !a.is_zero() {\n                 assert!(c.quot_rem(&a) == (b, Zero::zero()));\n             }\n-            if b.is_not_zero() {\n+            if !b.is_zero() {\n                 assert!(c.quot_rem(&b) == (a, Zero::zero()));\n             }\n         }\n@@ -1227,7 +1225,7 @@ mod biguint_tests {\n             let c = BigUint::from_slice(cVec);\n             let d = BigUint::from_slice(dVec);\n \n-            if b.is_not_zero() { assert!(a.quot_rem(&b) == (c, d)); }\n+            if !b.is_zero() { assert!(a.quot_rem(&b) == (c, d)); }\n         }\n     }\n \n@@ -1577,7 +1575,7 @@ mod bigint_tests {\n     fn test_div_mod() {\n         fn check_sub(a: &BigInt, b: &BigInt, ans_d: &BigInt, ans_m: &BigInt) {\n             let (d, m) = a.div_mod(b);\n-            if m.is_not_zero() {\n+            if !m.is_zero() {\n                 assert!(m.sign == b.sign);\n             }\n             assert!(m.abs() <= b.abs());\n@@ -1606,8 +1604,8 @@ mod bigint_tests {\n             let b = BigInt::from_slice(Plus, bVec);\n             let c = BigInt::from_slice(Plus, cVec);\n \n-            if a.is_not_zero() { check(&c, &a, &b, &Zero::zero()); }\n-            if b.is_not_zero() { check(&c, &b, &a, &Zero::zero()); }\n+            if !a.is_zero() { check(&c, &a, &b, &Zero::zero()); }\n+            if !b.is_zero() { check(&c, &b, &a, &Zero::zero()); }\n         }\n \n         for quot_rem_quadruples.each |elm| {\n@@ -1617,7 +1615,7 @@ mod bigint_tests {\n             let c = BigInt::from_slice(Plus, cVec);\n             let d = BigInt::from_slice(Plus, dVec);\n \n-            if b.is_not_zero() {\n+            if !b.is_zero() {\n                 check(&a, &b, &c, &d);\n             }\n         }\n@@ -1628,7 +1626,7 @@ mod bigint_tests {\n     fn test_quot_rem() {\n         fn check_sub(a: &BigInt, b: &BigInt, ans_q: &BigInt, ans_r: &BigInt) {\n             let (q, r) = a.quot_rem(b);\n-            if r.is_not_zero() {\n+            if !r.is_zero() {\n                 assert!(r.sign == a.sign);\n             }\n             assert!(r.abs() <= b.abs());\n@@ -1649,8 +1647,8 @@ mod bigint_tests {\n             let b = BigInt::from_slice(Plus, bVec);\n             let c = BigInt::from_slice(Plus, cVec);\n \n-            if a.is_not_zero() { check(&c, &a, &b, &Zero::zero()); }\n-            if b.is_not_zero() { check(&c, &b, &a, &Zero::zero()); }\n+            if !a.is_zero() { check(&c, &a, &b, &Zero::zero()); }\n+            if !b.is_zero() { check(&c, &b, &a, &Zero::zero()); }\n         }\n \n         for quot_rem_quadruples.each |elm| {\n@@ -1660,7 +1658,7 @@ mod bigint_tests {\n             let c = BigInt::from_slice(Plus, cVec);\n             let d = BigInt::from_slice(Plus, dVec);\n \n-            if b.is_not_zero() {\n+            if !b.is_zero() {\n                 check(&a, &b, &c, &d);\n             }\n         }"}, {"sha": "fc17cbc678ea7e3296eda1f17d1130c0c104af07", "filename": "src/libstd/num/complex.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcomplex.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -125,6 +125,11 @@ impl<T: Copy + Num> Zero for Cmplx<T> {\n     fn zero() -> Cmplx<T> {\n         Cmplx::new(Zero::zero(), Zero::zero())\n     }\n+\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        *self == Zero::zero()\n+    }\n }\n \n impl<T: Copy + Num> One for Cmplx<T> {"}, {"sha": "93b63593a5eb0c33b76afdd9e2467da54c8aea42", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0b337036f2f9076852d5d6701ec302e3cce101/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=ad0b337036f2f9076852d5d6701ec302e3cce101", "patch": "@@ -191,6 +191,11 @@ impl<T: Copy + Num + Ord>\n     fn zero() -> Ratio<T> {\n         Ratio::new_raw(Zero::zero(), One::one())\n     }\n+\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        *self == Zero::zero()\n+    }\n }\n \n impl<T: Copy + Num + Ord>"}]}