{"sha": "855c99ea758186096a68a8c13edeb0d89105a410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWM5OWVhNzU4MTg2MDk2YTY4YThjMTNlZGViMGQ4OTEwNWE0MTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T23:32:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-20T23:44:56Z"}, "message": "Some tests for passing and returning structures by value on x64. Close #1402. Close #1970.", "tree": {"sha": "7bfdc8876d35a42a9f4bfadbce36c2d5ed441419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfdc8876d35a42a9f4bfadbce36c2d5ed441419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855c99ea758186096a68a8c13edeb0d89105a410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855c99ea758186096a68a8c13edeb0d89105a410", "html_url": "https://github.com/rust-lang/rust/commit/855c99ea758186096a68a8c13edeb0d89105a410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855c99ea758186096a68a8c13edeb0d89105a410/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5087aa64b3f8263b61431fbfc323fcaa356bc5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5087aa64b3f8263b61431fbfc323fcaa356bc5b", "html_url": "https://github.com/rust-lang/rust/commit/f5087aa64b3f8263b61431fbfc323fcaa356bc5b"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "ee6db7dcf867e089040dc7fca8395c3409f101aa", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/855c99ea758186096a68a8c13edeb0d89105a410/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/855c99ea758186096a68a8c13edeb0d89105a410/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=855c99ea758186096a68a8c13edeb0d89105a410", "patch": "@@ -200,6 +200,43 @@ rand_free(randctx *rctx) {\n     task->free(rctx);\n }\n \n+\n+/* Debug helpers strictly to verify ABI conformance.\n+ *\n+ * FIXME: move these into a testcase when the testsuite\n+ * understands how to have explicit C files included.\n+ */\n+\n+struct quad {\n+    uint64_t a;\n+    uint64_t b;\n+    uint64_t c;\n+    uint64_t d;\n+};\n+\n+struct floats {\n+    double a;\n+    uint8_t b;\n+    double c;\n+};\n+\n+extern \"C\" quad\n+debug_abi_1(quad q) {\n+    quad qq = { q.c + 1,\n+                q.d - 1,\n+                q.a + 1,\n+                q.b - 1 };\n+    return qq;\n+}\n+\n+extern \"C\" floats\n+debug_abi_2(floats f) {\n+    floats ff = { f.c + 1.0,\n+                  0xff,\n+                  f.a - 1.0 };\n+    return ff;\n+}\n+\n /* Debug builtins for std::dbg. */\n \n static void"}, {"sha": "0bc0fddaca706f8b0ae19757553fb695c85d7e3f", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855c99ea758186096a68a8c13edeb0d89105a410/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/855c99ea758186096a68a8c13edeb0d89105a410/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=855c99ea758186096a68a8c13edeb0d89105a410", "patch": "@@ -7,6 +7,8 @@ debug_ptrcast\n debug_tag\n debug_tydesc\n debug_get_stk_seg\n+debug_abi_1\n+debug_abi_2\n get_port_id\n get_task_id\n get_time"}, {"sha": "5aa6e56504d077a0eba14a71018c7f3a38477a4b", "filename": "src/test/run-pass/struct-return.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/855c99ea758186096a68a8c13edeb0d89105a410/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855c99ea758186096a68a8c13edeb0d89105a410/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=855c99ea758186096a68a8c13edeb0d89105a410", "patch": "@@ -0,0 +1,39 @@\n+\n+type quad = { a: u64, b: u64, c: u64, d: u64 };\n+type floats = { a: f64, b: u8, c: f64 };\n+\n+#[nolink]\n+native mod rustrt {\n+    fn debug_abi_1(++q: quad) -> quad;\n+    fn debug_abi_2(++f: floats) -> floats;\n+}\n+\n+fn main() {\n+\n+    // First check\n+    let q = { a: 0xaaaa_aaaa_aaaa_aaaa_u64,\n+             b: 0xbbbb_bbbb_bbbb_bbbb_u64,\n+             c: 0xcccc_cccc_cccc_cccc_u64,\n+             d: 0xdddd_dddd_dddd_dddd_u64 };\n+    let qq = rustrt::debug_abi_1(q);\n+    #error(\"a: %x\", qq.a as uint);\n+    #error(\"b: %x\", qq.b as uint);\n+    #error(\"c: %x\", qq.c as uint);\n+    #error(\"d: %x\", qq.d as uint);\n+    assert qq.a == q.c + 1u64;\n+    assert qq.b == q.d - 1u64;\n+    assert qq.c == q.a + 1u64;\n+    assert qq.d == q.b - 1u64;\n+\n+    // Second check\n+    let f = { a: 1.234567890e-15_f64,\n+             b: 0b_1010_1010_u8,\n+             c: 1.0987654321e-15_f64 };\n+    let ff = rustrt::debug_abi_2(f);\n+    #error(\"a: %f\", ff.a as float);\n+    #error(\"b: %u\", ff.b as uint);\n+    #error(\"c: %f\", ff.c as float);\n+    assert ff.a == f.c + 1.0;\n+    assert ff.b == 0xff_u8;\n+    assert ff.c == f.a - 1.0;\n+}\n\\ No newline at end of file"}]}