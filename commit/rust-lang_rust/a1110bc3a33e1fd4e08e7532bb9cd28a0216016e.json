{"sha": "a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTEwYmMzYTMzZTFmZDRlMDhlNzUzMmJiOWNkMjhhMDIxNjAxNmU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T18:07:09Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T18:27:33Z"}, "message": "Fix off-by-one error in default-type-parameter checking\n\nFixes #18183", "tree": {"sha": "6c24950d448c0db2fba9417c12ddf9ab53bf8d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c24950d448c0db2fba9417c12ddf9ab53bf8d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "html_url": "https://github.com/rust-lang/rust/commit/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e/comments", "author": null, "committer": null, "parents": [{"sha": "40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "html_url": "https://github.com/rust-lang/rust/commit/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "d4f04987a812fd6fc99f338d15ab149c5dcddd8d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "patch": "@@ -1860,6 +1860,29 @@ fn ty_generics<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     result\n }\n \n+fn convert_default_type_parameter<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                            path: &P<ast::Ty>,\n+                                            space: ParamSpace,\n+                                            index: u32)\n+                                            -> Ty<'tcx>\n+{\n+    let ty = ast_ty_to_ty(&ccx.icx(&()), &ExplicitRscope, &path);\n+\n+    for leaf_ty in ty.walk() {\n+        if let ty::TyParam(p) = leaf_ty.sty {\n+            if p.space == space && p.idx >= index {\n+                span_err!(ccx.tcx.sess, path.span, E0128,\n+                          \"type parameters with a default cannot use \\\n+                           forward declared identifiers\");\n+\n+                return ccx.tcx.types.err\n+            }\n+        }\n+    }\n+\n+    ty\n+}\n+\n fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                              ast_generics: &ast::Generics,\n                                              space: ParamSpace,\n@@ -1874,25 +1897,9 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         None => { }\n     }\n \n-    let default = match param.default {\n-        None => None,\n-        Some(ref path) => {\n-            let ty = ast_ty_to_ty(&ccx.icx(&()), &ExplicitRscope, &**path);\n-            let cur_idx = index;\n-\n-            for leaf_ty in ty.walk() {\n-                if let ty::TyParam(p) = leaf_ty.sty {\n-                    if p.idx > cur_idx {\n-                        span_err!(tcx.sess, path.span, E0128,\n-                                  \"type parameters with a default cannot use \\\n-                                   forward declared identifiers\");\n-                    }\n-                }\n-            }\n-\n-            Some(ty)\n-        }\n-    };\n+    let default = param.default.as_ref().map(\n+        |def| convert_default_type_parameter(ccx, def, space, index)\n+    );\n \n     let object_lifetime_default =\n         compute_object_lifetime_default(ccx, param.id,"}, {"sha": "e6f3a2bdd33ad127a14960d350de8bba749b62af", "filename": "src/test/compile-fail/issue-18183.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1110bc3a33e1fd4e08e7532bb9cd28a0216016e/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs?ref=a1110bc3a33e1fd4e08e7532bb9cd28a0216016e", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo<Bar=Bar>; //~ ERROR E0128\n+pub struct Baz(Foo);\n+fn main() {}"}]}