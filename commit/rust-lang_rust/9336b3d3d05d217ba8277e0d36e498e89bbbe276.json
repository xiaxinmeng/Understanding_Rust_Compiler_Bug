{"sha": "9336b3d3d05d217ba8277e0d36e498e89bbbe276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzZiM2QzZDA1ZDIxN2JhODI3N2UwZDM2ZTQ5OGU4OWJiYmUyNzY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-05T11:02:17Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-03T13:55:29Z"}, "message": "Use `UseSpans` in cannot move errors", "tree": {"sha": "8907d7d76a3d5d41a5a02af5d858b9d13fe07ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8907d7d76a3d5d41a5a02af5d858b9d13fe07ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9336b3d3d05d217ba8277e0d36e498e89bbbe276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9336b3d3d05d217ba8277e0d36e498e89bbbe276", "html_url": "https://github.com/rust-lang/rust/commit/9336b3d3d05d217ba8277e0d36e498e89bbbe276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9336b3d3d05d217ba8277e0d36e498e89bbbe276/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e86a5a490427bfc0b29fa5ebaaaac9ff1375f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e86a5a490427bfc0b29fa5ebaaaac9ff1375f3", "html_url": "https://github.com/rust-lang/rust/commit/f7e86a5a490427bfc0b29fa5ebaaaac9ff1375f3"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "f892c1597057bed8fa97f287d73b738e710efdb5", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9336b3d3d05d217ba8277e0d36e498e89bbbe276/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9336b3d3d05d217ba8277e0d36e498e89bbbe276/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=9336b3d3d05d217ba8277e0d36e498e89bbbe276", "patch": "@@ -7,6 +7,7 @@ use syntax_pos::Span;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::prefixes::PrefixSet;\n+use crate::borrow_check::error_reporting::UseSpans;\n use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n     LookupResult, MoveError, MovePathIndex,\n@@ -49,7 +50,7 @@ enum GroupedMoveError<'tcx> {\n     // Everything that isn't from pattern matching.\n     OtherIllegalMove {\n         original_path: Place<'tcx>,\n-        span: Span,\n+        use_spans: UseSpans,\n         kind: IllegalMoveOriginKind<'tcx>,\n     },\n }\n@@ -150,7 +151,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             MoveError::IllegalMove {\n                 cannot_move_out_of: IllegalMoveOrigin { location, kind },\n             } => {\n-                let stmt_source_info = self.mir.source_info(location);\n                 // Note: that the only time we assign a place isn't a temporary\n                 // to a user variable is when initializing it.\n                 // If that ever stops being the case, then the ever initialized\n@@ -178,6 +178,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         pat_span: _,\n                     }))) = local_decl.is_user_variable\n                     {\n+                        let stmt_source_info = self.mir.source_info(location);\n                         self.append_binding_error(\n                             grouped_errors,\n                             kind,\n@@ -191,8 +192,10 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n                 }\n+\n+                let move_spans = self.move_spans(&original_path, location);\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n-                    span: stmt_source_info.span,\n+                    use_spans: move_spans,\n                     original_path,\n                     kind,\n                 });\n@@ -288,9 +291,15 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind<'_>) =\n                 match error {\n                     GroupedMoveError::MovesFromPlace { span, ref original_path, ref kind, .. } |\n-                    GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } |\n-                    GroupedMoveError::OtherIllegalMove { span, ref original_path, ref kind } => {\n+                    GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } => {\n                         (span, original_path, kind)\n+                    }\n+                    GroupedMoveError::OtherIllegalMove {\n+                        use_spans,\n+                        ref original_path,\n+                        ref kind\n+                    } => {\n+                        (use_spans.args_or_use(), original_path, kind)\n                     },\n                 };\n             debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n@@ -548,7 +557,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 self.add_move_error_details(err, &binds_to);\n             }\n             // No binding. Nothing to suggest.\n-            GroupedMoveError::OtherIllegalMove { ref original_path, span, .. } => {\n+            GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n+                let span = use_spans.var_or_use();\n                 let place_ty = original_path.ty(self.mir, self.infcx.tcx).ty;\n                 let place_desc = match self.describe_place(original_path) {\n                     Some(desc) => format!(\"`{}`\", desc),\n@@ -560,6 +570,12 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     place_ty,\n                     Some(span),\n                 );\n+\n+                use_spans.args_span_label(err, format!(\"move out of {} occurs here\", place_desc));\n+                use_spans.var_span_label(\n+                    err,\n+                    format!(\"move occurs due to use{}\", use_spans.describe()),\n+                );\n             },\n         }\n     }"}]}