{"sha": "7b6bafa631e6272946da568e9da7c3adc01ba625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmJhZmE2MzFlNjI3Mjk0NmRhNTY4ZTlkYTdjM2FkYzAxYmE2MjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-19T12:40:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "fix syc", "tree": {"sha": "f71e26828c40a79e50a21ab284c4123b741735f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71e26828c40a79e50a21ab284c4123b741735f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6bafa631e6272946da568e9da7c3adc01ba625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6bafa631e6272946da568e9da7c3adc01ba625", "html_url": "https://github.com/rust-lang/rust/commit/7b6bafa631e6272946da568e9da7c3adc01ba625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6bafa631e6272946da568e9da7c3adc01ba625/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ef8ad05b7c1f7148c59814b55d641fd75aff75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef8ad05b7c1f7148c59814b55d641fd75aff75", "html_url": "https://github.com/rust-lang/rust/commit/a5ef8ad05b7c1f7148c59814b55d641fd75aff75"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "300dfc5dd6118372dc2cea99d3cc962c40d44385", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=7b6bafa631e6272946da568e9da7c3adc01ba625", "patch": "@@ -73,6 +73,7 @@ struct RemoveFile {\n impl fmt::Debug for AnalysisChange {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt.debug_struct(\"AnalysisChange\")\n+            .field(\"new_roots\", &self.new_roots)\n             .field(\"roots_changed\", &self.roots_changed)\n             .field(\"files_changed\", &self.files_changed.len())\n             .field(\"libraries_added\", &self.libraries_added.len())"}, {"sha": "d2f16ea975e1db04bd8fed16300ba2a8cd6474ad", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=7b6bafa631e6272946da568e9da7c3adc01ba625", "patch": "@@ -143,6 +143,7 @@ fn main_loop_inner(\n             }\n             recv(libdata_receiver, data) => Event::Lib(data.unwrap())\n         };\n+        log::info!(\"{:?}\", event);\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n@@ -192,6 +193,9 @@ fn main_loop_inner(\n                 sender.send(data);\n             });\n         }\n+        if state.roots_to_scan == 0 {\n+            feedback(internal_mode, \"workspace loaded\", msg_sender);\n+        }\n \n         if state_changed {\n             update_file_notifications_on_threadpool("}, {"sha": "bdb4c513fa56ad2441793b4bbd101c8c5efacdce", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=7b6bafa631e6272946da568e9da7c3adc01ba625", "patch": "@@ -21,6 +21,8 @@ use crate::{\n \n #[derive(Debug)]\n pub struct ServerWorldState {\n+    pub roots_to_scan: usize,\n+    pub root: PathBuf,\n     pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -37,12 +39,13 @@ impl ServerWorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n-        roots.push(root);\n+        roots.push(root.clone());\n         for ws in workspaces.iter() {\n             for pkg in ws.packages() {\n                 roots.push(pkg.root(&ws).to_path_buf());\n             }\n         }\n+        let roots_to_scan = roots.len();\n         let (mut vfs, roots) = Vfs::new(roots);\n         for r in roots {\n             change.add_root(SourceRootId(r.0));\n@@ -83,6 +86,8 @@ impl ServerWorldState {\n         let mut analysis_host = AnalysisHost::default();\n         analysis_host.apply_change(change);\n         ServerWorldState {\n+            roots_to_scan,\n+            root,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n@@ -94,16 +99,29 @@ impl ServerWorldState {\n     pub fn process_changes(\n         &mut self,\n     ) -> Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)> {\n+        let changes = self.vfs.write().commit_changes();\n+        if changes.is_empty() {\n+            return Vec::new();\n+        }\n         let mut libs = Vec::new();\n         let mut change = AnalysisChange::new();\n-        for c in self.vfs.write().commit_changes() {\n+        for c in changes {\n+            log::info!(\"vfs change {:?}\", c);\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n-                    let files = files\n-                        .into_iter()\n-                        .map(|(vfsfile, path, text)| (FileId(vfsfile.0), path, text))\n-                        .collect();\n-                    libs.push((SourceRootId(root.0), files));\n+                    let root_path = self.vfs.read().root2path(root);\n+                    if root_path.starts_with(&self.root) {\n+                        self.roots_to_scan -= 1;\n+                        for (file, path, text) in files {\n+                            change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n+                        }\n+                    } else {\n+                        let files = files\n+                            .into_iter()\n+                            .map(|(vfsfile, path, text)| (FileId(vfsfile.0), path, text))\n+                            .collect();\n+                        libs.push((SourceRootId(root.0), files));\n+                    }\n                 }\n                 VfsChange::AddFile {\n                     root,\n@@ -126,6 +144,7 @@ impl ServerWorldState {\n     }\n \n     pub fn add_lib(&mut self, data: LibraryData) {\n+        self.roots_to_scan -= 1;\n         let mut change = AnalysisChange::new();\n         change.add_library(data);\n         self.analysis_host.apply_change(change);"}, {"sha": "029a55d4024b2260ff76f430bd78a63a1d999e76", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=7b6bafa631e6272946da568e9da7c3adc01ba625", "patch": "@@ -1,9 +1,7 @@\n mod support;\n \n use serde_json::json;\n-\n use ra_lsp_server::req::{Runnables, RunnablesParams, CodeActionRequest, CodeActionParams};\n-\n use languageserver_types::{Position, Range, CodeActionContext};\n \n use crate::support::project;\n@@ -20,6 +18,7 @@ fn foo() {\n }\n \",\n     );\n+    server.wait_for_feedback(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams {\n             text_document: server.doc_id(\"lib.rs\"),"}, {"sha": "3a68039f017763f28ef7e04330c1ba57041297cd", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6bafa631e6272946da568e9da7c3adc01ba625/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=7b6bafa631e6272946da568e9da7c3adc01ba625", "patch": "@@ -132,6 +132,7 @@ impl Vfs {\n         roots.sort_by_key(|it| Reverse(it.as_os_str().len()));\n         for (i, path) in roots.iter().enumerate() {\n             let root = res.roots.alloc(RootFilter::new(path.clone()));\n+            res.root2files.insert(root, Default::default());\n             let nested = roots[..i]\n                 .iter()\n                 .filter(|it| it.starts_with(path))\n@@ -155,6 +156,10 @@ impl Vfs {\n         (res, roots)\n     }\n \n+    pub fn root2path(&self, root: VfsRoot) -> PathBuf {\n+        self.roots[root].root.clone()\n+    }\n+\n     pub fn path2file(&self, path: &Path) -> Option<VfsFile> {\n         if let Some((_root, _path, Some(file))) = self.find_root(path) {\n             return Some(file);\n@@ -176,6 +181,23 @@ impl Vfs {\n     }\n \n     pub fn load(&mut self, path: &Path) -> Option<VfsFile> {\n+        if let Some((root, rel_path, file)) = self.find_root(path) {\n+            return if let Some(file) = file {\n+                Some(file)\n+            } else {\n+                let text = fs::read_to_string(path).unwrap_or_default();\n+                let text = Arc::new(text);\n+                let file = self.add_file(root, rel_path.clone(), Arc::clone(&text));\n+                let change = VfsChange::AddFile {\n+                    file,\n+                    text,\n+                    root,\n+                    path: rel_path,\n+                };\n+                self.pending_changes.push(change);\n+                Some(file)\n+            };\n+        }\n         None\n     }\n \n@@ -262,10 +284,7 @@ impl Vfs {\n     fn add_file(&mut self, root: VfsRoot, path: RelativePathBuf, text: Arc<String>) -> VfsFile {\n         let data = VfsFileData { root, path, text };\n         let file = self.files.alloc(data);\n-        self.root2files\n-            .entry(root)\n-            .or_insert_with(FxHashSet::default)\n-            .insert(file);\n+        self.root2files.get_mut(&root).unwrap().insert(file);\n         file\n     }\n "}]}