{"sha": "bfde2ba524559aeb5abcfce72d933d74d1226d67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZGUyYmE1MjQ1NTlhZWI1YWJjZmNlNzJkOTMzZDc0ZDEyMjZkNjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-13T02:09:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T03:00:51Z"}, "message": "port smallintmap over to dvec\n\nalso: add a non-operator-overloaded method for [] to work around #2378", "tree": {"sha": "d6df18b140fc843db65576a547046591587e112d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6df18b140fc843db65576a547046591587e112d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfde2ba524559aeb5abcfce72d933d74d1226d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfde2ba524559aeb5abcfce72d933d74d1226d67", "html_url": "https://github.com/rust-lang/rust/commit/bfde2ba524559aeb5abcfce72d933d74d1226d67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfde2ba524559aeb5abcfce72d933d74d1226d67/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774ea145ec4525e63ba97502306036e773c19eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/774ea145ec4525e63ba97502306036e773c19eca", "html_url": "https://github.com/rust-lang/rust/commit/774ea145ec4525e63ba97502306036e773c19eca"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "ffe52c4131e652a72d21384e8056019b43632080", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bfde2ba524559aeb5abcfce72d933d74d1226d67/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfde2ba524559aeb5abcfce72d933d74d1226d67/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=bfde2ba524559aeb5abcfce72d933d74d1226d67", "patch": "@@ -4,31 +4,31 @@ are O(highest integer key).\n \"];\n import core::option;\n import core::option::{some, none};\n+import dvec::{dvec, extensions};\n \n // FIXME: Should not be @; there's a bug somewhere in rustc that requires this\n // to be. (#2347)\n-type smallintmap<T: copy> = @{mut v: [mut option<T>]};\n+type smallintmap<T: copy> = @{v: dvec<option<T>>};\n \n #[doc = \"Create a smallintmap\"]\n fn mk<T: copy>() -> smallintmap<T> {\n-    let v: [mut option<T>] = [mut];\n-    ret @{mut v: v};\n+    ret @{v: dvec()};\n }\n \n #[doc = \"\n Add a value to the map. If the map already contains a value for\n the specified key then the original value is replaced.\n \"]\n-fn insert<T: copy>(m: smallintmap<T>, key: uint, val: T) {\n-    vec::grow_set::<option<T>>(m.v, key, none::<T>, some::<T>(val));\n+fn insert<T: copy>(self: smallintmap<T>, key: uint, val: T) {\n+    self.v.grow_set_elt(key, none, some(val));\n }\n \n #[doc = \"\n Get the value for the specified key. If the key does not exist\n in the map then returns none\n \"]\n-fn find<T: copy>(m: smallintmap<T>, key: uint) -> option<T> {\n-    if key < vec::len::<option<T>>(m.v) { ret m.v[key]; }\n+fn find<T: copy>(self: smallintmap<T>, key: uint) -> option<T> {\n+    if key < self.v.len() { ret self.v.get_elt(key); }\n     ret none::<T>;\n }\n \n@@ -39,8 +39,8 @@ Get the value for the specified key\n \n If the key does not exist in the map\n \"]\n-fn get<T: copy>(m: smallintmap<T>, key: uint) -> T {\n-    alt find(m, key) {\n+fn get<T: copy>(self: smallintmap<T>, key: uint) -> T {\n+    alt find(self, key) {\n       none { #error(\"smallintmap::get(): key not present\"); fail; }\n       some(v) { ret v; }\n     }\n@@ -49,25 +49,15 @@ fn get<T: copy>(m: smallintmap<T>, key: uint) -> T {\n #[doc = \"\n Returns true if the map contains a value for the specified key\n \"]\n-fn contains_key<T: copy>(m: smallintmap<T>, key: uint) -> bool {\n-    ret !option::is_none(find::<T>(m, key));\n-}\n-\n-// FIXME: Are these really useful?\n-\n-fn truncate<T: copy>(m: smallintmap<T>, len: uint) {\n-    m.v = vec::to_mut(vec::slice::<option<T>>(m.v, 0u, len));\n-}\n-\n-fn max_key<T: copy>(m: smallintmap<T>) -> uint {\n-    ret vec::len::<option<T>>(m.v);\n+fn contains_key<T: copy>(self: smallintmap<T>, key: uint) -> bool {\n+    ret !option::is_none(find(self, key));\n }\n \n #[doc = \"Implements the map::map interface for smallintmap\"]\n impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     fn size() -> uint {\n         let mut sz = 0u;\n-        for vec::each(self.v) {|item|\n+        for self.v.each {|item|\n             alt item { some(_) { sz += 1u; } _ {} }\n         }\n         sz\n@@ -78,9 +68,9 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         ret !exists;\n     }\n     fn remove(&&key: uint) -> option<V> {\n-        if key >= vec::len(self.v) { ret none; }\n-        let old = self.v[key];\n-        self.v[key] = none;\n+        if key >= self.v.len() { ret none; }\n+        let old = self.v.get_elt(key);\n+        self.v.set_elt(key, none);\n         old\n     }\n     fn contains_key(&&key: uint) -> bool {\n@@ -92,9 +82,9 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     fn each(it: fn(&&uint, V) -> bool) {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n-            alt self.v[idx] {\n+            alt self.v.get_elt(idx) {\n               some(elt) {\n-                if !it(idx, copy elt) { break; }\n+                if !it(idx, elt) { break; }\n               }\n               none { }\n             }\n@@ -104,7 +94,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     fn each_key(it: fn(&&uint) -> bool) {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n-            if self.v[idx] != none && !it(idx) { ret; }\n+            if self.v.get_elt(idx) != none && !it(idx) { ret; }\n             idx += 1u;\n         }\n     }"}, {"sha": "8c5e5195cbc125d3ceffd6a647443948ab75b67d", "filename": "src/test/bench/vec-append.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfde2ba524559aeb5abcfce72d933d74d1226d67/src%2Ftest%2Fbench%2Fvec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfde2ba524559aeb5abcfce72d933d74d1226d67/src%2Ftest%2Fbench%2Fvec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fvec-append.rs?ref=bfde2ba524559aeb5abcfce72d933d74d1226d67", "patch": "@@ -24,11 +24,17 @@ fn main(args: [str]) {\n     let args = if vec::len(args) <= 1u {[\"\", \"100000\"]} else {args};\n     let max = uint::from_str(args[1]).get();\n     let start = std::time::precise_time_s();\n-    collect_raw(max);\n+    let raw_v = collect_raw(max);\n     let mid = std::time::precise_time_s();\n-    collect_dvec(max);\n+    let dvec_v = collect_dvec(max);\n     let end = std::time::precise_time_s();\n \n+    // check each vector\n+    assert raw_v.len() == max;\n+    for raw_v.eachi { |i, v| assert i == v; }\n+    assert dvec_v.len() == max;\n+    for dvec_v.eachi { |i, v| assert i == v; }\n+\n     let raw = mid - start;\n     let dvec = end - mid;\n "}]}