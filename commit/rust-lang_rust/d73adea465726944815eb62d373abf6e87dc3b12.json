{"sha": "d73adea465726944815eb62d373abf6e87dc3b12", "node_id": "C_kwDOAAsO6NoAKGQ3M2FkZWE0NjU3MjY5NDQ4MTVlYjYyZDM3M2FiZjZlODdkYzNiMTI", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2023-01-10T22:52:22Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2023-01-10T23:09:57Z"}, "message": "`needless_return`: remove multiple semis on suggestion", "tree": {"sha": "19c75103d54043336a331173d18f839b5ec96f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c75103d54043336a331173d18f839b5ec96f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73adea465726944815eb62d373abf6e87dc3b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73adea465726944815eb62d373abf6e87dc3b12", "html_url": "https://github.com/rust-lang/rust/commit/d73adea465726944815eb62d373abf6e87dc3b12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73adea465726944815eb62d373abf6e87dc3b12/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e306843eb7236c67b41c7647d4cd56c43e153a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e306843eb7236c67b41c7647d4cd56c43e153a", "html_url": "https://github.com/rust-lang/rust/commit/96e306843eb7236c67b41c7647d4cd56c43e153a"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "42c51d7d071022cb31980c9ebe650e5594a26d2a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d73adea465726944815eb62d373abf6e87dc3b12/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73adea465726944815eb62d373abf6e87dc3b12/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=d73adea465726944815eb62d373abf6e87dc3b12", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::visitors::{for_each_expr, Descend};\n-use clippy_utils::{fn_def_id, path_to_local_id};\n+use clippy_utils::{fn_def_id, path_to_local_id, span_find_starting_semi};\n use core::ops::ControlFlow;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         kind: FnKind<'tcx>,\n         _: &'tcx FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n-        _: Span,\n+        sp: Span,\n         _: HirId,\n     ) {\n         match kind {\n@@ -166,14 +166,14 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 check_final_expr(cx, body.value, vec![], replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                check_block_return(cx, &body.value.kind, vec![]);\n+                check_block_return(cx, &body.value.kind, sp, vec![]);\n             },\n         }\n     }\n }\n \n // if `expr` is a block, check if there are needless returns in it\n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, semi_spans: Vec<Span>) {\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, sp: Span, mut semi_spans: Vec<Span>) {\n     if let ExprKind::Block(block, _) = expr_kind {\n         if let Some(block_expr) = block.expr {\n             check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n@@ -183,12 +183,14 @@ fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>,\n                     check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n                 },\n                 StmtKind::Semi(semi_expr) => {\n-                    let mut semi_spans_and_this_one = semi_spans;\n-                    // we only want the span containing the semicolon so we can remove it later. From `entry.rs:382`\n-                    if let Some(semicolon_span) = stmt.span.trim_start(semi_expr.span) {\n-                        semi_spans_and_this_one.push(semicolon_span);\n-                        check_final_expr(cx, semi_expr, semi_spans_and_this_one, RetReplacement::Empty);\n+                    // Remove ending semicolons and any whitespace ' ' in between.\n+                    // Without `return`, the suggestion might not compile if the semicolon is retained\n+                    if let Some(semi_span) = stmt.span.trim_start(semi_expr.span) {\n+                        let semi_span_to_remove =\n+                            span_find_starting_semi(cx.sess().source_map(), semi_span.with_hi(sp.hi()));\n+                        semi_spans.push(semi_span_to_remove);\n                     }\n+                    check_final_expr(cx, semi_expr, semi_spans, RetReplacement::Empty);\n                 },\n                 _ => (),\n             }\n@@ -231,9 +233,9 @@ fn check_final_expr<'tcx>(\n             emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            check_block_return(cx, &then.kind, semi_spans.clone());\n+            check_block_return(cx, &then.kind, peeled_drop_expr.span, semi_spans.clone());\n             if let Some(else_clause) = else_clause_opt {\n-                check_block_return(cx, &else_clause.kind, semi_spans);\n+                check_block_return(cx, &else_clause.kind, peeled_drop_expr.span, semi_spans);\n             }\n         },\n         // a match expr, check all arms\n@@ -246,7 +248,7 @@ fn check_final_expr<'tcx>(\n             }\n         },\n         // if it's a whole block, check it\n-        other_expr_kind => check_block_return(cx, other_expr_kind, semi_spans),\n+        other_expr_kind => check_block_return(cx, other_expr_kind, peeled_drop_expr.span, semi_spans),\n     }\n }\n "}, {"sha": "76f406abf1c7bb59892620da314fff80f808e73d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d73adea465726944815eb62d373abf6e87dc3b12/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73adea465726944815eb62d373abf6e87dc3b12/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d73adea465726944815eb62d373abf6e87dc3b12", "patch": "@@ -2488,6 +2488,10 @@ pub fn span_extract_comment(sm: &SourceMap, span: Span) -> String {\n     comments_buf.join(\"\\n\")\n }\n \n+pub fn span_find_starting_semi(sm: &SourceMap, span: Span) -> Span {\n+    sm.span_take_while(span, |&ch| ch == ' ' || ch == ';')\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}]}