{"sha": "caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTUwY2UxNWQ4ZWQ4ZjBkNTBjOTA0OTA1M2E1ZTJjZDVhMGQ3MDE=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-25T05:08:26Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-25T05:08:26Z"}, "message": "Remove stage0 cfgs", "tree": {"sha": "2fd53e9ab3147cc435e1075285297508491c8572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd53e9ab3147cc435e1075285297508491c8572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "html_url": "https://github.com/rust-lang/rust/commit/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afdf0d6a18bd0fb3369088eff1f8d9c707ad43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afdf0d6a18bd0fb3369088eff1f8d9c707ad43d", "html_url": "https://github.com/rust-lang/rust/commit/2afdf0d6a18bd0fb3369088eff1f8d9c707ad43d"}], "stats": {"total": 57, "additions": 0, "deletions": 57}, "files": [{"sha": "9177ecabed6a886cdd9f145acfaad84ac84139bb", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "patch": "@@ -43,7 +43,6 @@ pub trait Iterator<A> {\n     /// Return a lower bound and upper bound on the remaining length of the iterator.\n     ///\n     /// The common use case for the estimate is pre-allocating space to store the results.\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) { (None, None) }\n }\n \n@@ -610,7 +609,6 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (a_lower, a_upper) = self.a.size_hint();\n         let (b_lower, b_upper) = self.b.size_hint();\n@@ -664,7 +662,6 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         self.iter.size_hint()\n     }\n@@ -690,7 +687,6 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n         (None, upper) // can't know a lower bound, due to the predicate\n@@ -716,7 +712,6 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n         (None, upper) // can't know a lower bound, due to the predicate"}, {"sha": "109f665e41d740b115b95bca2462eb2eefb41ac6", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "patch": "@@ -42,9 +42,7 @@ pub extern \"rust-intrinsic\" {\n     /// Atomic compare and exchange, release ordering.\n     pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchg_acqrel(dst: &mut int, old: int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchg_relaxed(dst: &mut int, old: int, src: int) -> int;\n \n \n@@ -53,15 +51,13 @@ pub extern \"rust-intrinsic\" {\n     /// Atomic load, acquire ordering.\n     pub fn atomic_load_acq(src: &int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_load_relaxed(src: &int) -> int;\n \n     /// Atomic store, sequentially consistent.\n     pub fn atomic_store(dst: &mut int, val: int);\n     /// Atomic store, release ordering.\n     pub fn atomic_store_rel(dst: &mut int, val: int);\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_store_relaxed(dst: &mut int, val: int);\n \n     /// Atomic exchange, sequentially consistent.\n@@ -70,9 +66,7 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     /// Atomic exchange, release ordering.\n     pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xchg_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xchg_relaxed(dst: &mut int, src: int) -> int;\n \n     /// Atomic addition, sequentially consistent.\n@@ -81,9 +75,7 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n     /// Atomic addition, release ordering.\n     pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xadd_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xadd_relaxed(dst: &mut int, src: int) -> int;\n \n     /// Atomic subtraction, sequentially consistent.\n@@ -92,97 +84,55 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n     /// Atomic subtraction, release ordering.\n     pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xsub_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xsub_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_and(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_nand(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_or(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_xor(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_max(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_min(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_umin(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_umax(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_relaxed(dst: &mut int, src: int) -> int;\n \n     /// The size of a type in bytes."}, {"sha": "e39dd262cd906147b646d1da91a92beb5c050a2d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=caa50ce15d8ed8f0d50c9049053a5e2cd5a0d701", "patch": "@@ -2446,7 +2446,6 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            #[cfg(not(stage0))]\n             fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n                 let exact = Some(((self.end as uint) - (self.ptr as uint)) / size_of::<$elem>());\n                 (exact, exact)\n@@ -3929,7 +3928,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(not(stage0))]\n     fn test_iterator() {\n         use iterator::*;\n         let xs = [1, 2, 5, 10, 11];"}]}