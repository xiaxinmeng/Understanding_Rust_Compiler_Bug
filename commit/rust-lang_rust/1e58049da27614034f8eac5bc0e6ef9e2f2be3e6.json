{"sha": "1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTgwNDlkYTI3NjE0MDM0ZjhlYWM1YmMwZTZlZjllMmYyYmUzZTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T23:36:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T23:36:48Z"}, "message": "rt: Remove fail calls from rust_task::yield", "tree": {"sha": "c563329196ecb410c7834a068dea1f8421378007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c563329196ecb410c7834a068dea1f8421378007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "html_url": "https://github.com/rust-lang/rust/commit/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792068d871f2a8f7184a6f109db1d65c73bf63da", "url": "https://api.github.com/repos/rust-lang/rust/commits/792068d871f2a8f7184a6f109db1d65c73bf63da", "html_url": "https://github.com/rust-lang/rust/commit/792068d871f2a8f7184a6f109db1d65c73bf63da"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "e00205a522b43fda5f30a042e5ed50dc2bc66bac", "filename": "src/lib/comm.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -163,7 +163,7 @@ fn recv_<send T>(p: *rustrt::rust_port) -> T {\n     let killedp = ptr::addr_of(killed);\n     let res = rusti::call_with_retptr(bind recv(_, p, yieldp, killedp));\n     if killed != 0u {\n-        fail_killed();\n+        fail \"killed\";\n     }\n     if yield != 0u {\n         // Data isn't available yet, so res has not been initialized.\n@@ -172,10 +172,6 @@ fn recv_<send T>(p: *rustrt::rust_port) -> T {\n     ret res;\n }\n \n-fn fail_killed() -> ! {\n-    fail \"killed\";\n-}\n-\n /*\n Function: chan\n "}, {"sha": "e90bc87c471f6b2670143bf0210d06e9fe3e461b", "filename": "src/lib/task.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -53,7 +53,7 @@ export spawn_joinable;\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     // these must run on the Rust stack so that they can swap stacks etc:\n-    fn task_sleep(task: *rust_task, time_in_us: uint);\n+    fn task_sleep(task: *rust_task, time_in_us: uint, &killed: bool);\n }\n \n #[link_name = \"rustrt\"]\n@@ -145,7 +145,11 @@ time_in_us - maximum number of microseconds to yield control for\n */\n fn sleep(time_in_us: uint) {\n     let task = rustrt::rust_get_task();\n-    ret rusti::task_sleep(task, time_in_us);\n+    let killed = false;\n+    rusti::task_sleep(task, time_in_us, killed);\n+    if killed {\n+        fail \"killed\";\n+    }\n }\n \n /*"}, {"sha": "aab71fb80afb7398bfe2aa667956e8941300184b", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -12,7 +12,7 @@ extern \"C\" CDECL void\n port_recv(uintptr_t *dptr, rust_port *port);\n \n extern \"C\" CDECL void\n-rust_task_sleep(rust_task *task, size_t time_in_us);\n+rust_task_sleep(rust_task *task, size_t time_in_us, bool *killed);\n \n extern \"C\" void\n rust_intrinsic_vec_len(size_t *retptr,\n@@ -82,7 +82,8 @@ extern \"C\" void\n rust_intrinsic_task_sleep(void **retptr,\n                           void *env,\n \t\t\t  rust_task *task,\n-                          size_t time_in_us) {\n-    rust_task_sleep(task, time_in_us);\n+                          size_t time_in_us,\n+\t\t\t  bool *killed) {\n+    rust_task_sleep(task, time_in_us, killed);\n }\n "}, {"sha": "0edf3d3ddf01ff92f35a26f612226217af64bcfc", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -107,12 +107,12 @@ define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i32 %time_in_us) {\n-  tail call void @rust_task_sleep(%struct.rust_task* %task, i32 %time_in_us)\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i32 %time_in_us, i8* %killed) {\n+  tail call void @rust_task_sleep(%struct.rust_task* %task, i32 %time_in_us, i8* %killed)\n   ret void\n }\n \n-declare void @rust_task_sleep(%struct.rust_task*, i32)\n+declare void @rust_task_sleep(%struct.rust_task*, i32, i8*)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "a1eaf123980097a59d5bad4e5a85d128df74e5b5", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -107,12 +107,12 @@ define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i64 %time_in_us) uwtable {\n-  tail call void @rust_task_sleep(%struct.rust_task* %task, i64 %time_in_us)\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i64 %time_in_us, i8* %killed) uwtable {\n+  tail call void @rust_task_sleep(%struct.rust_task* %task, i64 %time_in_us, i8* %killed)\n   ret void\n }\n \n-declare void @rust_task_sleep(%struct.rust_task*, i64)\n+declare void @rust_task_sleep(%struct.rust_task*, i64, i8*)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "6b57fae74704ecb8d0f6eb3ee88fae3743afe23c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -511,8 +511,8 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n // This is called by an intrinsic on the Rust stack.\n // Do not call on the C stack.\n extern \"C\" CDECL void\n-rust_task_sleep(rust_task *task, size_t time_in_us) {\n-    task->yield(time_in_us);\n+rust_task_sleep(rust_task *task, size_t time_in_us, bool *killed) {\n+    task->yield(time_in_us, killed);\n }\n \n extern \"C\" CDECL void"}, {"sha": "e996563b0f57f09f336db6ccaad1df7873f2c140", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -267,22 +267,22 @@ rust_task::grow(size_t n_frame_bytes)\n \n // Only run this on the rust stack\n void\n-rust_task::yield(size_t time_in_us) {\n+rust_task::yield(size_t time_in_us, bool *killed) {\n     LOG(this, task, \"task %s @0x%\" PRIxPTR \" yielding for %d us\",\n         name, this, time_in_us);\n \n-    if (killed) {\n+    if (this->killed) {\n         A(sched, !blocked(), \"Shouldn't be blocked before failing\");\n-        fail();\n+        *killed = true;\n     }\n \n     yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler.\n     ctx.next->swap(ctx);\n \n-    if (killed) {\n-        fail();\n+    if (this->killed) {\n+        *killed = true;\n     }\n }\n "}, {"sha": "a6d68331fdaf353450bf5d8c09298ec9355dbd7e", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/1e58049da27614034f8eac5bc0e6ef9e2f2be3e6/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=1e58049da27614034f8eac5bc0e6ef9e2f2be3e6", "patch": "@@ -158,7 +158,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void backtrace();\n \n     // Yields for a specified duration of time.\n-    void yield(size_t time_in_ms);\n+    void yield(size_t time_in_ms, bool *killed);\n \n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();"}]}