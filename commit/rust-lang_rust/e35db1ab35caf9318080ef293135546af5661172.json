{"sha": "e35db1ab35caf9318080ef293135546af5661172", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNWRiMWFiMzVjYWY5MzE4MDgwZWYyOTMxMzU1NDZhZjU2NjExNzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-27T09:43:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-29T00:22:15Z"}, "message": "Reconcile treatment of &mut with the docs", "tree": {"sha": "77ff2d0b09ca46ede71ea02e8bb82c011bbd2d12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ff2d0b09ca46ede71ea02e8bb82c011bbd2d12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35db1ab35caf9318080ef293135546af5661172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35db1ab35caf9318080ef293135546af5661172", "html_url": "https://github.com/rust-lang/rust/commit/e35db1ab35caf9318080ef293135546af5661172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35db1ab35caf9318080ef293135546af5661172/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1647c92a868d49709e3bbbe66d4f2a46e97595", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1647c92a868d49709e3bbbe66d4f2a46e97595", "html_url": "https://github.com/rust-lang/rust/commit/bf1647c92a868d49709e3bbbe66d4f2a46e97595"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "183771956eae0116aaae96eefeabeabab7985c59", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=e35db1ab35caf9318080ef293135546af5661172", "patch": "@@ -657,12 +657,12 @@ fn check_loans_in_fn<'a>(fk: &visit::fn_kind,\n             let move_err = this.analyze_move_out_from_cmt(cmt);\n             match move_err {\n                 MoveOk => {}\n-                MoveWhileBorrowed(loan_path, loan_span) => {\n+                MoveWhileBorrowed(move_path, loan_path, loan_span) => {\n                     this.bccx.span_err(\n                         cap_var.span,\n                         fmt!(\"cannot move `%s` into closure \\\n                               because it is borrowed\",\n-                             this.bccx.loan_path_to_str(loan_path)));\n+                             this.bccx.loan_path_to_str(move_path)));\n                     this.bccx.span_note(\n                         loan_span,\n                         fmt!(\"borrow of `%s` occurs here\","}, {"sha": "82a3b145e1d5da3bfe36537179232c2472d05e63", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=e35db1ab35caf9318080ef293135546af5661172", "patch": "@@ -33,7 +33,7 @@ pub fn compute_restrictions(bccx: @BorrowckCtxt,\n         cmt_original: cmt\n     };\n \n-    ctxt.compute(cmt, restr)\n+    ctxt.restrict(cmt, restr)\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -50,9 +50,9 @@ impl RestrictionsContext {\n         self.bccx.tcx\n     }\n \n-    fn compute(&self,\n-               cmt: mc::cmt,\n-               restrictions: RestrictionSet) -> RestrictionResult {\n+    fn restrict(&self,\n+                cmt: mc::cmt,\n+                restrictions: RestrictionSet) -> RestrictionResult {\n \n         // Check for those cases where we cannot control the aliasing\n         // and make sure that we are not being asked to.\n@@ -86,7 +86,9 @@ impl RestrictionsContext {\n                 // When we borrow the interior of an enum, we have to\n                 // ensure the enum itself is not mutated, because that\n                 // could cause the type of the memory to change.\n-                self.compute(cmt_base, restrictions | RESTR_MUTATE | RESTR_CLAIM)\n+                self.restrict(\n+                    cmt_base,\n+                    restrictions | RESTR_MUTATE | RESTR_CLAIM)\n             }\n \n             mc::cat_interior(cmt_base, i) => {\n@@ -95,7 +97,7 @@ impl RestrictionsContext {\n                 // Overwriting the base would not change the type of\n                 // the memory, so no additional restrictions are\n                 // needed.\n-                let result = self.compute(cmt_base, restrictions);\n+                let result = self.restrict(cmt_base, restrictions);\n                 self.extend(result, cmt.mutbl, LpInterior(i), restrictions)\n             }\n \n@@ -105,7 +107,7 @@ impl RestrictionsContext {\n                 // When we borrow the interior of an owned pointer, we\n                 // cannot permit the base to be mutated, because that\n                 // would cause the unique pointer to be freed.\n-                let result = self.compute(\n+                let result = self.restrict(\n                     cmt_base,\n                     restrictions | RESTR_MUTATE | RESTR_CLAIM);\n                 self.extend(result, cmt.mutbl, LpDeref, restrictions)\n@@ -180,16 +182,15 @@ impl RestrictionsContext {\n                 // mutability, we can only prevent mutation or prevent\n                 // freezing if it is not aliased. Therefore, in such\n                 // cases we restrict aliasing on `cmt_base`.\n-                if restrictions.intersects(RESTR_MUTATE |\n-                                           RESTR_CLAIM |\n-                                           RESTR_FREEZE) {\n+                if restrictions != RESTR_EMPTY {\n                     // R-Deref-Mut-Borrowed-1\n-                    let result = self.compute(cmt_base, restrictions | RESTR_ALIAS);\n+                    let result = self.restrict(\n+                        cmt_base,\n+                        RESTR_ALIAS | RESTR_MUTATE | RESTR_CLAIM);\n                     self.extend(result, cmt.mutbl, LpDeref, restrictions)\n                 } else {\n                     // R-Deref-Mut-Borrowed-2\n-                    let result = self.compute(cmt_base, restrictions);\n-                    self.extend(result, cmt.mutbl, LpDeref, restrictions)\n+                    Safe\n                 }\n             }\n \n@@ -200,7 +201,7 @@ impl RestrictionsContext {\n \n             mc::cat_stack_upvar(cmt_base) |\n             mc::cat_discr(cmt_base, _) => {\n-                self.compute(cmt_base, restrictions)\n+                self.restrict(cmt_base, restrictions)\n             }\n         }\n     }"}, {"sha": "1babf08aa705caeeec53233dd19b45843bfaddcd", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35db1ab35caf9318080ef293135546af5661172/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=e35db1ab35caf9318080ef293135546af5661172", "patch": "@@ -315,6 +315,7 @@ pub struct Restriction {\n     set: RestrictionSet\n }\n \n+#[deriving(Eq)]\n pub struct RestrictionSet {\n     bits: u32\n }"}]}