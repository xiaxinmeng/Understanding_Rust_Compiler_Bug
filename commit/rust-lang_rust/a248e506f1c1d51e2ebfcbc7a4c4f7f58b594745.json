{"sha": "a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDhlNTA2ZjFjMWQ1MWUyZWJmY2JjN2E0YzRmN2Y1OGI1OTQ3NDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-12-20T14:42:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-20T14:42:21Z"}, "message": "Merge pull request #1259 from Manishearth/rustfmt\n\nRun rustfmt", "tree": {"sha": "a1bfdae6c84a71d69e71c40ea8a6f9d091b15a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1bfdae6c84a71d69e71c40ea8a6f9d091b15a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "html_url": "https://github.com/rust-lang/rust/commit/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd3679ac346180c53c6167c541cd1cb16adac7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd3679ac346180c53c6167c541cd1cb16adac7a", "html_url": "https://github.com/rust-lang/rust/commit/7dd3679ac346180c53c6167c541cd1cb16adac7a"}, {"sha": "4d0864b27705cb9f8bc34808ceeabccee9360f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0864b27705cb9f8bc34808ceeabccee9360f25", "html_url": "https://github.com/rust-lang/rust/commit/4d0864b27705cb9f8bc34808ceeabccee9360f25"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "33ecb63593cd4a6db111b9b31738fe2b7c6147b6", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -24,3 +24,6 @@ Cargo.lock\n \n # gh pages docs\n util/gh-pages/lints.json\n+\n+# rustfmt backups\n+*.rs.bk"}, {"sha": "052a543bfd5742117256f1f783f685b45e62def7", "filename": ".travis.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -17,10 +17,14 @@ install:\n   - nvm install stable\n   - nvm use stable\n   - npm install remark-cli remark-lint\n+  # || true, because we cache rustfmt and don't want to crash on the next travis run\n+  # due to rustfmt already being installed\n+  - (cargo install rustfmt || true)\n \n script:\n  - remark -f README.md > /dev/null\n  - python util/update_lints.py -c\n+ - PATH=$PATH:~/.cargo/bin cargo fmt -- --write-mode=diff\n  - set -e\n  - cargo build --features debugging\n  - cargo test --features debugging"}, {"sha": "6daad2b65bd995814637ff0204a9d184ced237c6", "filename": "rustfmt.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -2,4 +2,5 @@ max_width = 120\n ideal_width = 100\n fn_args_density = \"Compressed\"\n fn_call_width = 80\n-fn_args_paren_newline = false\n\\ No newline at end of file\n+fn_args_paren_newline = false\n+match_block_trailing_comma = true"}, {"sha": "89db653929c23bc73c3af292a17b7356dbdab00e", "filename": "src/main.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -38,30 +38,17 @@ impl ClippyCompilerCalls {\n }\n \n impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n-    fn early_callback(&mut self,\n-                      matches: &getopts::Matches,\n-                      sopts: &config::Options,\n-                      cfg: &ast::CrateConfig,\n-                      descriptions: &rustc_errors::registry::Registry,\n-                      output: ErrorOutputType)\n+    fn early_callback(&mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig,\n+                      descriptions: &rustc_errors::registry::Registry, output: ErrorOutputType)\n                       -> Compilation {\n         self.default.early_callback(matches, sopts, cfg, descriptions, output)\n     }\n-    fn no_input(&mut self,\n-                matches: &getopts::Matches,\n-                sopts: &config::Options,\n-                cfg: &ast::CrateConfig,\n-                odir: &Option<PathBuf>,\n-                ofile: &Option<PathBuf>,\n-                descriptions: &rustc_errors::registry::Registry)\n+    fn no_input(&mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig,\n+                odir: &Option<PathBuf>, ofile: &Option<PathBuf>, descriptions: &rustc_errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n         self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n     }\n-    fn late_callback(&mut self,\n-                     matches: &getopts::Matches,\n-                     sess: &Session,\n-                     input: &Input,\n-                     odir: &Option<PathBuf>,\n+    fn late_callback(&mut self, matches: &getopts::Matches, sess: &Session, input: &Input, odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n                      -> Compilation {\n         self.default.late_callback(matches, sess, input, odir, ofile)\n@@ -73,7 +60,12 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n             let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n             control.after_parse.callback = Box::new(move |state| {\n                 {\n-                    let mut registry = rustc_plugin::registry::Registry::new(state.session, state.krate.as_ref().expect(\"at this compilation stage the krate must be parsed\").span);\n+                    let mut registry = rustc_plugin::registry::Registry::new(state.session,\n+                                                                             state.krate\n+                                                                                 .as_ref()\n+                                                                                 .expect(\"at this compilation stage \\\n+                                                                                          the krate must be parsed\")\n+                                                                                 .span);\n                     registry.args_hidden = Some(Vec::new());\n                     clippy_lints::register_plugins(&mut registry);\n \n@@ -153,7 +145,7 @@ pub fn main() {\n     if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n         panic!(\"yummy\");\n     }\n-    \n+\n     // Check for version and help flags even when invoked as 'cargo-clippy'\n     if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n         show_help();\n@@ -184,14 +176,16 @@ pub fn main() {\n \n         let current_dir = std::env::current_dir();\n \n-        let package_index = metadata.packages.iter()\n+        let package_index = metadata.packages\n+            .iter()\n             .position(|package| {\n                 let package_manifest_path = Path::new(&package.manifest_path);\n                 if let Some(ref manifest_path) = manifest_path {\n                     package_manifest_path == manifest_path\n                 } else {\n                     let current_dir = current_dir.as_ref().expect(\"could not read current directory\");\n-                    let package_manifest_directory = package_manifest_path.parent().expect(\"could not find parent directory of package manifest\");\n+                    let package_manifest_directory = package_manifest_path.parent()\n+                        .expect(\"could not find parent directory of package manifest\");\n                     package_manifest_directory == current_dir\n                 }\n             })\n@@ -205,7 +199,8 @@ pub fn main() {\n                         std::process::exit(code);\n                     }\n                 } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n-                    if let Err(code) = process(vec![format!(\"--{}\", first), target.name].into_iter().chain(args), &dep_path) {\n+                    if let Err(code) = process(vec![format!(\"--{}\", first), target.name].into_iter().chain(args),\n+                                               &dep_path) {\n                         std::process::exit(code);\n                     }\n                 }\n@@ -285,8 +280,10 @@ fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n     let exit_status = std::process::Command::new(\"cargo\")\n         .args(&args)\n         .env(\"RUSTC\", path)\n-        .spawn().expect(\"could not run cargo\")\n-        .wait().expect(\"failed to wait for cargo?\");\n+        .spawn()\n+        .expect(\"could not run cargo\")\n+        .wait()\n+        .expect(\"failed to wait for cargo?\");\n \n     if exit_status.success() {\n         Ok(())"}, {"sha": "eeab3a2bec593276656472c31471efea0c913018", "filename": "tests/ice_exacte_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Fice_exacte_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Fice_exacte_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fice_exacte_size.rs?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -14,4 +14,4 @@ impl Iterator for Foo {\n     }\n }\n \n-impl ExactSizeIterator for Foo { }\n+impl ExactSizeIterator for Foo {}"}, {"sha": "87cbb72f585768335d53977920a5e3014931d19d", "filename": "tests/issue-825.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fissue-825.rs?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -5,19 +5,10 @@\n \n // this should compile in a reasonable amount of time\n fn rust_type_id(name: String) {\n-    if \"bool\" == &name[..] ||\n-        \"uint\" == &name[..] ||\n-        \"u8\" == &name[..] ||\n-        \"u16\" == &name[..] ||\n-        \"u32\" == &name[..] ||\n-        \"f32\" == &name[..] ||\n-        \"f64\" == &name[..] ||\n-        \"i8\" == &name[..] ||\n-        \"i16\" == &name[..] ||\n-        \"i32\" == &name[..] ||\n-        \"i64\" == &name[..] ||\n-        \"Self\" == &name[..] ||\n-        \"str\" == &name[..] {\n+    if \"bool\" == &name[..] || \"uint\" == &name[..] || \"u8\" == &name[..] || \"u16\" == &name[..] ||\n+       \"u32\" == &name[..] || \"f32\" == &name[..] || \"f64\" == &name[..] || \"i8\" == &name[..] ||\n+       \"i16\" == &name[..] || \"i32\" == &name[..] || \"i64\" == &name[..] ||\n+       \"Self\" == &name[..] || \"str\" == &name[..] {\n         unreachable!();\n     }\n }"}, {"sha": "d6de36bfca73be1706fb69de64ea0c1a00bae231", "filename": "tests/trim_multiline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Ftrim_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745/tests%2Ftrim_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftrim_multiline.rs?ref=a248e506f1c1d51e2ebfcbc7a4c4f7f58b594745", "patch": "@@ -13,6 +13,7 @@ fn test_single_line() {\n }\n \n #[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n fn test_block() {\n     assert_eq!(\"\\\n if x {\n@@ -37,6 +38,7 @@ if x {\n }\n \n #[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n fn test_empty_line() {\n     assert_eq!(\"\\\n if x {"}]}