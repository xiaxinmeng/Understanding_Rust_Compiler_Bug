{"sha": "211d038abc05c77785f72a31840016517cf218c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWQwMzhhYmMwNWM3Nzc4NWY3MmEzMTg0MDAxNjUxN2NmMjE4YzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-16T00:38:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:03Z"}, "message": "librustc: Make `~Trait` two words by storing the type descriptor in the vtable.", "tree": {"sha": "cc76599b82cde5ab731ff81d531d4f19f8c9b1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc76599b82cde5ab731ff81d531d4f19f8c9b1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211d038abc05c77785f72a31840016517cf218c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211d038abc05c77785f72a31840016517cf218c2", "html_url": "https://github.com/rust-lang/rust/commit/211d038abc05c77785f72a31840016517cf218c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211d038abc05c77785f72a31840016517cf218c2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db518ef68abdbf6ef05693dc492147ce5ec7219e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db518ef68abdbf6ef05693dc492147ce5ec7219e", "html_url": "https://github.com/rust-lang/rust/commit/db518ef68abdbf6ef05693dc492147ce5ec7219e"}], "stats": {"total": 126, "additions": 73, "deletions": 53}, "files": [{"sha": "5da664b696927b28ccc4670a8ee85cffe5f0472f", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=211d038abc05c77785f72a31840016517cf218c2", "patch": "@@ -1089,8 +1089,7 @@ pub fn T_opaque_trait(cx: @CrateContext, store: ty::TraitStore) -> TypeRef {\n         }\n         ty::UniqTraitStore => {\n             T_struct([T_ptr(cx.tydesc_type),\n-                      T_unique_ptr(T_unique(cx, T_i8())),\n-                      T_ptr(cx.tydesc_type)],\n+                      T_unique_ptr(T_unique(cx, T_i8()))],\n                      false)\n         }\n         ty::RegionTraitStore(_) => {"}, {"sha": "b731d0f93b75de68006b82bec6e23be5311c3725", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=211d038abc05c77785f72a31840016517cf218c2", "patch": "@@ -545,9 +545,18 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n         let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n-        let lltydesc = Load(bcx, GEPi(bcx, v0, [0, abi::trt_field_tydesc]));\n-        call_tydesc_glue_full(bcx, lluniquevalue, lltydesc,\n-                              abi::tydesc_field_free_glue, None);\n+        let llvtable = Load(bcx, GEPi(bcx, v0, [0, abi::trt_field_vtable]));\n+\n+        // Cast the vtable to a pointer to a pointer to a tydesc.\n+        let llvtable = PointerCast(bcx,\n+                                   llvtable,\n+                                   T_ptr(T_ptr(ccx.tydesc_type)));\n+        let lltydesc = Load(bcx, llvtable);\n+        call_tydesc_glue_full(bcx,\n+                              lluniquevalue,\n+                              lltydesc,\n+                              abi::tydesc_field_free_glue,\n+                              None);\n         bcx\n       }\n       ty::ty_opaque_closure_ptr(ck) => {"}, {"sha": "7633c9069565c5d8fdcb383ab4d5ee7539f64721", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 60, "deletions": 47, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=211d038abc05c77785f72a31840016517cf218c2", "patch": "@@ -39,9 +39,13 @@ for non-monomorphized methods only.  Other methods will\n be generated once they are invoked with specific type parameters,\n see `trans::base::lval_static_fn()` or `trans::base::monomorphic_fn()`.\n */\n-pub fn trans_impl(ccx: @CrateContext, path: path, name: ast::ident,\n-                  methods: &[@ast::method], generics: &ast::Generics,\n-                  self_ty: Option<ty::t>, id: ast::node_id) {\n+pub fn trans_impl(ccx: @CrateContext,\n+                  path: path,\n+                  name: ast::ident,\n+                  methods: &[@ast::method],\n+                  generics: &ast::Generics,\n+                  self_ty: Option<ty::t>,\n+                  id: ast::node_id) {\n     let _icx = ccx.insn_ctxt(\"impl::trans_impl\");\n     let tcx = ccx.tcx;\n \n@@ -718,7 +722,10 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n     // Load the function from the vtable and cast it to the expected type.\n     debug!(\"(translating trait callee) loading method\");\n     let llcallee_ty = type_of_fn_from_ty(ccx, callee_ty);\n-    let mptr = Load(bcx, GEPi(bcx, llvtable, [0u, n_method]));\n+\n+    // Plus one in order to skip past the type descriptor.\n+    let mptr = Load(bcx, GEPi(bcx, llvtable, [0u, n_method + 1]));\n+\n     let mptr = PointerCast(bcx, mptr, T_ptr(llcallee_ty));\n \n     return Callee {\n@@ -756,25 +763,40 @@ pub fn vtable_id(ccx: @CrateContext,\n     }\n }\n \n+/// Creates a returns a dynamic vtable for the given type and vtable origin.\n+/// This is used only for objects.\n pub fn get_vtable(ccx: @CrateContext,\n+                  self_ty: ty::t,\n                   origin: typeck::vtable_origin)\n-               -> ValueRef {\n+                  -> ValueRef {\n     let hash_id = vtable_id(ccx, &origin);\n     match ccx.vtables.find(&hash_id) {\n-      Some(&val) => val,\n-      None => match origin {\n-        typeck::vtable_static(id, substs, sub_vtables) => {\n-            make_impl_vtable(ccx, id, substs, sub_vtables)\n+        Some(&val) => val,\n+        None => {\n+            match origin {\n+                typeck::vtable_static(id, substs, sub_vtables) => {\n+                    make_impl_vtable(ccx, id, self_ty, substs, sub_vtables)\n+                }\n+                _ => fail!(\"get_vtable: expected a static origin\"),\n+            }\n         }\n-        _ => fail!(\"get_vtable: expected a static origin\")\n-      }\n     }\n }\n \n-pub fn make_vtable(ccx: @CrateContext, ptrs: ~[ValueRef]) -> ValueRef {\n+/// Helper function to declare and initialize the vtable.\n+pub fn make_vtable(ccx: @CrateContext,\n+                   tydesc: @mut tydesc_info,\n+                   ptrs: &[ValueRef])\n+                   -> ValueRef {\n     unsafe {\n         let _icx = ccx.insn_ctxt(\"impl::make_vtable\");\n-        let tbl = C_struct(ptrs);\n+\n+        let mut components = ~[ tydesc.tydesc ];\n+        for ptrs.each |&ptr| {\n+            components.push(ptr)\n+        }\n+\n+        let tbl = C_struct(components);\n         let vtable = ccx.sess.str_of((ccx.names)(\"vtable\"));\n         let vt_gvar = do str::as_c_str(*vtable) |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl), buf)\n@@ -786,11 +808,13 @@ pub fn make_vtable(ccx: @CrateContext, ptrs: ~[ValueRef]) -> ValueRef {\n     }\n }\n \n+/// Generates a dynamic vtable for objects.\n pub fn make_impl_vtable(ccx: @CrateContext,\n                         impl_id: ast::def_id,\n+                        self_ty: ty::t,\n                         substs: ~[ty::t],\n                         vtables: typeck::vtable_res)\n-                     -> ValueRef {\n+                        -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"impl::make_impl_vtable\");\n     let tcx = ccx.tcx;\n \n@@ -802,9 +826,13 @@ pub fn make_impl_vtable(ccx: @CrateContext,\n \n     let has_tps =\n         !ty::lookup_item_type(ccx.tcx, impl_id).generics.type_param_defs.is_empty();\n-    make_vtable(ccx, ty::trait_method_def_ids(tcx, trt_id).map(|method_def_id| {\n+\n+    let trait_method_def_ids = ty::trait_method_def_ids(tcx, trt_id);\n+    let methods = do trait_method_def_ids.map |method_def_id| {\n         let im = ty::method(tcx, *method_def_id);\n-        let fty = ty::subst_tps(tcx, substs, None,\n+        let fty = ty::subst_tps(tcx,\n+                                substs,\n+                                None,\n                                 ty::mk_bare_fn(tcx, copy im.fty));\n         if im.generics.has_type_params() || ty::type_has_self(fty) {\n             debug!(\"(making impl vtable) method has self or type params: %s\",\n@@ -830,7 +858,13 @@ pub fn make_impl_vtable(ccx: @CrateContext,\n                 trans_external_path(ccx, m_id, fty)\n             }\n         }\n-    }))\n+    };\n+\n+    // Generate a type descriptor for the vtable.\n+    let tydesc = get_tydesc(ccx, self_ty);\n+    glue::lazily_emit_all_tydesc_glue(ccx, tydesc);\n+\n+    make_vtable(ccx, tydesc, methods)\n }\n \n pub fn trans_trait_cast(bcx: block,\n@@ -852,40 +886,19 @@ pub fn trans_trait_cast(bcx: block,\n     let ccx = bcx.ccx();\n     let v_ty = expr_ty(bcx, val);\n \n-    match store {\n-        ty::RegionTraitStore(_) | ty::BoxTraitStore => {\n-            let mut llboxdest = GEPi(bcx, lldest, [0u, abi::trt_field_box]);\n-            // Just store the pointer into the pair. (Region/borrowed\n-            // and boxed trait objects are represented as pairs, and\n-            // have no type descriptor field.)\n-            llboxdest = PointerCast(bcx,\n-                                    llboxdest,\n-                                    T_ptr(type_of(bcx.ccx(), v_ty)));\n-            bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n-        }\n-        ty::UniqTraitStore => {\n-            // Translate the uniquely-owned value in the\n-            // triple. (Unique trait objects are represented as\n-            // triples.)\n-            let mut llvaldest = GEPi(bcx, lldest, [0, abi::trt_field_box]);\n-            llvaldest = PointerCast(bcx,\n-                                    llvaldest,\n-                                    T_ptr(type_of(bcx.ccx(), v_ty)));\n-            bcx = expr::trans_into(bcx, val, SaveIn(llvaldest));\n-\n-            // Get the type descriptor of the wrapped value and store\n-            // it in the triple as well.\n-            let tydesc = get_tydesc(bcx.ccx(), v_ty);\n-            glue::lazily_emit_all_tydesc_glue(bcx.ccx(), tydesc);\n-            let lltydescdest = GEPi(bcx, lldest, [0, abi::trt_field_tydesc]);\n-            Store(bcx, tydesc.tydesc, lltydescdest);\n-        }\n-    }\n+    let mut llboxdest = GEPi(bcx, lldest, [0u, abi::trt_field_box]);\n+    // Just store the pointer into the pair. (Region/borrowed\n+    // and boxed trait objects are represented as pairs, and\n+    // have no type descriptor field.)\n+    llboxdest = PointerCast(bcx,\n+                            llboxdest,\n+                            T_ptr(type_of(bcx.ccx(), v_ty)));\n+    bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n \n     // Store the vtable into the pair or triple.\n     let orig = /*bad*/copy ccx.maps.vtable_map.get(&id)[0];\n     let orig = resolve_vtable_in_fn_ctxt(bcx.fcx, orig);\n-    let vtable = get_vtable(bcx.ccx(), orig);\n+    let vtable = get_vtable(bcx.ccx(), v_ty, orig);\n     Store(bcx, vtable, PointerCast(bcx,\n                                    GEPi(bcx, lldest, [0u, abi::trt_field_vtable]),\n                                    T_ptr(val_ty(vtable))));"}, {"sha": "281e592f31e59c17535de572272b5a3dde32976f", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d038abc05c77785f72a31840016517cf218c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=211d038abc05c77785f72a31840016517cf218c2", "patch": "@@ -23,7 +23,6 @@ use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::expr;\n use middle::ty;\n-use driver::session;\n use syntax::codemap::span;\n use syntax::ast;\n "}]}