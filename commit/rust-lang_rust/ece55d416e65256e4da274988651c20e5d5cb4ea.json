{"sha": "ece55d416e65256e4da274988651c20e5d5cb4ea", "node_id": "C_kwDOAAsO6NoAKGVjZTU1ZDQxNmU2NTI1NmU0ZGEyNzQ5ODg2NTFjMjBlNWQ1Y2I0ZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T05:44:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T05:44:33Z"}, "message": "Auto merge of #94130 - erikdesjardins:partially, r=nikic\n\nUse undef for (some) partially-uninit constants\n\nThere needs to be some limit to avoid perf regressions on large arrays\nwith undef in each element (see comment in the code).\n\nFixes: #84565\nOriginal PR: #83698\n\nDepends on LLVM 14: #93577", "tree": {"sha": "afa1ecb7bdb5e595f2ff0d42b959a19dbd453ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa1ecb7bdb5e595f2ff0d42b959a19dbd453ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece55d416e65256e4da274988651c20e5d5cb4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece55d416e65256e4da274988651c20e5d5cb4ea", "html_url": "https://github.com/rust-lang/rust/commit/ece55d416e65256e4da274988651c20e5d5cb4ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece55d416e65256e4da274988651c20e5d5cb4ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a79936da30702b1c717769a2d12dffbad6d30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a79936da30702b1c717769a2d12dffbad6d30a", "html_url": "https://github.com/rust-lang/rust/commit/f6a79936da30702b1c717769a2d12dffbad6d30a"}, {"sha": "5bf8303bbc0f7ad6f68c1c7311ca538ddcb23ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf8303bbc0f7ad6f68c1c7311ca538ddcb23ebe", "html_url": "https://github.com/rust-lang/rust/commit/5bf8303bbc0f7ad6f68c1c7311ca538ddcb23ebe"}], "stats": {"total": 110, "additions": 44, "deletions": 66}, "files": [{"sha": "c98720944c9769c32b03460d94d1e29238914377", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -2,6 +2,7 @@ use crate::base;\n use crate::common::CodegenCx;\n use crate::debuginfo;\n use crate::llvm::{self, True};\n+use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -37,7 +38,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) ->\n         alloc: &'a Allocation,\n         range: Range<usize>,\n     ) {\n-        let mut chunks = alloc\n+        let chunks = alloc\n             .init_mask()\n             .range_as_init_chunks(Size::from_bytes(range.start), Size::from_bytes(range.end));\n \n@@ -53,30 +54,26 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) ->\n             }\n         };\n \n-        // Generating partially-uninit consts inhibits optimizations, so it is disabled by default.\n-        // See https://github.com/rust-lang/rust/issues/84565.\n-        let allow_partially_uninit =\n-            match cx.sess().opts.debugging_opts.partially_uninit_const_threshold {\n-                Some(max) => range.len() <= max,\n-                None => false,\n-            };\n+        // Generating partially-uninit consts is limited to small numbers of chunks,\n+        // to avoid the cost of generating large complex const expressions.\n+        // For example, `[(u32, u8); 1024 * 1024]` contains uninit padding in each element,\n+        // and would result in `{ [5 x i8] zeroinitializer, [3 x i8] undef, ...repeat 1M times... }`.\n+        let max = if llvm_util::get_version() < (14, 0, 0) {\n+            // Generating partially-uninit consts inhibits optimizations in LLVM < 14.\n+            // See https://github.com/rust-lang/rust/issues/84565.\n+            1\n+        } else {\n+            cx.sess().opts.debugging_opts.uninit_const_chunk_threshold\n+        };\n+        let allow_uninit_chunks = chunks.clone().take(max.saturating_add(1)).count() <= max;\n \n-        if allow_partially_uninit {\n+        if allow_uninit_chunks {\n             llvals.extend(chunks.map(chunk_to_llval));\n         } else {\n-            let llval = match (chunks.next(), chunks.next()) {\n-                (Some(chunk), None) => {\n-                    // exactly one chunk, either fully init or fully uninit\n-                    chunk_to_llval(chunk)\n-                }\n-                _ => {\n-                    // partially uninit, codegen as if it was initialized\n-                    // (using some arbitrary value for uninit bytes)\n-                    let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(range);\n-                    cx.const_bytes(bytes)\n-                }\n-            };\n-            llvals.push(llval);\n+            // If this allocation contains any uninit bytes, codegen as if it was initialized\n+            // (using some arbitrary value for uninit bytes).\n+            let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(range);\n+            llvals.push(cx.const_bytes(bytes));\n         }\n     }\n "}, {"sha": "def5c30411b84152c6fe87625ab7a1f5da4db96c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -758,7 +758,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(panic_in_drop, PanicStrategy::Abort);\n-    tracked!(partially_uninit_const_threshold, Some(123));\n     tracked!(pick_stable_methods_before_any_unstable, false);\n     tracked!(plt, Some(true));\n     tracked!(polonius, true);\n@@ -789,6 +788,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));\n+    tracked!(uninit_const_chunk_threshold, 123);\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);"}, {"sha": "5de119f956282b51448f6bda0135825b1517c9b1", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -957,6 +957,7 @@ impl InitMask {\n }\n \n /// Yields [`InitChunk`]s. See [`InitMask::range_as_init_chunks`].\n+#[derive(Clone)]\n pub struct InitChunkIter<'a> {\n     init_mask: &'a InitMask,\n     /// Whether the next chunk we will return is initialized."}, {"sha": "359e00718bf134e4c175060b46063618a4a934d6", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -1336,9 +1336,6 @@ options! {\n         \"panic strategy for panics in drops\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n-    partially_uninit_const_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n-        \"allow generating const initializers with mixed init/uninit bytes, \\\n-        and set the maximum total size of a const allocation for which this is allowed (default: never)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some performance-related statistics (default: no)\"),\n     pick_stable_methods_before_any_unstable: bool = (true, parse_bool, [TRACKED],\n@@ -1483,6 +1480,9 @@ options! {\n         \"in diagnostics, use heuristics to shorten paths referring to items\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n         \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n+    uninit_const_chunk_threshold: usize = (16, parse_number, [TRACKED],\n+        \"allow generating const initializers with mixed init/uninit chunks, \\\n+        and set the maximum number of chunks for which this is allowed (default: 16)\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n         \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],"}, {"sha": "1a84f1a44795bb22f41403e0bc4e7643695c47d2", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-//\n+// min-llvm-version: 14.0\n \n #![crate_type = \"lib\"]\n \n@@ -43,14 +43,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 2 %1, i8* align 2 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 2 %1, i8* align 2 getelementptr inbounds (<{ [4 x i8], [4 x i8] }>, <{ [4 x i8], [4 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [4 x i8] }>, <{ [4 x i8], [4 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }"}, {"sha": "f7420e4126ed0999d40a263f300bdb93e0d940cb", "filename": "src/test/codegen/uninit-consts-allow-partially-uninit.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f6a79936da30702b1c717769a2d12dffbad6d30a/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a79936da30702b1c717769a2d12dffbad6d30a/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs?ref=f6a79936da30702b1c717769a2d12dffbad6d30a", "patch": "@@ -1,35 +0,0 @@\n-// compile-flags: -C no-prepopulate-passes -Z partially_uninit_const_threshold=1024\n-\n-// Like uninit-consts.rs, but tests that we correctly generate partially-uninit consts\n-// when the (disabled by default) partially_uninit_const_threshold flag is used.\n-\n-#![crate_type = \"lib\"]\n-\n-use std::mem::MaybeUninit;\n-\n-pub struct PartiallyUninit {\n-    x: u32,\n-    y: MaybeUninit<[u8; 10]>\n-}\n-\n-// This should be partially undef.\n-// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n-\n-// This shouldn't contain undef, since it's larger than the 1024 byte limit.\n-// CHECK: [[UNINIT_PADDING_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [32768 x i8] }> <{ [32768 x i8] c\"{{.+}}\" }>, align 4\n-\n-// CHECK-LABEL: @partially_uninit\n-#[no_mangle]\n-pub const fn partially_uninit() -> PartiallyUninit {\n-    const X: PartiallyUninit = PartiallyUninit { x: 0xdeadbeef, y: MaybeUninit::uninit() };\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [12 x i8] }>, <{ [4 x i8], [12 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n-    X\n-}\n-\n-// CHECK-LABEL: @uninit_padding_huge\n-#[no_mangle]\n-pub const fn uninit_padding_huge() -> [(u32, u8); 4096] {\n-    const X: [(u32, u8); 4096] = [(123, 45); 4096];\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [32768 x i8] }>, <{ [32768 x i8] }>* [[UNINIT_PADDING_HUGE]], i32 0, i32 0, i32 0), i{{(32|64)}} 32768, i1 false)\n-    X\n-}"}, {"sha": "3e370c7ba64f8262a1a5c2aca1d375706c02429f", "filename": "src/test/codegen/uninit-consts.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ece55d416e65256e4da274988651c20e5d5cb4ea/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece55d416e65256e4da274988651c20e5d5cb4ea/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts.rs?ref=ece55d416e65256e4da274988651c20e5d5cb4ea", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n+// min-llvm-version: 14.0\n \n // Check that we use undef (and not zero) for uninitialized bytes in constants.\n \n@@ -12,7 +13,13 @@ pub struct PartiallyUninit {\n }\n \n // CHECK: [[FULLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [10 x i8] }> undef\n-// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [16 x i8] }> <{ [16 x i8] c\"\\EF\\BE\\AD\\DE\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" }>, align 4\n+\n+// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n+\n+// This shouldn't contain undef, since it contains more chunks\n+// than the default value of uninit_const_chunk_threshold.\n+// CHECK: [[UNINIT_PADDING_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [32768 x i8] }> <{ [32768 x i8] c\"{{.+}}\" }>, align 4\n+\n // CHECK: [[FULLY_UNINIT_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [16384 x i8] }> undef\n \n // CHECK-LABEL: @fully_uninit\n@@ -27,7 +34,15 @@ pub const fn fully_uninit() -> MaybeUninit<[u8; 10]> {\n #[no_mangle]\n pub const fn partially_uninit() -> PartiallyUninit {\n     const X: PartiallyUninit = PartiallyUninit { x: 0xdeadbeef, y: MaybeUninit::uninit() };\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [16 x i8] }>, <{ [16 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n+    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [12 x i8] }>, <{ [4 x i8], [12 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n+    X\n+}\n+\n+// CHECK-LABEL: @uninit_padding_huge\n+#[no_mangle]\n+pub const fn uninit_padding_huge() -> [(u32, u8); 4096] {\n+    const X: [(u32, u8); 4096] = [(123, 45); 4096];\n+    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [32768 x i8] }>, <{ [32768 x i8] }>* [[UNINIT_PADDING_HUGE]], i32 0, i32 0, i32 0), i{{(32|64)}} 32768, i1 false)\n     X\n }\n "}]}