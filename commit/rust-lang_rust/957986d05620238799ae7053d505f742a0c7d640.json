{"sha": "957986d05620238799ae7053d505f742a0c7d640", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Nzk4NmQwNTYyMDIzODc5OWFlNzA1M2Q1MDVmNzQyYTBjN2Q2NDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-17T22:10:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-30T19:58:22Z"}, "message": "syntax: Support modern attribute syntax in the `meta` matcher", "tree": {"sha": "d9d83823f2fd71276724c8fec53f4307f8d926f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d83823f2fd71276724c8fec53f4307f8d926f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957986d05620238799ae7053d505f742a0c7d640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957986d05620238799ae7053d505f742a0c7d640", "html_url": "https://github.com/rust-lang/rust/commit/957986d05620238799ae7053d505f742a0c7d640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957986d05620238799ae7053d505f742a0c7d640/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535d4743a4bc4807446cefbc2413e02d53aa0a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/535d4743a4bc4807446cefbc2413e02d53aa0a85", "html_url": "https://github.com/rust-lang/rust/commit/535d4743a4bc4807446cefbc2413e02d53aa0a85"}], "stats": {"total": 124, "additions": 68, "deletions": 56}, "files": [{"sha": "7bef693a5be4cce1bb3fcf4d202add442587d515", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -255,9 +255,8 @@ impl MetaItem {\n     }\n }\n \n-impl Attribute {\n-    /// Extracts the `MetaItem` from inside this `Attribute`.\n-    pub fn meta(&self) -> Option<MetaItem> {\n+impl AttrItem {\n+    crate fn meta(&self, span: Span) -> Option<MetaItem> {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n@@ -269,9 +268,16 @@ impl Attribute {\n             } else {\n                 return None;\n             },\n-            span: self.span,\n+            span,\n         })\n     }\n+}\n+\n+impl Attribute {\n+    /// Extracts the MetaItem from inside this Attribute.\n+    pub fn meta(&self) -> Option<MetaItem> {\n+        self.item.meta(self.span)\n+    }\n \n     pub fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n@@ -524,7 +530,7 @@ impl MetaItem {\n             }\n             Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n                 token::Nonterminal::NtIdent(ident, _) => Path::from_ident(ident),\n-                token::Nonterminal::NtMeta(ref meta) => return Some(meta.clone()),\n+                token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),\n                 token::Nonterminal::NtPath(ref path) => path.clone(),\n                 _ => return None,\n             },"}, {"sha": "2923cc86ba029a16c9b3cb8d6347bbd545e12b34", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -122,8 +122,8 @@ impl<'a> StripUnconfigured<'a> {\n \n             while !parser.check(&token::CloseDelim(token::Paren)) {\n                 let lo = parser.token.span.lo();\n-                let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n-                expanded_attrs.push((path, tokens, parser.prev_span.with_lo(lo)));\n+                let item = parser.parse_attr_item()?;\n+                expanded_attrs.push((item, parser.prev_span.with_lo(lo)));\n                 parser.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n             }\n \n@@ -150,8 +150,8 @@ impl<'a> StripUnconfigured<'a> {\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs.into_iter()\n-            .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n-                item: ast::AttrItem { path, tokens },\n+            .flat_map(|(item, span)| self.process_cfg_attr(ast::Attribute {\n+                item,\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n                 is_sugared_doc: false,"}, {"sha": "d1c50fd85945de745e2db8b5038f68030b633bae", "filename": "src/libsyntax/ext/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -924,7 +924,7 @@ fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n             FatalError.raise()\n         }\n         sym::path => token::NtPath(panictry!(p.parse_path(PathStyle::Type))),\n-        sym::meta => token::NtMeta(panictry!(p.parse_meta_item())),\n+        sym::meta => token::NtMeta(panictry!(p.parse_attr_item())),\n         sym::vis => token::NtVis(panictry!(p.parse_visibility(true))),\n         sym::lifetime => if p.check_lifetime() {\n             token::NtLifetime(p.expect_lifetime().ident)"}, {"sha": "3923b9f297b9ffaf897feb6b3b547529853a56b8", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -682,7 +682,10 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtIdent(ident, _is_raw) => vis.visit_ident(ident),\n         token::NtLifetime(ident) => vis.visit_ident(ident),\n         token::NtLiteral(expr) => vis.visit_expr(expr),\n-        token::NtMeta(meta) => vis.visit_meta_item(meta),\n+        token::NtMeta(AttrItem { path, tokens }) => {\n+            vis.visit_path(path);\n+            vis.visit_tts(tokens);\n+        }\n         token::NtPath(path) => vis.visit_path(path),\n         token::NtTT(tt) => vis.visit_tt(tt),\n         token::NtImplItem(item) =>"}, {"sha": "f3298b6a65dcf1a9332e9d4be67c5db6ebb7d6b9", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -90,7 +90,7 @@ impl<'a> Parser<'a> {\n         debug!(\"parse_attribute_with_inner_parse_policy: inner_parse_policy={:?} self.token={:?}\",\n                inner_parse_policy,\n                self.token);\n-        let (span, path, tokens, style) = match self.token.kind {\n+        let (span, item, style) = match self.token.kind {\n             token::Pound => {\n                 let lo = self.token.span;\n                 self.bump();\n@@ -107,7 +107,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 self.expect(&token::OpenDelim(token::Bracket))?;\n-                let (path, tokens) = self.parse_meta_item_unrestricted()?;\n+                let item = self.parse_attr_item()?;\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n                 let hi = self.prev_span;\n \n@@ -142,7 +142,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n \n-                (attr_sp, path, tokens, style)\n+                (attr_sp, item, style)\n             }\n             _ => {\n                 let token_str = self.this_token_to_string();\n@@ -151,7 +151,7 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok(ast::Attribute {\n-            item: ast::AttrItem { path, tokens },\n+            item,\n             id: attr::mk_attr_id(),\n             style,\n             is_sugared_doc: false,\n@@ -168,17 +168,17 @@ impl<'a> Parser<'a> {\n     ///     PATH\n     ///     PATH `=` TOKEN_TREE\n     /// The delimiters or `=` are still put into the resulting token stream.\n-    pub fn parse_meta_item_unrestricted(&mut self) -> PResult<'a, (ast::Path, TokenStream)> {\n-        let meta = match self.token.kind {\n+    pub fn parse_attr_item(&mut self) -> PResult<'a, ast::AttrItem> {\n+        let item = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                Nonterminal::NtMeta(ref meta) => Some(meta.clone()),\n+                Nonterminal::NtMeta(ref item) => Some(item.clone()),\n                 _ => None,\n             },\n             _ => None,\n         };\n-        Ok(if let Some(meta) = meta {\n+        Ok(if let Some(item) = item {\n             self.bump();\n-            (meta.path, meta.kind.tokens(meta.span))\n+            item\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n@@ -205,7 +205,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 TokenStream::empty()\n             };\n-            (path, tokens)\n+            ast::AttrItem { path, tokens }\n         })\n     }\n \n@@ -273,9 +273,14 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        if let Some(meta) = nt_meta {\n-            self.bump();\n-            return Ok(meta);\n+        if let Some(item) = nt_meta {\n+            return match item.meta(item.path.span) {\n+                Some(meta) => {\n+                    self.bump();\n+                    Ok(meta)\n+                }\n+                None => self.unexpected(),\n+            }\n         }\n \n         let lo = self.token.span;"}, {"sha": "ca823991a2e5f25d6b4291b7d857e10e6dfa0c5c", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -114,9 +114,9 @@ impl<'a> Parser<'a> {\n     pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         let meta_ident = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                token::NtMeta(ref meta) => match meta.kind {\n-                    ast::MetaItemKind::Word => Some(meta.path.clone()),\n-                    _ => None,\n+                token::NtMeta(ref item) => match item.tokens.is_empty() {\n+                    true => Some(item.path.clone()),\n+                    false => None,\n                 },\n                 _ => None,\n             },"}, {"sha": "fd78a2bd53442dfe6fa3192191994db394cfb149", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -687,7 +687,7 @@ pub enum Nonterminal {\n     NtLifetime(ast::Ident),\n     NtLiteral(P<ast::Expr>),\n     /// Stuff inside brackets for attributes\n-    NtMeta(ast::MetaItem),\n+    NtMeta(ast::AttrItem),\n     NtPath(ast::Path),\n     NtVis(ast::Visibility),\n     NtTT(TokenTree),"}, {"sha": "7d4ffe493d709460cf3363e3d43ab19e6925f470", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -324,7 +324,7 @@ fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     match *nt {\n         token::NtExpr(ref e)        => expr_to_string(e),\n-        token::NtMeta(ref e)        => meta_item_to_string(e),\n+        token::NtMeta(ref e)        => attr_item_to_string(e),\n         token::NtTy(ref e)          => ty_to_string(e),\n         token::NtPath(ref e)        => path_to_string(e),\n         token::NtItem(ref e)        => item_to_string(e),\n@@ -412,8 +412,8 @@ pub fn meta_list_item_to_string(li: &ast::NestedMetaItem) -> String {\n     to_string(|s| s.print_meta_list_item(li))\n }\n \n-pub fn meta_item_to_string(mi: &ast::MetaItem) -> String {\n-    to_string(|s| s.print_meta_item(mi))\n+fn attr_item_to_string(ai: &ast::AttrItem) -> String {\n+    to_string(|s| s.print_attr_item(ai, ai.path.span))\n }\n \n pub fn attribute_to_string(attr: &ast::Attribute) -> String {\n@@ -629,24 +629,28 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 ast::AttrStyle::Inner => self.word(\"#![\"),\n                 ast::AttrStyle::Outer => self.word(\"#[\"),\n             }\n-            self.ibox(0);\n-            match attr.tokens.trees().next() {\n-                Some(TokenTree::Delimited(_, delim, tts)) => {\n-                    self.print_mac_common(\n-                        Some(MacHeader::Path(&attr.path)), false, None, delim, tts, true, attr.span\n-                    );\n-                }\n-                tree => {\n-                    self.print_path(&attr.path, false, 0);\n-                    if tree.is_some() {\n-                        self.space();\n-                        self.print_tts(attr.tokens.clone(), true);\n-                    }\n+            self.print_attr_item(&attr.item, attr.span);\n+            self.word(\"]\");\n+        }\n+    }\n+\n+    fn print_attr_item(&mut self, item: &ast::AttrItem, span: Span) {\n+        self.ibox(0);\n+        match item.tokens.trees().next() {\n+            Some(TokenTree::Delimited(_, delim, tts)) => {\n+                self.print_mac_common(\n+                    Some(MacHeader::Path(&item.path)), false, None, delim, tts, true, span\n+                );\n+            }\n+            tree => {\n+                self.print_path(&item.path, false, 0);\n+                if tree.is_some() {\n+                    self.space();\n+                    self.print_tts(item.tokens.clone(), true);\n                 }\n             }\n-            self.end();\n-            self.word(\"]\");\n         }\n+        self.end();\n     }\n \n     fn print_meta_list_item(&mut self, item: &ast::NestedMetaItem) {"}, {"sha": "203c4a834899b96aaa0c0c265f2a2689c9aa1fc1", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -1,6 +1,6 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n-use syntax::ast::{self, AttrStyle};\n+use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n use syntax::panictry;\n use syntax::parse::{self, token, ParseSess};\n@@ -15,7 +15,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let (path, tokens) = panictry!(parser.parse_meta_item_unrestricted());\n+        let AttrItem { path, tokens } = panictry!(parser.parse_attr_item());\n         let end_span = parser.token.span;\n         if parser.token != token::Eof {\n             parse_sess.span_diagnostic"}, {"sha": "6381bb2d588770c275710e9e3ae855da5af1087c", "filename": "src/test/ui/cfg/cfg_stmt_expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg_stmt_expr.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -57,7 +57,7 @@ fn main() {\n     // check that macro expanded code works\n \n     macro_rules! if_cfg {\n-        ($cfg:meta $ib:block else $eb:block) => {\n+        ($cfg:meta? $ib:block else $eb:block) => {\n             {\n                 let r;\n                 #[cfg($cfg)]\n@@ -69,7 +69,7 @@ fn main() {\n         }\n     }\n \n-    let n = if_cfg!(unset {\n+    let n = if_cfg!(unset? {\n         413\n     } else {\n         612"}, {"sha": "eb2504d4bfdb7ef2024f35fc29127af189eb859a", "filename": "src/test/ui/macros/macro-first-set.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/957986d05620238799ae7053d505f742a0c7d640/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957986d05620238799ae7053d505f742a0c7d640/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs?ref=957986d05620238799ae7053d505f742a0c7d640", "patch": "@@ -252,12 +252,6 @@ test_path!(::std);\n test_path!(std::u8,);\n test_path!(any, super, super::super::self::path, X<Y>::Z<'a, T=U>);\n \n-macro_rules! test_meta_block {\n-    ($($m:meta)* $b:block) => {};\n-}\n-\n-test_meta_block!(windows {});\n-\n macro_rules! test_lifetime {\n     (1. $($l:lifetime)* $($b:block)*) => {};\n     (2. $($b:block)* $($l:lifetime)*) => {};"}]}