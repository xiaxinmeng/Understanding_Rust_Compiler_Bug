{"sha": "69a3009cbf1b2be92b0520d11d29d11445918817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTMwMDljYmYxYjJiZTkyYjA1MjBkMTFkMjlkMTE0NDU5MTg4MTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T20:12:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T20:12:06Z"}, "message": "Rollup merge of #64837 - nliberg:patch-2, r=Centril\n\nImprove wording in documentation of MaybeUninit\n\nChanges\n\n> variables are properly initialized **at** their respective type\n\ninto\n\n> variables are properly initialized **as** their respective type", "tree": {"sha": "5d63f1f5d149d146da2258c7cf8fe303eb30913a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d63f1f5d149d146da2258c7cf8fe303eb30913a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a3009cbf1b2be92b0520d11d29d11445918817", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdj76WCRBK7hj4Ov3rIwAAdHIIAD4qKU35x8d4y5w3t60FS5/9\ni3BxCvKPjCJUu0Z+WkRc4tBLCUWnffX+AiPZuWj3316O363oFZB040TJn0ycNk1n\ngeABDbu0glTzLYHgUltG97h07kwRf4lcq7EFTC/6Rag+jQZmEjf+yLX1Jii3VnQw\ncySqpaH1iPz42/MEpaZAdgoT4hvqEbvJo8nsTbE7xcd49/gnMSL/3h+GMf2V7ujM\neKXl0YA16IHPPaFy4lEAf9/MabfORiYqdmPEjJtFukAiuEMQopnETsKJAj80c1lS\nnvxXNWpwtfD0s12/i87971LV+XYuRcNyT5sHCLVdd+Pio2OGkMBkBYtQGZtP6/Y=\n=E9Rm\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d63f1f5d149d146da2258c7cf8fe303eb30913a\nparent d9168e4cfaca6dee52e6b8ffe43a37f08703c26a\nparent fd505d7fd52983a374f4087f46e2ae490b9cdb86\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569701526 +0200\ncommitter GitHub <noreply@github.com> 1569701526 +0200\n\nRollup merge of #64837 - nliberg:patch-2, r=Centril\n\nImprove wording in documentation of MaybeUninit\n\nChanges\n\n> variables are properly initialized **at** their respective type\n\ninto\n\n> variables are properly initialized **as** their respective type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a3009cbf1b2be92b0520d11d29d11445918817", "html_url": "https://github.com/rust-lang/rust/commit/69a3009cbf1b2be92b0520d11d29d11445918817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a3009cbf1b2be92b0520d11d29d11445918817/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "html_url": "https://github.com/rust-lang/rust/commit/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a"}, {"sha": "fd505d7fd52983a374f4087f46e2ae490b9cdb86", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd505d7fd52983a374f4087f46e2ae490b9cdb86", "html_url": "https://github.com/rust-lang/rust/commit/fd505d7fd52983a374f4087f46e2ae490b9cdb86"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "792ce9dfad419b0770094bef9c5af8c02c081130", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69a3009cbf1b2be92b0520d11d29d11445918817/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a3009cbf1b2be92b0520d11d29d11445918817/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=69a3009cbf1b2be92b0520d11d29d11445918817", "patch": "@@ -5,12 +5,12 @@ use crate::mem::ManuallyDrop;\n ///\n /// # Initialization invariant\n ///\n-/// The compiler, in general, assumes that variables are properly initialized\n-/// at their respective type. For example, a variable of reference type must\n-/// be aligned and non-NULL. This is an invariant that must *always* be upheld,\n-/// even in unsafe code. As a consequence, zero-initializing a variable of reference\n-/// type causes instantaneous [undefined behavior][ub], no matter whether that reference\n-/// ever gets used to access memory:\n+/// The compiler, in general, assumes that a variable is properly initialized\n+/// according to the requirements of the variable's type. For example, a variable of\n+/// reference type must be aligned and non-NULL. This is an invariant that must\n+/// *always* be upheld, even in unsafe code. As a consequence, zero-initializing a\n+/// variable of reference type causes instantaneous [undefined behavior][ub],\n+/// no matter whether that reference ever gets used to access memory:\n ///\n /// ```rust,no_run\n /// # #![allow(invalid_value)]"}]}