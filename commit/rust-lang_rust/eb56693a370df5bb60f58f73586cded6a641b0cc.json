{"sha": "eb56693a370df5bb60f58f73586cded6a641b0cc", "node_id": "C_kwDOAAsO6NoAKGViNTY2OTNhMzcwZGY1YmI2MGY1OGY3MzU4NmNkZWQ2YTY0MWIwY2M", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-29T17:00:55Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-07T02:05:13Z"}, "message": "Implement concat_bytes!\n\nThe tracking issue for this is #87555.", "tree": {"sha": "fd8c3686dba481883f95e9f3807f11478b0171a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd8c3686dba481883f95e9f3807f11478b0171a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb56693a370df5bb60f58f73586cded6a641b0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb56693a370df5bb60f58f73586cded6a641b0cc", "html_url": "https://github.com/rust-lang/rust/commit/eb56693a370df5bb60f58f73586cded6a641b0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb56693a370df5bb60f58f73586cded6a641b0cc/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c", "html_url": "https://github.com/rust-lang/rust/commit/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c"}], "stats": {"total": 421, "additions": 421, "deletions": 0}, "files": [{"sha": "a107f5993b546312d74d791f308568a15640ea00", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,167 @@\n+use rustc_ast as ast;\n+use rustc_ast::{ptr::P, tokenstream::TokenStream};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::Applicability;\n+use rustc_expand::base::{self, DummyResult};\n+\n+/// Emits errors for literal expressions that are invalid inside and outside of an array.\n+fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_nested: bool) {\n+    let lit = if let ast::ExprKind::Lit(lit) = &expr.kind {\n+        lit\n+    } else {\n+        unreachable!();\n+    };\n+    match lit.kind {\n+        ast::LitKind::Char(_) => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate character literals\");\n+            if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"try using a byte character\",\n+                    format!(\"b{}\", snippet),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            }\n+        }\n+        ast::LitKind::Str(_, _) => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate string literals\");\n+            // suggestion would be invalid if we are nested\n+            if !is_nested {\n+                if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                    err.span_suggestion(\n+                        expr.span,\n+                        \"try using a byte string\",\n+                        format!(\"b{}\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            err.emit();\n+        }\n+        ast::LitKind::Float(_, _) => {\n+            cx.span_err(expr.span, \"cannot concatenate float literals\");\n+        }\n+        ast::LitKind::Bool(_) => {\n+            cx.span_err(expr.span, \"cannot concatenate boolean literals\");\n+        }\n+        ast::LitKind::Err(_) => {}\n+        ast::LitKind::Int(_, _) if !is_nested => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate numeric literals\");\n+            if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"try wrapping the number in an array\",\n+                    format!(\"[{}]\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+        }\n+        ast::LitKind::Int(\n+            val,\n+            ast::LitIntType::Unsuffixed | ast::LitIntType::Unsigned(ast::UintTy::U8),\n+        ) => {\n+            assert!(val > u8::MAX.into()); // must be an error\n+            cx.span_err(expr.span, \"numeric literal is out of bounds\");\n+        }\n+        ast::LitKind::Int(_, _) => {\n+            cx.span_err(expr.span, \"numeric literal is not a `u8`\");\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n+pub fn expand_concat_bytes(\n+    cx: &mut base::ExtCtxt<'_>,\n+    sp: rustc_span::Span,\n+    tts: TokenStream,\n+) -> Box<dyn base::MacResult + 'static> {\n+    let es = match base::get_exprs_from_tts(cx, sp, tts) {\n+        Some(e) => e,\n+        None => return DummyResult::any(sp),\n+    };\n+    let mut accumulator = Vec::new();\n+    let mut missing_literals = vec![];\n+    let mut has_errors = false;\n+    for e in es {\n+        match e.kind {\n+            ast::ExprKind::Array(ref exprs) => {\n+                for expr in exprs {\n+                    match expr.kind {\n+                        ast::ExprKind::Array(_) => {\n+                            if !has_errors {\n+                                cx.span_err(expr.span, \"cannot concatenate doubly nested array\");\n+                            }\n+                            has_errors = true;\n+                        }\n+                        ast::ExprKind::Lit(ref lit) => match lit.kind {\n+                            ast::LitKind::Int(\n+                                val,\n+                                ast::LitIntType::Unsuffixed\n+                                | ast::LitIntType::Unsigned(ast::UintTy::U8),\n+                            ) if val <= u8::MAX.into() => {\n+                                accumulator.push(val as u8);\n+                            }\n+\n+                            ast::LitKind::Byte(val) => {\n+                                accumulator.push(val);\n+                            }\n+                            ast::LitKind::ByteStr(_) => {\n+                                if !has_errors {\n+                                    cx.struct_span_err(\n+                                        expr.span,\n+                                        \"cannot concatenate doubly nested array\",\n+                                    )\n+                                    .note(\"byte strings are treated as arrays of bytes\")\n+                                    .help(\"try flattening the array\")\n+                                    .emit();\n+                                }\n+                                has_errors = true;\n+                            }\n+                            _ => {\n+                                if !has_errors {\n+                                    invalid_type_err(cx, expr, true);\n+                                }\n+                                has_errors = true;\n+                            }\n+                        },\n+                        _ => {\n+                            missing_literals.push(expr.span);\n+                        }\n+                    }\n+                }\n+            }\n+            ast::ExprKind::Lit(ref lit) => match lit.kind {\n+                ast::LitKind::Byte(val) => {\n+                    accumulator.push(val);\n+                }\n+                ast::LitKind::ByteStr(ref bytes) => {\n+                    accumulator.extend_from_slice(&bytes);\n+                }\n+                _ => {\n+                    if !has_errors {\n+                        invalid_type_err(cx, &e, false);\n+                    }\n+                    has_errors = true;\n+                }\n+            },\n+            ast::ExprKind::Err => {\n+                has_errors = true;\n+            }\n+            _ => {\n+                missing_literals.push(e.span);\n+            }\n+        }\n+    }\n+    if !missing_literals.is_empty() {\n+        let mut err = cx.struct_span_err(missing_literals.clone(), \"expected a byte literal\");\n+        err.note(\"only byte literals (like `b\\\"foo\\\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\");\n+        err.emit();\n+        return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n+    } else if has_errors {\n+        return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n+    }\n+    let sp = cx.with_def_site_ctxt(sp);\n+    base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(accumulator))))\n+}"}, {"sha": "f5acf9db085171a8fbb8c4ffca05869cc5f34e24", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -27,6 +27,7 @@ mod cfg_accessible;\n mod cfg_eval;\n mod compile_error;\n mod concat;\n+mod concat_bytes;\n mod concat_idents;\n mod derive;\n mod deriving;\n@@ -65,6 +66,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n         compile_error: compile_error::expand_compile_error,\n+        concat_bytes: concat_bytes::expand_concat_bytes,\n         concat_idents: concat_idents::expand_concat_idents,\n         concat: concat::expand_concat,\n         env: env::expand_env,"}, {"sha": "6d300bac4109303d5dcf43c29d276f32148b0a4d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -439,6 +439,7 @@ symbols! {\n         compiler_builtins,\n         compiler_fence,\n         concat,\n+        concat_bytes,\n         concat_idents,\n         conservative_impl_trait,\n         console,"}, {"sha": "b18508186a618cbc57d0388bfd9ae2d2bc901f26", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -967,6 +967,34 @@ pub(crate) mod builtin {\n         ($($e:ident),+ $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n+    /// Concatenates literals into a byte slice.\n+    ///\n+    /// This macro takes any number of comma-separated literals, and concatenates them all into\n+    /// one, yielding an expression of type `&[u8, _]`, which represents all of the literals\n+    /// concatenated left-to-right. The literals passed can be any combination of:\n+    ///\n+    /// - byte literals (`b'r'`)\n+    /// - byte strings (`b\"Rust\"`)\n+    /// - arrays of bytes/numbers (`[b'A', 66, b'C']`)\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(concat_bytes)]\n+    ///\n+    /// # fn main() {\n+    /// let s: &[u8; 6] = concat_bytes!(b'A', b\"BC\", [68, b'E', 70]);\n+    /// assert_eq!(s, b\"ABCDEF\");\n+    /// # }\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"concat_bytes\", issue = \"87555\")]\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! concat_bytes {\n+        ($($e:literal),+ $(,)?) => {{ /* compiler built-in */ }};\n+    }\n+\n     /// Concatenates literals into a static string slice.\n     ///\n     /// This macro takes any number of comma-separated literals, yielding an"}, {"sha": "8705eb394688a61a4445da62ae6554b9c6fabec6", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -60,6 +60,15 @@ pub use crate::{\n     option_env, stringify, trace_macros,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+#[doc(no_inline)]\n+pub use crate::concat_bytes;\n+\n #[unstable(\n     feature = \"asm\",\n     issue = \"72016\","}, {"sha": "367f072ffc7f82d7daee16f07804519298465daa", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -250,6 +250,7 @@\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n+#![cfg_attr(not(bootstrap), feature(concat_bytes))]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n@@ -576,6 +577,14 @@ pub use core::{\n     log_syntax, module_path, option_env, stringify, trace_macros,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+pub use core::concat_bytes;\n+\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub use core::primitive;\n "}, {"sha": "9b23aa37e3195761ef3e5fe555c186613a23de5f", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -45,6 +45,15 @@ pub use core::prelude::v1::{\n     PartialOrd,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+#[doc(no_inline)]\n+pub use core::prelude::v1::concat_bytes;\n+\n #[unstable(\n     feature = \"asm\",\n     issue = \"72016\","}, {"sha": "07d63cb11e08565c7738695bcb27d3121ecc85c5", "filename": "src/test/ui/feature-gates/feature-gate-concat_bytes.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a = concat_bytes!(b'A', b\"BC\"); //~ ERROR use of unstable library feature 'concat_bytes'\n+    assert_eq!(a, &[65, 66, 67]);\n+}"}, {"sha": "4b3ee4c19cecd223ce4d3d4e2bb3b76a0ad02b6d", "filename": "src/test/ui/feature-gates/feature-gate-concat_bytes.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'concat_bytes'\n+  --> $DIR/feature-gate-concat_bytes.rs:2:13\n+   |\n+LL |     let a = concat_bytes!(b'A', b\"BC\");\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: see issue #87555 <https://github.com/rust-lang/rust/issues/87555> for more information\n+   = help: add `#![feature(concat_bytes)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9b4a9c2cf811d5393423b65a3e4e20514647ef3e", "filename": "src/test/ui/macros/concat-bytes-error.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,42 @@\n+#![feature(concat_bytes)]\n+\n+fn main() {\n+    concat_bytes!(pie); //~ ERROR expected a byte literal\n+    concat_bytes!(pie, pie); //~ ERROR expected a byte literal\n+    concat_bytes!(\"tnrsi\", \"tnri\"); //~ ERROR cannot concatenate string literals\n+    concat_bytes!(2.8); //~ ERROR cannot concatenate float literals\n+    concat_bytes!(300); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!('a'); //~ ERROR cannot concatenate character literals\n+    concat_bytes!(true, false); //~ ERROR cannot concatenate boolean literals\n+    concat_bytes!(42, b\"va\", b'l'); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!(42, b\"va\", b'l', [1, 2]); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!([\n+        \"hi\", //~ ERROR cannot concatenate string literals\n+    ]);\n+    concat_bytes!([\n+        'a', //~ ERROR cannot concatenate character literals\n+    ]);\n+    concat_bytes!([\n+        true, //~ ERROR cannot concatenate boolean literals\n+    ]);\n+    concat_bytes!([\n+        false, //~ ERROR cannot concatenate boolean literals\n+    ]);\n+    concat_bytes!([\n+        2.6, //~ ERROR cannot concatenate float literals\n+    ]);\n+    concat_bytes!([\n+        265, //~ ERROR numeric literal is out of bounds\n+    ]);\n+    concat_bytes!([\n+        -33, //~ ERROR expected a byte literal\n+    ]);\n+    concat_bytes!([\n+        b\"hi!\", //~ ERROR cannot concatenate doubly nested array\n+    ]);\n+    concat_bytes!([\n+        [5, 6, 7], //~ ERROR cannot concatenate doubly nested array\n+    ]);\n+    concat_bytes!(5u16); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!([5u16]); //~ ERROR numeric literal is not a `u8`\n+}"}, {"sha": "1fc2d5c4843a027f53b4543be64a40c66261c8b3", "filename": "src/test/ui/macros/concat-bytes-error.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,131 @@\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:4:19\n+   |\n+LL |     concat_bytes!(pie);\n+   |                   ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:5:19\n+   |\n+LL |     concat_bytes!(pie, pie);\n+   |                   ^^^  ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: cannot concatenate string literals\n+  --> $DIR/concat-bytes-error.rs:6:19\n+   |\n+LL |     concat_bytes!(\"tnrsi\", \"tnri\");\n+   |                   ^^^^^^^ help: try using a byte string: `b\"tnrsi\"`\n+\n+error: cannot concatenate float literals\n+  --> $DIR/concat-bytes-error.rs:7:19\n+   |\n+LL |     concat_bytes!(2.8);\n+   |                   ^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:8:19\n+   |\n+LL |     concat_bytes!(300);\n+   |                   ^^^ help: try wrapping the number in an array: `[300]`\n+\n+error: cannot concatenate character literals\n+  --> $DIR/concat-bytes-error.rs:9:19\n+   |\n+LL |     concat_bytes!('a');\n+   |                   ^^^ help: try using a byte character: `b'a'`\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:10:19\n+   |\n+LL |     concat_bytes!(true, false);\n+   |                   ^^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:11:19\n+   |\n+LL |     concat_bytes!(42, b\"va\", b'l');\n+   |                   ^^ help: try wrapping the number in an array: `[42]`\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:12:19\n+   |\n+LL |     concat_bytes!(42, b\"va\", b'l', [1, 2]);\n+   |                   ^^ help: try wrapping the number in an array: `[42]`\n+\n+error: cannot concatenate string literals\n+  --> $DIR/concat-bytes-error.rs:14:9\n+   |\n+LL |         \"hi\",\n+   |         ^^^^\n+\n+error: cannot concatenate character literals\n+  --> $DIR/concat-bytes-error.rs:17:9\n+   |\n+LL |         'a',\n+   |         ^^^ help: try using a byte character: `b'a'`\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:20:9\n+   |\n+LL |         true,\n+   |         ^^^^\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:23:9\n+   |\n+LL |         false,\n+   |         ^^^^^\n+\n+error: cannot concatenate float literals\n+  --> $DIR/concat-bytes-error.rs:26:9\n+   |\n+LL |         2.6,\n+   |         ^^^\n+\n+error: numeric literal is out of bounds\n+  --> $DIR/concat-bytes-error.rs:29:9\n+   |\n+LL |         265,\n+   |         ^^^\n+\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:32:9\n+   |\n+LL |         -33,\n+   |         ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:35:9\n+   |\n+LL |         b\"hi!\",\n+   |         ^^^^^^\n+   |\n+   = note: byte strings are treated as arrays of bytes\n+   = help: try flattening the array\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:38:9\n+   |\n+LL |         [5, 6, 7],\n+   |         ^^^^^^^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:40:19\n+   |\n+LL |     concat_bytes!(5u16);\n+   |                   ^^^^ help: try wrapping the number in an array: `[5u16]`\n+\n+error: numeric literal is not a `u8`\n+  --> $DIR/concat-bytes-error.rs:41:20\n+   |\n+LL |     concat_bytes!([5u16]);\n+   |                    ^^^^\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "5415cf3fe2235b260012a377725596898bf09b77", "filename": "src/test/ui/macros/concat-bytes.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb56693a370df5bb60f58f73586cded6a641b0cc/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs?ref=eb56693a370df5bb60f58f73586cded6a641b0cc", "patch": "@@ -0,0 +1,7 @@\n+// run-pass\n+#![feature(concat_bytes)]\n+\n+fn main() {\n+    assert_eq!(concat_bytes!(), &[]);\n+    assert_eq!(concat_bytes!(b'A', b\"BC\", [68, b'E', 70]), b\"ABCDEF\");\n+}"}]}