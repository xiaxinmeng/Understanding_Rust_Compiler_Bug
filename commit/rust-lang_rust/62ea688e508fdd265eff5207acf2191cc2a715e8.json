{"sha": "62ea688e508fdd265eff5207acf2191cc2a715e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWE2ODhlNTA4ZmRkMjY1ZWZmNTIwN2FjZjIxOTFjYzJhNzE1ZTg=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-21T00:01:06Z"}, "committer": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-21T01:29:41Z"}, "message": "core: adding option::or, a function to return the leftmost of two some() values or none if both are none", "tree": {"sha": "7b477a46def0e2c4fa31f4b92b2a34798d111719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b477a46def0e2c4fa31f4b92b2a34798d111719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ea688e508fdd265eff5207acf2191cc2a715e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ea688e508fdd265eff5207acf2191cc2a715e8", "html_url": "https://github.com/rust-lang/rust/commit/62ea688e508fdd265eff5207acf2191cc2a715e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ea688e508fdd265eff5207acf2191cc2a715e8/comments", "author": null, "committer": null, "parents": [{"sha": "c321cdbac6c4ddd9fedb89e1cc8bce1569347c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c321cdbac6c4ddd9fedb89e1cc8bce1569347c5a", "html_url": "https://github.com/rust-lang/rust/commit/c321cdbac6c4ddd9fedb89e1cc8bce1569347c5a"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "bae84796b167502e3e48181cd8e8ebfc337261f0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62ea688e508fdd265eff5207acf2191cc2a715e8/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ea688e508fdd265eff5207acf2191cc2a715e8/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=62ea688e508fdd265eff5207acf2191cc2a715e8", "patch": "@@ -93,6 +93,16 @@ pure fn chain_ref<T, U>(opt: &option<T>,\n     match *opt { some(ref x) => f(x), none => none }\n }\n \n+pure fn or<T>(+opta: option<T>, +optb: option<T>) -> option<T> {\n+    /*!\n+     * Returns the leftmost some() value, or none if both are none.\n+     */\n+    match opta {\n+        some(_) => opta,\n+        _ => optb\n+    }\n+}\n+\n #[inline(always)]\n pure fn while_some<T>(+x: option<T>, blk: fn(+T) -> option<T>) {\n     //! Applies a function zero or more times until the result is none."}]}