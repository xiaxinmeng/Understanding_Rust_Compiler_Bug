{"sha": "5e5924b79915326d81db2aebfe73d2a20b8506f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTkyNGI3OTkxNTMyNmQ4MWRiMmFlYmZlNzNkMmEyMGI4NTA2ZjE=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-15T23:09:09Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-05T19:38:12Z"}, "message": "Replace LetSyntaxTT with MacroRulesTT\n\nThe implementation of LetSyntaxTT was specialized to macro_rules! in various\nways. This gets rid of the false generality and simplifies the code.", "tree": {"sha": "16d55df447ad54f7d8a0dff9a900d12e7b091dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d55df447ad54f7d8a0dff9a900d12e7b091dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e5924b79915326d81db2aebfe73d2a20b8506f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5924b79915326d81db2aebfe73d2a20b8506f1", "html_url": "https://github.com/rust-lang/rust/commit/5e5924b79915326d81db2aebfe73d2a20b8506f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e5924b79915326d81db2aebfe73d2a20b8506f1/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1cf1b1e6bf0b33fe3bb9fa01d9d94f797c9f9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cf1b1e6bf0b33fe3bb9fa01d9d94f797c9f9fc", "html_url": "https://github.com/rust-lang/rust/commit/d1cf1b1e6bf0b33fe3bb9fa01d9d94f797c9f9fc"}], "stats": {"total": 156, "additions": 92, "deletions": 64}, "files": [{"sha": "c5550902f19895aba6efdd5f8254fbef3503a93a", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -11,9 +11,10 @@\n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n use lint::{LintPassObject, LintId, Lint};\n+use session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, LetSyntaxTT, Decorator, Modifier};\n+use syntax::ext::base::{IdentTT, Decorator, Modifier, MacroRulesTT};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -29,7 +30,11 @@ use std::collections::HashMap;\n /// This struct has public fields and other methods for use by `rustc`\n /// itself. They are not documented here, and plugin authors should\n /// not use them.\n-pub struct Registry {\n+pub struct Registry<'a> {\n+    /// Compiler session. Useful if you want to emit diagnostic messages\n+    /// from the plugin registrar.\n+    pub sess: &'a Session,\n+\n     #[doc(hidden)]\n     pub krate_span: Span,\n \n@@ -43,10 +48,11 @@ pub struct Registry {\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n }\n \n-impl Registry {\n+impl<'a> Registry<'a> {\n     #[doc(hidden)]\n-    pub fn new(krate: &ast::Crate) -> Registry {\n+    pub fn new(sess: &'a Session, krate: &ast::Crate) -> Registry<'a> {\n         Registry {\n+            sess: sess,\n             krate_span: krate.span,\n             syntax_exts: vec!(),\n             lint_passes: vec!(),\n@@ -63,8 +69,11 @@ impl Registry {\n             IdentTT(ext, _) => IdentTT(ext, Some(self.krate_span)),\n             Decorator(ext) => Decorator(ext),\n             Modifier(ext) => Modifier(ext),\n-            // there's probably a nicer way to signal this:\n-            LetSyntaxTT(_, _) => panic!(\"can't register a new LetSyntax!\"),\n+\n+            MacroRulesTT => {\n+                self.sess.err(\"plugin tried to register a new MacroRulesTT\");\n+                return;\n+            }\n         }));\n     }\n "}, {"sha": "0d9736a82736fb206477fc655c18d0bf1e6647ed", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -216,7 +216,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         = time(time_passes, \"plugin loading\", (), |_|\n                plugin::load::load_plugins(sess, &krate, addl_plugins.take().unwrap()));\n \n-    let mut registry = Registry::new(&krate);\n+    let mut registry = Registry::new(sess, &krate);\n \n     time(time_passes, \"plugin registration\", (), |_| {\n         if sess.features.borrow().rustc_diagnostic_macros {"}, {"sha": "4b38e6c0cb231374cb822bc51a2c03df502e6118", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -328,13 +328,8 @@ pub enum SyntaxExtension {\n     ///\n     IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n \n-    /// An ident macro that has two properties:\n-    /// - it adds a macro definition to the environment, and\n-    /// - the definition it adds doesn't introduce any new\n-    ///   identifiers.\n-    ///\n-    /// `macro_rules!` is a LetSyntaxTT\n-    LetSyntaxTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n+    /// Represents `macro_rules!` itself.\n+    MacroRulesTT,\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n@@ -364,8 +359,7 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n-    syntax_expanders.insert(intern(\"macro_rules\"),\n-                            LetSyntaxTT(box ext::tt::macro_rules::add_new_extension, None));\n+    syntax_expanders.insert(intern(\"macro_rules\"), MacroRulesTT);\n     syntax_expanders.insert(intern(\"fmt\"),\n                             builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));"}, {"sha": "a1a13f2306477ca7ef3414bf8c5f30bdff5ce7f8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use self::Either::*;\n \n use ast::{Block, Crate, DeclLocal, ExprMac, PatMac};\n use ast::{Local, Ident, MacInvocTT};\n@@ -18,6 +17,7 @@ use ast;\n use ast_util::path_to_ident;\n use ext::mtwt;\n use ext::build::AstBuilder;\n+use ext::tt::macro_rules;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n@@ -33,11 +33,6 @@ use util::small_vector::SmallVector;\n use visit;\n use visit::Visitor;\n \n-enum Either<L,R> {\n-    Left(L),\n-    Right(R)\n-}\n-\n pub fn expand_type(t: P<ast::Ty>,\n                    fld: &mut MacroExpander,\n                    impl_ty: Option<P<ast::Ty>>)\n@@ -548,8 +543,8 @@ pub fn expand_item_mac(it: P<ast::Item>, fld: &mut MacroExpander)\n \n     let extnamestr = token::get_ident(extname);\n     let fm = fresh_mark();\n-    let def_or_items = {\n-        let mut expanded = match fld.cx.syntax_env.find(&extname.name) {\n+    let items = {\n+        let expanded = match fld.cx.syntax_env.find(&extname.name) {\n             None => {\n                 fld.cx.span_err(path_span,\n                                 format!(\"macro undefined: '{}!'\",\n@@ -600,23 +595,32 @@ pub fn expand_item_mac(it: P<ast::Item>, fld: &mut MacroExpander)\n                     let marked_tts = mark_tts(tts[], fm);\n                     expander.expand(fld.cx, it.span, it.ident, marked_tts)\n                 }\n-                LetSyntaxTT(ref expander, span) => {\n+                MacroRulesTT => {\n                     if it.ident.name == parse::token::special_idents::invalid.name {\n                         fld.cx.span_err(path_span,\n-                                        format!(\"macro {}! expects an ident argument\",\n-                                                extnamestr.get())[]);\n+                                        format!(\"macro_rules! expects an ident argument\")[]);\n                         return SmallVector::zero();\n                     }\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n                             name: extnamestr.get().to_string(),\n                             format: MacroBang,\n-                            span: span\n+                            span: None,\n                         }\n                     });\n-                    // DON'T mark before expansion:\n-                    expander.expand(fld.cx, it.span, it.ident, tts)\n+                    // DON'T mark before expansion.\n+                    let MacroDef { name, ext }\n+                        = macro_rules::add_new_extension(fld.cx, it.span, it.ident, tts);\n+\n+                    fld.cx.syntax_env.insert(intern(name.as_slice()), ext);\n+                    if attr::contains_name(it.attrs.as_slice(), \"macro_export\") {\n+                        fld.cx.exported_macros.push(it);\n+                    }\n+\n+                    // macro_rules! has a side effect but expands to nothing.\n+                    fld.cx.bt_pop();\n+                    return SmallVector::zero();\n                 }\n                 _ => {\n                     fld.cx.span_err(it.span,\n@@ -627,31 +631,17 @@ pub fn expand_item_mac(it: P<ast::Item>, fld: &mut MacroExpander)\n             }\n         };\n \n-        match expanded.make_def() {\n-            Some(def) => Left(def),\n-            None => Right(expanded.make_items())\n-        }\n+        expanded.make_items()\n     };\n \n-    let items = match def_or_items {\n-        Left(MacroDef { name, ext }) => {\n-            // hidden invariant: this should only be possible as the\n-            // result of expanding a LetSyntaxTT, and thus doesn't\n-            // need to be marked. Not that it could be marked anyway.\n-            // create issue to recommend refactoring here?\n-            fld.cx.syntax_env.insert(intern(name[]), ext);\n-            if attr::contains_name(it.attrs[], \"macro_export\") {\n-                fld.cx.exported_macros.push(it);\n-            }\n-            SmallVector::zero()\n-        }\n-        Right(Some(items)) => {\n+    let items = match items {\n+        Some(items) => {\n             items.into_iter()\n                 .map(|i| mark_item(i, fm))\n                 .flat_map(|i| fld.fold_item(i).into_iter())\n                 .collect()\n         }\n-        Right(None) => {\n+        None => {\n             fld.cx.span_err(path_span,\n                             format!(\"non-item macro in item position: {}\",\n                                     extnamestr.get())[]);"}, {"sha": "15b75442ca2cb049d016cd0c263100cee469eee2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -129,15 +129,6 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n     }\n }\n \n-struct MacroRulesDefiner {\n-    def: Option<MacroDef>\n-}\n-impl MacResult for MacroRulesDefiner {\n-    fn make_def(&mut self) -> Option<MacroDef> {\n-        Some(self.def.take().expect(\"empty MacroRulesDefiner\"))\n-    }\n-}\n-\n /// Given `lhses` and `rhses`, this is the new macro we create\n fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                           sp: Span,\n@@ -219,7 +210,7 @@ pub fn add_new_extension<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               name: Ident,\n                               arg: Vec<ast::TokenTree> )\n-                              -> Box<MacResult+'cx> {\n+                              -> MacroDef {\n \n     let lhs_nm =  gensym_ident(\"lhs\");\n     let rhs_nm =  gensym_ident(\"rhs\");\n@@ -279,10 +270,8 @@ pub fn add_new_extension<'cx>(cx: &'cx mut ExtCtxt,\n         rhses: rhses,\n     };\n \n-    box MacroRulesDefiner {\n-        def: Some(MacroDef {\n-            name: token::get_ident(name).to_string(),\n-            ext: NormalTT(exp, Some(sp))\n-        })\n-    } as Box<MacResult+'cx>\n+    MacroDef {\n+        name: token::get_ident(name).to_string(),\n+        ext: NormalTT(exp, Some(sp))\n+    }\n }"}, {"sha": "d50c27a4e75bb0efae4bb6c6fbd2e98e03b8bbb3", "filename": "src/test/auxiliary/macro_crate_MacroRulesTT.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_MacroRulesTT.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::parse::token;\n+use syntax::ext::base::MacroRulesTT;\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_syntax_extension(token::intern(\"bogus\"), MacroRulesTT);\n+}"}, {"sha": "302a64c5ed34b33c35a9214cbc5fae86c95db507", "filename": "src/test/compile-fail-fulldeps/plugin-MacroRulesTT.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e5924b79915326d81db2aebfe73d2a20b8506f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-MacroRulesTT.rs?ref=5e5924b79915326d81db2aebfe73d2a20b8506f1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_MacroRulesTT.rs\n+// ignore-stage1\n+// ignore-android\n+// error-pattern: plugin tried to register a new MacroRulesTT\n+\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate macro_crate_MacroRulesTT;\n+\n+fn main() { }"}]}