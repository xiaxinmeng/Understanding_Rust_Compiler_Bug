{"sha": "e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMWQwMDJiZDI0ODVmYjRiZDVhNzgzY2MzZmUzYTFjZjJjYTJjNWE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-24T16:19:53Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-06-03T03:55:29Z"}, "message": "move codegenunitext to rustc::mir::mono", "tree": {"sha": "6c2603cea183227ecf545b16c983eb2dc28ea5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2603cea183227ecf545b16c983eb2dc28ea5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "html_url": "https://github.com/rust-lang/rust/commit/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621bf0da80a9f304906d74657a91ed927f4f9cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/621bf0da80a9f304906d74657a91ed927f4f9cad", "html_url": "https://github.com/rust-lang/rust/commit/621bf0da80a9f304906d74657a91ed927f4f9cad"}], "stats": {"total": 162, "additions": 70, "deletions": 92}, "files": [{"sha": "79228a5c56f2d3fa016c5a114526b8b95a474e36", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "patch": "@@ -3,9 +3,10 @@ use crate::hir::HirId;\n use syntax::symbol::InternedString;\n use syntax::attr::InlineAttr;\n use syntax::source_map::Span;\n-use crate::ty::{Instance, TyCtxt, SymbolName, subst::InternalSubsts};\n+use crate::ty::{Instance, InstanceDef, TyCtxt, SymbolName, subst::InternalSubsts};\n use crate::util::nodemap::FxHashMap;\n use crate::ty::print::obsolete::DefPathBasedNames;\n+use crate::dep_graph::{WorkProductId, DepNode, WorkProduct, DepConstructor};\n use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n                                            StableHasher};\n@@ -350,6 +351,73 @@ impl<'tcx> CodegenUnit<'tcx> {\n             self.size_estimate = Some(size_estimate + delta);\n         }\n     }\n+\n+    pub fn contains_item(&self, item: &MonoItem<'tcx>) -> bool {\n+        self.items().contains_key(item)\n+    }\n+\n+    pub fn work_product_id(&self) -> WorkProductId {\n+        WorkProductId::from_cgu_name(&self.name().as_str())\n+    }\n+\n+    pub fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n+        let work_product_id = self.work_product_id();\n+        tcx.dep_graph\n+           .previous_work_product(&work_product_id)\n+           .unwrap_or_else(|| {\n+                panic!(\"Could not find work-product for CGU `{}`\", self.name())\n+            })\n+    }\n+\n+    pub fn items_in_deterministic_order<'a>(&self,\n+                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                                        -> Vec<(MonoItem<'tcx>,\n+                                                (Linkage, Visibility))> {\n+        // The codegen tests rely on items being process in the same order as\n+        // they appear in the file, so for local items, we sort by node_id first\n+        #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+        pub struct ItemSortKey(Option<HirId>, SymbolName);\n+\n+        fn item_sort_key<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   item: MonoItem<'tcx>) -> ItemSortKey {\n+            ItemSortKey(match item {\n+                MonoItem::Fn(ref instance) => {\n+                    match instance.def {\n+                        // We only want to take HirIds of user-defined\n+                        // instances into account. The others don't matter for\n+                        // the codegen tests and can even make item order\n+                        // unstable.\n+                        InstanceDef::Item(def_id) => {\n+                            tcx.hir().as_local_hir_id(def_id)\n+                        }\n+                        InstanceDef::VtableShim(..) |\n+                        InstanceDef::Intrinsic(..) |\n+                        InstanceDef::FnPtrShim(..) |\n+                        InstanceDef::Virtual(..) |\n+                        InstanceDef::ClosureOnceShim { .. } |\n+                        InstanceDef::DropGlue(..) |\n+                        InstanceDef::CloneShim(..) => {\n+                            None\n+                        }\n+                    }\n+                }\n+                MonoItem::Static(def_id) => {\n+                    tcx.hir().as_local_hir_id(def_id)\n+                }\n+                MonoItem::GlobalAsm(hir_id) => {\n+                    Some(hir_id)\n+                }\n+            }, item.symbol_name(tcx))\n+        }\n+\n+        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n+        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n+        items\n+    }\n+\n+    pub fn codegen_dep_node(&self, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> DepNode {\n+        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for CodegenUnit<'tcx> {"}, {"sha": "09156c0f9e746d040bcc4fe033f2167a46d35ef9", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "patch": "@@ -32,7 +32,6 @@ extern crate flate2;\n #[macro_use] extern crate bitflags;\n extern crate libc;\n #[macro_use] extern crate rustc;\n-extern crate rustc_mir;\n extern crate rustc_allocator;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;"}, {"sha": "0cd29e0213ee7b2ca73ba20b9ca5ce862ce5cf54", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "patch": "@@ -28,7 +28,6 @@ use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::session::config::{self, EntryFnType, Lto};\n use rustc::session::Session;\n-use rustc_mir::monomorphize::partitioning::CodegenUnitExt;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_codegen_utils::{symbol_names_test, check_for_rustc_errors_attr};"}, {"sha": "1895d4871552e2dd4d32a3cb9fc6815dc9dad39a", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "patch": "@@ -97,8 +97,7 @@ use std::cmp;\n use std::sync::Arc;\n \n use syntax::symbol::InternedString;\n-use rustc::dep_graph::{WorkProductId, WorkProduct, DepNode, DepConstructor};\n-use rustc::hir::{CodegenFnAttrFlags, HirId};\n+use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::mir::mono::{Linkage, Visibility, CodegenUnitNameBuilder, CodegenUnit};\n@@ -121,93 +120,6 @@ pub enum PartitioningStrategy {\n     FixedUnitCount(usize)\n }\n \n-pub trait CodegenUnitExt<'tcx> {\n-    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx>;\n-\n-    fn contains_item(&self, item: &MonoItem<'tcx>) -> bool {\n-        self.items().contains_key(item)\n-    }\n-\n-    fn name<'a>(&'a self) -> &'a InternedString\n-        where 'tcx: 'a,\n-    {\n-        &self.as_codegen_unit().name()\n-    }\n-\n-    fn items(&self) -> &FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n-        &self.as_codegen_unit().items()\n-    }\n-\n-    fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(&self.name().as_str())\n-    }\n-\n-    fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n-        let work_product_id = self.work_product_id();\n-        tcx.dep_graph\n-           .previous_work_product(&work_product_id)\n-           .unwrap_or_else(|| {\n-                panic!(\"Could not find work-product for CGU `{}`\", self.name())\n-            })\n-    }\n-\n-    fn items_in_deterministic_order<'a>(&self,\n-                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                        -> Vec<(MonoItem<'tcx>,\n-                                                (Linkage, Visibility))> {\n-        // The codegen tests rely on items being process in the same order as\n-        // they appear in the file, so for local items, we sort by node_id first\n-        #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-        pub struct ItemSortKey(Option<HirId>, ty::SymbolName);\n-\n-        fn item_sort_key<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   item: MonoItem<'tcx>) -> ItemSortKey {\n-            ItemSortKey(match item {\n-                MonoItem::Fn(ref instance) => {\n-                    match instance.def {\n-                        // We only want to take HirIds of user-defined\n-                        // instances into account. The others don't matter for\n-                        // the codegen tests and can even make item order\n-                        // unstable.\n-                        InstanceDef::Item(def_id) => {\n-                            tcx.hir().as_local_hir_id(def_id)\n-                        }\n-                        InstanceDef::VtableShim(..) |\n-                        InstanceDef::Intrinsic(..) |\n-                        InstanceDef::FnPtrShim(..) |\n-                        InstanceDef::Virtual(..) |\n-                        InstanceDef::ClosureOnceShim { .. } |\n-                        InstanceDef::DropGlue(..) |\n-                        InstanceDef::CloneShim(..) => {\n-                            None\n-                        }\n-                    }\n-                }\n-                MonoItem::Static(def_id) => {\n-                    tcx.hir().as_local_hir_id(def_id)\n-                }\n-                MonoItem::GlobalAsm(hir_id) => {\n-                    Some(hir_id)\n-                }\n-            }, item.symbol_name(tcx))\n-        }\n-\n-        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n-        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n-        items\n-    }\n-\n-    fn codegen_dep_node(&self, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> DepNode {\n-        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n-    }\n-}\n-\n-impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n-    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx> {\n-        self\n-    }\n-}\n-\n // Anything we can't find a proper codegen unit for goes into this.\n fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>) -> InternedString {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))"}]}