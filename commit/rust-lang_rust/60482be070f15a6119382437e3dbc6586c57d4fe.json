{"sha": "60482be070f15a6119382437e3dbc6586c57d4fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDgyYmUwNzBmMTVhNjExOTM4MjQzN2UzZGJjNjU4NmM1N2Q0ZmU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-11T22:09:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-11T22:09:56Z"}, "message": "Rollup merge of #65277 - csmoe:fix-move, r=estebank\n\nQuery generator kind for error reporting\n\nFixes https://github.com/rust-lang/rust/pull/65166#discussion_r333114545\nr? @estebank\ncc @cramertj", "tree": {"sha": "42d3991e0327a18ebd6613f57b2e96a15f3e1d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d3991e0327a18ebd6613f57b2e96a15f3e1d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60482be070f15a6119382437e3dbc6586c57d4fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdoP20CRBK7hj4Ov3rIwAAdHIIAEXCYo+1pEh3blRaiy2CAel8\nFM4X3kTCl4xaG9OmV+DhmQ/+fYXxCfcU42SpZ4+Z2Vdsu0o3OkqTVSxMoir6kJay\nojxSEjR+si4/WpcFuDSTBIffGd/E1g3177yVliLJ6G0AtQy91BOxKVBamh56spnB\nNG5SH8djmQR0KeSgZecBpDuaGAaWxoc2i3IYeXOqienEpGIJpBiXNn8Y+2B4PaA7\n3YK6VbUdARcKGg1KLFaxsSkuJqutaM+Mh9mbAx056kQXrIbmXRh73AIQuFwdhHiO\nwWo4REnkF+zX+APMBM3bjKANONbF/paMsNL4xIg17ya8G0e9KdRLVs+i8iWtjSQ=\n=+92t\n-----END PGP SIGNATURE-----\n", "payload": "tree 42d3991e0327a18ebd6613f57b2e96a15f3e1d8a\nparent 9917f062a92e0ef3007b310aeeba8fe1d9ab4e77\nparent 9f6942066bd86a55baf56455a2c53d7d79b6038e\nauthor Tyler Mandry <tmandry@gmail.com> 1570831796 -0700\ncommitter GitHub <noreply@github.com> 1570831796 -0700\n\nRollup merge of #65277 - csmoe:fix-move, r=estebank\n\nQuery generator kind for error reporting\n\nFixes https://github.com/rust-lang/rust/pull/65166#discussion_r333114545\nr? @estebank\ncc @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60482be070f15a6119382437e3dbc6586c57d4fe", "html_url": "https://github.com/rust-lang/rust/commit/60482be070f15a6119382437e3dbc6586c57d4fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60482be070f15a6119382437e3dbc6586c57d4fe/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9917f062a92e0ef3007b310aeeba8fe1d9ab4e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/9917f062a92e0ef3007b310aeeba8fe1d9ab4e77", "html_url": "https://github.com/rust-lang/rust/commit/9917f062a92e0ef3007b310aeeba8fe1d9ab4e77"}, {"sha": "9f6942066bd86a55baf56455a2c53d7d79b6038e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6942066bd86a55baf56455a2c53d7d79b6038e", "html_url": "https://github.com/rust-lang/rust/commit/9f6942066bd86a55baf56455a2c53d7d79b6038e"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "7350f89018be2e1b9c214d8419f2aca3b00f98f1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=60482be070f15a6119382437e3dbc6586c57d4fe", "patch": "@@ -1366,6 +1366,10 @@ impl Body {\n             hir_id: self.value.hir_id,\n         }\n     }\n+\n+    pub fn generator_kind(&self) -> Option<GeneratorKind> {\n+        self.generator_kind\n+    }\n }\n \n /// The type of source expression that caused this generator to be created."}, {"sha": "098258994f4e2a8c31f0ba65163ceb47568ca934", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=60482be070f15a6119382437e3dbc6586c57d4fe", "patch": "@@ -1,5 +1,6 @@\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::{AsyncGeneratorKind, GeneratorKind};\n use rustc::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory, Local,\n     LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, PlaceRef, ProjectionElem, Rvalue,\n@@ -788,7 +789,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     ..\n                 },\n             ) if borrow_spans.for_closure() => self.report_escaping_closure_capture(\n-                borrow_spans.args_or_use(),\n+                borrow_spans,\n                 borrow_span,\n                 region_name,\n                 category,\n@@ -806,7 +807,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 },\n \n             ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n-                borrow_spans.args_or_use(),\n+                borrow_spans,\n                 borrow_span,\n                 region_name,\n                 category,\n@@ -1195,15 +1196,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn report_escaping_closure_capture(\n         &mut self,\n-        args_span: Span,\n+        use_span: UseSpans,\n         var_span: Span,\n         fr_name: &RegionName,\n         category: ConstraintCategory,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n-\n+        let args_span = use_span.args_or_use();\n         let mut err = self.cannot_capture_in_long_lived_closure(\n             args_span,\n             captured_var,\n@@ -1223,12 +1224,25 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             },\n             Err(_) => \"move |<args>| <body>\".to_string()\n         };\n-\n+        let kind = match use_span.generator_kind() {\n+            Some(generator_kind) => match generator_kind {\n+                GeneratorKind::Async(async_kind) => match async_kind {\n+                    AsyncGeneratorKind::Block => \"async block\",\n+                    AsyncGeneratorKind::Closure => \"async closure\",\n+                    _ => bug!(\"async block/closure expected, but async funtion found.\"),\n+                },\n+                GeneratorKind::Gen => \"generator\",\n+            }\n+            None => \"closure\",\n+        };\n         err.span_suggestion(\n             args_span,\n-            &format!(\"to force the closure to take ownership of {} (and any \\\n-                      other referenced variables), use the `move` keyword\",\n-                      captured_var),\n+            &format!(\n+                \"to force the {} to take ownership of {} (and any \\\n+                 other referenced variables), use the `move` keyword\",\n+                 kind,\n+                 captured_var\n+            ),\n             suggestion,\n             Applicability::MachineApplicable,\n         );"}, {"sha": "5e0727d51579fd70d518903f7d690816e0994d35", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=60482be070f15a6119382437e3dbc6586c57d4fe", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir;\n use rustc::hir::def::Namespace;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::GeneratorKind;\n use rustc::mir::{\n     AggregateKind, Constant, Field, Local, LocalKind, Location, Operand,\n     Place, PlaceBase, PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind,\n@@ -14,7 +15,7 @@ use syntax_pos::Span;\n use syntax::symbol::sym;\n \n use super::borrow_set::BorrowData;\n-use super::{MirBorrowckCtxt};\n+use super::MirBorrowckCtxt;\n use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n pub(super) struct IncludingDowncast(pub(super) bool);\n@@ -604,7 +605,7 @@ pub(super) enum UseSpans {\n     // The access is caused by capturing a variable for a closure.\n     ClosureUse {\n         // This is true if the captured variable was from a generator.\n-        is_generator: bool,\n+        generator_kind: Option<GeneratorKind>,\n         // The span of the args of the closure, including the `move` keyword if\n         // it's present.\n         args_span: Span,\n@@ -631,6 +632,13 @@ impl UseSpans {\n         }\n     }\n \n+    pub(super) fn generator_kind(self) -> Option<GeneratorKind> {\n+        match self {\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind,\n+            _ => None,\n+        }\n+    }\n+\n     // Add a span label to the arguments of the closure, if it exists.\n     pub(super) fn args_span_label(\n         self,\n@@ -656,23 +664,23 @@ impl UseSpans {\n     /// Returns `false` if this place is not used in a closure.\n     pub(super) fn for_closure(&self) -> bool {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => !is_generator,\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind.is_none(),\n             _ => false,\n         }\n     }\n \n     /// Returns `false` if this place is not used in a generator.\n     pub(super) fn for_generator(&self) -> bool {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => is_generator,\n+            UseSpans::ClosureUse { generator_kind, .. } => generator_kind.is_some(),\n             _ => false,\n         }\n     }\n \n     /// Describe the span associated with a use of a place.\n     pub(super) fn describe(&self) -> String {\n         match *self {\n-            UseSpans::ClosureUse { is_generator, .. } => if is_generator {\n+            UseSpans::ClosureUse { generator_kind, .. } => if generator_kind.is_some() {\n                 \" in generator\".to_string()\n             } else {\n                 \" in closure\".to_string()\n@@ -794,19 +802,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let  StatementKind::Assign(\n             box(_, Rvalue::Aggregate(ref kind, ref places))\n         ) = stmt.kind {\n-            let (def_id, is_generator) = match kind {\n-                box AggregateKind::Closure(def_id, _) => (def_id, false),\n-                box AggregateKind::Generator(def_id, _, _) => (def_id, true),\n+            let def_id = match kind {\n+                box AggregateKind::Closure(def_id, _)\n+                | box AggregateKind::Generator(def_id, _, _) => def_id,\n                 _ => return OtherUse(stmt.source_info.span),\n             };\n \n             debug!(\n-                \"move_spans: def_id={:?} is_generator={:?} places={:?}\",\n-                def_id, is_generator, places\n+                \"move_spans: def_id={:?} places={:?}\",\n+                def_id, places\n             );\n-            if let Some((args_span, var_span)) = self.closure_span(*def_id, moved_place, places) {\n+            if let Some((args_span, generator_kind, var_span))\n+                = self.closure_span(*def_id, moved_place, places) {\n                 return ClosureUse {\n-                    is_generator,\n+                    generator_kind,\n                     args_span,\n                     var_span,\n                 };\n@@ -857,11 +866,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"borrow_spans: def_id={:?} is_generator={:?} places={:?}\",\n                     def_id, is_generator, places\n                 );\n-                if let Some((args_span, var_span)) = self.closure_span(\n+                if let Some((args_span, generator_kind, var_span)) = self.closure_span(\n                     *def_id, Place::from(target).as_ref(), places\n                 ) {\n                     return ClosureUse {\n-                        is_generator,\n+                        generator_kind,\n                         args_span,\n                         var_span,\n                     };\n@@ -884,7 +893,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         def_id: DefId,\n         target_place: PlaceRef<'cx, 'tcx>,\n         places: &Vec<Operand<'tcx>>,\n-    ) -> Option<(Span, Span)> {\n+    ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\",\n             def_id, target_place, places\n@@ -893,14 +902,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(\n-            .., args_span, _\n+            .., body_id, args_span, _\n         ) = expr {\n             for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) |\n                     Operand::Move(place) if target_place == place.as_ref() => {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        return Some((*args_span, upvar.span));\n+                        let body = self.infcx.tcx.hir().body(*body_id);\n+                        let generator_kind = body.generator_kind();\n+                        return Some((*args_span, generator_kind, upvar.span));\n                     },\n                     _ => {}\n                 }"}, {"sha": "0eb3971d14a38e8fdd53324a99dc7f7e15d7f16b", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60482be070f15a6119382437e3dbc6586c57d4fe/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=60482be070f15a6119382437e3dbc6586c57d4fe", "patch": "@@ -12,7 +12,7 @@ note: generator is returned here\n    |\n LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n    |                    ^^^^^^^^^^"}]}