{"sha": "319c790600c2f8bfccf112da216e64566a61e5b6", "node_id": "C_kwDOAAsO6NoAKDMxOWM3OTA2MDBjMmY4YmZjY2YxMTJkYTIxNmU2NDU2NmE2MWU1YjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-12T18:56:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-14T03:14:02Z"}, "message": "Move auto trait built-in candidate disqualification to a separate method", "tree": {"sha": "39c5db33c0952ee2a93bae4fa5dd413a8f145e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c5db33c0952ee2a93bae4fa5dd413a8f145e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319c790600c2f8bfccf112da216e64566a61e5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319c790600c2f8bfccf112da216e64566a61e5b6", "html_url": "https://github.com/rust-lang/rust/commit/319c790600c2f8bfccf112da216e64566a61e5b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319c790600c2f8bfccf112da216e64566a61e5b6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b335c2d49f1698ada99e3622d3cd482c27c9fc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b335c2d49f1698ada99e3622d3cd482c27c9fc9b", "html_url": "https://github.com/rust-lang/rust/commit/b335c2d49f1698ada99e3622d3cd482c27c9fc9b"}], "stats": {"total": 178, "additions": 101, "deletions": 77}, "files": [{"sha": "10d817f75ac77e1ac6cc0fd616b53a807467fe42", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319c790600c2f8bfccf112da216e64566a61e5b6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c790600c2f8bfccf112da216e64566a61e5b6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=319c790600c2f8bfccf112da216e64566a61e5b6", "patch": "@@ -348,6 +348,14 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ) {\n         let lang_items = self.tcx().lang_items();\n         let trait_def_id = goal.predicate.trait_def_id(self.tcx());\n+\n+        // N.B. When assembling built-in candidates for lang items that are also\n+        // `auto` traits, then the auto trait candidate that is assembled in\n+        // `consider_auto_trait_candidate` MUST be disqualified to remain sound.\n+        //\n+        // Instead of adding the logic here, it's a better idea to add it in\n+        // `EvalCtxt::disqualify_auto_trait_candidate_due_to_possible_impl` in\n+        // `solve::trait_goals` instead.\n         let result = if self.tcx().trait_is_auto(trait_def_id) {\n             G::consider_auto_trait_candidate(self, goal)\n         } else if self.tcx().trait_is_alias(trait_def_id) {"}, {"sha": "abd11a15ac23a4437fde18bc8822fa3ff357ac14", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 93, "deletions": 77, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/319c790600c2f8bfccf112da216e64566a61e5b6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c790600c2f8bfccf112da216e64566a61e5b6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=319c790600c2f8bfccf112da216e64566a61e5b6", "patch": "@@ -147,83 +147,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let self_ty = goal.predicate.self_ty();\n-        match *self_ty.kind() {\n-            // Stall int and float vars until they are resolved to a concrete\n-            // numerical type. That's because the check for impls below treats\n-            // int vars as matching any impl. Even if we filtered such impls,\n-            // we probably don't want to treat an `impl !AutoTrait for i32` as\n-            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n-                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n-            }\n-\n-            // These types cannot be structurally decomposed into constitutent\n-            // types, and therefore have no builtin impl.\n-            ty::Dynamic(..)\n-            | ty::Param(..)\n-            | ty::Foreign(..)\n-            | ty::Alias(ty::Projection, ..)\n-            | ty::Placeholder(..) => return Err(NoSolution),\n-\n-            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n-\n-            // Generators have one special built-in candidate, `Unpin`, which\n-            // takes precedence over the structural auto trait candidate being\n-            // assembled.\n-            ty::Generator(_, _, movability)\n-                if Some(goal.predicate.def_id()) == ecx.tcx().lang_items().unpin_trait() =>\n-            {\n-                match movability {\n-                    Movability::Static => {\n-                        return Err(NoSolution);\n-                    }\n-                    Movability::Movable => {\n-                        return ecx\n-                            .evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n-                    }\n-                }\n-            }\n-\n-            // For rigid types, we only register a builtin auto implementation\n-            // if there is no implementation that could ever apply to the self\n-            // type.\n-            //\n-            // This differs from the current stable behavior and fixes #84857.\n-            // Due to breakage found via crater, we currently instead lint\n-            // patterns which can be used to exploit this unsoundness on stable,\n-            // see #93367 for more details.\n-            ty::Bool\n-            | ty::Char\n-            | ty::Int(_)\n-            | ty::Uint(_)\n-            | ty::Float(_)\n-            | ty::Str\n-            | ty::Array(_, _)\n-            | ty::Slice(_)\n-            | ty::RawPtr(_)\n-            | ty::Ref(_, _, _)\n-            | ty::FnDef(_, _)\n-            | ty::FnPtr(_)\n-            | ty::Closure(_, _)\n-            | ty::Generator(_, _, _)\n-            | ty::GeneratorWitness(_)\n-            | ty::GeneratorWitnessMIR(_, _)\n-            | ty::Never\n-            | ty::Tuple(_)\n-            | ty::Error(_)\n-            | ty::Adt(_, _)\n-            | ty::Alias(ty::Opaque, _) => {\n-                if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n-                    goal.predicate.def_id(),\n-                    goal.predicate.self_ty(),\n-                    TreatProjections::NextSolverLookup,\n-                    Some,\n-                ) {\n-                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n-                    return Err(NoSolution);\n-                }\n-            }\n+        if let Some(result) = ecx.disqualify_auto_trait_candidate_due_to_possible_impl(goal) {\n+            return result;\n         }\n \n         ecx.probe_and_evaluate_goal_for_constituent_tys(\n@@ -647,6 +572,97 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    // Return `Some` if there is an impl (built-in or user provided) that may\n+    // hold for the self type of the goal, which for coherence and soundness\n+    // purposes must disqualify the built-in auto impl assembled by considering\n+    // the type's constituent types.\n+    fn disqualify_auto_trait_candidate_due_to_possible_impl(\n+        &mut self,\n+        goal: Goal<'tcx, TraitPredicate<'tcx>>,\n+    ) -> Option<QueryResult<'tcx>> {\n+        let self_ty = goal.predicate.self_ty();\n+        match *self_ty.kind() {\n+            // Stall int and float vars until they are resolved to a concrete\n+            // numerical type. That's because the check for impls below treats\n+            // int vars as matching any impl. Even if we filtered such impls,\n+            // we probably don't want to treat an `impl !AutoTrait for i32` as\n+            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS))\n+            }\n+\n+            // These types cannot be structurally decomposed into constitutent\n+            // types, and therefore have no built-in auto impl.\n+            ty::Dynamic(..)\n+            | ty::Param(..)\n+            | ty::Foreign(..)\n+            | ty::Alias(ty::Projection, ..)\n+            | ty::Placeholder(..) => Some(Err(NoSolution)),\n+\n+            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n+\n+            // Generators have one special built-in candidate, `Unpin`, which\n+            // takes precedence over the structural auto trait candidate being\n+            // assembled.\n+            ty::Generator(_, _, movability)\n+                if Some(goal.predicate.def_id()) == self.tcx().lang_items().unpin_trait() =>\n+            {\n+                match movability {\n+                    Movability::Static => Some(Err(NoSolution)),\n+                    Movability::Movable => {\n+                        Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes))\n+                    }\n+                }\n+            }\n+\n+            // For rigid types, any possible implementation that could apply to\n+            // the type (even if after unification and processing nested goals\n+            // it does not hold) will disqualify the built-in auto impl.\n+            //\n+            // This differs from the current stable behavior and fixes #84857.\n+            // Due to breakage found via crater, we currently instead lint\n+            // patterns which can be used to exploit this unsoundness on stable,\n+            // see #93367 for more details.\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Adt(_, _)\n+            // FIXME: Handling opaques here is kinda sus. Especially because we\n+            // simplify them to PlaceholderSimplifiedType.\n+            | ty::Alias(ty::Opaque, _) => {\n+                if let Some(def_id) = self.tcx().find_map_relevant_impl(\n+                    goal.predicate.def_id(),\n+                    goal.predicate.self_ty(),\n+                    TreatProjections::NextSolverLookup,\n+                    Some,\n+                ) {\n+                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n+                    // No need to actually consider the candidate here,\n+                    // since we do that in `consider_impl_candidate`.\n+                    return Some(Err(NoSolution));\n+                } else {\n+                    None\n+                }\n+            }\n+            ty::Error(_) => None,\n+        }\n+    }\n+\n     /// Convenience function for traits that are structural, i.e. that only\n     /// have nested subgoals that only change the self type. Unlike other\n     /// evaluate-like helpers, this does a probe, so it doesn't need to be"}]}