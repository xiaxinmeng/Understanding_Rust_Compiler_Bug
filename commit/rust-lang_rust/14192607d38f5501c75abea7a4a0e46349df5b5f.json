{"sha": "14192607d38f5501c75abea7a4a0e46349df5b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MTkyNjA3ZDM4ZjU1MDFjNzVhYmVhN2E0YTBlNDYzNDlkZjViNWY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-01T00:25:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-01T00:25:45Z"}, "message": "Avoid `SmallVec::collect()` in `SubstsRef::super_fold_with()`.\n\nThis commit reduces instruction counts for several benchmarks by up to\n5%.", "tree": {"sha": "63c645c9d8017758b21a49e8d18afc7e63ad4c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63c645c9d8017758b21a49e8d18afc7e63ad4c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14192607d38f5501c75abea7a4a0e46349df5b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14192607d38f5501c75abea7a4a0e46349df5b5f", "html_url": "https://github.com/rust-lang/rust/commit/14192607d38f5501c75abea7a4a0e46349df5b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14192607d38f5501c75abea7a4a0e46349df5b5f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c68947ad88f22a8342fe6b54dc0fe54de6e011", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c68947ad88f22a8342fe6b54dc0fe54de6e011", "html_url": "https://github.com/rust-lang/rust/commit/06c68947ad88f22a8342fe6b54dc0fe54de6e011"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "7d03881fff2c61292f9a63479ffc4724e594dd06", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14192607d38f5501c75abea7a4a0e46349df5b5f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14192607d38f5501c75abea7a4a0e46349df5b5f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=14192607d38f5501c75abea7a4a0e46349df5b5f", "patch": "@@ -383,14 +383,41 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let params: SmallVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n-\n-        // If folding doesn't change the substs, it's faster to avoid\n-        // calling `mk_substs` and instead reuse the existing substs.\n-        if params[..] == self[..] {\n-            self\n-        } else {\n-            folder.tcx().intern_substs(&params)\n+        // This code is hot enough that it's worth specializing for the most\n+        // common length lists, to avoid the overhead of `SmallVec` creation.\n+        // The match arms are in order of frequency. The 1, 2, and 0 cases are\n+        // typically hit in 90--99.99% of cases. When folding doesn't change\n+        // the substs, it's faster to reuse the existing substs rather than\n+        // calling `intern_substs`.\n+        match self.len() {\n+            1 => {\n+                let param0 = self[0].fold_with(folder);\n+                if param0 == self[0] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&[param0])\n+                }\n+            }\n+            2 => {\n+                let param0 = self[0].fold_with(folder);\n+                let param1 = self[1].fold_with(folder);\n+                if param0 == self[0] && param1 == self[1] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&[param0, param1])\n+                }\n+            }\n+            0 => {\n+                self\n+            }\n+            _ => {\n+                let params: SmallVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n+                if params[..] == self[..] {\n+                    self\n+                } else {\n+                    folder.tcx().intern_substs(&params)\n+                }\n+            }\n         }\n     }\n "}]}