{"sha": "96b288f593b67f535175b0fa82e81658b5a3e65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YjI4OGY1OTNiNjdmNTM1MTc1YjBmYTgyZTgxNjU4YjVhM2U2NWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-11T09:10:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-11T09:10:46Z"}, "message": "Rollup merge of #67164 - matthewjasper:never-remove-const, r=oli-obk\n\nEnsure that panicking in constants eventually errors\n\nbased on #67134\n\ncloses #66975\n\nr? @oli-obk", "tree": {"sha": "87ae3592804c2714e46ba71c251d34c4247638a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ae3592804c2714e46ba71c251d34c4247638a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b288f593b67f535175b0fa82e81658b5a3e65d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8LKWCRBK7hj4Ov3rIwAAdHIIAFn42l5+Di4DxS4Z6slxSPCY\nFNj5e+YSn3+UE9jYqeUbkhl7iIMl85iNrWD8amO2ajS0u6ejfsx6HiwKOTmjRCcI\nGLuMjc6ZeWuWF9/vA0gYtEoQAvD2UQ7AQV1QGT5zFApl2bZ/Pun21Cr7/Hsd/qll\ntRgIXiXlhHR40fWDcAeAUXWy0uFYi02Ofm02/SUw/zmmpAOhBCmmk70CbbJpbjBJ\nnv/GniB58ejKBcquFKiqDCxYx7i3clg1ajeIlPYgiJJIWKeoQ2htfD8e7cukfRe+\nEbcctOo2Wp9ZkhckrcodJIVsX5Qwob11OoPc8srlKbfWd1hS+Tl/N1tblj5LMfM=\n=yAcj\n-----END PGP SIGNATURE-----\n", "payload": "tree 87ae3592804c2714e46ba71c251d34c4247638a9\nparent 4c3e95e84b0924f0b7e45a2bb1c74f3d7bec4691\nparent d2ed209699b169808293223f6a3b83e755fdf708\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576055446 +0100\ncommitter GitHub <noreply@github.com> 1576055446 +0100\n\nRollup merge of #67164 - matthewjasper:never-remove-const, r=oli-obk\n\nEnsure that panicking in constants eventually errors\n\nbased on #67134\n\ncloses #66975\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b288f593b67f535175b0fa82e81658b5a3e65d", "html_url": "https://github.com/rust-lang/rust/commit/96b288f593b67f535175b0fa82e81658b5a3e65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b288f593b67f535175b0fa82e81658b5a3e65d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3e95e84b0924f0b7e45a2bb1c74f3d7bec4691", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e95e84b0924f0b7e45a2bb1c74f3d7bec4691", "html_url": "https://github.com/rust-lang/rust/commit/4c3e95e84b0924f0b7e45a2bb1c74f3d7bec4691"}, {"sha": "d2ed209699b169808293223f6a3b83e755fdf708", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ed209699b169808293223f6a3b83e755fdf708", "html_url": "https://github.com/rust-lang/rust/commit/d2ed209699b169808293223f6a3b83e755fdf708"}], "stats": {"total": 151, "additions": 150, "deletions": 1}, "files": [{"sha": "07a44b190b20a53beef319459d73547ad0cec9bf", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -65,7 +65,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     _ => false,\n                 };\n \n-                unpack!(block = this.as_local_rvalue(block, source));\n+                // (#66975) Source could be a const of type `!`, so has to\n+                // exist in the generated MIR.\n+                unpack!(block = this.as_temp(\n+                    block,\n+                    this.local_scope(),\n+                    source,\n+                    Mutability::Mut,\n+                ));\n \n                 // This is an optimization. If the expression was a call then we already have an\n                 // unreachable block. Don't bother to terminate it and create a new one."}, {"sha": "5d59b2f48429d240ac5c9cec2f445bb06982df0f", "filename": "src/test/mir-opt/retain-never-const.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretain-never-const.rs?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,28 @@\n+// Regression test for #66975 - ensure that we don't keep unevaluated\n+// `!`-typed constants until codegen.\n+\n+// Force generation of optimized mir for functions that do not reach codegen.\n+// compile-flags: --emit mir,link\n+\n+#![feature(const_panic)]\n+\n+struct PrintName<T>(T);\n+\n+impl<T> PrintName<T> {\n+    const VOID: ! = panic!();\n+}\n+\n+fn no_codegen<T>() {\n+    let _ = PrintName::<T>::VOID;\n+}\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.no_codegen.PreCodegen.after.mir\n+// bb0: {\n+//     StorageLive(_1);\n+//     _1 = const PrintName::<T>::VOID;\n+//     unreachable;\n+// }\n+// END rustc.no_codegen.PreCodegen.after.mir"}, {"sha": "516ca4f3f77e0f25492dff2a15235fa9803d115a", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #66975\n+#![warn(const_err)]\n+\n+struct PrintName<T>(T);\n+\n+impl<T> PrintName<T> {\n+    const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n+    //~^ WARN any use of this value will cause an error\n+}\n+\n+fn f<T>() {\n+    let _ = PrintName::<T>::VOID;\n+    //~^ ERROR erroneous constant encountered\n+}\n+\n+pub fn main() {\n+    f::<()>();\n+}"}, {"sha": "e2bd8d0cc85ea09ca4825dee6ee2ee4b6a598087", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,22 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/index-out-of-bounds-never-type.rs:7:61\n+   |\n+LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n+   |     --------------------------------------------------------^^^^^---\n+   |                                                             |\n+   |                                                             index out of bounds: the len is 0 but the index is 0\n+   |\n+note: lint level defined here\n+  --> $DIR/index-out-of-bounds-never-type.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: erroneous constant encountered\n+  --> $DIR/index-out-of-bounds-never-type.rs:12:13\n+   |\n+LL |     let _ = PrintName::<T>::VOID;\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b39d9af5546f848b3071a84b43e5fa4c7820a154", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for #66975\n+#![warn(const_err)]\n+#![feature(const_panic)]\n+\n+struct PrintName;\n+\n+impl PrintName {\n+    const VOID: ! = panic!();\n+    //~^ WARN any use of this value will cause an error\n+}\n+\n+fn main() {\n+    let _ = PrintName::VOID;\n+    //~^ ERROR erroneous constant used\n+}"}, {"sha": "c07c8c65a2f20a3cb705d6ec465e08c19bdc0ee0", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,24 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/panic-assoc-never-type.rs:8:21\n+   |\n+LL |     const VOID: ! = panic!();\n+   |     ----------------^^^^^^^^-\n+   |                     |\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:8:21\n+   |\n+note: lint level defined here\n+  --> $DIR/panic-assoc-never-type.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/panic-assoc-never-type.rs:13:13\n+   |\n+LL |     let _ = PrintName::VOID;\n+   |             ^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "42eabbf58470f92555f17b1763ef4ddb78c39866", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #66975\n+#![warn(const_err)]\n+#![feature(const_panic)]\n+\n+const VOID: ! = panic!();\n+//~^ WARN any use of this value will cause an error\n+\n+fn main() {\n+    let _ = VOID;\n+    //~^ ERROR erroneous constant used\n+}"}, {"sha": "4fb11a61525f493ff406699c9080623312bec57b", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96b288f593b67f535175b0fa82e81658b5a3e65d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=96b288f593b67f535175b0fa82e81658b5a3e65d", "patch": "@@ -0,0 +1,24 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/panic-never-type.rs:5:17\n+   |\n+LL | const VOID: ! = panic!();\n+   | ----------------^^^^^^^^-\n+   |                 |\n+   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n+   |\n+note: lint level defined here\n+  --> $DIR/panic-never-type.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/panic-never-type.rs:9:13\n+   |\n+LL |     let _ = VOID;\n+   |             ^^^^ referenced constant has errors\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}