{"sha": "668bc485da68efd4d9a10718088c301c5f7ab402", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OGJjNDg1ZGE2OGVmZDRkOWExMDcxODA4OGMzMDFjNWY3YWI0MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T20:24:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T20:24:24Z"}, "message": "Auto merge of #5101 - Areredify:let_underscore_lock, r=flip1995\n\nadd `let_underscore_lock` lint\n\ncloses #1574\nchangelog: add `let_underscore_lock` lint\n\nI am not entirely sure about my docs/messages wording here, improvements are welcome", "tree": {"sha": "238e51fd9da36b784165fe48d85498dd9d6b75ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238e51fd9da36b784165fe48d85498dd9d6b75ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668bc485da68efd4d9a10718088c301c5f7ab402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668bc485da68efd4d9a10718088c301c5f7ab402", "html_url": "https://github.com/rust-lang/rust/commit/668bc485da68efd4d9a10718088c301c5f7ab402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668bc485da68efd4d9a10718088c301c5f7ab402/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8002bad1144d90be144cc0b7295fd7ca3473269f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8002bad1144d90be144cc0b7295fd7ca3473269f", "html_url": "https://github.com/rust-lang/rust/commit/8002bad1144d90be144cc0b7295fd7ca3473269f"}, {"sha": "63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990", "html_url": "https://github.com/rust-lang/rust/commit/63ab7a5e8cf8f2d0b3b40fa611e07e15ae204990"}], "stats": {"total": 157, "additions": 139, "deletions": 18}, "files": [{"sha": "32427225769793ff4c2cd297a98ddbf7c42051e1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -1153,6 +1153,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist"}, {"sha": "b68eb3ed7fab8beaf433b2e369efcfebd789f004", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 351 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "c2a404ebee7cc0830296946a00f52b6ee3149777", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, span_lint_and_help};\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -30,7 +30,40 @@ declare_clippy_lint! {\n     \"non-binding let on a `#[must_use]` expression\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = sync_lock`\n+    ///\n+    /// **Why is this bad?** This statement immediately drops the lock instead of\n+    /// extending it's lifetime to the end of the scope, which is often not intended.\n+    /// To extend lock lifetime to the end of the scope, use an underscore-prefixed\n+    /// name instead (i.e. _lock). If you want to explicitly drop the lock,\n+    /// `std::mem::drop` conveys your intention better and is less error-prone.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// let _ = mutex.lock();\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// let _lock = mutex.lock();\n+    /// ```\n+    pub LET_UNDERSCORE_LOCK,\n+    correctness,\n+    \"non-binding let on a synchronization lock\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+\n+const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n+    &paths::MUTEX_GUARD,\n+    &paths::RWLOCK_READ_GUARD,\n+    &paths::RWLOCK_WRITE_GUARD,\n+];\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt<'_>) {\n@@ -43,8 +76,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n-                if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n-                   span_lint_and_help(\n+                let check_ty = |ty| SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, ty, path));\n+                if cx.tables.expr_ty(init).walk().any(check_ty) {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_LOCK,\n+                        stmt.span,\n+                        \"non-binding let on a synchronization lock\",\n+                        \"consider using an underscore-prefixed named \\\n+                            binding or dropping explicitly with `std::mem::drop`\"\n+                    )\n+                } else if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n+                    span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,"}, {"sha": "443a9c7e9d9da50159c15c17ff95106738aa0926", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -566,6 +566,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n         &lifetimes::NEEDLESS_LIFETIMES,\n@@ -1171,6 +1172,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n@@ -1556,6 +1558,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::INFINITE_ITER),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n         LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n         LintId::of(&loops::FOR_LOOP_OVER_RESULT),"}, {"sha": "0af7f946fa9d5238ec4c4a91d3fb25f5973ff548", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -58,6 +58,7 @@ pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINITIALIZED: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n@@ -100,6 +101,8 @@ pub const REPEAT: [&str; 3] = [\"core\", \"iter\", \"repeat\"];\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n+pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n+pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];"}, {"sha": "0c5b8146b136114e453297f82fbde96a75ee76b1", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 350] = [\n+pub const ALL_LINTS: [Lint; 351] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -959,6 +959,13 @@ pub const ALL_LINTS: [Lint; 350] = [\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_lock\",\n+        group: \"correctness\",\n+        desc: \"non-binding let on a synchronization lock\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_underscore_must_use\",\n         group: \"restriction\","}, {"sha": "88fb216a74329597eb2c0d2fe29f696b952ca30f", "filename": "tests/ui/let_underscore_lock.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::let_underscore_lock)]\n+\n+fn main() {\n+    let m = std::sync::Mutex::new(());\n+    let rw = std::sync::RwLock::new(());\n+\n+    let _ = m.lock();\n+    let _ = rw.read();\n+    let _ = rw.write();\n+    let _ = m.try_lock();\n+    let _ = rw.try_read();\n+    let _ = rw.try_write();\n+}"}, {"sha": "5d5f6059ef13e93b51387b3a2adca96142526727", "filename": "tests/ui/let_underscore_lock.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -0,0 +1,51 @@\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:7:5\n+   |\n+LL |     let _ = m.lock();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-lock` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:8:5\n+   |\n+LL |     let _ = rw.read();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:9:5\n+   |\n+LL |     let _ = rw.write();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:10:5\n+   |\n+LL |     let _ = m.try_lock();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:11:5\n+   |\n+LL |     let _ = rw.try_read();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:12:5\n+   |\n+LL |     let _ = rw.try_write();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "7f481542fa73b2579257b83337bd57fd763c6d51", "filename": "tests/ui/let_underscore_must_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "previous_filename": "tests/ui/let_underscore.rs"}, {"sha": "447f2419e3bdb50932203b3ca2af5d7a33a3b1a8", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668bc485da68efd4d9a10718088c301c5f7ab402/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=668bc485da68efd4d9a10718088c301c5f7ab402", "patch": "@@ -1,5 +1,5 @@\n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:66:5\n+  --> $DIR/let_underscore_must_use.rs:66:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n@@ -8,87 +8,87 @@ LL |     let _ = f();\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:67:5\n+  --> $DIR/let_underscore_must_use.rs:67:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:69:5\n+  --> $DIR/let_underscore_must_use.rs:69:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:73:5\n+  --> $DIR/let_underscore_must_use.rs:73:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:74:5\n+  --> $DIR/let_underscore_must_use.rs:74:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:77:5\n+  --> $DIR/let_underscore_must_use.rs:77:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:78:5\n+  --> $DIR/let_underscore_must_use.rs:78:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:80:5\n+  --> $DIR/let_underscore_must_use.rs:80:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:82:5\n+  --> $DIR/let_underscore_must_use.rs:82:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore.rs:86:5\n+  --> $DIR/let_underscore_must_use.rs:86:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:88:5\n+  --> $DIR/let_underscore_must_use.rs:88:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore.rs:90:5\n+  --> $DIR/let_underscore_must_use.rs:90:5\n    |\n LL |     let _ = a;\n    |     ^^^^^^^^^^", "previous_filename": "tests/ui/let_underscore.stderr"}]}