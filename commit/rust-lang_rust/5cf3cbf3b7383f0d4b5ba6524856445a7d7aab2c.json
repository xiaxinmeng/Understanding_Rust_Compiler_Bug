{"sha": "5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "node_id": "C_kwDOAAsO6NoAKDVjZjNjYmYzYjczODNmMGQ0YjViYTY1MjQ4NTY0NDVhN2Q3YWFiMmM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-20T17:53:16Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-24T14:16:14Z"}, "message": "Remove \"V1\" from ArgumentsV1 and FlagsV1.", "tree": {"sha": "2039c2670fab023f9c345ff325878134f7c1988a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2039c2670fab023f9c345ff325878134f7c1988a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "html_url": "https://github.com/rust-lang/rust/commit/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bcb326516ef7490db46de88b87a4c0990097fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bcb326516ef7490db46de88b87a4c0990097fe", "html_url": "https://github.com/rust-lang/rust/commit/64bcb326516ef7490db46de88b87a4c0990097fe"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "a46058795894f8e302c7e591fbb02a94054c2731", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -186,7 +186,7 @@ enum ArgumentType {\n /// Generates:\n ///\n /// ```text\n-///     <core::fmt::ArgumentV1>::new_\u2026(arg)\n+///     <core::fmt::Argument>::new_\u2026(arg)\n /// ```\n fn make_argument<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n@@ -327,7 +327,7 @@ fn make_format_spec<'hir>(\n             None => sym::Unknown,\n         },\n     );\n-    // This needs to match `FlagV1` in library/core/src/fmt/mod.rs.\n+    // This needs to match `Flag` in library/core/src/fmt/mod.rs.\n     let flags: u32 = ((sign == Some(FormatSign::Plus)) as u32)\n         | ((sign == Some(FormatSign::Minus)) as u32) << 1\n         | (alternate as u32) << 2\n@@ -438,7 +438,7 @@ fn expand_format_args<'hir>(\n     // If the args array contains exactly all the original arguments once,\n     // in order, we can use a simple array instead of a `match` construction.\n     // However, if there's a yield point in any argument except the first one,\n-    // we don't do this, because an ArgumentV1 cannot be kept across yield points.\n+    // we don't do this, because an Argument cannot be kept across yield points.\n     //\n     // This is an optimization, speeding up compilation about 1-2% in some cases.\n     // See https://github.com/rust-lang/rust/pull/106770#issuecomment-1380790609\n@@ -449,9 +449,9 @@ fn expand_format_args<'hir>(\n     let args = if use_simple_array {\n         // Generate:\n         //     &[\n-        //         <core::fmt::ArgumentV1>::new_display(&arg0),\n-        //         <core::fmt::ArgumentV1>::new_lower_hex(&arg1),\n-        //         <core::fmt::ArgumentV1>::new_debug(&arg2),\n+        //         <core::fmt::Argument>::new_display(&arg0),\n+        //         <core::fmt::Argument>::new_lower_hex(&arg1),\n+        //         <core::fmt::Argument>::new_debug(&arg2),\n         //         \u2026\n         //     ]\n         let elements: Vec<_> = arguments\n@@ -477,9 +477,9 @@ fn expand_format_args<'hir>(\n         // Generate:\n         //     &match (&arg0, &arg1, &\u2026) {\n         //         args => [\n-        //             <core::fmt::ArgumentV1>::new_display(args.0),\n-        //             <core::fmt::ArgumentV1>::new_lower_hex(args.1),\n-        //             <core::fmt::ArgumentV1>::new_debug(args.0),\n+        //             <core::fmt::Argument>::new_display(args.0),\n+        //             <core::fmt::Argument>::new_lower_hex(args.1),\n+        //             <core::fmt::Argument>::new_debug(args.0),\n         //             \u2026\n         //         ]\n         //     }"}, {"sha": "4fb668545712e58ae0a84807edb15b45015d578a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -296,7 +296,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 diag_trait(&mut err, self_ty, tcx.require_lang_item(LangItem::Deref, Some(span)));\n                 err\n             }\n-            _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentV1Methods) => ccx\n+            _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentMethods) => ccx\n                 .tcx\n                 .sess\n                 .create_err(errors::NonConstFmtMacroCall { span, kind: ccx.const_kind() }),"}, {"sha": "9b4a2a0e7ff5fadfb97005a5a6fd230c59b92443", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -129,8 +129,7 @@ symbols! {\n         Any,\n         Arc,\n         Argument,\n-        ArgumentV1,\n-        ArgumentV1Methods,\n+        ArgumentMethods,\n         Arguments,\n         AsMut,\n         AsRef,"}, {"sha": "19d69e5c35e12b4f8ef2264b1aed054736ce2ecf", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -267,7 +267,7 @@ extern \"C\" {\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n #[doc(hidden)]\n-pub struct ArgumentV1<'a> {\n+pub struct Argument<'a> {\n     value: &'a Opaque,\n     formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n }\n@@ -321,18 +321,18 @@ macro_rules! arg_new {\n         #[doc(hidden)]\n         #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n         #[inline]\n-        pub fn $f<'b, T: $t>(x: &'b T) -> ArgumentV1<'_> {\n+        pub fn $f<'b, T: $t>(x: &'b T) -> Argument<'_> {\n             Self::new(x, $t::fmt)\n         }\n     };\n }\n \n-#[rustc_diagnostic_item = \"ArgumentV1Methods\"]\n-impl<'a> ArgumentV1<'a> {\n+#[rustc_diagnostic_item = \"ArgumentMethods\"]\n+impl<'a> Argument<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     #[inline]\n-    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n+    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> Argument<'b> {\n         // SAFETY: `mem::transmute(x)` is safe because\n         //     1. `&'b T` keeps the lifetime it originated with `'b`\n         //              (so as to not have an unbounded lifetime)\n@@ -341,7 +341,7 @@ impl<'a> ArgumentV1<'a> {\n         // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`\n         // and `fn(&Opaque, &mut Formatter<'_>) -> Result` have the same ABI\n         // (as long as `T` is `Sized`)\n-        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }\n+        unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }\n     }\n \n     arg_new!(new_display, Display);\n@@ -356,8 +356,8 @@ impl<'a> ArgumentV1<'a> {\n \n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n-        ArgumentV1::new(x, USIZE_MARKER)\n+    pub fn from_usize(x: &usize) -> Argument<'_> {\n+        Argument::new(x, USIZE_MARKER)\n     }\n \n     fn as_usize(&self) -> Option<usize> {\n@@ -377,7 +377,7 @@ impl<'a> ArgumentV1<'a> {\n \n // flags available in the v1 format of format_args\n #[derive(Copy, Clone)]\n-enum FlagV1 {\n+enum Flag {\n     SignPlus,\n     SignMinus,\n     Alternate,\n@@ -404,7 +404,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+    pub fn new_v1(pieces: &'a [&'static str], args: &'a [Argument<'a>]) -> Arguments<'a> {\n         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n             panic!(\"invalid args\");\n         }\n@@ -416,7 +416,7 @@ impl<'a> Arguments<'a> {\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n-    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [Argument<'a>]) -> Arguments<'a> {\n         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n             panic!(\"invalid args\");\n         }\n@@ -435,7 +435,7 @@ impl<'a> Arguments<'a> {\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new_v1_formatted(\n         pieces: &'a [&'static str],\n-        args: &'a [ArgumentV1<'a>],\n+        args: &'a [Argument<'a>],\n         fmt: &'a [rt::Placeholder],\n         _unsafe_arg: UnsafeArg,\n     ) -> Arguments<'a> {\n@@ -502,7 +502,7 @@ pub struct Arguments<'a> {\n \n     // Dynamic arguments for interpolation, to be interleaved with string\n     // pieces. (Every argument is preceded by a string piece.)\n-    args: &'a [ArgumentV1<'a>],\n+    args: &'a [Argument<'a>],\n }\n \n impl<'a> Arguments<'a> {\n@@ -1274,7 +1274,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n-unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[ArgumentV1<'_>]) -> Result {\n+unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[Argument<'_>]) -> Result {\n     fmt.fill = arg.fill;\n     fmt.align = arg.align;\n     fmt.flags = arg.flags;\n@@ -1295,7 +1295,7 @@ unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Placeholder, args: &[ArgumentV1\n     (value.formatter)(value.value, fmt)\n }\n \n-unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::Count) -> Option<usize> {\n+unsafe fn getcount(args: &[Argument<'_>], cnt: &rt::Count) -> Option<usize> {\n     match *cnt {\n         rt::Count::Is(n) => Some(n),\n         rt::Count::Implied => None,\n@@ -1878,7 +1878,7 @@ impl<'a> Formatter<'a> {\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool {\n-        self.flags & (1 << FlagV1::SignPlus as u32) != 0\n+        self.flags & (1 << Flag::SignPlus as u32) != 0\n     }\n \n     /// Determines if the `-` flag was specified.\n@@ -1907,7 +1907,7 @@ impl<'a> Formatter<'a> {\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool {\n-        self.flags & (1 << FlagV1::SignMinus as u32) != 0\n+        self.flags & (1 << Flag::SignMinus as u32) != 0\n     }\n \n     /// Determines if the `#` flag was specified.\n@@ -1935,7 +1935,7 @@ impl<'a> Formatter<'a> {\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool {\n-        self.flags & (1 << FlagV1::Alternate as u32) != 0\n+        self.flags & (1 << Flag::Alternate as u32) != 0\n     }\n \n     /// Determines if the `0` flag was specified.\n@@ -1961,17 +1961,17 @@ impl<'a> Formatter<'a> {\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n-        self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n+        self.flags & (1 << Flag::SignAwareZeroPad as u32) != 0\n     }\n \n     // FIXME: Decide what public API we want for these two flags.\n     // https://github.com/rust-lang/rust/issues/48584\n     fn debug_lower_hex(&self) -> bool {\n-        self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0\n+        self.flags & (1 << Flag::DebugLowerHex as u32) != 0\n     }\n \n     fn debug_upper_hex(&self) -> bool {\n-        self.flags & (1 << FlagV1::DebugUpperHex as u32) != 0\n+        self.flags & (1 << Flag::DebugUpperHex as u32) != 0\n     }\n \n     /// Creates a [`DebugStruct`] builder designed to assist with creation of\n@@ -2531,13 +2531,13 @@ pub(crate) fn pointer_fmt_inner(ptr_addr: usize, f: &mut Formatter<'_>) -> Resul\n     // or not to zero extend, and then unconditionally set it to get the\n     // prefix.\n     if f.alternate() {\n-        f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n+        f.flags |= 1 << (Flag::SignAwareZeroPad as u32);\n \n         if f.width.is_none() {\n             f.width = Some((usize::BITS / 4) as usize + 2);\n         }\n     }\n-    f.flags |= 1 << (FlagV1::Alternate as u32);\n+    f.flags |= 1 << (Flag::Alternate as u32);\n \n     let ret = LowerHex::fmt(&ptr_addr, f);\n "}, {"sha": "5fbd1789b3a9a9a13520f0072d1cc3fff583a530", "filename": "src/tools/rust-analyzer/crates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -201,7 +201,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(arg1(a, b, c)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(arg2), $crate::fmt::Display::fmt), ]);\n+    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::Argument::new(&(arg1(a, b, c)), $crate::fmt::Display::fmt), $crate::fmt::Argument::new(&(arg2), $crate::fmt::Display::fmt), ]);\n }\n \"#]],\n     );\n@@ -229,7 +229,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(a::<A, B>()), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(b), $crate::fmt::Display::fmt), ]);\n+    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::Argument::new(&(a::<A, B>()), $crate::fmt::Display::fmt), $crate::fmt::Argument::new(&(b), $crate::fmt::Display::fmt), ]);\n }\n \"#]],\n     );\n@@ -260,7 +260,7 @@ macro_rules! format_args {\n fn main() {\n     let _ =\n         /* parse error: expected field name or number */\n-$crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(a.), $crate::fmt::Display::fmt), ]);\n+$crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::Argument::new(&(a.), $crate::fmt::Display::fmt), ]);\n }\n \"#]],\n     );"}, {"sha": "a9c5e1488aac0b77deba020d3bb9e6e73191c510", "filename": "src/tools/rust-analyzer/crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=5cf3cbf3b7383f0d4b5ba6524856445a7d7aab2c", "patch": "@@ -241,8 +241,8 @@ fn format_args_expand(\n     // We expand `format_args!(\"\", a1, a2)` to\n     // ```\n     // $crate::fmt::Arguments::new_v1(&[], &[\n-    //   $crate::fmt::ArgumentV1::new(&arg1,$crate::fmt::Display::fmt),\n-    //   $crate::fmt::ArgumentV1::new(&arg2,$crate::fmt::Display::fmt),\n+    //   $crate::fmt::Argument::new(&arg1,$crate::fmt::Display::fmt),\n+    //   $crate::fmt::Argument::new(&arg2,$crate::fmt::Display::fmt),\n     // ])\n     // ```,\n     // which is still not really correct, but close enough for now\n@@ -267,7 +267,7 @@ fn format_args_expand(\n     }\n     let _format_string = args.remove(0);\n     let arg_tts = args.into_iter().flat_map(|arg| {\n-        quote! { #DOLLAR_CRATE::fmt::ArgumentV1::new(&(#arg), #DOLLAR_CRATE::fmt::Display::fmt), }\n+        quote! { #DOLLAR_CRATE::fmt::Argument::new(&(#arg), #DOLLAR_CRATE::fmt::Display::fmt), }\n     }.token_trees);\n     let expanded = quote! {\n         #DOLLAR_CRATE::fmt::Arguments::new_v1(&[], &[##arg_tts])"}]}