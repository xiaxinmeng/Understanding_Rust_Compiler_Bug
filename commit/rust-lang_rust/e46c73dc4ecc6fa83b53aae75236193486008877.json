{"sha": "e46c73dc4ecc6fa83b53aae75236193486008877", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NmM3M2RjNGVjYzZmYTgzYjUzYWFlNzUyMzYxOTM0ODYwMDg4Nzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-27T13:34:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T13:34:26Z"}, "message": "Merge #2088\n\n2088: Extend selection in trait bound extends to plus r=matklad a=aee11\n\nWhen multiple traits bounds are present, expanded selection\r\nfrom a single trait bound will include the nearest plus sign\r\n(and whitespace after) before including the whole trait bound.\r\n\r\nFixes: #2055 \n\nCo-authored-by: Alexander El\u00eds Ebenesersson <alex2789@gmail.com>", "tree": {"sha": "e9879367f34a13abcbd8f610b3e583faf825ea91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9879367f34a13abcbd8f610b3e583faf825ea91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e46c73dc4ecc6fa83b53aae75236193486008877", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtZziCRBK7hj4Ov3rIwAAdHIIACvJTvk7RWHxzm5Dix4mLJtn\nSIbMyK5bNJtBl2jnL/JTQxO7MybvzTsNPRDUlHD/BrD2CmAIIQiiYfUIyQRYz0zm\nPiQTPIO+KWky1RgTqpws0qgIPdtkh4uHNmuUP1+eRXQiGTeFpMRIN2/ENFAN/Ys+\nKnMt0FG8Qrzcb0LOQCuqGcJyKOEYxefZa0pbOJSUuhhpDzWZpkRrPquRGDmZi8Vx\nBJFHkiXB+OisjAOLlsRfGoR2zBkLa4APkhHKmBYYUW68nMKW8y82rAOIXWwfSOyr\n7SjdMUnMxDT0l5ND8TqhTR4M55wsrOi7aCXyZ9MgWyLWFp/6w3JYu328NgYeFAY=\n=hAns\n-----END PGP SIGNATURE-----\n", "payload": "tree e9879367f34a13abcbd8f610b3e583faf825ea91\nparent 7dfbe28211910d5d7c74a593bf0007c5db3e3496\nparent 3e7e3fdf163363896c1273d764e7665a00078ef8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572183266 +0000\ncommitter GitHub <noreply@github.com> 1572183266 +0000\n\nMerge #2088\n\n2088: Extend selection in trait bound extends to plus r=matklad a=aee11\n\nWhen multiple traits bounds are present, expanded selection\r\nfrom a single trait bound will include the nearest plus sign\r\n(and whitespace after) before including the whole trait bound.\r\n\r\nFixes: #2055 \n\nCo-authored-by: Alexander El\u00eds Ebenesersson <alex2789@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e46c73dc4ecc6fa83b53aae75236193486008877", "html_url": "https://github.com/rust-lang/rust/commit/e46c73dc4ecc6fa83b53aae75236193486008877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e46c73dc4ecc6fa83b53aae75236193486008877/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dfbe28211910d5d7c74a593bf0007c5db3e3496", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfbe28211910d5d7c74a593bf0007c5db3e3496", "html_url": "https://github.com/rust-lang/rust/commit/7dfbe28211910d5d7c74a593bf0007c5db3e3496"}, {"sha": "3e7e3fdf163363896c1273d764e7665a00078ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7e3fdf163363896c1273d764e7665a00078ef8", "html_url": "https://github.com/rust-lang/rust/commit/3e7e3fdf163363896c1273d764e7665a00078ef8"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "4b7bfc0b11e8a3b8838547a4f159f7cc9c9145a4", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e46c73dc4ecc6fa83b53aae75236193486008877/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c73dc4ecc6fa83b53aae75236193486008877/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=e46c73dc4ecc6fa83b53aae75236193486008877", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, AstNode, AstToken},\n     Direction, NodeOrToken,\n-    SyntaxKind::*,\n+    SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, TextRange, TextUnit, TokenAtOffset, T,\n };\n \n@@ -29,10 +29,12 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n         USE_TREE_LIST,\n         TYPE_PARAM_LIST,\n         TYPE_ARG_LIST,\n+        TYPE_BOUND_LIST,\n         PARAM_LIST,\n         ARG_LIST,\n         ARRAY_EXPR,\n         TUPLE_EXPR,\n+        WHERE_CLAUSE,\n     ];\n \n     if range.is_empty() {\n@@ -146,13 +148,17 @@ fn pick_best<'a>(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n     }\n }\n \n-/// Extend list item selection to include nearby comma and whitespace.\n+/// Extend list item selection to include nearby delimiter and whitespace.\n fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n     fn is_single_line_ws(node: &SyntaxToken) -> bool {\n         node.kind() == WHITESPACE && !node.text().contains('\\n')\n     }\n \n-    fn nearby_comma(node: &SyntaxNode, dir: Direction) -> Option<SyntaxToken> {\n+    fn nearby_delimiter(\n+        delimiter_kind: SyntaxKind,\n+        node: &SyntaxNode,\n+        dir: Direction,\n+    ) -> Option<SyntaxToken> {\n         node.siblings_with_tokens(dir)\n             .skip(1)\n             .skip_while(|node| match node {\n@@ -161,19 +167,26 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n             })\n             .next()\n             .and_then(|it| it.into_token())\n-            .filter(|node| node.kind() == T![,])\n+            .filter(|node| node.kind() == delimiter_kind)\n     }\n \n-    if let Some(comma_node) = nearby_comma(node, Direction::Prev) {\n-        return Some(TextRange::from_to(comma_node.text_range().start(), node.text_range().end()));\n+    let delimiter = match node.kind() {\n+        TYPE_BOUND => T![+],\n+        _ => T![,],\n+    };\n+    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Prev) {\n+        return Some(TextRange::from_to(\n+            delimiter_node.text_range().start(),\n+            node.text_range().end(),\n+        ));\n     }\n-    if let Some(comma_node) = nearby_comma(node, Direction::Next) {\n-        // Include any following whitespace when comma if after list item.\n-        let final_node = comma_node\n+    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Next) {\n+        // Include any following whitespace when delimiter is after list item.\n+        let final_node = delimiter_node\n             .next_sibling_or_token()\n             .and_then(|it| it.into_token())\n             .filter(|node| is_single_line_ws(node))\n-            .unwrap_or(comma_node);\n+            .unwrap_or(delimiter_node);\n \n         return Some(TextRange::from_to(node.text_range().start(), final_node.text_range().end()));\n     }\n@@ -387,4 +400,53 @@ fn bar(){}\n             &[\"foo\", \"\\\" fn foo() {\\\"\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_extend_trait_bounds_list_in_where_clause() {\n+        do_check(\n+            r#\"\n+fn foo<R>() \n+    where \n+        R: req::Request + 'static,\n+        R::Params: DeserializeOwned<|> + panic::UnwindSafe + 'static,\n+        R::Result: Serialize + 'static,\n+\"#,\n+            &[\n+                \"DeserializeOwned\",\n+                \"DeserializeOwned + \",\n+                \"DeserializeOwned + panic::UnwindSafe + 'static\",\n+                \"R::Params: DeserializeOwned + panic::UnwindSafe + 'static\",\n+                \"R::Params: DeserializeOwned + panic::UnwindSafe + 'static,\",\n+            ],\n+        );\n+        do_check(r#\"fn foo<T>() where T: <|>Copy\"#, &[\"Copy\"]);\n+        do_check(r#\"fn foo<T>() where T: <|>Copy + Display\"#, &[\"Copy\", \"Copy + \"]);\n+        do_check(r#\"fn foo<T>() where T: <|>Copy +Display\"#, &[\"Copy\", \"Copy +\"]);\n+        do_check(r#\"fn foo<T>() where T: <|>Copy+Display\"#, &[\"Copy\", \"Copy+\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + <|>Display\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy +<|>Display\"#, &[\"Display\", \"+Display\"]);\n+    }\n+\n+    #[test]\n+    fn test_extend_trait_bounds_list_inline() {\n+        do_check(r#\"fn foo<T: <|>Copy>() {}\"#, &[\"Copy\"]);\n+        do_check(r#\"fn foo<T: <|>Copy + Display>() {}\"#, &[\"Copy\", \"Copy + \"]);\n+        do_check(r#\"fn foo<T: <|>Copy +Display>() {}\"#, &[\"Copy\", \"Copy +\"]);\n+        do_check(r#\"fn foo<T: <|>Copy+Display>() {}\"#, &[\"Copy\", \"Copy+\"]);\n+        do_check(r#\"fn foo<T: Copy + <|>Display>() {}\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T: Copy +<|>Display>() {}\"#, &[\"Display\", \"+Display\"]);\n+        do_check(\n+            r#\"fn foo<T: Copy<|> + Display, U: Copy>() {}\"#,\n+            &[\n+                \"Copy\",\n+                \"Copy + \",\n+                \"Copy + Display\",\n+                \"T: Copy + Display\",\n+                \"T: Copy + Display, \",\n+                \"<T: Copy + Display, U: Copy>\",\n+            ],\n+        );\n+    }\n }"}]}