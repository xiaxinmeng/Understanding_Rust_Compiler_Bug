{"sha": "870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MGNlNGIxYTUwYTA3ZTNhNTM2YWIyNjIxNTgwNGFjZGZjOWJhOGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-25T20:44:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T20:44:20Z"}, "message": "Merge #1912\n\n1912: add new editing API, suitable for modifying several nodes at once r=viorina a=matklad\n\nr? @viorina \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2ea0c53b6d7b09998dbc0b32d4552aeb30d210ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea0c53b6d7b09998dbc0b32d4552aeb30d210ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi9GkCRBK7hj4Ov3rIwAAdHIIAFcdeLbOh6ph+4qRmNoh0k/t\nXyP8tek4dv2Rei+ZLVlpp4ykrRoiTLS+wQD0eOLyXvk57VTwBL6HUKYw1glUvf9R\ngyCFNRU3ahbOXvJys+bljxoqx7QUUpcrMiEflxvOggknohJzMGhnM2zdKmtBGS+0\nTcPowWxnw2NHljSrxF/LIljbqyLsUe62O1GsuTffjRtHSZHmcXRwutPfT9WxqWeO\nY7tF02hlETa54hPaM/wv/NQqrbeh2+gdTLpoG8uiTCzkiwldjgwW+kQ+KunZWjze\nRV5adB/yMFwR7hOXYfvaz2aRuM04MScAj+l4XkdPWs59o9DlgxJgJ0SVDV/zt2Q=\n=B8Yl\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ea0c53b6d7b09998dbc0b32d4552aeb30d210ed\nparent 0d277faf6c4052dcc80037fc43b4986980d0814b\nparent a525e830a62272d21fbb0fb1c20bfa865791512d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1569444260 +0000\ncommitter GitHub <noreply@github.com> 1569444260 +0000\n\nMerge #1912\n\n1912: add new editing API, suitable for modifying several nodes at once r=viorina a=matklad\n\nr? @viorina \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "html_url": "https://github.com/rust-lang/rust/commit/870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d277faf6c4052dcc80037fc43b4986980d0814b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d277faf6c4052dcc80037fc43b4986980d0814b", "html_url": "https://github.com/rust-lang/rust/commit/0d277faf6c4052dcc80037fc43b4986980d0814b"}, {"sha": "a525e830a62272d21fbb0fb1c20bfa865791512d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a525e830a62272d21fbb0fb1c20bfa865791512d", "html_url": "https://github.com/rust-lang/rust/commit/a525e830a62272d21fbb0fb1c20bfa865791512d"}], "stats": {"total": 152, "additions": 121, "deletions": 31}, "files": [{"sha": "275b27775c1d05081bbf8383e3663ab169bdfc3c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -903,6 +903,7 @@ dependencies = [\n  \"ra_hir 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -1088,6 +1089,7 @@ dependencies = [\n  \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_lexer 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\","}, {"sha": "02966bbda31c2242ff24d74c6dd1acf2efe339ef", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -10,6 +10,7 @@ once_cell = \"1.0.1\"\n join_to_string = \"0.1.3\"\n itertools = \"0.8.0\"\n arrayvec = \"0.4.10\"\n+rustc-hash = \"1.0.1\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "67182601379bf2999ac8d94aff8e74f5b2c0ea74", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -3,10 +3,9 @@ use ra_syntax::{\n     ast::{self, AstNode, NameOwner, TypeBoundsOwner},\n     SyntaxElement,\n     SyntaxKind::*,\n-    TextRange,\n };\n \n-use crate::{ast_builder::Make, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::Make, ast_editor::AstEditor, Assist, AssistCtx, AssistId};\n \n pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;\n@@ -36,23 +35,23 @@ pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>)\n         AssistId(\"move_bounds_to_where_clause\"),\n         \"move_bounds_to_where_clause\",\n         |edit| {\n-            let type_params = type_param_list.type_params().collect::<Vec<_>>();\n-\n-            for param in &type_params {\n-                if let Some(bounds) = param.type_bound_list() {\n-                    let colon = param\n-                        .syntax()\n-                        .children_with_tokens()\n-                        .find(|it| it.kind() == COLON)\n-                        .unwrap();\n-                    let start = colon.text_range().start();\n-                    let end = bounds.syntax().text_range().end();\n-                    edit.delete(TextRange::from_to(start, end));\n-                }\n-            }\n-\n-            let predicates = type_params.iter().filter_map(build_predicate);\n-            let where_clause = Make::<ast::WhereClause>::from_predicates(predicates);\n+            let new_params = type_param_list\n+                .type_params()\n+                .filter(|it| it.type_bound_list().is_some())\n+                .map(|type_param| {\n+                    let without_bounds =\n+                        AstEditor::new(type_param.clone()).remove_bounds().ast().clone();\n+                    (type_param, without_bounds)\n+                });\n+\n+            let mut ast_editor = AstEditor::new(type_param_list.clone());\n+            ast_editor.replace_descendants(new_params);\n+            ast_editor.into_text_edit(edit.text_edit_builder());\n+\n+            let where_clause = {\n+                let predicates = type_param_list.type_params().filter_map(build_predicate);\n+                Make::<ast::WhereClause>::from_predicates(predicates)\n+            };\n \n             let to_insert = match anchor.prev_sibling_or_token() {\n                 Some(ref elem) if elem.kind() == WHITESPACE => {\n@@ -68,7 +67,7 @@ pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>)\n     ctx.build()\n }\n \n-fn build_predicate(param: &ast::TypeParam) -> Option<ast::WherePred> {\n+fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {\n     let path = Make::<ast::Path>::from_name(param.name()?);\n     let predicate = Make::<ast::WherePred>::from(path, param.type_bound_list()?.bounds());\n     Some(predicate)"}, {"sha": "4e253f0a471720e8b2e4021fbf7f6a9c2aae21b2", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -1,11 +1,13 @@\n use std::{iter, ops::RangeInclusive};\n \n use arrayvec::ArrayVec;\n+use rustc_hash::FxHashMap;\n \n use ra_fmt::leading_indent;\n use ra_syntax::{\n-    algo::{insert_children, replace_children},\n-    ast, AstNode, Direction, InsertPosition, SyntaxElement,\n+    algo,\n+    ast::{self, TypeBoundsOwner},\n+    AstNode, Direction, InsertPosition, NodeOrToken, SyntaxElement,\n     SyntaxKind::*,\n     T,\n };\n@@ -27,26 +29,55 @@ impl<N: AstNode> AstEditor<N> {\n     }\n \n     pub fn into_text_edit(self, builder: &mut TextEditBuilder) {\n-        // FIXME: compute a more fine-grained diff here.\n-        // If *you* know a nice algorithm to compute diff between two syntax\n-        // tree, tell me about it!\n-        builder.replace(\n-            self.original_ast.syntax().text_range(),\n-            self.ast().syntax().text().to_string(),\n-        );\n+        // FIXME: this is both horrible inefficient and gives larger than\n+        // necessary diff. I bet there's a cool algorithm to diff trees properly.\n+        go(builder, self.original_ast.syntax().clone().into(), self.ast().syntax().clone().into());\n+\n+        fn go(buf: &mut TextEditBuilder, lhs: SyntaxElement, rhs: SyntaxElement) {\n+            if lhs.kind() == rhs.kind() && lhs.text_range().len() == rhs.text_range().len() {\n+                if match (&lhs, &rhs) {\n+                    (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => lhs.text() == rhs.text(),\n+                    (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n+                    _ => false,\n+                } {\n+                    return;\n+                }\n+            }\n+            if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n+                if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {\n+                    for (lhs, rhs) in lhs.children_with_tokens().zip(rhs.children_with_tokens()) {\n+                        go(buf, lhs, rhs)\n+                    }\n+                    return;\n+                }\n+            }\n+            buf.replace(lhs.text_range(), rhs.to_string())\n+        }\n     }\n \n     pub fn ast(&self) -> &N {\n         &self.ast\n     }\n \n+    pub fn replace_descendants<T: AstNode>(\n+        &mut self,\n+        replacement_map: impl Iterator<Item = (T, T)>,\n+    ) -> &mut Self {\n+        let map = replacement_map\n+            .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n+            .collect::<FxHashMap<_, _>>();\n+        let new_syntax = algo::replace_descendants(self.ast.syntax(), &map);\n+        self.ast = N::cast(new_syntax).unwrap();\n+        self\n+    }\n+\n     #[must_use]\n     fn insert_children(\n         &self,\n         position: InsertPosition<SyntaxElement>,\n         mut to_insert: impl Iterator<Item = SyntaxElement>,\n     ) -> N {\n-        let new_syntax = insert_children(self.ast().syntax(), position, &mut to_insert);\n+        let new_syntax = algo::insert_children(self.ast().syntax(), position, &mut to_insert);\n         N::cast(new_syntax).unwrap()\n     }\n \n@@ -56,7 +87,7 @@ impl<N: AstNode> AstEditor<N> {\n         to_delete: RangeInclusive<SyntaxElement>,\n         mut to_insert: impl Iterator<Item = SyntaxElement>,\n     ) -> N {\n-        let new_syntax = replace_children(self.ast().syntax(), to_delete, &mut to_insert);\n+        let new_syntax = algo::replace_children(self.ast().syntax(), to_delete, &mut to_insert);\n         N::cast(new_syntax).unwrap()\n     }\n \n@@ -240,3 +271,18 @@ impl AstEditor<ast::FnDef> {\n         self.ast = self.replace_children(replace_range, to_insert.into_iter())\n     }\n }\n+\n+impl AstEditor<ast::TypeParam> {\n+    pub fn remove_bounds(&mut self) -> &mut Self {\n+        let colon = match self.ast.colon_token() {\n+            Some(it) => it,\n+            None => return self,\n+        };\n+        let end = match self.ast.type_bound_list() {\n+            Some(it) => it.syntax().clone().into(),\n+            None => colon.clone().into(),\n+        };\n+        self.ast = self.replace_children(RangeInclusive::new(colon.into(), end), iter::empty());\n+        self\n+    }\n+}"}, {"sha": "724c38e175e03a426d17be5c70b235c320d92931", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -11,6 +11,7 @@ repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n itertools = \"0.8.0\"\n rowan = \"0.6.1\"\n rustc_lexer = \"0.1.0\"\n+rustc-hash = \"1.0.1\"\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations"}, {"sha": "f0ed96a1780675bbcc9eea1f6f10602d5e3aaeef", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -3,6 +3,7 @@ pub mod visit;\n use std::ops::RangeInclusive;\n \n use itertools::Itertools;\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n@@ -123,6 +124,37 @@ pub fn replace_children(\n     with_children(parent, new_children)\n }\n \n+/// Replaces descendants in the node, according to the mapping.\n+///\n+/// This is a type-unsafe low-level editing API, if you need to use it, prefer\n+/// to create a type-safe abstraction on top of it instead.\n+pub fn replace_descendants(\n+    parent: &SyntaxNode,\n+    map: &FxHashMap<SyntaxElement, SyntaxElement>,\n+) -> SyntaxNode {\n+    //  FIXME: this could be made much faster.\n+    let new_children = parent.children_with_tokens().map(|it| go(map, it)).collect::<Box<[_]>>();\n+    return with_children(parent, new_children);\n+\n+    fn go(\n+        map: &FxHashMap<SyntaxElement, SyntaxElement>,\n+        element: SyntaxElement,\n+    ) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n+        if let Some(replacement) = map.get(&element) {\n+            return match replacement {\n+                NodeOrToken::Node(it) => NodeOrToken::Node(it.green().clone()),\n+                NodeOrToken::Token(it) => NodeOrToken::Token(it.green().clone()),\n+            };\n+        }\n+        match element {\n+            NodeOrToken::Token(it) => NodeOrToken::Token(it.green().clone()),\n+            NodeOrToken::Node(it) => {\n+                NodeOrToken::Node(replace_descendants(&it, map).green().clone())\n+            }\n+        }\n+    }\n+}\n+\n fn with_children(\n     parent: &SyntaxNode,\n     new_children: Box<[NodeOrToken<rowan::GreenNode, rowan::GreenToken>]>,"}, {"sha": "5f7e9f5b10539fb8f0a8c9d80fd06a0b47db878d", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ce4b1a50a07e3a536ab26215804acdfc9ba8a/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "patch": "@@ -373,6 +373,15 @@ impl ast::LifetimeParam {\n     }\n }\n \n+impl ast::TypeParam {\n+    pub fn colon_token(&self) -> Option<SyntaxToken> {\n+        self.syntax()\n+            .children_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![:])\n+    }\n+}\n+\n impl ast::WherePred {\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n         self.syntax()"}]}