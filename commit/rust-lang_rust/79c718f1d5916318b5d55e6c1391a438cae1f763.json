{"sha": "79c718f1d5916318b5d55e6c1391a438cae1f763", "node_id": "C_kwDOAAsO6NoAKDc5YzcxOGYxZDU5MTYzMThiNWQ1NWU2YzEzOTFhNDM4Y2FlMWY3NjM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-24T20:29:58Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-26T20:40:27Z"}, "message": "Rename `Type::ResolvedPath` to `Type::Path`\n\nAt last! The new name is shorter, simpler, and consistent with\n`hir::Ty`.", "tree": {"sha": "23371fefc901919eccac8a021509d5702bf69b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23371fefc901919eccac8a021509d5702bf69b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c718f1d5916318b5d55e6c1391a438cae1f763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c718f1d5916318b5d55e6c1391a438cae1f763", "html_url": "https://github.com/rust-lang/rust/commit/79c718f1d5916318b5d55e6c1391a438cae1f763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c718f1d5916318b5d55e6c1391a438cae1f763/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81deb33fa8e9f03006b637fd0c035dc7acc5343", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81deb33fa8e9f03006b637fd0c035dc7acc5343", "html_url": "https://github.com/rust-lang/rust/commit/d81deb33fa8e9f03006b637fd0c035dc7acc5343"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "4e1dabd05bb48373844d8add75862f764a6111fe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -1405,12 +1405,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, did, false, vec![], substs);\n-                Type::ResolvedPath { path }\n+                Type::Path { path }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n-                Type::ResolvedPath { path }\n+                Type::Path { path }\n             }\n             ty::Dynamic(obj, ref reg) => {\n                 // HACK: pick the first `did` as the `did` of the trait object. Someone"}, {"sha": "37acf68defd259204b53bc550d8730abc3639f61", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -1421,8 +1421,9 @@ crate struct PolyTrait {\n crate enum Type {\n     /// A named type, which could be a trait.\n     ///\n-    /// This is mostly Rustdoc's version of [`hir::Path`]. It has to be different because Rustdoc's [`PathSegment`] can contain cleaned generics.\n-    ResolvedPath { path: Path },\n+    /// This is mostly Rustdoc's version of [`hir::Path`].\n+    /// It has to be different because Rustdoc's [`PathSegment`] can contain cleaned generics.\n+    Path { path: Path },\n     /// A `dyn Trait` object: `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n     /// A type parameter.\n@@ -1488,7 +1489,7 @@ impl Type {\n     /// Checks if this is a `T::Name` path for an associated type.\n     crate fn is_assoc_ty(&self) -> bool {\n         match self {\n-            Type::ResolvedPath { path, .. } => path.is_assoc_ty(),\n+            Type::Path { path, .. } => path.is_assoc_ty(),\n             _ => false,\n         }\n     }\n@@ -1502,7 +1503,7 @@ impl Type {\n \n     crate fn generics(&self) -> Option<Vec<&Type>> {\n         match self {\n-            Type::ResolvedPath { path, .. } => path.generics(),\n+            Type::Path { path, .. } => path.generics(),\n             _ => None,\n         }\n     }\n@@ -1525,7 +1526,7 @@ impl Type {\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n-            Type::ResolvedPath { ref path } => return Some(path.def_id()),\n+            Type::Path { ref path } => return Some(path.def_id()),\n             DynTrait(ref bounds, _) => return Some(bounds[0].trait_.def_id()),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,"}, {"sha": "38f53d7e0b28656b6f0deb3df34f3809823f5bed", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -186,7 +186,7 @@ crate fn build_deref_target_impls(cx: &mut DocContext<'_>, items: &[Item], ret:\n             for &did in prim.impls(tcx).iter().filter(|did| !did.is_local()) {\n                 inline::build_impl(cx, None, did, None, ret);\n             }\n-        } else if let Type::ResolvedPath { path } = target {\n+        } else if let Type::Path { path } = target {\n             let did = path.def_id();\n             if !did.is_local() {\n                 inline::build_impls(cx, None, did, None, ret);\n@@ -361,7 +361,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n         _ => {\n             let _ = register_res(cx, path.res);\n-            Type::ResolvedPath { path }\n+            Type::Path { path }\n         }\n     }\n }"}, {"sha": "d3831450e1d87d8122a7ec2319bed199b769bbe4", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -27,7 +27,7 @@ use crate::html::render::IndexItem;\n #[derive(Default)]\n crate struct Cache {\n     /// Maps a type ID to all known implementations for that type. This is only\n-    /// recognized for intra-crate `ResolvedPath` types, and is used to print\n+    /// recognized for intra-crate [`clean::Type::Path`]s, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n     ///\n     /// The values of the map are a list of implementations and documentation\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             clean::ImplItem(ref i) => {\n                 self.cache.parent_is_trait_impl = i.trait_.is_some();\n                 match i.for_ {\n-                    clean::Type::ResolvedPath { ref path } => {\n+                    clean::Type::Path { ref path } => {\n                         self.cache.parent_stack.push(path.def_id());\n                         true\n                     }\n@@ -436,10 +436,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             // Note: matching twice to restrict the lifetime of the `i` borrow.\n             let mut dids = FxHashSet::default();\n             match i.for_ {\n-                clean::Type::ResolvedPath { ref path }\n-                | clean::BorrowedRef {\n-                    type_: box clean::Type::ResolvedPath { ref path }, ..\n-                } => {\n+                clean::Type::Path { ref path }\n+                | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. } => {\n                     dids.insert(path.def_id());\n                 }\n                 clean::DynTrait(ref bounds, _)"}, {"sha": "34742fac0e4b7f1155a3290dc92c4eaf96873004", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -607,8 +607,7 @@ crate fn href_relative_parts<'a>(fqp: &'a [String], relative_to_fqp: &'a [String\n     }\n }\n \n-/// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n-/// rendering function with the necessary arguments for linking to a local path.\n+/// Used to render a [`clean::Path`].\n fn resolved_path<'cx>(\n     w: &mut fmt::Formatter<'_>,\n     did: DefId,\n@@ -762,7 +761,7 @@ fn fmt_type<'cx>(\n \n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n-        clean::Type::ResolvedPath { ref path } => {\n+        clean::Type::Path { ref path } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n             let did = path.def_id();\n             resolved_path(f, did, path, path.is_assoc_ty(), use_absolute, cx)"}, {"sha": "d12667c9e5c777c205c8f690ab4c212450fc5754", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -218,7 +218,7 @@ fn get_index_type(clean_type: &clean::Type, generics: Vec<TypeWithKind>) -> Rend\n \n fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<Symbol> {\n     match *clean_type {\n-        clean::Type::ResolvedPath { ref path, .. } => {\n+        clean::Type::Path { ref path, .. } => {\n             let path_segment = path.segments.last().unwrap();\n             Some(path_segment.name)\n         }\n@@ -371,7 +371,7 @@ crate fn get_real_types<'tcx>(\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n                 if let Some(path) = bound.get_trait_path() {\n-                    let ty = Type::ResolvedPath { path };\n+                    let ty = Type::Path { path };\n                     get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics, cache);\n                 }\n             }"}, {"sha": "20a200f0484bd735386fecca6c0e4ea1cfb432b7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -1227,7 +1227,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n             | SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n                 (mutability == Mutability::Mut, false, false)\n             }\n-            SelfTy::SelfExplicit(clean::Type::ResolvedPath { path }) => {\n+            SelfTy::SelfExplicit(clean::Type::Path { path }) => {\n                 (false, Some(path.def_id()) == tcx.lang_items().owned_box(), false)\n             }\n             SelfTy::SelfValue => (false, false, true),\n@@ -2520,7 +2520,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n         }\n \n         match ty {\n-            clean::Type::ResolvedPath { path } => process_path(path.def_id()),\n+            clean::Type::Path { path } => process_path(path.def_id()),\n             clean::Type::Tuple(tys) => {\n                 work.extend(tys.into_iter());\n             }"}, {"sha": "d3738cfa3e7815af2c3935b4e9b2407f021ba7f1", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -727,10 +727,10 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n-                clean::Type::ResolvedPath { ref path }\n-                | clean::BorrowedRef {\n-                    type_: box clean::Type::ResolvedPath { ref path }, ..\n-                } if !path.is_assoc_ty() => {\n+                clean::Type::Path { ref path }\n+                | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. }\n+                    if !path.is_assoc_ty() =>\n+                {\n                     let did = path.def_id();\n                     let &mut (prev_did, ref mut has_duplicates) =\n                         implementor_dups.entry(path.last()).or_insert((did, false));\n@@ -1452,14 +1452,15 @@ fn render_implementor(\n ) {\n     // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n-    let use_absolute =\n-        match implementor.inner_impl().for_ {\n-            clean::Type::ResolvedPath { ref path, .. }\n-            | clean::BorrowedRef {\n-                type_: box clean::Type::ResolvedPath { ref path, .. }, ..\n-            } if !path.is_assoc_ty() => implementor_dups[&path.last()].1,\n-            _ => false,\n-        };\n+    let use_absolute = match implementor.inner_impl().for_ {\n+        clean::Type::Path { ref path, .. }\n+        | clean::BorrowedRef { type_: box clean::Type::Path { ref path, .. }, .. }\n+            if !path.is_assoc_ty() =>\n+        {\n+            implementor_dups[&path.last()].1\n+        }\n+        _ => false,\n+    };\n     render_impl(\n         w,\n         cx,"}, {"sha": "7fc295747f41a5657419d11707034609dee05f1f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c718f1d5916318b5d55e6c1391a438cae1f763/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=79c718f1d5916318b5d55e6c1391a438cae1f763", "patch": "@@ -365,7 +365,7 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n         match bound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::ResolvedPath { path: trait_ }.into_tcx(tcx);\n+                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n                     generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n@@ -394,7 +394,7 @@ impl FromWithTcx<clean::Type> for Type {\n         };\n \n         match ty {\n-            clean::Type::ResolvedPath { path } => Type::ResolvedPath {\n+            clean::Type::Path { path } => Type::ResolvedPath {\n                 name: path.whole_name(),\n                 id: from_item_id(path.def_id().into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n@@ -439,7 +439,7 @@ impl FromWithTcx<clean::Type> for Type {\n             },\n             QPath { name, self_type, trait_, .. } => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::ResolvedPath { path: trait_ }.into_tcx(tcx);\n+                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 Type::QualifiedPath {\n                     name: name.to_string(),\n                     self_type: Box::new((*self_type).into_tcx(tcx)),\n@@ -505,7 +505,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-        let trait_ = trait_.map(|path| clean::Type::ResolvedPath { path }.into_tcx(tcx));\n+        let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n             clean::ImplKind::Normal => (false, None),"}]}