{"sha": "1744c46e47434d8c0b63a839678ce45f1988bb74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDRjNDZlNDc0MzRkOGMwYjYzYTgzOTY3OGNlNDVmMTk4OGJiNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-07T17:52:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-07T17:52:23Z"}, "message": "Auto merge of #35469 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 21 pull requests\n\n- Successful merges: #35314, #35355, #35357, #35366, #35394, #35410, #35411, #35413, #35417, #35419, #35421, #35429, #35433, #35434, #35436, #35439, #35443, #35454, #35455, #35467, #35468\n- Failed merges: #35395, #35415", "tree": {"sha": "156e2096bdb53d7e1ee9dc2d2cfc0900e61bddb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156e2096bdb53d7e1ee9dc2d2cfc0900e61bddb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1744c46e47434d8c0b63a839678ce45f1988bb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1744c46e47434d8c0b63a839678ce45f1988bb74", "html_url": "https://github.com/rust-lang/rust/commit/1744c46e47434d8c0b63a839678ce45f1988bb74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1744c46e47434d8c0b63a839678ce45f1988bb74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e7a5910d4f1dfa72724f6ee8125a6eade1665b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e7a5910d4f1dfa72724f6ee8125a6eade1665b", "html_url": "https://github.com/rust-lang/rust/commit/f5e7a5910d4f1dfa72724f6ee8125a6eade1665b"}, {"sha": "995eeb02cab03914b23eb97836c0c286df8c5e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/995eeb02cab03914b23eb97836c0c286df8c5e40", "html_url": "https://github.com/rust-lang/rust/commit/995eeb02cab03914b23eb97836c0c286df8c5e40"}], "stats": {"total": 471, "additions": 345, "deletions": 126}, "files": [{"sha": "4cbabe3f5edafc1036216b05470c7cd7d5478169", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -548,7 +548,7 @@ pub trait ExactSizeIterator: Iterator {\n     /// assert_eq!(one_element.next(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"exact_size_is_empty\", issue = \"0\")]\n+    #[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]\n     fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "9950560b13a5a7cda70ccd0d38ccc2fedf6a6c46", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -870,10 +870,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n \n     fn need_type_info(&self, span: Span, ty: Ty<'tcx>) {\n-        span_err!(self.tcx.sess, span, E0282,\n-                  \"unable to infer enough type information about `{}`; \\\n-                   type annotations or generic parameter binding required\",\n-                  ty);\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0282,\n+                                       \"unable to infer enough type information about `{}`\",\n+                                       ty);\n+        err.note(\"type annotations or generic parameter binding required\");\n+        err.span_label(span, &format!(\"cannot infer type for `{}`\", ty));\n+        err.emit()\n     }\n \n     fn note_obligation_cause<T>(&self,"}, {"sha": "5455ca62ea46e6eb3a426af70db3a8b5946881a0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -686,8 +686,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::Box(_) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {\n-                    span_err!(self.tcx.sess, self.span, E0010,\n-                              \"allocations are not allowed in {}s\", self.mode);\n+                    struct_span_err!(self.tcx.sess, self.span, E0010,\n+                                     \"allocations are not allowed in {}s\", self.mode)\n+                        .span_label(self.span, &format!(\"allocation not allowed in {}s\", self.mode))\n+                        .emit();\n                 }\n             }\n "}, {"sha": "b4e9fb5c65bb3576417b53469e454c262a249830", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -1215,10 +1215,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                         type_str: &str,\n                                         trait_str: &str,\n                                         name: &str) {\n-        span_err!(self.tcx().sess, span, E0223,\n-                  \"ambiguous associated type; specify the type using the syntax \\\n-                   `<{} as {}>::{}`\",\n-                  type_str, trait_str, name);\n+        struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\")\n+            .span_label(span, &format!(\"ambiguous associated type\"))\n+            .note(&format!(\"specify the type using the syntax `<{} as {}>::{}`\",\n+                  type_str, trait_str, name))\n+            .emit();\n+\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n@@ -2095,8 +2097,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         if !trait_bounds.is_empty() {\n             let b = &trait_bounds[0];\n-            span_err!(self.tcx().sess, b.trait_ref.path.span, E0225,\n-                      \"only the builtin traits can be used as closure or object bounds\");\n+            let span = b.trait_ref.path.span;\n+            struct_span_err!(self.tcx().sess, span, E0225,\n+                             \"only the builtin traits can be used as closure or object bounds\")\n+                .span_label(span, &format!(\"non-builtin trait used as bounds\"))\n+                .emit();\n         }\n \n         let region_bound =\n@@ -2255,20 +2260,27 @@ fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,\n         } else {\n             \"expected\"\n         };\n-        span_err!(tcx.sess, span, E0243,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected, required, supplied);\n+        struct_span_err!(tcx.sess, span, E0243, \"wrong number of type arguments\")\n+            .span_label(\n+                span,\n+                &format!(\"{} {} type arguments, found {}\", expected, required, supplied)\n+            )\n+            .emit();\n     } else if supplied > accepted {\n-        let expected = if required < accepted {\n-            \"expected at most\"\n+        let expected = if required == 0 {\n+            \"expected no\".to_string()\n+        } else if required < accepted {\n+            format!(\"expected at most {}\", accepted)\n         } else {\n-            \"expected\"\n+            format!(\"expected {}\", accepted)\n         };\n-        span_err!(tcx.sess, span, E0244,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  accepted,\n-                  supplied);\n+\n+        struct_span_err!(tcx.sess, span, E0244, \"wrong number of type arguments\")\n+            .span_label(\n+                span,\n+                &format!(\"{} type arguments, found {}\", expected, supplied)\n+            )\n+            .emit();\n     }\n }\n "}, {"sha": "fe68690d4e97447efbc826717314234bbffb86ec", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -93,13 +93,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         end.span\n                     };\n \n-                    // Note: spacing here is intentional, we want a space before \"start\" and \"end\".\n-                    span_err!(tcx.sess, span, E0029,\n-                              \"only char and numeric types are allowed in range patterns\\n \\\n-                               start type: {}\\n end type: {}\",\n-                              self.ty_to_string(lhs_ty),\n-                              self.ty_to_string(rhs_ty)\n-                    );\n+                    struct_span_err!(tcx.sess, span, E0029,\n+                        \"only char and numeric types are allowed in range patterns\")\n+                        .span_label(span, &format!(\"ranges require char or numeric types\"))\n+                        .note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)))\n+                        .note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)))\n+                        .emit();\n                     return;\n                 }\n \n@@ -700,9 +699,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for field in variant.fields\n                 .iter()\n                 .filter(|field| !used_fields.contains_key(&field.name)) {\n-                span_err!(tcx.sess, span, E0027,\n-                    \"pattern does not mention field `{}`\",\n-                    field.name);\n+                struct_span_err!(tcx.sess, span, E0027,\n+                                \"pattern does not mention field `{}`\",\n+                                field.name)\n+                                .span_label(span, &format!(\"missing field `{}`\", field.name))\n+                                .emit();\n             }\n         }\n     }"}, {"sha": "e73c3aa352b5605beec6fe6d8b1f164554360fbf", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -28,7 +28,9 @@ use rustc::hir;\n /// method that is called)\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n     if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n-        span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\");\n+        struct_span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\")\n+            .span_label(span, &format!(\"call to destructor method\"))\n+            .emit();\n     }\n }\n "}, {"sha": "b971ae02cd0bd27a87905137df7540a80142257b", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -59,19 +59,33 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         (&ty::ExplicitSelfCategory::Static,\n          &ty::ExplicitSelfCategory::Static) => {}\n         (&ty::ExplicitSelfCategory::Static, _) => {\n-            span_err!(tcx.sess, impl_m_span, E0185,\n+            let mut err = struct_span_err!(tcx.sess, impl_m_span, E0185,\n                 \"method `{}` has a `{}` declaration in the impl, \\\n                         but not in the trait\",\n                         trait_m.name,\n                         impl_m.explicit_self);\n+            err.span_label(impl_m_span, &format!(\"`{}` used in impl\",\n+                                                 impl_m.explicit_self));\n+            if let Some(span) = tcx.map.span_if_local(trait_m.def_id) {\n+                err.span_label(span, &format!(\"trait declared without `{}`\",\n+                                              impl_m.explicit_self));\n+            }\n+            err.emit();\n             return;\n         }\n         (_, &ty::ExplicitSelfCategory::Static) => {\n-            span_err!(tcx.sess, impl_m_span, E0186,\n+            let mut err = struct_span_err!(tcx.sess, impl_m_span, E0186,\n                 \"method `{}` has a `{}` declaration in the trait, \\\n                         but not in the impl\",\n                         trait_m.name,\n                         trait_m.explicit_self);\n+            err.span_label(impl_m_span, &format!(\"expected `{}` in impl\",\n+                                                  trait_m.explicit_self));\n+            if let Some(span) = tcx.map.span_if_local(trait_m.def_id) {\n+                err.span_label(span, & format!(\"`{}` used in trait\",\n+                                               trait_m.explicit_self));\n+            }\n+            err.emit();\n             return;\n         }\n         _ => {"}, {"sha": "4bb36aa639c541b1e0ae46517a27b654b46d4f40", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -1136,11 +1136,16 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n \n     if !missing_items.is_empty() {\n-        span_err!(tcx.sess, impl_span, E0046,\n+        struct_span_err!(tcx.sess, impl_span, E0046,\n             \"not all trait items implemented, missing: `{}`\",\n             missing_items.iter()\n                   .map(|name| name.to_string())\n                   .collect::<Vec<_>>().join(\"`, `\"))\n+            .span_label(impl_span, &format!(\"missing `{}` in implementation\",\n+                missing_items.iter()\n+                    .map(|name| name.to_string())\n+                    .collect::<Vec<_>>().join(\"`, `\"))\n+            ).emit();\n     }\n \n     if !invalidated_items.is_empty() {"}, {"sha": "42893e40024e891aa14eb5ec8dd7684f3a93edb8", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -441,13 +441,19 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n         if !self.tcx.sess.has_errors() {\n             match self.reason {\n                 ResolvingExpr(span) => {\n-                    span_err!(self.tcx.sess, span, E0101,\n-                        \"cannot determine a type for this expression: {}\", e);\n+                    struct_span_err!(\n+                        self.tcx.sess, span, E0101,\n+                        \"cannot determine a type for this expression: {}\", e)\n+                        .span_label(span, &format!(\"cannot resolve type of expression\"))\n+                        .emit();\n                 }\n \n                 ResolvingLocal(span) => {\n-                    span_err!(self.tcx.sess, span, E0102,\n-                        \"cannot determine a type for this local variable: {}\", e);\n+                    struct_span_err!(\n+                        self.tcx.sess, span, E0102,\n+                        \"cannot determine a type for this local variable: {}\", e)\n+                        .span_label(span, &format!(\"cannot resolve type of variable\"))\n+                        .emit();\n                 }\n \n                 ResolvingPattern(span) => {"}, {"sha": "939d81bf8477b730ff8d5b2e0cb44a03fe6dafbe", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -311,18 +311,23 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n             match param_env.can_type_implement_copy(tcx, self_type, span) {\n                 Ok(()) => {}\n                 Err(CopyImplementationError::InfrigingField(name)) => {\n-                       span_err!(tcx.sess, span, E0204,\n-                                 \"the trait `Copy` may not be \\\n-                                          implemented for this type; field \\\n-                                          `{}` does not implement `Copy`\",\n-                                         name)\n+                       struct_span_err!(tcx.sess, span, E0204,\n+                                 \"the trait `Copy` may not be implemented for \\\n+                                 this type\")\n+                           .span_label(span, &format!(\n+                                 \"field `{}` does not implement `Copy`\", name)\n+                               )\n+                           .emit()\n+\n                 }\n                 Err(CopyImplementationError::InfrigingVariant(name)) => {\n-                       span_err!(tcx.sess, span, E0205,\n+                       struct_span_err!(tcx.sess, span, E0205,\n                                  \"the trait `Copy` may not be \\\n-                                          implemented for this type; variant \\\n+                                          implemented for this type\")\n+                           .span_label(span, &format!(\"variant \\\n                                           `{}` does not implement `Copy`\",\n-                                         name)\n+                                         name))\n+                           .emit()\n                 }\n                 Err(CopyImplementationError::NotAnAdt) => {\n                        span_err!(tcx.sess, span, E0206,"}, {"sha": "e426f0cb643b7ab99159ed0ec331e438f5b23514", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -33,10 +33,12 @@ struct OrphanChecker<'cx, 'tcx:'cx> {\n impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_def_id(&self, item: &hir::Item, def_id: DefId) {\n         if def_id.krate != LOCAL_CRATE {\n-            span_err!(self.tcx.sess, item.span, E0116,\n+            struct_span_err!(self.tcx.sess, item.span, E0116,\n                       \"cannot define inherent `impl` for a type outside of the \\\n-                       crate where the type is defined; define and implement \\\n-                       a trait or new type instead\");\n+                       crate where the type is defined\")\n+                .span_label(item.span, &format!(\"impl for type defined outside of crate.\"))\n+                .span_note(item.span, &format!(\"define and implement a trait or new type instead\"))\n+                .emit();\n         }\n     }\n \n@@ -66,7 +68,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n+            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -209,11 +211,11 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         return;\n                     }\n                     _ => {\n-                        struct_span_err!(self.tcx.sess, item.span, E0118,\n+                        struct_span_err!(self.tcx.sess, ty.span, E0118,\n                                          \"no base type found for inherent implementation\")\n-                        .span_help(item.span,\n-                                   \"either implement a trait on it or create a newtype to wrap it \\\n-                                    instead\")\n+                        .span_label(ty.span, &format!(\"impl requires a base type\"))\n+                        .note(&format!(\"either implement a trait on it or create a newtype \\\n+                                        to wrap it instead\"))\n                         .emit();\n                         return;\n                     }\n@@ -228,12 +230,14 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                        span_err!(\n+                        struct_span_err!(\n                             self.tcx.sess, item.span, E0117,\n-                            \"the impl does not reference any \\\n-                             types defined in this crate; \\\n-                             only traits defined in the current crate can be \\\n-                             implemented for arbitrary types\");\n+                             \"only traits defined in the current crate can be \\\n+                             implemented for arbitrary types\")\n+                        .span_label(item.span, &format!(\"impl doesn't use types inside crate\"))\n+                        .note(&format!(\"the impl does not reference any \\\n+                                        types defined in this crate\"))\n+                        .emit();\n                         return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {"}, {"sha": "9b1a6c78335f189470f69c1d31b59706e37c21b3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -367,8 +367,13 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n                 _substs: Option<&mut Substs<'tcx>>,\n                 _space: Option<ParamSpace>,\n                 span: Span) -> Ty<'tcx> {\n-        span_err!(self.tcx().sess, span, E0121,\n-                  \"the type placeholder `_` is not allowed within types on item signatures\");\n+        struct_span_err!(\n+            self.tcx().sess,\n+            span,\n+            E0121,\n+            \"the type placeholder `_` is not allowed within types on item signatures\"\n+        ).span_label(span, &format!(\"not allowed in type signatures\"))\n+        .emit();\n         self.tcx().types.err\n     }\n \n@@ -770,9 +775,10 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                         let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n                                                        \"duplicate definitions with name `{}`:\",\n                                                        impl_item.name);\n-                        span_note!(&mut err, *entry.get(),\n-                                   \"previous definition of `{}` here\",\n-                                   impl_item.name);\n+                        err.span_label(*entry.get(),\n+                                   &format!(\"previous definition of `{}` here\",\n+                                        impl_item.name));\n+                        err.span_label(impl_item.span, &format!(\"duplicate definition\"));\n                         err.emit();\n                     }\n                     Vacant(entry) => {"}, {"sha": "65e00705121a7e6dcc5745d3034f10d5c0550053", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -211,11 +211,15 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(main_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_, _, _, _, ref ps, _)\n-                        if ps.is_parameterized() => {\n-                            span_err!(ccx.tcx.sess, main_span, E0131,\n-                                      \"main function is not allowed to have type parameters\");\n-                            return;\n+                        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+                            if let Some(gen_span) = generics.span() {\n+                                struct_span_err!(ccx.tcx.sess, gen_span, E0131,\n+                                         \"main function is not allowed to have type parameters\")\n+                                    .span_label(gen_span,\n+                                                &format!(\"main cannot have type parameters\"))\n+                                    .emit();\n+                                return;\n+                            }\n                         }\n                         _ => ()\n                     }"}, {"sha": "e0501f9cc61d24c70781bab1cf2645d2ed143ffe", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -373,6 +373,15 @@ impl NulError {\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let nul_error = CString::new(\"foo\\0bar\").unwrap_err();\n+    /// assert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> { self.1 }\n }"}, {"sha": "33c526532c7a842896f3b897510a22d7716fc5b6", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -37,6 +37,7 @@ static ENV_LOCK: Mutex = Mutex::new();\n \n \n extern {\n+    #[cfg(not(target_os = \"dragonfly\"))]\n     #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n                link_name = \"__errno_location\")]\n     #[cfg_attr(any(target_os = \"bitrig\","}, {"sha": "8a666168c86fd22207a7067c426fe0c89329dfd6", "filename": "src/test/compile-fail/E0010.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0010.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -11,5 +11,6 @@\n #![feature(box_syntax)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n+                              //~| NOTE allocation not allowed in\n \n fn main() {}"}, {"sha": "ca496a24701fba48141189c332229ad1248707e5", "filename": "src/test/compile-fail/E0027.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0027.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -17,6 +17,8 @@ fn main() {\n     let d = Dog { name: \"Rusty\".to_string(), age: 8 };\n \n     match d {\n-        Dog { age: x } => {} //~ ERROR E0027\n+        Dog { age: x } => {}\n+        //~^ ERROR pattern does not mention field `name`\n+        //~| NOTE missing field `name`\n     }\n }"}, {"sha": "ec84e2a3f8a3650c8e910752e5fdeba1fb71a4fc", "filename": "src/test/compile-fail/E0029.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0029.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -12,7 +12,11 @@ fn main() {\n     let s = \"hoho\";\n \n     match s {\n-        \"hello\" ... \"world\" => {} //~ ERROR E0029\n+        \"hello\" ... \"world\" => {}\n+        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~| NOTE ranges require char or numeric types\n+        //~| NOTE start type: &'static str\n+        //~| NOTE end type: &'static str\n         _ => {}\n     }\n }"}, {"sha": "80ff57c36359561f28aac3410823d551f6afe16e", "filename": "src/test/compile-fail/E0040.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -20,5 +20,7 @@ impl Drop for Foo {\n \n fn main() {\n     let mut x = Foo { x: -7 };\n-    x.drop(); //~ ERROR E0040\n+    x.drop();\n+    //~^ ERROR E0040\n+    //~| NOTE call to destructor method\n }"}, {"sha": "a8b56b2b9ab37248a596f3f37df0d5e15290ff34", "filename": "src/test/compile-fail/E0046.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0046.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -14,7 +14,9 @@ trait Foo {\n \n struct Bar;\n \n-impl Foo for Bar {} //~ ERROR E0046\n+impl Foo for Bar {}\n+//~^ ERROR E0046\n+//~| NOTE missing `foo` in implementation\n \n fn main() {\n }"}, {"sha": "0005da048e4a5706fb37ebed9292f51b3902f04d", "filename": "src/test/compile-fail/E0101.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0101.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = |_| {}; //~ ERROR E0101\n+    let x = |_| {};\n+    //~^ ERROR E0101\n+    //~| NOTE cannot resolve type of expression\n }"}, {"sha": "1d64798bb838202e6f1696addb1f96adaab34a7a", "filename": "src/test/compile-fail/E0102.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0102.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = []; //~ ERROR E0102\n+    let x = [];\n+    //~^ ERROR E0102\n+    //~| NOTE cannot resolve type of variable\n }"}, {"sha": "f885241eec4c7f1b00a7451fa11d091afb60fc95", "filename": "src/test/compile-fail/E0116.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0116.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl Vec<u8> {} //~ ERROR E0116\n+impl Vec<u8> {}\n+//~^ ERROR E0116\n+//~| NOTE impl for type defined outside of crate.\n+//~| NOTE define and implement a trait or new type instead\n \n fn main() {\n }"}, {"sha": "e9375e673253fb863edb4135df4256446645d4ec", "filename": "src/test/compile-fail/E0117.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0117.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl Drop for u32 {} //~ ERROR E0117\n+//~^ NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n fn main() {\n }"}, {"sha": "3fc478f1e403e3adf57ed00c48e547b1c1f1dfbb", "filename": "src/test/compile-fail/E0118.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl (u8, u8) { //~ ERROR E0118\n+//~^ NOTE impl requires a base type\n+//~| NOTE either implement a trait on it or create a newtype to wrap it instead\n     fn get_state(&self) -> String {\n         String::new()\n     }"}, {"sha": "e6e924e2d966fd9cc8a335060afe22098ed44b7a", "filename": "src/test/compile-fail/E0131.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0131.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main<T>() { //~ ERROR E0131\n+fn main<T>() {\n+    //~^ ERROR E0131\n+    //~| NOTE main cannot have type parameters\n }"}, {"sha": "be54c3754ea1fe98e7aef7f4aaef686d8282f629", "filename": "src/test/compile-fail/E0185.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0185.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo();\n+    fn foo(); //~ trait declared without `&self`\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(&self) {} //~ ERROR E0185\n+    //~^ `&self` used in impl\n }\n \n fn main() {"}, {"sha": "55a3490cac4a620b9206e243cd81687e084edb8d", "filename": "src/test/compile-fail/E0186.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0186.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(&self);\n+    fn foo(&self); //~ `&self` used in trait\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo() {} //~ ERROR E0186\n+    //~^ expected `&self` in impl\n }\n \n fn main() {"}, {"sha": "0f108a17c95db3127edf399eab121a8566916427", "filename": "src/test/compile-fail/E0204.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0204.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -12,9 +12,14 @@ struct Foo {\n     foo: Vec<u32>,\n }\n \n-impl Copy for Foo { } //~ ERROR E0204\n+impl Copy for Foo { }\n+//~^ ERROR E0204\n+//~| NOTE field `foo` does not implement `Copy`\n \n-#[derive(Copy)] //~ ERROR E0204\n+#[derive(Copy)]\n+//~^ ERROR E0204\n+//~| NOTE field `ty` does not implement `Copy`\n+//~| NOTE in this expansion of #[derive(Copy)]\n struct Foo2<'a> {\n     ty: &'a mut bool,\n }"}, {"sha": "37ac57af524a6d1f5ba06d7752019b94e5e613e7", "filename": "src/test/compile-fail/E0205.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0205.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -13,9 +13,14 @@ enum Foo {\n     Baz,\n }\n \n-impl Copy for Foo { } //~ ERROR E0205\n+impl Copy for Foo { }\n+//~^ ERROR E0205\n+//~| NOTE variant `Bar` does not implement `Copy`\n \n-#[derive(Copy)] //~ ERROR E0205\n+#[derive(Copy)]\n+//~^ ERROR E0205\n+//~| NOTE variant `Bar` does not implement `Copy`\n+//~| NOTE in this expansion of #[derive(Copy)]\n enum Foo2<'a> {\n     Bar(&'a mut bool),\n     Baz,"}, {"sha": "56057b372599dc284593b08489ae84eeab283dd1", "filename": "src/test/compile-fail/E0223.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0223.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -11,5 +11,8 @@\n trait MyTrait { type X; }\n \n fn main() {\n-    let foo: MyTrait::X; //~ ERROR E0223\n+    let foo: MyTrait::X;\n+    //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as MyTrait>::X`\n }"}, {"sha": "b013788ceff8506f95d52844f4f56c7279d76604", "filename": "src/test/compile-fail/E0225.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0225.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,5 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let _: Box<std::io::Read + std::io::Write>; //~ ERROR E0225\n+    let _: Box<std::io::Read + std::io::Write>;\n+    //~^ ERROR only the builtin traits can be used as closure or object bounds [E0225]\n+    //~| NOTE non-builtin trait used as bounds\n }"}, {"sha": "77c9856c261ff595054194d558447438c19b990f", "filename": "src/test/compile-fail/E0243.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0243.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n struct Foo<T> { x: T }\n-struct Bar { x: Foo } //~ ERROR E0243\n+struct Bar { x: Foo }\n+                //~^ ERROR E0243\n+                //~| NOTE expected 1 type arguments, found 0\n \n fn main() {\n }"}, {"sha": "5678a7fd450d8f95a1bcebb635c99a59ba238a55", "filename": "src/test/compile-fail/E0244.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2FE0244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0244.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,7 +9,10 @@\n // except according to those terms.\n \n struct Foo { x: bool }\n-struct Bar<S, T> { x: Foo<S, T> } //~ ERROR E0244\n+struct Bar<S, T> { x: Foo<S, T> }\n+                      //~^ ERROR E0244\n+                      //~| NOTE expected no type arguments, found 2\n+\n \n fn main() {\n }"}, {"sha": "ff886e63dc59ef1aebab668fe16ce51d5edcd29c", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -15,15 +15,21 @@ trait Get {\n \n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as Get>::Value`\n \n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+    //~| NOTE ambiguous associated type\n+    //~| NOTE specify the type using the syntax `<Type as Grab>::Value`\n }\n \n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n fn main() {\n }"}, {"sha": "d9ac715fa9548447340e9f33633299676fb352ae", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -16,5 +16,7 @@ struct Vec<T, A = Heap>(\n     marker::PhantomData<(T,A)>);\n \n fn main() {\n-    let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1, found 0\n+    let _: Vec;\n+    //~^ ERROR E0243\n+    //~| NOTE expected at least 1 type arguments, found 0\n }"}, {"sha": "8f733ddfce187f7c73b58d82e652be928597b0be", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -17,5 +17,6 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;\n-    //~^ ERROR wrong number of type arguments: expected at most 2, found 3\n+    //~^ ERROR E0244\n+    //~| NOTE expected at most 2 type arguments, found 3\n }"}, {"sha": "f6e9ab2d614bce630b7f8dae5a1d8f56e2f8576e", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -12,7 +12,9 @@ struct Foo;\n \n impl Foo {\n     fn orange(&self) {} //~ NOTE previous definition of `orange` here\n-    fn orange(&self) {} //~ ERROR duplicate definitions with name `orange`\n+    fn orange(&self) {}\n+    //~^ ERROR duplicate definition\n+    //~| NOTE duplicate definition\n }\n \n fn main() {}"}, {"sha": "e0ea1a4cac58bb83102cacf447fb478961897928", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -21,6 +21,7 @@ pub struct FooConstForMethod;\n \n impl Foo for FooConstForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     const bar: u64 = 1;\n     //~^ ERROR E0323\n     //~| NOTE does not match trait\n@@ -31,6 +32,7 @@ pub struct FooMethodForConst;\n \n impl Foo for FooMethodForConst {\n     //~^ ERROR E0046\n+    //~| NOTE missing `MY_CONST` in implementation\n     fn bar(&self) {}\n     fn MY_CONST() {}\n     //~^ ERROR E0324\n@@ -41,6 +43,7 @@ pub struct FooTypeForMethod;\n \n impl Foo for FooTypeForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     type bar = u64;\n     //~^ ERROR E0325\n     //~| NOTE does not match trait"}, {"sha": "001e4b51bebc4f619beaa84665fb38a7d6ecf525", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -14,5 +14,7 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "7cbee402b368253cb59845e912ed357307f77f33", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -14,5 +14,7 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "dd02fa7ac151c10186bd633726d7dc2567896f8f", "filename": "src/test/compile-fail/issue-14092.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn fn1(0: Box) {} //~ ERROR: wrong number of type arguments: expected 1, found 0\n+fn fn1(0: Box) {}\n+        //~^ ERROR E0243\n+        //~| NOTE expected 1 type arguments, found 0\n \n fn main() {}"}, {"sha": "50f1323d39c557bc0ef7494eb6d9651d7d6d8821", "filename": "src/test/compile-fail/issue-23024.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -18,6 +18,11 @@ fn main()\n     vfnfer.push(box h);\n     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~| ERROR E0243\n+    //~| NOTE expected 1 type arguments, found 0\n     //~| ERROR the value of the associated type `Output` (from the trait `std::ops::FnOnce`)\n+    //~| NOTE in this expansion of println!\n+    //~| NOTE in this expansion of println!\n+    //~| NOTE in this expansion of println!\n+    //~| NOTE in this expansion of println!\n }"}, {"sha": "1be082ba9bbbad454982a42a82d8ce3e7c4b6361", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -14,4 +14,6 @@ fn main()\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n+                                  //~| NOTE cannot infer type for `_`\n+                                  //~| NOTE type annotations or generic parameter binding required\n }"}, {"sha": "b1047ce18cccdf552ce6bd2ceee305fe78fe5a81", "filename": "src/test/compile-fail/issue-23729.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -18,7 +18,8 @@ fn main() {\n         }\n \n         impl Iterator for Recurrence {\n-            //~^ ERROR not all trait items implemented, missing: `Item` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Item` in implementation\n             #[inline]\n             fn next(&mut self) -> Option<u64> {\n                 if self.pos < 2 {"}, {"sha": "2062e2373129bd77d698d0aa555743dd85d0494d", "filename": "src/test/compile-fail/issue-23827.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -34,7 +34,8 @@ impl<C: Component> FnMut<(C,)> for Prototype {\n }\n \n impl<C: Component> FnOnce<(C,)> for Prototype {\n-    //~^ ERROR not all trait items implemented, missing: `Output` [E0046]\n+    //~^ ERROR E0046\n+    //~| NOTE missing `Output` in implementation\n     extern \"rust-call\" fn call_once(self, (comp,): (C,)) -> Prototype {\n         Fn::call(&self, (comp,))\n     }"}, {"sha": "d39fd539dcebc301350cc85ba5e606408c774f20", "filename": "src/test/compile-fail/issue-24356.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -28,7 +28,8 @@ fn main() {\n \n         // Causes ICE\n         impl Deref for Thing {\n-            //~^ ERROR not all trait items implemented, missing: `Target` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Target` in implementation\n             fn deref(&self) -> i8 { self.0 }\n         }\n "}, {"sha": "ce3fa487d4e02fa0b892acf8d676340b50a18a22", "filename": "src/test/compile-fail/issue-27340.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -10,7 +10,7 @@\n \n struct Foo;\n #[derive(Copy, Clone)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type; field `0` does not implement\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n struct Bar(Foo);\n \n fn main() {}"}, {"sha": "5e3b777cc0b62cd845cb9af92176b3c64a590d8c", "filename": "src/test/compile-fail/issue-34209.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34209.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -15,7 +15,9 @@ enum S {\n fn bug(l: S) {\n     match l {\n         S::B{ } => { },\n-        //~^ ERROR ambiguous associated type; specify the type using the syntax `<S as Trait>::B`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<S as Trait>::B`\n     }\n }\n "}, {"sha": "f5aa4fadbed88605886670d9165c9e4ce41fd759", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]"}, {"sha": "71f28054579157b40e159f1d924e72b8b4913bcc", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n }"}, {"sha": "e397805565bbdcd95c036d8f1ce6ff45dbe560be", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -12,5 +12,7 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "c3f3a718ad0e21cf5c6a91ec11b62fe5031d442f", "filename": "src/test/compile-fail/issue-6458-4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -10,7 +10,9 @@\n \n fn foo(b: bool) -> Result<bool,String> {\n     Err(\"bar\".to_string());\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "a64522a0e5b7543bfc038c051d3247a759a9088a", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -17,7 +17,9 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR type annotations or generic parameter binding required\n+   //~^ ERROR unable to infer enough type information about `_` [E0282]\n+   //~| NOTE cannot infer type for `_`\n+   //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "e3cb1d0c7daafac93b6be3ec2842647bf4ca1e8c", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -10,5 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR type annotations or generic parameter binding required\n+    let it = v.iter(); //~ ERROR unable to infer enough type information about `_` [E0282]\n+                       //~| NOTE cannot infer type for `_`\n+                       //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "4f86909765ef1f84f0efd972291286990f8b9617", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n     x.foo();\n }\n "}, {"sha": "e685ebc272098b1264366b8a59b0905305a4829e", "filename": "src/test/compile-fail/qualified-path-params-2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqualified-path-params-2.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -25,7 +25,11 @@ impl S {\n     fn f<T>() {}\n }\n \n-type A = <S as Tr>::A::f<u8>; //~ ERROR type parameters are not allowed on this type\n-//~^ ERROR ambiguous associated type; specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n+type A = <S as Tr>::A::f<u8>;\n+//~^ ERROR type parameters are not allowed on this type\n+//~| NOTE type parameter not allowed\n+//~| ERROR ambiguous associated type\n+//~| NOTE ambiguous associated type\n+//~| NOTE specify the type using the syntax `<<S as Tr>::A as Trait>::f`\n \n fn main() {}"}, {"sha": "860e69fcaec4d46b6f0b43d12d17f4adc0ef8989", "filename": "src/test/compile-fail/self-impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-impl.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -31,9 +31,13 @@ impl SuperFoo for Bar {\n impl Bar {\n     fn f() {\n         let _: <Self>::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n         let _: Self::Baz = true;\n-//~^ERROR: ambiguous associated type; specify the type using the syntax `<Bar as Trait>::Baz`\n+        //~^ ERROR ambiguous associated type\n+        //~| NOTE ambiguous associated type\n+        //~| NOTE specify the type using the syntax `<Bar as Trait>::Baz`\n     }\n }\n "}, {"sha": "e6545063dbd4414e4a246986693933f4751bbe3a", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -34,7 +34,9 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {}"}, {"sha": "41242a44f58b80c1c852473ca2c8bbf39d38e4e2", "filename": "src/test/compile-fail/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -9,20 +9,27 @@\n // except according to those terms.\n \n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n trait Trait: Copy<Send> {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n \n struct MyStruct2<'a, T: Copy<'a>>;\n //~^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~| NOTE unexpected lifetime parameter\n+\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-//~^ ERROR: wrong number of type arguments: expected 0, found 1\n-//~^^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n+//~| ERROR: wrong number of lifetime parameters: expected 0, found 1\n+//~| NOTE unexpected lifetime parameter\n \n fn main() {\n }"}, {"sha": "42db3b47a04f3af15e6c3faf07ed8e2107a9b528", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -13,107 +13,141 @@\n \n fn test() -> _ { 5 }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test2() -> (_, _) { (5, 5) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST3: _ = \"test\";\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST4: _ = 145;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n static TEST5: (_, _) = (1, 2);\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n+//~| NOTE not allowed in type signatures\n \n fn test6(_: _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test7(x: _) { let _x: usize = x; }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE not allowed in type signatures\n \n struct Test9;\n \n impl Test9 {\n     fn test9(&self) -> _ { () }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn test10(&self, _x : _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n struct Test10 {\n     a: _,\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n     b: (_, _),\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n }\n \n pub fn main() {\n     fn fn_test() -> _ { 5 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test2() -> (_, _) { (5, 5) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST3: _ = \"test\";\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST4: _ = 145;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     static FN_TEST5: (_, _) = (1, 2);\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test6(_: _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test7(x: _) { let _x: usize = x; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| NOTE not allowed in type signatures\n \n     struct FnTest9;\n \n     impl FnTest9 {\n         fn fn_test9(&self) -> _ { () }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n \n         fn fn_test10(&self, _x : _) { }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n     struct FnTest10 {\n         a: _,\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n         b: (_, _),\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n         //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| NOTE not allowed in type signatures\n+        //~| NOTE not allowed in type signatures\n     }\n \n }"}, {"sha": "f60d925a74864b918978de7a9ecc12ed9d8f4663", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -17,5 +17,6 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR E0244\n+    //~| NOTE expected 1 type arguments, found 2\n }"}, {"sha": "ec2675ece74b0dea088c6325650d63c22dd86682", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -17,5 +17,6 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, usize> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR E0244\n+    //~| NOTE expected 1 type arguments, found 2\n }"}, {"sha": "1209757610251cd8477b890325a24bdaf7727b2a", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -13,7 +13,8 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1\n+//~^ ERROR E0244\n+//~| NOTE expected no type arguments, found 1\n //~| ERROR associated type `Output` not found\n \n fn main() {}"}, {"sha": "380cdd266cd6e86eff564624814a54a7586148c2", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -11,5 +11,7 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR type annotations or generic parameter binding required\n+    None; //~ ERROR unable to infer enough type information about `_` [E0282]\n+          //~| NOTE cannot infer type for `_`\n+          //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "ba94bf613d217d8e18c3ff27775e91b2a82185ee", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -13,5 +13,7 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR type annotations or generic parameter binding required\n+    S { o: &None }; //~ ERROR unable to infer enough type information about `_` [E0282]\n+                    //~| NOTE cannot infer type for `_`\n+                    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "25709f35246e3b37f70ae690f6869b133718bbc0", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1744c46e47434d8c0b63a839678ce45f1988bb74/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=1744c46e47434d8c0b63a839678ce45f1988bb74", "patch": "@@ -11,5 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR type annotations or generic parameter binding required\n+    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~| NOTE cannot infer type for `_`\n+    //~| NOTE type annotations or generic parameter binding\n }"}]}