{"sha": "9aee3c28837b7987269f14bd593fc4f81a161c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWUzYzI4ODM3Yjc5ODcyNjlmMTRiZDU5M2ZjNGY4MWExNjFjNDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-07T03:17:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-07T03:17:44Z"}, "message": "Rollup merge of #86916 - godmar:@godmar/thread-yield-documentation-fix, r=joshtriplett\n\nrewrote documentation for thread::yield_now()\n\nThe old documentation suggested the use of yield_now for repeated\npolling instead of discouraging it; it also made the false claim that\nchannels are implemented using yield_now. (They are not, except for\na corner case).", "tree": {"sha": "d8608409516bb7311d49572ecca994467f99d38d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8608409516bb7311d49572ecca994467f99d38d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aee3c28837b7987269f14bd593fc4f81a161c43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5RzYCRBK7hj4Ov3rIwAAtlUIAFYPOC6IfnWT5V0Gy6LHmOAm\nqlU3bkSF0T7T3fiij9nqqzjBVCZ38LbLxJMSJMVTk6JWs+LJJxU0UHRz6ykGhiBM\nfC2OEJiE2nAZnhnB0ypROxUqivfzAovW2CufMVo4K3Mn/u1JzZq9tQzwqo1oduDM\nhS2bA0SoFipJ4axLk1dqI3L9bOZ6NJNT7Gb0WVfoBJAZoDPWAy7+ZHE0W5aQvCSN\nxHEEVWyE+mLHega6CCebdQmN30iwrl6wbPr7NttkdoVRNu/rWNBFROdfBcixz3oF\nLTp+C2/2S/opGEnrbXth04V6B/yBkjyOtLuHfxEoL3t5meKJqHWGCfwzXixwVnU=\n=u1t5\n-----END PGP SIGNATURE-----\n", "payload": "tree d8608409516bb7311d49572ecca994467f99d38d\nparent 7be29c1627d741f300e05ffb7d0ac430005d12e1\nparent fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6\nauthor Yuki Okushi <jtitor@2k36.org> 1625627864 +0900\ncommitter GitHub <noreply@github.com> 1625627864 +0900\n\nRollup merge of #86916 - godmar:@godmar/thread-yield-documentation-fix, r=joshtriplett\n\nrewrote documentation for thread::yield_now()\n\nThe old documentation suggested the use of yield_now for repeated\npolling instead of discouraging it; it also made the false claim that\nchannels are implemented using yield_now. (They are not, except for\na corner case).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aee3c28837b7987269f14bd593fc4f81a161c43", "html_url": "https://github.com/rust-lang/rust/commit/9aee3c28837b7987269f14bd593fc4f81a161c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aee3c28837b7987269f14bd593fc4f81a161c43/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be29c1627d741f300e05ffb7d0ac430005d12e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be29c1627d741f300e05ffb7d0ac430005d12e1", "html_url": "https://github.com/rust-lang/rust/commit/7be29c1627d741f300e05ffb7d0ac430005d12e1"}, {"sha": "fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "html_url": "https://github.com/rust-lang/rust/commit/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "da2d11604934fa118b0dfd38a158972098f51c5f", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9aee3c28837b7987269f14bd593fc4f81a161c43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aee3c28837b7987269f14bd593fc4f81a161c43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=9aee3c28837b7987269f14bd593fc4f81a161c43", "patch": "@@ -651,22 +651,23 @@ pub fn current() -> Thread {\n \n /// Cooperatively gives up a timeslice to the OS scheduler.\n ///\n-/// This is used when the programmer knows that the thread will have nothing\n-/// to do for some time, and thus avoid wasting computing time.\n-///\n-/// For example when polling on a resource, it is common to check that it is\n-/// available, and if not to yield in order to avoid busy waiting.\n-///\n-/// Thus the pattern of `yield`ing after a failed poll is rather common when\n-/// implementing low-level shared resources or synchronization primitives.\n-///\n-/// However programmers will usually prefer to use [`channel`]s, [`Condvar`]s,\n-/// [`Mutex`]es or [`join`] for their synchronization routines, as they avoid\n-/// thinking about thread scheduling.\n-///\n-/// Note that [`channel`]s for example are implemented using this primitive.\n-/// Indeed when you call `send` or `recv`, which are blocking, they will yield\n-/// if the channel is not available.\n+/// This calls the underlying OS scheduler's yield primitive, signaling\n+/// that the calling thread is willing to give up its remaining timeslice\n+/// so that the OS may schedule other threads on the CPU.\n+///\n+/// A drawback of yielding in a loop is that if the OS does not have any\n+/// other ready threads to run on the current CPU, the thread will effectively\n+/// busy-wait, which wastes CPU time and energy.\n+///\n+/// Therefore, when waiting for events of interest, a programmer's first\n+/// choice should be to use synchronization devices such as [`channel`]s,\n+/// [`Condvar`]s, [`Mutex`]es or [`join`] since these primitives are\n+/// implemented in a blocking manner, giving up the CPU until the event\n+/// of interest has occurred which avoids repeated yielding.\n+///\n+/// `yield_now` should thus be used only rarely, mostly in situations where\n+/// repeated polling is required because there is no other suitable way to\n+/// learn when an event of interest has occurred.\n ///\n /// # Examples\n ///"}]}