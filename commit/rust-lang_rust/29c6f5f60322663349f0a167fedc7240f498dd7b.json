{"sha": "29c6f5f60322663349f0a167fedc7240f498dd7b", "node_id": "C_kwDOAAsO6NoAKDI5YzZmNWY2MDMyMjY2MzM0OWYwYTE2N2ZlZGM3MjQwZjQ5OGRkN2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-08T11:43:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T11:43:18Z"}, "message": "Rollup merge of #97763 - RalfJung:fallible-cast, r=lcnr\n\nAllow ptr_from_addr_cast to fail\n\nThis is needed for https://github.com/rust-lang/miri/issues/2133: I would like to have an option in Miri to error when a int2ptr cast is executed.", "tree": {"sha": "0c4246afe481b22ceb1bbaa8d1f5d6a19f1041ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4246afe481b22ceb1bbaa8d1f5d6a19f1041ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c6f5f60322663349f0a167fedc7240f498dd7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioItWCRBK7hj4Ov3rIwAA/UwIACfVcmizAMSoA5EVtOJzzonx\nqh5upqv9SYglp0MvtIlxgUvS/C2OWCyvzM8otpFygRYm2bJE9O9xKq/N2fMNbTfH\nTMf0bgWFfbfVsuhSbHP2QqnoZZ5pg72eSdD8kTF/3JbyfDzPKiAgjoin4bR9ZJ/u\nWLaglYa7IfNHl47b564gUTuGM9BV4vaiycYkaYPFSw/ssRXi1FmLQzfuA1cAuoEr\ndNwJgPy03rHrRw2bhQkv42X88NqeFrkjRL1K3PS5/JrNa+2KwD27T59EPDjUtsqL\nRcD6lxaH83Jd/AYrxuK7+jjqsTcQhuLlvtpVCSjDQcDUDYISlEzcVMkwRM5OC6I=\n=SzST\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c4246afe481b22ceb1bbaa8d1f5d6a19f1041ae\nparent f6b04ad066c96622c90be20766a568a942075473\nparent e1f073692781c832b4880158515efda8b9e6f48b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654688598 +0200\ncommitter GitHub <noreply@github.com> 1654688598 +0200\n\nRollup merge of #97763 - RalfJung:fallible-cast, r=lcnr\n\nAllow ptr_from_addr_cast to fail\n\nThis is needed for https://github.com/rust-lang/miri/issues/2133: I would like to have an option in Miri to error when a int2ptr cast is executed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c6f5f60322663349f0a167fedc7240f498dd7b", "html_url": "https://github.com/rust-lang/rust/commit/29c6f5f60322663349f0a167fedc7240f498dd7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c6f5f60322663349f0a167fedc7240f498dd7b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b04ad066c96622c90be20766a568a942075473", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b04ad066c96622c90be20766a568a942075473", "html_url": "https://github.com/rust-lang/rust/commit/f6b04ad066c96622c90be20766a568a942075473"}, {"sha": "e1f073692781c832b4880158515efda8b9e6f48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f073692781c832b4880158515efda8b9e6f48b", "html_url": "https://github.com/rust-lang/rust/commit/e1f073692781c832b4880158515efda8b9e6f48b"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "fb484fba9fd066e77ed8f5edffe2210b0221dfd5", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c6f5f60322663349f0a167fedc7240f498dd7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c6f5f60322663349f0a167fedc7240f498dd7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=29c6f5f60322663349f0a167fedc7240f498dd7b", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let addr = addr.to_machine_usize(self)?;\n \n         // Then turn address into pointer.\n-        let ptr = M::ptr_from_addr_cast(&self, addr);\n+        let ptr = M::ptr_from_addr_cast(&self, addr)?;\n         Ok(Scalar::from_maybe_pointer(ptr, self).into())\n     }\n "}, {"sha": "5377535b9fa0877b25666ee9114fd6976b679773", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29c6f5f60322663349f0a167fedc7240f498dd7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c6f5f60322663349f0a167fedc7240f498dd7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=29c6f5f60322663349f0a167fedc7240f498dd7b", "patch": "@@ -294,11 +294,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn ptr_from_addr_cast(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<Self::PointerTag>>;\n+    ) -> InterpResult<'tcx, Pointer<Option<Self::PointerTag>>>;\n \n-    // FIXME: Transmuting an integer to a pointer should just always return a `None`\n-    // provenance, but that causes problems with function pointers in Miri.\n     /// Hook for returning a pointer from a transmute-like operation on an addr.\n+    /// This is only needed to support Miri's (unsound) \"allow-ptr-int-transmute\" flag.\n     fn ptr_from_addr_transmute(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n@@ -519,8 +518,10 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn ptr_from_addr_cast(\n         _ecx: &InterpCx<$mir, $tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<AllocId>> {\n-        Pointer::new(None, Size::from_bytes(addr))\n+    ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n+        // Allow these casts, but make the pointer not dereferenceable.\n+        // (I.e., they behave like transmutation.)\n+        Ok(Pointer::new(None, Size::from_bytes(addr)))\n     }\n \n     #[inline(always)]"}]}