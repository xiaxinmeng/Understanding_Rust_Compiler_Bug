{"sha": "19eb4194b239918d599f0602339a1d0193df5547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZWI0MTk0YjIzOTkxOGQ1OTlmMDYwMjMzOWExZDAxOTNkZjU1NDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T12:49:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T12:49:45Z"}, "message": "Fix unsize coerce for structs containing `PhantomData` like `Unique`", "tree": {"sha": "8b438767f87d542058963d2f6ff9e0ca690b2b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b438767f87d542058963d2f6ff9e0ca690b2b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19eb4194b239918d599f0602339a1d0193df5547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb4194b239918d599f0602339a1d0193df5547", "html_url": "https://github.com/rust-lang/rust/commit/19eb4194b239918d599f0602339a1d0193df5547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19eb4194b239918d599f0602339a1d0193df5547/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73248114eaf11c0f99f389e138aa2c1930d5ac14", "url": "https://api.github.com/repos/rust-lang/rust/commits/73248114eaf11c0f99f389e138aa2c1930d5ac14", "html_url": "https://github.com/rust-lang/rust/commit/73248114eaf11c0f99f389e138aa2c1930d5ac14"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "b6f5ad7589092f87f6bdfbd024f51eb08c8387d0", "filename": "examples/mini_core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4194b239918d599f0602339a1d0193df5547/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4194b239918d599f0602339a1d0193df5547/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=19eb4194b239918d599f0602339a1d0193df5547", "patch": "@@ -12,6 +12,7 @@ pub trait Unsize<T: ?Sized> {}\n pub trait CoerceUnsized<T> {}\n \n impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n \n #[lang = \"copy\"]\n@@ -169,6 +170,9 @@ impl<T: ?Sized> PartialEq for *const T {\n     }\n }\n \n+#[lang = \"phantom_data\"]\n+pub struct PhantomData<T: ?Sized>;\n+\n #[lang = \"fn_once\"]\n #[rustc_paren_sugar]\n pub trait FnOnce<Args> {"}, {"sha": "b47b46640898ae27ca1b18dfa1d32ffd38cb7431", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4194b239918d599f0602339a1d0193df5547/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4194b239918d599f0602339a1d0193df5547/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=19eb4194b239918d599f0602339a1d0193df5547", "patch": "@@ -102,6 +102,13 @@ macro_rules! assert_eq {\n     }\n }\n \n+struct Unique<T: ?Sized> {\n+    pointer: *const T,\n+    _marker: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n fn main() {\n     unsafe {\n         let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n@@ -133,6 +140,11 @@ fn main() {\n \n         assert!(!intrinsics::needs_drop::<u8>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n+\n+        Unique {\n+            pointer: 0 as *const &str,\n+            _marker: PhantomData,\n+        } as Unique<dyn SomeTrait>;\n     }\n \n     let _ = NoisyDrop {"}, {"sha": "68a82e65515ebdec61009e6de65e6325a14fd455", "filename": "src/common.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19eb4194b239918d599f0602339a1d0193df5547/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19eb4194b239918d599f0602339a1d0193df5547/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=19eb4194b239918d599f0602339a1d0193df5547", "patch": "@@ -259,6 +259,17 @@ impl<'tcx> CValue<'tcx> {\n                 for idx in 0..field_count {\n                     let field_dest = dest.place_field(fx, mir::Field::new(idx));\n                     let field_src = self.value_field(fx, mir::Field::new(idx));\n+                    if field_src.layout().ty.is_phantom_data() {\n+                        // Ignore PhantomData so for example `Unique<()>` can coerce to `Unique<Debug>`\n+                        //\n+                        // ```rust\n+                        // struct Unique<T: ?Sized> {\n+                        //     pointer: NonZero<*const T>,\n+                        //     _marker: PhantomData<T>,\n+                        // }\n+                        // ```\n+                        continue;\n+                    }\n                     if field_src.layout().ty != field_dest.layout().ty {\n                         assert!(!found_unsize_field);\n                         found_unsize_field = true;"}]}