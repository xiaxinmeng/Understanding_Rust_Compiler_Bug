{"sha": "9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZjNiMmNhMmE5ZDM3NjU3ZWExYjVkZTA1NmRkNzMyNGRjYTA2MzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-07T04:46:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-07T04:46:05Z"}, "message": "Rollup merge of #67898 - matthewjasper:newtype-index-hygiene, r=Centril\n\nImprove hygiene of `newtype_index`\n\n`newtype_index` no longer needs `rustc_index::vec::Idx` to be in scope.\n\nr? @Centril", "tree": {"sha": "23d33c63262f5f834c10667d956ce50f38b4f02d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23d33c63262f5f834c10667d956ce50f38b4f02d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFA0NCRBK7hj4Ov3rIwAAdHIIAIlfKu7jPaFB9X8CfRWE86gW\n45MZZvhV4M5xesqWVrtM4qW7GX/PfYTEfpGjMqpGotk9Autvlwb5kKSmvZP1WlP0\nzathx/kqHGO8eW8gX7WW8d7QsH5saJuHJtgpBOBFZMDSjBad6uuXtj4h5Xnkncyo\nEUjGLQiumz8qZWnWtWzfIbMU5JHAjXS0sLiGcwjSf1IhJ2fO903FMMF2H7ysIC6r\nozsKC1Vwq5F+4KcYCtCVWBMgWoAzJN+3yhI1B/l5QxW8ikDFSY+LAC14K8sJ8XCx\nhLX7NunW9JvM+EN5/kX2XuQtzOsh8ID6lqtR+sFEPuUkHwuT/MJh1rKyF5tXevY=\n=kf+F\n-----END PGP SIGNATURE-----\n", "payload": "tree 23d33c63262f5f834c10667d956ce50f38b4f02d\nparent 6d9913d51b0e5b898f5d42a21bdcd9510658ec9c\nparent 9462c8babb8743a12ffa467dfc10f7b03a2f77c8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578372365 +0900\ncommitter GitHub <noreply@github.com> 1578372365 +0900\n\nRollup merge of #67898 - matthewjasper:newtype-index-hygiene, r=Centril\n\nImprove hygiene of `newtype_index`\n\n`newtype_index` no longer needs `rustc_index::vec::Idx` to be in scope.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "html_url": "https://github.com/rust-lang/rust/commit/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d9913d51b0e5b898f5d42a21bdcd9510658ec9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9913d51b0e5b898f5d42a21bdcd9510658ec9c", "html_url": "https://github.com/rust-lang/rust/commit/6d9913d51b0e5b898f5d42a21bdcd9510658ec9c"}, {"sha": "9462c8babb8743a12ffa467dfc10f7b03a2f77c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9462c8babb8743a12ffa467dfc10f7b03a2f77c8", "html_url": "https://github.com/rust-lang/rust/commit/9462c8babb8743a12ffa467dfc10f7b03a2f77c8"}], "stats": {"total": 132, "additions": 80, "deletions": 52}, "files": [{"sha": "45ef52dbf39c2ef33f61bbcec7b604cc9fbd9737", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -2,7 +2,7 @@\n \n use crate::dep_graph::DepNode;\n use crate::ich::Fingerprint;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n rustc_index::newtype_index! {\n     pub struct SerializedDepNodeIndex { .. }"}, {"sha": "9e9c8bd846473dacba9d4112868e7b8e42432ce7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -14,7 +14,6 @@ use rustc_hir::Node;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "6d2ec445763539d0dfed252681b6cb53ae61d437", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -56,7 +56,6 @@ impl fmt::Display for HirId {\n rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n \n-use rustc_index::vec::Idx;\n rustc_index::newtype_index! {\n     /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";\n     /// that is, within a `hir::Item`, `hir::TraitItem`, or `hir::ImplItem`. There is no"}, {"sha": "d14bafb44fd5b519c1ded8c80b32965ddd8bc97e", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -120,21 +120,21 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: $type = $type::from_u32_const($max);\n+            $v const MAX: Self = Self::from_u32_const($max);\n \n             #[inline]\n             $v fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n                 unsafe {\n-                    $type::from_u32_unchecked(value as u32)\n+                    Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n             $v fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n                 unsafe {\n-                    $type::from_u32_unchecked(value)\n+                    Self::from_u32_unchecked(value)\n                 }\n             }\n \n@@ -152,13 +152,13 @@ macro_rules! newtype_index {\n                 ];\n \n                 unsafe {\n-                    $type { private: value }\n+                    Self { private: value }\n                 }\n             }\n \n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n-                $type { private: value }\n+                Self { private: value }\n             }\n \n             /// Extracts the value of this index as an integer.\n@@ -184,14 +184,14 @@ macro_rules! newtype_index {\n             type Output = Self;\n \n             fn add(self, other: usize) -> Self {\n-                Self::new(self.index() + other)\n+                Self::from_usize(self.index() + other)\n             }\n         }\n \n-        impl Idx for $type {\n+        impl $crate::vec::Idx for $type {\n             #[inline]\n             fn new(value: usize) -> Self {\n-                Self::from(value)\n+                Self::from_usize(value)\n             }\n \n             #[inline]\n@@ -204,39 +204,39 @@ macro_rules! newtype_index {\n             #[inline]\n             fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n                 <usize as ::std::iter::Step>::steps_between(\n-                    &Idx::index(*start),\n-                    &Idx::index(*end),\n+                    &Self::index(*start),\n+                    &Self::index(*end),\n                 )\n             }\n \n             #[inline]\n             fn replace_one(&mut self) -> Self {\n-                ::std::mem::replace(self, Self::new(1))\n+                ::std::mem::replace(self, Self::from_u32(1))\n             }\n \n             #[inline]\n             fn replace_zero(&mut self) -> Self {\n-                ::std::mem::replace(self, Self::new(0))\n+                ::std::mem::replace(self, Self::from_u32(0))\n             }\n \n             #[inline]\n             fn add_one(&self) -> Self {\n-                Self::new(Idx::index(*self) + 1)\n+                Self::from_usize(Self::index(*self) + 1)\n             }\n \n             #[inline]\n             fn sub_one(&self) -> Self {\n-                Self::new(Idx::index(*self) - 1)\n+                Self::from_usize(Self::index(*self) - 1)\n             }\n \n             #[inline]\n             fn add_usize(&self, u: usize) -> Option<Self> {\n-                Idx::index(*self).checked_add(u).map(Self::new)\n+                Self::index(*self).checked_add(u).map(Self::from_usize)\n             }\n \n             #[inline]\n             fn sub_usize(&self, u: usize) -> Option<Self> {\n-                Idx::index(*self).checked_sub(u).map(Self::new)\n+                Self::index(*self).checked_sub(u).map(Self::from_usize)\n             }\n         }\n \n@@ -257,14 +257,14 @@ macro_rules! newtype_index {\n         impl From<usize> for $type {\n             #[inline]\n             fn from(value: usize) -> Self {\n-                $type::from_usize(value)\n+                Self::from_usize(value)\n             }\n         }\n \n         impl From<u32> for $type {\n             #[inline]\n             fn from(value: u32) -> Self {\n-                $type::from_u32(value)\n+                Self::from_u32(value)\n             }\n         }\n \n@@ -409,7 +409,7 @@ macro_rules! newtype_index {\n     (@decodable $type:ident) => (\n         impl ::rustc_serialize::Decodable for $type {\n             fn decode<D: ::rustc_serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-                d.read_u32().map(Self::from)\n+                d.read_u32().map(Self::from_u32)\n             }\n         }\n     );\n@@ -500,7 +500,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = $type::from_u32_const($constant);\n+        $v const $name: $type = $type::from_u32_const($constant);\n         $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n@@ -839,3 +839,6 @@ impl<I: Idx> FnMut<(usize,)> for IntoIdx<I> {\n         I::new(n)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "15c43c72c7b3757ba55c1bdce8413f55e72a653f", "filename": "src/librustc_index/vec/tests.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_index%2Fvec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_index%2Fvec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec%2Ftests.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -0,0 +1,51 @@\n+#![allow(dead_code)]\n+newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n+\n+#[test]\n+fn index_size_is_optimized() {\n+    use std::mem::size_of;\n+\n+    assert_eq!(size_of::<MyIdx>(), 4);\n+    // Uses 0xFFFF_FFFB\n+    assert_eq!(size_of::<Option<MyIdx>>(), 4);\n+    // Uses 0xFFFF_FFFC\n+    assert_eq!(size_of::<Option<Option<MyIdx>>>(), 4);\n+    // Uses 0xFFFF_FFFD\n+    assert_eq!(size_of::<Option<Option<Option<MyIdx>>>>(), 4);\n+    // Uses 0xFFFF_FFFE\n+    assert_eq!(size_of::<Option<Option<Option<Option<MyIdx>>>>>(), 4);\n+    // Uses 0xFFFF_FFFF\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<MyIdx>>>>>>(), 4);\n+    // Uses a tag\n+    assert_eq!(size_of::<Option<Option<Option<Option<Option<Option<MyIdx>>>>>>>(), 8);\n+}\n+\n+#[test]\n+fn range_iterator_iterates_forwards() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(\n+        range.collect::<Vec<_>>(),\n+        [MyIdx::from_u32(1), MyIdx::from_u32(2), MyIdx::from_u32(3)]\n+    );\n+}\n+\n+#[test]\n+fn range_iterator_iterates_backwards() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(\n+        range.rev().collect::<Vec<_>>(),\n+        [MyIdx::from_u32(3), MyIdx::from_u32(2), MyIdx::from_u32(1)]\n+    );\n+}\n+\n+#[test]\n+fn range_count_is_correct() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(range.count(), 3);\n+}\n+\n+#[test]\n+fn range_size_hint_is_correct() {\n+    let range = MyIdx::from_u32(1)..MyIdx::from_u32(4);\n+    assert_eq!(range.size_hint(), (3, Some(3)));\n+}"}, {"sha": "ef70b127ac5bd4b1bf513a542f57536408711379", "filename": "src/librustc_mir/borrow_check/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraints%2Fmod.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use std::fmt;\n use std::ops::Index;\n "}, {"sha": "c95919685bbc73e69f5f656f3140db54e387fff3", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -2,7 +2,7 @@ use crate::rustc::ty::{self, Ty};\n use rustc::infer::region_constraints::MemberConstraint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use std::hash::Hash;\n use std::ops::Index;"}, {"sha": "8155aa0ee000a05a820d54d199584b163148b868", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -1,7 +1,7 @@\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, ReadOnlyBodyAndCache};\n use rustc_data_structures::vec_linked_list as vll;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n use crate::util::liveness::{categorize, DefUse};\n "}, {"sha": "8d51cb2391234749c76d1832ac7e078f690504f2", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::{self, TyCtxt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n \n use crate::borrow_check::{\n     places_conflict, BorrowData, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext,"}, {"sha": "e5cddaf6c66f28839c752ff1a7936d5952dd948a", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -2,7 +2,7 @@ use core::slice::Iter;\n use rustc::mir::*;\n use rustc::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Enumerated, Idx, IndexVec};\n+use rustc_index::vec::{Enumerated, IndexVec};\n use rustc_span::Span;\n use smallvec::SmallVec;\n "}, {"sha": "9fefe908e578e3838b1cc2b90c276668a63c2efa", "filename": "src/librustc_session/node_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -1,4 +1,3 @@\n-use rustc_index::vec::Idx;\n use rustc_serialize::{Decoder, Encoder};\n use rustc_span::ExpnId;\n use std::fmt;"}, {"sha": "40abc8b2179b847d8caaa3d9bb78e2f9e7742cd1", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef3b2ca2a9d37657ea1b5de056dd7324dca0632/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=9ef3b2ca2a9d37657ea1b5de056dd7324dca0632", "patch": "@@ -5,7 +5,6 @@\n use arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n-use rustc_index::vec::Idx;\n use rustc_macros::{symbols, HashStable_Generic};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};"}, {"sha": "fe68b394e5a5cf2c2f9dc01e3a4391d0a2f5523c", "filename": "src/test/ui-fulldeps/newtype_index.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d9913d51b0e5b898f5d42a21bdcd9510658ec9c/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9913d51b0e5b898f5d42a21bdcd9510658ec9c/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fnewtype_index.rs?ref=6d9913d51b0e5b898f5d42a21bdcd9510658ec9c", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-\n-#![feature(rustc_private)]\n-\n-extern crate rustc_index;\n-extern crate serialize as rustc_serialize;\n-\n-use rustc_index::{newtype_index, vec::Idx};\n-\n-newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n-\n-use std::mem::size_of;\n-\n-fn main() {\n-    assert_eq!(size_of::<MyIdx>(), 4);\n-    assert_eq!(size_of::<Option<MyIdx>>(), 4);\n-    assert_eq!(size_of::<Option<Option<MyIdx>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<MyIdx>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<MyIdx>>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<Option<MyIdx>>>>>>(), 4);\n-    assert_eq!(size_of::<Option<Option<Option<Option<Option<Option<MyIdx>>>>>>>(), 8);\n-}"}]}