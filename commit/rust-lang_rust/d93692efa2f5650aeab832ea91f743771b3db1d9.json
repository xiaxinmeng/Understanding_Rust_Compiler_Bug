{"sha": "d93692efa2f5650aeab832ea91f743771b3db1d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzY5MmVmYTJmNTY1MGFlYWI4MzJlYTkxZjc0Mzc3MWIzZGIxZDk=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-01-02T15:03:26Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-01-02T15:03:26Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "483f898c5cab224070cba132b5cdb0d0d96b1f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483f898c5cab224070cba132b5cdb0d0d96b1f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93692efa2f5650aeab832ea91f743771b3db1d9", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl/wi0IACgkQHKDfKvWd\naKV4PxAAnhjN/J+Fgb3d0rkVafH80cEomP0UTHoq53dbZW4FSHTelzoBzZeJWtHe\nUFbV9YL9dcDNJ3inZco6qIdqUZglTdP/nI06TRz1nxWDH70PkF7a0LN0q4DRxI7u\nMTxXLAxDf4E0iMgIcaVx/YLNmRjCRfT9lYlxAfcttDNJ7bkUjgmLDZRTP8N071Bf\nLOnhINas6haC7L7gMhRP6INo/uRVt5vtvZlaPaflHTCGNpdKLPsKvFNpDVl+GKID\nXbNOFNG+3y+9bRCSM72Nvl8gfy7efdlN+76vPgmTyf2aegpJq/Gn2vzo6uILhLWr\nCoa6zxYqSSjWFV/bqABZZJbo1fsd/Zy0hSur/OVGr6KwB+xmYwmnCy7Cgx92OIQG\n5IQGPnEP/Sy24ZwiTraP80uqxNVfnwkSvFyT2Q0hJzzyT8tlnhG5zH68smT96Baw\n71P9sr5NUmQnycCNq/DhUr4tCbosNEn9uHrBN+pM7AVaJU/GCEfc9j2aq0y532Dv\nXqE5sUOgyUB5u8pDNAeRpEWwMnt7+4JTGOGa5uwUNvXfsPgRaTcvzUEu7SNI/SHg\n4c3gPFOVKxhu/8TsZHblH6JR9Ih5er/wZZeRsSzObM5Z+UlvHkjH3PU9/Xfy8g8W\nqkQMbSjgLW1laKUHo0zrFS8iUl3AsgaPGtLk/RetlMeczeOrQgE=\n=bryl\n-----END PGP SIGNATURE-----", "payload": "tree 483f898c5cab224070cba132b5cdb0d0d96b1f97\nparent 48dec842f2306cb8a1493308f95cedacb74d0ab9\nparent b1965283fd9f90470731ee88b2dfdde69f5407a6\nauthor flip1995 <philipp.krones@embecosm.com> 1609599806 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1609599806 +0100\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93692efa2f5650aeab832ea91f743771b3db1d9", "html_url": "https://github.com/rust-lang/rust/commit/d93692efa2f5650aeab832ea91f743771b3db1d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93692efa2f5650aeab832ea91f743771b3db1d9/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48dec842f2306cb8a1493308f95cedacb74d0ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/48dec842f2306cb8a1493308f95cedacb74d0ab9", "html_url": "https://github.com/rust-lang/rust/commit/48dec842f2306cb8a1493308f95cedacb74d0ab9"}, {"sha": "b1965283fd9f90470731ee88b2dfdde69f5407a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1965283fd9f90470731ee88b2dfdde69f5407a6", "html_url": "https://github.com/rust-lang/rust/commit/b1965283fd9f90470731ee88b2dfdde69f5407a6"}], "stats": {"total": 922, "additions": 655, "deletions": 267}, "files": [{"sha": "f46828fec91b25594d06952716e4357053ab4df4", "filename": ".github/ISSUE_TEMPLATE/false_negative.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2FISSUE_TEMPLATE%2Ffalse_negative.md", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2FISSUE_TEMPLATE%2Ffalse_negative.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ffalse_negative.md?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -0,0 +1,35 @@\n+---\n+name: Bug Report (False Negative)\n+about: Create a bug report about missing warnings from a lint\n+labels: L-bug, L-false-negative\n+---\n+<!--\n+Thank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\n+along with any information you feel relevant to replicating the bug.\n+-->\n+Lint name:\n+\n+\n+I tried this code:\n+\n+```rust\n+<code>\n+```\n+\n+I expected to see this happen: *explanation*\n+\n+Instead, this happened: *explanation*\n+\n+### Meta\n+\n+- `cargo clippy -V`: e.g. clippy 0.0.212 (f455e46 2020-06-20)\n+- `rustc -Vv`:\n+  ```\n+  rustc 1.46.0-nightly (f455e46ea 2020-06-20)\n+  binary: rustc\n+  commit-hash: f455e46eae1a227d735091091144601b467e1565\n+  commit-date: 2020-06-20\n+  host: x86_64-unknown-linux-gnu\n+  release: 1.46.0-nightly\n+  LLVM version: 10.0\n+  ```"}, {"sha": "92a7373fc27d51f372cd389d1952800635400535", "filename": ".github/ISSUE_TEMPLATE/false_positive.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2FISSUE_TEMPLATE%2Ffalse_positive.md", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2FISSUE_TEMPLATE%2Ffalse_positive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ffalse_positive.md?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -0,0 +1,35 @@\n+---\n+name: Bug Report (False Positive)\n+about: Create a bug report about a wrongly emitted lint warning\n+labels: L-bug, L-false-positive\n+---\n+<!--\n+Thank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\n+along with any information you feel relevant to replicating the bug.\n+-->\n+Lint name:\n+\n+\n+I tried this code:\n+\n+```rust\n+<code>\n+```\n+\n+I expected to see this happen: *explanation*\n+\n+Instead, this happened: *explanation*\n+\n+### Meta\n+\n+- `cargo clippy -V`: e.g. clippy 0.0.212 (f455e46 2020-06-20)\n+- `rustc -Vv`:\n+  ```\n+  rustc 1.46.0-nightly (f455e46ea 2020-06-20)\n+  binary: rustc\n+  commit-hash: f455e46eae1a227d735091091144601b467e1565\n+  commit-date: 2020-06-20\n+  host: x86_64-unknown-linux-gnu\n+  release: 1.46.0-nightly\n+  LLVM version: 10.0\n+  ```"}, {"sha": "9d5e12aac5f7b73701396d4703666d75cd4e12e8", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -50,6 +50,9 @@ jobs:\n     - name: Build\n       run: cargo build --features deny-warnings,internal-lints\n \n+    - name: Test \"--fix -Zunstable-options\"\n+      run: cargo run --features deny-warnings,internal-lints --bin cargo-clippy -- clippy --fix -Zunstable-options\n+\n     - name: Test\n       run: cargo test --features deny-warnings,internal-lints\n "}, {"sha": "de8da99cdee12385b27570510ace9d77e5c54979", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1841,6 +1841,7 @@ Released 2018-09-13\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n+[`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"}, {"sha": "93a1e71ecabe1975fc2371b890a7adc619198380", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.212\"\n+version = \"0.1.50\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -29,7 +29,7 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.1.50\", path = \"clippy_lints\" }\n # end automatic update\n semver = \"0.11\"\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }"}, {"sha": "a4928e17e6a947a3bbcb02a3e43ae9575ddc6cf8", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -10,16 +10,16 @@ A collection of lints to catch common mistakes and improve your [Rust](https://g\n Lints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\n You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category.\n \n-Category | Description | Default level\n--- | -- | --\n-`clippy::all` | all lints that are on by default (correctness, style, complexity, perf) | **warn/deny**\n-`clippy::correctness` | code that is outright wrong or very useless | **deny**\n-`clippy::style` | code that should be written in a more idiomatic way | **warn**\n-`clippy::complexity` | code that does something simple but in a complex way | **warn**\n-`clippy::perf` | code that can be written to run faster | **warn**\n-`clippy::pedantic` | lints which are rather strict or might have false positives | allow\n-`clippy::nursery` | new lints that are still under development | allow\n-`clippy::cargo` | lints for the cargo manifest | allow\n+| Category              | Description                                                             | Default level |\n+| --------------------- | ----------------------------------------------------------------------- | ------------- |\n+| `clippy::all`         | all lints that are on by default (correctness, style, complexity, perf) | **warn/deny** |\n+| `clippy::correctness` | code that is outright wrong or very useless                             | **deny**      |\n+| `clippy::style`       | code that should be written in a more idiomatic way                     | **warn**      |\n+| `clippy::complexity`  | code that does something simple but in a complex way                    | **warn**      |\n+| `clippy::perf`        | code that can be written to run faster                                  | **warn**      |\n+| `clippy::pedantic`    | lints which are rather strict or might have false positives             | allow         |\n+| `clippy::nursery`     | new lints that are still under development                              | allow         |\n+| `clippy::cargo`       | lints for the cargo manifest                                            | allow         |\n \n More to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n \n@@ -98,17 +98,6 @@ If you want to run Clippy **only** on the given crate, use the `--no-deps` optio\n cargo clippy -p example -- --no-deps \n ```\n \n-### Running Clippy from the command line without installing it\n-\n-To have cargo compile your crate with Clippy without Clippy installation\n-in your code, you can use:\n-\n-```terminal\n-cargo run --bin cargo-clippy --manifest-path=path_to_clippys_Cargo.toml\n-```\n-\n-*Note:* Be sure that Clippy was compiled with the same version of rustc that cargo invokes here!\n-\n ### Travis CI\n \n You can add Clippy to Travis CI in the same way you use it locally:\n@@ -130,18 +119,6 @@ script:\n   # etc.\n ```\n \n-If you are on nightly, It might happen that Clippy is not available for a certain nightly release.\n-In this case you can try to conditionally install Clippy from the Git repo.\n-\n-```yaml\n-language: rust\n-rust:\n-  - nightly\n-before_script:\n-   - rustup component add clippy --toolchain=nightly || cargo install --git https://github.com/rust-lang/rust-clippy/ --force clippy\n-   # etc.\n-```\n-\n Note that adding `-D warnings` will cause your build to fail if **any** warnings are found in your code.\n That includes warnings found by rustc (e.g. `dead_code`, etc.). If you want to avoid this and only cause\n an error for Clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command"}, {"sha": "5f5048e79e7825162beb876071fa887e233298f8", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -3,7 +3,7 @@\n use std::fs;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n // This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n // the respective rustc subcrates instead of using extern crate xyz.\n@@ -44,7 +44,7 @@ pub fn run(rustc_path: Option<&str>) {\n }\n \n fn inject_deps_into_manifest(\n-    rustc_source_dir: &PathBuf,\n+    rustc_source_dir: &Path,\n     manifest_path: &str,\n     cargo_toml: &str,\n     lib_rs: &str,"}, {"sha": "7e3eaf3ae7447da40a486085b2f81ba999d35f00", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.212\"\n+version = \"0.1.50\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "b0d7c7b3baab1b71fa6d0b82090b08aadc9c37c0", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 71, "deletions": 117, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Adt, Ty};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -103,34 +103,50 @@ impl LateLintPass<'_> for Default {\n     }\n \n     fn check_block<'tcx>(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n-        // find all binding statements like `let mut _ = T::default()` where `T::default()` is the\n-        // `default` method of the `Default` trait, and store statement index in current block being\n-        // checked and the name of the bound variable\n-        let binding_statements_using_default = enumerate_bindings_using_default(cx, block);\n-\n         // start from the `let mut _ = _::default();` and look at all the following\n         // statements, see if they re-assign the fields of the binding\n-        for (stmt_idx, binding_name, binding_type, span) in binding_statements_using_default {\n-            // the last statement of a block cannot trigger the lint\n-            if stmt_idx == block.stmts.len() - 1 {\n-                break;\n-            }\n+        let stmts_head = match block.stmts {\n+            // Skip the last statement since there cannot possibly be any following statements that re-assign fields.\n+            [head @ .., _] if !head.is_empty() => head,\n+            _ => return,\n+        };\n+        for (stmt_idx, stmt) in stmts_head.iter().enumerate() {\n+            // find all binding statements like `let mut _ = T::default()` where `T::default()` is the\n+            // `default` method of the `Default` trait, and store statement index in current block being\n+            // checked and the name of the bound variable\n+            let (local, variant, binding_name, binding_type, span) = if_chain! {\n+                // only take `let ...` statements\n+                if let StmtKind::Local(local) = stmt.kind;\n+                if let Some(expr) = local.init;\n+                // only take bindings to identifiers\n+                if let PatKind::Binding(_, binding_id, ident, _) = local.pat.kind;\n+                // only when assigning `... = Default::default()`\n+                if is_expr_default(expr, cx);\n+                let binding_type = cx.typeck_results().node_type(binding_id);\n+                if let Some(adt) = binding_type.ty_adt_def();\n+                if adt.is_struct();\n+                let variant = adt.non_enum_variant();\n+                if adt.did.is_local() || !variant.is_field_list_non_exhaustive();\n+                let module_did = cx.tcx.parent_module(stmt.hir_id).to_def_id();\n+                if variant\n+                    .fields\n+                    .iter()\n+                    .all(|field| field.vis.is_accessible_from(module_did, cx.tcx));\n+                then {\n+                    (local, variant, ident.name, binding_type, expr.span)\n+                } else {\n+                    continue;\n+                }\n+            };\n \n             // find all \"later statement\"'s where the fields of the binding set as\n             // Default::default() get reassigned, unless the reassignment refers to the original binding\n             let mut first_assign = None;\n             let mut assigned_fields = Vec::new();\n             let mut cancel_lint = false;\n             for consecutive_statement in &block.stmts[stmt_idx + 1..] {\n-                // interrupt if the statement is a let binding (`Local`) that shadows the original\n-                // binding\n-                if stmt_shadows_binding(consecutive_statement, binding_name) {\n-                    break;\n-                }\n                 // find out if and which field was set by this `consecutive_statement`\n-                else if let Some((field_ident, assign_rhs)) =\n-                    field_reassigned_by_stmt(consecutive_statement, binding_name)\n-                {\n+                if let Some((field_ident, assign_rhs)) = field_reassigned_by_stmt(consecutive_statement, binding_name) {\n                     // interrupt and cancel lint if assign_rhs references the original binding\n                     if contains_name(binding_name, assign_rhs) {\n                         cancel_lint = true;\n@@ -152,7 +168,7 @@ impl LateLintPass<'_> for Default {\n                         first_assign = Some(consecutive_statement);\n                     }\n                 }\n-                // interrupt also if no field was assigned, since we only want to look at consecutive statements\n+                // interrupt if no field was assigned, since we only want to look at consecutive statements\n                 else {\n                     break;\n                 }\n@@ -161,55 +177,45 @@ impl LateLintPass<'_> for Default {\n             // if there are incorrectly assigned fields, do a span_lint_and_note to suggest\n             // construction using `Ty { fields, ..Default::default() }`\n             if !assigned_fields.is_empty() && !cancel_lint {\n-                // take the original assignment as span\n-                let stmt = &block.stmts[stmt_idx];\n-\n-                if let StmtKind::Local(preceding_local) = &stmt.kind {\n-                    // filter out fields like `= Default::default()`, because the FRU already covers them\n-                    let assigned_fields = assigned_fields\n-                        .into_iter()\n-                        .filter(|(_, rhs)| !is_expr_default(rhs, cx))\n-                        .collect::<Vec<(Symbol, &Expr<'_>)>>();\n+                // if all fields of the struct are not assigned, add `.. Default::default()` to the suggestion.\n+                let ext_with_default = !variant\n+                    .fields\n+                    .iter()\n+                    .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.ident.name));\n \n-                    // if all fields of the struct are not assigned, add `.. Default::default()` to the suggestion.\n-                    let ext_with_default = !fields_of_type(binding_type)\n-                        .iter()\n-                        .all(|field| assigned_fields.iter().any(|(a, _)| a == &field.name));\n+                let field_list = assigned_fields\n+                    .into_iter()\n+                    .map(|(field, rhs)| {\n+                        // extract and store the assigned value for help message\n+                        let value_snippet = snippet(cx, rhs.span, \"..\");\n+                        format!(\"{}: {}\", field, value_snippet)\n+                    })\n+                    .collect::<Vec<String>>()\n+                    .join(\", \");\n \n-                    let field_list = assigned_fields\n-                        .into_iter()\n-                        .map(|(field, rhs)| {\n-                            // extract and store the assigned value for help message\n-                            let value_snippet = snippet(cx, rhs.span, \"..\");\n-                            format!(\"{}: {}\", field, value_snippet)\n-                        })\n-                        .collect::<Vec<String>>()\n-                        .join(\", \");\n-\n-                    let sugg = if ext_with_default {\n-                        if field_list.is_empty() {\n-                            format!(\"{}::default()\", binding_type)\n-                        } else {\n-                            format!(\"{} {{ {}, ..Default::default() }}\", binding_type, field_list)\n-                        }\n+                let sugg = if ext_with_default {\n+                    if field_list.is_empty() {\n+                        format!(\"{}::default()\", binding_type)\n                     } else {\n-                        format!(\"{} {{ {} }}\", binding_type, field_list)\n-                    };\n+                        format!(\"{} {{ {}, ..Default::default() }}\", binding_type, field_list)\n+                    }\n+                } else {\n+                    format!(\"{} {{ {} }}\", binding_type, field_list)\n+                };\n \n-                    // span lint once per statement that binds default\n-                    span_lint_and_note(\n-                        cx,\n-                        FIELD_REASSIGN_WITH_DEFAULT,\n-                        first_assign.unwrap().span,\n-                        \"field assignment outside of initializer for an instance created with Default::default()\",\n-                        Some(preceding_local.span),\n-                        &format!(\n-                            \"consider initializing the variable with `{}` and removing relevant reassignments\",\n-                            sugg\n-                        ),\n-                    );\n-                    self.reassigned_linted.insert(span);\n-                }\n+                // span lint once per statement that binds default\n+                span_lint_and_note(\n+                    cx,\n+                    FIELD_REASSIGN_WITH_DEFAULT,\n+                    first_assign.unwrap().span,\n+                    \"field assignment outside of initializer for an instance created with Default::default()\",\n+                    Some(local.span),\n+                    &format!(\n+                        \"consider initializing the variable with `{}` and removing relevant reassignments\",\n+                        sugg\n+                    ),\n+                );\n+                self.reassigned_linted.insert(span);\n             }\n         }\n     }\n@@ -230,47 +236,6 @@ fn is_expr_default<'tcx>(expr: &'tcx Expr<'tcx>, cx: &LateContext<'tcx>) -> bool\n     }\n }\n \n-/// Returns the block indices, identifiers and types of bindings set as `Default::default()`, except\n-/// for when the pattern type is a tuple.\n-fn enumerate_bindings_using_default<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    block: &Block<'tcx>,\n-) -> Vec<(usize, Symbol, Ty<'tcx>, Span)> {\n-    block\n-        .stmts\n-        .iter()\n-        .enumerate()\n-        .filter_map(|(idx, stmt)| {\n-            if_chain! {\n-                // only take `let ...` statements\n-                if let StmtKind::Local(ref local) = stmt.kind;\n-                // only take bindings to identifiers\n-                if let PatKind::Binding(_, _, ident, _) = local.pat.kind;\n-                // that are not tuples\n-                let ty = cx.typeck_results().pat_ty(local.pat);\n-                if !matches!(ty.kind(), ty::Tuple(_));\n-                // only when assigning `... = Default::default()`\n-                if let Some(ref expr) = local.init;\n-                if is_expr_default(expr, cx);\n-                then {\n-                    Some((idx, ident.name, ty, expr.span))\n-                } else {\n-                    None\n-                }\n-            }\n-        })\n-        .collect()\n-}\n-\n-fn stmt_shadows_binding(this: &Stmt<'_>, shadowed: Symbol) -> bool {\n-    if let StmtKind::Local(local) = &this.kind {\n-        if let PatKind::Binding(_, _, ident, _) = local.pat.kind {\n-            return ident.name == shadowed;\n-        }\n-    }\n-    false\n-}\n-\n /// Returns the reassigned field and the assigning expression (right-hand side of assign).\n fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Option<(Ident, &'tcx Expr<'tcx>)> {\n     if_chain! {\n@@ -290,14 +255,3 @@ fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Op\n         }\n     }\n }\n-\n-/// Returns the vec of fields for a struct and an empty vec for non-struct ADTs.\n-fn fields_of_type(ty: Ty<'_>) -> Vec<Ident> {\n-    if let Adt(adt, _) = ty.kind() {\n-        if adt.is_struct() {\n-            let variant = &adt.non_enum_variant();\n-            return variant.fields.iter().map(|f| f.ident).collect();\n-        }\n-    }\n-    vec![]\n-}"}, {"sha": "1e7e5f53cc2a35dcbcaf2b6586871e52445ed158", "filename": "clippy_lints/src/from_over_into.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -0,0 +1,83 @@\n+use crate::utils::paths::INTO;\n+use crate::utils::{match_def_path, meets_msrv, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const FROM_OVER_INTO_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n+    ///\n+    /// **Why is this bad?** According the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl Into<StringWrapper> for String {\n+    ///     fn into(self) -> StringWrapper {\n+    ///         StringWrapper(self)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl From<String> for StringWrapper {\n+    ///     fn from(s: String) -> StringWrapper {\n+    ///         StringWrapper(s)\n+    ///     }\n+    /// }\n+    /// ```\n+    pub FROM_OVER_INTO,\n+    style,\n+    \"Warns on implementations of `Into<..>` to use `From<..>`\"\n+}\n+\n+pub struct FromOverInto {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl FromOverInto {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        FromOverInto { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n+\n+impl LateLintPass<'_> for FromOverInto {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &FROM_OVER_INTO_MSRV) {\n+            return;\n+        }\n+\n+        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        if_chain! {\n+            if let hir::ItemKind::Impl{ .. } = &item.kind;\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n+\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    FROM_OVER_INTO,\n+                    item.span,\n+                    \"an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\",\n+                    None,\n+                    \"consider to implement `From` instead\",\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "eb5857348fd390804113d7ad1f27f22cce7309c9", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "ad9b4f357a74dbbe8a489176075d158c0b45cb38", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -4,6 +4,7 @@ use crate::utils::{snippet_opt, span_lint_and_then};\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_target::abi::LayoutOf;\n \n@@ -58,6 +59,9 @@ impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if in_external_macro(cx.tcx.sess, item.span) {\n+            return;\n+        }\n         let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             let ty = cx.tcx.type_of(did);"}, {"sha": "35b057d7b6a4153b7d0372b5c40b3fe9f9544bc6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -207,6 +207,7 @@ mod float_literal;\n mod floating_point_arithmetic;\n mod format;\n mod formatting;\n+mod from_over_into;\n mod functions;\n mod future_not_send;\n mod get_last_with_len;\n@@ -614,6 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         &formatting::SUSPICIOUS_ELSE_FORMATTING,\n         &formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+        &from_over_into::FROM_OVER_INTO,\n         &functions::DOUBLE_MUST_USE,\n         &functions::MUST_USE_CANDIDATE,\n         &functions::MUST_USE_UNIT,\n@@ -1014,6 +1016,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n     store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n     store.register_late_pass(move || box ranges::Ranges::new(msrv));\n+    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n \n@@ -1417,6 +1420,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n@@ -1663,6 +1667,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::RESULT_UNIT_ERR),"}, {"sha": "bb52888883af5a90c1e366d7a688d8b2b77a186e", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -105,7 +105,7 @@ impl MacroUseImports {\n impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n         if_chain! {\n-            if cx.sess().opts.edition == Edition::Edition2018;\n+            if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n             if let Some(mac_attr) = item\n                 .attrs"}, {"sha": "29439e52c48e1252fda7a8e275741ff127a413e6", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n-                            if let Some(ret_pos) = position_before_rarrow(header_snip.clone());\n+                            if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n                                 let help = format!(\"make the function `async` and {}\", ret_sugg);"}, {"sha": "76fe8e776eafda01f6d642edb19270a5182ddba2", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for instances of `map_err(|_| Some::Enum)`\n     ///\n-    /// **Why is this bad?** This map_err throws away the original error rather than allowing the enum to contain and report the cause of the error\n+    /// **Why is this bad?** This `map_err` throws away the original error rather than allowing the enum to contain and report the cause of the error\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                     body_span,\n                                     \"`map_err(|_|...` wildcard pattern discards the original error\",\n                                     None,\n-                                    \"Consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\",\n+                                    \"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\",\n                                 );\n                             }\n                         }"}, {"sha": "c494a713631311403392539b2a3a8a6760c22c5c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -182,20 +182,6 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n \n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind() {\n             if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n-                let mut ty_snippet = None;\n-                if_chain! {\n-                    if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;\n-                    if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n-                    then {\n-                        let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n-                            GenericArg::Type(ty) => Some(ty),\n-                            _ => None,\n-                        }).collect();\n-                        if types.len() == 1 {\n-                            ty_snippet = snippet_opt(cx, types[0].span);\n-                        }\n-                    }\n-                };\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -204,7 +190,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n                          with non-Vec-based slices.\",\n                         |diag| {\n-                            if let Some(ref snippet) = ty_snippet {\n+                            if let Some(ref snippet) = get_only_generic_arg_snippet(cx, arg) {\n                                 diag.span_suggestion(\n                                     arg.span,\n                                     \"change this to\",\n@@ -247,6 +233,33 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n+            } else if match_type(cx, ty, &paths::PATH_BUF) {\n+                if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\",\n+                        |diag| {\n+                            diag.span_suggestion(\n+                                arg.span,\n+                                \"change this to\",\n+                                \"&Path\".into(),\n+                                Applicability::Unspecified,\n+                            );\n+                            for (clonespan, suggestion) in spans {\n+                                diag.span_suggestion_short(\n+                                    clonespan,\n+                                    &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n+                                        Cow::Owned(format!(\"change `{}` to\", x))\n+                                    }),\n+                                    suggestion.into(),\n+                                    Applicability::Unspecified,\n+                                );\n+                            }\n+                        },\n+                    );\n+                }\n             } else if match_type(cx, ty, &paths::COW) {\n                 if_chain! {\n                     if let TyKind::Rptr(_, MutTy { ref ty, ..} ) = arg.kind;\n@@ -309,6 +322,23 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n     }\n }\n \n+fn get_only_generic_arg_snippet(cx: &LateContext<'_>, arg: &Ty<'_>) -> Option<String> {\n+    if_chain! {\n+        if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;\n+        if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n+        let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        }).collect();\n+        if types.len() == 1;\n+        then {\n+            snippet_opt(cx, types[0].span)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n     if let TyKind::Rptr(ref lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))"}, {"sha": "1fc4ff5c2e61fcad025432b360ce6c422e8a933c", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -40,7 +40,7 @@ impl EarlyLintPass for SingleComponentPathImports {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n         if_chain! {\n             if !in_macro(item.span);\n-            if cx.sess.opts.edition == Edition::Edition2018;\n+            if cx.sess.opts.edition >= Edition::Edition2018;\n             if !item.vis.kind.is_pub();\n             if let ItemKind::Use(use_tree) = &item.kind;\n             if let segments = &use_tree.prefix.segments;"}, {"sha": "a31cd5fda849ed918211bf6d6822cf8555b3954c", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -120,7 +120,7 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        position_before_rarrow(fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+        position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n             (\n                 #[allow(clippy::cast_possible_truncation)]\n                 ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),"}, {"sha": "5aed676fceb2815e56dc8dcda839eb5252a2c3fc", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -501,8 +501,18 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: lt, kw_span: _ , default: ld}, Const { ty: rt, kw_span: _, default: rd }) =>\n-                eq_ty(lt, rt) && both(ld, rd, |ld, rd| eq_anon_const(ld, rd)),\n+            (\n+                Const {\n+                    ty: lt,\n+                    kw_span: _,\n+                    default: ld,\n+                },\n+                Const {\n+                    ty: rt,\n+                    kw_span: _,\n+                    default: rd,\n+                },\n+            ) => eq_ty(lt, rt) && both(ld, rd, |ld, rd| eq_anon_const(ld, rd)),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}, {"sha": "1c68e837c4ab97286410fc51e7f3347bb8356b3e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -788,8 +788,7 @@ pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n /// fn into3(self)   -> () {}\n ///               ^\n /// ```\n-#[allow(clippy::needless_pass_by_value)]\n-pub fn position_before_rarrow(s: String) -> Option<usize> {\n+pub fn position_before_rarrow(s: &str) -> Option<usize> {\n     s.rfind(\"->\").map(|rpos| {\n         let mut rpos = rpos;\n         let chars: Vec<char> = s.chars().collect();"}, {"sha": "b330f3d890e9cc6e4a3823629e30a0cb2f04d942", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -72,7 +72,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            return;\n         }\n         walk_expr(self, expr);\n     }"}, {"sha": "1832482346820af414a29bddccd0992cbf7442a2", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -84,3 +84,13 @@ macro_rules! as_conv {\n         0u32 as u64\n     };\n }\n+\n+#[macro_export]\n+macro_rules! large_enum_variant {\n+    () => {\n+        enum LargeEnumInMacro {\n+            A(i32),\n+            B([i32; 8000]),\n+        }\n+    };\n+}"}, {"sha": "3e0921022b4174cf4faa22bae70d821a0055dfc6", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -107,4 +107,16 @@ fn main() {\n     x.i = side_effect.next();\n     x.j = 2;\n     x.i = side_effect.next();\n+\n+    // don't lint - some private fields\n+    let mut x = m::F::default();\n+    x.a = 1;\n+}\n+\n+mod m {\n+    #[derive(Default)]\n+    pub struct F {\n+        pub a: u64,\n+        b: u64,\n+    }\n }"}, {"sha": "9a2bc778c3ff7ba5e03faccf7d69eda2e3f61d3a", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -53,7 +53,7 @@ error: field assignment outside of initializer for an instance created with Defa\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A::default()` and removing relevant reassignments\n+note: consider initializing the variable with `A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n   --> $DIR/field_reassign_with_default.rs:90:5\n    |\n LL |     let mut a: A = Default::default();\n@@ -65,7 +65,7 @@ error: field assignment outside of initializer for an instance created with Defa\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { j: 45, ..Default::default() }` and removing relevant reassignments\n+note: consider initializing the variable with `A { i: Default::default(), j: 45 }` and removing relevant reassignments\n   --> $DIR/field_reassign_with_default.rs:94:5\n    |\n LL |     let mut a: A = Default::default();"}, {"sha": "292d0924fb17a4ca1b32bf0a39fa6a81fdc68e82", "filename": "tests/ui/from_over_into.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::from_over_into)]\n+\n+// this should throw an error\n+struct StringWrapper(String);\n+\n+impl Into<StringWrapper> for String {\n+    fn into(self) -> StringWrapper {\n+        StringWrapper(self)\n+    }\n+}\n+\n+// this is fine\n+struct A(String);\n+\n+impl From<String> for A {\n+    fn from(s: String) -> A {\n+        A(s)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "18f56f854329e364a2c3e526c254a9e1b5eda0da", "filename": "tests/ui/from_over_into.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -0,0 +1,15 @@\n+error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n+  --> $DIR/from_over_into.rs:6:1\n+   |\n+LL | / impl Into<StringWrapper> for String {\n+LL | |     fn into(self) -> StringWrapper {\n+LL | |         StringWrapper(self)\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::from-over-into` implied by `-D warnings`\n+   = help: consider to implement `From` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "d22fee3f27b05818c3ed86e1127c010726bb7afa", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,7 +1,12 @@\n+// aux-build:macro_rules.rs\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n #![warn(clippy::large_enum_variant)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n enum LargeEnum {\n     A(i32),\n     B([i32; 8000]),\n@@ -51,4 +56,6 @@ enum LargeEnumOk {\n     LargeB([i32; 8001]),\n }\n \n-fn main() {}\n+fn main() {\n+    large_enum_variant!();\n+}"}, {"sha": "d39a4d462aabde949de878d8821d11950cecfc73", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,12 +1,12 @@\n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:7:5\n+  --> $DIR/large_enum_variant.rs:12:5\n    |\n LL |     B([i32; 8000]),\n    |     ^^^^^^^^^^^^^^ this variant is 32000 bytes\n    |\n    = note: `-D clippy::large-enum-variant` implied by `-D warnings`\n note: and the second-largest variant is 4 bytes:\n-  --> $DIR/large_enum_variant.rs:6:5\n+  --> $DIR/large_enum_variant.rs:11:5\n    |\n LL |     A(i32),\n    |     ^^^^^^\n@@ -16,13 +16,13 @@ LL |     B(Box<[i32; 8000]>),\n    |       ^^^^^^^^^^^^^^^^\n \n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:31:5\n+  --> $DIR/large_enum_variant.rs:36:5\n    |\n LL |     ContainingLargeEnum(LargeEnum),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32004 bytes\n    |\n note: and the second-largest variant is 8 bytes:\n-  --> $DIR/large_enum_variant.rs:30:5\n+  --> $DIR/large_enum_variant.rs:35:5\n    |\n LL |     VariantOk(i32, u32),\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -32,30 +32,30 @@ LL |     ContainingLargeEnum(Box<LargeEnum>),\n    |                         ^^^^^^^^^^^^^^\n \n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:41:5\n+  --> $DIR/large_enum_variant.rs:46:5\n    |\n LL |     StructLikeLarge { x: [i32; 8000], y: i32 },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32004 bytes\n    |\n note: and the second-largest variant is 8 bytes:\n-  --> $DIR/large_enum_variant.rs:40:5\n+  --> $DIR/large_enum_variant.rs:45:5\n    |\n LL |     VariantOk(i32, u32),\n    |     ^^^^^^^^^^^^^^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n-  --> $DIR/large_enum_variant.rs:41:5\n+  --> $DIR/large_enum_variant.rs:46:5\n    |\n LL |     StructLikeLarge { x: [i32; 8000], y: i32 },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:46:5\n+  --> $DIR/large_enum_variant.rs:51:5\n    |\n LL |     StructLikeLarge2 { x: [i32; 8000] },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32000 bytes\n    |\n note: and the second-largest variant is 8 bytes:\n-  --> $DIR/large_enum_variant.rs:45:5\n+  --> $DIR/large_enum_variant.rs:50:5\n    |\n LL |     VariantOk(i32, u32),\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "37e87e64de28f1be6c43b29e5ac6f56f2e12afa3", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^\n    |\n    = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n-   = help: Consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\n+   = help: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\n \n error: aborting due to previous error\n "}, {"sha": "0f47f1cbc4026cb77c88eb4e70612e83ba70a60c", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -57,6 +57,14 @@ pub fn checked_conversion() {\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n+pub struct FromOverInto(String);\n+\n+impl Into<FromOverInto> for String {\n+    fn into(self) -> FromOverInto {\n+        FromOverInto(self)\n+    }\n+}\n+\n pub fn filter_map_next() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n "}, {"sha": "e3e3b335cbe165721ed9ea5260dbe9f71dcd2bb4", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:142:24\n+  --> $DIR/min_rust_version_attr.rs:150:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:141:9\n+  --> $DIR/min_rust_version_attr.rs:149:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:154:24\n+  --> $DIR/min_rust_version_attr.rs:162:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:153:9\n+  --> $DIR/min_rust_version_attr.rs:161:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "06370dfce65188899dda939fb0dbee8e561c7170", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;\n+use std::path::PathBuf;\n \n fn do_vec(x: &Vec<i64>) {\n     //Nothing here\n@@ -21,6 +22,15 @@ fn do_str_mut(x: &mut String) {\n     //Nothing here either\n }\n \n+fn do_path(x: &PathBuf) {\n+    //Nothing here either\n+}\n+\n+fn do_path_mut(x: &mut PathBuf) {\n+    // no error here\n+    //Nothing here either\n+}\n+\n fn main() {}\n \n trait Foo {\n@@ -55,6 +65,14 @@ fn str_cloned(x: &String) -> String {\n     x.clone()\n }\n \n+fn path_cloned(x: &PathBuf) -> PathBuf {\n+    let a = x.clone();\n+    let b = x.clone();\n+    let c = b.clone();\n+    let d = a.clone().clone().clone();\n+    x.clone()\n+}\n+\n fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n     let a = x.capacity();\n     let b = y.clone();\n@@ -87,10 +105,12 @@ impl Foo2 for String {\n // Check that the allow attribute on parameters is honored\n mod issue_5644 {\n     use std::borrow::Cow;\n+    use std::path::PathBuf;\n \n     fn allowed(\n         #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n         #[allow(clippy::ptr_arg)] _s: &String,\n+        #[allow(clippy::ptr_arg)] _p: &PathBuf,\n         #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n     ) {\n     }\n@@ -100,6 +120,7 @@ mod issue_5644 {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n         ) {\n         }\n@@ -109,8 +130,28 @@ mod issue_5644 {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n         ) {\n         }\n     }\n }\n+\n+mod issue6509 {\n+    use std::path::PathBuf;\n+\n+    fn foo_vec(vec: &Vec<u8>) {\n+        let _ = vec.clone().pop();\n+        let _ = vec.clone().clone();\n+    }\n+\n+    fn foo_path(path: &PathBuf) {\n+        let _ = path.clone().pop();\n+        let _ = path.clone().clone();\n+    }\n+\n+    fn foo_str(str: &PathBuf) {\n+        let _ = str.clone().pop();\n+        let _ = str.clone().clone();\n+    }\n+}"}, {"sha": "708318bbe295c410f4dd20370842f9c2ce95e648", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 94, "deletions": 8, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,25 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:6:14\n+  --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:15:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:25:15\n+   |\n+LL | fn do_path(x: &PathBuf) {\n+   |               ^^^^^^^^ help: change this to: `&Path`\n+\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:28:18\n+  --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:41:14\n+  --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -38,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:50:18\n+  --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -60,8 +66,31 @@ help: change `x.clone()` to\n LL |     x.to_string()\n    |\n \n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:68:19\n+   |\n+LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n+   |                   ^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL | fn path_cloned(x: &Path) -> PathBuf {\n+   |                   ^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     let a = x.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     let b = x.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     x.to_path_buf()\n+   |\n+\n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:58:44\n+  --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -80,10 +109,67 @@ LL |     let c = y;\n    |             ^\n \n error: using a reference to `Cow` is not recommended.\n-  --> $DIR/ptr_arg.rs:72:25\n+  --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n-error: aborting due to 7 previous errors\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n+  --> $DIR/ptr_arg.rs:143:21\n+   |\n+LL |     fn foo_vec(vec: &Vec<u8>) {\n+   |                     ^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL |     fn foo_vec(vec: &[u8]) {\n+   |                     ^^^^^\n+help: change `vec.clone()` to\n+   |\n+LL |         let _ = vec.to_owned().pop();\n+   |                 ^^^^^^^^^^^^^^\n+help: change `vec.clone()` to\n+   |\n+LL |         let _ = vec.to_owned().clone();\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:148:23\n+   |\n+LL |     fn foo_path(path: &PathBuf) {\n+   |                       ^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL |     fn foo_path(path: &Path) {\n+   |                       ^^^^^\n+help: change `path.clone()` to\n+   |\n+LL |         let _ = path.to_path_buf().pop();\n+   |                 ^^^^^^^^^^^^^^^^^^\n+help: change `path.clone()` to\n+   |\n+LL |         let _ = path.to_path_buf().clone();\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:153:21\n+   |\n+LL |     fn foo_str(str: &PathBuf) {\n+   |                     ^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL |     fn foo_str(str: &Path) {\n+   |                     ^^^^^\n+help: change `str.clone()` to\n+   |\n+LL |         let _ = str.to_path_buf().pop();\n+   |                 ^^^^^^^^^^^^^^^^^\n+help: change `str.clone()` to\n+   |\n+LL |         let _ = str.to_path_buf().clone();\n+   |                 ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "a192ebde3ebf4e73047dde8152c6dee234cf6bfc", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "96041a7dd850e3807504697a84b87026447a5955", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "02038b5fb6b5a7ed56ce688bdf1e01834d0a68c6", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,5 +1,5 @@\n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:28\n+  --> $DIR/unused_unit.rs:19:28\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                            ^^^^^^ help: remove the `-> ()`\n@@ -11,109 +11,109 @@ LL | #![deny(clippy::unused_unit)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:19:18\n+  --> $DIR/unused_unit.rs:20:18\n    |\n LL |     where G: Fn() -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:58\n+  --> $DIR/unused_unit.rs:19:58\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                                                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:20:26\n+  --> $DIR/unused_unit.rs:21:26\n    |\n LL |         let _y: &dyn Fn() -> () = &f;\n    |                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:27:18\n+  --> $DIR/unused_unit.rs:28:18\n    |\n LL |     fn into(self) -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:28:9\n+  --> $DIR/unused_unit.rs:29:9\n    |\n LL |         ()\n    |         ^^ help: remove the final `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:33:29\n+  --> $DIR/unused_unit.rs:34:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:35:19\n+  --> $DIR/unused_unit.rs:36:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:36:16\n+  --> $DIR/unused_unit.rs:37:16\n    |\n LL |         H: Fn() -> ();\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:40:29\n+  --> $DIR/unused_unit.rs:41:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:42:19\n+  --> $DIR/unused_unit.rs:43:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:43:16\n+  --> $DIR/unused_unit.rs:44:16\n    |\n LL |         H: Fn() -> () {}\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:46:17\n+  --> $DIR/unused_unit.rs:47:17\n    |\n LL | fn return_unit() -> () { () }\n    |                 ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:46:26\n+  --> $DIR/unused_unit.rs:47:26\n    |\n LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:56:14\n+  --> $DIR/unused_unit.rs:57:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:58:11\n+  --> $DIR/unused_unit.rs:59:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:75:10\n+  --> $DIR/unused_unit.rs:76:10\n    |\n LL | fn test()->(){}\n    |          ^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:78:11\n+  --> $DIR/unused_unit.rs:79:11\n    |\n LL | fn test2() ->(){}\n    |           ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:81:11\n+  --> $DIR/unused_unit.rs:82:11\n    |\n LL | fn test3()-> (){}\n    |           ^^^^^ help: remove the `-> ()`"}, {"sha": "ec54e11dc06c5002ca53a2ab7c2eb71a1b25ef6e", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -1,3 +1,6 @@\n+#![allow(clippy::single_match_else)]\n+use rustc_tools_util::VersionInfo;\n+\n #[test]\n fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n     let clippy_meta = cargo_metadata::MetadataCommand::new()\n@@ -17,3 +20,56 @@ fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n         }\n     }\n }\n+\n+#[test]\n+fn check_that_clippy_has_the_same_major_version_as_rustc() {\n+    let clippy_version = rustc_tools_util::get_version_info!();\n+    let clippy_major = clippy_version.major;\n+    let clippy_minor = clippy_version.minor;\n+    let clippy_patch = clippy_version.patch;\n+\n+    // get the rustc version from cargo\n+    // this way the rust-toolchain file version is honored\n+    let rustc_version = String::from_utf8(\n+        std::process::Command::new(\"cargo\")\n+            .arg(\"--version\")\n+            .output()\n+            .expect(\"failed to run 'cargo --version'\")\n+            .stdout,\n+    )\n+    .unwrap();\n+    // extract \"1 50 0\" from \"cargo 1.50.0-nightly (a3c2627fb 2020-12-14)\"\n+    let vsplit: Vec<&str> = rustc_version\n+        .split(' ')\n+        .nth(1)\n+        .unwrap()\n+        .split('-')\n+        .next()\n+        .unwrap()\n+        .split('.')\n+        .collect();\n+    match vsplit.as_slice() {\n+        [rustc_major, rustc_minor, _rustc_patch] => {\n+            // clippy 0.1.50 should correspond to rustc 1.50.0\n+            dbg!(&rustc_version);\n+            dbg!(&clippy_version);\n+            assert_eq!(clippy_major, 0); // this will probably stay the same for a long time\n+            assert_eq!(\n+                clippy_minor.to_string(),\n+                *rustc_major,\n+                \"clippy minor version does not equal rustc major version\"\n+            );\n+            assert_eq!(\n+                clippy_patch.to_string(),\n+                *rustc_minor,\n+                \"clippy patch version does not equal rustc minor version\"\n+            );\n+            // do not check rustc_patch because when a stable-patch-release is made (like 1.50.2),\n+            // we don't want our tests failing suddenly\n+        },\n+        _ => {\n+            dbg!(vsplit);\n+            panic!(\"Failed to parse rustc version\");\n+        },\n+    };\n+}"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48dec842f2306cb8a1493308f95cedacb74d0ab9/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/48dec842f2306cb8a1493308f95cedacb74d0ab9/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=48dec842f2306cb8a1493308f95cedacb74d0ab9", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}, {"sha": "1852fb6640ecc9093ce712ecf1e8d4f8b159011a", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d93692efa2f5650aeab832ea91f743771b3db1d9/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/d93692efa2f5650aeab832ea91f743771b3db1d9/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=d93692efa2f5650aeab832ea91f743771b3db1d9", "patch": "@@ -77,7 +77,7 @@ <h1>ALL the Clippy Lints</h1>\n                     <div class=\"col-md-12 form-horizontal\">\n                         <div class=\"input-group\">\n                             <label class=\"input-group-addon\" id=\"filter-label\" for=\"filter-input\">Filter:</label>\n-                            <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" id=\"filter-input\" ng-model=\"search\" />\n+                            <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" id=\"filter-input\" ng-model=\"search\" ng-model-options=\"{debounce: 50}\"/>\n                             <span class=\"input-group-btn\">\n                                 <button class=\"btn btn-default\" type=\"button\" ng-click=\"search = ''\">\n                                     Clear\n@@ -119,6 +119,7 @@ <h4 class=\"list-group-item-heading\">\n                             {{title}}\n                         </h4>\n                         <div class=\"list-group-item-text\" ng-bind-html=\"text | markdown\"></div>\n+                        <a ng-if=\"title == 'Known problems'\" href=\"https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+is%3Aopen+{{lint.id}}\">Search on GitHub</a>\n                     </li>\n                 </ul>\n             </article>\n@@ -180,6 +181,22 @@ <h4 class=\"list-group-item-heading\">\n             }\n         }\n \n+        function searchLint(lint, term) {\n+            for (const field in lint.docs) {\n+                // Continue if it's not a property\n+                if (!lint.docs.hasOwnProperty(field)) {\n+                    continue;\n+                }\n+\n+                // Return if not found\n+                if (lint.docs[field].toLowerCase().indexOf(term) !== -1) {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n         angular.module(\"clippy\", [])\n         .filter('markdown', function ($sce) {\n             return function (text) {\n@@ -216,40 +233,31 @@ <h4 class=\"list-group-item-heading\">\n             };\n \n             $scope.bySearch = function (lint, index, array) {\n-                let search_str = $scope.search;\n+                let searchStr = $scope.search;\n                 // It can be `null` I haven't missed this value \n-                if (search_str == null || search_str.length == 0) {\n+                if (searchStr == null || searchStr.length < 3) {\n                     return true;\n                 }\n-                search_str = search_str.toLowerCase();\n+                searchStr = searchStr.toLowerCase();\n \n                 // Search by id\n-                let id_search = search_str.trim().replace(/(\\-| )/g, \"_\");\n-                if (lint.id.includes(id_search)) {\n+                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n                     return true;\n                 }\n \n                 // Search the description\n                 // The use of `for`-loops instead of `foreach` enables us to return early \n-                let search_lint = (lint, therm) => {\n-                    for (const field in lint.docs) {\n-                        // Continue if it's not a property\n-                        if (!lint.docs.hasOwnProperty(field)) {\n-                            continue;\n-                        }\n-\n-                        // Return if not found\n-                        if (lint.docs[field].toLowerCase().includes(therm)) {\n-                            return true;\n-                        }\n+                let terms = searchStr.split(\" \");\n+                for (index = 0; index < terms.length; index++) {\n+                    if (lint.id.indexOf(terms[index]) !== -1) {\n+                        continue;\n                     }\n-                    return false;\n-                };\n-                let therms = search_str.split(\" \");\n-                for (index = 0; index < therms.length; index++) {\n-                    if (!search_lint(lint, therms[index])) {\n-                        return false;\n+\n+                    if (searchLint(lint, terms[index])) {\n+                        continue;\n                     }\n+\n+                    return false;\n                 }\n \n                 return true;"}]}