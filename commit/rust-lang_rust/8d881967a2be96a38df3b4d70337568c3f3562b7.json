{"sha": "8d881967a2be96a38df3b4d70337568c3f3562b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODgxOTY3YTJiZTk2YTM4ZGYzYjRkNzAzMzc1NjhjM2YzNTYyYjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T23:12:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-04T07:48:12Z"}, "message": "rt: Extract rust_scheduler from rust_task_thread", "tree": {"sha": "38443fe65cb51f7bcace94aa8169aead501a9ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38443fe65cb51f7bcace94aa8169aead501a9ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d881967a2be96a38df3b4d70337568c3f3562b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d881967a2be96a38df3b4d70337568c3f3562b7", "html_url": "https://github.com/rust-lang/rust/commit/8d881967a2be96a38df3b4d70337568c3f3562b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d881967a2be96a38df3b4d70337568c3f3562b7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f94339cc1c98a1ae3ee3beb94c848009167a58d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f94339cc1c98a1ae3ee3beb94c848009167a58d9", "html_url": "https://github.com/rust-lang/rust/commit/f94339cc1c98a1ae3ee3beb94c848009167a58d9"}], "stats": {"total": 294, "additions": 182, "deletions": 112}, "files": [{"sha": "06ecc6c5d7cd02be219577baf28cd5fc54471d5b", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -43,6 +43,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_crate_cache.cpp \\\n               rt/rust_env.cpp \\\n               rt/rust_task_thread.cpp \\\n+              rt/rust_scheduler.cpp \\\n               rt/rust_task.cpp \\\n               rt/rust_task_list.cpp \\\n               rt/rust_port.cpp \\\n@@ -80,6 +81,7 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_upcall.h \\\n                rt/rust_port.h \\\n                rt/rust_task_thread.h \\\n+               rt/rust_scheduler.h \\\n                rt/rust_shape.h \\\n                rt/rust_task.h \\\n                rt/rust_task_list.h \\"}, {"sha": "9f9af2c5e8c7b8c972d8464b41182461f2b50699", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -105,7 +105,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     root_task->deref();\n     root_task = NULL;\n \n-    int ret = kernel->start_task_threads();\n+    int ret = kernel->start_schedulers();\n     delete args;\n     delete kernel;\n     delete srv;"}, {"sha": "8ac85c4ece77876579de8d7dbc1aac65f9375457", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -4,6 +4,7 @@\n #include \"rust_task_thread.h\"\n #include \"rust_task.h\"\n #include \"rust_util.h\"\n+#include \"rust_scheduler.h\"\n #include \"sync/timer.h\"\n \n #if !defined(__WIN32__)\n@@ -416,7 +417,7 @@ start_task(rust_task_id id, fn_env_pair *f) {\n extern \"C\" CDECL int\n sched_threads() {\n     rust_task *task = rust_task_thread::get_task();\n-    return task->kernel->num_threads;\n+    return task->thread->sched->number_of_threads();\n }\n \n extern \"C\" CDECL rust_port*"}, {"sha": "c04a8d9d427bf22f36cb32aa0d96859b83b9a42e", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 16, "deletions": 86, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -1,5 +1,6 @@\n #include \"rust_internal.h\"\n #include \"rust_util.h\"\n+#include \"rust_scheduler.h\"\n \n #define KLOG_(...)                              \\\n     KLOG(this, kern, __VA_ARGS__)\n@@ -12,64 +13,11 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     srv(srv),\n     max_id(0),\n     rval(0),\n-    num_threads(num_threads),\n     live_tasks(0),\n     env(srv->env)\n {\n-    isaac_init(this, &rctx);\n-    create_schedulers();\n-}\n-\n-rust_task_thread *\n-rust_kernel::create_scheduler(int id) {\n-    _kernel_lock.lock();\n-    rust_srv *srv = this->srv->clone();\n-    rust_task_thread *thread =\n-        new (this, \"rust_task_thread\") rust_task_thread(this, srv, id);\n-    KLOG_(\"created scheduler: \" PTR \", id: %d, index: %d\",\n-          thread, id, thread->list_index);\n-    _kernel_lock.unlock();\n-    return thread;\n-}\n-\n-void\n-rust_kernel::destroy_scheduler(rust_task_thread *thread) {\n-    _kernel_lock.lock();\n-    KLOG_(\"deleting scheduler: \" PTR \", name: %s, index: %d\",\n-        thread, thread->name, thread->list_index);\n-    rust_srv *srv = thread->srv;\n-    delete thread;\n-    delete srv;\n-    _kernel_lock.unlock();\n-}\n-\n-void rust_kernel::create_schedulers() {\n-    KLOG_(\"Using %d scheduler threads.\", num_threads);\n-\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        threads.push(create_scheduler(i));\n-    }\n-}\n-\n-void rust_kernel::destroy_schedulers() {\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        destroy_scheduler(threads[i]);\n-    }\n-}\n-\n-void\n-rust_kernel::log_all_scheduler_state() {\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        threads[i]->log_state();\n-    }\n-}\n-\n-/**\n- * Checks for simple deadlocks.\n- */\n-bool\n-rust_kernel::is_deadlocked() {\n-    return false;\n+    sched = new (this, \"rust_scheduler\")\n+        rust_scheduler(this, srv, num_threads);\n }\n \n void\n@@ -94,7 +42,7 @@ rust_kernel::fatal(char const *fmt, ...) {\n }\n \n rust_kernel::~rust_kernel() {\n-    destroy_schedulers();\n+    delete sched;\n }\n \n void *\n@@ -111,24 +59,9 @@ void rust_kernel::free(void *mem) {\n     _region.free(mem);\n }\n \n-void\n-rust_kernel::signal_kernel_lock() {\n-    _kernel_lock.lock();\n-    _kernel_lock.unlock();\n-}\n-\n-int rust_kernel::start_task_threads()\n+int rust_kernel::start_schedulers()\n {\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n-        thread->start();\n-    }\n-\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n-        thread->join();\n-    }\n-\n+    sched->start_task_threads();\n     return rval;\n }\n \n@@ -141,28 +74,27 @@ rust_kernel::fail() {\n #if defined(__WIN32__)\n     exit(rval);\n #endif\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n-        thread->kill_all_tasks();\n-    }\n+    sched->kill_all_tasks();\n }\n \n rust_task_id\n rust_kernel::create_task(rust_task *spawner, const char *name,\n                          size_t init_stack_sz) {\n-    scoped_lock with(_kernel_lock);\n-    rust_task_thread *thread = threads[isaac_rand(&rctx) % num_threads];\n-    rust_task *t = thread->create_task(spawner, name, init_stack_sz);\n-    t->user.id = max_id++;\n-    task_table.put(t->user.id, t);\n-    return t->user.id;\n+    return sched->create_task(spawner, name, init_stack_sz);\n }\n \n rust_task_id\n rust_kernel::create_task(rust_task *spawner, const char *name) {\n     return create_task(spawner, name, env->min_stack_size);\n }\n \n+void\n+rust_kernel::register_task(rust_task *task) {\n+    scoped_lock with(_kernel_lock);\n+    task->user.id = max_id++;\n+    task_table.put(task->user.id, task);\n+}\n+\n rust_task *\n rust_kernel::get_task_by_id(rust_task_id id) {\n     scoped_lock with(_kernel_lock);\n@@ -190,9 +122,7 @@ rust_kernel::release_task_id(rust_task_id id) {\n }\n \n void rust_kernel::exit_schedulers() {\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        threads[i]->exit();\n-    }\n+    sched->exit();\n }\n \n #ifdef __WIN32__"}, {"sha": "d6a1d0f19c2273cd8ab3ec99b53f8a4756691eb4", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -6,6 +6,7 @@\n #include \"rust_log.h\"\n \n struct rust_task_thread;\n+struct rust_scheduler;\n \n /**\n  * A global object shared by all thread domains. Most of the data structures\n@@ -20,36 +21,21 @@ class rust_kernel {\n     rust_srv *srv;\n private:\n     lock_and_signal _kernel_lock;\n-\n-    array_list<rust_task_thread *> threads;\n-\n-    randctx rctx;\n-\n-    rust_task_thread *create_scheduler(int id);\n-    void destroy_scheduler(rust_task_thread *thread);\n-\n-    void create_schedulers();\n-    void destroy_schedulers();\n+    rust_scheduler *sched;\n \n     rust_task_id max_id;\n     hash_map<rust_task_id, rust_task *> task_table;\n-\n     int rval;\n \n public:\n-    const size_t num_threads;\n \n     volatile int live_tasks;\n     struct rust_env *env;\n \n     rust_kernel(rust_srv *srv, size_t num_threads);\n \n-    bool is_deadlocked();\n-\n-    void signal_kernel_lock();\n     void exit_schedulers();\n \n-    void log_all_scheduler_state();\n     void log(uint32_t level, char const *fmt, ...);\n     void fatal(char const *fmt, ...);\n     virtual ~rust_kernel();\n@@ -60,7 +46,7 @@ class rust_kernel {\n \n     void fail();\n \n-    int start_task_threads();\n+    int start_schedulers();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);\n@@ -69,6 +55,7 @@ class rust_kernel {\n     rust_task_id create_task(rust_task *spawner, const char *name,\n \t\t\t     size_t init_stack_size);\n     rust_task_id create_task(rust_task * spawner, const char *name);\n+    void register_task(rust_task *task);\n     rust_task *get_task_by_id(rust_task_id id);\n     void release_task_id(rust_task_id tid);\n     void set_exit_status(int code);"}, {"sha": "9f0e8be9482f934d8b7603a14d1d97739ce193a7", "filename": "src/rt/rust_scheduler.cpp", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -0,0 +1,110 @@\n+#include \"rust_scheduler.h\"\n+#include \"rust_util.h\"\n+\n+rust_scheduler::rust_scheduler(rust_kernel *kernel,\n+\t\t\t       rust_srv *srv,\n+\t\t\t       size_t num_threads) :\n+    kernel(kernel),\n+    srv(srv),\n+    env(srv->env),\n+    num_threads(num_threads)\n+{\n+    isaac_init(this, &rctx);\n+    create_task_threads();\n+}\n+\n+rust_scheduler::~rust_scheduler() {\n+    destroy_task_threads();\n+}\n+\n+rust_task_thread *\n+rust_scheduler::create_task_thread(int id) {\n+    lock.lock();\n+    rust_srv *srv = this->srv->clone();\n+    rust_task_thread *thread =\n+        new (kernel, \"rust_task_thread\") rust_task_thread(this, srv, id);\n+    KLOG(kernel, kern, \"created task thread: \" PTR \", id: %d, index: %d\",\n+          thread, id, thread->list_index);\n+    lock.unlock();\n+    return thread;\n+}\n+\n+void\n+rust_scheduler::destroy_task_thread(rust_task_thread *thread) {\n+    lock.lock();\n+    KLOG(kernel, kern, \"deleting task thread: \" PTR \", name: %s, index: %d\",\n+        thread, thread->name, thread->list_index);\n+    rust_srv *srv = thread->srv;\n+    delete thread;\n+    delete srv;\n+    lock.unlock();\n+}\n+\n+void\n+rust_scheduler::create_task_threads() {\n+    KLOG(kernel, kern, \"Using %d scheduler threads.\", num_threads);\n+\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        threads.push(create_task_thread(i));\n+    }\n+}\n+\n+void\n+rust_scheduler::destroy_task_threads() {\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        destroy_task_thread(threads[i]);\n+    }\n+}\n+\n+void\n+rust_scheduler::start_task_threads()\n+{\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        rust_task_thread *thread = threads[i];\n+        thread->start();\n+    }\n+\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        rust_task_thread *thread = threads[i];\n+        thread->join();\n+    }\n+}\n+\n+void\n+rust_scheduler::kill_all_tasks() {\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        rust_task_thread *thread = threads[i];\n+        thread->kill_all_tasks();\n+    }\n+}\n+\n+rust_task_id\n+rust_scheduler::create_task(rust_task *spawner, const char *name,\n+\t\t\t    size_t init_stack_sz) {\n+    size_t thread_no;\n+    {\n+\tscoped_lock with(lock);\n+\tthread_no = isaac_rand(&rctx) % num_threads;\n+    }\n+    rust_task_thread *thread = threads[thread_no];\n+    rust_task *t = thread->create_task(spawner, name, init_stack_sz);\n+    kernel->register_task(t);\n+    return t->user.id;\n+}\n+\n+rust_task_id\n+rust_scheduler::create_task(rust_task *spawner, const char *name) {\n+    return create_task(spawner, name, env->min_stack_size);\n+}\n+\n+void\n+rust_scheduler::exit() {\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        threads[i]->exit();\n+    }\n+}\n+\n+size_t\n+rust_scheduler::number_of_threads() {\n+    return num_threads;\n+}"}, {"sha": "03eb3186ed34201e118f2a280d1579ef406472fd", "filename": "src/rt/rust_scheduler.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -0,0 +1,39 @@\n+#ifndef RUST_SCHEDULER_H\n+#define RUST_SCHEDULER_H\n+\n+#include \"rust_internal.h\"\n+\n+class rust_scheduler : public kernel_owned<rust_scheduler> {\n+    // FIXME: Make these private\n+public:\n+    rust_kernel *kernel;\n+    rust_srv *srv;\n+    rust_env *env;\n+private:\n+    lock_and_signal lock;\n+    array_list<rust_task_thread *> threads;\n+    randctx rctx;\n+    const size_t num_threads;\n+    int rval;\n+\n+    void create_task_threads();\n+    void destroy_task_threads();\n+\n+    rust_task_thread *create_task_thread(int id);\n+    void destroy_task_thread(rust_task_thread *thread);\n+\n+public:\n+    rust_scheduler(rust_kernel *kernel, rust_srv *srv, size_t num_threads);\n+    ~rust_scheduler();\n+\n+    void start_task_threads();\n+    void kill_all_tasks();\n+    rust_task_id create_task(rust_task *spawner,\n+\t\t\t     const char *name,\n+\t\t\t     size_t init_stack_sz);\n+    rust_task_id create_task(rust_task *spawner, const char *name);\n+    void exit();\n+    size_t number_of_threads();\n+};\n+\n+#endif /* RUST_SCHEDULER_H */"}, {"sha": "b1363e1806ea2837da4bf9a08354cd156e9500e8", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -5,6 +5,7 @@\n #include \"rust_internal.h\"\n #include \"rust_util.h\"\n #include \"globals.h\"\n+#include \"rust_scheduler.h\"\n \n #ifndef _WIN32\n pthread_key_t rust_task_thread::task_key;\n@@ -14,9 +15,9 @@ DWORD rust_task_thread::task_key;\n \n bool rust_task_thread::tls_initialized = false;\n \n-rust_task_thread::rust_task_thread(rust_kernel *kernel,\n-                               rust_srv *srv,\n-                               int id) :\n+rust_task_thread::rust_task_thread(rust_scheduler *sched,\n+                                   rust_srv *srv,\n+                                   int id) :\n     ref_count(1),\n     _log(srv, this),\n     log_lvl(log_debug),\n@@ -28,7 +29,8 @@ rust_task_thread::rust_task_thread(rust_kernel *kernel,\n     blocked_tasks(this, \"blocked\"),\n     dead_tasks(this, \"dead\"),\n     cache(this),\n-    kernel(kernel),\n+    kernel(sched->kernel),\n+    sched(sched),\n     id(id),\n     min_stack_size(kernel->env->min_stack_size),\n     env(kernel->env),\n@@ -217,8 +219,6 @@ rust_task_thread::start_main_loop() {\n     DLOG(this, dom, \"started domain loop %d\", id);\n \n     while (!should_exit) {\n-        A(this, kernel->is_deadlocked() == false, \"deadlock\");\n-\n         DLOG(this, dom, \"worker %d, number_of_live_tasks = %d, total = %d\",\n              id, number_of_live_tasks(), kernel->live_tasks);\n "}, {"sha": "9155019d3ffb484f45ff6fb33ed3def2e7c55972", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/8d881967a2be96a38df3b4d70337568c3f3562b7/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=8d881967a2be96a38df3b4d70337568c3f3562b7", "patch": "@@ -69,6 +69,7 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n     randctx rctx;\n \n     rust_kernel *kernel;\n+    rust_scheduler *sched;\n     int32_t list_index;\n \n     const int id;\n@@ -92,7 +93,7 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n-    rust_task_thread(rust_kernel *kernel, rust_srv *srv, int id);\n+    rust_task_thread(rust_scheduler *sched, rust_srv *srv, int id);\n     ~rust_task_thread();\n     void activate(rust_task *task);\n     void log(rust_task *task, uint32_t level, char const *fmt, ...);"}]}