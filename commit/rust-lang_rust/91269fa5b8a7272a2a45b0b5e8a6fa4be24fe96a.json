{"sha": "91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "node_id": "C_kwDOAAsO6NoAKDkxMjY5ZmE1YjhhNzI3MmEyYTQ1YjBiNWU4YTZmYTRiZTI0ZmU5NmE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-09-09T20:25:29Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-07T12:06:19Z"}, "message": "Remove a reference from Inherited", "tree": {"sha": "93266633b5b510e98e97e13c7a4b5ca95189c1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93266633b5b510e98e97e13c7a4b5ca95189c1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "html_url": "https://github.com/rust-lang/rust/commit/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349415d1c67df81e18519a7d2c6375901ec31b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/349415d1c67df81e18519a7d2c6375901ec31b3d", "html_url": "https://github.com/rust-lang/rust/commit/349415d1c67df81e18519a7d2c6375901ec31b3d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "48b0689806541cf8322c3aea5ce61041065cc428", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "patch": "@@ -78,7 +78,7 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n /// * inherited: other fields inherited from the enclosing fn (if any)\n #[instrument(skip(inherited, body), level = \"debug\")]\n pub(super) fn check_fn<'a, 'tcx>(\n-    inherited: &'a Inherited<'a, 'tcx>,\n+    inherited: &'a Inherited<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     fn_sig: ty::FnSig<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,"}, {"sha": "51f4cb7e0ebfa227b11c58b2c4d91cecf1da43d2", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "patch": "@@ -118,7 +118,7 @@ pub struct FnCtxt<'a, 'tcx> {\n \n     pub(super) enclosing_breakables: RefCell<EnclosingBreakables<'tcx>>,\n \n-    pub(super) inh: &'a Inherited<'a, 'tcx>,\n+    pub(super) inh: &'a Inherited<'tcx>,\n \n     /// True if the function or closure's return type is known before\n     /// entering the function/closure, i.e. if the return type is\n@@ -132,7 +132,7 @@ pub struct FnCtxt<'a, 'tcx> {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn new(\n-        inh: &'a Inherited<'a, 'tcx>,\n+        inh: &'a Inherited<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n     ) -> FnCtxt<'a, 'tcx> {\n@@ -184,7 +184,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Deref for FnCtxt<'a, 'tcx> {\n-    type Target = Inherited<'a, 'tcx>;\n+    type Target = Inherited<'tcx>;\n     fn deref(&self) -> &Self::Target {\n         &self.inh\n     }"}, {"sha": "7930377abaa5c58bcccfd84273e881e3755bdbca", "filename": "compiler/rustc_hir_analysis/src/check/inherited.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs?ref=91269fa5b8a7272a2a45b0b5e8a6fa4be24fe96a", "patch": "@@ -29,10 +29,10 @@ use std::ops::Deref;\n /// Here, the function `foo()` and the closure passed to\n /// `bar()` will each have their own `FnCtxt`, but they will\n /// share the inherited fields.\n-pub struct Inherited<'a, 'tcx> {\n+pub struct Inherited<'tcx> {\n     pub(super) infcx: InferCtxt<'tcx>,\n \n-    pub(super) typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n+    pub(super) typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n \n     pub(super) locals: RefCell<HirIdMap<super::LocalTy<'tcx>>>,\n \n@@ -70,7 +70,7 @@ pub struct Inherited<'a, 'tcx> {\n     pub(super) diverging_type_vars: RefCell<FxHashSet<Ty<'tcx>>>,\n }\n \n-impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n+impl<'tcx> Deref for Inherited<'tcx> {\n     type Target = InferCtxt<'tcx>;\n     fn deref(&self) -> &Self::Target {\n         &self.infcx\n@@ -86,7 +86,7 @@ pub struct InheritedBuilder<'tcx> {\n     typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n }\n \n-impl<'tcx> Inherited<'_, 'tcx> {\n+impl<'tcx> Inherited<'tcx> {\n     pub fn build(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> InheritedBuilder<'tcx> {\n         let hir_owner = tcx.hir().local_def_id_to_hir_id(def_id).owner;\n \n@@ -124,20 +124,20 @@ impl<'tcx> Inherited<'_, 'tcx> {\n }\n \n impl<'tcx> InheritedBuilder<'tcx> {\n-    pub fn enter<F, R>(&mut self, f: F) -> R\n+    pub fn enter<F, R>(mut self, f: F) -> R\n     where\n-        F: for<'a> FnOnce(Inherited<'a, 'tcx>) -> R,\n+        F: FnOnce(&Inherited<'tcx>) -> R,\n     {\n         let def_id = self.def_id;\n-        self.infcx.enter(|infcx| f(Inherited::new(infcx, def_id, &self.typeck_results)))\n+        self.infcx.enter(|infcx| f(&Inherited::new(infcx, def_id, self.typeck_results)))\n     }\n }\n \n-impl<'a, 'tcx> Inherited<'a, 'tcx> {\n+impl<'tcx> Inherited<'tcx> {\n     fn new(\n         infcx: InferCtxt<'tcx>,\n         def_id: LocalDefId,\n-        typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n+        typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n         let body_id = tcx.hir().maybe_body_owned_by(def_id);"}]}