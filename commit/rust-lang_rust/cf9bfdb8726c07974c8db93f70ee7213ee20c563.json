{"sha": "cf9bfdb8726c07974c8db93f70ee7213ee20c563", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOWJmZGI4NzI2YzA3OTc0YzhkYjkzZjcwZWU3MjEzZWUyMGM1NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T23:14:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T23:14:40Z"}, "message": "Auto merge of #78122 - fusion-engineering-forks:fmt-write-bounds-check, r=Mark-Simulacrum\n\nAvoid panic_bounds_check in fmt::write.\n\nWriting any fmt::Arguments would trigger the inclusion of usize formatting and padding code in the resulting binary, because indexing used in fmt::write would generate code using panic_bounds_check, which prints the index and length.\n\nThese bounds checks are not necessary, as fmt::Arguments never contains any out-of-bounds indexes.\n\nThis change replaces them with unsafe get_unchecked, to reduce the amount of generated code, which is especially important for embedded targets.\n\n---\n\nDemonstration of the size of and the symbols in a 'hello world' no_std binary:\n\n<details>\n<summary>Source code</summary>\n\n```rust\n#![feature(lang_items)]\n#![feature(start)]\n#![no_std]\n\nuse core::fmt;\nuse core::fmt::Write;\n\n#[link(name = \"c\")]\nextern \"C\" {\n    #[allow(improper_ctypes)]\n    fn write(fd: i32, s: &str) -> isize;\n    fn exit(code: i32) -> !;\n}\n\nstruct Stdout;\n\nimpl fmt::Write for Stdout {\n    fn write_str(&mut self, s: &str) -> fmt::Result {\n        unsafe { write(1, s) };\n        Ok(())\n    }\n}\n\n#[start]\nfn main(_argc: isize, _argv: *const *const u8) -> isize {\n    let _ = writeln!(Stdout, \"Hello World\");\n    0\n}\n\n#[lang = \"eh_personality\"]\nfn eh_personality() {}\n\n#[panic_handler]\nfn panic(_: &core::panic::PanicInfo) -> ! {\n    unsafe { exit(1) };\n}\n```\n</details>\n\nBefore:\n```\n   text\t   data\t    bss\t    dec\t    hex\tfilename\n   6059\t    736\t      8\t   6803\t   1a93\tbefore\n```\n```\n0000000000001e00 T <T as core::any::Any>::type_id\n0000000000003dd0 D core::fmt::num::DEC_DIGITS_LUT\n0000000000001ce0 T core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt\n0000000000001ce0 T core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt\n0000000000001370 T core::fmt::write\n0000000000001b30 t core::fmt::Formatter::pad_integral::write_prefix\n0000000000001660 T core::fmt::Formatter::pad_integral\n0000000000001350 T core::ops::function::FnOnce::call_once\n0000000000001b80 t core::ptr::drop_in_place\n0000000000001120 t core::ptr::drop_in_place\n0000000000001c50 t core::iter::adapters::zip::Zip<A,B>::new\n0000000000001c90 t core::iter::adapters::zip::Zip<A,B>::new\n0000000000001b90 T core::panicking::panic_bounds_check\n0000000000001c10 T core::panicking::panic_fmt\n0000000000001130 t <&mut W as core::fmt::Write>::write_char\n0000000000001200 t <&mut W as core::fmt::Write>::write_fmt\n0000000000001250 t <&mut W as core::fmt::Write>::write_str\n```\n\nAfter:\n```\n   text\t   data\t    bss\t    dec\t    hex\tfilename\n   3068\t    600\t      8\t   3676\t    e5c\tafter\n```\n```\n0000000000001360 T core::fmt::write\n0000000000001340 T core::ops::function::FnOnce::call_once\n0000000000001120 t core::ptr::drop_in_place\n0000000000001620 t core::iter::adapters::zip::Zip<A,B>::new\n0000000000001660 t core::iter::adapters::zip::Zip<A,B>::new\n0000000000001130 t <&mut W as core::fmt::Write>::write_char\n0000000000001200 t <&mut W as core::fmt::Write>::write_fmt\n0000000000001250 t <&mut W as core::fmt::Write>::write_str\n```", "tree": {"sha": "899569465dd46c8710ec951d9718a626bbd9188a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899569465dd46c8710ec951d9718a626bbd9188a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf9bfdb8726c07974c8db93f70ee7213ee20c563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9bfdb8726c07974c8db93f70ee7213ee20c563", "html_url": "https://github.com/rust-lang/rust/commit/cf9bfdb8726c07974c8db93f70ee7213ee20c563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf9bfdb8726c07974c8db93f70ee7213ee20c563/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349b3b324dade7ca638091db93ba08bbc443c63d", "url": "https://api.github.com/repos/rust-lang/rust/commits/349b3b324dade7ca638091db93ba08bbc443c63d", "html_url": "https://github.com/rust-lang/rust/commit/349b3b324dade7ca638091db93ba08bbc443c63d"}, {"sha": "1da5780303b5df0505f20d7653778454225bb3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da5780303b5df0505f20d7653778454225bb3cc", "html_url": "https://github.com/rust-lang/rust/commit/1da5780303b5df0505f20d7653778454225bb3cc"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "4ed62a620c4dfd2c77f3673f22ebd549d3e383d4", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf9bfdb8726c07974c8db93f70ee7213ee20c563/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9bfdb8726c07974c8db93f70ee7213ee20c563/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=cf9bfdb8726c07974c8db93f70ee7213ee20c563", "patch": "@@ -1084,7 +1084,9 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n             // a string piece.\n             for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n-                run(&mut formatter, arg, &args.args)?;\n+                // SAFETY: arg and args.args come from the same Arguments,\n+                // which guarantees the indexes are always within bounds.\n+                unsafe { run(&mut formatter, arg, &args.args) }?;\n                 idx += 1;\n             }\n         }\n@@ -1098,25 +1100,37 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n-fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n+unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n     fmt.fill = arg.format.fill;\n     fmt.align = arg.format.align;\n     fmt.flags = arg.format.flags;\n-    fmt.width = getcount(args, &arg.format.width);\n-    fmt.precision = getcount(args, &arg.format.precision);\n+    // SAFETY: arg and args come from the same Arguments,\n+    // which guarantees the indexes are always within bounds.\n+    unsafe {\n+        fmt.width = getcount(args, &arg.format.width);\n+        fmt.precision = getcount(args, &arg.format.precision);\n+    }\n \n     // Extract the correct argument\n-    let value = args[arg.position];\n+    debug_assert!(arg.position < args.len());\n+    // SAFETY: arg and args come from the same Arguments,\n+    // which guarantees its index is always within bounds.\n+    let value = unsafe { args.get_unchecked(arg.position) };\n \n     // Then actually do some printing\n     (value.formatter)(value.value, fmt)\n }\n \n-fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n     match *cnt {\n         rt::v1::Count::Is(n) => Some(n),\n         rt::v1::Count::Implied => None,\n-        rt::v1::Count::Param(i) => args[i].as_usize(),\n+        rt::v1::Count::Param(i) => {\n+            debug_assert!(i < args.len());\n+            // SAFETY: cnt and args come from the same Arguments,\n+            // which guarantees this index is always within bounds.\n+            unsafe { args.get_unchecked(i).as_usize() }\n+        }\n     }\n }\n "}, {"sha": "26e08086a72a30f3d5c94fd44f1a2130035603a9", "filename": "src/test/run-make/fmt-write-bloat/Makefile", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf9bfdb8726c07974c8db93f70ee7213ee20c563/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cf9bfdb8726c07974c8db93f70ee7213ee20c563/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2FMakefile?ref=cf9bfdb8726c07974c8db93f70ee7213ee20c563", "patch": "@@ -0,0 +1,25 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-windows\n+\n+ifeq ($(shell $(RUSTC) -vV | grep 'host: $(TARGET)'),)\n+\n+# Don't run this test when cross compiling.\n+all:\n+\n+else\n+\n+NM = nm\n+\n+PANIC_SYMS = panic_bounds_check pad_integral Display Debug\n+\n+# Allow for debug_assert!() in debug builds of std.\n+ifdef NO_DEBUG_ASSERTIONS\n+PANIC_SYMS += panicking panic_fmt\n+endif\n+\n+all: main.rs\n+\t$(RUSTC) $< -O\n+\t$(NM) $(call RUN_BINFILE,main) | $(CGREP) -v $(PANIC_SYMS)\n+\n+endif"}, {"sha": "e86c48014c3aa47162523106eedcecb5986c5009", "filename": "src/test/run-make/fmt-write-bloat/main.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cf9bfdb8726c07974c8db93f70ee7213ee20c563/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9bfdb8726c07974c8db93f70ee7213ee20c563/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ffmt-write-bloat%2Fmain.rs?ref=cf9bfdb8726c07974c8db93f70ee7213ee20c563", "patch": "@@ -0,0 +1,32 @@\n+#![feature(lang_items)]\n+#![feature(start)]\n+#![no_std]\n+\n+use core::fmt;\n+use core::fmt::Write;\n+\n+#[link(name = \"c\")]\n+extern \"C\" {}\n+\n+struct Dummy;\n+\n+impl fmt::Write for Dummy {\n+    #[inline(never)]\n+    fn write_str(&mut self, _: &str) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    let _ = writeln!(Dummy, \"Hello World\");\n+    0\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}"}]}