{"sha": "907120637ec1c28f116e612266cdb83cb5a854a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzEyMDYzN2VjMWMyOGYxMTZlNjEyMjY2Y2RiODNjYjVhODU0YTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-11T10:51:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:07:41Z"}, "message": "Add field `module.unresolved_invocations`.", "tree": {"sha": "e13d77dfc894a8117466dbe46b3613534bec15f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13d77dfc894a8117466dbe46b3613534bec15f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907120637ec1c28f116e612266cdb83cb5a854a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907120637ec1c28f116e612266cdb83cb5a854a9", "html_url": "https://github.com/rust-lang/rust/commit/907120637ec1c28f116e612266cdb83cb5a854a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907120637ec1c28f116e612266cdb83cb5a854a9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba872f270781ada15426cfac7db20b30b81777dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba872f270781ada15426cfac7db20b30b81777dc", "html_url": "https://github.com/rust-lang/rust/commit/ba872f270781ada15426cfac7db20b30b81777dc"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "2caa78a95ef96f4fb4d12b6c9f6ce44e9276c520", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=907120637ec1c28f116e612266cdb83cb5a854a9", "patch": "@@ -638,7 +638,9 @@ pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n-        let invocation = self.resolver.invocations[&Mark::from_placeholder_id(id)];\n+        let mark = Mark::from_placeholder_id(id);\n+        self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n+        let invocation = self.resolver.invocations[&mark];\n         invocation.module.set(self.resolver.current_module);\n         invocation.legacy_scope.set(self.legacy_scope);\n         invocation"}, {"sha": "8f743cb6d06c597ed638bae7defb2526691616a8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=907120637ec1c28f116e612266cdb83cb5a854a9", "patch": "@@ -799,6 +799,9 @@ pub struct ModuleS<'a> {\n \n     resolutions: RefCell<FxHashMap<(Name, Namespace), &'a RefCell<NameResolution<'a>>>>,\n \n+    // Macro invocations that can expand into items in this module.\n+    unresolved_invocations: RefCell<FxHashSet<Mark>>,\n+\n     no_implicit_prelude: bool,\n \n     glob_importers: RefCell<Vec<&'a ImportDirective<'a>>>,\n@@ -822,6 +825,7 @@ impl<'a> ModuleS<'a> {\n             kind: kind,\n             normal_ancestor_id: None,\n             resolutions: RefCell::new(FxHashMap()),\n+            unresolved_invocations: RefCell::new(FxHashSet()),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new((Vec::new())),"}, {"sha": "afbe6f0d518b9a75384df4c0400c4f0b20402d11", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=907120637ec1c28f116e612266cdb83cb5a854a9", "patch": "@@ -131,6 +131,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.collect_def_ids(invocation, expansion);\n \n         self.current_module = invocation.module.get();\n+        self.current_module.unresolved_invocations.borrow_mut().remove(&mark);\n         let mut visitor = BuildReducedGraphVisitor {\n             resolver: self,\n             legacy_scope: LegacyScope::Invocation(invocation),"}, {"sha": "44ce48fe615f7f37d89f3e27223102e94d8e493b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907120637ec1c28f116e612266cdb83cb5a854a9/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=907120637ec1c28f116e612266cdb83cb5a854a9", "patch": "@@ -192,7 +192,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         // If the resolution doesn't depend on glob definability, check privacy and return.\n-        if let Some(result) = self.try_result(&resolution, ns) {\n+        if let Some(result) = self.try_result(&resolution, module, ns) {\n             return result.and_then(|binding| {\n                 if self.is_accessible(binding.vis) && !is_disallowed_private_import(binding) ||\n                    binding.is_extern_crate() { // c.f. issue #37020\n@@ -222,7 +222,7 @@ impl<'a> Resolver<'a> {\n \n     // Returns Some(the resolution of the name), or None if the resolution depends\n     // on whether more globs can define the name.\n-    fn try_result(&mut self, resolution: &NameResolution<'a>, ns: Namespace)\n+    fn try_result(&mut self, resolution: &NameResolution<'a>, module: Module<'a>, ns: Namespace)\n                   -> Option<ResolveResult<&'a NameBinding<'a>>> {\n         match resolution.binding {\n             Some(binding) if !binding.is_glob_import() =>\n@@ -250,6 +250,10 @@ impl<'a> Resolver<'a> {\n             SingleImports::MaybeOne(_) | SingleImports::None => {},\n         }\n \n+        if !module.unresolved_invocations.borrow().is_empty() {\n+            return Some(Indeterminate);\n+        }\n+\n         resolution.binding.map(Success)\n     }\n "}]}