{"sha": "d4724c1a178252c240c9ad012fc3cba93f18babc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzI0YzFhMTc4MjUyYzI0MGM5YWQwMTJmYzNjYmE5M2YxOGJhYmM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T14:00:34Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T14:00:34Z"}, "message": "Remove unnecessary allocations flagged by lint from rustpkg", "tree": {"sha": "0076402f558d759330e62dea241c17e0d0a817f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0076402f558d759330e62dea241c17e0d0a817f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4724c1a178252c240c9ad012fc3cba93f18babc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4724c1a178252c240c9ad012fc3cba93f18babc", "html_url": "https://github.com/rust-lang/rust/commit/d4724c1a178252c240c9ad012fc3cba93f18babc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4724c1a178252c240c9ad012fc3cba93f18babc/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d543354d6c56e8962b0c03397d43df3f16b07d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d543354d6c56e8962b0c03397d43df3f16b07d03", "html_url": "https://github.com/rust-lang/rust/commit/d543354d6c56e8962b0c03397d43df3f16b07d03"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "94fdcddfbb5b5277ec580235a20de5c9ae6ec9c4", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=d4724c1a178252c240c9ad012fc3cba93f18babc", "patch": "@@ -126,14 +126,14 @@ impl<'self> PkgScript<'self> {\n                                                &exe, @copy os::args()[0],\n                                                driver::cu_everything);\n                 debug!(\"Running program: %s %s %s\", exe.to_str(), root.to_str(), what);\n-                let status = run::run_program(exe.to_str(), ~[root.to_str(), what]);\n+                let status = run::run_program(exe.to_str(), [root.to_str(), what]);\n                 if status != 0 {\n                     return (~[], status);\n                 }\n                 else {\n                     debug!(\"Running program (configs): %s %s %s\",\n-                           exe.to_str(), root.to_str(), ~\"configs\");\n-                    let output = run::program_output(exe.to_str(), ~[root.to_str(), ~\"configs\"]);\n+                           exe.to_str(), root.to_str(), \"configs\");\n+                    let output = run::program_output(exe.to_str(), [root.to_str(), ~\"configs\"]);\n                     // Run the configs() function to get the configs\n                     let mut cfgs = ~[];\n                     for str::each_word(output.out) |w| {\n@@ -360,9 +360,9 @@ pub fn main() {\n     io::println(\"WARNING: The Rust package manager is experimental and may be unstable\");\n \n     let args = os::args();\n-    let opts = ~[getopts::optflag(~\"h\"), getopts::optflag(~\"help\"),\n-                 getopts::optflag(~\"j\"), getopts::optflag(~\"json\"),\n-                 getopts::optmulti(~\"c\"), getopts::optmulti(~\"cfg\")];\n+    let opts = ~[getopts::optflag(\"h\"), getopts::optflag(\"help\"),\n+                 getopts::optflag(\"j\"), getopts::optflag(\"json\"),\n+                 getopts::optmulti(\"c\"), getopts::optmulti(\"cfg\")];\n     let matches = &match getopts::getopts(args, opts) {\n         result::Ok(m) => m,\n         result::Err(f) => {\n@@ -371,10 +371,10 @@ pub fn main() {\n             return;\n         }\n     };\n-    let help = getopts::opt_present(matches, ~\"h\") ||\n-               getopts::opt_present(matches, ~\"help\");\n-    let json = getopts::opt_present(matches, ~\"j\") ||\n-               getopts::opt_present(matches, ~\"json\");\n+    let help = getopts::opt_present(matches, \"h\") ||\n+               getopts::opt_present(matches, \"help\");\n+    let json = getopts::opt_present(matches, \"j\") ||\n+               getopts::opt_present(matches, \"json\");\n     let mut args = copy matches.free;\n \n     args.shift();\n@@ -428,7 +428,7 @@ pub impl Crate {\n \n     fn flag(&self, flag: ~str) -> Crate {\n         Crate {\n-            flags: vec::append(copy self.flags, ~[flag]),\n+            flags: vec::append(copy self.flags, [flag]),\n             .. copy *self\n         }\n     }\n@@ -442,7 +442,7 @@ pub impl Crate {\n \n     fn cfg(&self, cfg: ~str) -> Crate {\n         Crate {\n-            cfgs: vec::append(copy self.cfgs, ~[cfg]),\n+            cfgs: vec::append(copy self.cfgs, [cfg]),\n             .. copy *self\n         }\n     }\n@@ -546,7 +546,7 @@ impl PkgSrc {\n         let url = fmt!(\"https://%s\", self.id.remote_path.to_str());\n         util::note(fmt!(\"git clone %s %s\", url, local.to_str()));\n \n-        if run::program_output(~\"git\", ~[~\"clone\", copy url, local.to_str()]).status != 0 {\n+        if run::program_output(\"git\", [~\"clone\", copy url, local.to_str()]).status != 0 {\n             util::note(fmt!(\"fetching %s failed: can't clone repository\", url));\n             return false;\n         }"}, {"sha": "90c87210faaa857875143b1ff80b1ac5847e2fc9", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=d4724c1a178252c240c9ad012fc3cba93f18babc", "patch": "@@ -11,7 +11,7 @@\n use core::io;\n \n pub fn general() {\n-    io::println(~\"Usage: rustpkg [options] <cmd> [args..]\n+    io::println(\"Usage: rustpkg [options] <cmd> [args..]\n \n Where <cmd> is one of:\n     build, clean, do, info, install, prefer, test, uninstall, unprefer\n@@ -23,7 +23,7 @@ Options:\n }\n \n pub fn build() {\n-    io::println(~\"rustpkg [options..] build\n+    io::println(\"rustpkg [options..] build\n \n Build all targets described in the package script in the current\n directory.\n@@ -33,21 +33,21 @@ Options:\n }\n \n pub fn clean() {\n-    io::println(~\"rustpkg clean\n+    io::println(\"rustpkg clean\n \n Remove all build files in the work cache for the package in the current\n directory.\");\n }\n \n pub fn do_cmd() {\n-    io::println(~\"rustpkg do <cmd>\n+    io::println(\"rustpkg do <cmd>\n \n Runs a command in the package script. You can listen to a command\n by tagging a function with the attribute `#[pkg_do(cmd)]`.\");\n }\n \n pub fn info() {\n-    io::println(~\"rustpkg [options..] info\n+    io::println(\"rustpkg [options..] info\n \n Probe the package script in the current directory for information.\n \n@@ -56,7 +56,7 @@ Options:\n }\n \n pub fn install() {\n-    io::println(~\"rustpkg [options..] install [url] [target]\n+    io::println(\"rustpkg [options..] install [url] [target]\n \n Install a package from a URL by Git or cURL (FTP, HTTP, etc.).\n If target is provided, Git will checkout the branch or tag before\n@@ -76,14 +76,14 @@ Options:\n }\n \n pub fn uninstall() {\n-    io::println(~\"rustpkg uninstall <id|name>[@version]\n+    io::println(\"rustpkg uninstall <id|name>[@version]\n \n Remove a package by id or name and optionally version. If the package(s)\n is/are depended on by another package then they cannot be removed.\");\n }\n \n pub fn prefer() {\n-    io::println(~\"rustpkg [options..] prefer <id|name>[@version]\n+    io::println(\"rustpkg [options..] prefer <id|name>[@version]\n \n By default all binaries are given a unique name so that multiple versions can\n coexist. The prefer command will symlink the uniquely named binary to\n@@ -101,7 +101,7 @@ Example:\n }\n \n pub fn unprefer() {\n-    io::println(~\"rustpkg [options..] unprefer <id|name>[@version]\n+    io::println(\"rustpkg [options..] unprefer <id|name>[@version]\n \n Remove all symlinks from the store to the binary directory for a package\n name and optionally version. If version is not supplied, the latest version\n@@ -110,7 +110,7 @@ information.\");\n }\n \n pub fn test() {\n-    io::println(~\"rustpkg [options..] test\n+    io::println(\"rustpkg [options..] test\n \n Build all targets described in the package script in the current directory\n with the test flag. The test bootstraps will be run afterwards and the output"}, {"sha": "2ee16c67ddde22d7e1aa33c1434173ced8273c65", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4724c1a178252c240c9ad012fc3cba93f18babc/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=d4724c1a178252c240c9ad012fc3cba93f18babc", "patch": "@@ -208,7 +208,7 @@ fn fold_item(ctx: @mut ReadyCtx,\n              fold: @fold::ast_fold) -> Option<@ast::item> {\n     ctx.path.push(item.ident);\n \n-    let attrs = attr::find_attrs_by_name(item.attrs, ~\"pkg_do\");\n+    let attrs = attr::find_attrs_by_name(item.attrs, \"pkg_do\");\n \n     if attrs.len() > 0 {\n         let mut cmds = ~[];\n@@ -281,7 +281,7 @@ pub fn note(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_green);\n-        out.write_str(~\"note: \");\n+        out.write_str(\"note: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -294,7 +294,7 @@ pub fn warn(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_yellow);\n-        out.write_str(~\"warning: \");\n+        out.write_str(\"warning: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -307,7 +307,7 @@ pub fn error(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_red);\n-        out.write_str(~\"error: \");\n+        out.write_str(\"error: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -353,8 +353,8 @@ pub fn compile_input(sysroot: Option<@Path>,\n     debug!(\"compiling %s into %s\",\n            in_file.to_str(),\n            out_file.to_str());\n-    debug!(\"flags: %s\", str::connect(flags, ~\" \"));\n-    debug!(\"cfgs: %s\", str::connect(cfgs, ~\" \"));\n+    debug!(\"flags: %s\", str::connect(flags, \" \"));\n+    debug!(\"cfgs: %s\", str::connect(cfgs, \" \"));\n     debug!(\"compile_input's sysroot = %?\", sysroot);\n \n     let crate_type = match what {"}]}