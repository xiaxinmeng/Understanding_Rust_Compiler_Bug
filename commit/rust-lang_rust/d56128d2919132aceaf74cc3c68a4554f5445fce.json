{"sha": "d56128d2919132aceaf74cc3c68a4554f5445fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjEyOGQyOTE5MTMyYWNlYWY3NGNjM2M2OGE0NTU0ZjU0NDVmY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T08:29:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T08:29:02Z"}, "message": "Auto merge of #62596 - cuviper:expect_none, r=rkruppe\n\nAdd Option::expect_none(msg) and unwrap_none()\n\nThese are `Option` analogues to `Result::expect_err` and `unwrap_err`.", "tree": {"sha": "db1797e894005e2c7c911c0c00151de2b9678a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1797e894005e2c7c911c0c00151de2b9678a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56128d2919132aceaf74cc3c68a4554f5445fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56128d2919132aceaf74cc3c68a4554f5445fce", "html_url": "https://github.com/rust-lang/rust/commit/d56128d2919132aceaf74cc3c68a4554f5445fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56128d2919132aceaf74cc3c68a4554f5445fce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf16480f9cf124630f4a4ffc6d8a57b72fbd5ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf16480f9cf124630f4a4ffc6d8a57b72fbd5ce9", "html_url": "https://github.com/rust-lang/rust/commit/bf16480f9cf124630f4a4ffc6d8a57b72fbd5ce9"}, {"sha": "74c8d984dbd73c070f9c9a5ac991cc271ff05164", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c8d984dbd73c070f9c9a5ac991cc271ff05164", "html_url": "https://github.com/rust-lang/rust/commit/74c8d984dbd73c070f9c9a5ac991cc271ff05164"}], "stats": {"total": 105, "additions": 99, "deletions": 6}, "files": [{"sha": "33d6afdc975ee4a732a0eac5728d6eee9694dd24", "filename": "src/libcore/option.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d56128d2919132aceaf74cc3c68a4554f5445fce/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56128d2919132aceaf74cc3c68a4554f5445fce/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d56128d2919132aceaf74cc3c68a4554f5445fce", "patch": "@@ -136,7 +136,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n-use crate::{convert, hint, mem, ops::{self, Deref}};\n+use crate::{convert, fmt, hint, mem, ops::{self, Deref}};\n use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -977,6 +977,92 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n+impl<T: fmt::Debug> Option<T> {\n+    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is a [`Some`], with a panic message including the\n+    /// passed message, and the content of the [`Some`].\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_expect_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut squares = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will not panic, since all keys are unique.\n+    ///     squares.insert(i, i * i).expect_none(\"duplicate key\");\n+    /// }\n+    /// ```\n+    ///\n+    /// ```{.should_panic}\n+    /// #![feature(option_expect_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut sqrts = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will panic, since both negative and positive `i` will\n+    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n+    ///     sqrts.insert(i * i, i).expect_none(\"duplicate key\");\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"62633\")]\n+    pub fn expect_none(self, msg: &str) {\n+        if let Some(val) = self {\n+            expect_none_failed(msg, &val);\n+        }\n+    }\n+\n+    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is a [`Some`], with a custom panic message provided\n+    /// by the [`Some`]'s value.\n+    ///\n+    /// [`Some(v)`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_unwrap_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut squares = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will not panic, since all keys are unique.\n+    ///     squares.insert(i, i * i).unwrap_none();\n+    /// }\n+    /// ```\n+    ///\n+    /// ```{.should_panic}\n+    /// #![feature(option_unwrap_none)]\n+    ///\n+    /// use std::collections::HashMap;\n+    /// let mut sqrts = HashMap::new();\n+    /// for i in -10..=10 {\n+    ///     // This will panic, since both negative and positive `i` will\n+    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n+    ///     sqrts.insert(i * i, i).unwrap_none();\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"62633\")]\n+    pub fn unwrap_none(self) {\n+        if let Some(val) = self {\n+            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", &val);\n+        }\n+    }\n+}\n+\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n@@ -1069,6 +1155,13 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n+// This is a separate function to reduce the code size of .expect_none() itself.\n+#[inline(never)]\n+#[cold]\n+fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n+    panic!(\"{}: {:?}\", msg, value)\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "3a38b66ad01503c1e6f377e72d4fdd0ca6b2876d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d56128d2919132aceaf74cc3c68a4554f5445fce/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56128d2919132aceaf74cc3c68a4554f5445fce/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d56128d2919132aceaf74cc3c68a4554f5445fce", "patch": "@@ -849,7 +849,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n         }\n     }\n \n@@ -876,7 +876,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(msg, e),\n+            Err(e) => unwrap_failed(msg, &e),\n         }\n     }\n }\n@@ -908,7 +908,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", t),\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n             Err(e) => e,\n         }\n     }\n@@ -935,7 +935,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n     pub fn expect_err(self, msg: &str) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(msg, t),\n+            Ok(t) => unwrap_failed(msg, &t),\n             Err(e) => e,\n         }\n     }\n@@ -1047,7 +1047,7 @@ impl<T, E> Result<Option<T>, E> {\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]\n-fn unwrap_failed<E: fmt::Debug>(msg: &str, error: E) -> ! {\n+fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }\n "}]}