{"sha": "b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNmE3ZDVjZDlkOWM5ZWM4NGViYTkwYjgwNmE0NTMxMzVkMjBiOTk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-27T13:01:25Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-29T20:14:19Z"}, "message": "Stop propagating to locals that were marks as unpropagatable.\n\nWe used to erase these values immediately after propagation, but some\nthings slipped through and it caused us to still initialize huge locals.", "tree": {"sha": "41807889dddbf685b462c86e667077b9c010af05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41807889dddbf685b462c86e667077b9c010af05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "html_url": "https://github.com/rust-lang/rust/commit/b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26a7d5cd9d9c9ec84eba90b806a453135d20b99/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3454c000706176b61ef089107203766735348f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3454c000706176b61ef089107203766735348f7", "html_url": "https://github.com/rust-lang/rust/commit/c3454c000706176b61ef089107203766735348f7"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "a87b00263e5c44a4d49f35dc5810708d5a9091bd", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b26a7d5cd9d9c9ec84eba90b806a453135d20b99/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26a7d5cd9d9c9ec84eba90b806a453135d20b99/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "patch": "@@ -157,14 +157,19 @@ struct ConstPropMachine<'mir, 'tcx> {\n     written_only_inside_own_block_locals: FxHashSet<Local>,\n     /// Locals that need to be cleared after every block terminates.\n     only_propagate_inside_block_locals: BitSet<Local>,\n+    can_const_prop: IndexVec<Local, ConstPropMode>,\n }\n \n impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n-    fn new(only_propagate_inside_block_locals: BitSet<Local>) -> Self {\n+    fn new(\n+        only_propagate_inside_block_locals: BitSet<Local>,\n+        can_const_prop: IndexVec<Local, ConstPropMode>,\n+    ) -> Self {\n         Self {\n             stack: Vec::new(),\n             written_only_inside_own_block_locals: Default::default(),\n             only_propagate_inside_block_locals,\n+            can_const_prop,\n         }\n     }\n }\n@@ -243,6 +248,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         local: Local,\n     ) -> InterpResult<'tcx, Result<&'a mut LocalValue<Self::PointerTag>, MemPlace<Self::PointerTag>>>\n     {\n+        if ecx.machine.can_const_prop[local] == ConstPropMode::NoPropagation {\n+            throw_machine_stop_str!(\"tried to write to a local that is marked as not propagatable\")\n+        }\n         if frame == 0 && ecx.machine.only_propagate_inside_block_locals.contains(local) {\n             ecx.machine.written_only_inside_own_block_locals.insert(local);\n         }\n@@ -287,7 +295,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n-    can_const_prop: IndexVec<Local, ConstPropMode>,\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n     // by accessing them through `ecx` instead.\n@@ -347,7 +354,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             tcx,\n             span,\n             param_env,\n-            ConstPropMachine::new(only_propagate_inside_block_locals),\n+            ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n             (),\n         );\n \n@@ -373,7 +380,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ecx,\n             tcx,\n             param_env,\n-            can_const_prop,\n             // FIXME(eddyb) avoid cloning these two fields more than once,\n             // by accessing them through `ecx` instead.\n             source_scopes: body.source_scopes.clone(),\n@@ -1031,7 +1037,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         let source_info = statement.source_info;\n         self.source_info = Some(source_info);\n         if let StatementKind::Assign(box (place, ref mut rval)) = statement.kind {\n-            let can_const_prop = self.can_const_prop[place.local];\n+            let can_const_prop = self.ecx.machine.can_const_prop[place.local];\n             if let Some(()) = self.const_prop(rval, source_info, place) {\n                 // This will return None if the above `const_prop` invocation only \"wrote\" a\n                 // type whose creation requires no write. E.g. a generator whose initial state"}, {"sha": "6e2ee0957ab332bd88a5f7f7b270221067eacab8", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b26a7d5cd9d9c9ec84eba90b806a453135d20b99/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b26a7d5cd9d9c9ec84eba90b806a453135d20b99/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=b26a7d5cd9d9c9ec84eba90b806a453135d20b99", "patch": "@@ -23,15 +23,13 @@\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n-+                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002b))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n-+                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n+                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19"}]}