{"sha": "0c6f10ce42ba9f694963e8e45b4a8f3681656902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmYxMGNlNDJiYTlmNjk0OTYzZThlNDViNGE4ZjM2ODE2NTY5MDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-23T21:42:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T21:42:53Z"}, "message": "Merge #6341\n\n6341: Complete variants when only enun name is typed r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "63ec848fc2b6ea91627b7b963b33bf10cb8a20f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ec848fc2b6ea91627b7b963b33bf10cb8a20f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6f10ce42ba9f694963e8e45b4a8f3681656902", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfk05dCRBK7hj4Ov3rIwAAdHIIAEv8WY85tymtMxQib8Pjb9bY\n2ih4KCfvIl6UmEDImkUsdRgbjYTL4XUA8u+wQcPc7CgEAtdj3dNwD7T1QtfmkQCI\n+Y60KdH2M6pE13S2N/8cIvItZmZf/lzGm7ensNsSRkvAL0Ajq1MV1pB2FUGHISsm\nTu1xfxZZqwkcq4bvnFs1TEMmUHvl8JaZseNoK/JxJ/aY78qfIK71UqBCcnraY/Ou\nP5K1wqbMwa7ozNK32ZwHrRwDUJb7S7Sgat3NxA0Gz/f9YPO+dLKSSyxAv+0nAeBg\nFWlA1OVwrqqBepDXYzMRgRKoXEc8EdhKckmVrD5G5n9f5ZTFIwLklgOlH7dtuCQ=\n=uYny\n-----END PGP SIGNATURE-----\n", "payload": "tree 63ec848fc2b6ea91627b7b963b33bf10cb8a20f4\nparent dd8a75b2cf46a967b3449652fe17c19a8fcc4e41\nparent f9b81369e270db0bde27dc85358148712555bfa8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603489373 +0000\ncommitter GitHub <noreply@github.com> 1603489373 +0000\n\nMerge #6341\n\n6341: Complete variants when only enun name is typed r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f10ce42ba9f694963e8e45b4a8f3681656902", "html_url": "https://github.com/rust-lang/rust/commit/0c6f10ce42ba9f694963e8e45b4a8f3681656902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f10ce42ba9f694963e8e45b4a8f3681656902/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8a75b2cf46a967b3449652fe17c19a8fcc4e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8a75b2cf46a967b3449652fe17c19a8fcc4e41", "html_url": "https://github.com/rust-lang/rust/commit/dd8a75b2cf46a967b3449652fe17c19a8fcc4e41"}, {"sha": "f9b81369e270db0bde27dc85358148712555bfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b81369e270db0bde27dc85358148712555bfa8", "html_url": "https://github.com/rust-lang/rust/commit/f9b81369e270db0bde27dc85358148712555bfa8"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "0a6f5a1ea789bbd896ca5b4e497e21f187473ff3", "filename": "crates/completion/src/presentation.rs", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0c6f10ce42ba9f694963e8e45b4a8f3681656902/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6f10ce42ba9f694963e8e45b4a8f3681656902/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpresentation.rs?ref=0c6f10ce42ba9f694963e8e45b4a8f3681656902", "patch": "@@ -304,9 +304,14 @@ impl Completions {\n     ) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = local_name.unwrap_or_else(|| variant.name(ctx.db).to_string());\n-        let qualified_name = match &path {\n-            Some(it) => it.to_string(),\n-            None => name.to_string(),\n+        let (qualified_name, short_qualified_name) = match &path {\n+            Some(path) => {\n+                let full = path.to_string();\n+                let short =\n+                    path.segments[path.segments.len().saturating_sub(2)..].iter().join(\"::\");\n+                (full, short)\n+            }\n+            None => (name.to_string(), name.to_string()),\n         };\n         let detail_types = variant\n             .fields(ctx.db)\n@@ -335,14 +340,12 @@ impl Completions {\n         .set_deprecated(is_deprecated)\n         .detail(detail);\n \n-        if path.is_some() {\n-            res = res.lookup_by(name);\n-        }\n-\n         if variant_kind == StructKind::Tuple {\n             mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(variant.fields(ctx.db).len());\n-            res = res.add_call_parens(ctx, qualified_name, params)\n+            res = res.add_call_parens(ctx, short_qualified_name, params)\n+        } else if path.is_some() {\n+            res = res.lookup_by(short_qualified_name);\n         }\n \n         res.add_to(self);\n@@ -606,6 +609,57 @@ fn main() { Foo::Fo<|> }\n         );\n     }\n \n+    #[test]\n+    fn lookup_enums_by_two_qualifiers() {\n+        check(\n+            r#\"\n+mod m {\n+    pub enum Spam { Foo, Bar(i32) }\n+}\n+fn main() { let _: m::Spam = S<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Spam::Bar(\u2026)\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"Spam::Bar($0)\",\n+                        kind: EnumVariant,\n+                        lookup: \"Spam::Bar\",\n+                        detail: \"(i32)\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"m\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"m\",\n+                        kind: Module,\n+                    },\n+                    CompletionItem {\n+                        label: \"m::Spam::Foo\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"m::Spam::Foo\",\n+                        kind: EnumVariant,\n+                        lookup: \"Spam::Foo\",\n+                        detail: \"()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"main()$0\",\n+                        kind: Function,\n+                        lookup: \"main\",\n+                        detail: \"fn main()\",\n+                    },\n+                ]\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn sets_deprecated_flag_in_completion_items() {\n         check("}]}