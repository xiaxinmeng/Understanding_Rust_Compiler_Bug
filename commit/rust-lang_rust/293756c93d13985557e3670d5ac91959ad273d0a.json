{"sha": "293756c93d13985557e3670d5ac91959ad273d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5Mzc1NmM5M2QxMzk4NTU1N2UzNjcwZDVhYzkxOTU5YWQyNzNkMGE=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-07-25T15:46:11Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon@localhost.localdomain", "date": "2020-08-16T20:04:58Z"}, "message": "Implement 'considered equal' for statements, so that for example `_0 = _1` and `discriminant(_0) = discriminant(0)` are considered equal if 0 is a fieldless variant of an enum", "tree": {"sha": "083ae4a2e91a911d58a57dedecd14ea04ca8b039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083ae4a2e91a911d58a57dedecd14ea04ca8b039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293756c93d13985557e3670d5ac91959ad273d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293756c93d13985557e3670d5ac91959ad273d0a", "html_url": "https://github.com/rust-lang/rust/commit/293756c93d13985557e3670d5ac91959ad273d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293756c93d13985557e3670d5ac91959ad273d0a/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "009551f758d1d007ad0f7b652bfa8ddba0738117", "url": "https://api.github.com/repos/rust-lang/rust/commits/009551f758d1d007ad0f7b652bfa8ddba0738117", "html_url": "https://github.com/rust-lang/rust/commit/009551f758d1d007ad0f7b652bfa8ddba0738117"}], "stats": {"total": 648, "additions": 381, "deletions": 267}, "files": [{"sha": "06829cc2f14d51e6c6aea6c6bfeaa20ead57bf2c", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 223, "deletions": 36, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -14,7 +14,7 @@ use itertools::Itertools as _;\n use rustc_index::{bit_set::BitSet, vec::IndexVec};\n use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{List, Ty, TyCtxt};\n+use rustc_middle::ty::{self, List, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter::{Enumerate, Peekable};\n use std::slice::Iter;\n@@ -527,52 +527,239 @@ fn match_variant_field_place<'tcx>(place: Place<'tcx>) -> Option<(Local, VarFiel\n pub struct SimplifyBranchSame;\n \n impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let mut did_remove_blocks = false;\n-        let bbs = body.basic_blocks_mut();\n-        for bb_idx in bbs.indices() {\n-            let targets = match &bbs[bb_idx].terminator().kind {\n-                TerminatorKind::SwitchInt { targets, .. } => targets,\n-                _ => continue,\n-            };\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"Running SimplifyBranchSame on {:?}\", source);\n+        let finder = SimplifyBranchSameOptimizationFinder { body, tcx };\n+        let opts = finder.find();\n+\n+        let did_remove_blocks = opts.len() > 0;\n+        for opt in opts.iter() {\n+            trace!(\"SUCCESS: Applying optimization {:?}\", opt);\n+            // Replace `SwitchInt(..) -> [bb_first, ..];` with a `goto -> bb_first;`.\n+            body.basic_blocks_mut()[opt.bb_to_opt_terminator].terminator_mut().kind =\n+                TerminatorKind::Goto { target: opt.bb_to_goto };\n+        }\n+\n+        if did_remove_blocks {\n+            // We have dead blocks now, so remove those.\n+            simplify::remove_dead_blocks(body);\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct SimplifyBranchSameOptimization {\n+    /// All basic blocks are equal so go to this one\n+    bb_to_goto: BasicBlock,\n+    /// Basic block where the terminator can be simplified to a goto\n+    bb_to_opt_terminator: BasicBlock,\n+}\n+\n+struct SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+}\n \n-            let mut iter_bbs_reachable = targets\n-                .iter()\n-                .map(|idx| (*idx, &bbs[*idx]))\n-                .filter(|(_, bb)| {\n-                    // Reaching `unreachable` is UB so assume it doesn't happen.\n-                    bb.terminator().kind != TerminatorKind::Unreachable\n+impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n+    fn find(&self) -> Vec<SimplifyBranchSameOptimization> {\n+        self.body\n+            .basic_blocks()\n+            .iter_enumerated()\n+            .filter_map(|(bb_idx, bb)| {\n+                let (discr_switched_on, targets) = match &bb.terminator().kind {\n+                    TerminatorKind::SwitchInt { targets, discr, .. } => (discr, targets),\n+                    _ => return None,\n+                };\n+\n+                // find the adt that has its discriminant read\n+                // assuming this must be the last statement of the block\n+                let adt_matched_on = match &bb.statements.last()?.kind {\n+                    StatementKind::Assign(box (place, rhs))\n+                        if Some(*place) == discr_switched_on.place() =>\n+                    {\n+                        match rhs {\n+                            Rvalue::Discriminant(adt_place) if adt_place.ty(self.body, self.tcx).ty.is_enum() => adt_place,\n+                            _ => {\n+                                trace!(\"NO: expected a discriminant read of an enum instead of: {:?}\", rhs);\n+                                return None;\n+                            }\n+                        }\n+                    }\n+                    other => {\n+                        trace!(\"NO: expected an assignment of a discriminant read to a place. Found: {:?}\", other);\n+                        return None\n+                    },\n+                };\n+\n+                let mut iter_bbs_reachable = targets\n+                    .iter()\n+                    .map(|idx| (*idx, &self.body.basic_blocks()[*idx]))\n+                    .filter(|(_, bb)| {\n+                        // Reaching `unreachable` is UB so assume it doesn't happen.\n+                        bb.terminator().kind != TerminatorKind::Unreachable\n                     // But `asm!(...)` could abort the program,\n                     // so we cannot assume that the `unreachable` terminator itself is reachable.\n                     // FIXME(Centril): use a normalization pass instead of a check.\n                     || bb.statements.iter().any(|stmt| match stmt.kind {\n                         StatementKind::LlvmInlineAsm(..) => true,\n                         _ => false,\n                     })\n-                })\n-                .peekable();\n-\n-            // We want to `goto -> bb_first`.\n-            let bb_first = iter_bbs_reachable.peek().map(|(idx, _)| *idx).unwrap_or(targets[0]);\n-\n-            // All successor basic blocks should have the exact same form.\n-            let all_successors_equivalent =\n-                iter_bbs_reachable.map(|(_, bb)| bb).tuple_windows().all(|(bb_l, bb_r)| {\n-                    bb_l.is_cleanup == bb_r.is_cleanup\n-                        && bb_l.terminator().kind == bb_r.terminator().kind\n-                        && bb_l.statements.iter().eq_by(&bb_r.statements, |x, y| x.kind == y.kind)\n-                });\n-\n-            if all_successors_equivalent {\n-                // Replace `SwitchInt(..) -> [bb_first, ..];` with a `goto -> bb_first;`.\n-                bbs[bb_idx].terminator_mut().kind = TerminatorKind::Goto { target: bb_first };\n-                did_remove_blocks = true;\n+                    })\n+                    .peekable();\n+\n+                let bb_first = iter_bbs_reachable.peek().map(|(idx, _)| *idx).unwrap_or(targets[0]);\n+                let mut all_successors_equivalent = StatementEquality::TrivialEqual;\n+\n+                // All successor basic blocks must be equal or contain statements that are pairwise considered equal.\n+                for ((bb_l_idx,bb_l), (bb_r_idx,bb_r)) in iter_bbs_reachable.tuple_windows() {\n+                    let trivial_checks = bb_l.is_cleanup == bb_r.is_cleanup\n+                    && bb_l.terminator().kind == bb_r.terminator().kind;\n+                    let statement_check = || {\n+                        bb_l.statements.iter().zip(&bb_r.statements).try_fold(StatementEquality::TrivialEqual, |acc,(l,r)| {\n+                            let stmt_equality = self.statement_equality(*adt_matched_on, &l, bb_l_idx, &r, bb_r_idx);\n+                            if matches!(stmt_equality, StatementEquality::NotEqual) {\n+                                // short circuit\n+                                None\n+                            } else {\n+                                Some(acc.combine(&stmt_equality))\n+                            }\n+                        })\n+                        .unwrap_or(StatementEquality::NotEqual)\n+                    };\n+                    if !trivial_checks {\n+                        all_successors_equivalent = StatementEquality::NotEqual;\n+                        break;\n+                    }\n+                    all_successors_equivalent = all_successors_equivalent.combine(&statement_check());\n+                };\n+\n+                match all_successors_equivalent{\n+                    StatementEquality::TrivialEqual => {\n+                        // statements are trivially equal, so just take first\n+                        trace!(\"Statements are trivially equal\");\n+                        Some(SimplifyBranchSameOptimization {\n+                            bb_to_goto: bb_first,\n+                            bb_to_opt_terminator: bb_idx,\n+                        })\n+                    }\n+                    StatementEquality::ConsideredEqual(bb_to_choose) => {\n+                        trace!(\"Statements are considered equal\");\n+                        Some(SimplifyBranchSameOptimization {\n+                            bb_to_goto: bb_to_choose,\n+                            bb_to_opt_terminator: bb_idx,\n+                        })\n+                    }\n+                    StatementEquality::NotEqual => {\n+                        trace!(\"NO: not all successors of basic block {:?} were equivalent\", bb_idx);\n+                        None\n+                    }\n+                }\n+            })\n+            .collect()\n+    }\n+\n+    /// Tests if two statements can be considered equal\n+    ///\n+    /// Statements can be trivially equal if the kinds match.\n+    /// But they can also be considered equal in the following case A:\n+    /// ```\n+    /// discriminant(_0) = 0;   // bb1\n+    /// _0 = move _1;           // bb2\n+    /// ```\n+    /// In this case the two statements are equal iff\n+    /// 1: _0 is an enum where the variant index 0 is fieldless, and\n+    /// 2:  bb1 was targeted by a switch where the discriminant of _1 was switched on\n+    fn statement_equality(\n+        &self,\n+        adt_matched_on: Place<'tcx>,\n+        x: &Statement<'tcx>,\n+        x_bb_idx: BasicBlock,\n+        y: &Statement<'tcx>,\n+        y_bb_idx: BasicBlock,\n+    ) -> StatementEquality {\n+        let helper = |rhs: &Rvalue<'tcx>,\n+                      place: &Box<Place<'tcx>>,\n+                      variant_index: &VariantIdx,\n+                      side_to_choose| {\n+            let place_type = place.ty(self.body, self.tcx).ty;\n+            let adt = match place_type.kind {\n+                ty::Adt(adt, _) if adt.is_enum() => adt,\n+                _ => return StatementEquality::NotEqual,\n+            };\n+            let variant_is_fieldless = adt.variants[*variant_index].fields.is_empty();\n+            if !variant_is_fieldless {\n+                trace!(\"NO: variant {:?} was not fieldless\", variant_index);\n+                return StatementEquality::NotEqual;\n+            }\n+\n+            match rhs {\n+                Rvalue::Use(operand) if operand.place() == Some(adt_matched_on) => {\n+                    StatementEquality::ConsideredEqual(side_to_choose)\n+                }\n+                _ => {\n+                    trace!(\n+                        \"NO: RHS of assignment was {:?}, but expected it to match the adt being matched on in the switch, which is {:?}\",\n+                        rhs,\n+                        adt_matched_on\n+                    );\n+                    StatementEquality::NotEqual\n+                }\n+            }\n+        };\n+        match (&x.kind, &y.kind) {\n+            // trivial case\n+            (x, y) if x == y => StatementEquality::TrivialEqual,\n+\n+            // check for case A\n+            (\n+                StatementKind::Assign(box (_, rhs)),\n+                StatementKind::SetDiscriminant { place, variant_index },\n+            ) => {\n+                // choose basic block of x, as that has the assign\n+                helper(rhs, place, variant_index, x_bb_idx)\n+            }\n+            (\n+                StatementKind::SetDiscriminant { place, variant_index },\n+                StatementKind::Assign(box (_, rhs)),\n+            ) => {\n+                // choose basic block of y, as that has the assign\n+                helper(rhs, place, variant_index, y_bb_idx)\n+            }\n+            _ => {\n+                trace!(\"NO: statements `{:?}` and `{:?}` not considered equal\", x, y);\n+                StatementEquality::NotEqual\n             }\n         }\n+    }\n+}\n \n-        if did_remove_blocks {\n-            // We have dead blocks now, so remove those.\n-            simplify::remove_dead_blocks(body);\n+#[derive(Copy, Clone, Eq, PartialEq)]\n+enum StatementEquality {\n+    /// The two statements are trivially equal; same kind\n+    TrivialEqual,\n+    /// The two statements are considered equal, but may be of different kinds. The BasicBlock field is the basic block to jump to when performing the branch-same optimization.\n+    /// For example, `_0 = _1` and `discriminant(_0) = discriminant(0)` are considered equal if 0 is a fieldless variant of an enum. But we don't want to jump to the basic block with the SetDiscriminant, as that is not legal if _1 is not the 0 variant index\n+    ConsideredEqual(BasicBlock),\n+    /// The two statements are not equal\n+    NotEqual,\n+}\n+\n+impl StatementEquality {\n+    fn combine(&self, other: &StatementEquality) -> StatementEquality {\n+        use StatementEquality::*;\n+        match (self, other) {\n+            (TrivialEqual, TrivialEqual) => TrivialEqual,\n+            (TrivialEqual, ConsideredEqual(b)) | (ConsideredEqual(b), TrivialEqual) => {\n+                ConsideredEqual(*b)\n+            }\n+            (ConsideredEqual(b1), ConsideredEqual(b2)) => {\n+                if b1 == b2 {\n+                    ConsideredEqual(*b1)\n+                } else {\n+                    NotEqual\n+                }\n+            }\n+            (_, NotEqual) | (NotEqual, _) => NotEqual,\n         }\n     }\n }"}, {"sha": "9d81b7f01cf5d5abfe97f465955d336e220c4ef1", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=1\n+// compile-flags: -Z mir-opt-level=2\n // EMIT_MIR simplify_arm.id.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_arm.id.SimplifyBranchSame.diff\n // EMIT_MIR simplify_arm.id_result.SimplifyArmIdentity.diff"}, {"sha": "ecb4384fc6f31ff7eecddaf17fd017285d635f48", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -8,7 +8,8 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n-          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+-         debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n++         debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n@@ -26,14 +27,15 @@\n       }\n   \n       bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n-          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n-          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+-         _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+-         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n+-         ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+-         discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n++         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n       }\n   "}, {"sha": "eb1d6f656f497b219353f1c0bc5fd97ab6eb4186", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -8,36 +8,32 @@\n       let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n       let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:11:25: 11:26\n       scope 1 {\n-          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n+          debug v => ((_0 as Some).0: u8); // in scope 1 at $DIR/simplify-arm.rs:11:14: 11:15\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n-          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+-         switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n       }\n   \n       bb1: {\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+-         discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+-     }\n+- \n+-     bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+-     }\n+- \n+-     bb3: {\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n       }\n   \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n-          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:11:14: 11:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:11:25: 11:26\n-          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n-      }\n-  \n-      bb4: {\n+-     bb4: {\n++     bb2: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:14:2: 14:2\n       }\n   }"}, {"sha": "253e3236ff7d13310d4d4c4ec3be41a5fb6b0fbc", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -10,10 +10,12 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+-         debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n++         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n-          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+-         debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n++         debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n@@ -22,14 +24,15 @@\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n-          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n-          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n-          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n-          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n-          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n-          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n-          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n+-         StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+-         _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n+-         StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+-         _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n+-         ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n++         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n       }\n   \n@@ -38,14 +41,15 @@\n       }\n   \n       bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n-          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n-          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+-         _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n+-         StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+-         _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n+-         ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n++         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n       }\n   "}, {"sha": "23cf43c531973b9c08670f4a6549ad9b2b3a647d", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -10,46 +10,35 @@\n       let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n       let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:19:23: 19:24\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n+          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:18:12: 18:13\n       }\n       scope 2 {\n-          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n+          debug y => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:19:13: 19:14\n       }\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+-         switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n-          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:19:13: 19:14\n-          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n-          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:19:23: 19:24\n-          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n-          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n-          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n-          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+-         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+-     }\n+- \n+-     bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+-     }\n+- \n+-     bb3: {\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n       }\n   \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n-          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:18:12: 18:13\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:18:21: 18:22\n-          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n-      }\n-  \n-      bb4: {\n+-     bb4: {\n++     bb2: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:21:2: 21:2\n       }\n   }"}, {"sha": "063f8495960c53a7893afa1d0aa0736185db4544", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -15,94 +15,88 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+-         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n++         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n       }\n       scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n+              scope 7 {\n+-                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              }\n+              scope 8 {\n+-                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:14: 24:15\n+              }\n           }\n       }\n       scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n++         debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n           scope 5 {\n           }\n       }\n+      scope 6 {\n+          debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = const <std::result::Result<u8, i32> as std::ops::Try>::into_result(move _4) -> bb1; // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // + literal: Const { ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb1: {\n+          _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   \n-      bb2: {\n-          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      bb1: {\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n-          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n-          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n+-         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n-      bb3: {\n+      bb2: {\n           unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n   \n-      bb4: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}, val: Value(Scalar(<ZST>)) }\n+      bb3: {\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n++         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   \n-      bb5: {\n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-  \n-      bb6: {\n-          StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb7; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb7: {\n-          StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      }\n   }\n   "}, {"sha": "7c7b1b6d6c6d5e7ed97838a9806a2d66e21959af", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 32, "deletions": 64, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -15,94 +15,62 @@\n       let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n       let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n       scope 1 {\n-          debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n       }\n       scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n+          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n+              scope 7 {\n+                  debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              }\n+              scope 8 {\n+                  debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:14: 24:15\n+              }\n           }\n       }\n       scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n+          debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n           scope 5 {\n           }\n       }\n+      scope 6 {\n+          debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+      }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = const <std::result::Result<u8, i32> as std::ops::Try>::into_result(move _4) -> bb1; // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // + literal: Const { ty: fn(std::result::Result<u8, i32>) -> std::result::Result<<std::result::Result<u8, i32> as std::ops::Try>::Ok, <std::result::Result<u8, i32> as std::ops::Try>::Error> {<std::result::Result<u8, i32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb1: {\n+          _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n   \n-      bb2: {\n-          StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+      bb1: {\n+          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n-          _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n-          ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n-      }\n-  \n-      bb3: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n-      bb4: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _8 = const <i32 as std::convert::From<i32>>::from(move _9) -> bb6; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as std::convert::From<i32>>::from}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb5: {\n+      bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-     }\n+- \n+-     bb3: {\n+-         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-     }\n+- \n+-     bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-  \n-      bb6: {\n-          StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _0 = const <std::result::Result<u8, i32> as std::ops::Try>::from_error(move _8) -> bb7; // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-                                           // ty::Const\n-                                           // + ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-arm.rs:24:13: 24:15\n-                                           // + literal: Const { ty: fn(<std::result::Result<u8, i32> as std::ops::Try>::Error) -> std::result::Result<u8, i32> {<std::result::Result<u8, i32> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb7: {\n-          StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb5;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      }\n   }\n   "}, {"sha": "9e840553ecabd9d58b657f22e0f8324083401404", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n@@ -29,21 +29,8 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      }\n-  \n-      bb1: {\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n-      }\n-  \n-      bb2: {\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n-      }\n-  \n-      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }"}, {"sha": "9e840553ecabd9d58b657f22e0f8324083401404", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/293756c93d13985557e3670d5ac91959ad273d0a/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit?ref=293756c93d13985557e3670d5ac91959ad273d0a", "patch": "@@ -4,7 +4,7 @@\n   fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n@@ -29,21 +29,8 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      }\n-  \n-      bb1: {\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n-      }\n-  \n-      bb2: {\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n-      }\n-  \n-      bb3: {\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }"}]}