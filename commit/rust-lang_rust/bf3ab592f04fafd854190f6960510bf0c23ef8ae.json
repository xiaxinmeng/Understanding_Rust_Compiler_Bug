{"sha": "bf3ab592f04fafd854190f6960510bf0c23ef8ae", "node_id": "C_kwDOAAsO6NoAKGJmM2FiNTkyZjA0ZmFmZDg1NDE5MGY2OTYwNTEwYmYwYzIzZWY4YWU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-07T04:40:32Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-07T04:40:32Z"}, "message": "Changes to `iter_overeager_cloned`\n* Don't lint on `.cloned().flatten()` when `T::Item` doesn't implement `IntoIterator`\n* Reduce verbosity of lint message\n* Narrow down the scope of the replacement range", "tree": {"sha": "b878ac2ecc8072169172178a5d57705fba47d752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b878ac2ecc8072169172178a5d57705fba47d752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3ab592f04fafd854190f6960510bf0c23ef8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ab592f04fafd854190f6960510bf0c23ef8ae", "html_url": "https://github.com/rust-lang/rust/commit/bf3ab592f04fafd854190f6960510bf0c23ef8ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ab592f04fafd854190f6960510bf0c23ef8ae/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f5ff6903c6c914f6541422d004df3202916012", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f5ff6903c6c914f6541422d004df3202916012", "html_url": "https://github.com/rust-lang/rust/commit/72f5ff6903c6c914f6541422d004df3202916012"}], "stats": {"total": 176, "additions": 92, "deletions": 84}, "files": [{"sha": "06a39c5997e204ab6ac21db206bec7c5769c61a9", "filename": "clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "modified", "additions": 43, "deletions": 54, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -1,70 +1,59 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::{get_iterator_item_ty, implements_trait, is_copy};\n-use itertools::Itertools;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{get_associated_type, implements_trait, is_copy};\n use rustc_errors::Applicability;\n-use rustc_hir as hir;\n+use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::sym;\n-use std::ops::Not;\n \n use super::ITER_OVEREAGER_CLONED;\n use crate::redundant_clone::REDUNDANT_CLONE;\n \n-/// lint overeager use of `cloned()` for `Iterator`s\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    recv: &'tcx hir::Expr<'_>,\n-    name: &str,\n-    map_arg: &[hir::Expr<'_>],\n+    expr: &'tcx Expr<'_>,\n+    cloned_call: &'tcx Expr<'_>,\n+    cloned_recv: &'tcx Expr<'_>,\n+    is_count: bool,\n+    needs_into_iter: bool,\n ) {\n-    // Check if it's iterator and get type associated with `Item`.\n-    let inner_ty = if_chain! {\n-        if let Some(iterator_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n-        let recv_ty = cx.typeck_results().expr_ty(recv);\n-        if implements_trait(cx, recv_ty, iterator_trait_id, &[]);\n-        if let Some(inner_ty) = get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv));\n-        then {\n-            inner_ty\n-        } else {\n+    let typeck = cx.typeck_results();\n+    if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator)\n+        && let Some(method_id) = typeck.type_dependent_def_id(expr.hir_id)\n+        && cx.tcx.trait_of_item(method_id) == Some(iter_id)\n+        && let Some(method_id) = typeck.type_dependent_def_id(cloned_call.hir_id)\n+        && cx.tcx.trait_of_item(method_id) == Some(iter_id)\n+        && let cloned_recv_ty = typeck.expr_ty_adjusted(cloned_recv)\n+        && let Some(iter_assoc_ty) = get_associated_type(cx, cloned_recv_ty, iter_id, \"Item\")\n+        && matches!(*iter_assoc_ty.kind(), ty::Ref(_, ty, _) if !is_copy(cx, ty))\n+    {\n+        if needs_into_iter\n+            && let Some(into_iter_id) = cx.tcx.get_diagnostic_item(sym::IntoIterator)\n+            && !implements_trait(cx, iter_assoc_ty, into_iter_id, &[])\n+        {\n             return;\n         }\n-    };\n-\n-    match inner_ty.kind() {\n-        ty::Ref(_, ty, _) if !is_copy(cx, *ty) => {},\n-        _ => return,\n-    };\n \n-    let (lint, preserve_cloned) = match name {\n-        \"count\" => (REDUNDANT_CLONE, false),\n-        _ => (ITER_OVEREAGER_CLONED, true),\n-    };\n-    let wildcard_params = map_arg.is_empty().not().then(|| \"...\").unwrap_or_default();\n-    let msg = format!(\n-        \"called `cloned().{}({})` on an `Iterator`. It may be more efficient to call `{}({}){}` instead\",\n-        name,\n-        wildcard_params,\n-        name,\n-        wildcard_params,\n-        preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n-    );\n+        let (lint, msg, trailing_clone) = if is_count {\n+            (REDUNDANT_CLONE, \"unneeded cloning of iterator items\", \"\")\n+        } else {\n+            (ITER_OVEREAGER_CLONED, \"unnecessarily eager cloning of iterator items\", \".cloned()\")\n+        };\n \n-    span_lint_and_sugg(\n-        cx,\n-        lint,\n-        expr.span,\n-        &msg,\n-        \"try this\",\n-        format!(\n-            \"{}.{}({}){}\",\n-            snippet(cx, recv.span, \"..\"),\n-            name,\n-            map_arg.iter().map(|a| snippet(cx, a.span, \"..\")).join(\", \"),\n-            preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n-        ),\n-        Applicability::MachineApplicable,\n-    );\n+        span_lint_and_then(\n+            cx,\n+            lint,\n+            expr.span,\n+            msg,\n+            |diag| {\n+                let method_span = expr.span.with_lo(cloned_call.span.hi());\n+                if let Some(mut snip) = snippet_opt(cx, method_span) {\n+                    snip.push_str(trailing_clone);\n+                    let replace_span = expr.span.with_lo(cloned_recv.span.hi());\n+                    diag.span_suggestion(replace_span, \"try this\", snip, Applicability::MachineApplicable);\n+                }\n+            }\n+        );\n+    }\n }"}, {"sha": "2ebfcb7a5fe8de56dd12279acd6528220038cd86", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -2583,8 +2583,8 @@ impl Methods {\n                     },\n                     _ => {},\n                 },\n-                (name @ \"count\", args @ []) => match method_call(recv) {\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                (\"count\", []) => match method_call(recv) {\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, true, false),\n                     Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n                         iter_count::check(cx, expr, recv2, name2);\n                     },\n@@ -2614,9 +2614,9 @@ impl Methods {\n                     flat_map_identity::check(cx, expr, arg, span);\n                     flat_map_option::check(cx, expr, arg, span);\n                 },\n-                (name @ \"flatten\", args @ []) => match method_call(recv) {\n+                (\"flatten\", []) => match method_call(recv) {\n                     Some((\"map\", [recv, map_arg], map_span)) => map_flatten::check(cx, expr, recv, map_arg, map_span),\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, true),\n                     _ => {},\n                 },\n                 (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n@@ -2636,10 +2636,10 @@ impl Methods {\n                         unnecessary_join::check(cx, expr, recv, join_arg, span);\n                     }\n                 },\n-                (\"last\", args @ []) | (\"skip\", args @ [_]) => {\n+                (\"last\", []) | (\"skip\", [_]) => {\n                     if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n                         if let (\"cloned\", []) = (name2, args2) {\n-                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                            iter_overeager_cloned::check(cx, expr, recv, recv2, false, false);\n                         }\n                     }\n                 },\n@@ -2660,10 +2660,10 @@ impl Methods {\n                     map_identity::check(cx, expr, recv, m_arg, name, span);\n                 },\n                 (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n-                (name @ \"next\", args @ []) => {\n+                (\"next\", []) => {\n                     if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n                         match (name2, args2) {\n-                            (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                            (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                             (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n                             (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, self.msrv),\n                             (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n@@ -2673,9 +2673,9 @@ impl Methods {\n                         }\n                     }\n                 },\n-                (\"nth\", args @ [n_arg]) => match method_call(recv) {\n+                (\"nth\", [n_arg]) => match method_call(recv) {\n                     Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                     Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n                     Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n                     _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n@@ -2698,10 +2698,10 @@ impl Methods {\n                     }\n                 },\n                 (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n-                (\"take\", args @ [_arg]) => {\n+                (\"take\", [_arg]) => {\n                     if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n                         if let (\"cloned\", []) = (name2, args2) {\n-                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                            iter_overeager_cloned::check(cx, expr, recv, recv2, false, false);\n                         }\n                     }\n                 },"}, {"sha": "227e97d37ecc3bbcc0eac4d284ceace56057c88b", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -78,9 +78,9 @@ pub fn get_associated_type<'tcx>(\n     cx.tcx\n         .associated_items(trait_id)\n         .find_by_name_and_kind(cx.tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n-        .map(|assoc| {\n+        .and_then(|assoc| {\n             let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n-            cx.tcx.normalize_erasing_regions(cx.param_env, proj)\n+            cx.tcx.try_normalize_erasing_regions(cx.param_env, proj).ok()\n         })\n }\n "}, {"sha": "c100705d017816737d872fec5c40f591e35eb313", "filename": "tests/ui/iter_overeager_cloned.fixed", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.fixed?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -18,7 +18,8 @@ fn main() {\n     let _ = vec.iter().filter(|x| x == &\"2\").nth(2).cloned();\n \n     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n-        .iter().flatten().cloned();\n+        .iter()\n+        .flatten().cloned();\n \n     // Not implemented yet\n     let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n@@ -43,6 +44,9 @@ fn main() {\n \n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+\n+    // `&Range<_>` doesn't implement `IntoIterator`\n+    let _ = [0..1, 2..5].iter().cloned().flatten();\n }\n \n // #8527"}, {"sha": "2caa88020662d6ab24802ad0ab119f0fe7b495a4", "filename": "tests/ui/iter_overeager_cloned.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.rs?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -45,6 +45,9 @@ fn main() {\n \n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+\n+    // `&Range<_>` doesn't implement `IntoIterator`\n+    let _ = [0..1, 2..5].iter().cloned().flatten();\n }\n \n // #8527"}, {"sha": "dcae7cecd33e913e3b28274b471a494de1da182a", "filename": "tests/ui/iter_overeager_cloned.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf3ab592f04fafd854190f6960510bf0c23ef8ae/tests%2Fui%2Fiter_overeager_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.stderr?ref=bf3ab592f04fafd854190f6960510bf0c23ef8ae", "patch": "@@ -1,44 +1,56 @@\n-error: called `cloned().last()` on an `Iterator`. It may be more efficient to call `last().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:8:29\n    |\n LL |     let _: Option<String> = vec.iter().cloned().last();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().last().cloned()`\n+   |                             ^^^^^^^^^^----------------\n+   |                                       |\n+   |                                       help: try this: `.last().cloned()`\n    |\n    = note: `-D clippy::iter-overeager-cloned` implied by `-D warnings`\n \n-error: called `cloned().next()` on an `Iterator`. It may be more efficient to call `next().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:10:29\n    |\n LL |     let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().chain(vec.iter()).next().cloned()`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------\n+   |                                                         |\n+   |                                                         help: try this: `.next().cloned()`\n \n-error: called `cloned().count()` on an `Iterator`. It may be more efficient to call `count()` instead\n+error: unneeded cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:12:20\n    |\n LL |     let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").count()`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------\n+   |                                                    |\n+   |                                                    help: try this: `.count()`\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n-error: called `cloned().take(...)` on an `Iterator`. It may be more efficient to call `take(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:14:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().take(2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().take(2).cloned()`\n+   |                     ^^^^^^^^^^-----------------\n+   |                               |\n+   |                               help: try this: `.take(2).cloned()`\n \n-error: called `cloned().skip(...)` on an `Iterator`. It may be more efficient to call `skip(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:16:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().skip(2).cloned()`\n+   |                     ^^^^^^^^^^-----------------\n+   |                               |\n+   |                               help: try this: `.skip(2).cloned()`\n \n-error: called `cloned().nth(...)` on an `Iterator`. It may be more efficient to call `nth(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:18:13\n    |\n LL |     let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").nth(2).cloned()`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------\n+   |                                             |\n+   |                                             help: try this: `.nth(2).cloned()`\n \n-error: called `cloned().flatten()` on an `Iterator`. It may be more efficient to call `flatten().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:20:13\n    |\n LL |       let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n@@ -50,8 +62,8 @@ LL | |         .flatten();\n    |\n help: try this\n    |\n-LL ~     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n-LL ~         .iter().flatten().cloned();\n+LL ~         .iter()\n+LL ~         .flatten().cloned();\n    |\n \n error: aborting due to 7 previous errors"}]}