{"sha": "389329ef1ebde8f4f09545310a10866c9107a90d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTMyOWVmMWViZGU4ZjRmMDk1NDUzMTBhMTA4NjZjOTEwN2E5MGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T00:13:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T00:14:00Z"}, "message": "Merge all 3 log syntaxes, tidy up residual misuses.", "tree": {"sha": "404c40b5027941ec2306dc289ecd4152f259391c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404c40b5027941ec2306dc289ecd4152f259391c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389329ef1ebde8f4f09545310a10866c9107a90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389329ef1ebde8f4f09545310a10866c9107a90d", "html_url": "https://github.com/rust-lang/rust/commit/389329ef1ebde8f4f09545310a10866c9107a90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389329ef1ebde8f4f09545310a10866c9107a90d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f816d8c71cf36f9165183608339052dfb198f3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f816d8c71cf36f9165183608339052dfb198f3bd", "html_url": "https://github.com/rust-lang/rust/commit/f816d8c71cf36f9165183608339052dfb198f3bd"}], "stats": {"total": 250, "additions": 117, "deletions": 133}, "files": [{"sha": "d7eaa083bfbd5e40f8bc989334c3aaf8f7c0751f", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -117,8 +117,8 @@ fn get_rpath_relative_to_output(os: session::os,\n fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n     assert fs::path_is_absolute(abs1);\n     assert fs::path_is_absolute(abs2);\n-    log #fmt(\"finding relative path from %s to %s\",\n-             abs1, abs2);\n+    #debug(\"finding relative path from %s to %s\",\n+           abs1, abs2);\n     let normal1 = fs::normalize(abs1);\n     let normal2 = fs::normalize(abs2);\n     let split1 = str::split(normal1, os_fs::path_sep as u8);"}, {"sha": "d67b7bd7cf30b49559e508609f1810affdb0cda9", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -105,8 +105,8 @@ fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n     let start = std::time::precise_time_s();\n     let rv = thunk();\n     let end = std::time::precise_time_s();\n-    log_err #fmt[\"time: %s took %s s\", what,\n-                 float::to_str(end - start, 3u)];\n+    #error(\"time: %s took %s s\", what,\n+           float::to_str(end - start, 3u));\n     ret rv;\n }\n "}, {"sha": "09c7ec8f12b7e461b8fd3402f5e04a1c72e1f81d", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -135,11 +135,11 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n }\n \n fn contains(haystack: [@ast::meta_item], needle: @ast::meta_item) -> bool {\n-    log #fmt[\"looking for %s\",\n-             syntax::print::pprust::meta_item_to_str(*needle)];\n+    #debug(\"looking for %s\",\n+           syntax::print::pprust::meta_item_to_str(*needle));\n     for item: @ast::meta_item in haystack {\n-        log #fmt[\"looking in %s\",\n-                 syntax::print::pprust::meta_item_to_str(*item)];\n+        #debug(\"looking in %s\",\n+               syntax::print::pprust::meta_item_to_str(*item));\n         if eq(item, needle) { #debug(\"found it!\"); ret true; }\n     }\n     #debug(\"found it not :(\");"}, {"sha": "618de096773c2b3215b1abf521737184c5cd9ab2", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -104,8 +104,8 @@ fn metadata_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n     let linkage_metas = attr::find_linkage_metas(attrs);\n \n-    log #fmt[\"matching %u metadata requirements against %u items\",\n-             vec::len(metas), vec::len(linkage_metas)];\n+    #debug(\"matching %u metadata requirements against %u items\",\n+           vec::len(metas), vec::len(linkage_metas));\n \n     #debug(\"crate metadata:\");\n     for have: @ast::meta_item in linkage_metas {\n@@ -178,8 +178,8 @@ fn find_library_crate_aux(sess: session::session,\n         #debug(\"inspecting file %s\", path);\n         let f: str = fs::basename(path);\n         if !(str::starts_with(f, prefix) && str::ends_with(f, suffix)) {\n-            log #fmt[\"skipping %s, doesn't look like %s*%s\", path, prefix,\n-                     suffix];\n+            #debug(\"skipping %s, doesn't look like %s*%s\", path, prefix,\n+                   suffix);\n             option::none\n         } else {\n             #debug(\"%s is a candidate\", path);"}, {"sha": "dabd3811cd55ebdf222c30b8aac546d41fbe9c7c", "filename": "src/comp/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -37,8 +37,8 @@ fn resolve_path(cstore: cstore::cstore, cnum: ast::crate_num,\n                 path: [ast::ident]) ->\n     [(ast::crate_num, @[u8], ast::def_id)] {\n     let cm = cstore::get_crate_data(cstore, cnum);\n-    log #fmt(\"resolve_path %s in crates[%d]:%s\",\n-             str::connect(path, \"::\"), cnum, cm.name);\n+    #debug(\"resolve_path %s in crates[%d]:%s\",\n+           str::connect(path, \"::\"), cnum, cm.name);\n     let result = [];\n     for def in decoder::resolve_path(path, cm.data) {\n         if def.crate == ast::local_crate {"}, {"sha": "2b6fe006a2abfd18d030e3c09028bc4f49781777", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -1393,9 +1393,8 @@ fn lookup_external(e: env, cnum: int, ids: [ident], ns: namespace) ->\n                 let cname = cstore::get_crate_data(e.cstore, did.crate).name;\n                 let name =\n                     csearch::get_item_name(e.cstore, did.crate, did.node);\n-                log #fmt(\"lookup_external: %s %d, %d, %s, %s\", cname,\n-                         did.crate, did.node,\n-                         str::connect(ids, \"::\"), name);\n+                #debug(\"lookup_external: %s %d, %d, %s, %s\", cname,\n+                       did.crate, did.node, str::connect(ids, \"::\"), name);\n                 e.ext_map.insert(did, vec::init(ids) + [name]);\n             } else {\n                 e.ext_map.insert(did, ids);"}, {"sha": "2cd126be54d0df84a23ff66b577bb57dfd01d5fd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -205,8 +205,6 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n         T_opaque_closure(cx)\n       }\n       _ {\n-        log_err (\"type_of_inner not implemented for \",\n-                ty::struct(cx.tcx, t));\n         fail \"type_of_inner not implemented for this kind of type\";\n       }\n     };\n@@ -1759,8 +1757,8 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n             alt ti.take_glue {\n               some(_) { }\n               none. {\n-                log #fmt[\"+++ lazily_emit_tydesc_glue TAKE %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"+++ lazily_emit_tydesc_glue TAKE %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n                 let lcx = cx.fcx.lcx;\n                 let glue_fn =\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(lcx.ccx),\n@@ -1769,16 +1767,16 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n                 make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n                                   make_take_glue,\n                                   ti.ty_params, \"take\");\n-                log #fmt[\"--- lazily_emit_tydesc_glue TAKE %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"--- lazily_emit_tydesc_glue TAKE %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n               }\n             }\n         } else if field == abi::tydesc_field_drop_glue {\n             alt ti.drop_glue {\n               some(_) { }\n               none. {\n-                log #fmt[\"+++ lazily_emit_tydesc_glue DROP %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"+++ lazily_emit_tydesc_glue DROP %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n                 let lcx = cx.fcx.lcx;\n                 let glue_fn =\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(lcx.ccx),\n@@ -1787,16 +1785,16 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n                 make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n                                   make_drop_glue,\n                                   ti.ty_params, \"drop\");\n-                log #fmt[\"--- lazily_emit_tydesc_glue DROP %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"--- lazily_emit_tydesc_glue DROP %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n               }\n             }\n         } else if field == abi::tydesc_field_free_glue {\n             alt ti.free_glue {\n               some(_) { }\n               none. {\n-                log #fmt[\"+++ lazily_emit_tydesc_glue FREE %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"+++ lazily_emit_tydesc_glue FREE %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n                 let lcx = cx.fcx.lcx;\n                 let glue_fn =\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(lcx.ccx),\n@@ -1805,19 +1803,19 @@ fn lazily_emit_tydesc_glue(cx: @block_ctxt, field: int,\n                 make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n                                   make_free_glue,\n                                   ti.ty_params, \"free\");\n-                log #fmt[\"--- lazily_emit_tydesc_glue FREE %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"--- lazily_emit_tydesc_glue FREE %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n               }\n             }\n         } else if field == abi::tydesc_field_cmp_glue {\n             alt ti.cmp_glue {\n               some(_) { }\n               none. {\n-                log #fmt[\"+++ lazily_emit_tydesc_glue CMP %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"+++ lazily_emit_tydesc_glue CMP %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n                 ti.cmp_glue = some(bcx_ccx(cx).upcalls.cmp_type);\n-                log #fmt[\"--- lazily_emit_tydesc_glue CMP %s\",\n-                         ty_to_str(bcx_tcx(cx), ti.ty)];\n+                #debug(\"--- lazily_emit_tydesc_glue CMP %s\",\n+                       ty_to_str(bcx_tcx(cx), ti.ty));\n               }\n             }\n         }"}, {"sha": "2269469648a2521991a6f8cdff40e878b044ba56", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -547,8 +547,8 @@ fn constraints(fcx: fn_ctxt) -> [norm_constraint] {\n // should freeze it at some earlier point.\n fn match_args(fcx: fn_ctxt, occs: @mutable [pred_args],\n               occ: [@constr_arg_use]) -> uint {\n-    log \"match_args: looking at \" +\n-            constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, occ);\n+    #debug(\"match_args: looking at %s\",\n+           constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, occ));\n     for pd: pred_args in *occs {\n         log_full(core::debug,\n                  \"match_args: candidate \" + pred_args_to_str(pd));\n@@ -879,9 +879,9 @@ fn forget_in_postcond(fcx: fn_ctxt, parent_exp: node_id, dead_v: node_id) {\n       some(d_id) {\n         for c: norm_constraint in constraints(fcx) {\n             if constraint_mentions(fcx, c, d_id) {\n-                log (\"clearing constraint \",\n-                     c.bit_num,\n-                     constraint_to_str(fcx.ccx.tcx, c.c));\n+                #debug(\"clearing constraint %u %s\",\n+                       c.bit_num,\n+                       constraint_to_str(fcx.ccx.tcx, c.c));\n                 clear_in_postcond(c.bit_num,\n                                   node_id_to_ts_ann(fcx.ccx,\n                                                     parent_exp).conditions);"}, {"sha": "ce6be98b124f15238e2c66db6531163a3125c21d", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -71,11 +71,11 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n     let pres: prestate = ann_prestate(a);\n \n \n-    log(\"check_states_stmt:\");\n+    #debug(\"check_states_stmt:\");\n     log_full(core::debug, print::pprust::stmt_to_str(*s));\n-    log(\"prec = \");\n+    #debug(\"prec = \");\n     log_tritv(fcx, prec);\n-    log(\"pres = \");\n+    #debug(\"pres = \");\n     log_tritv(fcx, pres);\n \n     if !implies(pres, prec) {"}, {"sha": "c5756b7f9962040c49421f4ece004855d6c2ec31", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -154,8 +154,7 @@ fn mk_fn_info(ccx: crate_ctxt,\n          i_diverge: ninit(diverges_id, diverges_name),\n          used_vars: v};\n     ccx.fm.insert(id, rslt);\n-    log name + \" has \" + uint::str(num_constraints(rslt)) +\n-            \" constraints\";\n+    #debug(\"%s has %u constraints\", name, num_constraints(rslt));\n }\n \n "}, {"sha": "c11f9ef656811101cc9a6c445f0bee6429024865", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -1502,9 +1502,9 @@ fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n \n     let fty = ty_of_fn_decl(tcx, m_check_tyvar(fcx), decl);\n \n-    log #fmt(\"check_expr_fn_with_unifier %s fty=%s\",\n-             expr_to_str(expr),\n-             ty_to_str(tcx, fty));\n+    #debug(\"check_expr_fn_with_unifier %s fty=%s\",\n+           expr_to_str(expr),\n+           ty_to_str(tcx, fty));\n \n     write::ty_only_fixup(fcx, expr.id, fty);\n \n@@ -1965,9 +1965,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             ast::proto_block\n           }\n         };\n-        log #fmt(\"checking expr_fn_block %s expected=%s\",\n-                 expr_to_str(expr),\n-                 ty_to_str(tcx, expected));\n+        #debug(\"checking expr_fn_block %s expected=%s\",\n+               expr_to_str(expr),\n+               ty_to_str(tcx, expected));\n         check_expr_fn_with_unifier(fcx, expr, {proto: proto with decl}, body,\n                                    unify, expected);\n         write::ty_only_fixup(fcx, id, expected);"}, {"sha": "1b1713aff33dc3f448950dc98a18e5e74c413711", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -30,8 +30,8 @@ fn eval_crate_directives_to_mod(cx: ctx, cdirs: [@ast::crate_directive],\n                                 prefix: str, suffix: option::t<str>)\n     -> (ast::_mod, [ast::attribute]) {\n     #debug(\"eval crate prefix: %s\", prefix);\n-    log #fmt(\"eval crate suffix: %s\",\n-             option::from_maybe(\"none\", suffix));\n+    #debug(\"eval crate suffix: %s\",\n+           option::from_maybe(\"none\", suffix));\n     let (cview_items, citems, cattrs)\n         = parse_companion_mod(cx, prefix, suffix);\n     let view_items: [@ast::view_item] = [];"}, {"sha": "209d56a51d031bc92ce5921591e594722b36c6a4", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -910,22 +910,17 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             hi = e.span.hi;\n             ex = ast::expr_fail(some(e));\n         } else { ex = ast::expr_fail(none); }\n-    } else if eat_word(p, \"log_full\") {\n+    } else if\n+        (eat_word(p, \"log_full\")\n+         || eat_word(p, \"log\")\n+         || eat_word(p, \"log_err\")) {\n         expect(p, token::LPAREN);\n         let lvl = parse_expr(p);\n         expect(p, token::COMMA);\n         let e = parse_expr(p);\n         ex = ast::expr_log(2, lvl, e);\n         hi = p.get_hi_pos();\n         expect(p, token::RPAREN);\n-    } else if eat_word(p, \"log\") {\n-        let e = parse_expr(p);\n-        ex = ast::expr_log(1, mk_lit_u32(p, 1u32), e);\n-        hi = e.span.hi;\n-    } else if eat_word(p, \"log_err\") {\n-        let e = parse_expr(p);\n-        ex = ast::expr_log(0, mk_lit_u32(p, 0u32), e);\n-        hi = e.span.hi;\n     } else if eat_word(p, \"assert\") {\n         let e = parse_expr(p);\n         ex = ast::expr_assert(e);"}, {"sha": "e113817788b9a6daf8d3a9e372cf63944e392537", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -304,11 +304,11 @@ obj printer(out: io::writer,\n         }\n     }\n     fn check_stream() {\n-        log #fmt[\"check_stream [%u, %u] with left_total=%d, right_total=%d\",\n-                 left, right, left_total, right_total];\n+        #debug(\"check_stream [%u, %u] with left_total=%d, right_total=%d\",\n+               left, right, left_total, right_total);\n         if right_total - left_total > space {\n-            log #fmt[\"scan window is %d, longer than space on line (%d)\",\n-                     right_total - left_total, space];\n+            #debug(\"scan window is %d, longer than space on line (%d)\",\n+                   right_total - left_total, space);\n             if !scan_stack_empty {\n                 if left == scan_stack[bottom] {\n                     #debug(\"setting %u to infinity and popping\", left);\n@@ -411,8 +411,8 @@ obj printer(out: io::writer,\n         out.write_str(s);\n     }\n     fn print(x: token, L: int) {\n-        log #fmt[\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n-                 space];\n+        #debug(\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n+               space);\n         log_full(core::debug, buf_str(token, size, left, right, 6u));\n         alt x {\n           BEGIN(b) {"}, {"sha": "2502d552de2ba094ad39e52ae594e7a79d640feb", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -110,8 +110,7 @@ fn parse_name_value_directive(line: str,\n         let value =\n             str::slice(line, colon + str::byte_len(keycolon),\n                        str::byte_len(line));\n-        log #fmt(\"%s: %s\", directive,\n-                  value);\n+        #debug(\"%s: %s\", directive,  value);\n         option::some(value)\n     } else { option::none }\n }"}, {"sha": "4b37dede936bab3fdce4606dff5aa118c2df0806", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -549,10 +549,11 @@ fn check_variants(files: [str], cx: context) {\n             parser::parse_crate_from_source_str(\n                 file,\n                 s, [], sess);\n-        log_err as_str(bind pprust::print_crate(sess.cm, crate,\n-                                                file,\n-                                                io::string_reader(s), _,\n-                                                pprust::no_ann()));\n+        #error(\"%s\",\n+               as_str(bind pprust::print_crate(sess.cm, crate,\n+                                               file,\n+                                               io::string_reader(s), _,\n+                                               pprust::no_ann())));\n         check_variants_of_ast(*crate, sess.cm, file, cx);\n     }\n }"}, {"sha": "3b6a45b90601bd05db2d52f7129e153e5889c6e5", "filename": "src/libstd/map.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -143,17 +143,16 @@ mod chained {\n         while true {\n             alt e0.next {\n               absent. {\n-                log(\"search_tbl\", \"absent\", \"comparisons\", comp,\n-                    \"hash\", h, \"idx\", idx);\n-\n+                #debug(\"search_tbl: absent, comp %u, hash %u, idx %u\",\n+                       comp, h, idx);\n                 ret not_found;\n               }\n               present(e1) {\n                 comp += 1u;\n                 let e1_key = e1.key; // Satisfy alias checker.\n                 if e1.hash == h && tbl.eqer(e1_key, k) {\n-                    log(\"search_tbl\", \"present\", \"comparisons\", comp,\n-                        \"hash\", h, \"idx\", idx);\n+                    #debug(\"search_tbl: present, comp %u, hash %u, idx %u\",\n+                           comp, h, idx);\n                     ret found_after(e0, e1);\n                 } else {\n                     e0 = e1;\n@@ -169,15 +168,15 @@ mod chained {\n         let idx = h % vec::len(tbl.chains);\n         alt tbl.chains[idx] {\n           absent. {\n-            log(\"search_tbl\", \"absent\", \"comparisons\", 0u,\n-                \"hash\", h, \"idx\", idx);\n+            #debug(\"search_tbl: absent, comp %u, hash %u, idx %u\",\n+                   0u, h, idx);\n             ret not_found;\n           }\n           present(e) {\n             let e_key = e.key; // Satisfy alias checker.\n             if e.hash == h && tbl.eqer(e_key, k) {\n-                log(\"search_tbl\", \"present\", \"comparisons\", 1u,\n-                    \"hash\", h, \"idx\", idx);\n+                #debug(\"search_tbl: present, comp %u, hash %u, idx %u\",\n+                       1u, h, idx);\n                 ret found_first(idx, e);\n             } else {\n                 ret search_rem(tbl, k, h, idx, e);"}, {"sha": "8bc16ec5d3ae9de9f56ebc9e7ec9123c47514c0e", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -13,20 +13,20 @@ tag bottle { none; dual; single; multiple(int); }\n fn show(b: bottle) {\n     alt b {\n       none. {\n-        log \"No more bottles of beer on the wall, \" +\n-                \"no more bottles of beer,\";\n-        log \"Go to the store and buy some more, \" +\n-                \"99 bottles of beer on the wall.\";\n+        #debug(\"No more bottles of beer on the wall, \\\n+                no more bottles of beer,\");\n+        #debug(\"Go to the store and buy some more, \\\n+                99 bottles of beer on the wall.\");\n       }\n       single. {\n         #debug(\"1 bottle of beer on the wall, 1 bottle of beer,\");\n-        log \"Take one down and pass it around, \" +\n-                \"no more bottles of beer on the wall.\";\n+        #debug(\"Take one down and pass it around, \\\n+                no more bottles of beer on the wall.\");\n       }\n       dual. {\n         #debug(\"2 bottles of beer on the wall, 2 bottles of beer,\");\n-        log \"Take one down and pass it around, \" +\n-                \"1 bottle of beer on the wall.\";\n+        #debug(\"Take one down and pass it around, \\\n+                1 bottle of beer on the wall.\");\n       }\n       multiple(n) {\n         #debug(\"%d bottles of beer on the wall, %d bottles of beer,\", n, n);"}, {"sha": "f0f1daf331de5e754866acec26b0fd3b9e0c3a77", "filename": "src/test/bench/99bob-tail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2F99bob-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2F99bob-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-tail.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -23,16 +23,16 @@ fn main() {\n     }\n     fn single() {\n         #debug(\"1 bottle of beer on the wall, 1 bottle of beer,\");\n-        log \"Take one down and pass it around, \" +\n-                \"no more bottles of beer on the wall.\";\n+        #debug(\"Take one down and pass it around, \\\n+                no more bottles of beer on the wall.\");\n         #debug(\"\");\n         be none();\n     }\n     fn none() {\n         #debug(\"No more bottles of beer on the wall, \\\n                 no more bottles of beer,\");\n-        log \"Go to the store and buy some more, \" +\n-                \"99 bottles of beer on the wall.\";\n+        #debug(\"Go to the store and buy some more, \\\n+                99 bottles of beer on the wall.\");\n         #debug(\"\");\n     }\n     multiple(99);"}, {"sha": "0454eaaf8692b061a0cdff66f363ba5a34b69505", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -28,8 +28,8 @@ fn main() {\n     } else { max_depth = n; }\n     let stretch_depth = max_depth + 1;\n     let stretch_tree = bottom_up_tree(0, stretch_depth);\n-    log #fmt[\"stretch tree of depth %d\\t check: %d\", stretch_depth,\n-             item_check(stretch_tree)];\n+    #debug(\"stretch tree of depth %d\\t check: %d\", stretch_depth,\n+           item_check(stretch_tree));\n     let long_lived_tree = bottom_up_tree(0, max_depth);\n     let depth = min_depth;\n     while depth <= max_depth {\n@@ -43,10 +43,10 @@ fn main() {\n             chk += item_check(temp_tree);\n             i += 1;\n         }\n-        log #fmt[\"%d\\t trees of depth %d\\t check: %d\", iterations * 2, depth,\n-                 chk];\n+        #debug(\"%d\\t trees of depth %d\\t check: %d\", iterations * 2, depth,\n+               chk);\n         depth += 2;\n     }\n-    log #fmt[\"long lived trees of depth %d\\t check: %d\", max_depth,\n-             item_check(long_lived_tree)];\n+    #debug(\"long lived trees of depth %d\\t check: %d\", max_depth,\n+           item_check(long_lived_tree));\n }"}, {"sha": "83672579130fe6bd3b349e7ba541aa31e21f99c6", "filename": "src/test/compile-fail/import-glob-multiple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -5,14 +5,14 @@ import mod2::*;\n \n mod mod1 {\n     fn f1() { #debug(\"f1\"); }\n-    fn common1() { log \"common\" }\n-    fn common2() { log \"common\" }\n+    fn common1() { #debug(\"common\") }\n+    fn common2() { #debug(\"common\") }\n }\n \n mod mod2 {\n     fn f2() { #debug(\"f1\"); }\n-    fn common1() { log \"common\" }\n-    fn common2() { log \"common\" }\n+    fn common1() { #debug(\"common\") }\n+    fn common2() { #debug(\"common\") }\n }\n \n "}, {"sha": "13ae1bbb7f6dd844a3186084afe31a8b7c8064f2", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -19,5 +19,5 @@ fn main() {\n fn child(c: chan<int>) {\n     #error(\"sending\");\n     send(c, 10);\n-    log_err \"value sent\"\n+    #error(\"value sent\");\n }"}, {"sha": "332ac3586c55e167ae0a57834c2cd79a9bbd44db", "filename": "src/test/run-pass/fn-bare-anon-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let f: fn() = fn () {\n-        log \"This is a bare function\"\n+        #debug(\"This is a bare function\")\n     };\n     let g;\n     g = f;"}, {"sha": "8f97fef2aaaf21f4533a5923e796a8177a725b97", "filename": "src/test/run-pass/fn-bare-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let f: fn() = fn () {\n-        log \"This is a bare function\"\n+        #debug(\"This is a bare function\")\n     };\n     f();\n }\n\\ No newline at end of file"}, {"sha": "d0d5e93bf985512d7de40c8479884267725dde67", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -94,15 +94,13 @@ fn test_growth() {\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm_uu.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n-                uint::to_str(i * i, 10u);\n+        #debug(\"inserting %u -> %u\", i, i*i);\n         i += 1u;\n     }\n     #debug(\"-----\");\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm_uu.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm_uu.get(i));\n         assert (hm_uu.get(i) == i * i);\n         i += 1u;\n     }\n@@ -112,8 +110,7 @@ fn test_growth() {\n     hm_uu.rehash();\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm_uu.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm_uu.get(i));\n         assert (hm_uu.get(i) == i * i);\n         i += 1u;\n     }\n@@ -125,15 +122,17 @@ fn test_growth() {\n     i = 0u;\n     while i < num_to_insert {\n         assert (hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u)));\n-        log \"inserting \\\"\" + uint::to_str(i, 2u) + \"\\\" -> \\\"\" +\n-                uint::to_str(i * i, 2u) + \"\\\"\";\n+        #debug(\"inserting \\\"%s\\\" -> \\\"%s\\\"\",\n+               uint::to_str(i, 2u),\n+               uint::to_str(i*i, 2u));\n         i += 1u;\n     }\n     #debug(\"-----\");\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\\\"\" + uint::to_str(i, 2u) + \"\\\") = \\\"\" +\n-                hm_ss.get(uint::to_str(i, 2u)) + \"\\\"\";\n+        #debug(\"get(\\\"%s\\\") = \\\"%s\\\"\",\n+               uint::to_str(i, 2u),\n+               hm_ss.get(uint::to_str(i, 2u)));\n         assert (str::eq(hm_ss.get(uint::to_str(i, 2u)),\n                         uint::to_str(i * i, 2u)));\n         i += 1u;\n@@ -146,8 +145,9 @@ fn test_growth() {\n     hm_ss.rehash();\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\\\"\" + uint::to_str(i, 2u) + \"\\\") = \\\"\" +\n-                hm_ss.get(uint::to_str(i, 2u)) + \"\\\"\";\n+        #debug(\"get(\\\"%s\\\") = \\\"%s\\\"\",\n+               uint::to_str(i, 2u),\n+               hm_ss.get(uint::to_str(i, 2u)));\n         assert (str::eq(hm_ss.get(uint::to_str(i, 2u)),\n                         uint::to_str(i * i, 2u)));\n         i += 1u;\n@@ -176,8 +176,7 @@ fn test_removal() {\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n-                uint::to_str(i * i, 10u);\n+        #debug(\"inserting %u -> %u\", i, i*i);\n         i += 1u;\n     }\n     assert (hm.size() == num_to_insert);\n@@ -196,8 +195,7 @@ fn test_removal() {\n     #debug(\"-----\");\n     i = 1u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm.get(i));\n         assert (hm.get(i) == i * i);\n         i += 2u;\n     }\n@@ -207,25 +205,22 @@ fn test_removal() {\n     #debug(\"-----\");\n     i = 1u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm.get(i));\n         assert (hm.get(i) == i * i);\n         i += 2u;\n     }\n     #debug(\"-----\");\n     i = 0u;\n     while i < num_to_insert {\n         assert (hm.insert(i, i * i));\n-        log \"inserting \" + uint::to_str(i, 10u) + \" -> \" +\n-                uint::to_str(i * i, 10u);\n+        #debug(\"inserting %u -> %u\", i, i*i);\n         i += 2u;\n     }\n     assert (hm.size() == num_to_insert);\n     #debug(\"-----\");\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm.get(i));\n         assert (hm.get(i) == i * i);\n         i += 1u;\n     }\n@@ -236,8 +231,7 @@ fn test_removal() {\n     assert (hm.size() == num_to_insert);\n     i = 0u;\n     while i < num_to_insert {\n-        log \"get(\" + uint::to_str(i, 10u) + \") = \" +\n-                uint::to_str(hm.get(i), 10u);\n+        #debug(\"get(%u) = %u\", i, hm.get(i));\n         assert (hm.get(i) == i * i);\n         i += 1u;\n     }"}, {"sha": "e0d68d21756a849fb9b179b938804ca2e829f03b", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389329ef1ebde8f4f09545310a10866c9107a90d/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=389329ef1ebde8f4f09545310a10866c9107a90d", "patch": "@@ -40,7 +40,7 @@ fn test_pipes() {\n     assert (expected == actual);\n \n     fn writeclose(fd: fd_t, s: str) {\n-        log_err(\"writeclose\", (fd, s));\n+        #error(\"writeclose %d, %s\", fd as int, s);\n         let writer = io::new_writer(io::fd_buf_writer(fd, option::none));\n         writer.write_str(s);\n "}]}