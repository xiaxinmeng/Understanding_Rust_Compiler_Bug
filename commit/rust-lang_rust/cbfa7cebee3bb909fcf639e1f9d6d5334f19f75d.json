{"sha": "cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d", "node_id": "C_kwDOAAsO6NoAKGNiZmE3Y2ViZWUzYmI5MDlmY2Y2MzllMWY5ZDZkNTMzNGYxOWY3NWQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-19T22:43:18Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-20T14:52:57Z"}, "message": "Move trait_map to Lowering Context", "tree": {"sha": "d3e86b9c921cd147d0473e294c0ee8f2c8a06960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3e86b9c921cd147d0473e294c0ee8f2c8a06960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmISVcsACgkQgTGiTgx5\n76+rHA/9Fec16yDyGrQyG8y9/32Qz42QjYBfcbv1j8bdrgG5iocPYA2I/So9kho/\n9c1yO1y1oXSLjACGGNc9QXNNJ+TdNPhzjRd1Ol2q6F41sMPGAwv084ZTqJF+Z4ve\nD8xapjqz5rqgw7qBK0ieaLDDr4Lg9V+k1bRUevZkYqShZZWebkoqI6oTm6KI1CQp\nFV0SFg2Pup29GyKl9UrCoJkl1O5/c6WPx8xxVqSalxjX4EfHpLv5qbt4lcGa0EBP\nqD9J0iv55Y4shJKRAc8ipZHC7HX7UvBYVqEaJRvJ7+HhPjQMihBnZxuI8J2ZtZD2\nXHnN0ug4ISLh8o4KR5gzzbSU555aEYBXIXd701lMcfJUPYhCJmtnS3dqBjZk09VB\nj8UqSZMCGSD3pfJWXb2mysvcrVrlomkkl/27rMhalGvMBIC29EqAVTTYov4ZvFeh\nk8qVVq9JCZdatQ6oAg3aJ6CvAaZSg+o8cIEbnwiXUcGgkLPiZOWjjUKGDvGEruO4\nCUdrkrPt9XWcwKYWm1huHKhSqyJURwwVX7TOyqoWEqSlhKmrYa7VbLzH/cO2f1Aq\nKaF07BqDv2DNfjvzflJHBuHrolPcEcZOkthwk+pW8H5YxWgXf+mq/DAQpKhkYMjt\nRG6V3h+6WI0WH1VUl3UJsMKUIUmgoRGJcdNNDR2Mg0DK7UwSm84=\n=xboO\n-----END PGP SIGNATURE-----", "payload": "tree d3e86b9c921cd147d0473e294c0ee8f2c8a06960\nparent 7e2dd672da5f63ec1a4c9307bf74858aafe7c033\nauthor Santiago Pastorino <spastorino@gmail.com> 1645310598 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1645368777 -0300\n\nMove trait_map to Lowering Context\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d", "html_url": "https://github.com/rust-lang/rust/commit/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "html_url": "https://github.com/rust-lang/rust/commit/7e2dd672da5f63ec1a4c9307bf74858aafe7c033"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "4254c2d06b224448605bbc351ca5c8b0af887cf6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cbfa7cebee3bb909fcf639e1f9d6d5334f19f75d", "patch": "@@ -54,7 +54,7 @@ use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n-use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName};\n+use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::LintBuffer;\n@@ -156,6 +156,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     current_hir_id_owner: LocalDefId,\n     item_local_id_counter: hir::ItemLocalId,\n     local_id_to_def_id: SortedMap<ItemLocalId, LocalDefId>,\n+    trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,\n \n     /// NodeIds that are lowered inside the current HIR owner.\n     node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,\n@@ -314,6 +315,7 @@ pub fn lower_crate<'a, 'hir>(\n         item_local_id_counter: hir::ItemLocalId::new(0),\n         node_id_to_local_id: FxHashMap::default(),\n         local_id_to_def_id: SortedMap::new(),\n+        trait_map: FxHashMap::default(),\n         generator_kind: None,\n         task_context: None,\n         current_item: None,\n@@ -442,6 +444,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let current_bodies = std::mem::take(&mut self.bodies);\n         let current_node_ids = std::mem::take(&mut self.node_id_to_local_id);\n         let current_id_to_def_id = std::mem::take(&mut self.local_id_to_def_id);\n+        let current_trait_map = std::mem::take(&mut self.trait_map);\n         let current_owner = std::mem::replace(&mut self.current_hir_id_owner, def_id);\n         let current_local_counter =\n             std::mem::replace(&mut self.item_local_id_counter, hir::ItemLocalId::new(1));\n@@ -458,6 +461,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.bodies = current_bodies;\n         self.node_id_to_local_id = current_node_ids;\n         self.local_id_to_def_id = current_id_to_def_id;\n+        self.trait_map = current_trait_map;\n         self.current_hir_id_owner = current_owner;\n         self.item_local_id_counter = current_local_counter;\n \n@@ -470,15 +474,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn make_owner_info(&mut self, node: hir::OwnerNode<'hir>) -> hir::OwnerInfo<'hir> {\n         let attrs = std::mem::take(&mut self.attrs);\n         let mut bodies = std::mem::take(&mut self.bodies);\n-        let node_id_to_local_id = std::mem::take(&mut self.node_id_to_local_id);\n-\n-        let trait_map = node_id_to_local_id\n-            .into_iter()\n-            .filter_map(|(node_id, local_id)| {\n-                let traits = self.resolver.take_trait_map(node_id)?;\n-                Some((local_id, traits.into_boxed_slice()))\n-            })\n-            .collect();\n \n         #[cfg(debug_assertions)]\n         for (id, attrs) in attrs.iter() {\n@@ -508,7 +503,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::AttributeMap { map: attrs, hash }\n         };\n \n-        hir::OwnerInfo { nodes, parenting, attrs, trait_map }\n+        hir::OwnerInfo { nodes, parenting, attrs, trait_map: std::mem::take(&mut self.trait_map) }\n     }\n \n     /// Hash the HIR node twice, one deep and one shallow hash.  This allows to differentiate\n@@ -563,6 +558,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         self.local_id_to_def_id.insert(local_id, def_id);\n                     }\n+\n+                    if let Some(traits) = self.resolver.take_trait_map(ast_node_id) {\n+                        self.trait_map.insert(hir_id.local_id, traits.into_boxed_slice());\n+                    }\n                 }\n \n                 hir_id"}]}