{"sha": "060609cd568454ecbe8565ab699718f13ff71a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDYwOWNkNTY4NDU0ZWNiZTg1NjVhYjY5OTcxOGYxM2ZmNzFhMjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-27T23:57:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-27T23:57:20Z"}, "message": "libcore: Implement Eq for string types", "tree": {"sha": "e5478ef0a0ba40edb759435856d8787f13c76da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5478ef0a0ba40edb759435856d8787f13c76da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060609cd568454ecbe8565ab699718f13ff71a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060609cd568454ecbe8565ab699718f13ff71a26", "html_url": "https://github.com/rust-lang/rust/commit/060609cd568454ecbe8565ab699718f13ff71a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060609cd568454ecbe8565ab699718f13ff71a26/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "381a628c4c49d2cbfabe8a60216809d45e316704", "url": "https://api.github.com/repos/rust-lang/rust/commits/381a628c4c49d2cbfabe8a60216809d45e316704", "html_url": "https://github.com/rust-lang/rust/commit/381a628c4c49d2cbfabe8a60216809d45e316704"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "2ca21383dd5dd57d5a69992408b1671aeedd26ff", "filename": "src/libcore/str.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/060609cd568454ecbe8565ab699718f13ff71a26/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060609cd568454ecbe8565ab699718f13ff71a26/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=060609cd568454ecbe8565ab699718f13ff71a26", "patch": "@@ -7,6 +7,7 @@\n  * some heavy-duty uses, try std::rope.\n  */\n \n+import cmp::Eq;\n import libc::size_t;\n import io::WriterUtil;\n \n@@ -694,6 +695,30 @@ pure fn eq(a: &~str, b: &~str) -> bool {\n /// Bytewise less than or equal\n pure fn le(a: &~str, b: &~str) -> bool { *a <= *b }\n \n+#[cfg(notest)]\n+impl &str: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: &str) -> bool {\n+        eq_slice(self, other)\n+    }\n+}\n+\n+#[cfg(notest)]\n+impl ~str: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: ~str) -> bool {\n+        eq_slice(self, other)\n+    }\n+}\n+\n+#[cfg(notest)]\n+impl @str: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: @str) -> bool {\n+        eq_slice(self, other)\n+    }\n+}\n+\n /// String hash function\n pure fn hash(s: &~str) -> uint {\n     hash::hash_str(*s) as uint"}]}