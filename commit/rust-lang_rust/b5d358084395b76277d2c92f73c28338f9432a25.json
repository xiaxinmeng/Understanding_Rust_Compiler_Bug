{"sha": "b5d358084395b76277d2c92f73c28338f9432a25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDM1ODA4NDM5NWI3NjI3N2QyYzkyZjczYzI4MzM4Zjk0MzJhMjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:24:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:35:00Z"}, "message": "Move the \"HAIR\" code that reads the tcx tables etc out of the `tcx`\nmodule and into `hair/cx`, now that we don't have a trait defining\nthe interface", "tree": {"sha": "89115dee1b0be102a001e9ffd2ed1df7cc9e6680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89115dee1b0be102a001e9ffd2ed1df7cc9e6680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d358084395b76277d2c92f73c28338f9432a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d358084395b76277d2c92f73c28338f9432a25", "html_url": "https://github.com/rust-lang/rust/commit/b5d358084395b76277d2c92f73c28338f9432a25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d358084395b76277d2c92f73c28338f9432a25/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c07b4611815d4d593fba22aaaa975ed97818919", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c07b4611815d4d593fba22aaaa975ed97818919", "html_url": "https://github.com/rust-lang/rust/commit/3c07b4611815d4d593fba22aaaa975ed97818919"}], "stats": {"total": 173, "additions": 94, "deletions": 79}, "files": [{"sha": "56a20167b794271acf6be8455116e46b4ec393dc", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use hair;\n+use hair::cx::{Cx, PatNode};\n use rustc::middle::region::CodeExtent;\n use rustc::middle::ty::{FnOutput, Ty};\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir;\n use repr::*;\n use syntax::ast;\n use syntax::codemap::Span;\n-use tcx::{Cx, PatNode};\n \n struct Builder<'a, 'tcx: 'a> {\n     hir: Cx<'a, 'tcx>,"}, {"sha": "a407c42372a81daefd654f22b4f80acdace6fb0c", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "renamed", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n use hair::*;\n-\n-use tcx::Cx;\n-use tcx::pattern::PatNode;\n-use tcx::to_ref::ToRef;\n+use hair::cx::Cx;\n+use hair::cx::pattern::PatNode;\n+use hair::cx::to_ref::ToRef;\n use rustc::middle::region::{BlockRemainder, CodeExtentData};\n use rustc_front::hir;\n use syntax::ast;\n@@ -34,22 +33,11 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     }\n }\n \n-impl<'tcx> Mirror<'tcx> for &'tcx hir::Stmt {\n-    type Output = Stmt<'tcx>;\n-\n-    fn make_mirror<'a>(self, _cx: &mut Cx<'a, 'tcx>) -> Stmt<'tcx> {\n-        // In order to get the scoping correct, we eagerly mirror\n-        // statements when we translate the enclosing block, so we\n-        // should in fact never get to this point.\n-        panic!(\"statements are eagerly mirrored\");\n-    }\n-}\n-\n-fn mirror_stmts<'a, 'tcx: 'a, STMTS>(cx: &mut Cx<'a, 'tcx>,\n-                                     block_id: ast::NodeId,\n-                                     mut stmts: STMTS)\n-                                     -> Vec<StmtRef<'tcx>>\n-    where STMTS: Iterator<Item = (usize, &'tcx P<hir::Stmt>)>\n+fn mirror_stmts<'a,'tcx:'a,STMTS>(cx: &mut Cx<'a,'tcx>,\n+                                  block_id: ast::NodeId,\n+                                  mut stmts: STMTS)\n+                                  -> Vec<StmtRef<'tcx>>\n+    where STMTS: Iterator<Item=(usize, &'tcx P<hir::Stmt>)>\n {\n     let mut result = vec![];\n     while let Some((index, stmt)) = stmts.next() {", "previous_filename": "src/librustc_mir/tcx/block.rs"}, {"sha": "847d76f7d17a9f18f7259befa2b3f9f6159c79b0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "renamed", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -12,16 +12,16 @@ use hair::*;\n use repr::*;\n use rustc_data_structures::fnv::FnvHashMap;\n use std::rc::Rc;\n-use tcx::Cx;\n-use tcx::block;\n-use tcx::pattern::PatNode;\n-use tcx::to_ref::ToRef;\n+use hair::cx::Cx;\n+use hair::cx::block;\n+use hair::cx::pattern::PatNode;\n+use hair::cx::to_ref::ToRef;\n use rustc::front::map;\n use rustc::middle::const_eval;\n use rustc::middle::def;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::pat_util;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, VariantDef, Ty};\n use rustc_front::hir;\n use rustc_front::util as hir_util;\n use syntax::parse::token;\n@@ -170,11 +170,12 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             hir::ExprStruct(_, ref fields, ref base) => {\n                 match expr_ty.sty {\n                     ty::TyStruct(adt, substs) => {\n+                        let field_refs = field_refs(&adt.variants[0], fields);\n                         ExprKind::Adt {\n                             adt_def: adt,\n                             variant_index: 0,\n                             substs: substs,\n-                            fields: fields.to_ref(),\n+                            fields: field_refs,\n                             base: base.to_ref(),\n                         }\n                     }\n@@ -183,11 +184,12 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             def::DefVariant(enum_id, variant_id, true) => {\n                                 debug_assert!(adt.did == enum_id);\n                                 let index = adt.variant_index_with_id(variant_id);\n+                                let field_refs = field_refs(&adt.variants[index], fields);\n                                 ExprKind::Adt {\n                                     adt_def: adt,\n                                     variant_index: index,\n                                     substs: substs,\n-                                    fields: fields.to_ref(),\n+                                    fields: field_refs,\n                                     base: base.to_ref(),\n                                 }\n                             }\n@@ -238,11 +240,10 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     }\n                 };\n \n-                let field_expr_ref = |s: &'tcx P<hir::Expr>, nm: &str| {\n-                    FieldExprRef {\n-                        name: Field::Named(token::intern(nm)),\n-                        expr: s.to_ref(),\n-                    }\n+                let field_expr_ref = |s: &'tcx P<hir::Expr>, name: &str| {\n+                    let name = token::intern(name);\n+                    let index = adt_def.variants[0].index_of_field_named(name).unwrap();\n+                    FieldExprRef { name: Field::new(index), expr: s.to_ref() }\n                 };\n \n                 let start_field = start.as_ref()\n@@ -293,12 +294,25 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             hir::ExprLoop(ref body, _) =>\n                 ExprKind::Loop { condition: None,\n                                  body: block::to_expr_ref(cx, body) },\n-            hir::ExprField(ref source, name) =>\n-                ExprKind::Field { lhs: source.to_ref(),\n-                                  name: Field::Named(name.node) },\n+            hir::ExprField(ref source, name) => {\n+                let index = match cx.tcx.expr_ty_adjusted(source).sty {\n+                    ty::TyStruct(adt_def, _) =>\n+                        adt_def.variants[0].index_of_field_named(name.node),\n+                    ref ty =>\n+                        cx.tcx.sess.span_bug(\n+                            self.span,\n+                            &format!(\"field of non-struct: {:?}\", ty)),\n+                };\n+                let index = index.unwrap_or_else(|| {\n+                    cx.tcx.sess.span_bug(\n+                        self.span,\n+                        &format!(\"no index found for field `{}`\", name.node));\n+                });\n+                ExprKind::Field { lhs: source.to_ref(), name: Field::new(index) }\n+            }\n             hir::ExprTupField(ref source, index) =>\n                 ExprKind::Field { lhs: source.to_ref(),\n-                                  name: Field::Indexed(index.node) },\n+                                  name: Field::new(index.node as usize) },\n             hir::ExprCast(ref source, _) =>\n                 ExprKind::Cast { source: source.to_ref() },\n             hir::ExprBox(ref value) =>\n@@ -616,7 +630,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             // at this point we have `self.n`, which loads up the upvar\n             let field_kind = ExprKind::Field {\n                 lhs: self_expr.to_ref(),\n-                name: Field::Indexed(index),\n+                name: Field::new(index),\n             };\n \n             // ...but the upvar might be an `&T` or `&mut T` capture, at which\n@@ -814,3 +828,15 @@ fn loop_label<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr) -> Cod\n         }\n     }\n }\n+\n+fn field_refs<'tcx>(variant: VariantDef<'tcx>,\n+                    fields: &'tcx [hir::Field])\n+                    -> Vec<FieldExprRef<'tcx>>\n+{\n+    fields.iter()\n+          .map(|field| FieldExprRef {\n+              name: Field::new(variant.index_of_field_named(field.name.node).unwrap()),\n+              expr: field.expr.to_ref(),\n+          })\n+          .collect()\n+}", "previous_filename": "src/librustc_mir/tcx/expr.rs"}, {"sha": "8d4b05afcb6e6f77b790ad87617a60d7ce040615", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "renamed", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -24,7 +24,7 @@ use rustc::middle::infer::InferCtxt;\n use rustc::middle::subst::{Subst, Substs};\n use rustc::middle::ty::{self, Ty};\n use syntax::codemap::Span;\n-use syntax::parse::token::{self, special_idents};\n+use syntax::parse::token;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'tcx: 'a> {\n@@ -87,18 +87,9 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         adt_def.variants.len()\n     }\n \n-    pub fn fields(&mut self, adt_def: ty::AdtDef<'tcx>, variant_index: usize) -> Vec<Field> {\n-        adt_def.variants[variant_index]\n-            .fields\n-            .iter()\n-            .enumerate()\n-            .map(|(index, field)| {\n-                if field.name == special_idents::unnamed_field.name {\n-                    Field::Indexed(index)\n-                } else {\n-                    Field::Named(field.name)\n-                }\n-            })\n+    pub fn all_fields(&mut self, adt_def: ty::AdtDef<'tcx>, variant_index: usize) -> Vec<Field> {\n+        (0..adt_def.variants[variant_index].fields.len())\n+            .map(Field::new)\n             .collect()\n     }\n ", "previous_filename": "src/librustc_mir/tcx/mod.rs"}, {"sha": "31dbffa0ae348a336d91e97f9fb806d303417a7c", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "renamed", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n use hair::*;\n+use hair::cx::Cx;\n+use hair::cx::to_ref::ToRef;\n use repr::*;\n-\n use rustc_data_structures::fnv::FnvHashMap;\n use std::rc::Rc;\n-use tcx::Cx;\n-use tcx::to_ref::ToRef;\n use rustc::middle::const_eval;\n use rustc::middle::def;\n use rustc::middle::pat_util::{pat_is_resolved_const, pat_is_binding};\n@@ -223,7 +222,7 @@ impl<'tcx> Mirror<'tcx> for PatNode<'tcx> {\n                     subpatterns.iter()\n                                .enumerate()\n                                .map(|(i, subpattern)| FieldPatternRef {\n-                                   field: Field::Indexed(i),\n+                                   field: Field::new(i),\n                                    pattern: self.pat_ref(subpattern),\n                                })\n                                .collect();\n@@ -273,21 +272,43 @@ impl<'tcx> Mirror<'tcx> for PatNode<'tcx> {\n                                    .flat_map(|v| v.iter())\n                                    .enumerate()\n                                    .map(|(i, field)| FieldPatternRef {\n-                                       field: Field::Indexed(i),\n+                                       field: Field::new(i),\n                                        pattern: self.pat_ref(field),\n                                    })\n                                    .collect();\n                 self.variant_or_leaf(cx, subpatterns)\n             }\n \n             hir::PatStruct(_, ref fields, _) => {\n+                let pat_ty = cx.tcx.node_id_to_type(self.pat.id);\n+                let adt_def = match pat_ty.sty {\n+                    ty::TyStruct(adt_def, _) | ty::TyEnum(adt_def, _) => adt_def,\n+                    _ => {\n+                        cx.tcx.sess.span_bug(\n+                            self.pat.span,\n+                            \"struct pattern not applied to struct or enum\");\n+                    }\n+                };\n+\n+                let def = cx.tcx.def_map.borrow().get(&self.pat.id).unwrap().full_def();\n+                let variant_def = adt_def.variant_of_def(def);\n+\n                 let subpatterns =\n                     fields.iter()\n-                          .map(|field| FieldPatternRef {\n-                              field: Field::Named(field.node.name),\n-                              pattern: self.pat_ref(&field.node.pat),\n+                          .map(|field| {\n+                              let index = variant_def.index_of_field_named(field.node.name);\n+                              let index = index.unwrap_or_else(|| {\n+                                  cx.tcx.sess.span_bug(\n+                                      self.pat.span,\n+                                      &format!(\"no field with name {:?}\", field.node.name));\n+                              });\n+                              FieldPatternRef {\n+                                  field: Field::new(index),\n+                                  pattern: self.pat_ref(&field.node.pat),\n+                              }\n                           })\n                           .collect();\n+\n                 self.variant_or_leaf(cx, subpatterns)\n             }\n ", "previous_filename": "src/librustc_mir/tcx/pattern.rs"}, {"sha": "e0b8abfbd9ce3dcc45ed360fc142d591780fdb84", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n use hair::*;\n-use repr::*;\n \n-use tcx::pattern::PatNode;\n+use hair::cx::pattern::PatNode;\n use rustc_front::hir;\n use syntax::ptr::P;\n \n@@ -79,14 +78,3 @@ impl<'a,'tcx:'a,T,U> ToRef for &'tcx Vec<T>\n         self.iter().map(|expr| expr.to_ref()).collect()\n     }\n }\n-\n-impl<'a,'tcx:'a> ToRef for &'tcx hir::Field {\n-    type Output = FieldExprRef<'tcx>;\n-\n-    fn to_ref(self) -> FieldExprRef<'tcx> {\n-        FieldExprRef {\n-            name: Field::Named(self.name.node),\n-            expr: self.expr.to_ref(),\n-        }\n-    }\n-}", "previous_filename": "src/librustc_mir/tcx/to_ref.rs"}, {"sha": "becaa19974d8e216dea9f5ec837bad3c1a6d35ab", "filename": "src/librustc_mir/hair/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -22,7 +22,9 @@ use rustc::middle::ty::{AdtDef, ClosureSubsts, Region, Ty};\n use rustc_front::hir;\n use syntax::ast;\n use syntax::codemap::Span;\n-use tcx::{Cx, PatNode};\n+use self::cx::{Cx, PatNode};\n+\n+pub mod cx;\n \n #[derive(Clone, Debug)]\n pub struct ItemRef<'tcx> {\n@@ -41,7 +43,6 @@ pub struct Block<'tcx> {\n \n #[derive(Clone, Debug)]\n pub enum StmtRef<'tcx> {\n-    Hair(&'tcx hir::Stmt),\n     Mirror(Box<Stmt<'tcx>>),\n }\n \n@@ -392,9 +393,8 @@ impl<'tcx> Mirror<'tcx> for Stmt<'tcx> {\n impl<'tcx> Mirror<'tcx> for StmtRef<'tcx> {\n     type Output = Stmt<'tcx>;\n \n-    fn make_mirror<'a>(self, hir: &mut Cx<'a, 'tcx>) -> Stmt<'tcx> {\n+    fn make_mirror<'a>(self, _: &mut Cx<'a,'tcx>) -> Stmt<'tcx> {\n         match self {\n-            StmtRef::Hair(h) => h.make_mirror(hir),\n             StmtRef::Mirror(m) => *m,\n         }\n     }", "previous_filename": "src/librustc_mir/hair.rs"}, {"sha": "215f708cadd0cb6c2b17560f991745c32cc33c7e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -31,7 +31,8 @@ extern crate syntax;\n \n pub mod build;\n pub mod mir_map;\n-pub mod hair;\n+mod hair;\n pub mod repr;\n mod graphviz;\n-mod tcx;\n+\n+"}, {"sha": "ebcb1db1151eed8e8670b3432f58aa51423b1c59", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d358084395b76277d2c92f73c28338f9432a25/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=b5d358084395b76277d2c92f73c28338f9432a25", "patch": "@@ -23,8 +23,8 @@ extern crate rustc_front;\n use build;\n use dot;\n use repr::Mir;\n+use hair::cx::{PatNode, Cx};\n use std::fs::File;\n-use tcx::{PatNode, Cx};\n \n use self::rustc::middle::infer;\n use self::rustc::middle::region::CodeExtentData;"}]}