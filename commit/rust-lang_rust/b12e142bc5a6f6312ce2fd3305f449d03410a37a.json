{"sha": "b12e142bc5a6f6312ce2fd3305f449d03410a37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmUxNDJiYzVhNmY2MzEyY2UyZmQzMzA1ZjQ0OWQwMzQxMGEzN2E=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2019-11-05T18:27:42Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2019-11-05T18:27:42Z"}, "message": "alloc: Add new_zeroed() versions like new_uninit().\n\nMaybeUninit has both uninit() and zeroed(), it seems reasonable to have the same\nsurface on Box/Rc/Arc.\n\nNeeds tests.", "tree": {"sha": "cec02ddb1e77c3a4b0a3f33b89fc6f7637638179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec02ddb1e77c3a4b0a3f33b89fc6f7637638179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12e142bc5a6f6312ce2fd3305f449d03410a37a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE53alAzPAxlP8it4A4RUtCZTkv4oFAl3Bv1wACgkQ4RUtCZTk\nv4pFGA//YDGn2CE0FbmuZUohivptisRo5di2uHJNsONOhgUsP3YQQmidFJ7bhIIC\nPkc1GKNKgpySWtLicCeZTevPkvAtCVV4dvn28Fnh6f4lGO0zPw+L29i2vnYw4gcB\n9UYOQ5ayooQs5M5Iey9rq89FjHeLoeLmOyc0hEqAAIvtGcLKzBWMDdNtNMYJPZoB\nvrYLWuRC5rg4XeFd/i/NDGyIIC0ahraqMhDv9SR/bgOqgp6wPMyPQtQGRMOil7bN\nR+2r31VRiEDn1DiIYh4dGLTMNxrbWxb8DK+RPA96GVMJ9p3IP798X7CPwNNS7UDc\nKx66mrzaCBlUqFgEOnR3mXm9BluU5oi2A2eiM/R/ApHOtdkXxVwt9zojvHaGNpNs\nw64V7Bjcq1aDfAqP8pxHnJOMli/ym2DNKT/woWV2PJz9Wh1DdiT839vPBTzsBkTd\njBihP5NEPVYEjae1wJWr++3I5JJT8PkZ7vYZgtAp2rbR61cTqmSBa+xHg6DcnMjo\nmkPwVdYuGNX+dG7SV3bmVOCU+tA3PJq7E/W6lqpqiHEXCsj11rLPmaZaOZc+NRT0\n4dNWELAwferYEQpX3dAxFc63mMc+0q+GRDKiYny9+C1DmD3SfsR1VyBZOfzafpHa\nT1DiYuJHefcpNu2ut+GHm8FE45cuaPDG3uqgalO5qUev5v4i4H8=\n=lqw8\n-----END PGP SIGNATURE-----", "payload": "tree cec02ddb1e77c3a4b0a3f33b89fc6f7637638179\nparent 3a1b3b30c6cdd674049b144a3ced7b711de962b2\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1572978462 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1572978462 +0100\n\nalloc: Add new_zeroed() versions like new_uninit().\n\nMaybeUninit has both uninit() and zeroed(), it seems reasonable to have the same\nsurface on Box/Rc/Arc.\n\nNeeds tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12e142bc5a6f6312ce2fd3305f449d03410a37a", "html_url": "https://github.com/rust-lang/rust/commit/b12e142bc5a6f6312ce2fd3305f449d03410a37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12e142bc5a6f6312ce2fd3305f449d03410a37a/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1b3b30c6cdd674049b144a3ced7b711de962b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1b3b30c6cdd674049b144a3ced7b711de962b2", "html_url": "https://github.com/rust-lang/rust/commit/3a1b3b30c6cdd674049b144a3ced7b711de962b2"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "51ad3a04e87fe6b7791ce14af0ff204f094b864b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b12e142bc5a6f6312ce2fd3305f449d03410a37a", "patch": "@@ -152,6 +152,33 @@ impl<T> Box<T> {\n         Box(ptr.cast().into())\n     }\n \n+    /// Constructs a new `Box` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let zero = Box::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(uninit.as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n     /// `x` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "b25f2ef98e256970882309fd9a9608118710dfbe", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b12e142bc5a6f6312ce2fd3305f449d03410a37a", "patch": "@@ -361,6 +361,35 @@ impl<T> Rc<T> {\n         }\n     }\n \n+    /// Constructs a new `Rc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and\n+    /// incorrect usage of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let zero = Rc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Rc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n     /// `value` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "8153e63e8f53745b2918cba2ee5a85db563af168", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12e142bc5a6f6312ce2fd3305f449d03410a37a/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b12e142bc5a6f6312ce2fd3305f449d03410a37a", "patch": "@@ -341,6 +341,35 @@ impl<T> Arc<T> {\n         }\n     }\n \n+    /// Constructs a new `Arc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let zero = Arc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Arc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n     /// `data` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}]}