{"sha": "d286fe0b8d33175cf89c1bc92717bc3bff857420", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODZmZTBiOGQzMzE3NWNmODljMWJjOTI3MTdiYzNiZmY4NTc0MjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T21:30:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T23:41:04Z"}, "message": "builtin_attrs.rs: organize!", "tree": {"sha": "3a6646b7abe09e96e7fff018871cae2fa9ef4480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6646b7abe09e96e7fff018871cae2fa9ef4480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d286fe0b8d33175cf89c1bc92717bc3bff857420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d286fe0b8d33175cf89c1bc92717bc3bff857420", "html_url": "https://github.com/rust-lang/rust/commit/d286fe0b8d33175cf89c1bc92717bc3bff857420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d286fe0b8d33175cf89c1bc92717bc3bff857420/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584388c4aac430fbf41114d94b9c6debfe191e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/584388c4aac430fbf41114d94b9c6debfe191e62", "html_url": "https://github.com/rust-lang/rust/commit/584388c4aac430fbf41114d94b9c6debfe191e62"}], "stats": {"total": 500, "additions": 259, "deletions": 241}, "files": [{"sha": "293e63c4c16dbdc32aae528227bb2f074b8b196b", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 259, "deletions": 241, "changes": 500, "blob_url": "https://github.com/rust-lang/rust/blob/d286fe0b8d33175cf89c1bc92717bc3bff857420/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286fe0b8d33175cf89c1bc92717bc3bff857420/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=d286fe0b8d33175cf89c1bc92717bc3bff857420", "patch": "@@ -158,184 +158,215 @@ macro_rules! rustc_attr {\n     };\n }\n \n+macro_rules! experimental {\n+    ($attr:ident) => {\n+        concat!(\"the `#[\", stringify!($attr), \"]` attribute is an experimental feature\")\n+    }\n+}\n+\n+const IMPL_DETAIL: &str = \"internal implementation detail\";\n+const INTERAL_UNSTABLE: &str = \"this is an internal attribute that will never be stable\";\n+\n pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n \n /// Attributes that have a special meaning to rustc or rustdoc\n pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n-    // Normal attributes\n+    // ==========================================================================\n+    // Stable attributes:\n+    // ==========================================================================\n+\n+    // Condtional compilation:\n+    ungated!(cfg, Normal, template!(List: \"predicate\")),\n+    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n \n+    // Testing:\n+    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(\n+        should_panic, Normal,\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+    ),\n+    // FIXME(Centril): This can be used on stable but shouldn't.\n+    ungated!(reexport_test_harness_main, Normal, template!(NameValueStr: \"name\")),\n+\n+    // Macros:\n+    ungated!(derive, Normal, template!(List: \"Trait1, Trait2, ...\")),\n+    ungated!(automatically_derived, Normal, template!(Word)),\n+    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n+    ungated!(macro_escape, Normal, template!(Word)), // Deprecated synonym for `macro_use`.\n+    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n+    ungated!(proc_macro, Normal, template!(Word)),\n+    ungated!(\n+        proc_macro_derive, Normal,\n+        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+    ),\n+    ungated!(proc_macro_attribute, Normal, template!(Word)),\n+\n+    // Lints:\n     ungated!(warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(must_use, Whitelisted, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(\n+        deprecated, Normal,\n+        template!(\n+            Word,\n+            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n+            NameValueStr: \"reason\"\n+        ),\n+    ),\n \n-    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n-    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n-    ungated!(plugin_registrar, Normal, template!(Word)),\n+    // Crate properties:\n+    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n+    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n+    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n \n-    ungated!(cfg, Normal, template!(List: \"predicate\")),\n-    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n+    // ABI, linking, symbols, and FFI\n+    ungated!(\n+        link, Whitelisted,\n+        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\"\"#),\n+    ),\n+    ungated!(link_name, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(no_link, Normal, template!(Word)),\n+    ungated!(repr, Normal, template!(List: \"C, packed, ...\")),\n+    ungated!(export_name, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(link_section, Whitelisted, template!(NameValueStr: \"name\")),\n+    ungated!(no_mangle, Whitelisted, template!(Word)),\n+    ungated!(used, Whitelisted, template!(Word)),\n+\n+    // Limits:\n+    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+\n+    // Entry point:\n     ungated!(main, Normal, template!(Word)),\n     ungated!(start, Normal, template!(Word)),\n-    ungated!(repr, Normal, template!(List: \"C, packed, ...\")),\n+    ungated!(no_start, CrateLevel, template!(Word)),\n+    ungated!(no_main, CrateLevel, template!(Word)),\n+\n+    // Modules, prelude, and resolution:\n     ungated!(path, Normal, template!(NameValueStr: \"file\")),\n-    ungated!(automatically_derived, Normal, template!(Word)),\n-    ungated!(no_mangle, Whitelisted, template!(Word)),\n-    ungated!(no_link, Normal, template!(Word)),\n-    ungated!(derive, Normal, template!(List: \"Trait1, Trait2, ...\")),\n-    ungated!(\n-        should_panic, Normal,\n-        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n-    ),\n-    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(no_std, CrateLevel, template!(Word)),\n     ungated!(no_implicit_prelude, Normal, template!(Word)),\n-    ungated!(reexport_test_harness_main, Normal, template!(NameValueStr: \"name\")),\n+\n+    // Runtime\n+    ungated!(windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\")),\n+    ungated!(panic_handler, Normal, template!(Word)), // RFC 2070\n+\n+    // Code generation:\n+    ungated!(inline, Whitelisted, template!(Word, List: \"always|never\")),\n+    ungated!(cold, Whitelisted, template!(Word)),\n+    ungated!(no_builtins, Whitelisted, template!(Word)),\n+    ungated!(target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#)),\n+\n+    // FIXME: #14408 whitelist docs since rustdoc looks at them\n+    ungated!(doc, Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n+\n+    // ==========================================================================\n+    // Unstable attributes:\n+    // ==========================================================================\n+\n+    // Linking:\n+    gated!(naked, Whitelisted, template!(Word), naked_functions, experimental!(naked)),\n     gated!(\n         link_args, Normal, template!(NameValueStr: \"args\"),\n         \"the `link_args` attribute is experimental and not portable across platforms, \\\n         it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n     ),\n-    ungated!(macro_escape, Normal, template!(Word)),\n \n-    // RFC #1445.\n+    // Plugins:\n+    ungated!(plugin_registrar, Normal, template!(Word)),\n     gated!(\n-        structural_match, Whitelisted, template!(Word),\n-        \"the semantics of constant patterns is not yet settled\",\n+        plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        \"compiler plugins are experimental and possibly buggy\",\n     ),\n \n-    // RFC #2008\n+    // Testing:\n+    gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n     gated!(\n-        non_exhaustive, Whitelisted, template!(Word),\n-        \"non exhaustive is an experimental feature\",\n+        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n+        \"custom test frameworks are an unstable feature\",\n     ),\n \n+    // RFC #2008\n+    gated!(non_exhaustive, Whitelisted, template!(Word), experimental!(non_exhaustive)),\n     // RFC #1268\n+    gated!(marker, Normal, template!(Word), marker_trait_attr, experimental!(marker)),\n     gated!(\n-        marker, Normal, template!(Word), marker_trait_attr,\n-        \"marker traits is an experimental feature\",\n+        thread_local, Whitelisted, template!(Word),\n+        \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n     ),\n-\n+    gated!(no_core, CrateLevel, template!(Word), experimental!(no_core)),\n+    // RFC 2412\n     gated!(\n-        plugin, CrateLevel, template!(List: \"name|name(args)\"),\n-        \"compiler plugins are experimental and possibly buggy\",\n+        optimize, Whitelisted, template!(List: \"size|speed\"), optimize_attribute,\n+        experimental!(optimize),\n     ),\n \n-    ungated!(no_std, CrateLevel, template!(Word)),\n-    gated!(no_core, CrateLevel, template!(Word), \"no_core is experimental\"),\n-    gated!(\n-        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n-        \"language items are subject to change\",\n+    gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n+\n+    // ==========================================================================\n+    // Internal attributes: Stability, deprecation, and unsafe:\n+    // ==========================================================================\n+\n+    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n+    // FIXME: #14407 these are only looked at on-demand so we can't\n+    // guarantee they'll have already been checked\n+    ungated!(\n+        rustc_deprecated, Whitelisted,\n+        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n+    ),\n+    ungated!(stable, Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n+    ungated!(\n+        unstable, Whitelisted,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n     ),\n     gated!(\n-        linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n-        \"the `linkage` attribute is experimental and not portable across platforms\",\n+        rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n+        \"the `#[rustc_const_unstable]` attribute is an internal feature\",\n     ),\n     gated!(\n-        thread_local, Whitelisted, template!(Word),\n-        \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n+        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+        EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n     ),\n+    gated!(allow_internal_unsafe, Normal, template!(Word), EXPLAIN_ALLOW_INTERNAL_UNSAFE),\n+\n+    // ==========================================================================\n+    // Internal attributes: Type system related:\n+    // ==========================================================================\n \n+    gated!(fundamental, Whitelisted, template!(Word), experimental!(fundamental)),\n     gated!(\n-        rustc_on_unimplemented, Whitelisted,\n-        template!(\n-            List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n-            NameValueStr: \"message\"\n-        ),\n-        on_unimplemented,\n-        \"the `#[rustc_on_unimplemented]` attribute is an experimental feature\",\n+        // RFC #1445.\n+        structural_match, Whitelisted, template!(Word),\n+        \"the semantics of constant patterns is not yet settled\",\n     ),\n     gated!(\n-        rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n-        \"the `#[rustc_const_unstable]` attribute is an internal feature\",\n+        may_dangle, Normal, template!(Word), dropck_eyepatch,\n+        \"`may_dangle` has unstable semantics and may be removed in the future\",\n     ),\n+\n+    // ==========================================================================\n+    // Internal attributes: Runtime related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_allocator, Whitelisted, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_nounwind, Whitelisted, template!(Word), IMPL_DETAIL),\n+    gated!(alloc_error_handler, Normal, template!(Word), experimental!(alloc_error_handler)),\n     gated!(\n         default_lib_allocator, Whitelisted, template!(Word), allocator_internals,\n-        \"the `#[default_lib_allocator]` attribute is an experimental feature\",\n+        experimental!(default_lib_allocator),\n     ),\n     gated!(\n         needs_allocator, Normal, template!(Word), allocator_internals,\n-        \"the `#[needs_allocator]` attribute is an experimental feature\",\n+        experimental!(needs_allocator),\n     ),\n+    gated!(panic_runtime, Whitelisted, template!(Word), experimental!(panic_runtime)),\n+    gated!(needs_panic_runtime, Whitelisted, template!(Word), experimental!(needs_panic_runtime)),\n     gated!(\n-        panic_runtime, Whitelisted, template!(Word),\n-        \"the `#[panic_runtime]` attribute is an experimental feature\",\n-    ),\n-    gated!(\n-        needs_panic_runtime, Whitelisted, template!(Word),\n-        \"the `#[needs_panic_runtime]` attribute is an experimental feature\",\n-    ),\n-    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n-    rustc_attr!(\n-        rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n-        \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n-    ),\n-    rustc_attr!(\n-        rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n-        \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n-    ),\n-    rustc_attr!(\n-        rustc_nonnull_optimization_guaranteed, Whitelisted, template!(Word),\n-        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n-    ),\n-    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_error, Whitelisted, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_user_substs, Whitelisted, template!(Word)),\n-    rustc_attr!(TEST, rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\")),\n-    rustc_attr!(TEST, rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\")),\n-    rustc_attr!(\n-        TEST, rustc_dirty, Whitelisted,\n-        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n-    ),\n-    rustc_attr!(\n-        TEST, rustc_clean, Whitelisted,\n-        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n-    ),\n-    rustc_attr!(\n-        TEST, rustc_partition_reused, Whitelisted,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-    ),\n-    rustc_attr!(\n-        TEST, rustc_partition_codegened, Whitelisted,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-    ),\n-    rustc_attr!(\n-        TEST, rustc_expected_cgu_reuse, Whitelisted,\n-        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n-    ),\n-    rustc_attr!(TEST, rustc_synthetic, Whitelisted, template!(Word)),\n-    rustc_attr!(\n-        rustc_symbol_name, Whitelisted, template!(Word),\n-        \"internal rustc attributes will never be stable\",\n-    ),\n-    rustc_attr!(\n-        rustc_def_path, Whitelisted, template!(Word),\n-        \"internal rustc attributes will never be stable\",\n-    ),\n-    rustc_attr!(TEST, rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\")),\n-    rustc_attr!(\n-        rustc_inherit_overflow_checks, Whitelisted, template!(Word),\n-        \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n-        overflow checking behavior of several libcore functions that are inlined \\\n-        across crates and will never be stable\",\n-    ),\n-    rustc_attr!(TEST, rustc_dump_program_clauses, Whitelisted, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_env_program_clauses, Whitelisted, template!(Word)),\n-    rustc_attr!(TEST, rustc_object_lifetime_default, Whitelisted, template!(Word)),\n-    rustc_attr!(\n-        rustc_test_marker, Normal, template!(Word),\n-        \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n-    ),\n-    rustc_attr!(\n-        rustc_macro_transparency, Whitelisted,\n-        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n-        \"used internally for testing macro hygiene\",\n+        unwind, Whitelisted, template!(List: \"allowed|aborts\"), unwind_attributes,\n+        experimental!(unwind),\n     ),\n-\n     gated!(\n         compiler_builtins, Whitelisted, template!(Word),\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n@@ -352,62 +383,80 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         which contains the profiler runtime and will never be stable\",\n     ),\n \n+    // ==========================================================================\n+    // Internal attributes, Linkage:\n+    // ==========================================================================\n+\n     gated!(\n-        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n-        EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n+        linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n+        \"the `linkage` attribute is experimental and not portable across platforms\",\n     ),\n-    gated!(allow_internal_unsafe, Normal, template!(Word), EXPLAIN_ALLOW_INTERNAL_UNSAFE),\n+    rustc_attr!(rustc_std_internal_symbol, Whitelisted, template!(Word), INTERAL_UNSTABLE),\n \n-    gated!(\n-        fundamental, Whitelisted, template!(Word),\n-        \"the `#[fundamental]` attribute is an experimental feature\",\n+    // ==========================================================================\n+    // Internal attributes, Macro related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_builtin_macro, Whitelisted, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_macro_transparency, Whitelisted,\n+        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n+        \"used internally for testing macro hygiene\",\n     ),\n \n-    ungated!(\n-        proc_macro_derive, Normal,\n-        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+    // ==========================================================================\n+    // Internal attributes, Diagnostics related:\n+    // ==========================================================================\n+\n+    gated!(\n+        rustc_on_unimplemented, Whitelisted,\n+        template!(\n+            List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n+            NameValueStr: \"message\"\n+        ),\n+        on_unimplemented,\n+        experimental!(rustc_on_unimplemented),\n     ),\n+    // Whitelists \"identity-like\" conversion methods to suggest on type mismatch.\n+    rustc_attr!(rustc_conversion_suggestion, Whitelisted, template!(Word), INTERAL_UNSTABLE),\n+\n+    // ==========================================================================\n+    // Internal attributes, Const related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_promotable, Whitelisted, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_allow_const_fn_ptr, Whitelisted, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_args_required_const, Whitelisted, template!(List: \"N\"), INTERAL_UNSTABLE),\n+\n+    // ==========================================================================\n+    // Internal attributes, Layout related:\n+    // ==========================================================================\n \n-    rustc_attr!(rustc_allocator, Whitelisted, template!(Word), \"internal implementation detail\"),\n     rustc_attr!(\n-        rustc_allocator_nounwind, Whitelisted, template!(Word),\n-        \"internal implementation detail\",\n+        rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n     ),\n     rustc_attr!(\n-        rustc_builtin_macro, Whitelisted, template!(Word),\n-        \"internal implementation detail\"\n+        rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n     ),\n-    rustc_attr!(rustc_promotable, Whitelisted, template!(Word), \"internal implementation detail\"),\n     rustc_attr!(\n-        rustc_allow_const_fn_ptr, Whitelisted, template!(Word),\n-        \"internal implementation detail\",\n+        rustc_nonnull_optimization_guaranteed, Whitelisted, template!(Word),\n+        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n     ),\n-    rustc_attr!(rustc_dummy, Normal, template!(Word /* doesn't matter*/), \"used by the test suite\"),\n \n-    // FIXME: #14408 whitelist docs since rustdoc looks at them\n-    ungated!(doc, Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n-\n-    // FIXME: #14406 these are processed in codegen, which happens after the lint pass\n+    // ==========================================================================\n+    // Internal attributes, Misc:\n+    // ==========================================================================\n \n-    ungated!(cold, Whitelisted, template!(Word)),\n     gated!(\n-        naked, Whitelisted, template!(Word), naked_functions,\n-        \"the `#[naked]` attribute is an experimental feature\",\n-    ),\n-    gated!(\n-        ffi_returns_twice, Whitelisted, template!(Word),\n-        \"the `#[ffi_returns_twice]` attribute is an experimental feature\",\n-    ),\n-    ungated!(target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#)),\n-    ungated!(export_name, Whitelisted, template!(NameValueStr: \"name\")),\n-    ungated!(inline, Whitelisted, template!(Word, List: \"always|never\")),\n-    ungated!(\n-        link, Whitelisted,\n-        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ cfg = \"...\"\"#),\n+        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n+        \"language items are subject to change\",\n     ),\n-    ungated!(link_name, Whitelisted, template!(NameValueStr: \"name\")),\n-    ungated!(link_section, Whitelisted, template!(NameValueStr: \"name\")),\n-    ungated!(no_builtins, Whitelisted, template!(Word)),\n     (\n         sym::no_debug, Whitelisted, template!(Word),\n         Gated(\n@@ -419,99 +468,68 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n     gated!(\n-        omit_gdb_pretty_printer_section, Whitelisted, template!(Word),\n-        \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n-    ),\n-    gated!(\n-        may_dangle, Normal, template!(Word), dropck_eyepatch,\n-        \"`may_dangle` has unstable semantics and may be removed in the future\",\n-    ),\n-    gated!(\n-        unwind, Whitelisted, template!(List: \"allowed|aborts\"), unwind_attributes,\n-        \"`#[unwind]` is experimental\",\n-    ),\n-    ungated!(used, Whitelisted, template!(Word)),\n-\n-    // Used in resolve:\n-    gated!(\n+        // Used in resolve:\n         prelude_import, Whitelisted, template!(Word),\n         \"`#[prelude_import]` is for use by rustc only\",\n     ),\n-\n-    // FIXME: #14407 these are only looked at on-demand so we can't\n-    // guarantee they'll have already been checked\n-    ungated!(\n-        rustc_deprecated, Whitelisted,\n-        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n-    ),\n-    ungated!(must_use, Whitelisted, template!(Word, NameValueStr: \"reason\")),\n-    ungated!(stable, Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n-    ungated!(\n-        unstable, Whitelisted,\n-        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n-    ),\n-    ungated!(\n-        deprecated, Normal,\n-        template!(\n-            Word,\n-            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n-            NameValueStr: \"reason\"\n-        ),\n-    ),\n-\n     gated!(\n         rustc_paren_sugar, Normal, template!(Word), unboxed_closures,\n         \"unboxed_closures are still evolving\",\n     ),\n+    rustc_attr!(\n+        rustc_inherit_overflow_checks, Whitelisted, template!(Word),\n+        \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n+        overflow checking behavior of several libcore functions that are inlined \\\n+        across crates and will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_test_marker, Normal, template!(Word),\n+        \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n+    ),\n \n-    ungated!(windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\")),\n-\n-    ungated!(proc_macro_attribute, Normal, template!(Word)),\n-    ungated!(proc_macro, Normal, template!(Word)),\n-\n-    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), \"used internally by rustc\"),\n-\n-    gated!(allow_fail, Normal, template!(Word), \"allow_fail attribute is currently unstable\"),\n+    // ==========================================================================\n+    // Internal attributes, Testing:\n+    // ==========================================================================\n \n+    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n+    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_error, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_user_substs, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\")),\n+    rustc_attr!(TEST, rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\")),\n     rustc_attr!(\n-        rustc_std_internal_symbol, Whitelisted, template!(Word),\n-        \"this is an internal attribute that will never be stable\",\n+        TEST, rustc_dirty, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n     ),\n-    // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n     rustc_attr!(\n-        rustc_conversion_suggestion, Whitelisted, template!(Word),\n-        \"this is an internal attribute that will never be stable\",\n+        TEST, rustc_clean, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n     ),\n     rustc_attr!(\n-        rustc_args_required_const, Whitelisted, template!(List: \"N\"),\n-        \"this is an internal attribute that will never be stable\",\n+        TEST, rustc_partition_reused, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n     ),\n-\n-    // RFC 2070\n-    ungated!(panic_handler, Normal, template!(Word)),\n-    gated!(\n-        alloc_error_handler, Normal, template!(Word),\n-        \"`#[alloc_error_handler]` is an unstable feature\",\n+    rustc_attr!(\n+        TEST, rustc_partition_codegened, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n     ),\n-\n-    // RFC 2412\n-    gated!(\n-        optimize, Whitelisted, template!(List: \"size|speed\"), optimize_attribute,\n-        \"`#[optimize]` attribute is an unstable feature\",\n+    rustc_attr!(\n+        TEST, rustc_expected_cgu_reuse, Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n     ),\n-\n-    // Crate level attributes\n-    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n-    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n-    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n-    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n-    ungated!(no_start, CrateLevel, template!(Word)),\n-    ungated!(no_main, CrateLevel, template!(Word)),\n-    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n-    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    rustc_attr!(TEST, rustc_synthetic, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_symbol_name, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_def_path, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\")),\n+    rustc_attr!(TEST, rustc_dump_program_clauses, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_env_program_clauses, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_object_lifetime_default, Whitelisted, template!(Word)),\n+    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n     gated!(\n-        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n-        \"custom test frameworks are an unstable feature\",\n+        omit_gdb_pretty_printer_section, Whitelisted, template!(Word),\n+        \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n     ),\n ];\n "}]}