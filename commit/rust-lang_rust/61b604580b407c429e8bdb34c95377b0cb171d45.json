{"sha": "61b604580b407c429e8bdb34c95377b0cb171d45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYjYwNDU4MGI0MDdjNDI5ZThiZGIzNGM5NTM3N2IwY2IxNzFkNDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-01T19:10:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-01T19:13:00Z"}, "message": "Fix alignment of interior pointers of dynamic-size types. Closes #1112\n\nGEP_tup_like finds interior pointers by creating a tuple of all the types\npreceding the element it wants a pointer to, then asks for the size of that\ntuple. This results in incorrect pointers when the alignment of that tuple\nis not the alignment of the interior type you're getting a pointer to.", "tree": {"sha": "24344d46fe9f023b87248251baa95be17796a839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24344d46fe9f023b87248251baa95be17796a839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b604580b407c429e8bdb34c95377b0cb171d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b604580b407c429e8bdb34c95377b0cb171d45", "html_url": "https://github.com/rust-lang/rust/commit/61b604580b407c429e8bdb34c95377b0cb171d45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b604580b407c429e8bdb34c95377b0cb171d45/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11999351e0f59d0dcf2ed3b2cf661dcc2e4f0edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/11999351e0f59d0dcf2ed3b2cf661dcc2e4f0edd", "html_url": "https://github.com/rust-lang/rust/commit/11999351e0f59d0dcf2ed3b2cf661dcc2e4f0edd"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "fdd1a4a93f61b09079a143336299e91b6b740882", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61b604580b407c429e8bdb34c95377b0cb171d45/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b604580b407c429e8bdb34c95377b0cb171d45/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=61b604580b407c429e8bdb34c95377b0cb171d45", "patch": "@@ -408,11 +408,20 @@ fn llalign_of(t: TypeRef) -> ValueRef {\n }\n \n fn size_of(cx: @block_ctxt, t: ty::t) -> result {\n+    size_of_(cx, t, align_total)\n+}\n+\n+tag align_mode {\n+    align_total;\n+    align_next(ty::t);\n+}\n+\n+fn size_of_(cx: @block_ctxt, t: ty::t, mode: align_mode) -> result {\n     let ccx = bcx_ccx(cx);\n     if check type_has_static_size(ccx, t) {\n         let sp = cx.sp;\n         rslt(cx, llsize_of(type_of(ccx, sp, t)))\n-    } else { dynamic_size_of(cx, t) }\n+    } else { dynamic_size_of(cx, t, mode) }\n }\n \n fn align_of(cx: @block_ctxt, t: ty::t) -> result {\n@@ -524,8 +533,9 @@ fn static_size_of_tag(cx: @crate_ctxt, sp: span, t: ty::t)\n     }\n }\n \n-fn dynamic_size_of(cx: @block_ctxt, t: ty::t) -> result {\n-    fn align_elements(cx: @block_ctxt, elts: [ty::t]) -> result {\n+fn dynamic_size_of(cx: @block_ctxt, t: ty::t, mode: align_mode) -> result {\n+    fn align_elements(cx: @block_ctxt, elts: [ty::t],\n+                      mode: align_mode) -> result {\n         //\n         // C padding rules:\n         //\n@@ -547,7 +557,15 @@ fn dynamic_size_of(cx: @block_ctxt, t: ty::t) -> result {\n             off = Add(bcx, aligned_off, elt_size.val);\n             max_align = umax(bcx, max_align, elt_align.val);\n         }\n-        off = align_to(bcx, off, max_align);\n+        off = alt mode {\n+          align_total. {\n+            align_to(bcx, off, max_align)\n+          }\n+          align_next(t) {\n+            let {bcx, val: align} = align_of(bcx, t);\n+            align_to(bcx, off, align)\n+          }\n+        };\n         ret rslt(bcx, off);\n     }\n     alt ty::struct(bcx_tcx(cx), t) {\n@@ -558,12 +576,12 @@ fn dynamic_size_of(cx: @block_ctxt, t: ty::t) -> result {\n       ty::ty_rec(flds) {\n         let tys: [ty::t] = [];\n         for f: ty::field in flds { tys += [f.mt.ty]; }\n-        ret align_elements(cx, tys);\n+        ret align_elements(cx, tys, mode);\n       }\n       ty::ty_tup(elts) {\n         let tys = [];\n         for tp in elts { tys += [tp]; }\n-        ret align_elements(cx, tys);\n+        ret align_elements(cx, tys, mode);\n       }\n       ty::ty_tag(tid, tps) {\n         let bcx = cx;\n@@ -581,7 +599,7 @@ fn dynamic_size_of(cx: @block_ctxt, t: ty::t) -> result {\n                 let t = ty::substitute_type_params(bcx_tcx(cx), tps, raw_ty);\n                 tys += [t];\n             }\n-            let rslt = align_elements(bcx, tys);\n+            let rslt = align_elements(bcx, tys, mode);\n             bcx = rslt.bcx;\n             let this_size = rslt.val;\n             let old_max_size = Load(bcx, max_size);\n@@ -738,7 +756,7 @@ fn GEP_tup_like(cx: @block_ctxt, t: ty::t, base: ValueRef, ixs: [int])\n     let prefix_ty = ty::mk_tup(bcx_tcx(cx), args);\n \n     let bcx = cx;\n-    let sz = size_of(bcx, prefix_ty);\n+    let sz = size_of_(bcx, prefix_ty, align_next(s.target));\n     ret rslt(sz.bcx, bump_ptr(sz.bcx, s.target, base, sz.val));\n }\n "}, {"sha": "35d21e40be26c69a3ee4c7560bf3f858b59f8251", "filename": "src/test/run-pass/issue-1112.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/61b604580b407c429e8bdb34c95377b0cb171d45/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b604580b407c429e8bdb34c95377b0cb171d45/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1112.rs?ref=61b604580b407c429e8bdb34c95377b0cb171d45", "patch": "@@ -0,0 +1,37 @@\n+// Issue #1112\n+// Alignment of interior pointers to dynamic-size types\n+\n+use std;\n+import std::ptr::addr_of;\n+\n+type x<T> = {\n+    a: T,\n+    b: u8,\n+    c: bool,\n+    d: u8,\n+    e: u16,\n+    f: u8,\n+    g: u8\n+};\n+\n+fn main() {\n+    let x: x<int> = {\n+        a: 12345678,\n+        b: 9u8,\n+        c: true,\n+        d: 10u8,\n+        e: 11u16,\n+        f: 12u8,\n+        g: 13u8\n+    };\n+    bar(x);\n+}\n+\n+fn bar<T>(x: x<T>) {\n+    assert x.b == 9u8;\n+    assert x.c == true;\n+    assert x.d == 10u8;\n+    assert x.e == 11u16;\n+    assert x.f == 12u8;\n+    assert x.g == 13u8;\n+}\n\\ No newline at end of file"}]}