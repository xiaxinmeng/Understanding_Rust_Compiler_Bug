{"sha": "c77fc06d5218d1e5d757fa82eab130e688924f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3N2ZjMDZkNTIxOGQxZTVkNzU3ZmE4MmVhYjEzMGU2ODg5MjRmNTA=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T00:33:49Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-08T00:33:49Z"}, "message": "Add lint to detect transmutes from float to integer\n\nAdd lint that detects transmutation from a float to an integer\nand suggests usage of `{f32, f64}.to_bits()` instead.", "tree": {"sha": "4cd1aeee0fa40ae27cdd1d8e310e38bec65bb8b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cd1aeee0fa40ae27cdd1d8e310e38bec65bb8b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c77fc06d5218d1e5d757fa82eab130e688924f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c77fc06d5218d1e5d757fa82eab130e688924f50", "html_url": "https://github.com/rust-lang/rust/commit/c77fc06d5218d1e5d757fa82eab130e688924f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c77fc06d5218d1e5d757fa82eab130e688924f50/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b19a1a284186d010cd4f605a0d6fd6fdfc365a", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b19a1a284186d010cd4f605a0d6fd6fdfc365a", "html_url": "https://github.com/rust-lang/rust/commit/61b19a1a284186d010cd4f605a0d6fd6fdfc365a"}], "stats": {"total": 147, "additions": 136, "deletions": 11}, "files": [{"sha": "962f9067a4e4a88e9db91e955b52aa4564e0edcc", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -1214,6 +1214,7 @@ Released 2018-09-13\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n [`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n+[`transmute_float_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float"}, {"sha": "6133fa4c3a57fe27291bd3aebae7f8cdb200ddd5", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 339 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 340 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "736ff30c81a7b3432498eb81e341fd96fe563c0c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -735,6 +735,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n         &transmute::TRANSMUTE_BYTES_TO_STR,\n+        &transmute::TRANSMUTE_FLOAT_TO_INT,\n         &transmute::TRANSMUTE_INT_TO_BOOL,\n         &transmute::TRANSMUTE_INT_TO_CHAR,\n         &transmute::TRANSMUTE_INT_TO_FLOAT,\n@@ -1586,6 +1587,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+        LintId::of(&transmute::TRANSMUTE_FLOAT_TO_INT),\n         LintId::of(&use_self::USE_SELF),\n     ]);\n }"}, {"sha": "3c63ef765fed76053a850f5d0e65a3f9e55eb197", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -190,6 +190,28 @@ declare_clippy_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for transmutes from a float to an integer.\n+    ///\n+    /// **Why is this bad?** Transmutes are dangerous and error-prone, whereas `to_bits` is intuitive\n+    /// and safe.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// unsafe {\n+    ///     let _: u32 = std::mem::transmute(1f32);\n+    /// }\n+    ///\n+    /// // should be:\n+    /// let _: u32 = 1f32.to_bits();\n+    /// ```\n+    pub TRANSMUTE_FLOAT_TO_INT,\n+    nursery,\n+    \"transmutes from a float to an integer\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes from a pointer to a pointer, or\n     /// from a reference to a reference.\n@@ -254,6 +276,7 @@ declare_lint_pass!(Transmute => [\n     TRANSMUTE_BYTES_TO_STR,\n     TRANSMUTE_INT_TO_BOOL,\n     TRANSMUTE_INT_TO_FLOAT,\n+    TRANSMUTE_FLOAT_TO_INT,\n     UNSOUND_COLLECTION_TRANSMUTE,\n ]);\n \n@@ -520,6 +543,50 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             );\n                         },\n                     ),\n+                    (&ty::Float(float_ty), &ty::Int(_)) | (&ty::Float(float_ty), &ty::Uint(_)) => span_lint_and_then(\n+                        cx,\n+                        TRANSMUTE_FLOAT_TO_INT,\n+                        e.span,\n+                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                        |db| {\n+                            let mut expr = &args[0];\n+                            let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n+\n+                            if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+                                expr = &inner_expr;\n+                            }\n+\n+                            if_chain! {\n+                                // if the expression is a float literal and it is unsuffixed then\n+                                // add a suffix so the suggestion is valid and unambiguous\n+                                let op = format!(\"{}{}\", arg, float_ty.name_str()).into();\n+                                if let ExprKind::Lit(lit) = &expr.kind;\n+                                if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n+                                then {\n+                                    match arg {\n+                                        sugg::Sugg::MaybeParen(_) => arg = sugg::Sugg::MaybeParen(op),\n+                                        _ => arg = sugg::Sugg::NonParen(op)\n+                                    }\n+                                }\n+                            }\n+\n+                            arg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", arg.maybe_par()).into());\n+\n+                            // cast the result of `to_bits` if `to_ty` is signed\n+                            arg = if let ty::Int(int_ty) = to_ty.kind {\n+                                arg.as_ty(int_ty.name_str().to_string())\n+                            } else {\n+                                arg\n+                            };\n+\n+                            db.span_suggestion(\n+                                e.span,\n+                                \"consider using\",\n+                                arg.to_string(),\n+                                Applicability::Unspecified,\n+                            );\n+                        },\n+                    ),\n                     (&ty::Adt(ref from_adt, ref from_substs), &ty::Adt(ref to_adt, ref to_substs)) => {\n                         if from_adt.did != to_adt.did ||\n                                 !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {"}, {"sha": "f4ebf6cbd918311fa5520b56e872094d62542392", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 339] = [\n+pub const ALL_LINTS: [Lint; 340] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1953,6 +1953,13 @@ pub const ALL_LINTS: [Lint; 339] = [\n         deprecation: None,\n         module: \"transmute\",\n     },\n+    Lint {\n+        name: \"transmute_float_to_int\",\n+        group: \"nursery\",\n+        desc: \"transmutes from a float to an integer\",\n+        deprecation: None,\n+        module: \"transmute\",\n+    },\n     Lint {\n         name: \"transmute_int_to_bool\",\n         group: \"complexity\","}, {"sha": "75d16f66a87fc19791a7ad7eb1ac2ff60879a9cb", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -126,6 +126,16 @@ fn int_to_float() {\n     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n }\n \n+#[warn(clippy::transmute_float_to_int)]\n+fn float_to_int() {\n+    let _: u32 = unsafe { std::mem::transmute(1f32) };\n+    let _: i32 = unsafe { std::mem::transmute(1f32) };\n+    let _: u64 = unsafe { std::mem::transmute(1f64) };\n+    let _: i64 = unsafe { std::mem::transmute(1f64) };\n+    let _: u64 = unsafe { std::mem::transmute(1.0) };\n+    let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+}\n+\n fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &str = unsafe { std::mem::transmute(b) };\n     let _: &mut str = unsafe { std::mem::transmute(mb) };"}, {"sha": "241e850a2089db44f42abe9b647cc47fc1eaff77", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c77fc06d5218d1e5d757fa82eab130e688924f50/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c77fc06d5218d1e5d757fa82eab130e688924f50/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=c77fc06d5218d1e5d757fa82eab130e688924f50", "patch": "@@ -190,57 +190,95 @@ error: transmute from a `i32` to a `f32`\n LL |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n+error: transmute from a `f32` to a `u32`\n+  --> $DIR/transmute.rs:131:27\n+   |\n+LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n+   |\n+   = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n+\n+error: transmute from a `f32` to a `i32`\n+  --> $DIR/transmute.rs:132:27\n+   |\n+LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute.rs:133:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n+\n+error: transmute from a `f64` to a `i64`\n+  --> $DIR/transmute.rs:134:27\n+   |\n+LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute.rs:135:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute.rs:136:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`\n+\n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:130:28\n+  --> $DIR/transmute.rs:140:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:131:32\n+  --> $DIR/transmute.rs:141:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:163:29\n+  --> $DIR/transmute.rs:173:29\n    |\n LL |         let _: *const f32 = std::mem::transmute(ptr);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n    |\n    = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-  --> $DIR/transmute.rs:164:27\n+  --> $DIR/transmute.rs:174:27\n    |\n LL |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:166:23\n+  --> $DIR/transmute.rs:176:23\n    |\n LL |         let _: &f32 = std::mem::transmute(&1u32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:167:23\n+  --> $DIR/transmute.rs:177:23\n    |\n LL |         let _: &f64 = std::mem::transmute(&1f32);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:170:27\n+  --> $DIR/transmute.rs:180:27\n    |\n LL |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n \n error: transmute from a reference to a reference\n-  --> $DIR/transmute.rs:171:37\n+  --> $DIR/transmute.rs:181:37\n    |\n LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 44 previous errors\n "}]}