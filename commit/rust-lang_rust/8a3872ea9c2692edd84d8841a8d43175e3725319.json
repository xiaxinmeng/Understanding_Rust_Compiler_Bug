{"sha": "8a3872ea9c2692edd84d8841a8d43175e3725319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzg3MmVhOWMyNjkyZWRkODRkODg0MWE4ZDQzMTc1ZTM3MjUzMTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-27T23:45:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:17:23Z"}, "message": "review comments", "tree": {"sha": "f90eb01e54dc64dd5a5222908db40c44de5c3a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f90eb01e54dc64dd5a5222908db40c44de5c3a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3872ea9c2692edd84d8841a8d43175e3725319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3872ea9c2692edd84d8841a8d43175e3725319", "html_url": "https://github.com/rust-lang/rust/commit/8a3872ea9c2692edd84d8841a8d43175e3725319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3872ea9c2692edd84d8841a8d43175e3725319/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1", "html_url": "https://github.com/rust-lang/rust/commit/cfa0b07c8d7e4c63e01549b1b026bb7494a7c4f1"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "67bbc6db49577feb4c8bfefd96983c990a284101", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3872ea9c2692edd84d8841a8d43175e3725319/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3872ea9c2692edd84d8841a8d43175e3725319/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a3872ea9c2692edd84d8841a8d43175e3725319", "patch": "@@ -953,7 +953,12 @@ fn diagnostic_only_typeck_tables_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n ) -> &ty::TypeckTables<'tcx> {\n-    let fallback = move || tcx.types.err;\n+    assert!(def_id.is_local());\n+    let fallback = move || {\n+        let span = tcx.hir().span(tcx.hir().as_local_hir_id(def_id).unwrap());\n+        tcx.sess.delay_span_bug(span, \"diagnostic only typeck table used\");\n+        tcx.types.err\n+    };\n     typeck_tables_of_with_fallback(tcx, def_id, fallback)\n }\n "}, {"sha": "abc0bc21fda08f003b1f87bd935a9e9b711f051c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3872ea9c2692edd84d8841a8d43175e3725319/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3872ea9c2692edd84d8841a8d43175e3725319/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8a3872ea9c2692edd84d8841a8d43175e3725319", "patch": "@@ -177,9 +177,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n         | hir::ItemKind::Enum(_, generics)\n         | hir::ItemKind::Struct(_, generics) => (&generics.params[..], true),\n         hir::ItemKind::TyAlias(_, generics) => (&generics.params[..], false),\n-        // hir::ItemKind::Static(ty, ..) => {\n-        // hir::ItemKind::Fn(..) |\n-        // hir::ItemKind::Const(..) => {} // We handle these elsewhere to suggest appropriate type.\n+        // `static`, `fn` and `const` are handled elsewhere to suggest appropriate type.\n         _ => return,\n     };\n \n@@ -1276,7 +1274,7 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    if is_infer_ty(ty) {\n+                    if is_suggestable_infer_ty(ty) {\n                         Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n                     } else {\n                         None\n@@ -1295,7 +1293,7 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 tcx.mk_fn_def(def_id, substs)\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n-                if is_infer_ty(ty) {\n+                if is_suggestable_infer_ty(ty) {\n                     infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                 } else {\n                     icx.to_ty(ty)\n@@ -1320,7 +1318,7 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         Node::Item(item) => {\n             match item.kind {\n                 ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n-                    if is_infer_ty(ty) {\n+                    if is_suggestable_infer_ty(ty) {\n                         infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                     } else {\n                         icx.to_ty(ty)\n@@ -1792,10 +1790,12 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n-crate fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+/// Whether `ty` is a type with `_` placeholders that can be infered. Used in diagnostics only to\n+/// use inference to provide suggestions for the appropriate type if possible.\n+fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     match &ty.kind {\n         hir::TyKind::Infer => true,\n-        hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_infer_ty(ty),\n+        hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_suggestable_infer_ty(ty),\n         hir::TyKind::Tup(tys)\n             if !tys.is_empty()\n                 && tys.iter().any(|ty| match ty.kind {\n@@ -1811,7 +1811,7 @@ crate fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n \n pub fn get_infer_ret_ty(output: &'hir hir::FunctionRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n     if let hir::FunctionRetTy::Return(ref ty) = output {\n-        if is_infer_ty(ty) {\n+        if is_suggestable_infer_ty(ty) {\n             return Some(&**ty);\n         }\n     }"}]}