{"sha": "52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTk5Y2JjYWFhYzhjZmRkNTRhZDhiMjM3Nzg1YjVlNWNkODRiNDg=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-09-05T07:05:22Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-09-08T00:17:13Z"}, "message": "libnative/io: generic retry() for Unix 64 bit read/write().\n\nWin32/WinSock APIs never call WSASetLastError() with WSAEINTR\nunless a programmer specifically cancels the ongoing blocking call by\na deprecated WinSock1 API WSACancelBlockingCall().\nSo the errno check was simply removed and retry() became an id function\non Windows.\nNote: Windows' equivalent of SIGINT is always handled in a separate thread:\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms682541%28v=vs.85%29.aspx\n\"CTRL+C and CTRL+BREAK Signals\"\n\nAlso, incidentally rename a type parameter and clean up some module imports.", "tree": {"sha": "3cc49eb648b92afe170f8b2ec2e02e105de3b782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc49eb648b92afe170f8b2ec2e02e105de3b782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "html_url": "https://github.com/rust-lang/rust/commit/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b97ab6d2b7de9b69fd97dc171fcf8feec932ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b97ab6d2b7de9b69fd97dc171fcf8feec932ff", "html_url": "https://github.com/rust-lang/rust/commit/67b97ab6d2b7de9b69fd97dc171fcf8feec932ff"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "bc1d877dc547bc24370bb1ba0376334e84c64a7b", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "patch": "@@ -11,12 +11,10 @@\n //! Blocking posix-based file I/O\n \n use alloc::arc::Arc;\n-use libc::{c_int, c_void};\n-use libc;\n+use libc::{mod, c_int, c_void};\n use std::c_str::CString;\n use std::mem;\n-use std::rt::rtio;\n-use std::rt::rtio::IoResult;\n+use std::rt::rtio::{mod, IoResult};\n \n use io::{retry, keep_going};\n use io::util;\n@@ -55,7 +53,7 @@ impl FileDesc {\n         let ret = retry(|| unsafe {\n             libc::read(self.fd(),\n                        buf.as_mut_ptr() as *mut libc::c_void,\n-                       buf.len() as libc::size_t) as libc::c_int\n+                       buf.len() as libc::size_t)\n         });\n         if ret == 0 {\n             Err(util::eof())\n@@ -93,7 +91,7 @@ impl rtio::RtioFileStream for FileDesc {\n         match retry(|| unsafe {\n             libc::pread(self.fd(), buf.as_ptr() as *mut _,\n                         buf.len() as libc::size_t,\n-                        offset as libc::off_t) as libc::c_int\n+                        offset as libc::off_t)\n         }) {\n             -1 => Err(super::last_error()),\n             n => Ok(n as int)\n@@ -103,7 +101,7 @@ impl rtio::RtioFileStream for FileDesc {\n         super::mkerr_libc(retry(|| unsafe {\n             libc::pwrite(self.fd(), buf.as_ptr() as *const _,\n                          buf.len() as libc::size_t, offset as libc::off_t)\n-        } as c_int))\n+        }))\n     }\n     fn seek(&mut self, pos: i64, whence: rtio::SeekStyle) -> IoResult<u64> {\n         let whence = match whence {"}, {"sha": "7881e088388ca44a4bdde284ab9b000eaa1c4653", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "patch": "@@ -23,12 +23,11 @@\n \n #![allow(non_snake_case)]\n \n-use libc::c_int;\n-use libc;\n+use libc::{mod, c_int};\n use std::c_str::CString;\n use std::os;\n-use std::rt::rtio;\n-use std::rt::rtio::{IoResult, IoError};\n+use std::rt::rtio::{mod, IoResult, IoError};\n+use std::num;\n \n // Local re-exports\n pub use self::file::FileDesc;\n@@ -97,8 +96,8 @@ fn last_error() -> IoError {\n }\n \n // unix has nonzero values as errors\n-fn mkerr_libc(ret: libc::c_int) -> IoResult<()> {\n-    if ret != 0 {\n+fn mkerr_libc <Int: num::Zero>(ret: Int) -> IoResult<()> {\n+    if !ret.is_zero() {\n         Err(last_error())\n     } else {\n         Ok(())\n@@ -117,39 +116,33 @@ fn mkerr_winbool(ret: libc::c_int) -> IoResult<()> {\n \n #[cfg(windows)]\n #[inline]\n-fn retry(f: || -> libc::c_int) -> libc::c_int {\n-    loop {\n-        match f() {\n-            -1 if os::errno() as int == libc::WSAEINTR as int => {}\n-            n => return n,\n-        }\n-    }\n-}\n+fn retry<I> (f: || -> I) -> I { f() } // PR rust-lang/rust/#17020\n \n #[cfg(unix)]\n #[inline]\n-fn retry(f: || -> libc::c_int) -> libc::c_int {\n+fn retry<I: PartialEq + num::One + Neg<I>> (f: || -> I) -> I {\n+    let minus_one = -num::one::<I>();\n     loop {\n-        match f() {\n-            -1 if os::errno() as int == libc::EINTR as int => {}\n-            n => return n,\n-        }\n+        let n = f();\n+        if n == minus_one && os::errno() == libc::EINTR as int { }\n+        else { return n }\n     }\n }\n \n+\n fn keep_going(data: &[u8], f: |*const u8, uint| -> i64) -> i64 {\n     let origamt = data.len();\n     let mut data = data.as_ptr();\n     let mut amt = origamt;\n     while amt > 0 {\n-        let ret = retry(|| f(data, amt) as libc::c_int);\n+        let ret = retry(|| f(data, amt));\n         if ret == 0 {\n             break\n         } else if ret != -1 {\n             amt -= ret as uint;\n             data = unsafe { data.offset(ret as int) };\n         } else {\n-            return ret as i64;\n+            return ret;\n         }\n     }\n     return (origamt - amt) as i64;"}, {"sha": "5820323e14bfc586a7f5ada5931ef89d30d34cf0", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=52e99cbcaaac8cfdd54ad8b237785b5e5cd84b48", "patch": "@@ -13,8 +13,7 @@ use libc;\n use std::mem;\n use std::ptr;\n use std::rt::mutex;\n-use std::rt::rtio;\n-use std::rt::rtio::{IoResult, IoError};\n+use std::rt::rtio::{mod, IoResult, IoError};\n use std::sync::atomic;\n \n use super::{retry, keep_going};\n@@ -988,9 +987,7 @@ pub fn write<T>(fd: sock_t,\n                 write(false, inner, len)\n             });\n         } else {\n-            ret = retry(|| {\n-                write(false, buf.as_ptr(), buf.len()) as libc::c_int\n-            }) as i64;\n+            ret = retry(|| { write(false, buf.as_ptr(), buf.len()) });\n             if ret > 0 { written = ret as uint; }\n         }\n     }\n@@ -1017,7 +1014,7 @@ pub fn write<T>(fd: sock_t,\n             let _guard = lock();\n             let ptr = buf.slice_from(written).as_ptr();\n             let len = buf.len() - written;\n-            match retry(|| write(deadline.is_some(), ptr, len) as libc::c_int) {\n+            match retry(|| write(deadline.is_some(), ptr, len)) {\n                 -1 if util::wouldblock() => {}\n                 -1 => return Err(os::last_error()),\n                 n => { written += n as uint; }"}]}