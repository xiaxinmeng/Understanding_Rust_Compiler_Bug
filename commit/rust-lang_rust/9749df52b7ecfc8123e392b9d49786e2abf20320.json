{"sha": "9749df52b7ecfc8123e392b9d49786e2abf20320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NDlkZjUyYjdlY2ZjODEyM2UzOTJiOWQ0OTc4NmUyYWJmMjAzMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-09T19:38:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-09T19:38:50Z"}, "message": "Auto merge of #38244 - estebank:escape-reason-docs, r=ollie27\n\nrustdoc: escape the deprecated and unstable reason text\n\nFix #38220.\nInstead of the [current output](https://doc.rust-lang.org/std/boxed/trait.FnBox.html):\n\n<img width=\"967\" alt=\"incorrect unescaped unstable reason in docs\" src=\"https://cloud.githubusercontent.com/assets/1606434/21021898/73121d42-bd2f-11e6-8076-8a5127dbc010.png\">\n\ndisplay:\n\n<img width=\"979\" alt=\"escaped unstable reason in docs\" src=\"https://cloud.githubusercontent.com/assets/1606434/21021876/52eb0f88-bd2f-11e6-9088-58bdc7d92328.png\">", "tree": {"sha": "3ba44d9ab6fb203deacd82f38e5b72c70384a85a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba44d9ab6fb203deacd82f38e5b72c70384a85a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9749df52b7ecfc8123e392b9d49786e2abf20320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9749df52b7ecfc8123e392b9d49786e2abf20320", "html_url": "https://github.com/rust-lang/rust/commit/9749df52b7ecfc8123e392b9d49786e2abf20320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9749df52b7ecfc8123e392b9d49786e2abf20320/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1472a720243314ac5e659f3d621242eb82f2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1472a720243314ac5e659f3d621242eb82f2de", "html_url": "https://github.com/rust-lang/rust/commit/5c1472a720243314ac5e659f3d621242eb82f2de"}, {"sha": "e766c465d2e4c4e3c106bfa8343cbe6f9192d445", "url": "https://api.github.com/repos/rust-lang/rust/commits/e766c465d2e4c4e3c106bfa8343cbe6f9192d445", "html_url": "https://github.com/rust-lang/rust/commit/e766c465d2e4c4e3c106bfa8343cbe6f9192d445"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "5409ade292360d31e96afed17d8ade6d39c5d0f2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9749df52b7ecfc8123e392b9d49786e2abf20320", "patch": "@@ -587,15 +587,15 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n /// ```\n #[rustc_paren_sugar]\n #[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n+           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n pub trait FnBox<A> {\n     type Output;\n \n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n #[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n+           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n impl<A, F> FnBox<A> for F\n     where F: FnOnce<A>\n {\n@@ -607,7 +607,7 @@ impl<A, F> FnBox<A> for F\n }\n \n #[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n+           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n     type Output = R;\n \n@@ -617,7 +617,7 @@ impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n }\n \n #[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n+           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> {\n     type Output = R;\n "}, {"sha": "f2427008a7d45f830d9b8ac838740fae8633dcc9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9749df52b7ecfc8123e392b9d49786e2abf20320", "patch": "@@ -49,6 +49,8 @@ pub struct Markdown<'a>(pub &'a str);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n pub struct MarkdownWithToc<'a>(pub &'a str);\n+/// A unit struct like `Markdown`, that renders the markdown escaping HTML tags.\n+pub struct MarkdownHtml<'a>(pub &'a str);\n \n const DEF_OUNIT: libc::size_t = 64;\n const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 11;\n@@ -58,6 +60,7 @@ const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n const HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n const HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n const HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n+const HOEDOWN_HTML_ESCAPE: libc::c_uint = 1 << 1;\n \n const HOEDOWN_EXTENSIONS: libc::c_uint =\n     HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n@@ -220,7 +223,11 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n     RefCell::new(None)\n });\n \n-pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n+\n+pub fn render(w: &mut fmt::Formatter,\n+              s: &str,\n+              print_toc: bool,\n+              html_flags: libc::c_uint) -> fmt::Result {\n     extern fn block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer, data: *const hoedown_renderer_data) {\n         unsafe {\n@@ -383,7 +390,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n-        let renderer = hoedown_html_renderer_new(0, 0);\n+        let renderer = hoedown_html_renderer_new(html_flags, 0);\n         let mut opaque = MyOpaque {\n             dfltblk: (*renderer).blockcode.unwrap(),\n             toc_builder: if print_toc {Some(TocBuilder::new())} else {None}\n@@ -553,14 +560,23 @@ impl<'a> fmt::Display for Markdown<'a> {\n         let Markdown(md) = *self;\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        render(fmt, md, false)\n+        render(fmt, md, false, 0)\n     }\n }\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let MarkdownWithToc(md) = *self;\n-        render(fmt, md, true)\n+        render(fmt, md, true, 0)\n+    }\n+}\n+\n+impl<'a> fmt::Display for MarkdownHtml<'a> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let MarkdownHtml(md) = *self;\n+        // This is actually common enough to special-case\n+        if md.is_empty() { return Ok(()) }\n+        render(fmt, md, false, HOEDOWN_HTML_ESCAPE)\n     }\n }\n \n@@ -613,7 +629,7 @@ pub fn plain_summary_line(md: &str) -> String {\n \n #[cfg(test)]\n mod tests {\n-    use super::{LangString, Markdown};\n+    use super::{LangString, Markdown, MarkdownHtml};\n     use super::plain_summary_line;\n     use html::render::reset_ids;\n \n@@ -719,4 +735,15 @@ mod tests {\n         t(\"# top header\", \"top header\");\n         t(\"## header\", \"header\");\n     }\n+\n+    #[test]\n+    fn test_markdown_html_escape() {\n+        fn t(input: &str, expect: &str) {\n+            let output = format!(\"{}\", MarkdownHtml(input));\n+            assert_eq!(output, expect);\n+        }\n+\n+        t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;&#39;a, T&gt;</code></p>\\n\");\n+        t(\"Struct<'a, T>\", \"<p>Struct&lt;&#39;a, T&gt;</p>\\n\");\n+    }\n }"}, {"sha": "5253c1e9b279005f28a18e5e8ba34cacd0aed845", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9749df52b7ecfc8123e392b9d49786e2abf20320/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9749df52b7ecfc8123e392b9d49786e2abf20320", "patch": "@@ -71,7 +71,7 @@ use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n-use html::markdown::{self, Markdown};\n+use html::markdown::{self, Markdown, MarkdownHtml};\n use html::{highlight, layout};\n \n /// A pair of name and its optional document.\n@@ -1866,7 +1866,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Deprecated{}{}\", since, Markdown(&deprecated_reason));\n+            let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&deprecated_reason));\n             stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n         };\n \n@@ -1891,7 +1891,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Unstable{}{}\", unstable_extra, Markdown(&unstable_reason));\n+            let text = format!(\"Unstable{}{}\", unstable_extra, MarkdownHtml(&unstable_reason));\n             stability.push(format!(\"<div class='stab unstable'>{}</div>\", text))\n         };\n     } else if let Some(depr) = item.deprecation.as_ref() {\n@@ -1906,7 +1906,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             String::new()\n         };\n \n-        let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n+        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note));\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n     }\n "}]}