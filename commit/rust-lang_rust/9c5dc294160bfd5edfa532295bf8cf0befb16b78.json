{"sha": "9c5dc294160bfd5edfa532295bf8cf0befb16b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWRjMjk0MTYwYmZkNWVkZmE1MzIyOTViZjhjZjBiZWZiMTZiNzg=", "commit": {"author": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-09-17T21:13:25Z"}, "committer": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-09-17T21:13:25Z"}, "message": "Merge pull request #314 from alobb/configDocumentation\n\nFixed https://github.com/nrc/rustfmt/issues/291", "tree": {"sha": "62a16b6e1498170a23d79ed87bbf641bfe132bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a16b6e1498170a23d79ed87bbf641bfe132bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5dc294160bfd5edfa532295bf8cf0befb16b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5dc294160bfd5edfa532295bf8cf0befb16b78", "html_url": "https://github.com/rust-lang/rust/commit/9c5dc294160bfd5edfa532295bf8cf0befb16b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5dc294160bfd5edfa532295bf8cf0befb16b78/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce64dec90c8f5ae5827864c9370b717c9584102e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce64dec90c8f5ae5827864c9370b717c9584102e", "html_url": "https://github.com/rust-lang/rust/commit/ce64dec90c8f5ae5827864c9370b717c9584102e"}, {"sha": "07f7926bc22bc4e83a696865f2e7bc986e7dbb57", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f7926bc22bc4e83a696865f2e7bc986e7dbb57", "html_url": "https://github.com/rust-lang/rust/commit/07f7926bc22bc4e83a696865f2e7bc986e7dbb57"}], "stats": {"total": 126, "additions": 95, "deletions": 31}, "files": [{"sha": "2bc6e255ac0eb784aecc95f159c429fdacf910ce", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=9c5dc294160bfd5edfa532295bf8cf0befb16b78", "patch": "@@ -85,6 +85,10 @@ fn print_usage<S: Into<String>>(reason: S) {\n     println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] \\\n               <file_name>\",\n              reason.into());\n+\n+    for option in Config::get_docs() {\n+        println!(\"{}, {}, Possible values: {}\", option.option_name(), option.doc_string(), option.variant_names());\n+    }\n }\n \n fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>"}, {"sha": "7ee7d200b8b6b0b3164b65b2d40e41e8e6d5d0e4", "filename": "src/config.rs", "status": "modified", "additions": 80, "deletions": 31, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=9c5dc294160bfd5edfa532295bf8cf0befb16b78", "patch": "@@ -66,7 +66,7 @@ impl MultilineStyle {\n }\n \n macro_rules! create_config {\n-    ($($i:ident: $ty:ty),+ $(,)*) => (\n+    ($($i:ident: $ty:ty, $dstring: tt),+ $(,)*) => (\n         #[derive(RustcDecodable, Clone)]\n         pub struct Config {\n             $(pub $i: $ty),+\n@@ -82,6 +82,44 @@ macro_rules! create_config {\n             $(pub $i: Option<$ty>),+\n         }\n \n+        // This trait and the following impl blocks are there so that we an use\n+        // UCFS inside the get_docs() function on types for configs.\n+        pub trait ConfigType {\n+            fn get_variant_names() -> String;\n+        }\n+\n+        impl ConfigType for bool {\n+            fn get_variant_names() -> String {\n+                String::from(\"<boolean>\")\n+            }\n+        }\n+\n+        impl ConfigType for usize {\n+            fn get_variant_names() -> String {\n+                String::from(\"<unsigned integer>\")\n+            }\n+        }\n+\n+        pub struct ConfigHelpItem {\n+            option_name: &'static str,\n+            doc_string : &'static str,\n+            variant_names: String,\n+        }\n+\n+        impl ConfigHelpItem {\n+            pub fn option_name(&self) -> &'static str {\n+                self.option_name\n+            }\n+\n+            pub fn doc_string(&self) -> &'static str {\n+                self.doc_string\n+            }\n+\n+            pub fn variant_names(&self) -> &String {\n+                &self.variant_names\n+            }\n+        }\n+\n         impl Config {\n \n             fn fill_from_parsed_config(mut self, parsed: &ParsedConfig) -> Config {\n@@ -117,41 +155,52 @@ macro_rules! create_config {\n                     _ => panic!(\"Bad config key!\")\n                 }\n             }\n+\n+            pub fn get_docs() -> Vec<ConfigHelpItem> {\n+                let mut options: Vec<ConfigHelpItem> = Vec::new();\n+                $(\n+                    options.push(ConfigHelpItem {\n+                        option_name: stringify!($i),\n+                        doc_string: stringify!($dstring),\n+                        variant_names: <$ty>::get_variant_names(),\n+                    });\n+                )+\n+                options\n+            }\n         }\n     )\n }\n \n create_config! {\n-    max_width: usize,\n-    ideal_width: usize,\n-    leeway: usize,\n-    tab_spaces: usize,\n-    newline_style: NewlineStyle,\n-    fn_brace_style: BraceStyle,\n-    fn_return_indent: ReturnIndent,\n-    fn_args_paren_newline: bool,\n-    fn_args_density: Density,\n-    fn_args_layout: StructLitStyle,\n-    fn_arg_indent: BlockIndentStyle,\n-    where_density: Density, // Should we at least try to put the where clause on\n-                            // the same line as the rest of the function decl?\n-    where_indent: BlockIndentStyle, // Visual will be treated like Tabbed\n-    where_layout: ListTactic,\n-    where_pred_indent: BlockIndentStyle,\n-    generics_indent: BlockIndentStyle,\n-    struct_trailing_comma: SeparatorTactic,\n-    struct_lit_trailing_comma: SeparatorTactic,\n-    struct_lit_style: StructLitStyle,\n-    struct_lit_multiline_style: MultilineStyle,\n-    enum_trailing_comma: bool,\n-    report_todo: ReportTactic,\n-    report_fixme: ReportTactic,\n-    reorder_imports: bool, // Alphabetically, case sensitive.\n-    single_line_if_else: bool,\n-    format_strings: bool,\n-    chains_overflow_last: bool,\n-    take_source_hints: bool, // Retain some formatting characteristics from\n-                             // the source code.\n+    max_width: usize, \"Maximum width of each line\",\n+    ideal_width: usize, \"Ideal width of each line\",\n+    leeway: usize, \"Leeway of line width\",\n+    tab_spaces: usize, \"Number of spaces per tab\",\n+    newline_style: NewlineStyle, \"Unix or Windows line endings\",\n+    fn_brace_style: BraceStyle, \"Brace style for functions\",\n+    fn_return_indent: ReturnIndent, \"Location of return type in function declaration\",\n+    fn_args_paren_newline: bool, \"If function argument parenthases goes on a newline\",\n+    fn_args_density: Density, \"Argument density in functions\",\n+    fn_args_layout: StructLitStyle, \"Layout of function arguments\",\n+    fn_arg_indent: BlockIndentStyle, \"Indent on function arguments\",\n+    where_density: Density, \"Density of a where clause\", // Should we at least try to put the where clause on the same line as\n+                                                         // the rest of the function decl?\n+    where_indent: BlockIndentStyle, \"Indentation of a where clause\", // Visual will be treated like Tabbed\n+    where_layout: ListTactic, \"Element layout inside a where clause\",\n+    where_pred_indent: BlockIndentStyle, \"Indentation style of a where predicate\",\n+    generics_indent: BlockIndentStyle, \"Indentation of generics\",\n+    struct_trailing_comma: SeparatorTactic, \"If there is a trailing comma on structs\",\n+    struct_lit_trailing_comma: SeparatorTactic, \"If there is a trailing comma on literal structs\",\n+    struct_lit_style: StructLitStyle, \"Style of struct definition\",\n+    struct_lit_multiline_style: MultilineStyle, \"Multilline style on literal structs\",\n+    enum_trailing_comma: bool, \"Put a trailing comma on enum declarations\",\n+    report_todo: ReportTactic, \"Report all occurences of TODO in source file comments\",\n+    report_fixme: ReportTactic, \"Report all occurences of FIXME in source file comments\",\n+    reorder_imports: bool, \"Reorder import statements alphabetically\", // Alphabetically, case sensitive.\n+    single_line_if_else: bool, \"Put else on same line as closing brace for if statements\",\n+    format_strings: bool, \"Format string literals, or leave as is\",\n+    chains_overflow_last: bool, \"Allow last call in method chain to break the line\",\n+    take_source_hints: bool, \"Retain some formatting characteristics from the source code\",\n }\n \n impl Default for Config {"}, {"sha": "42d1151ba38cac79690ca3182418d74d6da70fb0", "filename": "src/utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5dc294160bfd5edfa532295bf8cf0befb16b78/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9c5dc294160bfd5edfa532295bf8cf0befb16b78", "patch": "@@ -161,6 +161,17 @@ macro_rules! impl_enum_decodable {\n                 }\n             }\n         }\n+\n+        impl ::config::ConfigType for $e {\n+            fn get_variant_names() -> String {\n+                let mut variants = Vec::new();\n+                $(\n+                    variants.push(stringify!($x));\n+                )*\n+\n+                variants.join(\", \")\n+            }\n+        }\n     };\n }\n "}]}