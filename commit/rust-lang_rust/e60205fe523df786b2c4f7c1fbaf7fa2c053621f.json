{"sha": "e60205fe523df786b2c4f7c1fbaf7fa2c053621f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MDIwNWZlNTIzZGY3ODZiMmM0ZjdjMWZiYWY3ZmEyYzA1MzYyMWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T00:05:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:18:57Z"}, "message": "move more logic into declare_arena!", "tree": {"sha": "99b9645d5a1989689034d439f0d8e318fb78159a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99b9645d5a1989689034d439f0d8e318fb78159a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60205fe523df786b2c4f7c1fbaf7fa2c053621f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60205fe523df786b2c4f7c1fbaf7fa2c053621f", "html_url": "https://github.com/rust-lang/rust/commit/e60205fe523df786b2c4f7c1fbaf7fa2c053621f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60205fe523df786b2c4f7c1fbaf7fa2c053621f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "093bcf2e7a368e46e9af02cd4d88b1283c79380f", "url": "https://api.github.com/repos/rust-lang/rust/commits/093bcf2e7a368e46e9af02cd4d88b1283c79380f", "html_url": "https://github.com/rust-lang/rust/commit/093bcf2e7a368e46e9af02cd4d88b1283c79380f"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "6805742fe44f9ec269fd155f59b3fd5837379ad8", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e60205fe523df786b2c4f7c1fbaf7fa2c053621f/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60205fe523df786b2c4f7c1fbaf7fa2c053621f/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e60205fe523df786b2c4f7c1fbaf7fa2c053621f", "patch": "@@ -179,6 +179,18 @@ macro_rules! arena_for_type {\n     };\n }\n \n+macro_rules! which_arena_for_type {\n+    ([][$arena:expr]) => {\n+        Some($arena)\n+    };\n+    ([few$(, $attrs:ident)*][$arena:expr]) => {\n+        None\n+    };\n+    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n+        which_arena_for_type!([$($attrs),*]$args)\n+    };\n+}\n+\n macro_rules! declare_arena {\n     ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         #[derive(Default)]\n@@ -188,6 +200,24 @@ macro_rules! declare_arena {\n             $($name: arena_for_type!($a[$ty]),)*\n         }\n \n+        #[marker]\n+        pub trait ArenaAllocatable {}\n+\n+        impl<T: Copy> ArenaAllocatable for T {}\n+\n+        unsafe trait ArenaField<'tcx>: Sized {\n+            /// Returns a specific arena to allocate from.\n+            /// If `None` is returned, the `DropArena` will be used.\n+            fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n+        }\n+\n+        unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n+            #[inline]\n+            default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n+                panic!()\n+            }\n+        }\n+\n         $(\n             impl ArenaAllocatable for $ty {}\n             unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n@@ -197,71 +227,41 @@ macro_rules! declare_arena {\n                 }\n             }\n         )*\n-    }\n-}\n-\n-macro_rules! which_arena_for_type {\n-    ([][$arena:expr]) => {\n-        Some($arena)\n-    };\n-    ([few$(, $attrs:ident)*][$arena:expr]) => {\n-        None\n-    };\n-    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n-        which_arena_for_type!([$($attrs),*]$args)\n-    };\n-}\n-\n-arena_types!(declare_arena, [], 'tcx);\n-\n-#[marker]\n-pub trait ArenaAllocatable {}\n-\n-impl<T: Copy> ArenaAllocatable for T {}\n \n-unsafe trait ArenaField<'tcx>: Sized {\n-    /// Returns a specific arena to allocate from.\n-    /// If `None` is returned, the `DropArena` will be used.\n-    fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n-}\n-\n-unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n-    #[inline]\n-    default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n-        panic!()\n-    }\n-}\n-\n-impl<'tcx> Arena<'tcx> {\n-    #[inline]\n-    pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n-        if !mem::needs_drop::<T>() {\n-            return self.dropless.alloc(value);\n-        }\n-        match <T as ArenaField<'tcx>>::arena(self) {\n-            Some(arena) => arena.alloc(value),\n-            None => unsafe { self.drop.alloc(value) },\n-        }\n-    }\n+        impl<'tcx> Arena<'tcx> {\n+            #[inline]\n+            pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n+                if !mem::needs_drop::<T>() {\n+                    return self.dropless.alloc(value);\n+                }\n+                match <T as ArenaField<'tcx>>::arena(self) {\n+                    Some(arena) => arena.alloc(value),\n+                    None => unsafe { self.drop.alloc(value) },\n+                }\n+            }\n \n-    #[inline]\n-    pub fn alloc_slice<T: Copy>(&self, value: &[T]) -> &mut [T] {\n-        if value.is_empty() {\n-            return &mut [];\n-        }\n-        self.dropless.alloc_slice(value)\n-    }\n+            #[inline]\n+            pub fn alloc_slice<T: Copy>(&self, value: &[T]) -> &mut [T] {\n+                if value.is_empty() {\n+                    return &mut [];\n+                }\n+                self.dropless.alloc_slice(value)\n+            }\n \n-    pub fn alloc_from_iter<T: ArenaAllocatable, I: IntoIterator<Item = T>>(\n-        &'a self,\n-        iter: I,\n-    ) -> &'a mut [T] {\n-        if !mem::needs_drop::<T>() {\n-            return self.dropless.alloc_from_iter(iter);\n-        }\n-        match <T as ArenaField<'tcx>>::arena(self) {\n-            Some(arena) => arena.alloc_from_iter(iter),\n-            None => unsafe { self.drop.alloc_from_iter(iter) },\n+            pub fn alloc_from_iter<T: ArenaAllocatable, I: IntoIterator<Item = T>>(\n+                &'a self,\n+                iter: I,\n+            ) -> &'a mut [T] {\n+                if !mem::needs_drop::<T>() {\n+                    return self.dropless.alloc_from_iter(iter);\n+                }\n+                match <T as ArenaField<'tcx>>::arena(self) {\n+                    Some(arena) => arena.alloc_from_iter(iter),\n+                    None => unsafe { self.drop.alloc_from_iter(iter) },\n+                }\n+            }\n         }\n     }\n }\n+\n+arena_types!(declare_arena, [], 'tcx);"}]}