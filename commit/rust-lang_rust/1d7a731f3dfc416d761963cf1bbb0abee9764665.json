{"sha": "1d7a731f3dfc416d761963cf1bbb0abee9764665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkN2E3MzFmM2RmYzQxNmQ3NjE5NjNjZjFiYmIwYWJlZTk3NjQ2NjU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T14:16:23Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T14:16:23Z"}, "message": "Stabilize AtomicN::fetch_min and AtomicN::fetch_max", "tree": {"sha": "6da2b823a09f0738beb2c40629fd4bfdb378ee25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da2b823a09f0738beb2c40629fd4bfdb378ee25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7a731f3dfc416d761963cf1bbb0abee9764665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a731f3dfc416d761963cf1bbb0abee9764665", "html_url": "https://github.com/rust-lang/rust/commit/1d7a731f3dfc416d761963cf1bbb0abee9764665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a731f3dfc416d761963cf1bbb0abee9764665/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bf05693c2c16e299f1adc279b54c37a8edef27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf05693c2c16e299f1adc279b54c37a8edef27", "html_url": "https://github.com/rust-lang/rust/commit/d4bf05693c2c16e299f1adc279b54c37a8edef27"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "1af287df04ee335bec2b07ceef62949c5dda1a1e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d7a731f3dfc416d761963cf1bbb0abee9764665/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7a731f3dfc416d761963cf1bbb0abee9764665/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=1d7a731f3dfc416d761963cf1bbb0abee9764665", "patch": "@@ -1882,7 +1882,6 @@ using [`Release`] makes the load part [`Relaxed`].\n # Examples\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1893,7 +1892,6 @@ assert_eq!(foo.load(Ordering::SeqCst), 42);\n If you want to obtain the maximum value in one step, you can use the following:\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1902,9 +1900,7 @@ let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n assert!(max_foo == 42);\n ```\"),\n                 #[inline]\n-                #[unstable(feature = \"atomic_min_max\",\n-                       reason = \"easier and faster min/max than writing manual CAS loop\",\n-                       issue = \"48655\")]\n+                #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n                 pub fn fetch_max(&self, val: $int_type, order: Ordering) -> $int_type {\n                     // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1933,7 +1929,6 @@ using [`Release`] makes the load part [`Relaxed`].\n # Examples\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1946,7 +1941,6 @@ assert_eq!(foo.load(Ordering::Relaxed), 22);\n If you want to obtain the minimum value in one step, you can use the following:\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1955,9 +1949,7 @@ let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n assert_eq!(min_foo, 12);\n ```\"),\n                 #[inline]\n-                #[unstable(feature = \"atomic_min_max\",\n-                       reason = \"easier and faster min/max than writing manual CAS loop\",\n-                       issue = \"48655\")]\n+                #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n                 pub fn fetch_min(&self, val: $int_type, order: Ordering) -> $int_type {\n                     // SAFETY: data races are prevented by atomic intrinsics."}]}