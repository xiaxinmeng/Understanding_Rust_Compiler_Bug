{"sha": "2234f61038f5a91fce0d7f4765eec55fc4b0c622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMzRmNjEwMzhmNWE5MWZjZTBkN2Y0NzY1ZWVjNTVmYzRiMGM2MjI=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-25T09:32:02Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:08:23Z"}, "message": "Remove the last traces of shapes", "tree": {"sha": "3da7f831e50df0ea960436e3a360843e9bfa0bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da7f831e50df0ea960436e3a360843e9bfa0bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2234f61038f5a91fce0d7f4765eec55fc4b0c622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2234f61038f5a91fce0d7f4765eec55fc4b0c622", "html_url": "https://github.com/rust-lang/rust/commit/2234f61038f5a91fce0d7f4765eec55fc4b0c622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2234f61038f5a91fce0d7f4765eec55fc4b0c622/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c1b59e8bf59ca32e725ca72f09ebef98928091", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c1b59e8bf59ca32e725ca72f09ebef98928091", "html_url": "https://github.com/rust-lang/rust/commit/87c1b59e8bf59ca32e725ca72f09ebef98928091"}], "stats": {"total": 113, "additions": 22, "deletions": 91}, "files": [{"sha": "ea90f554babc3050becf3937ee4d5e2921bc533f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -55,7 +55,6 @@ use middle::trans::machine::{llalign_of_min, llsize_of};\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::reachable;\n-use middle::trans::shape::*;\n use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::trans::type_of::*;\n@@ -2870,6 +2869,26 @@ pub fn write_metadata(cx: &mut CrateContext, crate: &ast::crate) {\n     }\n }\n \n+fn mk_global(ccx: &CrateContext,\n+             name: &str,\n+             llval: ValueRef,\n+             internal: bool)\n+          -> ValueRef {\n+    unsafe {\n+        let llglobal = do str::as_c_str(name) |buf| {\n+            llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval).to_ref(), buf)\n+        };\n+        llvm::LLVMSetInitializer(llglobal, llval);\n+        llvm::LLVMSetGlobalConstant(llglobal, True);\n+\n+        if internal {\n+            lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n+        }\n+\n+        return llglobal;\n+    }\n+}\n+\n // Writes the current ABI version into the crate.\n pub fn write_abi_version(ccx: &mut CrateContext) {\n     mk_global(ccx, \"rust_abi_version\", C_uint(ccx, abi::abi_version), false);"}, {"sha": "227e22131636baf8e4cc41d312d840b2029f48d2", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -210,7 +210,7 @@ pub fn store_environment(bcx: block,\n     let ccx = bcx.ccx();\n     let tcx = ccx.tcx;\n \n-    // compute the shape of the closure\n+    // compute the type of the closure\n     let cdata_ty = mk_closure_tys(tcx, bound_values);\n \n     // allocate closure in the heap"}, {"sha": "272d7b234aa57f1efe6d6fbf3747e0dd60afe2a3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -658,7 +658,7 @@ impl block_ {\n pub fn tuplify_box_ty(tcx: ty::ctxt, t: ty::t) -> ty::t {\n     let ptr = ty::mk_ptr(\n         tcx,\n-        ty::mt {ty: ty::mk_nil(), mutbl: ast::m_imm}\n+        ty::mt {ty: ty::mk_i8(), mutbl: ast::m_imm}\n     );\n     return ty::mk_tup(tcx, ~[ty::mk_uint(), ty::mk_type(tcx),\n                          ptr, ptr,\n@@ -826,20 +826,6 @@ pub fn C_bytes_plus_null(bytes: &[u8]) -> ValueRef {\n     }\n }\n \n-pub fn C_shape(ccx: &CrateContext, bytes: ~[u8]) -> ValueRef {\n-    unsafe {\n-        let llshape = C_bytes_plus_null(bytes);\n-        let name = fmt!(\"shape%u\", token::gensym(\"shape\"));\n-        let llglobal = do name.as_c_str |buf| {\n-            llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape).to_ref(), buf)\n-        };\n-        llvm::LLVMSetInitializer(llglobal, llshape);\n-        llvm::LLVMSetGlobalConstant(llglobal, True);\n-        lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n-        return llvm::LLVMConstPointerCast(llglobal, Type::i8p().to_ref());\n-    }\n-}\n-\n pub fn get_param(fndecl: ValueRef, param: uint) -> ValueRef {\n     unsafe {\n         llvm::LLVMGetParam(fndecl, param as c_uint)"}, {"sha": "a0ae579c86554d26b399038c54920e5a801991ca", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -22,7 +22,6 @@ use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::debuginfo;\n use middle::trans::reachable;\n-use middle::trans::shape;\n use middle::trans::type_use;\n use middle::ty;\n \n@@ -40,8 +39,6 @@ use middle::trans::common::{mono_id,new_namegen};\n \n use middle::trans::base::{decl_crate_map};\n \n-use middle::trans::shape::{mk_ctxt};\n-\n pub struct CrateContext {\n      sess: session::Session,\n      llmod: ModuleRef,\n@@ -110,7 +107,6 @@ pub struct CrateContext {\n      float_type: Type,\n      opaque_vec_type: Type,\n      builder: BuilderRef_res,\n-     shape_cx: shape::Ctxt,\n      crate_map: ValueRef,\n      // Set when at least one function uses GC. Needed so that\n      // decl_gc_metadata knows whether to link to the module metadata, which\n@@ -223,7 +219,6 @@ impl CrateContext {\n                   float_type: float_type,\n                   opaque_vec_type: opaque_vec_type,\n                   builder: BuilderRef_res(llvm::LLVMCreateBuilderInContext(llcx)),\n-                  shape_cx: mk_ctxt(llmod),\n                   crate_map: crate_map,\n                   uses_gc: false,\n                   dbg_cx: dbg_cx,"}, {"sha": "c2a25d80998a50b2c04003b68027dbff94ae9ea7", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -35,7 +35,6 @@ pub mod cabi_arm;\n pub mod cabi_mips;\n pub mod foreign;\n pub mod reflect;\n-pub mod shape;\n pub mod debuginfo;\n pub mod type_use;\n pub mod reachable;"}, {"sha": "4118291dca0d6875529a60d03a164682138bd793", "filename": "src/librustc/middle/trans/shape.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/87c1b59e8bf59ca32e725ca72f09ebef98928091/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c1b59e8bf59ca32e725ca72f09ebef98928091/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=87c1b59e8bf59ca32e725ca72f09ebef98928091", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// A \"shape\" is a compact encoding of a type that is used by interpreted glue.\n-// This substitutes for the runtime tags used by e.g. MLs.\n-\n-\n-use lib::llvm::llvm;\n-use lib::llvm::{True, ModuleRef, ValueRef};\n-use middle::trans::common::*;\n-\n-use middle::trans::type_::Type;\n-\n-use core::str;\n-\n-pub struct Ctxt {\n-    next_tag_id: u16,\n-    pad: u16,\n-    pad2: u32\n-}\n-\n-pub fn mk_global(ccx: &CrateContext,\n-                 name: &str,\n-                 llval: ValueRef,\n-                 internal: bool)\n-              -> ValueRef {\n-    unsafe {\n-        let llglobal = do str::as_c_str(name) |buf| {\n-            llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval).to_ref(), buf)\n-        };\n-        llvm::LLVMSetInitializer(llglobal, llval);\n-        llvm::LLVMSetGlobalConstant(llglobal, True);\n-\n-        if internal {\n-            ::lib::llvm::SetLinkage(llglobal,\n-                                    ::lib::llvm::InternalLinkage);\n-        }\n-\n-        return llglobal;\n-    }\n-}\n-\n-pub fn mk_ctxt(llmod: ModuleRef) -> Ctxt {\n-    unsafe {\n-        let llshapetablesty = Type::named_struct(\"shapes\");\n-        do \"shapes\".as_c_str |buf| {\n-            llvm::LLVMAddGlobal(llmod, llshapetablesty.to_ref(), buf)\n-        };\n-\n-        Ctxt {\n-            next_tag_id: 0u16,\n-            pad: 0u16,\n-            pad2: 0u32\n-        }\n-    }\n-}"}, {"sha": "34afc12f02e4f9967c640f51808889ed541645c7", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2234f61038f5a91fce0d7f4765eec55fc4b0c622/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=2234f61038f5a91fce0d7f4765eec55fc4b0c622", "patch": "@@ -1,5 +1,3 @@\n-// xfail-fast\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -14,9 +12,6 @@\n // on x86_64: when there is a enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n-extern mod extra;\n-use extra::list;\n-use extra::list::list;\n \n enum opt_span {\n "}]}