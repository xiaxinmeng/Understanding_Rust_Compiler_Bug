{"sha": "551da0615764853153db944063ae2e271414a71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MWRhMDYxNTc2NDg1MzE1M2RiOTQ0MDYzYWUyZTI3MTQxNGE3MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T10:21:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-23T10:21:53Z"}, "message": "auto merge of #12311 : brson/rust/unstable, r=alexcrichton\n\nWith the stability attributes we can put public-but unstable modules next to others, so this moves `intrinsics` and `raw` out of the `unstable` module (and marks both as `#[experimental]`).", "tree": {"sha": "9086a265aa3f85969eb6180566e71a9d991d9e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9086a265aa3f85969eb6180566e71a9d991d9e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/551da0615764853153db944063ae2e271414a71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/551da0615764853153db944063ae2e271414a71b", "html_url": "https://github.com/rust-lang/rust/commit/551da0615764853153db944063ae2e271414a71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/551da0615764853153db944063ae2e271414a71b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c250c16f81f82a21295e421be7bd47c91d64cb2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c250c16f81f82a21295e421be7bd47c91d64cb2a", "html_url": "https://github.com/rust-lang/rust/commit/c250c16f81f82a21295e421be7bd47c91d64cb2a"}, {"sha": "db111846b58253c723750be280a478ed7d27d879", "url": "https://api.github.com/repos/rust-lang/rust/commits/db111846b58253c723750be280a478ed7d27d879", "html_url": "https://github.com/rust-lang/rust/commit/db111846b58253c723750be280a478ed7d27d879"}], "stats": {"total": 242, "additions": 115, "deletions": 127}, "files": [{"sha": "3cf89c3124c39360444c31dd85d1c76a2fff6101", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -37,8 +37,8 @@ use std::num;\n use std::kinds::marker;\n use std::rc::Rc;\n use std::rt::global_heap;\n-use std::unstable::intrinsics::{TyDesc, get_tydesc};\n-use std::unstable::intrinsics;\n+use std::intrinsics::{TyDesc, get_tydesc};\n+use std::intrinsics;\n use std::vec;\n \n // The way arena uses arrays is really deeply awful. The arrays are"}, {"sha": "1d79f3f14c5ae99aee108c7186dfb6f7e5ed592d", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -12,8 +12,8 @@ use std::uint;\n use std::cast::{transmute, transmute_mut_unsafe,\n                 transmute_region, transmute_mut_region};\n use stack::Stack;\n-use std::unstable::stack;\n-use std::unstable::raw;\n+use std::rt::stack;\n+use std::raw;\n \n // FIXME #7761: Registers is boxed so that it is 16-byte aligned, for storing\n // SSE regs.  It would be marginally better not to do this. In C++ we"}, {"sha": "ab106138ae1088bd40bf6c04dfe027f311c45bf5", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -124,7 +124,7 @@ memory and partly incapable of presentation to others.\",\n     abort();\n \n     fn abort() -> ! {\n-        use std::unstable::intrinsics;\n+        use std::intrinsics;\n         unsafe { intrinsics::abort() }\n     }\n }"}, {"sha": "f722744e23d78f5f8570e892093a2ae608b4e796", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -16,7 +16,7 @@ use std::rt::task::BlockedTask;\n use std::rt::task::Task;\n use std::sync::deque;\n use std::unstable::mutex::NativeMutex;\n-use std::unstable::raw;\n+use std::raw;\n \n use TaskState;\n use context::Context;"}, {"sha": "1d7fb64896f5213a6aa3e82822e02e9d143e7a28", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -26,7 +26,7 @@ use std::rt::rtio;\n use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::task::TaskOpts;\n use std::unstable::mutex::NativeMutex;\n-use std::unstable::raw;\n+use std::raw;\n \n use context::Context;\n use coroutine::Coroutine;"}, {"sha": "784d8650689a4d4d0f030794244dbcf75e44d8d1", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -15,7 +15,7 @@ use std::libc;\n use std::mem;\n use std::rt::rtio;\n use std::sync::arc::UnsafeArc;\n-use std::unstable::intrinsics;\n+use std::intrinsics;\n \n use super::{IoResult, retry};\n use super::file::{keep_going, fd_t};"}, {"sha": "e5e9592eb5ab53c4e96aab5c44e58cfc27b05294", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -90,7 +90,7 @@ use std::os::win32::as_utf16_p;\n use std::ptr;\n use std::rt::rtio;\n use std::sync::arc::UnsafeArc;\n-use std::unstable::intrinsics;\n+use std::intrinsics;\n \n use super::IoResult;\n "}, {"sha": "ccfc040e7df32194a15bd455e23f8d9ef607c238", "filename": "src/libnative/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -23,7 +23,7 @@ use std::rt::thread::Thread;\n use std::rt;\n use std::task::TaskOpts;\n use std::unstable::mutex::NativeMutex;\n-use std::unstable::stack;\n+use std::rt::stack;\n \n use io;\n use task;"}, {"sha": "6dec7550fec345adddd28de9059050ef62ba1908", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -22,7 +22,7 @@ use std::libc;\n use std::os;\n use std::run::{ProcessOptions, Process, ProcessOutput};\n use std::str;\n-use std::unstable::raw;\n+use std::raw;\n use extra::tempfile::TempDir;\n use syntax::abi;\n "}, {"sha": "4662742f25cb18b53559892b9c72eb9367b821a5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -32,7 +32,7 @@ use std::io;\n use std::libc;\n use std::mem;\n use std::str;\n-use std::unstable::intrinsics;\n+use std::intrinsics;\n use std::vec;\n \n /// A unit struct which has the `fmt::Show` trait implemented. When"}, {"sha": "06ae20d60bce5c90d3435e4d94d550c05423bdf5", "filename": "src/libstd/any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -25,8 +25,8 @@ use fmt;\n use option::{Option, Some, None};\n use result::{Result, Ok, Err};\n use to_str::ToStr;\n-use unstable::intrinsics::TypeId;\n-use unstable::intrinsics;\n+use intrinsics::TypeId;\n+use intrinsics;\n \n /// A type with no inhabitants\n pub enum Void { }"}, {"sha": "af5d9838186d3e0f55b8f8520bb4d693f75a25fa", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -79,7 +79,7 @@ use str;\n use vec::{ImmutableVector, MutableVector};\n use vec;\n use rt::global_heap::malloc_raw;\n-use unstable::raw::Slice;\n+use raw::Slice;\n \n /// The representation of a C String.\n ///"}, {"sha": "8280553c1a3210347284697590db5cb1e86e0255", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -11,7 +11,7 @@\n //! Unsafe casting functions\n \n use mem;\n-use unstable::intrinsics;\n+use intrinsics;\n use ptr::copy_nonoverlapping_memory;\n \n /// Casts the value at `src` to U. The two types must have the same length.\n@@ -113,7 +113,7 @@ pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {\n #[cfg(test)]\n mod tests {\n     use cast::{bump_box_refcount, transmute};\n-    use unstable::raw;\n+    use raw;\n \n     #[test]\n     fn test_transmute_copy() {"}, {"sha": "39c7932cdc8f2e53a5009db979bcae8f2b149dec", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -11,7 +11,7 @@\n #[doc(hidden)];\n \n use ptr;\n-use unstable::raw;\n+use raw;\n \n static RC_IMMORTAL : uint = 0x77777777;\n "}, {"sha": "b386335a4289b842658febe8fbbab7ac8e1ccd96", "filename": "src/libstd/intrinsics.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -41,9 +41,11 @@ A quick refresher on memory ordering:\n \n */\n \n+#[allow(missing_doc)];\n+\n // This is needed to prevent duplicate lang item definitions.\n #[cfg(test)]\n-pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n+pub use realstd::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n \n pub type GlueFn = extern \"Rust\" fn(*i8);\n ", "previous_filename": "src/libstd/unstable/intrinsics.rs"}, {"sha": "638f7b89469c11955c12fff71634878308e634f0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -194,7 +194,10 @@ pub mod reflect;\n // Private APIs\n #[unstable]\n pub mod unstable;\n-\n+#[experimental]\n+pub mod intrinsics;\n+#[experimental]\n+pub mod raw;\n \n /* For internal use, not exported */\n "}, {"sha": "6b854daabda851d3abc8a207034c54131a1be80b", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -281,7 +281,7 @@ fn get_with<T:'static,\n }\n \n fn abort() -> ! {\n-    use std::unstable::intrinsics;\n+    use intrinsics;\n     unsafe { intrinsics::abort() }\n }\n "}, {"sha": "4cd99492ee45836dd15bd1d85f650b5ee4ed3396", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -15,7 +15,7 @@\n /// Returns the refcount of a shared box (as just before calling this)\n #[inline]\n pub fn refcount<T>(t: @T) -> uint {\n-    use unstable::raw::Repr;\n+    use raw::Repr;\n     unsafe { (*t.repr()).ref_count - 1 }\n }\n "}, {"sha": "603f2b80eea7a28e6375f91ca3e73f38c83e390e", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -17,8 +17,8 @@\n \n use cast;\n use ptr;\n-use unstable::intrinsics;\n-use unstable::intrinsics::{bswap16, bswap32, bswap64};\n+use intrinsics;\n+use intrinsics::{bswap16, bswap32, bswap64};\n \n /// Returns the size of a type in bytes.\n #[inline]"}, {"sha": "7b1fe949199cd69595c3aee9de184491ad9b4ba6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};\n use num;\n use to_str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n macro_rules! delegate(\n     ("}, {"sha": "d5a571cdd23716d3346032798a1d2fa26290e3ff", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@ use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};\n use num;\n use to_str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n pub use cmp::{min, max};\n "}, {"sha": "141626ed98a7548562ff183b340b0c3e07b5dcce", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n int_module!(i16, 16)\n "}, {"sha": "a43a6e6a288cdb2de7a3b66f2c0f5a1d8cdc3e2a", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n int_module!(i32, 32)\n "}, {"sha": "e8503d808a70320ef7f0ce4d7ae52dd237e93e6a", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -22,7 +22,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n int_module!(i64, 64)\n "}, {"sha": "9f857ff40ff508cbf82723fdc34fd8bc1de818dd", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n int_module!(i8, 8)\n "}, {"sha": "6d1a50b724fd267182f9a9e1d62723e24d69196d", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n #[cfg(target_word_size = \"32\")] int_module!(int, 32)\n #[cfg(target_word_size = \"64\")] int_module!(int, 64)"}, {"sha": "da0293b3418649265691af68fc8f080f788db2b9", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n uint_module!(u16, i16, 16)\n "}, {"sha": "b103e18f7019f0a4ad1e8f98d027f3c00cddc419", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n uint_module!(u32, i32, 32)\n "}, {"sha": "f7956f0128e5e76e14a6ce6c3f47132433c59e20", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -23,7 +23,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n uint_module!(u64, i64, 64)\n "}, {"sha": "e6ce9c72e96b2f3de021067d262d409f6e8d7e0e", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n uint_module!(u8, i8, 8)\n "}, {"sha": "a8c85787f7ec852bee7d0440fc104f581ebc0c7f", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@ use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n use str;\n-use unstable::intrinsics;\n+use intrinsics;\n \n uint_module!(uint, int, ::int::BITS)\n "}, {"sha": "86264c1ca5507e9728006bfd4367b8919468fc5f", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -17,7 +17,7 @@ use cmp::Equiv;\n use iter::{range, Iterator};\n use mem;\n use option::{Option, Some, None};\n-use unstable::intrinsics;\n+use intrinsics;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n "}, {"sha": "c7ba2ad393285b998a11a1f2ac356adeedc12760", "filename": "src/libstd/raw.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fraw.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use cast;\n \n /// The representation of a Rust managed box", "previous_filename": "src/libstd/unstable/raw.rs"}, {"sha": "a9e70bd3c6316b9cc47e5991c5da27cada8b8ab5", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -16,9 +16,9 @@ Runtime type reflection\n \n #[allow(missing_doc)];\n \n-use unstable::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n+use intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n use mem;\n-use unstable::raw;\n+use raw;\n \n /**\n  * Trait for visitor that wishes to reflect on data. To use this, create a"}, {"sha": "c1b276899d5a35ecfd0328137539b613b52a1afb", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -29,8 +29,8 @@ use result::{Ok, Err};\n use str::StrSlice;\n use to_str::ToStr;\n use vec::OwnedVector;\n-use unstable::intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n-use unstable::raw;\n+use intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n+use raw;\n \n macro_rules! try( ($me:expr, $e:expr) => (\n     match $e {"}, {"sha": "23b23cf8af024ec85fc4f04de38534a65a451806", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -10,8 +10,8 @@\n \n use libc::{c_void, size_t, free, malloc, realloc};\n use ptr::{RawPtr, mut_null};\n-use unstable::intrinsics::abort;\n-use unstable::raw;\n+use intrinsics::abort;\n+use raw;\n use mem::size_of;\n \n #[inline]"}, {"sha": "29b3dcaa4f29a693e41c44d42e97a001bdb5ed8d", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -20,7 +20,7 @@ use ptr::RawPtr;\n use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n-use unstable::raw;\n+use raw;\n use vec::ImmutableVector;\n use vec_ng::Vec;\n \n@@ -276,6 +276,14 @@ impl Drop for MemoryRegion {\n     }\n }\n \n+\n+#[cfg(not(test))]\n+#[lang=\"malloc\"]\n+#[inline]\n+pub unsafe fn local_malloc_(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n+    local_malloc(drop_glue, size, align)\n+}\n+\n #[inline]\n pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     // FIXME: Unsafe borrow for speed. Lame.\n@@ -288,7 +296,16 @@ pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *\n     }\n }\n \n-// A little compatibility function\n+#[cfg(not(test))]\n+#[lang=\"free\"]\n+#[inline]\n+pub unsafe fn local_free_(ptr: *u8) {\n+    local_free(ptr)\n+}\n+\n+// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n+// inside a landing pad may corrupt the state of the exception handler. If a\n+// problem occurs, call exit instead.\n #[inline]\n pub unsafe fn local_free(ptr: *u8) {\n     // FIXME: Unsafe borrow for speed. Lame."}, {"sha": "2f1a698909298c0f39affedc26dc3dcfc6d44bbb", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -128,6 +128,9 @@ pub mod args;\n // Support for running procedures when a program has exited.\n mod at_exit_imp;\n \n+// Stack overflow protection\n+pub mod stack;\n+\n /// The default error code of the rust runtime if the main task fails instead\n /// of exiting cleanly.\n pub static DEFAULT_ERROR_CODE: int = 101;"}, {"sha": "655c209fec8744605ee5e8c9add72be4f87a7421", "filename": "src/libstd/rt/stack.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -40,7 +40,7 @@ pub extern \"C\" fn rust_stack_exhausted() {\n     use rt::local::Local;\n     use rt::task::Task;\n     use str::Str;\n-    use unstable::intrinsics;\n+    use intrinsics;\n \n     unsafe {\n         // We're calling this function because the stack just ran out. We need", "previous_filename": "src/libstd/unstable/stack.rs"}, {"sha": "7b24c94b5181ef02eb9bcd34c352aa25bb42adf6", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -41,7 +41,7 @@ static DEFAULT_STACK_SIZE: uint = 1024 * 1024;\n // and invoke it.\n #[no_split_stack]\n extern fn thread_start(main: *libc::c_void) -> imp::rust_thread_return {\n-    use unstable::stack;\n+    use rt::stack;\n     unsafe {\n         stack::record_stack_bounds(0, uint::MAX);\n         let f: ~proc() = cast::transmute(main);\n@@ -150,7 +150,7 @@ mod imp {\n     use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, SIZE_T, BOOL,\n                                        LPVOID, DWORD, LPDWORD, HANDLE};\n     use ptr;\n-    use unstable::stack::RED_ZONE;\n+    use rt::stack::RED_ZONE;\n \n     pub type rust_thread = HANDLE;\n     pub type rust_thread_return = DWORD;\n@@ -208,7 +208,7 @@ mod imp {\n     use mem;\n     use os;\n     use ptr;\n-    use unstable::stack::RED_ZONE;\n+    use rt::stack::RED_ZONE;\n \n     pub type rust_thread = libc::pthread_t;\n     pub type rust_thread_return = *u8;"}, {"sha": "b9459aed582ae9c42136f64f5ba24eb7684ec970", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -69,7 +69,7 @@ use rt::local::Local;\n use rt::task::Task;\n use str::Str;\n use task::TaskResult;\n-use unstable::intrinsics;\n+use intrinsics;\n \n use uw = self::libunwind;\n \n@@ -177,7 +177,7 @@ impl Unwinder {\n     }\n \n     pub fn try(&mut self, f: ||) {\n-        use unstable::raw::Closure;\n+        use raw::Closure;\n         use libc::{c_void};\n \n         unsafe {\n@@ -376,6 +376,24 @@ pub mod eabi {\n     }\n }\n \n+#[cold]\n+#[lang=\"fail_\"]\n+#[cfg(not(test))]\n+pub fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n+    begin_unwind_raw(expr, file, line);\n+}\n+\n+#[cold]\n+#[lang=\"fail_bounds_check\"]\n+#[cfg(not(test))]\n+pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n+    use c_str::ToCStr;\n+\n+    let msg = format!(\"index out of bounds: the len is {} but the index is {}\",\n+                      len as uint, index as uint);\n+    msg.with_c_str(|buf| fail_(buf as *u8, file, line))\n+}\n+\n /// This is the entry point of unwinding for things like lang items and such.\n /// The arguments are normally generated by the compiler, and need to\n /// have static lifetimes."}, {"sha": "408f51f2017e0c4c6ac113eb5c394f8387fb8ed0", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -143,7 +143,7 @@ memory and partly incapable of presentation to others.\",\n     abort();\n \n     fn abort() -> ! {\n-        use std::unstable::intrinsics;\n+        use intrinsics;\n         unsafe { intrinsics::abort() }\n     }\n }"}, {"sha": "4d5eabbed104e6644dbca6135146a780fefc8250", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -104,7 +104,7 @@ use vec::{OwnedVector, OwnedCloneableVector, ImmutableVector, MutableVector};\n use vec_ng::Vec;\n use default::Default;\n use to_bytes::{IterBytes, Cb};\n-use unstable::raw::Repr;\n+use raw::Repr;\n \n /*\n Section: Creating a string\n@@ -1386,7 +1386,7 @@ pub mod raw {\n     use str::{is_utf8, OwnedStr, StrSlice};\n     use vec;\n     use vec::{MutableVector, ImmutableVector, OwnedVector};\n-    use unstable::raw::Slice;\n+    use raw::Slice;\n \n     /// Create a Rust string from a *u8 buffer of the given length\n     pub unsafe fn from_buf_len(buf: *u8, len: uint) -> ~str {"}, {"sha": "b4d465c0397de4d87090e19d506d703167c163e3", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -21,7 +21,7 @@\n \n #[allow(missing_doc)];\n \n-use unstable::intrinsics;\n+use intrinsics;\n use cast;\n use std::kinds::marker;\n use option::{Option,Some,None};"}, {"sha": "8818cb0d270b6cc2c4bbfbe3e4f339a7240b5747", "filename": "src/libstd/unstable/lang.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250c16f81f82a21295e421be7bd47c91d64cb2a/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=c250c16f81f82a21295e421be7bd47c91d64cb2a", "patch": "@@ -1,52 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Runtime calls emitted by the compiler.\n-\n-use c_str::CString;\n-use libc::c_char;\n-use cast;\n-use option::Some;\n-\n-#[cold]\n-#[lang=\"fail_\"]\n-pub fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n-    ::rt::begin_unwind_raw(expr, file, line);\n-}\n-\n-#[cold]\n-#[lang=\"fail_bounds_check\"]\n-pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n-    let msg = format!(\"index out of bounds: the len is {} but the index is {}\",\n-                      len as uint, index as uint);\n-\n-    let file_str = match unsafe { CString::new(file as *c_char, false) }.as_str() {\n-        // This transmute is safe because `file` is always stored in rodata.\n-        Some(s) => unsafe { cast::transmute::<&str, &'static str>(s) },\n-        None    => \"file wasn't UTF-8 safe\"\n-    };\n-\n-    ::rt::begin_unwind(msg, file_str, line)\n-}\n-\n-#[lang=\"malloc\"]\n-#[inline]\n-pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n-    ::rt::local_heap::local_malloc(drop_glue, size, align)\n-}\n-\n-// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n-// inside a landing pad may corrupt the state of the exception handler. If a\n-// problem occurs, call exit instead.\n-#[lang=\"free\"]\n-#[inline]\n-pub unsafe fn local_free(ptr: *u8) {\n-    ::rt::local_heap::local_free(ptr);\n-}"}, {"sha": "7bee0cf48ee5c6a0c173d2a1b569b9b0ecf7eaef", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -16,14 +16,9 @@ use libc::uintptr_t;\n pub mod dynamic_lib;\n \n pub mod finally;\n-pub mod intrinsics;\n pub mod simd;\n-#[cfg(not(test))]\n-pub mod lang;\n pub mod sync;\n pub mod mutex;\n-pub mod raw;\n-pub mod stack;\n \n /**\n "}, {"sha": "d8cb8bf3ed19f47703394d60d013e00a821d6820", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -122,7 +122,7 @@ use mem::size_of;\n use kinds::marker;\n use uint;\n use unstable::finally::try_finally;\n-use unstable::raw::{Repr, Slice, Vec};\n+use raw::{Repr, Slice, Vec};\n \n /**\n  * Creates and initializes an owned vector.\n@@ -2488,7 +2488,7 @@ pub mod raw {\n     use ptr;\n     use ptr::RawPtr;\n     use vec::{with_capacity, MutableVector, OwnedVector};\n-    use unstable::raw::Slice;\n+    use raw::Slice;\n \n     /**\n      * Form a slice from a pointer and length (as a number of units,"}, {"sha": "3532e7b26a40564eebe6259126167a03dbfa4fbd", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -24,7 +24,7 @@ use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n use rt::global_heap::{malloc_raw, realloc_raw};\n-use unstable::raw::Slice;\n+use raw::Slice;\n use vec::{ImmutableVector, Items, MutItems, MutableVector, RevItems};\n \n pub struct Vec<T> {"}, {"sha": "b6c35f48010ca1fcfd42e2035684246a2b0904fd", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable::intrinsics;\n-use std::unstable::intrinsics::TypeId;\n+use std::intrinsics;\n+use std::intrinsics::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);"}, {"sha": "b6c35f48010ca1fcfd42e2035684246a2b0904fd", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable::intrinsics;\n-use std::unstable::intrinsics::TypeId;\n+use std::intrinsics;\n+use std::intrinsics::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);"}, {"sha": "b77180e8e4ccf2da681a2421cefd5cb6c6883229", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -18,7 +18,7 @@ use std::io;\n use std::io::stdio::StdReader;\n use std::io::BufferedReader;\n use std::os;\n-use std::unstable::intrinsics::cttz16;\n+use std::intrinsics::cttz16;\n use std::vec;\n \n // Computes a single solution to a given 9x9 sudoku"}, {"sha": "12df0c71cc57e0952681964c314e00677029aac9", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable::intrinsics::{init, forget};\n+use std::intrinsics::{init, forget};\n \n // Test that the `forget` and `init` intrinsics are really unsafe\n pub fn main() {"}, {"sha": "6dffb53e4a319754c20e37b14992f6f887284cac", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable::intrinsics::{volatile_load, volatile_store};\n+use std::intrinsics::{volatile_load, volatile_store};\n \n pub fn main() {\n     unsafe {"}, {"sha": "9e6293216bc116b18bac39236c8673b0553b241b", "filename": "src/test/run-pass/issue-6898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6898.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable::intrinsics;\n+use std::intrinsics;\n \n /// Returns the size of a type\n pub fn size_of<T>() -> uint {"}, {"sha": "f81ddabf77c7ff1dded1e1d3518acb6a05273cd1", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n+use std::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n \n struct MyVisitor {\n     types: ~[~str],"}, {"sha": "b3835ad5cdfad32204c2abac1dbf4f4b32a5bd93", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast: check-fast screws up repr paths\n \n-use std::unstable::intrinsics::get_tydesc;\n+use std::intrinsics::get_tydesc;\n \n struct Foo<T> {\n     x: T"}, {"sha": "b8356cc0e448e0939cbfc66874015098d4da0340", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/551da0615764853153db944063ae2e271414a71b/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=551da0615764853153db944063ae2e271414a71b", "patch": "@@ -16,8 +16,8 @@ extern crate other1 = \"typeid-intrinsic\";\n extern crate other2 = \"typeid-intrinsic2\";\n \n use std::hash_old::Hash;\n-use std::unstable::intrinsics;\n-use std::unstable::intrinsics::TypeId;\n+use std::intrinsics;\n+use std::intrinsics::TypeId;\n \n struct A;\n struct Test;"}]}