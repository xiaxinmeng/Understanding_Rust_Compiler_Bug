{"sha": "efb99d780d282b50c29e429903398553665f4c06", "node_id": "C_kwDOAAsO6NoAKGVmYjk5ZDc4MGQyODJiNTBjMjllNDI5OTAzMzk4NTUzNjY1ZjRjMDY", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-18T21:15:29Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-21T00:32:18Z"}, "message": "Always format to internal String in FmtPrinter\n\nThis avoids monomorphizing for different parameters, decreasing generic code\ninstantiated downstream from rustc_middle.", "tree": {"sha": "47cfc47a8441d104df7d4ca0ed69abd07d2048eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cfc47a8441d104df7d4ca0ed69abd07d2048eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb99d780d282b50c29e429903398553665f4c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb99d780d282b50c29e429903398553665f4c06", "html_url": "https://github.com/rust-lang/rust/commit/efb99d780d282b50c29e429903398553665f4c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb99d780d282b50c29e429903398553665f4c06/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e2c2881d11324d610815bfff097e25c412199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e", "html_url": "https://github.com/rust-lang/rust/commit/45e2c2881d11324d610815bfff097e25c412199e"}], "stats": {"total": 162, "additions": 82, "deletions": 80}, "files": [{"sha": "7f94e357f37dd1e8ba0a0e9b101e0c3cf560b071", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -488,8 +488,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Return the name of the provided `Ty` (that must be a reference) with a synthesized lifetime\n     /// name where required.\n     pub(super) fn get_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n-        let mut s = String::new();\n-        let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n+        let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, Namespace::TypeNS);\n \n         // We need to add synthesized lifetimes where appropriate. We do\n         // this by hooking into the pretty printer and telling it to label the\n@@ -504,15 +503,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let _ = ty.print(printer);\n-        s\n+        ty.print(printer).unwrap().into_buffer()\n     }\n \n     /// Returns the name of the provided `Ty` (that must be a reference)'s region with a\n     /// synthesized lifetime name where required.\n     pub(super) fn get_region_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n-        let mut s = String::new();\n-        let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n+        let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, Namespace::TypeNS);\n \n         let region = if let ty::Ref(region, ..) = ty.kind() {\n             match **region {\n@@ -527,8 +524,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             bug!(\"ty for annotation of borrow region is not a reference\");\n         };\n \n-        let _ = region.print(printer);\n-        s\n+        region.print(printer).unwrap().into_buffer()\n     }\n }\n "}, {"sha": "55f3914769d8c9999ce915cfa6168f739dadce5d", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -109,11 +109,11 @@ rustc_data_structures::static_assert_size!(ImmTy<'_>, 72);\n impl<Tag: Provenance> std::fmt::Display for ImmTy<'_, Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         /// Helper function for printing a scalar to a FmtPrinter\n-        fn p<'a, 'tcx, F: std::fmt::Write, Tag: Provenance>(\n-            cx: FmtPrinter<'a, 'tcx, F>,\n+        fn p<'a, 'tcx, Tag: Provenance>(\n+            cx: FmtPrinter<'a, 'tcx>,\n             s: ScalarMaybeUninit<Tag>,\n             ty: Ty<'tcx>,\n-        ) -> Result<FmtPrinter<'a, 'tcx, F>, std::fmt::Error> {\n+        ) -> Result<FmtPrinter<'a, 'tcx>, std::fmt::Error> {\n             match s {\n                 ScalarMaybeUninit::Scalar(Scalar::Int(int)) => {\n                     cx.pretty_print_const_scalar_int(int, ty, true)\n@@ -138,8 +138,8 @@ impl<Tag: Provenance> std::fmt::Display for ImmTy<'_, Tag> {\n             match self.imm {\n                 Immediate::Scalar(s) => {\n                     if let Some(ty) = tcx.lift(self.layout.ty) {\n-                        let cx = FmtPrinter::new(tcx, f, Namespace::ValueNS);\n-                        p(cx, s, ty)?;\n+                        let cx = FmtPrinter::new(tcx, Namespace::ValueNS);\n+                        f.write_str(&p(cx, s, ty)?.into_buffer())?;\n                         return Ok(());\n                     }\n                     write!(f, \"{}: {}\", s, self.layout.ty)"}, {"sha": "86583d29ec0c266bb3e32b7a8231521016a02e6a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -988,8 +988,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;\n-            let mut s = String::new();\n-            let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS)\n+            let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS)\n                 .name_all_regions(sig)\n                 .unwrap();\n             let lts: Vec<String> = reg.into_iter().map(|(_, kind)| kind.to_string()).collect();"}, {"sha": "a8c21c9d9115bf23fe3f9afd4cedad20c5c43a77", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -395,14 +395,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let mut s = String::new();\n-                let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+                let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS);\n                 if let Some(highlight) = highlight {\n                     printer.region_highlight_mode = highlight;\n                 }\n-                let _ = ty.print(printer);\n+                let name = ty.print(printer).unwrap().into_buffer();\n                 InferenceDiagnosticsData {\n-                    name: s,\n+                    name,\n                     span: None,\n                     kind: UnderspecifiedArgKind::Type { prefix: ty.prefix_string(self.tcx) },\n                     parent: None,\n@@ -431,15 +430,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         }\n \n                         debug_assert!(!origin.span.is_dummy());\n-                        let mut s = String::new();\n-                        let mut printer =\n-                            ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n+                        let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::ValueNS);\n                         if let Some(highlight) = highlight {\n                             printer.region_highlight_mode = highlight;\n                         }\n-                        let _ = ct.print(printer);\n+                        let name = ct.print(printer).unwrap().into_buffer();\n                         InferenceDiagnosticsData {\n-                            name: s,\n+                            name,\n                             span: Some(origin.span),\n                             kind: UnderspecifiedArgKind::Const { is_parameter: false },\n                             parent: None,\n@@ -495,8 +492,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let mut local_visitor = FindHirNodeVisitor::new(&self, arg, span);\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n-            let mut s = String::new();\n-            let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+            let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS);\n             let ty_getter = move |ty_vid| {\n                 if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n                     self.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n@@ -523,14 +519,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n             printer.const_infer_name_resolver = Some(Box::new(const_getter));\n \n-            let _ = if let ty::FnDef(..) = ty.kind() {\n+            if let ty::FnDef(..) = ty.kind() {\n                 // We don't want the regular output for `fn`s because it includes its path in\n                 // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n-                ty.fn_sig(self.tcx).print(printer)\n+                ty.fn_sig(self.tcx).print(printer).unwrap().into_buffer()\n             } else {\n-                ty.print(printer)\n-            };\n-            s\n+                ty.print(printer).unwrap().into_buffer()\n+            }\n         };\n \n         if let Some(body_id) = body_id {"}, {"sha": "bf9c2246dd8c5e3cad2b067a7d774ac0493bf550", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -335,18 +335,19 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n         impl<'tcx, T> fmt::Display for Highlighted<'tcx, T>\n         where\n-            T: for<'a, 'b, 'c> Print<\n+            T: for<'a> Print<\n                 'tcx,\n-                FmtPrinter<'a, 'tcx, &'b mut fmt::Formatter<'c>>,\n+                FmtPrinter<'a, 'tcx>,\n                 Error = fmt::Error,\n+                Output = FmtPrinter<'a, 'tcx>,\n             >,\n         {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                let mut printer = ty::print::FmtPrinter::new(self.tcx, f, Namespace::TypeNS);\n+                let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS);\n                 printer.region_highlight_mode = self.highlight;\n \n-                self.value.print(printer)?;\n-                Ok(())\n+                let s = self.value.print(printer)?.into_buffer();\n+                f.write_str(&s)\n             }\n         }\n "}, {"sha": "08b44dcc57212487bafb6c1a9e6c15f20ef9e570", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -2421,11 +2421,11 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                     AggregateKind::Adt(adt_did, variant, substs, _user_ty, _) => {\n                         ty::tls::with(|tcx| {\n-                            let mut name = String::new();\n                             let variant_def = &tcx.adt_def(adt_did).variants[variant];\n                             let substs = tcx.lift(substs).expect(\"could not lift for printing\");\n-                            FmtPrinter::new(tcx, &mut name, Namespace::ValueNS)\n-                                .print_def_path(variant_def.def_id, substs)?;\n+                            let name = FmtPrinter::new(tcx, Namespace::ValueNS)\n+                                .print_def_path(variant_def.def_id, substs)?\n+                                .into_buffer();\n \n                             match variant_def.ctor_kind {\n                                 CtorKind::Const => fmt.write_str(&name),\n@@ -2847,9 +2847,10 @@ fn pretty_print_const<'tcx>(\n     use crate::ty::print::PrettyPrinter;\n     ty::tls::with(|tcx| {\n         let literal = tcx.lift(c).unwrap();\n-        let mut cx = FmtPrinter::new(tcx, fmt, Namespace::ValueNS);\n+        let mut cx = FmtPrinter::new(tcx, Namespace::ValueNS);\n         cx.print_alloc_ids = true;\n-        cx.pretty_print_const(literal, print_types)?;\n+        let cx = cx.pretty_print_const(literal, print_types)?;\n+        fmt.write_str(&cx.into_buffer())?;\n         Ok(())\n     })\n }\n@@ -2864,9 +2865,10 @@ fn pretty_print_const_value<'tcx>(\n     ty::tls::with(|tcx| {\n         let val = tcx.lift(val).unwrap();\n         let ty = tcx.lift(ty).unwrap();\n-        let mut cx = FmtPrinter::new(tcx, fmt, Namespace::ValueNS);\n+        let mut cx = FmtPrinter::new(tcx, Namespace::ValueNS);\n         cx.print_alloc_ids = true;\n-        cx.pretty_print_const_value(val, ty, print_types)?;\n+        let cx = cx.pretty_print_const_value(val, ty, print_types)?;\n+        fmt.write_str(&cx.into_buffer())?;\n         Ok(())\n     })\n }"}, {"sha": "246c53fdffe1af4f848622654c54e3455ff7ad26", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -983,10 +983,9 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     fn format_generic_args(self, args: &[ty::GenericArg<'tcx>]) -> String {\n-        let mut item_args = String::new();\n-        FmtPrinter::new(self, &mut item_args, hir::def::Namespace::TypeNS)\n+        FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .path_generic_args(Ok, args)\n-            .expect(\"could not write to `String`.\");\n-        item_args\n+            .expect(\"could not write to `String`.\")\n+            .into_buffer()\n     }\n }"}, {"sha": "72cb793c7c822dd911b1c80e92133c1a70d15543", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -279,9 +279,10 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n             let substs = tcx.lift(self.substs).expect(\"could not lift for printing\");\n-            FmtPrinter::new(tcx, &mut *f, Namespace::ValueNS)\n-                .print_def_path(self.def_id(), substs)?;\n-            Ok(())\n+            let s = FmtPrinter::new(tcx, Namespace::ValueNS)\n+                .print_def_path(self.def_id(), substs)?\n+                .into_buffer();\n+            f.write_str(&s)\n         })?;\n \n         match self.def {"}, {"sha": "0e94ac40ff7e56791bfde8c009b576ee7a2cb654", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -1545,11 +1545,11 @@ pub trait PrettyPrinter<'tcx>:\n }\n \n // HACK(eddyb) boxed to avoid moving around a large struct by-value.\n-pub struct FmtPrinter<'a, 'tcx, F>(Box<FmtPrinterData<'a, 'tcx, F>>);\n+pub struct FmtPrinter<'a, 'tcx>(Box<FmtPrinterData<'a, 'tcx>>);\n \n-pub struct FmtPrinterData<'a, 'tcx, F> {\n+pub struct FmtPrinterData<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    fmt: F,\n+    fmt: String,\n \n     empty_path: bool,\n     in_value: bool,\n@@ -1566,24 +1566,24 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     pub const_infer_name_resolver: Option<Box<dyn Fn(ty::ConstVid<'tcx>) -> Option<String> + 'a>>,\n }\n \n-impl<'a, 'tcx, F> Deref for FmtPrinter<'a, 'tcx, F> {\n-    type Target = FmtPrinterData<'a, 'tcx, F>;\n+impl<'a, 'tcx> Deref for FmtPrinter<'a, 'tcx> {\n+    type Target = FmtPrinterData<'a, 'tcx>;\n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }\n }\n \n-impl<F> DerefMut for FmtPrinter<'_, '_, F> {\n+impl DerefMut for FmtPrinter<'_, '_> {\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         &mut self.0\n     }\n }\n \n-impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n-    pub fn new(tcx: TyCtxt<'tcx>, fmt: F, ns: Namespace) -> Self {\n+impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>, ns: Namespace) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n-            fmt,\n+            fmt: String::new(),\n             empty_path: false,\n             in_value: ns == Namespace::ValueNS,\n             print_alloc_ids: false,\n@@ -1596,6 +1596,10 @@ impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n             const_infer_name_resolver: None,\n         }))\n     }\n+\n+    pub fn into_buffer(self) -> String {\n+        self.0.fmt\n+    }\n }\n \n // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n@@ -1627,19 +1631,18 @@ impl<'t> TyCtxt<'t> {\n     pub fn def_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n         let ns = guess_def_namespace(self, def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n-        let mut s = String::new();\n-        let _ = FmtPrinter::new(self, &mut s, ns).print_def_path(def_id, substs);\n-        s\n+        FmtPrinter::new(self, ns).print_def_path(def_id, substs).unwrap().into_buffer()\n     }\n }\n \n-impl<F: fmt::Write> fmt::Write for FmtPrinter<'_, '_, F> {\n+impl fmt::Write for FmtPrinter<'_, '_> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n-        self.fmt.write_str(s)\n+        self.fmt.push_str(s);\n+        Ok(())\n     }\n }\n \n-impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     type Error = fmt::Error;\n \n     type Path = Self;\n@@ -1847,7 +1850,7 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n }\n \n-impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n     fn ty_infer_name(&self, id: ty::TyVid) -> Option<String> {\n         self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n@@ -1983,7 +1986,7 @@ impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n }\n \n // HACK(eddyb) limited to `FmtPrinter` because of `region_highlight_mode`.\n-impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n+impl FmtPrinter<'_, '_> {\n     pub fn pretty_print_region(mut self, region: ty::Region<'_>) -> Result<Self, fmt::Error> {\n         define_scoped_cx!(self);\n \n@@ -2117,7 +2120,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n \n // HACK(eddyb) limited to `FmtPrinter` because of `binder_depth`,\n // `region_index` and `used_region_names`.\n-impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx> FmtPrinter<'_, 'tcx> {\n     pub fn name_all_regions<T>(\n         mut self,\n         value: &ty::Binder<'tcx, T>,\n@@ -2369,9 +2372,10 @@ macro_rules! forward_display_to_print {\n         $(#[allow(unused_lifetimes)] impl<'tcx> fmt::Display for $ty {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 ty::tls::with(|tcx| {\n-                    tcx.lift(*self)\n+                    let cx = tcx.lift(*self)\n                         .expect(\"could not lift for printing\")\n-                        .print(FmtPrinter::new(tcx, f, Namespace::TypeNS))?;\n+                        .print(FmtPrinter::new(tcx, Namespace::TypeNS))?;\n+                    f.write_str(&cx.into_buffer())?;\n                     Ok(())\n                 })\n             }\n@@ -2402,8 +2406,7 @@ macro_rules! define_print_and_forward_display {\n impl<'tcx> fmt::Display for ty::Region<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            self.print(FmtPrinter::new(tcx, f, Namespace::TypeNS))?;\n-            Ok(())\n+            f.write_str(&self.print(FmtPrinter::new(tcx, Namespace::TypeNS))?.into_buffer())\n         })\n     }\n }"}, {"sha": "13a996a06622bc0199cbe5d0062b43e1412737b1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb99d780d282b50c29e429903398553665f4c06/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=efb99d780d282b50c29e429903398553665f4c06", "patch": "@@ -22,21 +22,27 @@ use std::sync::Arc;\n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            with_no_trimmed_paths!(\n-                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.def_id, &[])?\n-            );\n-            Ok(())\n+            with_no_trimmed_paths!({\n+                f.write_str(\n+                    &FmtPrinter::new(tcx, Namespace::TypeNS)\n+                        .print_def_path(self.def_id, &[])?\n+                        .into_buffer(),\n+                )\n+            })\n         })\n     }\n }\n \n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n-            with_no_trimmed_paths!(\n-                FmtPrinter::new(tcx, f, Namespace::TypeNS).print_def_path(self.did, &[])?\n-            );\n-            Ok(())\n+            with_no_trimmed_paths!({\n+                f.write_str(\n+                    &FmtPrinter::new(tcx, Namespace::TypeNS)\n+                        .print_def_path(self.did, &[])?\n+                        .into_buffer(),\n+                )\n+            })\n         })\n     }\n }"}]}