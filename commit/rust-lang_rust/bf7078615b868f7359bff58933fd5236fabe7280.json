{"sha": "bf7078615b868f7359bff58933fd5236fabe7280", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzA3ODYxNWI4NjhmNzM1OWJmZjU4OTMzZmQ1MjM2ZmFiZTcyODA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-07T03:41:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-10T06:07:20Z"}, "message": "Change some function names.\n\nA couple of these are quite long, but they do a much better job of\nexplaining what they do, which was non-obvious before.", "tree": {"sha": "728c7ab4d4e1ca9ec5562cf29ea332d4205cf327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728c7ab4d4e1ca9ec5562cf29ea332d4205cf327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7078615b868f7359bff58933fd5236fabe7280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7078615b868f7359bff58933fd5236fabe7280", "html_url": "https://github.com/rust-lang/rust/commit/bf7078615b868f7359bff58933fd5236fabe7280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7078615b868f7359bff58933fd5236fabe7280/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad5de22d182578e846a6ccc69940e76a820381c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad5de22d182578e846a6ccc69940e76a820381c", "html_url": "https://github.com/rust-lang/rust/commit/4ad5de22d182578e846a6ccc69940e76a820381c"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "e50622a005379c1dc9ac2beb4ae4ba8eda09bbe6", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=bf7078615b868f7359bff58933fd5236fabe7280", "patch": "@@ -159,10 +159,7 @@ pub struct Config {\n     pub registry: Registry,\n }\n \n-pub fn run_compiler_in_existing_thread_pool<R>(\n-    config: Config,\n-    f: impl FnOnce(&Compiler) -> R,\n-) -> R {\n+pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R) -> R {\n     let registry = &config.registry;\n     let (sess, codegen_backend) = util::create_session(\n         config.opts,\n@@ -204,17 +201,20 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     log::trace!(\"run_compiler\");\n     let stderr = config.stderr.take();\n-    util::spawn_thread_pool(\n+    util::setup_callbacks_and_run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.debugging_opts.threads,\n         &stderr,\n-        || run_compiler_in_existing_thread_pool(config, f),\n+        || create_compiler_and_run(config, f),\n     )\n }\n \n-pub fn default_thread_pool<R: Send>(edition: edition::Edition, f: impl FnOnce() -> R + Send) -> R {\n+pub fn setup_callbacks_and_run_in_default_thread_pool_with_globals<R: Send>(\n+    edition: edition::Edition,\n+    f: impl FnOnce() -> R + Send,\n+) -> R {\n     // the 1 here is duplicating code in config.opts.debugging_opts.threads\n     // which also defaults to 1; it ultimately doesn't matter as the default\n     // isn't threaded, and just ignores this parameter\n-    util::spawn_thread_pool(edition, 1, &None, f)\n+    util::setup_callbacks_and_run_in_thread_pool_with_globals(edition, 1, &None, f)\n }"}, {"sha": "fb5f3581b6dfdea297a9f0caa240cbf14c19e357", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=bf7078615b868f7359bff58933fd5236fabe7280", "patch": "@@ -128,7 +128,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n }\n \n #[cfg(not(parallel_compiler))]\n-pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     _threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n@@ -157,7 +157,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n }\n \n #[cfg(parallel_compiler)]\n-pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n@@ -186,7 +186,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                 // span_session_globals are captured and set on the new\n                 // threads. ty::tls::with_thread_locals sets up thread local\n                 // callbacks from librustc_ast.\n-                let main_handler = move |thread: ThreadBuilder| {\n+                let main_handler = move |thread: rayon::ThreadBuilder| {\n                     rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n                         rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n                             ty::tls::GCX_PTR.set(&Lock::new(0), || {"}, {"sha": "80cc5182bef324fabb1a2067b501e0fe0e1968ef", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=bf7078615b868f7359bff58933fd5236fabe7280", "patch": "@@ -376,7 +376,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n-    interface::run_compiler_in_existing_thread_pool(config, |compiler| {\n+    interface::create_compiler_and_run(config, |compiler| {\n         compiler.enter(|queries| {\n             let sess = compiler.session();\n "}, {"sha": "57151e2b200023ddcada5ed6ec7410a8f9fec42d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7078615b868f7359bff58933fd5236fabe7280/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bf7078615b868f7359bff58933fd5236fabe7280", "patch": "@@ -437,7 +437,10 @@ fn main_args(args: &[String]) -> i32 {\n         Ok(opts) => opts,\n         Err(code) => return code,\n     };\n-    rustc_interface::interface::default_thread_pool(options.edition, move || main_options(options))\n+    rustc_interface::interface::setup_callbacks_and_run_in_default_thread_pool_with_globals(\n+        options.edition,\n+        move || main_options(options),\n+    )\n }\n \n fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {"}]}