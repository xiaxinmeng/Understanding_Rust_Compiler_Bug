{"sha": "460e389f547c908050ad8d49e39aa7d311286645", "node_id": "C_kwDOAAsO6NoAKDQ2MGUzODlmNTQ3YzkwODA1MGFkOGQ0OWUzOWFhN2QzMTEyODY2NDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T12:07:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T12:07:24Z"}, "message": "Auto merge of #12010 - Veykril:r-a-config, r=Veykril\n\nConfig revamp\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/11790\nFixes https://github.com/rust-lang/rust-analyzer/issues/12115\n\nThis PR changes a lot of config names, and a few ones are being merged or split apart. The reason for this is that our configuration names currently are rather inconsistent and some where poorly chosen in regards to extensability. This PR plans to fix that.\n\nWe still allow the old config names by patching them to the new ones before deserializing to keep backwards compatability with other clients (the VSCode client will auto update the config) but ideally we will get rid of that layer in the future.\n\nHere is a list of the changes:\n\nThese are simple renames `old_name | alias1 | alias2 ... -> new_name` (the vscode client will fix these up automagically):\n```\nassist_allowMergingIntoGlobImports -> imports_merge_glob\nassist_exprFillDefault -> assist_expressionFillDefault\nassist_importEnforceGranularity -> imports_granularity_enforce\nassist_importGranularity | assist_importMergeBehavior | assist_importMergeBehaviour -> imports_granularity_group\nassist_importGroup -> imports_group_enable\nassist_importPrefix -> imports_prefix\n\ncache_warmup -> primeCaches_enable\n\ncargo_loadOutDirsFromCheck -> cargo_buildScripts_enable\ncargo_runBuildScripts | cargo_runBuildScriptsCommand -> cargo_runBuildScripts_overrideCommand\ncargo_useRustcWrapperForBuildScripts -> cargo_runBuildScripts_useRustcWrapper\n\ncompletion_snippets -> completion_snippets_custom\n\ndiagnostics_enableExperimental -> diagnostics_experimental_enable\n\nexperimental_procAttrMacros -> procMacro_attributes_enable\n\nhighlighting_strings -> semanticHighlighting_strings_enable\n\nhighlightRelated_breakPoints -> semanticHighlighting_breakPoints_enable\nhighlightRelated_exitPoints -> semanticHighlighting_exitPoints_enable\nhighlightRelated_yieldPoints -> semanticHighlighting_yieldPoints_enable\nhighlightRelated_references -> semanticHighlighting_references_enable\n\nhover_documentation -> hover_documentation_enable\nhover_linksInHover | hoverActions_linksInHover -> hover_links_enable\nhoverActions_debug -> hoverActions_debug_enable\nhoverActions_enable -> hoverActions_enable_enable\nhoverActions_gotoTypeDef -> hoverActions_gotoTypeDef_enable\nhoverActions_implementations -> hoverActions_implementations_enable\nhoverActions_references -> hoverActions_references_enable\nhoverActions_run -> hoverActions_run_enable\n\ninlayHints_chainingHints -> inlayHints_chainingHints_enable\ninlayHints_closureReturnTypeHints -> inlayHints_closureReturnTypeHints_enable\ninlayHints_hideNamedConstructorHints -> inlayHints_typeHints_hideNamedConstructorHints\ninlayHints_parameterHints -> inlayHints_parameterHints_enable\ninlayHints_reborrowHints -> inlayHints_reborrowHints_enable\ninlayHints_typeHints -> inlayHints_typeHints_enable\n\nlruCapacity -> lru_capacity\n\nrunnables_cargoExtraArgs -> runnables_extraArgs\nrunnables_overrideCargo -> runnables_command\n\nrustcSource -> rustc_source\n\nrustfmt_enableRangeFormatting -> rustfmt_rangeFormatting_enable\n```\n\nThese are configs that have been merged or split apart, which have to be manually updated by the user:\n\n```\ncallInfo_full -> signatureInfo_detail, signatureInfo_documentation_enable\n\ncargo_allFeatures, cargo_features -> cargo_features\ncheckOnSave_allFeatures, checkOnSave_features -> checkOnSave_features\ncompletion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n```", "tree": {"sha": "f466f98c84acdcaf55c392d00893e8df297eeec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f466f98c84acdcaf55c392d00893e8df297eeec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460e389f547c908050ad8d49e39aa7d311286645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460e389f547c908050ad8d49e39aa7d311286645", "html_url": "https://github.com/rust-lang/rust/commit/460e389f547c908050ad8d49e39aa7d311286645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460e389f547c908050ad8d49e39aa7d311286645/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf152e8a9400fc05709570a57b0f488d65e9cb7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf152e8a9400fc05709570a57b0f488d65e9cb7a", "html_url": "https://github.com/rust-lang/rust/commit/cf152e8a9400fc05709570a57b0f488d65e9cb7a"}, {"sha": "73df43f69a819e82ecf101719c19c939b3d10209", "url": "https://api.github.com/repos/rust-lang/rust/commits/73df43f69a819e82ecf101719c19c939b3d10209", "html_url": "https://github.com/rust-lang/rust/commit/73df43f69a819e82ecf101719c19c939b3d10209"}], "stats": {"total": 1828, "additions": 1134, "deletions": 694}, "files": [{"sha": "2be6c78a6e7724262c09ffe9b582711a9f07dfad", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -635,7 +635,7 @@ fn env_expand(\n         // unnecessary diagnostics for eg. `CARGO_PKG_NAME`.\n         if key == \"OUT_DIR\" {\n             err = Some(ExpandError::Other(\n-                r#\"`OUT_DIR` not set, enable \"run build scripts\" to fix\"#.into(),\n+                r#\"`OUT_DIR` not set, enable \"build scripts\" to fix\"#.into(),\n             ));\n         }\n "}, {"sha": "53d0131e02da42c1759df87d0f5e4d0a6531e089", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -111,7 +111,7 @@ macro_rules! env { () => {} }\n macro_rules! concat { () => {} }\n \n   include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n-//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"build scripts\" to fix\n \"#,\n         );\n     }\n@@ -161,7 +161,7 @@ fn main() {\n   //^^^^^^^^^^^^^ error: could not convert tokens\n \n     env!(\"OUT_DIR\");\n-  //^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"run build scripts\" to fix\n+  //^^^^^^^^^^^^^^^ error: `OUT_DIR` not set, enable \"build scripts\" to fix\n \n     compile_error!(\"compile_error works\");\n   //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ error: compile_error works"}, {"sha": "119b94f060b4533f493fecda41a6b433aa736727", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 412, "deletions": 212, "changes": 624, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -35,6 +35,15 @@ use crate::{\n     lsp_ext::{self, supports_utf8, WorkspaceSymbolSearchKind, WorkspaceSymbolSearchScope},\n };\n \n+mod patch_old_style;\n+\n+// Conventions for configuration keys to preserve maximal extendability without breakage:\n+//  - Toggles (be it binary true/false or with more options in-between) should almost always suffix as `_enable`\n+//    This has the benefit of namespaces being extensible, and if the suffix doesn't fit later it can be changed without breakage.\n+//  - In general be wary of using the namespace of something verbatim, it prevents us from adding subkeys in the future\n+//  - Don't use abbreviations unless really necessary\n+//  - foo_command = overrides the subcommand, foo_overrideCommand allows full overwriting, extra args only applies for foo_command\n+\n // Defines the server-side configuration of the rust-analyzer. We generate\n // *parts* of VS Code's `package.json` config from this.\n //\n@@ -45,85 +54,89 @@ use crate::{\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n-        /// Placeholder for missing expressions in assists.\n-        assist_exprFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n-        /// How imports should be grouped into use statements.\n-        assist_importGranularity |\n-        assist_importMergeBehavior |\n-        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"crate\\\"\",\n-        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n-        assist_importEnforceGranularity: bool              = \"false\",\n-        /// The path structure for newly inserted paths to use.\n-        assist_importPrefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n-        /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n-        assist_importGroup: bool                           = \"true\",\n-        /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n-        assist_allowMergingIntoGlobImports: bool           = \"true\",\n-\n-        /// Warm up caches on project load.\n-        cache_warmup: bool = \"true\",\n-\n-        /// Show function name and docs in parameter hints.\n-        callInfo_full: bool                                = \"true\",\n+        /// Placeholder expression to use for missing expressions in assists.\n+        assist_expressionFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` or `.cargo/config.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n-        /// Activate all available features (`--all-features`).\n-        cargo_allFeatures: bool          = \"false\",\n-        /// Unsets `#[cfg(test)]` for the specified crates.\n-        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n-        /// List of features to activate.\n-        cargo_features: Vec<String>      = \"[]\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n-        cargo_runBuildScripts |\n-        cargo_loadOutDirsFromCheck: bool = \"true\",\n-        /// Advanced option, fully override the command rust-analyzer uses to\n-        /// run build scripts and build procedural macros. The command should\n-        /// include `--message-format=json` or a similar option.\n-        cargo_runBuildScriptsCommand: Option<Vec<String>> = \"null\",\n+        cargo_buildScripts_enable: bool  = \"true\",\n+        /// Override the command rust-analyzer uses to run build scripts and\n+        /// build procedural macros. The command is required to output json\n+        /// and should therefor include `--message-format=json` or a similar\n+        /// option.\n+        ///\n+        /// By default, a cargo invocation will be constructed for the configured\n+        /// targets and features, with the following base command line:\n+        ///\n+        /// ```bash\n+        /// cargo check --quiet --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n+        cargo_buildScripts_overrideCommand: Option<Vec<String>> = \"null\",\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid compiling unnecessary things.\n-        cargo_useRustcWrapperForBuildScripts: bool = \"true\",\n-        /// Do not activate the `default` feature.\n+        cargo_buildScripts_useRustcWrapper: bool = \"true\",\n+        /// List of features to activate.\n+        ///\n+        /// Set this to `\"all\"` to pass `--all-features` to cargo.\n+        cargo_features: CargoFeatures      = \"[]\",\n+        /// Whether to pass `--no-default-features` to cargo.\n         cargo_noDefaultFeatures: bool    = \"false\",\n-        /// Compilation target (target triple).\n-        cargo_target: Option<String>     = \"null\",\n         /// Internal config for debugging, disables loading of sysroot crates.\n         cargo_noSysroot: bool            = \"false\",\n+        /// Compilation target override (target triple).\n+        cargo_target: Option<String>     = \"null\",\n+        /// Unsets `#[cfg(test)]` for the specified crates.\n+        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n \n-        /// Run specified `cargo check` command for diagnostics on save.\n-        checkOnSave_enable: bool                         = \"true\",\n-        /// Check with all features (`--all-features`).\n-        /// Defaults to `#rust-analyzer.cargo.allFeatures#`.\n-        checkOnSave_allFeatures: Option<bool>            = \"null\",\n         /// Check all targets and tests (`--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n         /// Cargo command to use for `cargo check`.\n         checkOnSave_command: String                      = \"\\\"check\\\"\",\n-        /// Do not activate the `default` feature.\n-        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n-        /// Check for a specific target. Defaults to\n-        /// `#rust-analyzer.cargo.target#`.\n-        checkOnSave_target: Option<String>               = \"null\",\n+        /// Run specified `cargo check` command for diagnostics on save.\n+        checkOnSave_enable: bool                         = \"true\",\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`.\n-        checkOnSave_features: Option<Vec<String>>        = \"null\",\n-        /// Advanced option, fully override the command rust-analyzer uses for\n-        /// checking. The command should include `--message-format=json` or\n-        /// similar option.\n+        ///\n+        /// Set to `\"all\"` to pass `--all-features` to cargo.\n+        checkOnSave_features: Option<CargoFeatures>      = \"null\",\n+        /// Do not activate the `default` feature.\n+        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n+        /// Override the command rust-analyzer uses to  run build scripts and\n+        /// build procedural macros. The command is required to output json\n+        /// and should therefor include `--message-format=json` or a similar\n+        /// option.\n+        ///\n+        /// An example command would be:\n+        ///\n+        /// ```bash\n+        /// cargo check --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n         checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n+        /// Check for a specific target. Defaults to\n+        /// `#rust-analyzer.cargo.target#`.\n+        checkOnSave_target: Option<String>               = \"null\",\n \n-        /// Whether to add argument snippets when completing functions.\n-        /// Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\n-        completion_addCallArgumentSnippets: bool = \"true\",\n-        /// Whether to add parenthesis when completing functions.\n-        completion_addCallParenthesis: bool      = \"true\",\n+        /// Toggles the additional completions that automatically add imports when completed.\n+        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+        completion_autoimport_enable: bool       = \"true\",\n+        /// Toggles the additional completions that automatically show method calls and field accesses\n+        /// with `self` prefixed to them when inside a method.\n+        completion_autoself_enable: bool        = \"true\",\n+        /// Whether to add parenthesis and argument snippets when completing function.\n+        completion_callable_snippets: Option<CallableCompletionDef>  = \"\\\"fill_arguments\\\"\",\n+        /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n+        completion_postfix_enable: bool         = \"true\",\n+        /// Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n+        completion_privateEditable_enable: bool = \"false\",\n         /// Custom completion snippets.\n         // NOTE: Keep this list in sync with the feature docs of user snippets.\n-        completion_snippets: FxHashMap<String, SnippetDef> = r#\"{\n+        completion_snippets_custom: FxHashMap<String, SnippetDef> = r#\"{\n             \"Arc::new\": {\n                 \"postfix\": \"arc\",\n                 \"body\": \"Arc::new(${receiver})\",\n@@ -164,24 +177,14 @@ config_data! {\n                 \"scope\": \"expr\"\n             }\n         }\"#,\n-        /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n-        completion_postfix_enable: bool         = \"true\",\n-        /// Toggles the additional completions that automatically add imports when completed.\n-        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n-        completion_autoimport_enable: bool       = \"true\",\n-        /// Toggles the additional completions that automatically show method calls and field accesses\n-        /// with `self` prefixed to them when inside a method.\n-        completion_autoself_enable: bool        = \"true\",\n-        /// Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n-        completion_privateEditable_enable: bool = \"false\",\n \n+        /// List of rust-analyzer diagnostics to disable.\n+        diagnostics_disabled: FxHashSet<String> = \"[]\",\n         /// Whether to show native rust-analyzer diagnostics.\n         diagnostics_enable: bool                = \"true\",\n         /// Whether to show experimental rust-analyzer diagnostics that might\n         /// have more false positives than usual.\n-        diagnostics_enableExperimental: bool    = \"false\",\n-        /// List of rust-analyzer diagnostics to disable.\n-        diagnostics_disabled: FxHashSet<String> = \"[]\",\n+        diagnostics_experimental_enable: bool    = \"false\",\n         /// Map of prefixes to be substituted when parsing diagnostic file paths.\n         /// This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n         diagnostics_remapPrefix: FxHashMap<String, String> = \"{}\",\n@@ -196,110 +199,113 @@ config_data! {\n         /// and a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n \n-        /// Expand attribute macros.\n-        experimental_procAttrMacros: bool = \"true\",\n-\n-        /// Controls file watching implementation.\n-        files_watcher: String = \"\\\"client\\\"\",\n         /// These directories will be ignored by rust-analyzer. They are\n         /// relative to the workspace root, and globs are not supported. You may\n         /// also need to add the folders to Code's `files.watcherExclude`.\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n+        /// Controls file watching implementation.\n+        files_watcher: String = \"\\\"client\\\"\",\n \n-        /// Enables highlighting of related references while hovering your mouse above any identifier.\n-        highlightRelated_references: bool = \"true\",\n-        /// Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n-        highlightRelated_exitPoints: bool = \"true\",\n-        /// Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n-        highlightRelated_breakPoints: bool = \"true\",\n-        /// Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n-        highlightRelated_yieldPoints: bool = \"true\",\n-\n-        /// Use semantic tokens for strings.\n-        ///\n-        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n-        /// their contents.\n-        highlighting_strings: bool = \"true\",\n-\n-        /// Whether to show documentation on hover.\n-        hover_documentation: bool       = \"true\",\n-        /// Use markdown syntax for links in hover.\n-        hover_linksInHover |\n-        hoverActions_linksInHover: bool = \"true\",\n+        /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n+        highlightRelated_breakPoints_enable: bool = \"true\",\n+        /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n+        highlightRelated_exitPoints_enable: bool = \"true\",\n+        /// Enables highlighting of related references while the cursor is on any identifier.\n+        highlightRelated_references_enable: bool = \"true\",\n+        /// Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\n+        highlightRelated_yieldPoints_enable: bool = \"true\",\n \n         /// Whether to show `Debug` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_debug: bool           = \"true\",\n+        hover_actions_debug_enable: bool           = \"true\",\n         /// Whether to show HoverActions in Rust files.\n-        hoverActions_enable: bool          = \"true\",\n+        hover_actions_enable: bool          = \"true\",\n         /// Whether to show `Go to Type Definition` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_gotoTypeDef: bool     = \"true\",\n+        hover_actions_gotoTypeDef_enable: bool     = \"true\",\n         /// Whether to show `Implementations` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_implementations: bool = \"true\",\n+        hover_actions_implementations_enable: bool = \"true\",\n         /// Whether to show `References` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_references: bool      = \"false\",\n+        hover_actions_references_enable: bool      = \"false\",\n         /// Whether to show `Run` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_run: bool             = \"true\",\n+        hover_actions_run_enable: bool             = \"true\",\n+\n+        /// Whether to show documentation on hover.\n+        hover_documentation_enable: bool       = \"true\",\n+        /// Use markdown syntax for links in hover.\n+        hover_links_enable: bool = \"true\",\n+\n+        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n+        imports_granularity_enforce: bool              = \"false\",\n+        /// How imports should be grouped into use statements.\n+        imports_granularity_group: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n+        imports_group_enable: bool                           = \"true\",\n+        /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n+        imports_merge_glob: bool           = \"true\",\n+        /// The path structure for newly inserted paths to use.\n+        imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n \n-        /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n-        inlayHints_renderColons: bool                      = \"true\",\n-        /// Maximum length for inlay hints. Set to null to have an unlimited length.\n-        inlayHints_maxLength: Option<usize>                = \"25\",\n-        /// Whether to show function parameter name inlay hints at the call\n-        /// site.\n-        inlayHints_parameterHints: bool                     = \"true\",\n-        /// Whether to show inlay type hints for variables.\n-        inlayHints_typeHints: bool                          = \"true\",\n         /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints: bool                      = \"true\",\n+        inlayHints_chainingHints_enable: bool                      = \"true\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints: bool             = \"false\",\n-        /// Whether to show inlay type hints for compiler inserted reborrows.\n-        inlayHints_reborrowHints: bool                      = \"false\",\n+        inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n-        inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n-        /// Whether to hide inlay hints for constructors.\n-        inlayHints_hideNamedConstructorHints: bool          = \"false\",\n+        inlayHints_lifetimeElisionHints_useParameterNames: bool    = \"false\",\n+        /// Maximum length for inlay hints. Set to null to have an unlimited length.\n+        inlayHints_maxLength: Option<usize>                        = \"25\",\n+        /// Whether to show function parameter name inlay hints at the call\n+        /// site.\n+        inlayHints_parameterHints_enable: bool                     = \"true\",\n+        /// Whether to show inlay type hints for compiler inserted reborrows.\n+        inlayHints_reborrowHints_enable: bool                      = \"false\",\n+        /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+        inlayHints_renderColons: bool                              = \"true\",\n+        /// Whether to show inlay type hints for variables.\n+        inlayHints_typeHints_enable: bool                          = \"true\",\n+        /// Whether to hide inlay type hints for constructors.\n+        inlayHints_typeHints_hideNamedConstructor: bool            = \"false\",\n \n+        /// Join lines merges consecutive declaration and initialization of an assignment.\n+        joinLines_joinAssignments: bool = \"true\",\n         /// Join lines inserts else between consecutive ifs.\n         joinLines_joinElseIf: bool = \"true\",\n         /// Join lines removes trailing commas.\n         joinLines_removeTrailingComma: bool = \"true\",\n         /// Join lines unwraps trivial blocks.\n         joinLines_unwrapTrivialBlock: bool = \"true\",\n-        /// Join lines merges consecutive declaration and initialization of an assignment.\n-        joinLines_joinAssignments: bool = \"true\",\n \n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_debug: bool            = \"true\",\n+        lens_debug_enable: bool            = \"true\",\n         /// Whether to show CodeLens in Rust files.\n         lens_enable: bool           = \"true\",\n+        /// Internal config: use custom client-side commands even when the\n+        /// client doesn't set the corresponding capability.\n+        lens_forceCustomCommands: bool = \"true\",\n         /// Whether to show `Implementations` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_implementations: bool  = \"true\",\n-        /// Whether to show `Run` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n-        lens_run: bool              = \"true\",\n-        /// Whether to show `Method References` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n-        lens_methodReferences: bool = \"false\",\n-        /// Whether to show `References` lens for Struct, Enum, Union and Trait.\n+        lens_implementations_enable: bool  = \"true\",\n+        /// Whether to show `References` lens for Struct, Enum, and Union.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n-        lens_references: bool = \"false\",\n+        lens_references_adt_enable: bool = \"false\",\n         /// Whether to show `References` lens for Enum Variants.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n-        lens_enumVariantReferences: bool = \"false\",\n-        /// Internal config: use custom client-side commands even when the\n-        /// client doesn't set the corresponding capability.\n-        lens_forceCustomCommands: bool = \"true\",\n+        lens_references_enumVariant_enable: bool = \"false\",\n+        /// Whether to show `Method References` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_references_method_enable: bool = \"false\",\n+        /// Whether to show `References` lens for Trait.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n+        lens_references_trait_enable: bool = \"false\",\n+        /// Whether to show `Run` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_run_enable: bool              = \"true\",\n \n         /// Disable project auto-discovery in favor of explicitly specified set\n         /// of projects.\n@@ -309,29 +315,33 @@ config_data! {\n         linkedProjects: Vec<ManifestOrProjectJson> = \"[]\",\n \n         /// Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n-        lruCapacity: Option<usize>                 = \"null\",\n+        lru_capacity: Option<usize>                 = \"null\",\n \n         /// Whether to show `can't find Cargo.toml` error message.\n         notifications_cargoTomlNotFound: bool      = \"true\",\n \n+        /// Warm up caches on project load.\n+        primeCaches_enable: bool = \"true\",\n         /// How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n         primeCaches_numThreads: ParallelPrimeCachesNumThreads = \"0\",\n \n-        /// Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n+        /// Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n+        procMacro_attributes_enable: bool = \"true\",\n+        /// Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\n         procMacro_enable: bool                     = \"true\",\n-        /// Internal config, path to proc-macro server executable (typically,\n-        /// this is rust-analyzer itself, but we override this in tests).\n-        procMacro_server: Option<PathBuf>          = \"null\",\n         /// These proc-macros will be ignored when trying to expand them.\n         ///\n         /// This config takes a map of crate names with the exported proc-macro names to ignore as values.\n         procMacro_ignored: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n+        /// Internal config, path to proc-macro server executable (typically,\n+        /// this is rust-analyzer itself, but we override this in tests).\n+        procMacro_server: Option<PathBuf>          = \"null\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n-        runnables_overrideCargo: Option<String> = \"null\",\n+        runnables_command: Option<String> = \"null\",\n         /// Additional arguments to be passed to cargo for runnables such as\n         /// tests or binaries. For example, it may be `--release`.\n-        runnables_cargoExtraArgs: Vec<String>   = \"[]\",\n+        runnables_extraArgs: Vec<String>   = \"[]\",\n \n         /// Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\n         /// projects, or \"discover\" to try to automatically find it if the `rustc-dev` component\n@@ -341,7 +351,7 @@ config_data! {\n         /// crates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n         ///\n         /// This option does not take effect until rust-analyzer is restarted.\n-        rustcSource: Option<String> = \"null\",\n+        rustc_source: Option<String> = \"null\",\n \n         /// Additional arguments to `rustfmt`.\n         rustfmt_extraArgs: Vec<String>               = \"[]\",\n@@ -351,16 +361,28 @@ config_data! {\n         /// Enables the use of rustfmt's unstable range formatting command for the\n         /// `textDocument/rangeFormatting` request. The rustfmt option is unstable and only\n         /// available on a nightly build.\n-        rustfmt_enableRangeFormatting: bool = \"false\",\n+        rustfmt_rangeFormatting_enable: bool = \"false\",\n+\n+        /// Use semantic tokens for strings.\n+        ///\n+        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n+        /// their contents.\n+        semanticHighlighting_strings_enable: bool = \"true\",\n+\n+        /// Show full signature of the callable. Only shows parameters if disabled.\n+        signatureInfo_detail: SignatureDetail                           = \"\\\"full\\\"\",\n+        /// Show documentation.\n+        signatureInfo_documentation_enable: bool                       = \"true\",\n \n-        /// Workspace symbol search scope.\n-        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n         /// Workspace symbol search kind.\n         workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n         /// Limits the number of items returned from a workspace symbol search (Defaults to 128).\n         /// Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n         /// Other clients requires all results upfront and might require a higher limit.\n         workspace_symbol_search_limit: usize = \"128\",\n+        /// Workspace symbol search scope.\n+        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n     }\n }\n \n@@ -400,6 +422,11 @@ impl From<ProjectJson> for LinkedProject {\n     }\n }\n \n+pub struct CallInfoConfig {\n+    pub params_only: bool,\n+    pub docs: bool,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LensConfig {\n     // runnables\n@@ -411,7 +438,8 @@ pub struct LensConfig {\n \n     // references\n     pub method_refs: bool,\n-    pub refs: bool, // for Struct, Enum, Union and Trait\n+    pub refs_adt: bool,   // for Struct, Enum, Union and Trait\n+    pub refs_trait: bool, // for Struct, Enum, Union and Trait\n     pub enum_variant_refs: bool,\n }\n \n@@ -421,7 +449,8 @@ impl LensConfig {\n             || self.debug\n             || self.implementations\n             || self.method_refs\n-            || self.refs\n+            || self.refs_adt\n+            || self.refs_trait\n             || self.enum_variant_refs\n     }\n \n@@ -434,7 +463,7 @@ impl LensConfig {\n     }\n \n     pub fn references(&self) -> bool {\n-        self.method_refs || self.refs || self.enum_variant_refs\n+        self.method_refs || self.refs_adt || self.refs_trait || self.enum_variant_refs\n     }\n }\n \n@@ -520,6 +549,7 @@ pub struct ClientCommandsConfig {\n     pub trigger_parameter_hints: bool,\n }\n \n+#[derive(Debug)]\n pub struct ConfigUpdateError {\n     errors: Vec<(String, serde_json::Error)>,\n }\n@@ -564,9 +594,10 @@ impl Config {\n                 .into_iter()\n                 .map(AbsPathBuf::assert)\n                 .collect();\n+        patch_old_style::patch_json_for_outdated_configs(&mut json);\n         self.data = ConfigData::from_json(json, &mut errors);\n         self.snippets.clear();\n-        for (name, def) in self.data.completion_snippets.iter() {\n+        for (name, def) in self.data.completion_snippets_custom.iter() {\n             if def.prefix.is_empty() && def.postfix.is_empty() {\n                 continue;\n             }\n@@ -685,7 +716,7 @@ impl Config {\n     }\n \n     pub fn prefill_caches(&self) -> bool {\n-        self.data.cache_warmup\n+        self.data.primeCaches_enable\n     }\n \n     pub fn location_link(&self) -> bool {\n@@ -795,9 +826,9 @@ impl Config {\n \n     pub fn diagnostics(&self) -> DiagnosticsConfig {\n         DiagnosticsConfig {\n-            disable_experimental: !self.data.diagnostics_enableExperimental,\n+            disable_experimental: !self.data.diagnostics_experimental_enable,\n             disabled: self.data.diagnostics_disabled.clone(),\n-            expr_fill_default: match self.data.assist_exprFillDefault {\n+            expr_fill_default: match self.data.assist_expressionFillDefault {\n                 ExprFillDefaultDef::Todo => ExprFillDefaultMode::Todo,\n                 ExprFillDefaultDef::Default => ExprFillDefaultMode::Default,\n             },\n@@ -813,7 +844,7 @@ impl Config {\n     }\n \n     pub fn lru_capacity(&self) -> Option<usize> {\n-        self.data.lruCapacity\n+        self.data.lru_capacity\n     }\n \n     pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, Vec<OsString>)> {\n@@ -832,7 +863,7 @@ impl Config {\n     }\n \n     pub fn expand_proc_attr_macros(&self) -> bool {\n-        self.data.experimental_procAttrMacros\n+        self.data.procMacro_attributes_enable\n     }\n \n     pub fn files(&self) -> FilesConfig {\n@@ -857,11 +888,11 @@ impl Config {\n     }\n \n     pub fn run_build_scripts(&self) -> bool {\n-        self.data.cargo_runBuildScripts || self.data.procMacro_enable\n+        self.data.cargo_buildScripts_enable || self.data.procMacro_enable\n     }\n \n     pub fn cargo(&self) -> CargoConfig {\n-        let rustc_source = self.data.rustcSource.as_ref().map(|rustc_src| {\n+        let rustc_source = self.data.rustc_source.as_ref().map(|rustc_src| {\n             if rustc_src == \"discover\" {\n                 RustcSource::Discover\n             } else {\n@@ -871,14 +902,17 @@ impl Config {\n \n         CargoConfig {\n             no_default_features: self.data.cargo_noDefaultFeatures,\n-            all_features: self.data.cargo_allFeatures,\n-            features: self.data.cargo_features.clone(),\n+            all_features: matches!(self.data.cargo_features, CargoFeatures::All),\n+            features: match &self.data.cargo_features {\n+                CargoFeatures::All => vec![],\n+                CargoFeatures::Listed(it) => it.clone(),\n+            },\n             target: self.data.cargo_target.clone(),\n             no_sysroot: self.data.cargo_noSysroot,\n             rustc_source,\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n-            wrap_rustc_in_build_scripts: self.data.cargo_useRustcWrapperForBuildScripts,\n-            run_build_script_command: self.data.cargo_runBuildScriptsCommand.clone(),\n+            wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n+            run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n         }\n     }\n \n@@ -891,7 +925,7 @@ impl Config {\n             }\n             Some(_) | None => RustfmtConfig::Rustfmt {\n                 extra_args: self.data.rustfmt_extraArgs.clone(),\n-                enable_range_formatting: self.data.rustfmt_enableRangeFormatting,\n+                enable_range_formatting: self.data.rustfmt_rangeFormatting_enable,\n             },\n         }\n     }\n@@ -918,15 +952,19 @@ impl Config {\n                     .data\n                     .checkOnSave_noDefaultFeatures\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n-                all_features: self\n-                    .data\n-                    .checkOnSave_allFeatures\n-                    .unwrap_or(self.data.cargo_allFeatures),\n-                features: self\n+                all_features: matches!(\n+                    self.data.checkOnSave_features.as_ref().unwrap_or(&self.data.cargo_features),\n+                    CargoFeatures::All\n+                ),\n+                features: match self\n                     .data\n                     .checkOnSave_features\n                     .clone()\n-                    .unwrap_or_else(|| self.data.cargo_features.clone()),\n+                    .unwrap_or_else(|| self.data.cargo_features.clone())\n+                {\n+                    CargoFeatures::All => vec![],\n+                    CargoFeatures::Listed(it) => it,\n+                },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n             },\n         };\n@@ -935,25 +973,25 @@ impl Config {\n \n     pub fn runnables(&self) -> RunnablesConfig {\n         RunnablesConfig {\n-            override_cargo: self.data.runnables_overrideCargo.clone(),\n-            cargo_extra_args: self.data.runnables_cargoExtraArgs.clone(),\n+            override_cargo: self.data.runnables_command.clone(),\n+            cargo_extra_args: self.data.runnables_extraArgs.clone(),\n         }\n     }\n \n     pub fn inlay_hints(&self) -> InlayHintsConfig {\n         InlayHintsConfig {\n             render_colons: self.data.inlayHints_renderColons,\n-            type_hints: self.data.inlayHints_typeHints,\n-            parameter_hints: self.data.inlayHints_parameterHints,\n-            chaining_hints: self.data.inlayHints_chainingHints,\n-            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints,\n+            type_hints: self.data.inlayHints_typeHints_enable,\n+            parameter_hints: self.data.inlayHints_parameterHints_enable,\n+            chaining_hints: self.data.inlayHints_chainingHints_enable,\n+            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints_enable,\n             lifetime_elision_hints: match self.data.inlayHints_lifetimeElisionHints_enable {\n                 LifetimeElisionDef::Always => LifetimeElisionHints::Always,\n                 LifetimeElisionDef::Never => LifetimeElisionHints::Never,\n                 LifetimeElisionDef::SkipTrivial => LifetimeElisionHints::SkipTrivial,\n             },\n-            hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n-            reborrow_hints: self.data.inlayHints_reborrowHints,\n+            hide_named_constructor_hints: self.data.inlayHints_typeHints_hideNamedConstructor,\n+            reborrow_hints: self.data.inlayHints_reborrowHints_enable,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n                 .inlayHints_lifetimeElisionHints_useParameterNames,\n@@ -963,20 +1001,20 @@ impl Config {\n \n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n-            granularity: match self.data.assist_importGranularity {\n+            granularity: match self.data.imports_granularity_group {\n                 ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n                 ImportGranularityDef::Item => ImportGranularity::Item,\n                 ImportGranularityDef::Crate => ImportGranularity::Crate,\n                 ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n-            enforce_granularity: self.data.assist_importEnforceGranularity,\n-            prefix_kind: match self.data.assist_importPrefix {\n+            enforce_granularity: self.data.imports_granularity_enforce,\n+            prefix_kind: match self.data.imports_prefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n                 ImportPrefixDef::BySelf => PrefixKind::BySelf,\n             },\n-            group: self.data.assist_importGroup,\n-            skip_glob_imports: !self.data.assist_allowMergingIntoGlobImports,\n+            group: self.data.imports_group_enable,\n+            skip_glob_imports: !self.data.imports_merge_glob,\n         }\n     }\n \n@@ -987,8 +1025,14 @@ impl Config {\n                 && completion_item_edit_resolve(&self.caps),\n             enable_self_on_the_fly: self.data.completion_autoself_enable,\n             enable_private_editable: self.data.completion_privateEditable_enable,\n-            add_call_parenthesis: self.data.completion_addCallParenthesis,\n-            add_call_argument_snippets: self.data.completion_addCallArgumentSnippets,\n+            add_call_parenthesis: matches!(\n+                self.data.completion_callable_snippets,\n+                Some(CallableCompletionDef::AddParentheses)\n+            ),\n+            add_call_argument_snippets: matches!(\n+                self.data.completion_callable_snippets,\n+                Some(CallableCompletionDef::FillArguments)\n+            ),\n             insert_use: self.insert_use_config(),\n             snippet_cap: SnippetCap::new(try_or_def!(\n                 self.caps\n@@ -1021,40 +1065,45 @@ impl Config {\n         }\n     }\n \n-    pub fn call_info_full(&self) -> bool {\n-        self.data.callInfo_full\n+    pub fn call_info(&self) -> CallInfoConfig {\n+        CallInfoConfig {\n+            params_only: matches!(self.data.signatureInfo_detail, SignatureDetail::Parameters),\n+            docs: self.data.signatureInfo_documentation_enable,\n+        }\n     }\n \n     pub fn lens(&self) -> LensConfig {\n         LensConfig {\n-            run: self.data.lens_enable && self.data.lens_run,\n-            debug: self.data.lens_enable && self.data.lens_debug,\n-            implementations: self.data.lens_enable && self.data.lens_implementations,\n-            method_refs: self.data.lens_enable && self.data.lens_methodReferences,\n-            refs: self.data.lens_enable && self.data.lens_references,\n-            enum_variant_refs: self.data.lens_enable && self.data.lens_enumVariantReferences,\n+            run: self.data.lens_enable && self.data.lens_run_enable,\n+            debug: self.data.lens_enable && self.data.lens_debug_enable,\n+            implementations: self.data.lens_enable && self.data.lens_implementations_enable,\n+            method_refs: self.data.lens_enable && self.data.lens_references_method_enable,\n+            refs_adt: self.data.lens_enable && self.data.lens_references_adt_enable,\n+            refs_trait: self.data.lens_enable && self.data.lens_references_trait_enable,\n+            enum_variant_refs: self.data.lens_enable\n+                && self.data.lens_references_enumVariant_enable,\n         }\n     }\n \n     pub fn hover_actions(&self) -> HoverActionsConfig {\n-        let enable = self.experimental(\"hoverActions\") && self.data.hoverActions_enable;\n+        let enable = self.experimental(\"hoverActions\") && self.data.hover_actions_enable;\n         HoverActionsConfig {\n-            implementations: enable && self.data.hoverActions_implementations,\n-            references: enable && self.data.hoverActions_references,\n-            run: enable && self.data.hoverActions_run,\n-            debug: enable && self.data.hoverActions_debug,\n-            goto_type_def: enable && self.data.hoverActions_gotoTypeDef,\n+            implementations: enable && self.data.hover_actions_implementations_enable,\n+            references: enable && self.data.hover_actions_references_enable,\n+            run: enable && self.data.hover_actions_run_enable,\n+            debug: enable && self.data.hover_actions_debug_enable,\n+            goto_type_def: enable && self.data.hover_actions_gotoTypeDef_enable,\n         }\n     }\n \n     pub fn highlighting_strings(&self) -> bool {\n-        self.data.highlighting_strings\n+        self.data.semanticHighlighting_strings_enable\n     }\n \n     pub fn hover(&self) -> HoverConfig {\n         HoverConfig {\n-            links_in_hover: self.data.hover_linksInHover,\n-            documentation: self.data.hover_documentation.then(|| {\n+            links_in_hover: self.data.hover_links_enable,\n+            documentation: self.data.hover_documentation_enable.then(|| {\n                 let is_markdown = try_or_def!(self\n                     .caps\n                     .text_document\n@@ -1132,10 +1181,10 @@ impl Config {\n \n     pub fn highlight_related(&self) -> HighlightRelatedConfig {\n         HighlightRelatedConfig {\n-            references: self.data.highlightRelated_references,\n-            break_points: self.data.highlightRelated_breakPoints,\n-            exit_points: self.data.highlightRelated_exitPoints,\n-            yield_points: self.data.highlightRelated_yieldPoints,\n+            references: self.data.highlightRelated_references_enable,\n+            break_points: self.data.highlightRelated_breakPoints_enable,\n+            exit_points: self.data.highlightRelated_exitPoints_enable,\n+            yield_points: self.data.highlightRelated_yieldPoints_enable,\n         }\n     }\n \n@@ -1146,9 +1195,106 @@ impl Config {\n         }\n     }\n }\n-\n // Deserialization definitions\n \n+macro_rules! create_bool_or_string_de {\n+    ($ident:ident<$bool:literal, $string:literal>) => {\n+        fn $ident<'de, D>(d: D) -> Result<(), D::Error>\n+        where\n+            D: serde::Deserializer<'de>,\n+        {\n+            struct V;\n+            impl<'de> serde::de::Visitor<'de> for V {\n+                type Value = ();\n+\n+                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+                    formatter.write_str(concat!(\n+                        stringify!($bool),\n+                        \" or \\\"\",\n+                        stringify!($string),\n+                        \"\\\"\"\n+                    ))\n+                }\n+\n+                fn visit_bool<E>(self, v: bool) -> Result<Self::Value, E>\n+                where\n+                    E: serde::de::Error,\n+                {\n+                    match v {\n+                        $bool => Ok(()),\n+                        _ => Err(serde::de::Error::invalid_value(\n+                            serde::de::Unexpected::Bool(v),\n+                            &self,\n+                        )),\n+                    }\n+                }\n+\n+                fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>\n+                where\n+                    E: serde::de::Error,\n+                {\n+                    match v {\n+                        $string => Ok(()),\n+                        _ => Err(serde::de::Error::invalid_value(\n+                            serde::de::Unexpected::Str(v),\n+                            &self,\n+                        )),\n+                    }\n+                }\n+\n+                fn visit_enum<A>(self, a: A) -> Result<Self::Value, A::Error>\n+                where\n+                    A: serde::de::EnumAccess<'de>,\n+                {\n+                    use serde::de::VariantAccess;\n+                    let (variant, va) = a.variant::<&'de str>()?;\n+                    va.unit_variant()?;\n+                    match variant {\n+                        $string => Ok(()),\n+                        _ => Err(serde::de::Error::invalid_value(\n+                            serde::de::Unexpected::Str(variant),\n+                            &self,\n+                        )),\n+                    }\n+                }\n+            }\n+            d.deserialize_any(V)\n+        }\n+    };\n+}\n+create_bool_or_string_de!(true_or_always<true, \"always\">);\n+create_bool_or_string_de!(false_or_never<false, \"never\">);\n+\n+macro_rules! named_unit_variant {\n+    ($variant:ident) => {\n+        pub(super) fn $variant<'de, D>(deserializer: D) -> Result<(), D::Error>\n+        where\n+            D: serde::Deserializer<'de>,\n+        {\n+            struct V;\n+            impl<'de> serde::de::Visitor<'de> for V {\n+                type Value = ();\n+                fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                    f.write_str(concat!(\"\\\"\", stringify!($variant), \"\\\"\"))\n+                }\n+                fn visit_str<E: serde::de::Error>(self, value: &str) -> Result<Self::Value, E> {\n+                    if value == stringify!($variant) {\n+                        Ok(())\n+                    } else {\n+                        Err(E::invalid_value(serde::de::Unexpected::Str(value), &self))\n+                    }\n+                }\n+            }\n+            deserializer.deserialize_str(V)\n+        }\n+    };\n+}\n+\n+mod de_unit_v {\n+    named_unit_variant!(all);\n+    named_unit_variant!(skip_trivial);\n+}\n+\n #[derive(Deserialize, Debug, Clone, Copy)]\n #[serde(rename_all = \"snake_case\")]\n enum SnippetScopeDef {\n@@ -1219,31 +1365,42 @@ enum ManifestOrProjectJson {\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n pub enum ExprFillDefaultDef {\n-    #[serde(alias = \"todo\")]\n     Todo,\n-    #[serde(alias = \"default\")]\n     Default,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum ImportGranularityDef {\n     Preserve,\n-    #[serde(alias = \"none\")]\n     Item,\n-    #[serde(alias = \"full\")]\n     Crate,\n-    #[serde(alias = \"last\")]\n     Module,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n+enum CallableCompletionDef {\n+    FillArguments,\n+    AddParentheses,\n+}\n+\n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n+enum CargoFeatures {\n+    #[serde(deserialize_with = \"de_unit_v::all\")]\n+    All,\n+    Listed(Vec<String>),\n+}\n+\n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n enum LifetimeElisionDef {\n-    #[serde(alias = \"true\")]\n+    #[serde(deserialize_with = \"true_or_always\")]\n     Always,\n-    #[serde(alias = \"false\")]\n+    #[serde(deserialize_with = \"false_or_never\")]\n     Never,\n+    #[serde(deserialize_with = \"de_unit_v::skip_trivial\")]\n     SkipTrivial,\n }\n \n@@ -1264,6 +1421,13 @@ enum WorkspaceSymbolSearchScopeDef {\n     WorkspaceAndDependencies,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum SignatureDetail {\n+    Full,\n+    Parameters,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum WorkspaceSymbolSearchKindDef {\n@@ -1317,6 +1481,11 @@ macro_rules! _config_data {\n                 ])\n             }\n         }\n+\n+        #[test]\n+        fn fields_are_sorted() {\n+            [$(stringify!($field)),*].windows(2).for_each(|w| assert!(w[0] <= w[1], \"{} <= {} does not hold\", w[0], w[1]));\n+        }\n     };\n }\n use _config_data as config_data;\n@@ -1329,7 +1498,6 @@ fn get_field<T: DeserializeOwned>(\n     default: &str,\n ) -> T {\n     let default = serde_json::from_str(default).unwrap();\n-\n     // XXX: check alias first, to work-around the VS Code where it pre-fills the\n     // defaults instead of sending an empty object.\n     alias\n@@ -1499,14 +1667,46 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"maximum\": 255\n         },\n         \"LifetimeElisionDef\" => set! {\n-            \"type\": \"string\",\n+            \"type\": [\"string\", \"boolean\"],\n             \"enum\": [\"always\", \"never\", \"skip_trivial\"],\n             \"enumDescriptions\": [\n                 \"Always show lifetime elision hints.\",\n                 \"Never show lifetime elision hints.\",\n                 \"Only show lifetime elision hints if a return type is involved.\"\n             ],\n         },\n+        \"CargoFeatures\" => set! {\n+            \"type\": [\"string\", \"array\"],\n+            \"items\": { \"type\": \"string\" },\n+            \"enum\": [\"all\"],\n+            \"enumDescriptions\": [\n+                \"Pass `--all-features` to cargo\",\n+            ],\n+        },\n+        \"Option<CargoFeatures>\" => set! {\n+            \"type\": [\"string\", \"array\", \"null\"],\n+            \"items\": { \"type\": \"string\" },\n+            \"enum\": [\"all\"],\n+            \"enumDescriptions\": [\n+                \"Pass `--all-features` to cargo\",\n+            ],\n+        },\n+        \"Option<CallableCompletionDef>\" => set! {\n+            \"type\": [\"string\", \"null\"],\n+            \"enum\": [\"fill_arguments\", \"add_parentheses\"],\n+            \"enumDescriptions\": [\n+                \"Add call parentheses and pre-fill arguments\",\n+                \"Add call parentheses\",\n+            ],\n+        },\n+        \"SignatureDetail\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"full\", \"parameters\"],\n+            \"enumDescriptions\": [\n+                \"Show the entire signature.\",\n+                \"Show only the parameters.\"\n+            ],\n+        },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),\n     }\n "}, {"sha": "277364cefa0cc14370b2b80ce4c3fcb5daf9049f", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -0,0 +1,115 @@\n+//! See [`patch_json_for_outdated_configs`]\n+use serde_json::{json, Value};\n+\n+/// This function patches the json config to the new expected keys.\n+/// That is we try to load old known config keys here and convert them to the new ones.\n+/// See https://github.com/rust-lang/rust-analyzer/pull/12010\n+pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n+    let copy = json.clone();\n+\n+    macro_rules! patch {\n+        ($(\n+            $($src:ident).+ -> $($dst:ident).+ ;\n+        )+) => { $(\n+            if let Some(it) = copy.pointer(concat!($(\"/\", stringify!($src)),+)).cloned() {\n+                let mut last = it;\n+                for segment in [$(stringify!($dst)),+].into_iter().rev() {\n+                    last = Value::Object(serde_json::Map::from_iter(std::iter::once((segment.to_string(), last))));\n+                }\n+\n+                merge(json, last);\n+            }\n+        )+ };\n+    }\n+\n+    patch! {\n+        assist.allowMergingIntoGlobImports -> imports.merge.glob;\n+        assist.exprFillDefault -> assist.expressionFillDefault;\n+        assist.importEnforceGranularity -> imports.granularity.enforce;\n+        assist.importGranularity -> imports.granularity.group;\n+        assist.importMergeBehavior -> imports.granularity.group;\n+        assist.importMergeBehaviour -> imports.granularity.group;\n+        assist.importGroup -> imports.group.enable;\n+        assist.importPrefix -> imports.prefix;\n+        cache.warmup -> primeCaches.enable;\n+        cargo.loadOutDirsFromCheck -> cargo.buildScripts.enable;\n+        cargo.runBuildScripts -> cargo.runBuildScripts.overrideCommand;\n+        cargo.runBuildScriptsCommand -> cargo.runBuildScripts.overrideCommand;\n+        cargo.useRustcWrapperForBuildScripts -> cargo.runBuildScripts.useRustcWrapper;\n+        completion.snippets -> completion.snippets.custom;\n+        diagnostics.enableExperimental -> diagnostics.experimental.enable;\n+        experimental.procAttrMacros -> procMacro.attributes.enable;\n+        highlighting.strings -> semanticHighlighting.strings.enable;\n+        highlightRelated.breakPoints -> semanticHighlighting.breakPoints.enable;\n+        highlightRelated.exitPoints -> semanticHighlighting.exitPoints.enable;\n+        highlightRelated.yieldPoints -> semanticHighlighting.yieldPoints.enable;\n+        highlightRelated.references -> semanticHighlighting.references.enable;\n+        hover.documentation -> hover.documentation.enable;\n+        hover.linksInHover -> hover.links.enable;\n+        hoverActions.linksInHover -> hover.links.enable;\n+        hoverActions.debug -> hoverActions.debug.enable;\n+        hoverActions.enable -> hoverActions.enable.enable;\n+        hoverActions.gotoTypeDef -> hoverActions.gotoTypeDef.enable;\n+        hoverActions.implementations -> hoverActions.implementations.enable;\n+        hoverActions.references -> hoverActions.references.enable;\n+        hoverActions.run -> hoverActions.run.enable;\n+        inlayHints.chainingHints -> inlayHints.chainingHints.enable;\n+        inlayHints.closureReturnTypeHints -> inlayHints.closureReturnTypeHints.enable;\n+        inlayHints.hideNamedConstructorHints -> inlayHints.typeHints.hideNamedConstructorHints;\n+        inlayHints.parameterHints -> inlayHints.parameterHints.enable;\n+        inlayHints.reborrowHints -> inlayHints.reborrowHints.enable;\n+        inlayHints.typeHints -> inlayHints.typeHints.enable;\n+        lruCapacity -> lru.capacity;\n+        runnables.cargoExtraArgs -> runnables.extraArgs ;\n+        runnables.overrideCargo -> runnables.command ;\n+        rustcSource -> rustc.source;\n+        rustfmt.enableRangeFormatting -> rustfmt.rangeFormatting.enable;\n+    }\n+\n+    // callInfo_full -> signatureInfo_detail, signatureInfo_documentation_enable\n+    if let Some(Value::Bool(b)) = copy.pointer(\"/callInfo/full\") {\n+        let sig_info = match b {\n+            true => json!({ \"signatureInfo\": {\n+                \"documentation\": {\"enable\": true}},\n+                \"detail\": \"full\"\n+            }),\n+            false => json!({ \"signatureInfo\": {\n+                \"documentation\": {\"enable\": false}},\n+                \"detail\": \"parameters\"\n+            }),\n+        };\n+        merge(json, sig_info);\n+    }\n+\n+    // cargo_allFeatures, cargo_features -> cargo_features\n+    if let Some(Value::Bool(true)) = copy.pointer(\"/cargo/allFeatures\") {\n+        merge(json, json!({ \"cargo\": { \"features\": \"all\" } }));\n+    }\n+\n+    // checkOnSave_allFeatures, checkOnSave_features -> checkOnSave_features\n+    if let Some(Value::Bool(true)) = copy.pointer(\"/checkOnSave/allFeatures\") {\n+        merge(json, json!({ \"checkOnSave\": { \"features\": \"all\" } }));\n+    }\n+\n+    // completion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n+    let res = match (\n+        copy.pointer(\"/completion/addCallArgumentSnippets\"),\n+        copy.pointer(\"/completion/addCallParenthesis\"),\n+    ) {\n+        (Some(Value::Bool(true)), Some(Value::Bool(true))) => json!(\"fill_arguments\"),\n+        (Some(Value::Bool(true)), _) => json!(\"add_parentheses\"),\n+        (_, _) => json!(null),\n+    };\n+    merge(json, json!({ \"completion\": { \"callable\": {\"snippets\": res }} }));\n+}\n+\n+fn merge(dst: &mut Value, src: Value) {\n+    match (dst, src) {\n+        (Value::Object(dst), Value::Object(src)) => {\n+            for (k, v) in src {\n+                merge(dst.entry(k).or_insert(v.clone()), v)\n+            }\n+        }\n+        (dst, src) => *dst = src,\n+    }\n+}"}, {"sha": "ec897ec9d955fc4812281410ca7429a225c16314", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -911,8 +911,8 @@ pub(crate) fn handle_signature_help(\n         Some(it) => it,\n         None => return Ok(None),\n     };\n-    let concise = !snap.config.call_info_full();\n-    let res = to_proto::signature_help(help, concise, snap.config.signature_help_label_offsets());\n+    let config = snap.config.call_info();\n+    let res = to_proto::signature_help(help, config, snap.config.signature_help_label_offsets());\n     Ok(Some(res))\n }\n \n@@ -1215,7 +1215,7 @@ pub(crate) fn handle_code_lens(\n                 .unwrap_or(false),\n             annotate_runnables: lens_config.runnable(),\n             annotate_impls: lens_config.implementations,\n-            annotate_references: lens_config.refs,\n+            annotate_references: lens_config.refs_adt,\n             annotate_method_references: lens_config.method_refs,\n             annotate_enum_variant_references: lens_config.enum_variant_refs,\n         },"}, {"sha": "ffcea078ce7e704ac7d49ca4e099d47c264f7cd5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -18,7 +18,7 @@ use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::Config,\n+    config::{CallInfoConfig, Config},\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext,\n@@ -338,11 +338,11 @@ fn completion_item(\n \n pub(crate) fn signature_help(\n     call_info: SignatureHelp,\n-    concise: bool,\n+    config: CallInfoConfig,\n     label_offsets: bool,\n ) -> lsp_types::SignatureHelp {\n-    let (label, parameters) = match (concise, label_offsets) {\n-        (_, false) => {\n+    let (label, parameters) = match (!config.params_only, label_offsets) {\n+        (concise, false) => {\n             let params = call_info\n                 .parameter_labels()\n                 .map(|label| lsp_types::ParameterInformation {\n@@ -388,16 +388,12 @@ pub(crate) fn signature_help(\n         }\n     };\n \n-    let documentation = if concise {\n-        None\n-    } else {\n-        call_info.doc.map(|doc| {\n-            lsp_types::Documentation::MarkupContent(lsp_types::MarkupContent {\n-                kind: lsp_types::MarkupKind::Markdown,\n-                value: doc,\n-            })\n+    let documentation = call_info.doc.filter(|_| config.docs).map(|doc| {\n+        lsp_types::Documentation::MarkupContent(lsp_types::MarkupContent {\n+            kind: lsp_types::MarkupKind::Markdown,\n+            value: doc,\n         })\n-    };\n+    });\n \n     let active_parameter = call_info.active_parameter.map(|it| it as u32);\n "}, {"sha": "143b63e11c59abcaa02fdf6873159ef09c2b466e", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -685,7 +685,7 @@ version = \\\"0.0.0\\\"\n #[test]\n fn out_dirs_check() {\n     if skip_slow_tests() {\n-        return;\n+        // return;\n     }\n \n     let server = Project::with_fixture(\n@@ -737,7 +737,9 @@ fn main() {\n     )\n     .with_config(serde_json::json!({\n         \"cargo\": {\n-            \"loadOutDirsFromCheck\": true,\n+            \"buildScripts\": {\n+                \"enable\": true\n+            },\n             \"noSysroot\": true,\n         }\n     }))\n@@ -890,7 +892,9 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     )\n     .with_config(serde_json::json!({\n         \"cargo\": {\n-            \"loadOutDirsFromCheck\": true,\n+            \"buildScripts\": {\n+                \"enable\": true\n+            },\n             \"noSysroot\": true,\n         },\n         \"procMacro\": {"}, {"sha": "36bffe3210e8744768476b9c57ce712517fea91d", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -36,7 +36,9 @@ impl<'a> Project<'a> {\n                     // Loading standard library is costly, let's ignore it by default\n                     \"noSysroot\": true,\n                     // Can't use test binary as rustc wrapper.\n-                    \"useRustcWrapperForBuildScripts\": false,\n+                    \"buildScripts\": {\n+                        \"useRustcWrapper\": false\n+                    },\n                 }\n             }),\n         }\n@@ -137,7 +139,7 @@ impl<'a> Project<'a> {\n             },\n         );\n         config.discovered_projects = Some(discovered_projects);\n-        let _ = config.update(self.config);\n+        config.update(self.config).expect(\"invalid config\");\n \n         Server::new(tmp_dir, config)\n     }"}, {"sha": "bc513601a802cb68d9ac23324e6640fd9498c9a9", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 210, "deletions": 195, "changes": 405, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -1,159 +1,150 @@\n-[[rust-analyzer.assist.exprFillDefault]]rust-analyzer.assist.exprFillDefault (default: `\"todo\"`)::\n+[[rust-analyzer.assist.expressionFillDefault]]rust-analyzer.assist.expressionFillDefault (default: `\"todo\"`)::\n +\n --\n-Placeholder for missing expressions in assists.\n---\n-[[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n-+\n---\n-How imports should be grouped into use statements.\n---\n-[[rust-analyzer.assist.importEnforceGranularity]]rust-analyzer.assist.importEnforceGranularity (default: `false`)::\n-+\n---\n-Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n---\n-[[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n-+\n---\n-The path structure for newly inserted paths to use.\n---\n-[[rust-analyzer.assist.importGroup]]rust-analyzer.assist.importGroup (default: `true`)::\n-+\n---\n-Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n---\n-[[rust-analyzer.assist.allowMergingIntoGlobImports]]rust-analyzer.assist.allowMergingIntoGlobImports (default: `true`)::\n-+\n---\n-Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n---\n-[[rust-analyzer.cache.warmup]]rust-analyzer.cache.warmup (default: `true`)::\n-+\n---\n-Warm up caches on project load.\n---\n-[[rust-analyzer.callInfo.full]]rust-analyzer.callInfo.full (default: `true`)::\n-+\n---\n-Show function name and docs in parameter hints.\n+Placeholder expression to use for missing expressions in assists.\n --\n [[rust-analyzer.cargo.autoreload]]rust-analyzer.cargo.autoreload (default: `true`)::\n +\n --\n Automatically refresh project info via `cargo metadata` on\n `Cargo.toml` or `.cargo/config.toml` changes.\n --\n-[[rust-analyzer.cargo.allFeatures]]rust-analyzer.cargo.allFeatures (default: `false`)::\n+[[rust-analyzer.cargo.buildScripts.enable]]rust-analyzer.cargo.buildScripts.enable (default: `true`)::\n +\n --\n-Activate all available features (`--all-features`).\n+Run build scripts (`build.rs`) for more precise code analysis.\n --\n-[[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n+[[rust-analyzer.cargo.buildScripts.overrideCommand]]rust-analyzer.cargo.buildScripts.overrideCommand (default: `null`)::\n +\n --\n-Unsets `#[cfg(test)]` for the specified crates.\n+Override the command rust-analyzer uses to run build scripts and\n+build procedural macros. The command is required to output json\n+and should therefor include `--message-format=json` or a similar\n+option.\n+\n+By default, a cargo invocation will be constructed for the configured\n+targets and features, with the following base command line:\n+\n+```bash\n+cargo check --quiet --workspace --message-format=json --all-targets\n+```\n+.\n+--\n+[[rust-analyzer.cargo.buildScripts.useRustcWrapper]]rust-analyzer.cargo.buildScripts.useRustcWrapper (default: `true`)::\n++\n+--\n+Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n+avoid compiling unnecessary things.\n --\n [[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n +\n --\n List of features to activate.\n+\n+Set this to `\"all\"` to pass `--all-features` to cargo.\n --\n-[[rust-analyzer.cargo.runBuildScripts]]rust-analyzer.cargo.runBuildScripts (default: `true`)::\n+[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n +\n --\n-Run build scripts (`build.rs`) for more precise code analysis.\n+Whether to pass `--no-default-features` to cargo.\n --\n-[[rust-analyzer.cargo.runBuildScriptsCommand]]rust-analyzer.cargo.runBuildScriptsCommand (default: `null`)::\n+[[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n +\n --\n-Advanced option, fully override the command rust-analyzer uses to\n-run build scripts and build procedural macros. The command should\n-include `--message-format=json` or a similar option.\n+Internal config for debugging, disables loading of sysroot crates.\n --\n-[[rust-analyzer.cargo.useRustcWrapperForBuildScripts]]rust-analyzer.cargo.useRustcWrapperForBuildScripts (default: `true`)::\n+[[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n +\n --\n-Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n-avoid compiling unnecessary things.\n+Compilation target override (target triple).\n --\n-[[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n+[[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n +\n --\n-Do not activate the `default` feature.\n+Unsets `#[cfg(test)]` for the specified crates.\n --\n-[[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n+[[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n +\n --\n-Compilation target (target triple).\n+Check all targets and tests (`--all-targets`).\n --\n-[[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n+[[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n +\n --\n-Internal config for debugging, disables loading of sysroot crates.\n+Cargo command to use for `cargo check`.\n --\n [[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n +\n --\n Run specified `cargo check` command for diagnostics on save.\n --\n-[[rust-analyzer.checkOnSave.allFeatures]]rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n+[[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n +\n --\n-Check with all features (`--all-features`).\n-Defaults to `#rust-analyzer.cargo.allFeatures#`.\n+Extra arguments for `cargo check`.\n --\n-[[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n+[[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n +\n --\n-Check all targets and tests (`--all-targets`).\n+List of features to activate. Defaults to\n+`#rust-analyzer.cargo.features#`.\n+\n+Set to `\"all\"` to pass `--all-features` to cargo.\n --\n-[[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n+[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n +\n --\n-Cargo command to use for `cargo check`.\n+Do not activate the `default` feature.\n --\n-[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n+[[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n +\n --\n-Do not activate the `default` feature.\n+Override the command rust-analyzer uses to  run build scripts and\n+build procedural macros. The command is required to output json\n+and should therefor include `--message-format=json` or a similar\n+option.\n+\n+An example command would be:\n+\n+```bash\n+cargo check --workspace --message-format=json --all-targets\n+```\n+.\n --\n [[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n +\n --\n Check for a specific target. Defaults to\n `#rust-analyzer.cargo.target#`.\n --\n-[[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n+[[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n +\n --\n-Extra arguments for `cargo check`.\n+Toggles the additional completions that automatically add imports when completed.\n+Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n --\n-[[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n+[[rust-analyzer.completion.autoself.enable]]rust-analyzer.completion.autoself.enable (default: `true`)::\n +\n --\n-List of features to activate. Defaults to\n-`#rust-analyzer.cargo.features#`.\n+Toggles the additional completions that automatically show method calls and field accesses\n+with `self` prefixed to them when inside a method.\n --\n-[[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n+[[rust-analyzer.completion.callable.snippets]]rust-analyzer.completion.callable.snippets (default: `\"fill_arguments\"`)::\n +\n --\n-Advanced option, fully override the command rust-analyzer uses for\n-checking. The command should include `--message-format=json` or\n-similar option.\n+Whether to add parenthesis and argument snippets when completing function.\n --\n-[[rust-analyzer.completion.addCallArgumentSnippets]]rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n+[[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n +\n --\n-Whether to add argument snippets when completing functions.\n-Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\n+Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n --\n-[[rust-analyzer.completion.addCallParenthesis]]rust-analyzer.completion.addCallParenthesis (default: `true`)::\n+[[rust-analyzer.completion.privateEditable.enable]]rust-analyzer.completion.privateEditable.enable (default: `false`)::\n +\n --\n-Whether to add parenthesis when completing functions.\n+Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n --\n-[[rust-analyzer.completion.snippets]]rust-analyzer.completion.snippets::\n+[[rust-analyzer.completion.snippets.custom]]rust-analyzer.completion.snippets.custom::\n +\n --\n Default:\n@@ -203,44 +194,22 @@ Default:\n Custom completion snippets.\n \n --\n-[[rust-analyzer.completion.postfix.enable]]rust-analyzer.completion.postfix.enable (default: `true`)::\n-+\n---\n-Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n---\n-[[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n-+\n---\n-Toggles the additional completions that automatically add imports when completed.\n-Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n---\n-[[rust-analyzer.completion.autoself.enable]]rust-analyzer.completion.autoself.enable (default: `true`)::\n-+\n---\n-Toggles the additional completions that automatically show method calls and field accesses\n-with `self` prefixed to them when inside a method.\n---\n-[[rust-analyzer.completion.privateEditable.enable]]rust-analyzer.completion.privateEditable.enable (default: `false`)::\n+[[rust-analyzer.diagnostics.disabled]]rust-analyzer.diagnostics.disabled (default: `[]`)::\n +\n --\n-Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n+List of rust-analyzer diagnostics to disable.\n --\n [[rust-analyzer.diagnostics.enable]]rust-analyzer.diagnostics.enable (default: `true`)::\n +\n --\n Whether to show native rust-analyzer diagnostics.\n --\n-[[rust-analyzer.diagnostics.enableExperimental]]rust-analyzer.diagnostics.enableExperimental (default: `false`)::\n+[[rust-analyzer.diagnostics.experimental.enable]]rust-analyzer.diagnostics.experimental.enable (default: `false`)::\n +\n --\n Whether to show experimental rust-analyzer diagnostics that might\n have more false positives than usual.\n --\n-[[rust-analyzer.diagnostics.disabled]]rust-analyzer.diagnostics.disabled (default: `[]`)::\n-+\n---\n-List of rust-analyzer diagnostics to disable.\n---\n [[rust-analyzer.diagnostics.remapPrefix]]rust-analyzer.diagnostics.remapPrefix (default: `{}`)::\n +\n --\n@@ -263,132 +232,117 @@ List of warnings that should be displayed with info severity.\n The warnings will be indicated by a blue squiggly underline in code\n and a blue icon in the `Problems Panel`.\n --\n-[[rust-analyzer.experimental.procAttrMacros]]rust-analyzer.experimental.procAttrMacros (default: `true`)::\n-+\n---\n-Expand attribute macros.\n---\n-[[rust-analyzer.files.watcher]]rust-analyzer.files.watcher (default: `\"client\"`)::\n-+\n---\n-Controls file watching implementation.\n---\n [[rust-analyzer.files.excludeDirs]]rust-analyzer.files.excludeDirs (default: `[]`)::\n +\n --\n These directories will be ignored by rust-analyzer. They are\n relative to the workspace root, and globs are not supported. You may\n also need to add the folders to Code's `files.watcherExclude`.\n --\n-[[rust-analyzer.highlightRelated.references]]rust-analyzer.highlightRelated.references (default: `true`)::\n-+\n---\n-Enables highlighting of related references while hovering your mouse above any identifier.\n---\n-[[rust-analyzer.highlightRelated.exitPoints]]rust-analyzer.highlightRelated.exitPoints (default: `true`)::\n-+\n---\n-Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n---\n-[[rust-analyzer.highlightRelated.breakPoints]]rust-analyzer.highlightRelated.breakPoints (default: `true`)::\n+[[rust-analyzer.files.watcher]]rust-analyzer.files.watcher (default: `\"client\"`)::\n +\n --\n-Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n+Controls file watching implementation.\n --\n-[[rust-analyzer.highlightRelated.yieldPoints]]rust-analyzer.highlightRelated.yieldPoints (default: `true`)::\n+[[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --\n-Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n+Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n --\n-[[rust-analyzer.highlighting.strings]]rust-analyzer.highlighting.strings (default: `true`)::\n+[[rust-analyzer.highlightRelated.exitPoints.enable]]rust-analyzer.highlightRelated.exitPoints.enable (default: `true`)::\n +\n --\n-Use semantic tokens for strings.\n-\n-In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-By disabling semantic tokens for strings, other grammars can be used to highlight\n-their contents.\n+Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n --\n-[[rust-analyzer.hover.documentation]]rust-analyzer.hover.documentation (default: `true`)::\n+[[rust-analyzer.highlightRelated.references.enable]]rust-analyzer.highlightRelated.references.enable (default: `true`)::\n +\n --\n-Whether to show documentation on hover.\n+Enables highlighting of related references while the cursor is on any identifier.\n --\n-[[rust-analyzer.hover.linksInHover]]rust-analyzer.hover.linksInHover (default: `true`)::\n+[[rust-analyzer.highlightRelated.yieldPoints.enable]]rust-analyzer.highlightRelated.yieldPoints.enable (default: `true`)::\n +\n --\n-Use markdown syntax for links in hover.\n+Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\n --\n-[[rust-analyzer.hoverActions.debug]]rust-analyzer.hoverActions.debug (default: `true`)::\n+[[rust-analyzer.hover.actions.debug.enable]]rust-analyzer.hover.actions.debug.enable (default: `true`)::\n +\n --\n Whether to show `Debug` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.enable]]rust-analyzer.hoverActions.enable (default: `true`)::\n+[[rust-analyzer.hover.actions.enable]]rust-analyzer.hover.actions.enable (default: `true`)::\n +\n --\n Whether to show HoverActions in Rust files.\n --\n-[[rust-analyzer.hoverActions.gotoTypeDef]]rust-analyzer.hoverActions.gotoTypeDef (default: `true`)::\n+[[rust-analyzer.hover.actions.gotoTypeDef.enable]]rust-analyzer.hover.actions.gotoTypeDef.enable (default: `true`)::\n +\n --\n Whether to show `Go to Type Definition` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.implementations]]rust-analyzer.hoverActions.implementations (default: `true`)::\n+[[rust-analyzer.hover.actions.implementations.enable]]rust-analyzer.hover.actions.implementations.enable (default: `true`)::\n +\n --\n Whether to show `Implementations` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.references]]rust-analyzer.hoverActions.references (default: `false`)::\n+[[rust-analyzer.hover.actions.references.enable]]rust-analyzer.hover.actions.references.enable (default: `false`)::\n +\n --\n Whether to show `References` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.run]]rust-analyzer.hoverActions.run (default: `true`)::\n+[[rust-analyzer.hover.actions.run.enable]]rust-analyzer.hover.actions.run.enable (default: `true`)::\n +\n --\n Whether to show `Run` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n+[[rust-analyzer.hover.documentation.enable]]rust-analyzer.hover.documentation.enable (default: `true`)::\n +\n --\n-Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+Whether to show documentation on hover.\n --\n-[[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n+[[rust-analyzer.hover.links.enable]]rust-analyzer.hover.links.enable (default: `true`)::\n +\n --\n-Maximum length for inlay hints. Set to null to have an unlimited length.\n+Use markdown syntax for links in hover.\n --\n-[[rust-analyzer.inlayHints.parameterHints]]rust-analyzer.inlayHints.parameterHints (default: `true`)::\n+[[rust-analyzer.imports.granularity.enforce]]rust-analyzer.imports.granularity.enforce (default: `false`)::\n +\n --\n-Whether to show function parameter name inlay hints at the call\n-site.\n+Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n --\n-[[rust-analyzer.inlayHints.typeHints]]rust-analyzer.inlayHints.typeHints (default: `true`)::\n+[[rust-analyzer.imports.granularity.group]]rust-analyzer.imports.granularity.group (default: `\"crate\"`)::\n +\n --\n-Whether to show inlay type hints for variables.\n+How imports should be grouped into use statements.\n --\n-[[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n+[[rust-analyzer.imports.group.enable]]rust-analyzer.imports.group.enable (default: `true`)::\n +\n --\n-Whether to show inlay type hints for method chains.\n+Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n --\n-[[rust-analyzer.inlayHints.closureReturnTypeHints]]rust-analyzer.inlayHints.closureReturnTypeHints (default: `false`)::\n+[[rust-analyzer.imports.merge.glob]]rust-analyzer.imports.merge.glob (default: `true`)::\n +\n --\n-Whether to show inlay type hints for return types of closures with blocks.\n+Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n --\n-[[rust-analyzer.inlayHints.reborrowHints]]rust-analyzer.inlayHints.reborrowHints (default: `false`)::\n+[[rust-analyzer.imports.prefix]]rust-analyzer.imports.prefix (default: `\"plain\"`)::\n +\n --\n-Whether to show inlay type hints for compiler inserted reborrows.\n+The path structure for newly inserted paths to use.\n+--\n+[[rust-analyzer.inlayHints.chainingHints.enable]]rust-analyzer.inlayHints.chainingHints.enable (default: `true`)::\n++\n+--\n+Whether to show inlay type hints for method chains.\n+--\n+[[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for return types of closures with blocks.\n --\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n@@ -400,10 +354,41 @@ Whether to show inlay type hints for elided lifetimes in function signatures.\n --\n Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n --\n-[[rust-analyzer.inlayHints.hideNamedConstructorHints]]rust-analyzer.inlayHints.hideNamedConstructorHints (default: `false`)::\n+[[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n++\n+--\n+Maximum length for inlay hints. Set to null to have an unlimited length.\n+--\n+[[rust-analyzer.inlayHints.parameterHints.enable]]rust-analyzer.inlayHints.parameterHints.enable (default: `true`)::\n++\n+--\n+Whether to show function parameter name inlay hints at the call\n+site.\n+--\n+[[rust-analyzer.inlayHints.reborrowHints.enable]]rust-analyzer.inlayHints.reborrowHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for compiler inserted reborrows.\n+--\n+[[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n++\n+--\n+Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+--\n+[[rust-analyzer.inlayHints.typeHints.enable]]rust-analyzer.inlayHints.typeHints.enable (default: `true`)::\n++\n+--\n+Whether to show inlay type hints for variables.\n+--\n+[[rust-analyzer.inlayHints.typeHints.hideNamedConstructor]]rust-analyzer.inlayHints.typeHints.hideNamedConstructor (default: `false`)::\n++\n+--\n+Whether to hide inlay type hints for constructors.\n+--\n+[[rust-analyzer.joinLines.joinAssignments]]rust-analyzer.joinLines.joinAssignments (default: `true`)::\n +\n --\n-Whether to hide inlay hints for constructors.\n+Join lines merges consecutive declaration and initialization of an assignment.\n --\n [[rust-analyzer.joinLines.joinElseIf]]rust-analyzer.joinLines.joinElseIf (default: `true`)::\n +\n@@ -420,12 +405,7 @@ Join lines removes trailing commas.\n --\n Join lines unwraps trivial blocks.\n --\n-[[rust-analyzer.joinLines.joinAssignments]]rust-analyzer.joinLines.joinAssignments (default: `true`)::\n-+\n---\n-Join lines merges consecutive declaration and initialization of an assignment.\n---\n-[[rust-analyzer.lens.debug]]rust-analyzer.lens.debug (default: `true`)::\n+[[rust-analyzer.lens.debug.enable]]rust-analyzer.lens.debug.enable (default: `true`)::\n +\n --\n Whether to show `Debug` lens. Only applies when\n@@ -436,41 +416,47 @@ Whether to show `Debug` lens. Only applies when\n --\n Whether to show CodeLens in Rust files.\n --\n-[[rust-analyzer.lens.implementations]]rust-analyzer.lens.implementations (default: `true`)::\n+[[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n +\n --\n-Whether to show `Implementations` lens. Only applies when\n-`#rust-analyzer.lens.enable#` is set.\n+Internal config: use custom client-side commands even when the\n+client doesn't set the corresponding capability.\n --\n-[[rust-analyzer.lens.run]]rust-analyzer.lens.run (default: `true`)::\n+[[rust-analyzer.lens.implementations.enable]]rust-analyzer.lens.implementations.enable (default: `true`)::\n +\n --\n-Whether to show `Run` lens. Only applies when\n+Whether to show `Implementations` lens. Only applies when\n `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.methodReferences]]rust-analyzer.lens.methodReferences (default: `false`)::\n+[[rust-analyzer.lens.references.adt.enable]]rust-analyzer.lens.references.adt.enable (default: `false`)::\n +\n --\n-Whether to show `Method References` lens. Only applies when\n-`#rust-analyzer.lens.enable#` is set.\n+Whether to show `References` lens for Struct, Enum, and Union.\n+Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.references]]rust-analyzer.lens.references (default: `false`)::\n+[[rust-analyzer.lens.references.enumVariant.enable]]rust-analyzer.lens.references.enumVariant.enable (default: `false`)::\n +\n --\n-Whether to show `References` lens for Struct, Enum, Union and Trait.\n+Whether to show `References` lens for Enum Variants.\n Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.enumVariantReferences]]rust-analyzer.lens.enumVariantReferences (default: `false`)::\n+[[rust-analyzer.lens.references.method.enable]]rust-analyzer.lens.references.method.enable (default: `false`)::\n +\n --\n-Whether to show `References` lens for Enum Variants.\n+Whether to show `Method References` lens. Only applies when\n+`#rust-analyzer.lens.enable#` is set.\n+--\n+[[rust-analyzer.lens.references.trait.enable]]rust-analyzer.lens.references.trait.enable (default: `false`)::\n++\n+--\n+Whether to show `References` lens for Trait.\n Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n-[[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n+[[rust-analyzer.lens.run.enable]]rust-analyzer.lens.run.enable (default: `true`)::\n +\n --\n-Internal config: use custom client-side commands even when the\n-client doesn't set the corresponding capability.\n+Whether to show `Run` lens. Only applies when\n+`#rust-analyzer.lens.enable#` is set.\n --\n [[rust-analyzer.linkedProjects]]rust-analyzer.linkedProjects (default: `[]`)::\n +\n@@ -481,7 +467,7 @@ of projects.\n Elements must be paths pointing to `Cargo.toml`,\n `rust-project.json`, or JSON objects in `rust-project.json` format.\n --\n-[[rust-analyzer.lruCapacity]]rust-analyzer.lruCapacity (default: `null`)::\n+[[rust-analyzer.lru.capacity]]rust-analyzer.lru.capacity (default: `null`)::\n +\n --\n Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n@@ -491,21 +477,25 @@ Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n --\n Whether to show `can't find Cargo.toml` error message.\n --\n+[[rust-analyzer.primeCaches.enable]]rust-analyzer.primeCaches.enable (default: `true`)::\n++\n+--\n+Warm up caches on project load.\n+--\n [[rust-analyzer.primeCaches.numThreads]]rust-analyzer.primeCaches.numThreads (default: `0`)::\n +\n --\n How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n --\n-[[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `true`)::\n+[[rust-analyzer.procMacro.attributes.enable]]rust-analyzer.procMacro.attributes.enable (default: `true`)::\n +\n --\n-Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n+Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n --\n-[[rust-analyzer.procMacro.server]]rust-analyzer.procMacro.server (default: `null`)::\n+[[rust-analyzer.procMacro.enable]]rust-analyzer.procMacro.enable (default: `true`)::\n +\n --\n-Internal config, path to proc-macro server executable (typically,\n-this is rust-analyzer itself, but we override this in tests).\n+Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\n --\n [[rust-analyzer.procMacro.ignored]]rust-analyzer.procMacro.ignored (default: `{}`)::\n +\n@@ -514,18 +504,24 @@ These proc-macros will be ignored when trying to expand them.\n \n This config takes a map of crate names with the exported proc-macro names to ignore as values.\n --\n-[[rust-analyzer.runnables.overrideCargo]]rust-analyzer.runnables.overrideCargo (default: `null`)::\n+[[rust-analyzer.procMacro.server]]rust-analyzer.procMacro.server (default: `null`)::\n++\n+--\n+Internal config, path to proc-macro server executable (typically,\n+this is rust-analyzer itself, but we override this in tests).\n+--\n+[[rust-analyzer.runnables.command]]rust-analyzer.runnables.command (default: `null`)::\n +\n --\n Command to be executed instead of 'cargo' for runnables.\n --\n-[[rust-analyzer.runnables.cargoExtraArgs]]rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n+[[rust-analyzer.runnables.extraArgs]]rust-analyzer.runnables.extraArgs (default: `[]`)::\n +\n --\n Additional arguments to be passed to cargo for runnables such as\n tests or binaries. For example, it may be `--release`.\n --\n-[[rust-analyzer.rustcSource]]rust-analyzer.rustcSource (default: `null`)::\n+[[rust-analyzer.rustc.source]]rust-analyzer.rustc.source (default: `null`)::\n +\n --\n Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\n@@ -548,17 +544,31 @@ Additional arguments to `rustfmt`.\n Advanced option, fully override the command rust-analyzer uses for\n formatting.\n --\n-[[rust-analyzer.rustfmt.enableRangeFormatting]]rust-analyzer.rustfmt.enableRangeFormatting (default: `false`)::\n+[[rust-analyzer.rustfmt.rangeFormatting.enable]]rust-analyzer.rustfmt.rangeFormatting.enable (default: `false`)::\n +\n --\n Enables the use of rustfmt's unstable range formatting command for the\n `textDocument/rangeFormatting` request. The rustfmt option is unstable and only\n available on a nightly build.\n --\n-[[rust-analyzer.workspace.symbol.search.scope]]rust-analyzer.workspace.symbol.search.scope (default: `\"workspace\"`)::\n+[[rust-analyzer.semanticHighlighting.strings.enable]]rust-analyzer.semanticHighlighting.strings.enable (default: `true`)::\n +\n --\n-Workspace symbol search scope.\n+Use semantic tokens for strings.\n+\n+In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+By disabling semantic tokens for strings, other grammars can be used to highlight\n+their contents.\n+--\n+[[rust-analyzer.signatureInfo.detail]]rust-analyzer.signatureInfo.detail (default: `\"full\"`)::\n++\n+--\n+Show full signature of the callable. Only shows parameters if disabled.\n+--\n+[[rust-analyzer.signatureInfo.documentation.enable]]rust-analyzer.signatureInfo.documentation.enable (default: `true`)::\n++\n+--\n+Show documentation.\n --\n [[rust-analyzer.workspace.symbol.search.kind]]rust-analyzer.workspace.symbol.search.kind (default: `\"only_types\"`)::\n +\n@@ -572,3 +582,8 @@ Limits the number of items returned from a workspace symbol search (Defaults to\n Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n Other clients requires all results upfront and might require a higher limit.\n --\n+[[rust-analyzer.workspace.symbol.search.scope]]rust-analyzer.workspace.symbol.search.scope (default: `\"workspace\"`)::\n++\n+--\n+Workspace symbol search scope.\n+--"}, {"sha": "515ecd0295a87e818aa4f114e0974555cc1b91a3", "filename": "editors/code/package.json", "status": "modified", "additions": 284, "deletions": 254, "changes": 538, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -368,8 +368,8 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": {},\n-                \"rust-analyzer.assist.exprFillDefault\": {\n-                    \"markdownDescription\": \"Placeholder for missing expressions in assists.\",\n+                \"rust-analyzer.assist.expressionFillDefault\": {\n+                    \"markdownDescription\": \"Placeholder expression to use for missing expressions in assists.\",\n                     \"default\": \"todo\",\n                     \"type\": \"string\",\n                     \"enum\": [\n@@ -381,98 +381,18 @@\n                         \"Fill missing expressions with reasonable defaults, `new` or `default` constructors.\"\n                     ]\n                 },\n-                \"rust-analyzer.assist.importGranularity\": {\n-                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n-                    \"default\": \"crate\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"preserve\",\n-                        \"crate\",\n-                        \"module\",\n-                        \"item\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n-                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n-                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n-                        \"Flatten imports so that each has its own use statement.\"\n-                    ]\n-                },\n-                \"rust-analyzer.assist.importEnforceGranularity\": {\n-                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.assist.importPrefix\": {\n-                    \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n-                    \"default\": \"plain\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"plain\",\n-                        \"self\",\n-                        \"crate\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n-                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.\",\n-                        \"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from.\"\n-                    ]\n-                },\n-                \"rust-analyzer.assist.importGroup\": {\n-                    \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.assist.allowMergingIntoGlobImports\": {\n-                    \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.cache.warmup\": {\n-                    \"markdownDescription\": \"Warm up caches on project load.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.callInfo.full\": {\n-                    \"markdownDescription\": \"Show function name and docs in parameter hints.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.cargo.autoreload\": {\n                     \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on\\n`Cargo.toml` or `.cargo/config.toml` changes.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.allFeatures\": {\n-                    \"markdownDescription\": \"Activate all available features (`--all-features`).\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.cargo.unsetTest\": {\n-                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n-                    \"default\": [\n-                        \"core\"\n-                    ],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.cargo.features\": {\n-                    \"markdownDescription\": \"List of features to activate.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.cargo.runBuildScripts\": {\n+                \"rust-analyzer.cargo.buildScripts.enable\": {\n                     \"markdownDescription\": \"Run build scripts (`build.rs`) for more precise code analysis.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.runBuildScriptsCommand\": {\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses to\\nrun build scripts and build procedural macros. The command should\\ninclude `--message-format=json` or a similar option.\",\n+                \"rust-analyzer.cargo.buildScripts.overrideCommand\": {\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses to run build scripts and\\nbuild procedural macros. The command is required to output json\\nand should therefor include `--message-format=json` or a similar\\noption.\\n\\nBy default, a cargo invocation will be constructed for the configured\\ntargets and features, with the following base command line:\\n\\n```bash\\ncargo check --quiet --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -482,42 +402,56 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.cargo.useRustcWrapperForBuildScripts\": {\n+                \"rust-analyzer.cargo.buildScripts.useRustcWrapper\": {\n                     \"markdownDescription\": \"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\\navoid compiling unnecessary things.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.features\": {\n+                    \"markdownDescription\": \"List of features to activate.\\n\\nSet this to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n+                    \"default\": [],\n+                    \"type\": [\n+                        \"string\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"enum\": [\n+                        \"all\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Pass `--all-features` to cargo\"\n+                    ]\n+                },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"markdownDescription\": \"Whether to pass `--no-default-features` to cargo.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.target\": {\n-                    \"markdownDescription\": \"Compilation target (target triple).\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ]\n-                },\n                 \"rust-analyzer.cargo.noSysroot\": {\n                     \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.checkOnSave.enable\": {\n-                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.checkOnSave.allFeatures\": {\n-                    \"markdownDescription\": \"Check with all features (`--all-features`).\\nDefaults to `#rust-analyzer.cargo.allFeatures#`.\",\n+                \"rust-analyzer.cargo.target\": {\n+                    \"markdownDescription\": \"Compilation target override (target triple).\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n-                        \"boolean\"\n+                        \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.cargo.unsetTest\": {\n+                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n+                    \"default\": [\n+                        \"core\"\n+                    ],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n                 \"rust-analyzer.checkOnSave.allTargets\": {\n                     \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n                     \"default\": true,\n@@ -528,21 +462,10 @@\n                     \"default\": \"check\",\n                     \"type\": \"string\"\n                 },\n-                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.target\": {\n-                    \"markdownDescription\": \"Check for a specific target. Defaults to\\n`#rust-analyzer.cargo.target#`.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ]\n+                \"rust-analyzer.checkOnSave.enable\": {\n+                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.checkOnSave.extraArgs\": {\n                     \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n@@ -553,18 +476,33 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\",\n+                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": null,\n                     \"type\": [\n-                        \"null\",\n-                        \"array\"\n+                        \"string\",\n+                        \"array\",\n+                        \"null\"\n                     ],\n                     \"items\": {\n                         \"type\": \"string\"\n-                    }\n+                    },\n+                    \"enum\": [\n+                        \"all\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Pass `--all-features` to cargo\"\n+                    ]\n+                },\n+                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n                 },\n                 \"rust-analyzer.checkOnSave.overrideCommand\": {\n-                    \"markdownDescription\": \"Advanced option, fully override the command rust-analyzer uses for\\nchecking. The command should include `--message-format=json` or\\nsimilar option.\",\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses to    run build scripts and\\nbuild procedural macros. The command is required to output json\\nand should therefor include `--message-format=json` or a similar\\noption.\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -574,17 +512,51 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n-                    \"markdownDescription\": \"Whether to add argument snippets when completing functions.\\nOnly applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\",\n+                \"rust-analyzer.checkOnSave.target\": {\n+                    \"markdownDescription\": \"Check for a specific target. Defaults to\\n`#rust-analyzer.cargo.target#`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n+                },\n+                \"rust-analyzer.completion.autoimport.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.autoself.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically show method calls and field accesses\\nwith `self` prefixed to them when inside a method.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.completion.addCallParenthesis\": {\n-                    \"markdownDescription\": \"Whether to add parenthesis when completing functions.\",\n+                \"rust-analyzer.completion.callable.snippets\": {\n+                    \"markdownDescription\": \"Whether to add parenthesis and argument snippets when completing function.\",\n+                    \"default\": \"fill_arguments\",\n+                    \"type\": [\n+                        \"string\",\n+                        \"null\"\n+                    ],\n+                    \"enum\": [\n+                        \"fill_arguments\",\n+                        \"add_parentheses\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Add call parentheses and pre-fill arguments\",\n+                        \"Add call parentheses\"\n+                    ]\n+                },\n+                \"rust-analyzer.completion.postfix.enable\": {\n+                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.completion.snippets\": {\n+                \"rust-analyzer.completion.privateEditable.enable\": {\n+                    \"markdownDescription\": \"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.completion.snippets.custom\": {\n                     \"markdownDescription\": \"Custom completion snippets.\",\n                     \"default\": {\n                         \"Arc::new\": {\n@@ -629,45 +601,25 @@\n                     },\n                     \"type\": \"object\"\n                 },\n-                \"rust-analyzer.completion.postfix.enable\": {\n-                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.autoimport.enable\": {\n-                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.autoself.enable\": {\n-                    \"markdownDescription\": \"Toggles the additional completions that automatically show method calls and field accesses\\nwith `self` prefixed to them when inside a method.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.completion.privateEditable.enable\": {\n-                    \"markdownDescription\": \"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.diagnostics.disabled\": {\n+                    \"markdownDescription\": \"List of rust-analyzer diagnostics to disable.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"uniqueItems\": true\n                 },\n                 \"rust-analyzer.diagnostics.enable\": {\n                     \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.diagnostics.enableExperimental\": {\n+                \"rust-analyzer.diagnostics.experimental.enable\": {\n                     \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might\\nhave more false positives than usual.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.diagnostics.disabled\": {\n-                    \"markdownDescription\": \"List of rust-analyzer diagnostics to disable.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"uniqueItems\": true\n-                },\n                 \"rust-analyzer.diagnostics.remapPrefix\": {\n                     \"markdownDescription\": \"Map of prefixes to be substituted when parsing diagnostic file paths.\\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\",\n                     \"default\": {},\n@@ -689,16 +641,6 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.experimental.procAttrMacros\": {\n-                    \"markdownDescription\": \"Expand attribute macros.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.files.watcher\": {\n-                    \"markdownDescription\": \"Controls file watching implementation.\",\n-                    \"default\": \"client\",\n-                    \"type\": \"string\"\n-                },\n                 \"rust-analyzer.files.excludeDirs\": {\n                     \"markdownDescription\": \"These directories will be ignored by rust-analyzer. They are\\nrelative to the workspace root, and globs are not supported. You may\\nalso need to add the folders to Code's `files.watcherExclude`.\",\n                     \"default\": [],\n@@ -707,114 +649,135 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.highlightRelated.references\": {\n-                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse above any identifier.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.highlightRelated.exitPoints\": {\n-                    \"markdownDescription\": \"Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.highlightRelated.breakPoints\": {\n-                    \"markdownDescription\": \"Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.files.watcher\": {\n+                    \"markdownDescription\": \"Controls file watching implementation.\",\n+                    \"default\": \"client\",\n+                    \"type\": \"string\"\n                 },\n-                \"rust-analyzer.highlightRelated.yieldPoints\": {\n-                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\",\n+                \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.highlighting.strings\": {\n-                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                \"rust-analyzer.highlightRelated.exitPoints.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hover.documentation\": {\n-                    \"markdownDescription\": \"Whether to show documentation on hover.\",\n+                \"rust-analyzer.highlightRelated.references.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of related references while the cursor is on any identifier.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hover.linksInHover\": {\n-                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                \"rust-analyzer.highlightRelated.yieldPoints.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.debug\": {\n+                \"rust-analyzer.hover.actions.debug.enable\": {\n                     \"markdownDescription\": \"Whether to show `Debug` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.enable\": {\n+                \"rust-analyzer.hover.actions.enable\": {\n                     \"markdownDescription\": \"Whether to show HoverActions in Rust files.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.gotoTypeDef\": {\n+                \"rust-analyzer.hover.actions.gotoTypeDef.enable\": {\n                     \"markdownDescription\": \"Whether to show `Go to Type Definition` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.implementations\": {\n+                \"rust-analyzer.hover.actions.implementations.enable\": {\n                     \"markdownDescription\": \"Whether to show `Implementations` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.references\": {\n+                \"rust-analyzer.hover.actions.references.enable\": {\n                     \"markdownDescription\": \"Whether to show `References` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.run\": {\n+                \"rust-analyzer.hover.actions.run.enable\": {\n                     \"markdownDescription\": \"Whether to show `Run` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.renderColons\": {\n-                    \"markdownDescription\": \"Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\",\n+                \"rust-analyzer.hover.documentation.enable\": {\n+                    \"markdownDescription\": \"Whether to show documentation on hover.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.maxLength\": {\n-                    \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n-                    \"default\": 25,\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n+                \"rust-analyzer.hover.links.enable\": {\n+                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.imports.granularity.enforce\": {\n+                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.imports.granularity.group\": {\n+                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n+                    \"default\": \"crate\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"preserve\",\n+                        \"crate\",\n+                        \"module\",\n+                        \"item\"\n                     ],\n-                    \"minimum\": 0\n+                    \"enumDescriptions\": [\n+                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                        \"Flatten imports so that each has its own use statement.\"\n+                    ]\n                 },\n-                \"rust-analyzer.inlayHints.parameterHints\": {\n-                    \"markdownDescription\": \"Whether to show function parameter name inlay hints at the call\\nsite.\",\n+                \"rust-analyzer.imports.group.enable\": {\n+                    \"markdownDescription\": \"Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.typeHints\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for variables.\",\n+                \"rust-analyzer.imports.merge.glob\": {\n+                    \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.chainingHints\": {\n+                \"rust-analyzer.imports.prefix\": {\n+                    \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n+                    \"default\": \"plain\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"plain\",\n+                        \"self\",\n+                        \"crate\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n+                        \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.\",\n+                        \"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from.\"\n+                    ]\n+                },\n+                \"rust-analyzer.inlayHints.chainingHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.closureReturnTypeHints\": {\n+                \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for return types of closures with blocks.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.reborrowHints\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\",\n-                    \"type\": \"string\",\n+                    \"type\": [\n+                        \"string\",\n+                        \"boolean\"\n+                    ],\n                     \"enum\": [\n                         \"always\",\n                         \"never\",\n@@ -831,11 +794,45 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.hideNamedConstructorHints\": {\n-                    \"markdownDescription\": \"Whether to hide inlay hints for constructors.\",\n+                \"rust-analyzer.inlayHints.maxLength\": {\n+                    \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n+                    \"default\": 25,\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n+                    ],\n+                    \"minimum\": 0\n+                },\n+                \"rust-analyzer.inlayHints.parameterHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show function parameter name inlay hints at the call\\nsite.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.reborrowHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.renderColons\": {\n+                    \"markdownDescription\": \"Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.typeHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for variables.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.typeHints.hideNamedConstructor\": {\n+                    \"markdownDescription\": \"Whether to hide inlay type hints for constructors.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.joinLines.joinAssignments\": {\n+                    \"markdownDescription\": \"Join lines merges consecutive declaration and initialization of an assignment.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.joinLines.joinElseIf\": {\n                     \"markdownDescription\": \"Join lines inserts else between consecutive ifs.\",\n                     \"default\": true,\n@@ -851,12 +848,7 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.joinLines.joinAssignments\": {\n-                    \"markdownDescription\": \"Join lines merges consecutive declaration and initialization of an assignment.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.lens.debug\": {\n+                \"rust-analyzer.lens.debug.enable\": {\n                     \"markdownDescription\": \"Whether to show `Debug` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n@@ -866,33 +858,38 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.implementations\": {\n-                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.forceCustomCommands\": {\n+                    \"markdownDescription\": \"Internal config: use custom client-side commands even when the\\nclient doesn't set the corresponding capability.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.run\": {\n-                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.implementations.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Implementations` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.methodReferences\": {\n-                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.adt.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, and Union.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.references\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, Union and Trait.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.enumVariant.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.enumVariantReferences\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                \"rust-analyzer.lens.references.method.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Method References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.lens.forceCustomCommands\": {\n-                    \"markdownDescription\": \"Internal config: use custom client-side commands even when the\\nclient doesn't set the corresponding capability.\",\n+                \"rust-analyzer.lens.references.trait.enable\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Trait.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.run.enable\": {\n+                    \"markdownDescription\": \"Whether to show `Run` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -907,7 +904,7 @@\n                         ]\n                     }\n                 },\n-                \"rust-analyzer.lruCapacity\": {\n+                \"rust-analyzer.lru.capacity\": {\n                     \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -921,18 +918,33 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.primeCaches.enable\": {\n+                    \"markdownDescription\": \"Warm up caches on project load.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.primeCaches.numThreads\": {\n                     \"markdownDescription\": \"How many worker threads to to handle priming caches. The default `0` means to pick automatically.\",\n                     \"default\": 0,\n                     \"type\": \"number\",\n                     \"minimum\": 0,\n                     \"maximum\": 255\n                 },\n+                \"rust-analyzer.procMacro.attributes.enable\": {\n+                    \"markdownDescription\": \"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.procMacro.enable\": {\n-                    \"markdownDescription\": \"Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\",\n+                    \"markdownDescription\": \"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.procMacro.ignored\": {\n+                    \"markdownDescription\": \"These proc-macros will be ignored when trying to expand them.\\n\\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.procMacro.server\": {\n                     \"markdownDescription\": \"Internal config, path to proc-macro server executable (typically,\\nthis is rust-analyzer itself, but we override this in tests).\",\n                     \"default\": null,\n@@ -941,28 +953,23 @@\n                         \"string\"\n                     ]\n                 },\n-                \"rust-analyzer.procMacro.ignored\": {\n-                    \"markdownDescription\": \"These proc-macros will be ignored when trying to expand them.\\n\\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.\",\n-                    \"default\": {},\n-                    \"type\": \"object\"\n-                },\n-                \"rust-analyzer.runnables.overrideCargo\": {\n+                \"rust-analyzer.runnables.command\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"string\"\n                     ]\n                 },\n-                \"rust-analyzer.runnables.cargoExtraArgs\": {\n+                \"rust-analyzer.runnables.extraArgs\": {\n                     \"markdownDescription\": \"Additional arguments to be passed to cargo for runnables such as\\ntests or binaries. For example, it may be `--release`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.rustcSource\": {\n+                \"rust-analyzer.rustc.source\": {\n                     \"markdownDescription\": \"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\\nprojects, or \\\"discover\\\" to try to automatically find it if the `rustc-dev` component\\nis installed.\\n\\nAny project which uses rust-analyzer with the rustcPrivate\\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\\n\\nThis option does not take effect until rust-analyzer is restarted.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -989,24 +996,34 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.rustfmt.enableRangeFormatting\": {\n+                \"rust-analyzer.rustfmt.rangeFormatting.enable\": {\n                     \"markdownDescription\": \"Enables the use of rustfmt's unstable range formatting command for the\\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\\navailable on a nightly build.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.workspace.symbol.search.scope\": {\n-                    \"markdownDescription\": \"Workspace symbol search scope.\",\n-                    \"default\": \"workspace\",\n+                \"rust-analyzer.semanticHighlighting.strings.enable\": {\n+                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.signatureInfo.detail\": {\n+                    \"markdownDescription\": \"Show full signature of the callable. Only shows parameters if disabled.\",\n+                    \"default\": \"full\",\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"workspace\",\n-                        \"workspace_and_dependencies\"\n+                        \"full\",\n+                        \"parameters\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Search in current workspace only\",\n-                        \"Search in current workspace and dependencies\"\n+                        \"Show the entire signature.\",\n+                        \"Show only the parameters.\"\n                     ]\n                 },\n+                \"rust-analyzer.signatureInfo.documentation.enable\": {\n+                    \"markdownDescription\": \"Show documentation.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.workspace.symbol.search.kind\": {\n                     \"markdownDescription\": \"Workspace symbol search kind.\",\n                     \"default\": \"only_types\",\n@@ -1026,6 +1043,19 @@\n                     \"type\": \"integer\",\n                     \"minimum\": 0\n                 },\n+                \"rust-analyzer.workspace.symbol.search.scope\": {\n+                    \"markdownDescription\": \"Workspace symbol search scope.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"workspace_and_dependencies\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Search in current workspace only\",\n+                        \"Search in current workspace and dependencies\"\n+                    ]\n+                },\n                 \"$generated-end\": {}\n             }\n         },"}, {"sha": "99b72635d18e7ae1fd30f8e5538093ca66f4eced", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -5,6 +5,7 @@ import * as Is from 'vscode-languageclient/lib/common/utils/is';\n import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n import { Workspace } from './ctx';\n+import { updateConfig } from './config';\n \n export interface Env {\n     [name: string]: string;\n@@ -24,7 +25,7 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n-export function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): lc.LanguageClient {\n+export async function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n@@ -45,6 +46,10 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n     );\n \n     let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+\n+    // Update outdated user configs\n+    await updateConfig(initializationOptions);\n+\n     if (workspace.kind === \"Detached Files\") {\n         initializationOptions = { \"detachedFiles\": workspace.files.map(file => file.uri.fsPath), ...initializationOptions };\n     }"}, {"sha": "5b650e1420aec6a90327b1008d8328c3dd5005ef", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -18,7 +18,6 @@ export class Config {\n         \"cargo\",\n         \"procMacro\",\n         \"files\",\n-        \"highlighting\",\n         \"lens\", // works as lens.*\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n@@ -79,7 +78,7 @@ export class Config {\n      * const nullableNum = vscode\n      *  .workspace\n      *  .getConfiguration\n-     *  .getConfiguration(\"rust-analyer\")\n+     *  .getConfiguration(\"rust-analyzer\")\n      *  .get<number | null>(path)!;\n      *\n      * // What happens is that type of `nullableNum` is `number` but not `null | number`:\n@@ -124,15 +123,89 @@ export class Config {\n     get hoverActions() {\n         return {\n             enable: this.get<boolean>(\"hoverActions.enable\"),\n-            implementations: this.get<boolean>(\"hoverActions.implementations\"),\n-            references: this.get<boolean>(\"hoverActions.references\"),\n-            run: this.get<boolean>(\"hoverActions.run\"),\n-            debug: this.get<boolean>(\"hoverActions.debug\"),\n-            gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef\"),\n+            implementations: this.get<boolean>(\"hoverActions.implementations.enable\"),\n+            references: this.get<boolean>(\"hoverActions.references.enable\"),\n+            run: this.get<boolean>(\"hoverActions.run.enable\"),\n+            debug: this.get<boolean>(\"hoverActions.debug.enable\"),\n+            gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef.enable\"),\n         };\n     }\n \n     get currentExtensionIsNightly() {\n         return this.package.releaseTag === NIGHTLY_TAG;\n     }\n }\n+\n+export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n+    const renames = [\n+        [\"assist.allowMergingIntoGlobImports\", \"imports.merge.glob\",],\n+        [\"assist.exprFillDefault\", \"assist.expressionFillDefault\",],\n+        [\"assist.importEnforceGranularity\", \"imports.granularity.enforce\",],\n+        [\"assist.importGranularity\", \"imports.granularity.group\",],\n+        [\"assist.importMergeBehavior\", \"imports.granularity.group\",],\n+        [\"assist.importMergeBehaviour\", \"imports.granularity.group\",],\n+        [\"assist.importGroup\", \"imports.group.enable\",],\n+        [\"assist.importPrefix\", \"imports.prefix\",],\n+        [\"cache.warmup\", \"primeCaches.enable\",],\n+        [\"cargo.loadOutDirsFromCheck\", \"cargo.buildScripts.enable\",],\n+        [\"cargo.runBuildScripts\", \"cargo.runBuildScripts.overrideCommand\",],\n+        [\"cargo.runBuildScriptsCommand\", \"cargo.runBuildScripts.overrideCommand\",],\n+        [\"cargo.useRustcWrapperForBuildScripts\", \"cargo.runBuildScripts.useRustcWrapper\",],\n+        [\"completion.snippets\", \"completion.snippets.custom\",],\n+        [\"diagnostics.enableExperimental\", \"diagnostics.experimental.enable\",],\n+        [\"experimental.procAttrMacros\", \"procMacro.attributes.enable\",],\n+        [\"highlighting.strings\", \"semanticHighlighting.strings.enable\",],\n+        [\"highlightRelated.breakPoints\", \"highlightRelated.breakPoints.enable\",],\n+        [\"highlightRelated.exitPoints\", \"highlightRelated.exitPoints.enable\",],\n+        [\"highlightRelated.yieldPoints\", \"highlightRelated.yieldPoints.enable\",],\n+        [\"highlightRelated.references\", \"highlightRelated.references.enable\",],\n+        [\"hover.documentation\", \"hover.documentation.enable\",],\n+        [\"hover.linksInHover\", \"hover.links.enable\",],\n+        [\"hoverActions.linksInHover\", \"hover.links.enable\",],\n+        [\"hoverActions.debug\", \"hoverActions.debug.enable\",],\n+        [\"hoverActions.enable\", \"hoverActions.enable.enable\",],\n+        [\"hoverActions.gotoTypeDef\", \"hoverActions.gotoTypeDef.enable\",],\n+        [\"hoverActions.implementations\", \"hoverActions.implementations.enable\",],\n+        [\"hoverActions.references\", \"hoverActions.references.enable\",],\n+        [\"hoverActions.run\", \"hoverActions.run.enable\",],\n+        [\"inlayHints.chainingHints\", \"inlayHints.chainingHints.enable\",],\n+        [\"inlayHints.closureReturnTypeHints\", \"inlayHints.closureReturnTypeHints.enable\",],\n+        [\"inlayHints.hideNamedConstructorHints\", \"inlayHints.typeHints.hideNamedConstructorHints\",],\n+        [\"inlayHints.parameterHints\", \"inlayHints.parameterHints.enable\",],\n+        [\"inlayHints.reborrowHints\", \"inlayHints.reborrowHints.enable\",],\n+        [\"inlayHints.typeHints\", \"inlayHints.typeHints.enable\",],\n+        [\"lruCapacity\", \"lru.capacity\",],\n+        [\"runnables.cargoExtraArgs\", \"runnables.extraArgs\",],\n+        [\"runnables.overrideCargo\", \"runnables.command\",],\n+        [\"rustcSource\", \"rustc.source\",],\n+        [\"rustfmt.enableRangeFormatting\", \"rustfmt.rangeFormatting.enable\"]\n+    ];\n+\n+    for (const [oldKey, newKey] of renames) {\n+        const inspect = config.inspect(oldKey);\n+        if (inspect !== undefined) {\n+            const valMatrix = [\n+                { val: inspect.globalValue, langVal: inspect.globalLanguageValue, target: vscode.ConfigurationTarget.Global },\n+                { val: inspect.workspaceFolderValue, langVal: inspect.workspaceFolderLanguageValue, target: vscode.ConfigurationTarget.WorkspaceFolder },\n+                { val: inspect.workspaceValue, langVal: inspect.workspaceLanguageValue, target: vscode.ConfigurationTarget.Workspace }\n+            ];\n+            for (const { val, langVal, target } of valMatrix) {\n+                const pred = (val: unknown) => {\n+                    // some of the updates we do only append \"enable\" or \"custom\"\n+                    // that means on the next run we would find these again, but as objects with\n+                    // these properties causing us to destroy the config\n+                    // so filter those already updated ones out\n+                    return val !== undefined && !(typeof val === \"object\" && val !== null && (val.hasOwnProperty(\"enable\") || val.hasOwnProperty(\"custom\")));\n+                };\n+                if (pred(val)) {\n+                    await config.update(newKey, val, target, false);\n+                    await config.update(oldKey, undefined, target, false);\n+                }\n+                if (pred(langVal)) {\n+                    await config.update(newKey, langVal, target, true);\n+                    await config.update(oldKey, undefined, target, true);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0c3e6810e999dbf8d947f33660fd4d29db69e7e6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/460e389f547c908050ad8d49e39aa7d311286645/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=460e389f547c908050ad8d49e39aa7d311286645", "patch": "@@ -33,7 +33,7 @@ export class Ctx {\n         serverPath: string,\n         workspace: Workspace,\n     ): Promise<Ctx> {\n-        const client = createClient(serverPath, workspace, config.serverExtraEnv);\n+        const client = await createClient(serverPath, workspace, config.serverExtraEnv);\n \n         const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         extCtx.subscriptions.push(statusBar);"}]}