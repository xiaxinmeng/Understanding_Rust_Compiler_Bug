{"sha": "fa723160318fac5f3fa6f4141cfc41c0606a3008", "node_id": "C_kwDOAAsO6NoAKGZhNzIzMTYwMzE4ZmFjNWYzZmE2ZjQxNDFjZmM0MWMwNjA2YTMwMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T12:52:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T12:52:32Z"}, "message": "Auto merge of #95715 - nnethercote:shrink-Nonterminal, r=davidtwco\n\nShrink `Nonterminal`\n\nSmall consistency and performance improvements.\n\nr? `@petrochenkov`", "tree": {"sha": "a41085f587d3243ca62065f0ee2555d9dd892a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41085f587d3243ca62065f0ee2555d9dd892a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa723160318fac5f3fa6f4141cfc41c0606a3008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa723160318fac5f3fa6f4141cfc41c0606a3008", "html_url": "https://github.com/rust-lang/rust/commit/fa723160318fac5f3fa6f4141cfc41c0606a3008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa723160318fac5f3fa6f4141cfc41c0606a3008/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6c958ee4bf081deec951996ace9c508360c1d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6c958ee4bf081deec951996ace9c508360c1d9", "html_url": "https://github.com/rust-lang/rust/commit/ed6c958ee4bf081deec951996ace9c508360c1d9"}, {"sha": "d9592c2d9f0db851b090c10c0cc3560b87fc7789", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9592c2d9f0db851b090c10c0cc3560b87fc7789", "html_url": "https://github.com/rust-lang/rust/commit/d9592c2d9f0db851b090c10c0cc3560b87fc7789"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "80caf37d7099d67ddea64e0912cc44be3099483e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -439,7 +439,7 @@ impl MetaItem {\n             }\n             Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n                 token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),\n-                token::Nonterminal::NtPath(ref path) => path.clone(),\n+                token::Nonterminal::NtPath(ref path) => (**path).clone(),\n                 _ => return None,\n             },\n             _ => return None,"}, {"sha": "15f7aceb83d7ad0d9112a373a76e811ffb610eec", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -772,7 +772,9 @@ pub fn visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis: &mut\n         token::NtBlock(block) => vis.visit_block(block),\n         token::NtStmt(stmt) => visit_clobber(stmt, |stmt| {\n             // See reasoning above.\n-            vis.flat_map_stmt(stmt).expect_one(\"expected visitor to produce exactly one item\")\n+            stmt.map(|stmt| {\n+                vis.flat_map_stmt(stmt).expect_one(\"expected visitor to produce exactly one item\")\n+            })\n         }),\n         token::NtPat(pat) => vis.visit_pat(pat),\n         token::NtExpr(expr) => vis.visit_expr(expr),"}, {"sha": "031c6cae793e27d479a036cda091a7ee2a2c99dd", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -668,7 +668,7 @@ impl PartialEq<TokenKind> for Token {\n pub enum Nonterminal {\n     NtItem(P<ast::Item>),\n     NtBlock(P<ast::Block>),\n-    NtStmt(ast::Stmt),\n+    NtStmt(P<ast::Stmt>),\n     NtPat(P<ast::Pat>),\n     NtExpr(P<ast::Expr>),\n     NtTy(P<ast::Ty>),\n@@ -677,13 +677,13 @@ pub enum Nonterminal {\n     NtLiteral(P<ast::Expr>),\n     /// Stuff inside brackets for attributes\n     NtMeta(P<ast::AttrItem>),\n-    NtPath(ast::Path),\n-    NtVis(ast::Visibility),\n+    NtPath(P<ast::Path>),\n+    NtVis(P<ast::Visibility>),\n }\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Nonterminal, 48);\n+rustc_data_structures::static_assert_size!(Nonterminal, 16);\n \n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {"}, {"sha": "12b117d6fc9b4a25cc75ca15581d3b89d38a2d0a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -118,7 +118,7 @@ impl Annotatable {\n             Annotatable::ForeignItem(item) => {\n                 token::NtItem(P(item.and_then(ast::ForeignItem::into_item)))\n             }\n-            Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n+            Annotatable::Stmt(stmt) => token::NtStmt(stmt),\n             Annotatable::Expr(expr) => token::NtExpr(expr),\n             Annotatable::Arm(..)\n             | Annotatable::ExprField(..)"}, {"sha": "aec401a041ca35d51e29d92266c933f53ba88dda", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -90,7 +90,7 @@ impl MultiItemModifier for ProcMacroDerive {\n                 // A proc macro can't observe the fact that we're passing\n                 // them an `NtStmt` - it can only see the underlying tokens\n                 // of the wrapped item\n-                token::NtStmt(stmt.into_inner())\n+                token::NtStmt(stmt)\n             }\n             _ => unreachable!(),\n         };"}, {"sha": "7efc0ca2da234cb4132aed20f257d74c692bc09e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -41,7 +41,7 @@ macro_rules! maybe_whole_expr {\n                     return Ok(e);\n                 }\n                 token::NtPath(path) => {\n-                    let path = path.clone();\n+                    let path = (**path).clone();\n                     $p.bump();\n                     return Ok($p.mk_expr(\n                         $p.prev_token.span,"}, {"sha": "f1956fb695bf7ef4c46b738fff61ddd5dd107541", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -1289,7 +1289,7 @@ impl<'a> Parser<'a> {\n     /// so emit a proper diagnostic.\n     // Public for rustfmt usage.\n     pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n-        maybe_whole!(self, NtVis, |x| x);\n+        maybe_whole!(self, NtVis, |x| x.into_inner());\n \n         self.expected_tokens.push(TokenType::Keyword(kw::Crate));\n         if self.is_crate_vis() {"}, {"sha": "b45bca3d2e024acf169d5a34411a32d9430b07d7", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -118,7 +118,7 @@ impl<'a> Parser<'a> {\n                 token::NtBlock(self.collect_tokens_no_attrs(|this| this.parse_block())?)\n             }\n             NonterminalKind::Stmt => match self.parse_stmt(ForceCollect::Yes)? {\n-                Some(s) => token::NtStmt(s),\n+                Some(s) => token::NtStmt(P(s)),\n                 None => {\n                     return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n                 }\n@@ -161,11 +161,11 @@ impl<'a> Parser<'a> {\n                 return Err(self.struct_span_err(self.token.span, msg));\n             }\n             NonterminalKind::Path => token::NtPath(\n-                self.collect_tokens_no_attrs(|this| this.parse_path(PathStyle::Type))?,\n+                P(self.collect_tokens_no_attrs(|this| this.parse_path(PathStyle::Type))?),\n             ),\n             NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item(true)?)),\n             NonterminalKind::Vis => token::NtVis(\n-                self.collect_tokens_no_attrs(|this| this.parse_visibility(FollowedByType::Yes))?,\n+                P(self.collect_tokens_no_attrs(|this| this.parse_visibility(FollowedByType::Yes))?),\n             ),\n             NonterminalKind::Lifetime => {\n                 if self.check_lifetime() {"}, {"sha": "207ecd00e0c0a3a7ae5b39e63c4a891a8f82b8e4", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -165,7 +165,7 @@ impl<'a> Parser<'a> {\n \n         maybe_whole!(self, NtPath, |path| {\n             reject_generics_if_mod_style(self, &path);\n-            path\n+            path.into_inner()\n         });\n \n         if let token::Interpolated(nt) = &self.token.kind {"}, {"sha": "5b7ae5f7a7b822f106aa7084543c19db28e9d85f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa723160318fac5f3fa6f4141cfc41c0606a3008/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=fa723160318fac5f3fa6f4141cfc41c0606a3008", "patch": "@@ -54,7 +54,7 @@ impl<'a> Parser<'a> {\n             stmt.visit_attrs(|stmt_attrs| {\n                 attrs.prepend_to_nt_inner(stmt_attrs);\n             });\n-            return Ok(Some(stmt));\n+            return Ok(Some(stmt.into_inner()));\n         }\n \n         Ok(Some(if self.token.is_keyword(kw::Let) {\n@@ -535,7 +535,7 @@ impl<'a> Parser<'a> {\n         recover: AttemptLocalParseRecovery,\n     ) -> PResult<'a, Option<Stmt>> {\n         // Skip looking for a trailing semicolon when we have an interpolated statement.\n-        maybe_whole!(self, NtStmt, |x| Some(x));\n+        maybe_whole!(self, NtStmt, |x| Some(x.into_inner()));\n \n         let Some(mut stmt) = self.parse_stmt_without_recovery(true, ForceCollect::No)? else {\n             return Ok(None);"}]}