{"sha": "760226733e940cb375f791e894fbb554555eeb01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDIyNjczM2U5NDBjYjM3NWY3OTFlODk0ZmJiNTU0NTU1ZWViMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-22T18:06:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-22T18:06:31Z"}, "message": "Auto merge of #63807 - Centril:rollup-b8lo8ct, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #63624 (When declaring a declarative macro in an item it's only accessible inside it)\n - #63737 (Fix naming misspelling)\n - #63767 (Use more optimal Ord implementation for integers)\n - #63782 (Fix confusion in theme picker functions)\n - #63788 (Add amanjeev to rustc-guide toolstate)\n - #63796 (Tweak E0308 on opaque types)\n - #63805 (Apply few Clippy suggestions)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4a06a284e9cdeb6656744b45fa5f183507221105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a06a284e9cdeb6656744b45fa5f183507221105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760226733e940cb375f791e894fbb554555eeb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760226733e940cb375f791e894fbb554555eeb01", "html_url": "https://github.com/rust-lang/rust/commit/760226733e940cb375f791e894fbb554555eeb01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760226733e940cb375f791e894fbb554555eeb01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "html_url": "https://github.com/rust-lang/rust/commit/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba"}, {"sha": "3068064430322888279b60ccec258d7f4bcd4a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/3068064430322888279b60ccec258d7f4bcd4a32", "html_url": "https://github.com/rust-lang/rust/commit/3068064430322888279b60ccec258d7f4bcd4a32"}], "stats": {"total": 218, "additions": 157, "deletions": 61}, "files": [{"sha": "131d2034675e3db0f0897258dd90493c9c87ba38", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -262,7 +262,7 @@ pub fn native_lib_boilerplate(\n     if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(src_dir, &timestamp) {\n         Ok(NativeLibBoilerplate {\n             src_dir: src_dir.to_path_buf(),\n-            out_dir: out_dir,\n+            out_dir,\n         })\n     } else {\n         Err(())"}, {"sha": "167a9dd1c3620cba039ea33ac1c1b3b996b2d596", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -1012,9 +1012,11 @@ mod impls {\n             impl Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n-                    if *self == *other { Equal }\n-                    else if *self < *other { Less }\n-                    else { Greater }\n+                    // The order here is important to generate more optimal assembly.\n+                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.\n+                    if *self < *other { Less }\n+                    else if *self > *other { Greater }\n+                    else { Equal }\n                 }\n             }\n         )*)"}, {"sha": "f50781890ab225eabc5ea646bbc68e440792fb64", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -1309,7 +1309,7 @@ impl<I> DoubleEndedIterator for Peekable<I> where I: DoubleEndedIterator {\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n         match self.peeked.take() {\n-            Some(None) => return Try::from_ok(init),\n+            Some(None) => Try::from_ok(init),\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n@@ -1326,7 +1326,7 @@ impl<I> DoubleEndedIterator for Peekable<I> where I: DoubleEndedIterator {\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         match self.peeked {\n-            Some(None) => return init,\n+            Some(None) => init,\n             Some(Some(v)) => {\n                 let acc = self.iter.rfold(init, &mut fold);\n                 fold(acc, v)"}, {"sha": "931768564ca3cf8c5a34fca6a14e376567c4f1eb", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -3026,8 +3026,7 @@ macro_rules! len {\n         if size == 0 {\n             // This _cannot_ use `unchecked_sub` because we depend on wrapping\n             // to represent the length of long ZST slice iterators.\n-            let diff = ($self.end as usize).wrapping_sub(start as usize);\n-            diff\n+            ($self.end as usize).wrapping_sub(start as usize)\n         } else {\n             // We know that `start <= end`, so can do better than `offset_from`,\n             // which needs to deal in signed.  By setting appropriate flags here"}, {"sha": "f80e527dfd9b70b131778f9f889d690984f690b6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -514,8 +514,7 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId)\n-    {\n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n@@ -525,7 +524,7 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => (m, span, hir_id),\n             Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n-            _ => panic!(\"not a module\")\n+            node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n \n@@ -679,6 +678,16 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Wether `hir_id` corresponds to a `mod` or a crate.\n+    pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n+        match self.lookup(hir_id) {\n+            Some(Entry { node: Node::Item(Item { node: ItemKind::Mod(_), .. }), .. }) |\n+            Some(Entry { node: Node::Crate, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good `HirId` we found. Note that reaching the crate root (`id == 0`),"}, {"sha": "9be73cf3c6d1645439e9e3af528318a097acdf5f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -1650,7 +1650,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n                 _ => \"match arms have compatible types\",\n             },\n-            IfExpression { .. } => \"if and else have compatible types\",\n+            IfExpression { .. } => \"if and else have incompatible types\",\n             IfExpressionWithNoElse => \"if missing an else returns ()\",\n             MainFunctionType => \"`main` function has the correct type\",\n             StartFunctionType => \"`start` function has the correct type\","}, {"sha": "c70006b68d69aff5f3230a50abde2935206e7c3d", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -247,20 +247,32 @@ impl<'tcx> ty::TyS<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn note_and_explain_type_err(self,\n-                                     db: &mut DiagnosticBuilder<'_>,\n-                                     err: &TypeError<'tcx>,\n-                                     sp: Span) {\n+    pub fn note_and_explain_type_err(\n+        self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        err: &TypeError<'tcx>,\n+        sp: Span,\n+    ) {\n         use self::TypeError::*;\n \n-        match err.clone() {\n+        match err {\n             Sorts(values) => {\n                 let expected_str = values.expected.sort_string(self);\n                 let found_str = values.found.sort_string(self);\n                 if expected_str == found_str && expected_str == \"closure\" {\n                     db.note(\"no two closures, even if identical, have the same type\");\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n+                if expected_str == found_str && expected_str == \"opaque type\" { // Issue #63167\n+                    db.note(\"distinct uses of `impl Trait` result in different opaque types\");\n+                    let e_str = values.expected.to_string();\n+                    let f_str = values.found.to_string();\n+                    if &e_str == &f_str && &e_str == \"impl std::future::Future\" {\n+                        // FIXME: use non-string based check.\n+                        db.help(\"if both `Future`s have the same `Output` type, consider \\\n+                                 `.await`ing on both of them\");\n+                    }\n+                }\n                 if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n                        (&values.found.sty, &values.expected.sty) // Issue #53280\n                 {"}, {"sha": "146058963b69dd67e549c6f01ae81dd587194ef6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -508,11 +508,7 @@ impl EmbargoVisitor<'tcx> {\n         }\n     }\n \n-    fn update_macro_reachable_mod(\n-        &mut self,\n-        reachable_mod: hir::HirId,\n-        defining_mod: DefId,\n-    ) {\n+    fn update_macro_reachable_mod(&mut self, reachable_mod: hir::HirId, defining_mod: DefId) {\n         let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n         let module = self.tcx.hir().get_module(module_def_id).0;\n         for item_id in &module.item_ids {\n@@ -524,19 +520,13 @@ impl EmbargoVisitor<'tcx> {\n                 self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n             }\n         }\n-\n         if let Some(exports) = self.tcx.module_exports(module_def_id) {\n             for export in exports {\n                 if export.vis.is_accessible_from(defining_mod, self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n                         let vis = def_id_visibility(self.tcx, def_id).0;\n                         if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n-                            self.update_macro_reachable_def(\n-                                hir_id,\n-                                def_kind,\n-                                vis,\n-                                defining_mod,\n-                            );\n+                            self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n                         }\n                     }\n                 }\n@@ -892,10 +882,14 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n         let mut module_id = self.tcx.hir().as_local_hir_id(macro_module_def_id).unwrap();\n+        if !self.tcx.hir().is_hir_id_module(module_id) {\n+            // `module_id` doesn't correspond to a `mod`, return early (#63164).\n+            return;\n+        }\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n         let new_level = self.update(md.hir_id, level);\n         if new_level.is_none() {\n-            return\n+            return;\n         }\n \n         loop {"}, {"sha": "b64e74468e6e9e1bac9d0917cec62aa9472d0421", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -876,22 +876,22 @@ r#\"var themes = document.getElementById(\"theme-choices\");\n var themePicker = document.getElementById(\"theme-picker\");\n \n function showThemeButtonState() {{\n-    themes.style.display = \"none\";\n-    themePicker.style.borderBottomRightRadius = \"3px\";\n-    themePicker.style.borderBottomLeftRadius = \"3px\";\n-}}\n-\n-function hideThemeButtonState() {{\n     themes.style.display = \"block\";\n     themePicker.style.borderBottomRightRadius = \"0\";\n     themePicker.style.borderBottomLeftRadius = \"0\";\n }}\n \n+function hideThemeButtonState() {{\n+    themes.style.display = \"none\";\n+    themePicker.style.borderBottomRightRadius = \"3px\";\n+    themePicker.style.borderBottomLeftRadius = \"3px\";\n+}}\n+\n function switchThemeButtonState() {{\n     if (themes.style.display === \"block\") {{\n-        showThemeButtonState();\n-    }} else {{\n         hideThemeButtonState();\n+    }} else {{\n+        showThemeButtonState();\n     }}\n }};\n "}, {"sha": "3d0f00095aca3f05a70248c22694954745d16255", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -105,9 +105,9 @@ if (!DOMTokenList.prototype.remove) {\n                 sidebar.appendChild(div);\n             }\n         }\n-        var themePicker = document.getElementsByClassName(\"theme-picker\");\n-        if (themePicker && themePicker.length > 0) {\n-            themePicker[0].style.display = \"none\";\n+        var themePickers = document.getElementsByClassName(\"theme-picker\");\n+        if (themePickers && themePickers.length > 0) {\n+            themePickers[0].style.display = \"none\";\n         }\n     }\n \n@@ -123,9 +123,9 @@ if (!DOMTokenList.prototype.remove) {\n             filler.remove();\n         }\n         document.getElementsByTagName(\"body\")[0].style.marginTop = \"\";\n-        var themePicker = document.getElementsByClassName(\"theme-picker\");\n-        if (themePicker && themePicker.length > 0) {\n-            themePicker[0].style.display = null;\n+        var themePickers = document.getElementsByClassName(\"theme-picker\");\n+        if (themePickers && themePickers.length > 0) {\n+            themePickers[0].style.display = null;\n         }\n     }\n "}, {"sha": "1373b12e3721c3b36fafaff227b368f14639931e", "filename": "src/test/codegen/integer-cmp.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fcodegen%2Finteger-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fcodegen%2Finteger-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finteger-cmp.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -0,0 +1,28 @@\n+// This is test for more optimal Ord implementation for integers.\n+// See <https://github.com/rust-lang/rust/issues/63758> for more info.\n+\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+// CHECK-LABEL: @cmp_signed\n+#[no_mangle]\n+pub fn cmp_signed(a: i64, b: i64) -> Ordering {\n+// CHECK: icmp slt\n+// CHECK: icmp sgt\n+// CHECK: zext i1\n+// CHECK: select i1\n+    a.cmp(&b)\n+}\n+\n+// CHECK-LABEL: @cmp_unsigned\n+#[no_mangle]\n+pub fn cmp_unsigned(a: u32, b: u32) -> Ordering {\n+// CHECK: icmp ult\n+// CHECK: icmp ugt\n+// CHECK: zext i1\n+// CHECK: select i1\n+    a.cmp(&b)\n+}"}, {"sha": "d354fe4a7dbfa509d462c96712cf2b5375992d9f", "filename": "src/test/ui/macros/macro-in-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+#![feature(decl_macro)]\n+\n+pub fn moo() {\n+    pub macro ABC() {{}}\n+}\n+\n+fn main() {}"}, {"sha": "00d07b7fe48e11f47879e7edacff403d2613b0cc", "filename": "src/test/ui/non-integer-atomic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fnon-integer-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fnon-integer-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-integer-atomic.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "previous_filename": "src/test/ui/non-interger-atomic.rs"}, {"sha": "b3cf788d834d80fcc5318dbbdd99da57dce78104", "filename": "src/test/ui/non-integer-atomic.stderr", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -1,95 +1,95 @@\n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-interger-atomic.rs:13:5\n+  --> $DIR/non-integer-atomic.rs:13:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-interger-atomic.rs:18:5\n+  --> $DIR/non-integer-atomic.rs:18:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-interger-atomic.rs:23:5\n+  --> $DIR/non-integer-atomic.rs:23:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-interger-atomic.rs:28:5\n+  --> $DIR/non-integer-atomic.rs:28:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-interger-atomic.rs:33:5\n+  --> $DIR/non-integer-atomic.rs:33:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-interger-atomic.rs:38:5\n+  --> $DIR/non-integer-atomic.rs:38:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-interger-atomic.rs:43:5\n+  --> $DIR/non-integer-atomic.rs:43:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-interger-atomic.rs:48:5\n+  --> $DIR/non-integer-atomic.rs:48:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-interger-atomic.rs:53:5\n+  --> $DIR/non-integer-atomic.rs:53:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-interger-atomic.rs:58:5\n+  --> $DIR/non-integer-atomic.rs:58:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-interger-atomic.rs:63:5\n+  --> $DIR/non-integer-atomic.rs:63:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-interger-atomic.rs:68:5\n+  --> $DIR/non-integer-atomic.rs:68:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-interger-atomic.rs:73:5\n+  --> $DIR/non-integer-atomic.rs:73:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-interger-atomic.rs:78:5\n+  --> $DIR/non-integer-atomic.rs:78:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-interger-atomic.rs:83:5\n+  --> $DIR/non-integer-atomic.rs:83:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-interger-atomic.rs:88:5\n+  --> $DIR/non-integer-atomic.rs:88:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/non-interger-atomic.stderr"}, {"sha": "979bb60d48c12c820959e4384da300240a2b2a7c", "filename": "src/test/ui/suggestions/opaque-type-error.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+use core::future::Future;\n+\n+async fn base_thing() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn thing_one() -> impl Future<Output = Result<(), ()>> {\n+    base_thing()\n+}\n+\n+fn thing_two() -> impl Future<Output = Result<(), ()>> {\n+    base_thing()\n+}\n+\n+async fn thing() -> Result<(), ()> {\n+    if true {\n+        thing_one()\n+    } else {\n+        thing_two() //~ ERROR if and else have incompatible types\n+    }.await\n+}\n+\n+fn main() {}"}, {"sha": "3c9ea05aeceb2f8d70697e572eb037b439ddfb3f", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/opaque-type-error.rs:20:9\n+   |\n+LL | /     if true {\n+LL | |         thing_one()\n+   | |         ----------- expected because of this\n+LL | |     } else {\n+LL | |         thing_two()\n+   | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+LL | |     }.await\n+   | |_____- if and else have incompatible types\n+   |\n+   = note: expected type `impl std::future::Future` (opaque type)\n+              found type `impl std::future::Future` (opaque type)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+   = help: if both `Future`s have the same `Output` type, consider `.await`ing on both of them\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "648838d26efe9a9926ab5a88d897f316b6ad8a5d", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760226733e940cb375f791e894fbb554555eeb01/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/760226733e940cb375f791e894fbb554555eeb01/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=760226733e940cb375f791e894fbb554555eeb01", "patch": "@@ -34,7 +34,7 @@\n         '@ryankurte @thejpster @therealprof'\n     ),\n     'edition-guide': '@ehuss @Centril @steveklabnik',\n-    'rustc-guide': '@mark-i-m @spastorino'\n+    'rustc-guide': '@mark-i-m @spastorino @amanjeev'\n }\n \n REPOS = {"}]}