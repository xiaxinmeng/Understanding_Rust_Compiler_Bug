{"sha": "b7b4c3a9aafd1f5f19371f046b5c867826c64224", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YjRjM2E5YWFmZDFmNWYxOTM3MWYwNDZiNWM4Njc4MjZjNjQyMjQ=", "commit": {"author": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-09T17:43:30Z"}, "committer": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-16T09:54:20Z"}, "message": "Update stderr files with --bless", "tree": {"sha": "9a6682a62954e15db77b0802e6b908b78dfd7e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6682a62954e15db77b0802e6b908b78dfd7e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b4c3a9aafd1f5f19371f046b5c867826c64224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4c3a9aafd1f5f19371f046b5c867826c64224", "html_url": "https://github.com/rust-lang/rust/commit/b7b4c3a9aafd1f5f19371f046b5c867826c64224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b4c3a9aafd1f5f19371f046b5c867826c64224/comments", "author": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ebd57960efd1d96c142b456add67b5257c21fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ebd57960efd1d96c142b456add67b5257c21fb", "html_url": "https://github.com/rust-lang/rust/commit/56ebd57960efd1d96c142b456add67b5257c21fb"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "4ba4925ef1b378c8dd91d9c648c34096c6a029e6", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:33:23\n+  --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n@@ -8,7 +8,7 @@ LL | fn b() { dent(ModelT, Blue); }\n               found type `Blue`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:34:23\n+  --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n@@ -17,7 +17,7 @@ LL | fn c() { dent(ModelU, Black); }\n               found type `Black`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:40:28\n+  --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n@@ -26,7 +26,7 @@ LL | fn f() { ModelT.chip_paint(Blue); }\n               found type `Blue`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:41:28\n+  --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`"}, {"sha": "89c48d50cdb65334d40bc14bcb5fb0da926774e4", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,27 +1,27 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:37:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n               found type `Blue`\n note: required by `blue_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:33:1\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:1\n    |\n LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:38:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`\n               found type `Black`\n note: required by `black_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:30:1\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:1\n    |\n LL | fn black_car<C:Car<Color=Black>>(c: C) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "20265d66c6f43abdc1b8f5ad3f9d58879a18fe46", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:28:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`"}, {"sha": "4811b1e0ff39ebef500c8a0e0eb14d0e8c588f77", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:30:32\n+  --> $DIR/bound-normalization-fail.rs:29:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,13 +17,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:47:41\n+  --> $DIR/bound-normalization-fail.rs:45:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:47:41\n+  --> $DIR/bound-normalization-fail.rs:45:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "24aa88c3fa379f42c3888943a879edfd63d5943f", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error[E0284]: type annotations required: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n-  --> $DIR/issue-12028.rs:29:14\n+  --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n    |              ^^^^^^^^^^^^"}, {"sha": "ed5800940ee3192597abbceea1d05fdba9d45078", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,33 +1,33 @@\n error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n    |\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 32:15\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 32:18\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 53:19\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:19\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 46:19\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:19\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 53:22\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:22\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:22\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:22\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                      ^^"}, {"sha": "eed9934be121dc0bdf5f564f0c51470348403208", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -10,7 +10,7 @@ LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   -- -- lifetime `'b` defined here"}, {"sha": "152e6c5600c4e63e7ab775abe989d05cd30613f0", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 31:15\n-  --> $DIR/regions-outlives-projection-container-wc.rs:31:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 31:18\n-  --> $DIR/regions-outlives-projection-container-wc.rs:31:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "8c54d8da0a06395ec758611beed2908be37d665f", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "3c1a98a3c018fa589a358ef0dd2ee58d46bbdbb6", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:40:13\n+  --> $DIR/regions-outlives-projection-container.rs:36:13\n    |\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 32:15\n-  --> $DIR/regions-outlives-projection-container.rs:32:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 28:15\n+  --> $DIR/regions-outlives-projection-container.rs:28:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 32:18\n-  --> $DIR/regions-outlives-projection-container.rs:32:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 28:18\n+  --> $DIR/regions-outlives-projection-container.rs:28:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:58:13\n+  --> $DIR/regions-outlives-projection-container.rs:54:13\n    |\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 54:18\n-  --> $DIR/regions-outlives-projection-container.rs:54:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 50:18\n+  --> $DIR/regions-outlives-projection-container.rs:50:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 54:21\n-  --> $DIR/regions-outlives-projection-container.rs:54:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 50:21\n+  --> $DIR/regions-outlives-projection-container.rs:50:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:67:12\n+  --> $DIR/regions-outlives-projection-container.rs:63:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 62:20\n-  --> $DIR/regions-outlives-projection-container.rs:62:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 58:20\n+  --> $DIR/regions-outlives-projection-container.rs:58:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 62:23\n-  --> $DIR/regions-outlives-projection-container.rs:62:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 58:23\n+  --> $DIR/regions-outlives-projection-container.rs:58:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:74:12\n+  --> $DIR/regions-outlives-projection-container.rs:70:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 71:23\n-  --> $DIR/regions-outlives-projection-container.rs:71:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 67:23\n+  --> $DIR/regions-outlives-projection-container.rs:67:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 71:26\n-  --> $DIR/regions-outlives-projection-container.rs:71:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 67:26\n+  --> $DIR/regions-outlives-projection-container.rs:67:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}, {"sha": "13636b28b126c675f5e54eb7ea75b733a3e0310d", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:22:5\n+  --> $DIR/specialization-no-default.rs:20:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -13,7 +13,7 @@ LL |       fn foo(&self) {}\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `bar` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:25:5\n+  --> $DIR/specialization-no-default.rs:23:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -27,7 +27,7 @@ LL |       fn bar(&self) {}\n    = note: to specialize, `bar` in the parent `impl` must be marked `default`\n \n error[E0520]: `T` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:41:5\n+  --> $DIR/specialization-no-default.rs:37:5\n    |\n LL | / impl<T> Bar for T {\n LL | |     type T = u8;\n@@ -40,7 +40,7 @@ LL |       type T = ();\n    = note: to specialize, `T` in the parent `impl` must be marked `default`\n \n error[E0520]: `baz` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:61:5\n+  --> $DIR/specialization-no-default.rs:55:5\n    |\n LL | / impl<T: Clone> Baz for T {\n LL | |     fn baz(&self) {}\n@@ -53,7 +53,7 @@ LL |       fn baz(&self) {}\n    = note: to specialize, `baz` in the parent `impl` must be marked `default`\n \n error[E0520]: `redundant` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:82:5\n+  --> $DIR/specialization-no-default.rs:74:5\n    |\n LL | / impl<T: Clone> Redundant for T {\n LL | |     fn redundant(&self) {}"}, {"sha": "992e9abbd4ce2e4db90a339393e1dc94e95bf2b9", "filename": "src/test/ui/specialization/specialization-no-default.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b4c3a9aafd1f5f19371f046b5c867826c64224/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr?ref=b7b4c3a9aafd1f5f19371f046b5c867826c64224", "patch": "@@ -1,5 +1,5 @@\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:22:5\n+  --> $DIR/specialization-no-default.rs:20:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -13,7 +13,7 @@ LL |       fn foo(&self) {}\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `bar` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:25:5\n+  --> $DIR/specialization-no-default.rs:23:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -27,7 +27,7 @@ LL |       fn bar(&self) {}\n    = note: to specialize, `bar` in the parent `impl` must be marked `default`\n \n error[E0520]: `T` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:41:5\n+  --> $DIR/specialization-no-default.rs:37:5\n    |\n LL | / impl<T> Bar for T {\n LL | |     type T = u8;\n@@ -40,7 +40,7 @@ LL |       type T = ();\n    = note: to specialize, `T` in the parent `impl` must be marked `default`\n \n error[E0520]: `baz` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:61:5\n+  --> $DIR/specialization-no-default.rs:55:5\n    |\n LL | / impl<T: Clone> Baz for T {\n LL | |     fn baz(&self) {}\n@@ -53,7 +53,7 @@ LL |       fn baz(&self) {}\n    = note: to specialize, `baz` in the parent `impl` must be marked `default`\n \n error[E0520]: `redundant` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:82:5\n+  --> $DIR/specialization-no-default.rs:74:5\n    |\n LL | / impl<T: Clone> Redundant for T {\n LL | |     fn redundant(&self) {}"}]}