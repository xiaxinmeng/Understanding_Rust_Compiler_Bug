{"sha": "2d48ffa9c63255eafa25639142f3b5601d42ae05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNDhmZmE5YzYzMjU1ZWFmYTI1NjM5MTQyZjNiNTYwMWQ0MmFlMDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-25T21:28:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Store type variable origins in InferenceFudger", "tree": {"sha": "757570298fb0a6e6827dab1d70dd4d2ca4706064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757570298fb0a6e6827dab1d70dd4d2ca4706064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d48ffa9c63255eafa25639142f3b5601d42ae05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d48ffa9c63255eafa25639142f3b5601d42ae05", "html_url": "https://github.com/rust-lang/rust/commit/2d48ffa9c63255eafa25639142f3b5601d42ae05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d48ffa9c63255eafa25639142f3b5601d42ae05/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a04f06cb6522040af4d9352c3a25dd66547acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a04f06cb6522040af4d9352c3a25dd66547acc", "html_url": "https://github.com/rust-lang/rust/commit/58a04f06cb6522040af4d9352c3a25dd66547acc"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "4c603cb54559d47193dc149c326935efdfa546eb", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d48ffa9c63255eafa25639142f3b5601d42ae05/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d48ffa9c63255eafa25639142f3b5601d42ae05/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=2d48ffa9c63255eafa25639142f3b5601d42ae05", "patch": "@@ -3,8 +3,10 @@ use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n use super::InferCtxt;\n use super::RegionVariableOrigin;\n+use super::type_variable::TypeVariableOrigin;\n \n use std::ops::Range;\n+use rustc_data_structures::fx::FxHashMap;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// This rather funky routine is used while processing expected\n@@ -115,7 +117,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    type_vars: Range<TyVid>,\n+    type_vars: FxHashMap<TyVid, TypeVariableOrigin>,\n     int_vars: Range<IntVid>,\n     float_vars: Range<FloatVid>,\n     region_vars: Range<RegionVid>,\n@@ -130,10 +132,9 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Infer(ty::InferTy::TyVar(vid)) => {\n-                if self.type_vars.contains(&vid) {\n+                if let Some(&origin) = self.type_vars.get(&vid) {\n                     // This variable was created during the fudging.\n                     // Recreate it with a fresh variable here.\n-                    let origin = self.infcx.type_variables.borrow().var_origin(vid).clone();\n                     self.infcx.next_ty_var(origin)\n                 } else {\n                     // This variable was created before the"}, {"sha": "cde695aefc10a195c316087e91d63b677ede2c47", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d48ffa9c63255eafa25639142f3b5601d42ae05/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d48ffa9c63255eafa25639142f3b5601d42ae05/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=2d48ffa9c63255eafa25639142f3b5601d42ae05", "patch": "@@ -4,8 +4,8 @@ use crate::ty::{self, Ty, TyVid};\n \n use std::cmp;\n use std::marker::PhantomData;\n-use std::ops::Range;\n use std::u32;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n \n@@ -291,9 +291,15 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     }\n \n     /// Returns a range of the type variables created during the snapshot.\n-    pub fn vars_since_snapshot(&mut self, s: &Snapshot<'tcx>) -> Range<TyVid> {\n+    pub fn vars_since_snapshot(\n+        &mut self,\n+        s: &Snapshot<'tcx>,\n+    ) -> FxHashMap<TyVid, TypeVariableOrigin> {\n         let range = self.eq_relations.vars_since_snapshot(&s.eq_snapshot);\n-        range.start.vid..range.end.vid\n+        (range.start.vid.index..range.end.vid.index).map(|index| {\n+            let origin = self.values.get(index as usize).origin.clone();\n+            (TyVid { index }, origin)\n+        }).collect()\n     }\n \n     /// Finds the set of type variables that existed *before* `s`"}]}