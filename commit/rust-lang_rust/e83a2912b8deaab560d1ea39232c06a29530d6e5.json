{"sha": "e83a2912b8deaab560d1ea39232c06a29530d6e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4M2EyOTEyYjhkZWFhYjU2MGQxZWEzOTIzMmMwNmEyOTUzMGQ2ZTU=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-08T23:51:59Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-08T23:51:59Z"}, "message": "Simpify project discovery", "tree": {"sha": "aa363cb56e41042da6db6712834910c2db771505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa363cb56e41042da6db6712834910c2db771505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83a2912b8deaab560d1ea39232c06a29530d6e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83a2912b8deaab560d1ea39232c06a29530d6e5", "html_url": "https://github.com/rust-lang/rust/commit/e83a2912b8deaab560d1ea39232c06a29530d6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83a2912b8deaab560d1ea39232c06a29530d6e5/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca9aa8b7e7f363779aeba1dfc60397f46b9544d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca9aa8b7e7f363779aeba1dfc60397f46b9544d", "html_url": "https://github.com/rust-lang/rust/commit/aca9aa8b7e7f363779aeba1dfc60397f46b9544d"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "4f098b706b66db3e52b9e30ddd569517ff5eb853", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e83a2912b8deaab560d1ea39232c06a29530d6e5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83a2912b8deaab560d1ea39232c06a29530d6e5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e83a2912b8deaab560d1ea39232c06a29530d6e5", "patch": "@@ -88,46 +88,28 @@ impl ProjectRoot {\n     }\n \n     pub fn discover(path: &Path) -> io::Result<Vec<ProjectRoot>> {\n-        if let Some(project_json) = find_rust_project_json(path) {\n+        if let Some(project_json) = find_in_parent_dirs(path, \"rust-project.json\") {\n             return Ok(vec![ProjectRoot::ProjectJson(project_json)]);\n         }\n         return find_cargo_toml(path)\n             .map(|paths| paths.into_iter().map(ProjectRoot::CargoToml).collect());\n \n-        fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n-            if path.ends_with(\"rust-project.json\") {\n-                return Some(path.to_path_buf());\n-            }\n-\n-            let mut curr = Some(path);\n-            while let Some(path) = curr {\n-                let candidate = path.join(\"rust-project.json\");\n-                if candidate.exists() {\n-                    return Some(candidate);\n-                }\n-                curr = path.parent();\n-            }\n-\n-            None\n-        }\n-\n         fn find_cargo_toml(path: &Path) -> io::Result<Vec<PathBuf>> {\n-            if path.ends_with(\"Cargo.toml\") {\n-                return Ok(vec![path.to_path_buf()]);\n+            match find_in_parent_dirs(path, \"Cargo.toml\") {\n+                Some(it) => Ok(vec![it]),\n+                None => Ok(find_cargo_toml_in_child_dir(read_dir(path)?)),\n             }\n+        }\n \n-            if let Some(p) = find_cargo_toml_in_parent_dir(path) {\n-                return Ok(vec![p]);\n+        fn find_in_parent_dirs(path: &Path, target_file_name: &str) -> Option<PathBuf> {\n+            if path.ends_with(target_file_name) {\n+                return Some(path.to_owned());\n             }\n \n-            let entities = read_dir(path)?;\n-            Ok(find_cargo_toml_in_child_dir(entities))\n-        }\n-\n-        fn find_cargo_toml_in_parent_dir(path: &Path) -> Option<PathBuf> {\n             let mut curr = Some(path);\n+\n             while let Some(path) = curr {\n-                let candidate = path.join(\"Cargo.toml\");\n+                let candidate = path.join(target_file_name);\n                 if candidate.exists() {\n                     return Some(candidate);\n                 }\n@@ -139,14 +121,11 @@ impl ProjectRoot {\n \n         fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<PathBuf> {\n             // Only one level down to avoid cycles the easy way and stop a runaway scan with large projects\n-            let mut valid_canditates = vec![];\n-            for entity in entities.filter_map(Result::ok) {\n-                let candidate = entity.path().join(\"Cargo.toml\");\n-                if candidate.exists() {\n-                    valid_canditates.push(candidate)\n-                }\n-            }\n-            valid_canditates\n+            entities\n+                .filter_map(Result::ok)\n+                .map(|it| it.path().join(\"Cargo.toml\"))\n+                .filter(|it| it.exists())\n+                .collect()\n         }\n     }\n }"}]}