{"sha": "243e45aac3fccf9403ad1bed162073f4f314b270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0M2U0NWFhYzNmY2NmOTQwM2FkMWJlZDE2MjA3M2Y0ZjMxNGIyNzA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-12-04T00:04:08Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-03T19:50:18Z"}, "message": "normalize field types in copy implementations\n\nFixes #34377.", "tree": {"sha": "afdef54647a35f536925171971399d58a43ae21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afdef54647a35f536925171971399d58a43ae21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243e45aac3fccf9403ad1bed162073f4f314b270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243e45aac3fccf9403ad1bed162073f4f314b270", "html_url": "https://github.com/rust-lang/rust/commit/243e45aac3fccf9403ad1bed162073f4f314b270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243e45aac3fccf9403ad1bed162073f4f314b270/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d938ba47699a1539b00cbc59e6fc647010df340a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d938ba47699a1539b00cbc59e6fc647010df340a", "html_url": "https://github.com/rust-lang/rust/commit/d938ba47699a1539b00cbc59e6fc647010df340a"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "34c07d442e33d6e385b977f9dc9a9d8566dd33df", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/243e45aac3fccf9403ad1bed162073f4f314b270/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243e45aac3fccf9403ad1bed162073f4f314b270/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=243e45aac3fccf9403ad1bed162073f4f314b270", "patch": "@@ -147,34 +147,40 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                                        self_type: Ty<'tcx>, span: Span)\n                                        -> Result<(),CopyImplementationError> {\n         // FIXME: (@jroesch) float this code up\n-        tcx.infer_ctxt(None, Some(self.clone()), Reveal::ExactMatch).enter(|infcx| {\n-            let adt = match self_type.sty {\n-                ty::TyAdt(adt, substs) => match adt.adt_kind() {\n-                    AdtKind::Struct | AdtKind::Union => {\n-                        for field in adt.all_fields() {\n-                            let field_ty = field.ty(tcx, substs);\n-                            if infcx.type_moves_by_default(field_ty, span) {\n-                                return Err(CopyImplementationError::InfrigingField(\n-                                    field.name))\n-                            }\n+        tcx.infer_ctxt(None, Some(self.clone()), Reveal::NotSpecializable).enter(|infcx| {\n+            let (adt, substs) = match self_type.sty {\n+                ty::TyAdt(adt, substs) => (adt, substs),\n+                _ => return Err(CopyImplementationError::NotAnAdt)\n+            };\n+\n+            let field_implements_copy = |field: &ty::FieldDef| {\n+                let cause = traits::ObligationCause::dummy();\n+                match traits::fully_normalize(&infcx, cause, &field.ty(tcx, substs)) {\n+                    Ok(ty) => !infcx.type_moves_by_default(ty, span),\n+                    Err(..) => false\n+                }\n+            };\n+\n+            match adt.adt_kind() {\n+                AdtKind::Struct | AdtKind::Union => {\n+                    for field in adt.all_fields() {\n+                        if !field_implements_copy(field) {\n+                            return Err(CopyImplementationError::InfrigingField(\n+                                field.name))\n                         }\n-                        adt\n                     }\n-                    AdtKind::Enum => {\n-                        for variant in &adt.variants {\n-                            for field in &variant.fields {\n-                                let field_ty = field.ty(tcx, substs);\n-                                if infcx.type_moves_by_default(field_ty, span) {\n-                                    return Err(CopyImplementationError::InfrigingVariant(\n-                                        variant.name))\n-                                }\n+                }\n+                AdtKind::Enum => {\n+                    for variant in &adt.variants {\n+                        for field in &variant.fields {\n+                            if !field_implements_copy(field) {\n+                                return Err(CopyImplementationError::InfrigingVariant(\n+                                    variant.name))\n                             }\n                         }\n-                        adt\n                     }\n-                },\n-                _ => return Err(CopyImplementationError::NotAnAdt)\n-            };\n+                }\n+            }\n \n             if adt.has_dtor() {\n                 return Err(CopyImplementationError::HasDestructor);"}, {"sha": "477112ab3c5ab289585c5433e6fb1d5a0d52f866", "filename": "src/test/run-pass/issue-33187.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/243e45aac3fccf9403ad1bed162073f4f314b270/src%2Ftest%2Frun-pass%2Fissue-33187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243e45aac3fccf9403ad1bed162073f4f314b270/src%2Ftest%2Frun-pass%2Fissue-33187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33187.rs?ref=243e45aac3fccf9403ad1bed162073f4f314b270", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<A: Repr>(<A as Repr>::Data);\n+\n+impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy { }\n+impl<A> Clone for Foo<A> where <A as Repr>::Data: Clone {\n+    fn clone(&self) -> Self { Foo(self.0.clone()) }\n+}\n+\n+trait Repr {\n+    type Data;\n+}\n+\n+impl<A> Repr for A {\n+    type Data = u32;\n+}\n+\n+fn main() {\n+}"}]}