{"sha": "f0e5e228066f8e307bc5680ed62c11bb6b692411", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTVlMjI4MDY2ZjhlMzA3YmM1NjgwZWQ2MmMxMWJiNmI2OTI0MTE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T20:06:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T18:04:22Z"}, "message": "Make is_private_dep a query.", "tree": {"sha": "404b871f5f92213536d10c523c1aeb89ac91639d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404b871f5f92213536d10c523c1aeb89ac91639d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e5e228066f8e307bc5680ed62c11bb6b692411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e5e228066f8e307bc5680ed62c11bb6b692411", "html_url": "https://github.com/rust-lang/rust/commit/f0e5e228066f8e307bc5680ed62c11bb6b692411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e5e228066f8e307bc5680ed62c11bb6b692411/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee94fbb607957ff842778ebec5e8e621145c60b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee94fbb607957ff842778ebec5e8e621145c60b3", "html_url": "https://github.com/rust-lang/rust/commit/ee94fbb607957ff842778ebec5e8e621145c60b3"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "468e558b5abe590d59d6ce9ce104320588d72d5a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f0e5e228066f8e307bc5680ed62c11bb6b692411", "patch": "@@ -188,6 +188,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n     crate_name => { cdata.root.name }\n+    is_private_dep => { cdata.private_dep }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -476,10 +477,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).root.name\n     }\n \n-    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).private_dep\n-    }\n-\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n         self.get_crate_data(cnum).root.stable_crate_id\n     }"}, {"sha": "04782f2540c03da74d7a384a7a7c3b5d07c1fc3e", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=f0e5e228066f8e307bc5680ed62c11bb6b692411", "patch": "@@ -199,7 +199,6 @@ pub trait CrateStore: std::fmt::Debug {\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n "}, {"sha": "8943511b12337b96215a18c881c1b90c97eaa5d1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f0e5e228066f8e307bc5680ed62c11bb6b692411", "patch": "@@ -1412,6 +1412,11 @@ rustc_queries! {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n+    /// Returns whether or not the crate with CrateNum 'cnum'\n+    /// is marked as a private dependency\n+    query is_private_dep(c: CrateNum) -> bool {\n+        desc { \"check whether crate {} is a private dependency\", c }\n+    }\n     query allocator_kind(_: ()) -> Option<AllocatorKind> {\n         desc { \"allocator kind for the current crate\" }\n     }"}, {"sha": "657ce0b3a80a0cdcbb6482cafaabfbbaffe2859d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e5e228066f8e307bc5680ed62c11bb6b692411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f0e5e228066f8e307bc5680ed62c11bb6b692411", "patch": "@@ -1233,16 +1233,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Returns whether or not the crate with CrateNum 'cnum'\n-    /// is marked as a private dependency\n-    pub fn is_private_dep(self, cnum: CrateNum) -> bool {\n-        if cnum == LOCAL_CRATE {\n-            false\n-        } else {\n-            self.untracked_resolutions.cstore.crate_is_private_dep_untracked(cnum)\n-        }\n-    }\n-\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n         // Accessing the definitions is ok, since all its contents are tracked by the query system.\n@@ -2812,5 +2802,9 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n+    providers.is_private_dep = |_tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        false\n+    };\n     providers.allocator_kind = |tcx, ()| tcx.resolutions(()).cstore.allocator_kind();\n }"}]}