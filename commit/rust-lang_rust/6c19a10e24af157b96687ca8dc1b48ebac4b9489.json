{"sha": "6c19a10e24af157b96687ca8dc1b48ebac4b9489", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTlhMTBlMjRhZjE1N2I5NjY4N2NhOGRjMWI0OGViYWM0Yjk0ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T03:27:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T03:27:09Z"}, "message": "Auto merge of #68404 - Amanieu:llvm-asm, r=estebank\n\nRename asm! to llvm_asm!\n\nAs per https://github.com/rust-lang/rfcs/pull/2843, this PR renames `asm!` to `llvm_asm!`. It also renames the compiler's internal `InlineAsm` data structures to `LlvmInlineAsm` in preparation for the new `asm!` functionality specified in https://github.com/rust-lang/rfcs/pull/2850.\n\nThis PR doesn't actually deprecate `asm!` yet, it just makes it redirect to `llvm_asm!`. This is necessary because we first need to update the submodules (in particular stdarch) to use `llvm_asm!`.", "tree": {"sha": "af4246ff21626b91d238c82664ea09f49422c948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4246ff21626b91d238c82664ea09f49422c948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c19a10e24af157b96687ca8dc1b48ebac4b9489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c19a10e24af157b96687ca8dc1b48ebac4b9489", "html_url": "https://github.com/rust-lang/rust/commit/6c19a10e24af157b96687ca8dc1b48ebac4b9489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c19a10e24af157b96687ca8dc1b48ebac4b9489/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b73d14b0b35e7b4f79f2d71dc1bbbab31698288", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b73d14b0b35e7b4f79f2d71dc1bbbab31698288", "html_url": "https://github.com/rust-lang/rust/commit/7b73d14b0b35e7b4f79f2d71dc1bbbab31698288"}, {"sha": "1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10", "html_url": "https://github.com/rust-lang/rust/commit/1cc521ef9d8a8a2eb48f0e11ddfc1e70734aff10"}], "stats": {"total": 1222, "additions": 634, "deletions": 588}, "files": [{"sha": "e07f716e5671892ccfc695fea86bea1f3184b82b", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,25 +1,25 @@\n-# `asm`\n+# `llvm_asm`\n \n-The tracking issue for this feature is: [#29722]\n+The tracking issue for this feature is: [#70173]\n \n-[#29722]: https://github.com/rust-lang/rust/issues/29722\n+[#70173]: https://github.com/rust-lang/rust/issues/70173\n \n ------------------------\n \n For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `asm!` macro.\n+assembly to do this via the `llvm_asm!` macro.\n \n ```rust,ignore\n-asm!(assembly template\n+llvm_asm!(assembly template\n    : output operands\n    : input operands\n    : clobbers\n    : options\n    );\n ```\n \n-Any use of `asm` is feature gated (requires `#![feature(asm)]` on the\n+Any use of `llvm_asm` is feature gated (requires `#![feature(llvm_asm)]` on the\n crate to allow) and of course requires an `unsafe` block.\n \n > **Note**: the examples here are given in x86/x86-64 assembly, but\n@@ -31,12 +31,12 @@ The `assembly template` is the only required parameter and must be a\n literal string (i.e. `\"\"`)\n \n ```rust\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn foo() {\n     unsafe {\n-        asm!(\"NOP\");\n+        llvm_asm!(\"NOP\");\n     }\n }\n \n@@ -51,16 +51,16 @@ fn main() {\n }\n ```\n \n-(The `feature(asm)` and `#[cfg]`s are omitted from now on.)\n+(The `feature(llvm_asm)` and `#[cfg]`s are omitted from now on.)\n \n Output operands, input operands, clobbers and options are all optional\n but you must add the right number of `:` if you skip them:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n-asm!(\"xor %eax, %eax\"\n+llvm_asm!(\"xor %eax, %eax\"\n     :\n     :\n     : \"eax\"\n@@ -73,10 +73,10 @@ asm!(\"xor %eax, %eax\"\n Whitespace also doesn't matter:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n-asm!(\"xor %eax, %eax\" ::: \"eax\");\n+llvm_asm!(\"xor %eax, %eax\" ::: \"eax\");\n # } }\n # #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n # fn main() {}\n@@ -89,12 +89,12 @@ Input and output operands follow the same format: `:\n expressions must be mutable lvalues, or not yet assigned:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn add(a: i32, b: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add $2, $0\"\n+        llvm_asm!(\"add $2, $0\"\n              : \"=r\"(c)\n              : \"0\"(a), \"r\"(b)\n              );\n@@ -116,11 +116,11 @@ operand. This is useful for very low level programming, where\n which register you use is important:\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # unsafe fn read_byte_in(port: u16) -> u8 {\n let result: u8;\n-asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n+llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n result\n # }\n ```\n@@ -133,11 +133,11 @@ compiler not to assume any values loaded into those registers will\n stay valid.\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n // Put the value 0x200 in eax:\n-asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n+llvm_asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n # } }\n # #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n # fn main() {}\n@@ -167,12 +167,12 @@ Current valid options are:\n 3. *intel* - use intel syntax instead of the default AT&T.\n \n ```rust\n-# #![feature(asm)]\n+# #![feature(llvm_asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() {\n let result: i32;\n unsafe {\n-   asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n+   llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n }\n println!(\"eax is currently {}\", result);\n # }\n@@ -182,12 +182,12 @@ println!(\"eax is currently {}\", result);\n \n ## More Information\n \n-The current implementation of the `asm!` macro is a direct binding to [LLVM's\n+The current implementation of the `llvm_asm!` macro is a direct binding to [LLVM's\n inline assembler expressions][llvm-docs], so be sure to check out [their\n documentation as well][llvm-docs] for more information about clobbers,\n constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](global-asm.md).\n+`llvm_asm!`, check out [global_asm](global-asm.md).", "previous_filename": "src/doc/unstable-book/src/library-features/asm.md"}, {"sha": "698c97999c4570ac0608032e7eac7ae66393421b", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -113,7 +113,7 @@ pub fn black_box<T>(dummy: T) -> T {\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n     unsafe {\n-        asm!(\"\" : : \"r\"(&dummy));\n+        llvm_asm!(\"\" : : \"r\"(&dummy));\n         dummy\n     }\n }"}, {"sha": "73c5e3fad475dda1f19a3d6979cc00239e7668d6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -98,6 +98,7 @@\n #![feature(is_sorted)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(llvm_asm)]\n #![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "f67762cd04346b97c963376e02b06bd2ff4292cc", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1307,7 +1307,7 @@ pub(crate) mod builtin {\n     /// [unstable book]: ../unstable-book/library-features/asm.html\n     #[unstable(\n         feature = \"asm\",\n-        issue = \"29722\",\n+        issue = \"70173\",\n         reason = \"inline assembly is not stable enough for use and is subject to change\"\n     )]\n     #[rustc_builtin_macro]\n@@ -1322,6 +1322,47 @@ pub(crate) mod builtin {\n         };\n     }\n \n+    /// Inline assembly.\n+    ///\n+    /// Read the [unstable book] for the usage.\n+    ///\n+    /// [unstable book]: ../unstable-book/library-features/asm.html\n+    #[cfg(bootstrap)]\n+    #[unstable(\n+        feature = \"llvm_asm\",\n+        issue = \"70173\",\n+        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+    )]\n+    #[macro_export]\n+    #[allow_internal_unstable(asm)]\n+    macro_rules! llvm_asm {\n+        // Redirect to asm! for stage0\n+        ($($arg:tt)*) => { $crate::asm!($($arg)*) }\n+    }\n+\n+    /// Inline assembly.\n+    ///\n+    /// Read the [unstable book] for the usage.\n+    ///\n+    /// [unstable book]: ../unstable-book/library-features/asm.html\n+    #[cfg(not(bootstrap))]\n+    #[unstable(\n+        feature = \"llvm_asm\",\n+        issue = \"70173\",\n+        reason = \"inline assembly is not stable enough for use and is subject to change\"\n+    )]\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! llvm_asm {\n+        (\"assembly template\"\n+                        : $(\"output\"(operand),)*\n+                        : $(\"input\"(operand),)*\n+                        : $(\"clobbers\",)*\n+                        : $(\"options\",)*) => {\n+            /* compiler built-in */\n+        };\n+    }\n+\n     /// Module-level inline assembly.\n     #[unstable(\n         feature = \"global_asm\","}, {"sha": "aaeb4d8a22c297eee22fb9514d1fe85ee60e6ad6", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -60,7 +60,7 @@ mod fpu_precision {\n     fn set_cw(cw: u16) {\n         // SAFETY: the `fldcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n+        unsafe { llvm_asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n     }\n \n     /// Sets the precision field of the FPU to `T` and returns a `FPUControlWord`.\n@@ -78,7 +78,7 @@ mod fpu_precision {\n         // `FPUControlWord` structure is dropped\n         // SAFETY: the `fnstcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n+        unsafe { llvm_asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n \n         // Set the control word to the desired precision. This is achieved by masking away the old\n         // precision (bits 8 and 9, 0x300) and replacing it with the precision flag computed above."}, {"sha": "9b4ed4e82051289e130bc3c600098c1817197105", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -57,8 +57,8 @@ pub use crate::hash::macros::Hash;\n #[doc(no_inline)]\n pub use crate::{\n     asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, log_syntax, module_path,\n-    option_env, stringify, trace_macros,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "9ba9d816d0f3f541c887c264504e453716b9edfa", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1584,7 +1584,7 @@ pub enum StatementKind<'tcx> {\n \n     /// Executes a piece of inline Assembly. Stored in a Box to keep the size\n     /// of `StatementKind` low.\n-    InlineAsm(Box<InlineAsm<'tcx>>),\n+    LlvmInlineAsm(Box<LlvmInlineAsm<'tcx>>),\n \n     /// Retag references in the given place, ensuring they got fresh tags. This is\n     /// part of the Stacked Borrows model. These statements are currently only interpreted\n@@ -1668,8 +1668,8 @@ pub enum FakeReadCause {\n }\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n-pub struct InlineAsm<'tcx> {\n-    pub asm: hir::InlineAsmInner,\n+pub struct LlvmInlineAsm<'tcx> {\n+    pub asm: hir::LlvmInlineAsmInner,\n     pub outputs: Box<[Place<'tcx>]>,\n     pub inputs: Box<[(Span, Operand<'tcx>)]>,\n }\n@@ -1696,8 +1696,8 @@ impl Debug for Statement<'_> {\n             SetDiscriminant { ref place, variant_index } => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n-            InlineAsm(ref asm) => {\n-                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n+            LlvmInlineAsm(ref asm) => {\n+                write!(fmt, \"llvm_asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n             }\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)"}, {"sha": "c1b27b40f7dcf90fc9db2092dd15ab6de9b13773", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -385,7 +385,7 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n-                    StatementKind::InlineAsm(asm) => {\n+                    StatementKind::LlvmInlineAsm(asm) => {\n                         for output in & $($mutability)? asm.outputs[..] {\n                             self.visit_place(\n                                 output,"}, {"sha": "429791d09a49c00ebe07cd5c3ada237c36f149cf", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -263,7 +263,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n     ::rustc_hir::def_id::DefId,\n-    ::rustc_hir::InlineAsmInner,\n+    ::rustc_hir::LlvmInlineAsmInner,\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n     ::rustc_hir::Unsafety,"}, {"sha": "646294a7cca7871801a49db77a392fbef11ab9cb", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1114,7 +1114,7 @@ impl Expr {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n-            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::MacCall(..) => ExprPrecedence::Mac,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n@@ -1243,8 +1243,8 @@ pub enum ExprKind {\n     /// A `return`, with an optional value to be returned.\n     Ret(Option<P<Expr>>),\n \n-    /// Output of the `asm!()` macro.\n-    InlineAsm(P<InlineAsm>),\n+    /// Output of the `llvm_asm!()` macro.\n+    LlvmInlineAsm(P<LlvmInlineAsm>),\n \n     /// A macro invocation; pre-expansion.\n     MacCall(MacCall),\n@@ -1860,37 +1860,37 @@ pub enum TraitObjectSyntax {\n \n /// Inline assembly dialect.\n ///\n-/// E.g., `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n+/// E.g., `\"intel\"` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n-pub enum AsmDialect {\n+pub enum LlvmAsmDialect {\n     Att,\n     Intel,\n }\n \n-/// Inline assembly.\n+/// LLVM-style inline assembly.\n ///\n-/// E.g., `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n+/// E.g., `\"={eax}\"(result)` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct InlineAsmOutput {\n+pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,\n     pub expr: P<Expr>,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n }\n \n-/// Inline assembly.\n+/// LLVM-style inline assembly.\n ///\n-/// E.g., `asm!(\"NOP\");`.\n+/// E.g., `llvm_asm!(\"NOP\");`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct InlineAsm {\n+pub struct LlvmInlineAsm {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<InlineAsmOutput>,\n+    pub outputs: Vec<LlvmInlineAsmOutput>,\n     pub inputs: Vec<(Symbol, P<Expr>)>,\n     pub clobbers: Vec<Symbol>,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect,\n+    pub dialect: LlvmAsmDialect,\n }\n \n /// A parameter in a function header."}, {"sha": "67f7764d5bb27bf94a8f3923abd04060a8f6f300", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1202,8 +1202,8 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n         ExprKind::Ret(expr) => {\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ExprKind::InlineAsm(asm) => {\n-            let InlineAsm {\n+        ExprKind::LlvmInlineAsm(asm) => {\n+            let LlvmInlineAsm {\n                 asm: _,\n                 asm_str_style: _,\n                 outputs,\n@@ -1214,7 +1214,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n                 dialect: _,\n             } = asm.deref_mut();\n             for out in outputs {\n-                let InlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n+                let LlvmInlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n                 vis.visit_expr(expr);\n             }\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));"}, {"sha": "cc2b1c48b51acc093fda84303c9a2ae618a3c23c", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -813,7 +813,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::MacCall(ref mac) => visitor.visit_mac(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n-        ExprKind::InlineAsm(ref ia) => {\n+        ExprKind::LlvmInlineAsm(ref ia) => {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(input)\n             }"}, {"sha": "9984eb4e2825ff0f42a452cbd9b4905e530d9451", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -159,7 +159,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let e = e.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Ret(e)\n             }\n-            ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(asm),\n+            ExprKind::LlvmInlineAsm(ref asm) => self.lower_expr_asm(asm),\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => {\n                 let maybe_expr = maybe_expr.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Struct(\n@@ -952,13 +952,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         result\n     }\n \n-    fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind<'hir> {\n-        let inner = hir::InlineAsmInner {\n+    fn lower_expr_asm(&mut self, asm: &LlvmInlineAsm) -> hir::ExprKind<'hir> {\n+        let inner = hir::LlvmInlineAsmInner {\n             inputs: asm.inputs.iter().map(|&(c, _)| c).collect(),\n             outputs: asm\n                 .outputs\n                 .iter()\n-                .map(|out| hir::InlineAsmOutput {\n+                .map(|out| hir::LlvmInlineAsmOutput {\n                     constraint: out.constraint,\n                     is_rw: out.is_rw,\n                     is_indirect: out.is_indirect,\n@@ -972,7 +972,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n         };\n-        let hir_asm = hir::InlineAsm {\n+        let hir_asm = hir::LlvmInlineAsm {\n             inner,\n             inputs_exprs: self.arena.alloc_from_iter(\n                 asm.inputs.iter().map(|&(_, ref input)| self.lower_expr_mut(input)),\n@@ -981,7 +981,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .arena\n                 .alloc_from_iter(asm.outputs.iter().map(|out| self.lower_expr_mut(&out.expr))),\n         };\n-        hir::ExprKind::InlineAsm(self.arena.alloc(hir_asm))\n+        hir::ExprKind::LlvmInlineAsm(self.arena.alloc(hir_asm))\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field<'hir> {"}, {"sha": "885f2f939a653d2f060721c67de747cc933fff45", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -716,12 +716,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n-            ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n+            ExprKind::LlvmInlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 struct_span_err!(\n                     self.session,\n                     expr.span,\n                     E0472,\n-                    \"asm! is unsupported on this target\"\n+                    \"llvm_asm! is unsupported on this target\"\n                 )\n                 .emit();\n             }"}, {"sha": "2d6932ffbeedff3bae25e8906837162a165a9041", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -2024,8 +2024,8 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                 }\n             }\n-            ast::ExprKind::InlineAsm(ref a) => {\n-                self.s.word(\"asm!\");\n+            ast::ExprKind::LlvmInlineAsm(ref a) => {\n+                self.s.word(\"llvm_asm!\");\n                 self.popen();\n                 self.print_string(&a.asm.as_str(), a.asm_str_style);\n                 self.word_space(\":\");\n@@ -2066,7 +2066,7 @@ impl<'a> State<'a> {\n                 if a.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if a.dialect == ast::AsmDialect::Intel {\n+                if a.dialect == ast::LlvmAsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "caed0bf7a0862df35ce1b73c8f8569bd83d0f077", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -19,7 +19,6 @@ use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n-mod asm;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -32,6 +31,7 @@ mod format;\n mod format_foreign;\n mod global_allocator;\n mod global_asm;\n+mod llvm_asm;\n mod log_syntax;\n mod source_util;\n mod test;\n@@ -61,7 +61,7 @@ pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n     }\n \n     register_bang! {\n-        asm: asm::expand_asm,\n+        asm: llvm_asm::expand_llvm_asm,\n         assert: assert::expand_assert,\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n@@ -77,6 +77,7 @@ pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n         include_str: source_util::expand_include_str,\n         include: source_util::expand_include,\n         line: source_util::expand_line,\n+        llvm_asm: llvm_asm::expand_llvm_asm,\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,"}, {"sha": "88756f533d412da81f43ec763751df3ab4901b25", "filename": "src/librustc_builtin_macros/llvm_asm.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n-// Inline assembly support.\n+// Llvm-style inline assembly support.\n //\n use State::*;\n \n-use rustc_ast::ast::{self, AsmDialect};\n+use rustc_ast::ast::{self, LlvmAsmDialect};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{self, TokenStream};\n@@ -36,7 +36,7 @@ impl State {\n \n const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n \n-pub fn expand_asm<'cx>(\n+pub fn expand_llvm_asm<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     tts: TokenStream,\n@@ -58,7 +58,7 @@ pub fn expand_asm<'cx>(\n \n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n+        kind: ast::ExprKind::LlvmInlineAsm(P(inline_asm)),\n         span: cx.with_def_site_ctxt(sp),\n         attrs: ast::AttrVec::new(),\n     }))\n@@ -80,9 +80,9 @@ fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n     tts: TokenStream,\n-) -> Result<Option<ast::InlineAsm>, DiagnosticBuilder<'a>> {\n-    // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n-    // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n+) -> Result<Option<ast::LlvmInlineAsm>, DiagnosticBuilder<'a>> {\n+    // Split the tts before the first colon, to avoid `llvm_asm!(\"x\": y)`  being\n+    // parsed as `llvm_asm!(z)` with `z = \"x\": y` which is type ascription.\n     let first_colon = tts\n         .trees()\n         .position(|tt| match tt {\n@@ -99,7 +99,7 @@ fn parse_inline_asm<'a>(\n     let mut clobs = Vec::new();\n     let mut volatile = false;\n     let mut alignstack = false;\n-    let mut dialect = AsmDialect::Att;\n+    let mut dialect = LlvmAsmDialect::Att;\n \n     let mut state = Asm;\n \n@@ -183,7 +183,7 @@ fn parse_inline_asm<'a>(\n \n                     let is_rw = output.is_some();\n                     let is_indirect = constraint_str.contains('*');\n-                    outputs.push(ast::InlineAsmOutput {\n+                    outputs.push(ast::LlvmInlineAsmOutput {\n                         constraint: output.unwrap_or(constraint),\n                         expr,\n                         is_rw,\n@@ -257,7 +257,7 @@ fn parse_inline_asm<'a>(\n                 } else if option == sym::alignstack {\n                     alignstack = true;\n                 } else if option == sym::intel {\n-                    dialect = AsmDialect::Intel;\n+                    dialect = LlvmAsmDialect::Intel;\n                 } else {\n                     cx.span_warn(p.prev_token.span, \"unrecognized option\");\n                 }\n@@ -287,7 +287,7 @@ fn parse_inline_asm<'a>(\n         }\n     }\n \n-    Ok(Some(ast::InlineAsm {\n+    Ok(Some(ast::LlvmInlineAsm {\n         asm,\n         asm_str_style: asm_str_style.unwrap(),\n         outputs,", "previous_filename": "src/librustc_builtin_macros/asm.rs"}, {"sha": "30bf3ce752859e34e132497e3bcbef0097b232d2", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -14,9 +14,9 @@ use libc::{c_char, c_uint};\n use log::debug;\n \n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn codegen_inline_asm(\n+    fn codegen_llvm_inline_asm(\n         &mut self,\n-        ia: &hir::InlineAsmInner,\n+        ia: &hir::LlvmInlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n         mut inputs: Vec<&'ll Value>,\n         span: Span,\n@@ -138,7 +138,7 @@ fn inline_asm_call(\n     output: &'ll llvm::Type,\n     volatile: bool,\n     alignstack: bool,\n-    dia: ::rustc_ast::ast::AsmDialect,\n+    dia: ::rustc_ast::ast::LlvmAsmDialect,\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };"}, {"sha": "1d61d95cc6bf3ee60c1f4e25441594fb2ad08fec", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -389,10 +389,10 @@ pub enum AsmDialect {\n }\n \n impl AsmDialect {\n-    pub fn from_generic(asm: rustc_ast::ast::AsmDialect) -> Self {\n+    pub fn from_generic(asm: rustc_ast::ast::LlvmAsmDialect) -> Self {\n         match asm {\n-            rustc_ast::ast::AsmDialect::Att => AsmDialect::Att,\n-            rustc_ast::ast::AsmDialect::Intel => AsmDialect::Intel,\n+            rustc_ast::ast::LlvmAsmDialect::Att => AsmDialect::Att,\n+            rustc_ast::ast::LlvmAsmDialect::Intel => AsmDialect::Intel,\n         }\n     }\n }"}, {"sha": "5edd9b9f0a05d07aa53bac7e8303512aede6b601", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n                 bx\n             }\n-            mir::StatementKind::InlineAsm(ref asm) => {\n+            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n                 let outputs = asm\n                     .outputs\n                     .iter()\n@@ -93,7 +93,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 );\n \n                 if input_vals.len() == asm.inputs.len() {\n-                    let res = bx.codegen_inline_asm(\n+                    let res = bx.codegen_llvm_inline_asm(\n                         &asm.asm,\n                         outputs,\n                         input_vals,"}, {"sha": "1cdfd3ae356ddb81340120ceb75a8ca9c30af3d0", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,13 +1,13 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc_hir::{GlobalAsm, InlineAsmInner};\n+use rustc_hir::{GlobalAsm, LlvmInlineAsmInner};\n use rustc_span::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n-    fn codegen_inline_asm(\n+    fn codegen_llvm_inline_asm(\n         &mut self,\n-        ia: &InlineAsmInner,\n+        ia: &LlvmInlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n         span: Span,"}, {"sha": "fe68e9eacbfdae2436a7216e07b2d4479f9bfdb4", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -541,7 +541,7 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n //  E0467, removed\n //  E0470, removed\n //  E0471, // constant evaluation error (in pattern)\n-    E0472, // asm! is unsupported on this target\n+    E0472, // llvm_asm! is unsupported on this target\n     E0473, // dereference of reference outside its lifetime\n     E0474, // captured variable `..` does not outlive the enclosing closure\n     E0475, // index of slice outside its lifetime"}, {"sha": "732de6a3818717d9ff61f78849fb729c4fd252ef", "filename": "src/librustc_error_codes/error_codes/E0660.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0660.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,9 +1,9 @@\n-The argument to the `asm` macro is not well-formed.\n+The argument to the `llvm_asm` macro is not well-formed.\n \n Erroneous code example:\n \n ```compile_fail,E0660\n-asm!(\"nop\" \"nop\");\n+llvm_asm!(\"nop\" \"nop\");\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "3d5cd90f6a37a9450e231b87321abb4829e6fcbf", "filename": "src/librustc_error_codes/error_codes/E0661.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0661.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,10 +1,10 @@\n-An invalid syntax was passed to the second argument of an `asm` macro line.\n+An invalid syntax was passed to the second argument of an `llvm_asm` macro line.\n \n Erroneous code example:\n \n ```compile_fail,E0661\n let a;\n-asm!(\"nop\" : \"r\"(a));\n+llvm_asm!(\"nop\" : \"r\"(a));\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "9858abd10c532546281924030f6cfa272db160dc", "filename": "src/librustc_error_codes/error_codes/E0662.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0662.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,12 +1,13 @@\n-An invalid input operand constraint was passed to the `asm` macro (third line).\n+An invalid input operand constraint was passed to the `llvm_asm` macro\n+(third line).\n \n Erroneous code example:\n \n ```compile_fail,E0662\n-asm!(\"xor %eax, %eax\"\n-     :\n-     : \"=test\"(\"a\")\n-    );\n+llvm_asm!(\"xor %eax, %eax\"\n+          :\n+          : \"=test\"(\"a\")\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "36b87be7d6e38ad8012c09475de7d671f56d8ce0", "filename": "src/librustc_error_codes/error_codes/E0663.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0663.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,12 +1,13 @@\n-An invalid input operand constraint was passed to the `asm` macro (third line).\n+An invalid input operand constraint was passed to the `llvm_asm` macro\n+(third line).\n \n Erroneous code example:\n \n ```compile_fail,E0663\n-asm!(\"xor %eax, %eax\"\n-     :\n-     : \"+test\"(\"a\")\n-    );\n+llvm_asm!(\"xor %eax, %eax\"\n+          :\n+          : \"+test\"(\"a\")\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "33924b14e6d6670c9f0505a9c77e607b6d5c49cc", "filename": "src/librustc_error_codes/error_codes/E0664.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0664.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,13 +1,13 @@\n-A clobber was surrounded by braces in the `asm` macro.\n+A clobber was surrounded by braces in the `llvm_asm` macro.\n \n Erroneous code example:\n \n ```compile_fail,E0664\n-asm!(\"mov $$0x200, %eax\"\n-     :\n-     :\n-     : \"{eax}\"\n-    );\n+llvm_asm!(\"mov $$0x200, %eax\"\n+          :\n+          :\n+          : \"{eax}\"\n+         );\n ```\n \n Considering that this would be a long explanation, we instead recommend you"}, {"sha": "3b43a1bcae9e6003ecee6c8a40562e83e6af166b", "filename": "src/librustc_error_codes/error_codes/E0668.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -7,12 +7,12 @@ assembly call.\n In particular, it can happen if you forgot the closing bracket of a register\n constraint (see issue #51430):\n ```compile_fail,E0668\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let rax: u64;\n     unsafe {\n-        asm!(\"\" :\"={rax\"(rax));\n+        llvm_asm!(\"\" :\"={rax\"(rax));\n         println!(\"Accumulator is: {}\", rax);\n     }\n }"}, {"sha": "b8a691dd9813e7f4b10fdbfa2cefb665a346553f", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -28,7 +28,7 @@ macro_rules! arena_types {\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n             [] local: rustc_hir::Local<$tcx>,\n             [few] macro_def: rustc_hir::MacroDef<$tcx>,\n             [] param: rustc_hir::Param<$tcx>,"}, {"sha": "b719d576d6f67b632da1992055960183d1aa2883", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,7 +3,7 @@ use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::itemlikevisit;\n \n-use rustc_ast::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n+use rustc_ast::ast::{self, CrateSugar, Ident, LlvmAsmDialect, Name};\n use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n@@ -1344,7 +1344,7 @@ impl Expr<'_> {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n-            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n@@ -1399,7 +1399,7 @@ impl Expr<'_> {\n             | ExprKind::Ret(..)\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n-            | ExprKind::InlineAsm(..)\n+            | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n             | ExprKind::Unary(..)\n@@ -1575,8 +1575,8 @@ pub enum ExprKind<'hir> {\n     /// A `return`, with an optional value to be returned.\n     Ret(Option<&'hir Expr<'hir>>),\n \n-    /// Inline assembly (from `asm!`), with its outputs and inputs.\n-    InlineAsm(&'hir InlineAsm<'hir>),\n+    /// Inline assembly (from `llvm_asm!`), with its outputs and inputs.\n+    LlvmInlineAsm(&'hir LlvmInlineAsm<'hir>),\n \n     /// A struct or struct-like variant literal expression.\n     ///\n@@ -1999,7 +1999,7 @@ pub enum TyKind<'hir> {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n-pub struct InlineAsmOutput {\n+pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n@@ -2009,20 +2009,20 @@ pub struct InlineAsmOutput {\n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and use plain `Vec<T>` instead of arena-allocated slice.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n-pub struct InlineAsmInner {\n+pub struct LlvmInlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<InlineAsmOutput>,\n+    pub outputs: Vec<LlvmInlineAsmOutput>,\n     pub inputs: Vec<Symbol>,\n     pub clobbers: Vec<Symbol>,\n     pub volatile: bool,\n     pub alignstack: bool,\n-    pub dialect: AsmDialect,\n+    pub dialect: LlvmAsmDialect,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n-pub struct InlineAsm<'hir> {\n-    pub inner: InlineAsmInner,\n+pub struct LlvmInlineAsm<'hir> {\n+    pub inner: LlvmInlineAsmInner,\n     pub outputs_exprs: &'hir [Expr<'hir>],\n     pub inputs_exprs: &'hir [Expr<'hir>],\n }"}, {"sha": "5a763e4161b1ef85f4c145cf6e6616ced48ba1e5", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1156,7 +1156,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::InlineAsm(ref asm) => {\n+        ExprKind::LlvmInlineAsm(ref asm) => {\n             walk_list!(visitor, visit_expr, asm.outputs_exprs);\n             walk_list!(visitor, visit_expr, asm.inputs_exprs);\n         }"}, {"sha": "f30af78659f3b16660f5f07ec2697693247d12d0", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1407,9 +1407,9 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);\n                 }\n             }\n-            hir::ExprKind::InlineAsm(ref a) => {\n+            hir::ExprKind::LlvmInlineAsm(ref a) => {\n                 let i = &a.inner;\n-                self.s.word(\"asm!\");\n+                self.s.word(\"llvm_asm!\");\n                 self.popen();\n                 self.print_string(&i.asm.as_str(), i.asm_str_style);\n                 self.word_space(\":\");\n@@ -1454,7 +1454,7 @@ impl<'a> State<'a> {\n                 if i.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if i.dialect == ast::AsmDialect::Intel {\n+                if i.dialect == ast::LlvmAsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "3d1768cf0e596fa19cda67f61a4058ee1db80f56", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n                 self.mutate_place(location, place, Shallow(None), JustWrite);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should"}, {"sha": "e3dc9e0f1050390e1c0c8a83a7ffc2e268993fa2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -550,7 +550,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n                 self.mutate_place(location, (place, span), Shallow(None), JustWrite, flow_state);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should"}, {"sha": "54ca0c6a2603acea908190081dcb1c8c1b5c5c51", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1529,7 +1529,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n-            | StatementKind::InlineAsm { .. }\n+            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::Nop => {}\n         }"}, {"sha": "d25d3a9bfc17697fb405184235dec9ffb0616e51", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -289,7 +289,7 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n                 self.kill_borrows_on_place(trans, &Place::from(local));\n             }\n \n-            mir::StatementKind::InlineAsm(ref asm) => {\n+            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect && !kind.is_rw {\n                         self.kill_borrows_on_place(trans, output);"}, {"sha": "67d024e62d91326aa036241ccfa401ac8e587751", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -124,7 +124,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | StatementKind::SetDiscriminant { box place, .. } => {\n                 trans.gen(place.local);\n             }\n-            StatementKind::InlineAsm(asm) => {\n+            StatementKind::LlvmInlineAsm(asm) => {\n                 for place in &*asm.outputs {\n                     trans.gen(place.local);\n                 }"}, {"sha": "8061765f66d907adb81101969d649f017de63048", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -295,7 +295,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::FakeRead(_, ref place) => {\n                 self.create_move_path(place);\n             }\n-            StatementKind::InlineAsm(ref asm) => {\n+            StatementKind::LlvmInlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n                         self.gather_init(output.as_ref(), InitKind::Deep);"}, {"sha": "01446c15ff691192026b2683f252dfb5fdb3ce45", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -124,7 +124,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // size of MIR constantly.\n             Nop => {}\n \n-            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n+            LlvmInlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         self.stack[frame_idx].stmt += 1;"}, {"sha": "c315a8a65dfe6273e812d75a508cb942cf455efa", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -488,7 +488,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::InlineAsm { .. }\n+            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Nop => {}"}, {"sha": "7d5f2860728690950a12aaca746f681bbb495062", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 // safe (at least as emitted during MIR construction)\n             }\n \n-            StatementKind::InlineAsm { .. } => self.require_unsafe(\n+            StatementKind::LlvmInlineAsm { .. } => self.require_unsafe(\n                 \"use of inline assembly\",\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n                 UnsafetyViolationKind::General,"}, {"sha": "b2d21d7a84befde4ab8bf68a834fb3c114bf29f9", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -230,7 +230,7 @@ fn check_statement(\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, place, span, def_id, body),\n \n-        StatementKind::InlineAsm { .. } => {\n+        StatementKind::LlvmInlineAsm { .. } => {\n             Err((span, \"cannot use inline assembly in const fn\".into()))\n         }\n "}, {"sha": "91f8b7b1c858db5c7095483bbb6ea7c28802699c", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -52,7 +52,7 @@ impl RemoveNoopLandingPads {\n \n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n-                | StatementKind::InlineAsm { .. }\n+                | StatementKind::LlvmInlineAsm { .. }\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "1c5f6762c6874465d79d8f180239e64244d96324", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -172,7 +172,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n                     // so we cannot assume that the `unreachable` terminator itself is reachable.\n                     // FIXME(Centril): use a normalization pass instead of a check.\n                     || bb.statements.iter().any(|stmt| match stmt.kind {\n-                        StatementKind::InlineAsm(..) => true,\n+                        StatementKind::LlvmInlineAsm(..) => true,\n                         _ => false,\n                     })\n                 })"}, {"sha": "c5c84acb6b2370ab51396310277ad42d7848b907", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -29,7 +29,7 @@ impl MirPass<'_> for UnreachablePropagation {\n             // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n             let asm_stmt_in_block = || {\n                 bb_data.statements.iter().any(|stmt: &Statement<'_>| match stmt.kind {\n-                    StatementKind::InlineAsm(..) => true,\n+                    StatementKind::LlvmInlineAsm(..) => true,\n                     _ => false,\n                 })\n             };"}, {"sha": "8fa7bc7699030bc2923acdc3efe327de0c1a6ec6", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => {\n                 // these are not places, so we need to make a temporary."}, {"sha": "4c7ff504722c5f624a2908a5e3a83c9fd408742f", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Break { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,"}, {"sha": "f8cae205453c3476847664420c50200b760610b8", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -64,7 +64,7 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n+            | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),\n "}, {"sha": "62158d3b931248dddb11fc545389784ad05e4595", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::AssignOp { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::Break { .. }\n-            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr, None));\n                 this.cfg.push_assign_unit(block, source_info, destination);"}, {"sha": "1dc530a7bc88631da413611b221c8e0cce2c120f", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -96,8 +96,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Return { value } => {\n                 this.break_scope(block, value, BreakableTarget::Return, source_info)\n             }\n-            ExprKind::InlineAsm { asm, outputs, inputs } => {\n-                debug!(\"stmt_expr InlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n+            ExprKind::LlvmInlineAsm { asm, outputs, inputs } => {\n+                debug!(\"stmt_expr LlvmInlineAsm block_context.push(SubExpr) : {:?}\", expr2);\n                 this.block_context.push(BlockFrame::SubExpr);\n                 let outputs = outputs\n                     .into_iter()\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::InlineAsm(box InlineAsm {\n+                        kind: StatementKind::LlvmInlineAsm(box LlvmInlineAsm {\n                             asm: asm.clone(),\n                             outputs,\n                             inputs,"}, {"sha": "ba17e2a75aaf3c1419ccbd3390583637a02343e6", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -398,7 +398,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             convert_path_expr(cx, expr, res)\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => ExprKind::LlvmInlineAsm {\n             asm: &asm.inner,\n             outputs: asm.outputs_exprs.to_ref(),\n             inputs: asm.inputs_exprs.to_ref(),"}, {"sha": "ed60c79903d6a3aa8cae6f65b46d1db0796fa916", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -277,8 +277,8 @@ crate enum ExprKind<'tcx> {\n         literal: &'tcx Const<'tcx>,\n         def_id: DefId,\n     },\n-    InlineAsm {\n-        asm: &'tcx hir::InlineAsmInner,\n+    LlvmInlineAsm {\n+        asm: &'tcx hir::LlvmInlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,\n         inputs: Vec<ExprRef<'tcx>>,\n     },"}, {"sha": "5df15a614e82aa4076a5bd917ce8288caf523991", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -532,7 +532,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::AssignOp(..)\n         | hir::ExprKind::Struct(..)\n         | hir::ExprKind::Repeat(..)\n-        | hir::ExprKind::InlineAsm(..)\n+        | hir::ExprKind::LlvmInlineAsm(..)\n         | hir::ExprKind::Box(..)\n         | hir::ExprKind::Yield(..)\n         | hir::ExprKind::Type(..)\n@@ -1177,7 +1177,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             | hir::ExprKind::Yield(ref e, _)\n             | hir::ExprKind::Repeat(ref e, _) => self.propagate_through_expr(&e, succ),\n \n-            hir::ExprKind::InlineAsm(ref asm) => {\n+            hir::ExprKind::LlvmInlineAsm(ref asm) => {\n                 let ia = &asm.inner;\n                 let outputs = asm.outputs_exprs;\n                 let inputs = asm.inputs_exprs;\n@@ -1398,7 +1398,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n             }\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm) => {\n+        hir::ExprKind::LlvmInlineAsm(ref asm) => {\n             for input in asm.inputs_exprs {\n                 this.visit_expr(input);\n             }"}, {"sha": "54b404e1161b9313d9d1799ba5121e7ecaf6b8e2", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -424,6 +424,7 @@ symbols! {\n         LintPass,\n         lint_reasons,\n         literal,\n+        llvm_asm,\n         local_inner_macros,\n         log_syntax,\n         loop_break_value,"}, {"sha": "8cd6f7b8c88a8271760cab776eea257a079e9b90", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr),\n-            ExprKind::InlineAsm(ref asm) => {\n+            ExprKind::LlvmInlineAsm(ref asm) => {\n                 for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n                     self.check_expr(expr);\n                 }"}, {"sha": "4eb6a6bda02eb3d4ab822e53471614f5b28aba4f", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.borrow_expr(&base, bk);\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia) => {\n+            hir::ExprKind::LlvmInlineAsm(ref ia) => {\n                 for (o, output) in ia.inner.outputs.iter().zip(ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);"}, {"sha": "e76c67794e7546cfd7c49b1576b14a3cdce8cbf3", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Continue(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n-            | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }"}, {"sha": "09bc183cf20dacbdb90ddb958c3f61b8864ec7c5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -274,6 +274,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(llvm_asm)]\n #![feature(log_syntax)]\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n@@ -533,29 +534,9 @@ pub use core::{\n // Re-export built-in macros defined through libcore.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use core::{\n-    // Unstable\n-    asm,\n-    // Stable\n-    assert,\n-    cfg,\n-    column,\n-    compile_error,\n-    concat,\n-    concat_idents,\n-    env,\n-    file,\n-    format_args,\n-    format_args_nl,\n-    global_asm,\n-    include,\n-    include_bytes,\n-    include_str,\n-    line,\n-    log_syntax,\n-    module_path,\n-    option_env,\n-    stringify,\n-    trace_macros,\n+    asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]"}, {"sha": "03686d789d7213b0fdb860b6c2c14987466cd3d2", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -39,8 +39,8 @@ pub use crate::result::Result::{self, Err, Ok};\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n     asm, assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, global_asm, include, include_bytes, include_str, line, log_syntax, module_path,\n-    option_env, stringify, trace_macros,\n+    format_args_nl, global_asm, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n // FIXME: Attribute and derive macros are not documented because for them rustdoc generates"}, {"sha": "57fd7efdd49e6f686ad1d05a8cb6dbb0d9eb90f5", "filename": "src/libstd/sys/sgx/abi/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -22,7 +22,7 @@ extern \"C\" {\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn image_base() -> u64 {\n     let base;\n-    unsafe { asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n+    unsafe { llvm_asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n     base\n }\n "}, {"sha": "0c97a87e2e445819c5e467af9ec040767b113207", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -31,7 +31,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n         let mut out = MaybeUninit::uninit();\n         let error;\n \n-        asm!(\n+        llvm_asm!(\n             \"enclu\"\n             : \"={eax}\"(error)\n             : \"{eax}\"(ENCLU_EGETKEY),\n@@ -60,7 +60,7 @@ pub fn ereport(\n     unsafe {\n         let mut report = MaybeUninit::uninit();\n \n-        asm!(\n+        llvm_asm!(\n             \"enclu\"\n             : /* no output registers */\n             : \"{eax}\"(ENCLU_EREPORT),"}, {"sha": "74dd41fd50147c941c936faf86b94314a36a17e8", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -267,7 +267,7 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n pub unsafe fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n     {\n-        asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+        llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n         crate::intrinsics::unreachable();\n     }\n     crate::intrinsics::abort();"}, {"sha": "933b647071f790c38cd5e181c71ede25a7bfb0f6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -20,7 +20,6 @@\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"50297\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n-#![feature(asm)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![feature(rustc_private)]\n #![feature(nll)]"}, {"sha": "40376218908d10d41cfc0d44a085ea6fa055cf0e", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -O\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type = \"lib\"]\n \n // Check that inline assembly expressions without any outputs\n@@ -9,6 +9,6 @@\n // CHECK-LABEL: @assembly\n #[no_mangle]\n pub fn assembly() {\n-    unsafe { asm!(\"\") }\n+    unsafe { llvm_asm!(\"\") }\n // CHECK: tail call void asm sideeffect \"\", {{.*}}\n }"}, {"sha": "c9415aed930d5ad85290ff8a96a74e3f59b1d1f2", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,10 +3,10 @@\n // compile-flags: -C codegen-units=2\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n+        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n     }\n }"}, {"sha": "7c87f370d4f6894640a2e3edba0213efea63d9d4", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,9 +1,9 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n+        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n     }\n }"}, {"sha": "3eaffc440615f73cf1d490f460f32a371404111f", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -11,7 +11,7 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type=\"rlib\"]\n \n \n@@ -22,12 +22,12 @@\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(c)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     c\n }\n@@ -39,12 +39,12 @@ pub fn change_template(a: i32) -> i32 {\n pub fn change_template(a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        asm!(\"add 2, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 2, $0\"\n+                  : \"=r\"(c)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     c\n }\n@@ -58,12 +58,12 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out1)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out1)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     _out1\n }\n@@ -76,12 +76,12 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out2)\n-             : \"0\"(a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out2)\n+                  : \"0\"(a)\n+                  :\n+                  :\n+                  );\n     }\n     _out1\n }\n@@ -94,12 +94,12 @@ pub fn change_output(a: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -111,12 +111,12 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -129,12 +129,12 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a), \"r\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a), \"r\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -146,12 +146,12 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"r\"(_a), \"0\"(_b)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"r\"(_a), \"0\"(_b)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -164,12 +164,12 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -181,12 +181,12 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             : \"eax\"\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  : \"eax\"\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -199,12 +199,12 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             :\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  :\n+                  );\n     }\n     _out\n }\n@@ -216,12 +216,12 @@ pub fn change_options(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        asm!(\"add 1, $0\"\n-             : \"=r\"(_out)\n-             : \"0\"(_a)\n-             :\n-             : \"volatile\"\n-             );\n+        llvm_asm!(\"add 1, $0\"\n+                  : \"=r\"(_out)\n+                  : \"0\"(_a)\n+                  :\n+                  : \"volatile\"\n+                  );\n     }\n     _out\n }"}, {"sha": "990141657f467bf7df83cafce279a0648a2901dc", "filename": "src/test/mir-opt/unreachable_asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum Empty {}\n \n@@ -18,7 +18,7 @@ fn main() {\n         }\n \n         // asm instruction stops unreachable propagation to if else blocks bb4 and bb5.\n-        unsafe { asm!(\"NOP\"); }\n+        unsafe { llvm_asm!(\"NOP\"); }\n         match _x { }\n     }\n }\n@@ -39,7 +39,7 @@ fn main() {\n //          StorageDead(_6);\n //          StorageDead(_5);\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          StorageLive(_8);\n@@ -62,7 +62,7 @@ fn main() {\n //          StorageDead(_6);\n //          StorageDead(_5);\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          StorageLive(_8);"}, {"sha": "0851e24d410e72d82c81e76c2fdd1702504c8aaa", "filename": "src/test/mir-opt/unreachable_asm_2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum Empty {}\n \n@@ -13,11 +13,11 @@ fn main() {\n \n         if true {\n             // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { asm!(\"NOP\"); }\n+            unsafe { llvm_asm!(\"NOP\"); }\n             _y = 21;\n         } else {\n             // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { asm!(\"NOP\"); }\n+            unsafe { llvm_asm!(\"NOP\"); }\n             _y = 42;\n         }\n \n@@ -33,7 +33,7 @@ fn main() {\n //      }\n //      bb4: {\n //          StorageLive(_8);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _8 = ();\n //          StorageDead(_8);\n //          _4 = const 42i32;\n@@ -42,7 +42,7 @@ fn main() {\n //      }\n //          bb5: {\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          _4 = const 21i32;\n@@ -64,7 +64,7 @@ fn main() {\n //      }\n //      bb4: {\n //          StorageLive(_8);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _8 = ();\n //          StorageDead(_8);\n //          _4 = const 42i32;\n@@ -73,7 +73,7 @@ fn main() {\n //      }\n //          bb5: {\n //          StorageLive(_7);\n-//          asm!(InlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n+//          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []);\n //          _7 = ();\n //          StorageDead(_7);\n //          _4 = const 21i32;"}, {"sha": "2c09646e47e4ab1b421af5b9a1e9bea1360733a5", "filename": "src/test/pretty/asm-clobbers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm-clobbers.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,3 +1,3 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n-pub fn main() { unsafe { asm!(\"\" : : : \"hello\", \"world\") }; }\n+pub fn main() { unsafe { llvm_asm!(\"\" : : : \"hello\", \"world\") }; }"}, {"sha": "86a881bfbd18a8f201d2e532dfb0522e0763fc7b", "filename": "src/test/pretty/asm-options.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fasm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fasm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm-options.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n // pp-exact\n \n pub fn main() {\n     unsafe {\n-        asm!(\"\" : : : : \"volatile\");\n-        asm!(\"\" : : : : \"alignstack\");\n-        asm!(\"\" : : : : \"intel\");\n+        llvm_asm!(\"\" : : : : \"volatile\");\n+        llvm_asm!(\"\" : : : : \"alignstack\");\n+        llvm_asm!(\"\" : : : : \"intel\");\n     }\n }"}, {"sha": "41227898f24a8fcfcbd57e425b6cdbd49928b0c1", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n // pp-exact\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(foo = r#\"just parse this\"#)]\n extern crate blah as blah;\n \n-fn main() { unsafe { asm!(r###\"blah\"###); } }\n+fn main() { unsafe { llvm_asm!(r###\"blah\"###); } }"}, {"sha": "2e81667cf39c6f6f95e425063ed2ea1cfc3dae8d", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-ret.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![crate_type=\"lib\"]\n \n #[deny(unreachable_code)]\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n         // Can't actually reach this point, but rustc doesn't know that.\n     }\n     // This return value is just here to generate some extra code for a return"}, {"sha": "fb3848b0db617aead09adef1525ec4a728d17bb4", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,4 +1,4 @@\n-#![feature(asm, core_intrinsics)]\n+#![feature(llvm_asm, core_intrinsics)]\n #![crate_type=\"lib\"]\n \n use std::intrinsics;\n@@ -7,7 +7,7 @@ use std::intrinsics;\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n         intrinsics::unreachable()\n     }\n     // This return value is just here to generate some extra code for a return"}, {"sha": "fcdff59ffa984cd9b9b58754248715aabd437891", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -6,7 +6,7 @@\n // ignore-arm\n // ignore-aarch64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(target_arch = \"x86_64\")]\n pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n@@ -54,34 +54,34 @@ pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct\n pub fn main() {\n     let result: i64;\n     unsafe {\n-        asm!(\"mov rdi, 1;\n-              mov rsi, 2;\n-              mov rdx, 3;\n-              mov rcx, 4;\n-              mov r8,  5;\n-              mov r9,  6;\n-              mov eax, 0x3F800000;\n-              movd xmm0, eax;\n-              mov eax, 0x40000000;\n-              movd xmm1, eax;\n-              mov eax, 0x40800000;\n-              movd xmm2, eax;\n-              mov eax, 0x41000000;\n-              movd xmm3, eax;\n-              mov eax, 0x41800000;\n-              movd xmm4, eax;\n-              mov eax, 0x42000000;\n-              movd xmm5, eax;\n-              mov eax, 0x42800000;\n-              movd xmm6, eax;\n-              mov eax, 0x43000000;\n-              movd xmm7, eax;\n-              call r10\n-              \"\n-            : \"={rax}\"(result)\n-            : \"{r10}\"(all_the_registers as usize)\n-            : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n-            : \"intel\", \"alignstack\"\n+        llvm_asm!(\"mov rdi, 1;\n+                   mov rsi, 2;\n+                   mov rdx, 3;\n+                   mov rcx, 4;\n+                   mov r8,  5;\n+                   mov r9,  6;\n+                   mov eax, 0x3F800000;\n+                   movd xmm0, eax;\n+                   mov eax, 0x40000000;\n+                   movd xmm1, eax;\n+                   mov eax, 0x40800000;\n+                   movd xmm2, eax;\n+                   mov eax, 0x41000000;\n+                   movd xmm3, eax;\n+                   mov eax, 0x41800000;\n+                   movd xmm4, eax;\n+                   mov eax, 0x42000000;\n+                   movd xmm5, eax;\n+                   mov eax, 0x42800000;\n+                   movd xmm6, eax;\n+                   mov eax, 0x43000000;\n+                   movd xmm7, eax;\n+                   call r10\n+                   \"\n+                 : \"={rax}\"(result)\n+                 : \"{r10}\"(all_the_registers as usize)\n+                 : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n+                 : \"intel\", \"alignstack\"\n         )\n     }\n     assert_eq!(result, 42);"}, {"sha": "1dc1c859c6b0e3645ef11fbcdd53870019d42f5f", "filename": "src/test/ui/asm-concat-src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-concat-src.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -2,8 +2,8 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no asm\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n pub fn main() {\n-    unsafe { asm!(concat!(\"\", \"\")) };\n+    unsafe { llvm_asm!(concat!(\"\", \"\")) };\n }"}, {"sha": "35f4d92c8ffbcf6ff9b22721c679f00831395a68", "filename": "src/test/ui/asm-in-moved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-in-moved.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![allow(dead_code)]\n \n use std::cell::Cell;\n@@ -20,7 +20,7 @@ fn main() {\n         let _y: Box<NoisyDrop>;\n         let x = Box::new(NoisyDrop(&status));\n         unsafe {\n-            asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n+            llvm_asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n         }\n         assert_eq!(status.get(), \"alive\");\n     }"}, {"sha": "acefabd8a666e0385a9092cc4ecfd3bc58e5782b", "filename": "src/test/ui/asm-in-out-operand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-in-out-operand.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,21 +1,21 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n unsafe fn next_power_of_2(n: u32) -> u32 {\n     let mut tmp = n;\n-    asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n+    llvm_asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n     let mut shift = 1_u32;\n     while shift <= 16 {\n-        asm!(\n+        llvm_asm!(\n             \"shr %cl, $2\n             or $2, $0\n             shl $$1, $1\"\n             : \"+&rm\"(tmp), \"+{ecx}\"(shift) : \"r\"(tmp) : \"cc\"\n         );\n     }\n-    asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n+    llvm_asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n     return tmp;\n }\n \n@@ -30,7 +30,7 @@ pub fn main() {\n     let x: isize;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\n+        llvm_asm!(\n             \"shl $2, $1\n             add $3, $1\n             mov $1, $0\"\n@@ -47,7 +47,7 @@ pub fn main() {\n         // Assignment to mutable.\n         // Early clobber \"&\":\n         // Forbids the use of a single register by both operands.\n-        asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n+        llvm_asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n     }\n     assert_eq!(x, 60);\n }"}, {"sha": "556ad83a4ead8202d76062e286161a15efa49657", "filename": "src/test/ui/asm-indirect-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-indirect-memory.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,28 +1,28 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn read(ptr: &u32) -> u32 {\n     let out: u32;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n     }\n     out\n }\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn write(ptr: &mut u32, val: u32) {\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n+        llvm_asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n     }\n }\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn replace(ptr: &mut u32, val: u32) -> u32 {\n     let out: u32;\n     unsafe {\n-        asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n+        llvm_asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n     }\n     out\n }"}, {"sha": "321f28565ff180d3c2810da8e76f9c82c53d22f5", "filename": "src/test/ui/asm-out-assign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,13 +1,13 @@\n // run-pass\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {\n     let x: isize;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n     }\n     assert_eq!(x, 5);\n \n@@ -16,7 +16,7 @@ pub fn main() {\n \n     unsafe {\n         // Assignment to mutable.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n     }\n     assert_eq!(x, 13);\n }"}, {"sha": "9f5662cbd1e93604784b25b7926d57886999aca2", "filename": "src/test/ui/asm/asm-bad-clobber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -11,15 +11,15 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n \n pub fn main() {\n     unsafe {\n         // clobber formatted as register input/output\n-        asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n+        llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n         //~^ ERROR clobber should not be surrounded by braces\n     }\n }"}, {"sha": "8c5d04694c497ea61d588882d7089367c356c1f3", "filename": "src/test/ui/asm/asm-bad-clobber.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-bad-clobber.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/asm-bad-clobber.rs:22:37\n+  --> $DIR/asm-bad-clobber.rs:22:42\n    |\n-LL |         asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-   |                                     ^^^^^^^\n+LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n+   |                                          ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b791ec3e8c8b1eff6e456018a8b866ef7d569f59", "filename": "src/test/ui/asm/asm-in-bad-modifier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "f1624f74a70acf7566b1c1246c61b1bc954208cf", "filename": "src/test/ui/asm/asm-in-bad-modifier.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,14 +1,14 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/asm-in-bad-modifier.rs:23:39\n+  --> $DIR/asm-in-bad-modifier.rs:23:44\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n-   |                                       ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n+   |                                            ^^^^\n \n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/asm-in-bad-modifier.rs:24:39\n+  --> $DIR/asm-in-bad-modifier.rs:24:44\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n-   |                                       ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n+   |                                            ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5d45f5084c5eec399396315a493b2c134f4a410b", "filename": "src/test/ui/asm/asm-literal-escaping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-literal-escaping.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,12 +1,12 @@\n // build-pass\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n         // \"nop\" :: \"r\"(x) : \"eax\" : \"volatile\"\n         let x = 10;\n-        asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n+        llvm_asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n     }\n }"}, {"sha": "3c44fc90ef3f216403962fbaa3c0e26c021df73b", "filename": "src/test/ui/asm/asm-misplaced-option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -12,7 +12,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n@@ -21,14 +21,14 @@ fn main() {\n     let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n+        llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "ea9267c643b138a8bd5e017d77f69c68c5e7413b", "filename": "src/test/ui/asm/asm-misplaced-option.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,12 +1,12 @@\n warning: unrecognized option\n-  --> $DIR/asm-misplaced-option.rs:24:64\n+  --> $DIR/asm-misplaced-option.rs:24:69\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-   |                                                                ^^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n+   |                                                                     ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/asm-misplaced-option.rs:31:80\n+  --> $DIR/asm-misplaced-option.rs:31:85\n    |\n-LL |         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-   |                                                                                ^^^^^^^^^^\n+LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n+   |                                                                                     ^^^^^^^^^^\n "}, {"sha": "1a46879f9f291bdd54fa8bdcf416cff8fba83303", "filename": "src/test/ui/asm/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -21,7 +21,7 @@ pub fn main() {\n     x = 1;\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR cannot assign twice to immutable variable `x`\n     }\n     foo(x);"}, {"sha": "feec61b4fc6efd0f66483528f883c14a58ce9763", "filename": "src/test/ui/asm/asm-out-assign-imm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:24:34\n+  --> $DIR/asm-out-assign-imm.rs:24:39\n    |\n LL |     let x: isize;\n    |         - help: make this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ...\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |                                  ^ cannot assign twice to immutable variable\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+   |                                       ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error\n "}, {"sha": "d198437c5089411db2203a6ac68f3cff5312151e", "filename": "src/test/ui/asm/asm-out-no-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n+        llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "1c9e108f910c6ce929411157175b885d4cc7982a", "filename": "src/test/ui/asm/asm-out-no-modifier.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/asm-out-no-modifier.rs:22:29\n+  --> $DIR/asm-out-no-modifier.rs:22:34\n    |\n-LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n-   |                             ^^^\n+LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n+   |                                  ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d45498d4bb4a1b9782afd1acc06a4ab077e9d6f6", "filename": "src/test/ui/asm/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // ignore-mips\n // ignore-mips64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n \n@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n         //~^ ERROR use of possibly-uninitialized variable: `x`\n     }\n     foo(x);"}, {"sha": "3c3f3a6febb5a396e7fbea2aea8077ac5fd17282", "filename": "src/test/ui/asm/asm-out-read-uninit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/asm-out-read-uninit.rs:22:43\n+  --> $DIR/asm-out-read-uninit.rs:22:48\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                           ^ use of possibly-uninitialized `x`\n+LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n+   |                                                ^ use of possibly-uninitialized `x`\n \n error: aborting due to previous error\n "}, {"sha": "d458be815296bc5afbfb2c216a6b9596b60f9031", "filename": "src/test/ui/asm/asm-parse-errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,15 +1,15 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(); //~ ERROR requires a string literal as an argument\n-    asm!(\"nop\" : struct); //~ ERROR expected string literal\n-    asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n-    asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n-    asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n-    asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n-    asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n-    asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n-    asm!(123); //~ ERROR inline assembly must be a string literal\n+    llvm_asm!(); //~ ERROR requires a string literal as an argument\n+    llvm_asm!(\"nop\" : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n+    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n+    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n+    llvm_asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n+    llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n+    llvm_asm!(123); //~ ERROR inline assembly must be a string literal\n }"}, {"sha": "64f295c3b369895066da82079963dd6dd5e987e5", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,68 +1,68 @@\n error: macro requires a string literal as an argument\n   --> $DIR/asm-parse-errors.rs:4:5\n    |\n-LL |     asm!();\n-   |     ^^^^^^^ string literal required\n+LL |     llvm_asm!();\n+   |     ^^^^^^^^^^^^ string literal required\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:5:18\n+  --> $DIR/asm-parse-errors.rs:5:23\n    |\n-LL |     asm!(\"nop\" : struct);\n-   |                  ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"nop\" : struct);\n+   |                       ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:6:30\n+  --> $DIR/asm-parse-errors.rs:6:35\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : struct);\n-   |                              ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n+   |                                   ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:7:39\n+  --> $DIR/asm-parse-errors.rs:7:44\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n-   |                                       ^^^^^^ expected `(`\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n+   |                                            ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:8:39\n+  --> $DIR/asm-parse-errors.rs:8:44\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n-   |                                       ^^^^^^ expected expression\n+LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n+   |                                            ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:9:44\n+  --> $DIR/asm-parse-errors.rs:9:49\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                            ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n+   |                                                 ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:10:51\n+  --> $DIR/asm-parse-errors.rs:10:56\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n-   |                                                   ^^^^^^ expected `(`\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n+   |                                                        ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:11:51\n+  --> $DIR/asm-parse-errors.rs:11:56\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n-   |                                                   ^^^^^^ expected expression\n+LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n+   |                                                        ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:12:36\n+  --> $DIR/asm-parse-errors.rs:12:41\n    |\n-LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                    ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n+   |                                         ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:13:45\n+  --> $DIR/asm-parse-errors.rs:13:50\n    |\n-LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                             ^^^^^^ not a string literal\n+LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n+   |                                                  ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n-  --> $DIR/asm-parse-errors.rs:14:10\n+  --> $DIR/asm-parse-errors.rs:14:15\n    |\n-LL |     asm!(123);\n-   |          ^^^\n+LL |     llvm_asm!(123);\n+   |               ^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "ca06bdab27b96d3aa5d7fc7c22979e06a763172d", "filename": "src/test/ui/asm/issue-51431.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+        llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n         //~^ ERROR: invalid value for constraint in inline assembly\n     }\n }"}, {"sha": "b4b39a2a44ec3c92c0d806d0f8e03d0018fa2d8e", "filename": "src/test/ui/asm/issue-51431.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:8:32\n+  --> $DIR/issue-51431.rs:8:37\n    |\n-LL |         asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-   |                                ^^^^\n+LL |         llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n+   |                                     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fd4d9bdd23dbf578b987ce9f88f2145d15b01541", "filename": "src/test/ui/asm/issue-62046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-62046.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n // ignore-emscripten no asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"nop\" : \"+r\"(\"r15\"));\n+        llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n         //~^ malformed inline assembly\n     }\n }"}, {"sha": "cf27052df05aa6aed400e478207c76880158c55a", "filename": "src/test/ui/asm/issue-62046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-62046.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0668]: malformed inline assembly\n   --> $DIR/issue-62046.rs:8:9\n    |\n-LL |         asm!(\"nop\" : \"+r\"(\"r15\"));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ecce7bfdf5bba9732ba72810968e8fe6772d4621", "filename": "src/test/ui/asm/issue-69092.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -2,9 +2,9 @@\n // ignore-emscripten no asm! support\n // Regression test for #69092\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+    unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n     //~^ ERROR: <inline asm>:1:9: error: expected string in '.ascii' directive\n }"}, {"sha": "35f77edc3c402b942dea095312cad4c12e4406e0", "filename": "src/test/ui/asm/issue-69092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-69092.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -4,8 +4,8 @@ error: <inline asm>:1:9: error: expected string in '.ascii' directive\n \n   --> $DIR/issue-69092.rs:8:14\n    |\n-LL |     unsafe { asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "60e6c88fc79242a8500ab75fb43e5d895df1067d", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // check-pass\n // dont-check-compiler-stdout - don't check for any AST change.\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n enum V {\n     A(i32),\n@@ -30,7 +30,7 @@ fn main() {\n         target_arch = \"x86_64\",\n         target_arch = \"arm\",\n         target_arch = \"aarch64\"))]\n-    unsafe { asm!(\"\"::::); }\n+    unsafe { llvm_asm!(\"\"::::); }\n \n     let x: (i32) = 35;\n     let y = x as i64<> + 5;"}, {"sha": "d16b424536aac3fa5b299506818df757ccf513df", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -6,7 +6,7 @@\n // ignore-sparc\n // ignore-sparc64\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[cfg(any(target_arch = \"x86\",\n             target_arch = \"x86_64\",\n@@ -19,7 +19,7 @@ mod test_cases {\n         let y: &mut isize;\n         let x = &mut 0isize;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x));\n+            llvm_asm!(\"nop\" : : \"r\"(x));\n         }\n         let z = x;  //~ ERROR use of moved value: `x`\n     }\n@@ -28,20 +28,20 @@ mod test_cases {\n         let mut x = 3;\n         let y = &mut x;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n+            llvm_asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n         }\n         let z = y;\n     }\n \n     fn out_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n+            llvm_asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n         }\n         let mut a = &mut 3;\n         let b = &*a;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n+            llvm_asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n         }\n         let c = b;\n         let d = *a;\n@@ -50,30 +50,30 @@ mod test_cases {\n     fn rw_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n+            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n         }\n     }\n \n     fn indirect_is_not_init() {\n         let x: i32;\n         unsafe {\n-            asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n+            llvm_asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n         }\n     }\n \n     fn rw_is_read() {\n         let mut x = &mut 3;\n         let y = &*x;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n+            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n         }\n         let z = y;\n     }\n \n     fn two_moves() {\n         let x = &mut 2;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n+            llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n         }\n     }\n }"}, {"sha": "d7e94bd34d35b95b498fd17f6c699c924e7ca437", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -4,76 +4,76 @@ error[E0382]: use of moved value: `x`\n LL |         let x = &mut 0isize;\n    |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                - value moved here\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n+   |                                     - value moved here\n LL |         }\n LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:31:32\n+  --> $DIR/borrowck-asm.rs:31:37\n    |\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                ^ use of borrowed `x`\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n+   |                                     ^ use of borrowed `x`\n LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:39:31\n+  --> $DIR/borrowck-asm.rs:39:36\n    |\n LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n+LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n+   |                                    ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:53:31\n+  --> $DIR/borrowck-asm.rs:53:36\n    |\n LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n+LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n+   |                                    ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:60:32\n+  --> $DIR/borrowck-asm.rs:60:37\n    |\n-LL |             asm!(\"nop\" : \"=*r\"(x));\n-   |                                ^ use of possibly-uninitialized `x`\n+LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n+   |                                     ^ use of possibly-uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:68:31\n+  --> $DIR/borrowck-asm.rs:68:36\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ assignment to borrowed `x` occurs here\n+LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n+   |                                    ^ assignment to borrowed `x` occurs here\n LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:76:40\n+  --> $DIR/borrowck-asm.rs:76:45\n    |\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                -       ^ value used here after move\n-   |                                |\n-   |                                value moved here\n+LL |             llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n+   |                                     -       ^ value used here after move\n+   |                                     |\n+   |                                     value moved here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "842ae59ee8debc89d40c1ab0a12eec40b8cb0dbe", "filename": "src/test/ui/error-codes/E0660.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,9 +1,9 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let a;\n-    asm!(\"nop\" \"nop\");\n+    llvm_asm!(\"nop\" \"nop\");\n     //~^ ERROR E0660\n-    asm!(\"nop\" \"nop\" : \"=r\"(a));\n+    llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n     //~^ ERROR E0660\n }"}, {"sha": "69288ea6fcdb3af2e1067c93d4a1e57d0c232503", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,14 +1,14 @@\n error[E0660]: malformed inline assembly\n   --> $DIR/E0660.rs:5:5\n    |\n-LL |     asm!(\"nop\" \"nop\");\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     llvm_asm!(\"nop\" \"nop\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0660]: malformed inline assembly\n   --> $DIR/E0660.rs:7:5\n    |\n-LL |     asm!(\"nop\" \"nop\" : \"=r\"(a));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1099edd848b28e4ee797c7b55eb48b0c5e47f987", "filename": "src/test/ui/error-codes/E0661.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,9 +1,9 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     let a; //~ ERROR type annotations needed\n-    asm!(\"nop\" : \"r\"(a));\n+    llvm_asm!(\"nop\" : \"r\"(a));\n     //~^ ERROR E0661\n }"}, {"sha": "fe3887e72604defe2ece8654b3a8ce82ef836103", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:7:18\n+  --> $DIR/E0661.rs:7:23\n    |\n-LL |     asm!(\"nop\" : \"r\"(a));\n-   |                  ^^^\n+LL |     llvm_asm!(\"nop\" : \"r\"(a));\n+   |                       ^^^\n \n error[E0282]: type annotations needed\n   --> $DIR/E0661.rs:6:9"}, {"sha": "095005999039f7ba6aa46c1fe626bc49dcde8749", "filename": "src/test/ui/error-codes/E0662.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,10 +1,10 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"xor %eax, %eax\"\n-         :\n-         : \"=test\"(\"a\") //~ ERROR E0662\n-        );\n+    llvm_asm!(\"xor %eax, %eax\"\n+              :\n+              : \"=test\"(\"a\") //~ ERROR E0662\n+             );\n }"}, {"sha": "ebc5f628f2699ccb9f01617d00c1b63976878952", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:8:12\n+  --> $DIR/E0662.rs:8:17\n    |\n-LL |          : \"=test\"(\"a\")\n-   |            ^^^^^^^\n+LL |               : \"=test\"(\"a\")\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0783d705a5bfe6edc1285614f1d90d596a0f4d95", "filename": "src/test/ui/error-codes/E0663.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,10 +1,10 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"xor %eax, %eax\"\n-         :\n-         : \"+test\"(\"a\") //~ ERROR E0663\n-        );\n+    llvm_asm!(\"xor %eax, %eax\"\n+              :\n+              : \"+test\"(\"a\") //~ ERROR E0663\n+             );\n }"}, {"sha": "4e421aa007352801256de08c4c830158a5a41bb7", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:8:12\n+  --> $DIR/E0663.rs:8:17\n    |\n-LL |          : \"+test\"(\"a\")\n-   |            ^^^^^^^\n+LL |               : \"+test\"(\"a\")\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f8ca5c9c8c6dec0762b7af1f6fe5d3a5d895045e", "filename": "src/test/ui/error-codes/E0664.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n-    asm!(\"mov $$0x200, %eax\"\n-         :\n-         :\n-         : \"{eax}\" //~ ERROR E0664\n-        );\n+    llvm_asm!(\"mov $$0x200, %eax\"\n+              :\n+              :\n+              : \"{eax}\" //~ ERROR E0664\n+             );\n }"}, {"sha": "d0ed0f01ce79f3291136f61e49e815541d2d54fe", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:9:12\n+  --> $DIR/E0664.rs:9:17\n    |\n-LL |          : \"{eax}\"\n-   |            ^^^^^^^\n+LL |               : \"{eax}\"\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7eeeb4bc4e243d18f799de376474a4106d93eff8", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,5 +3,6 @@\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough\n+        llvm_asm!(\"\"); //~ ERROR inline assembly is not stable enough\n     }\n }"}, {"sha": "1f9eaa5632e4ad3961216a41994eeb6210cd46c2", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -4,9 +4,18 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         asm!(\"\");\n    |         ^^^\n    |\n-   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n+  --> $DIR/feature-gate-asm.rs:6:9\n+   |\n+LL |         llvm_asm!(\"\");\n+   |         ^^^^^^^^\n+   |\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n+   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "666a4894f627551226ae9d1c0b9c359d639cccdd", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,5 +3,6 @@\n fn main() {\n     unsafe {\n         println!(\"{:?}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+        println!(\"{:?}\", llvm_asm!(\"\")); //~ ERROR inline assembly is not stable\n     }\n }"}, {"sha": "17ba66e9842fac2dbf76bad1e045a76e332046cc", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -4,9 +4,18 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^\n    |\n-   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n+  --> $DIR/feature-gate-asm2.rs:6:26\n+   |\n+LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n+   |                          ^^^^^^^^\n+   |\n+   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n+   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "edf2c2e3180e820a6b9c44dc9b802ae81b18284a", "filename": "src/test/ui/inline-asm-bad-constraint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,7 +3,7 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n extern \"C\" {\n     fn foo(a: usize);\n@@ -19,22 +19,22 @@ fn main() {\n fn bad_register_constraint() {\n     let rax: u64;\n     unsafe {\n-        asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n+        llvm_asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n     };\n     println!(\"Accumulator is: {}\", rax);\n }\n \n // Issue #54376\n fn bad_input() {\n     unsafe {\n-        asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n+        llvm_asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n     };\n }\n \n fn wrong_size_output() {\n     let rax: u64 = 0;\n     unsafe {\n-        asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n+        llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n     }\n     println!(\"rax: {}\", rax);\n }"}, {"sha": "d6a3b6e8382f4bae0d5db492dfe744cad1b62464", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,24 +1,24 @@\n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:22:9\n    |\n-LL |         asm!(\"\" :\"={rax\"(rax))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n-LL |         asm!(\"callq $0\" : : \"0\"(foo))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n-LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e5fc4ee010678187eaed2960f9d0b5fc10e6a0de", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -4,7 +4,7 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[repr(C)]\n struct MyPtr(usize);\n@@ -19,41 +19,41 @@ fn main() {\n \n fn issue_37433() {\n     unsafe {\n-        asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n+        llvm_asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n     }\n \n     unsafe {\n         let target = MyPtr(0);\n-        asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n+        llvm_asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n     }\n }\n \n fn issue_37437() {\n     let hello: &str = \"hello\";\n     // this should fail...\n-    unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n+    unsafe { llvm_asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n     // but this should succeed.\n-    unsafe { asm!(\"\" :: \"r\"(hello.as_ptr())) };\n+    unsafe { llvm_asm!(\"\" :: \"r\"(hello.as_ptr())) };\n }\n \n fn issue_40187() {\n     let arr: [u8; 1] = [0; 1];\n     unsafe {\n-        asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n+        llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n     }\n }\n \n fn issue_54067() {\n     let addr: Option<u32> = Some(123);\n     unsafe {\n-        asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n+        llvm_asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n     }\n }\n \n fn multiple_errors() {\n     let addr: (u32, u32) = (1, 2);\n     unsafe {\n-        asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n-                           \"r\"(\"hello e0669\")); //~ ERROR E0669\n+        llvm_asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n+                                \"r\"(\"hello e0669\")); //~ ERROR E0669\n     }\n }"}, {"sha": "1ac7024ec8bf0166f436a0f1feae7da2fe26dad7", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,41 +1,41 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:22:24\n+  --> $DIR/inline-asm-bad-operand.rs:22:29\n    |\n-LL |         asm!(\"\" :: \"r\"(\"\"));\n-   |                        ^^\n+LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n+   |                             ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:27:32\n+  --> $DIR/inline-asm-bad-operand.rs:27:37\n    |\n-LL |         asm!(\"ret\" : : \"{rdi}\"(target));\n-   |                                ^^^^^^\n+LL |         llvm_asm!(\"ret\" : : \"{rdi}\"(target));\n+   |                                     ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:34:29\n+  --> $DIR/inline-asm-bad-operand.rs:34:34\n    |\n-LL |     unsafe { asm!(\"\" :: \"i\"(hello)) };\n-   |                             ^^^^^\n+LL |     unsafe { llvm_asm!(\"\" :: \"i\"(hello)) };\n+   |                                  ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:42:38\n+  --> $DIR/inline-asm-bad-operand.rs:42:43\n    |\n-LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n-   |                                      ^^^\n+LL |         llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n+   |                                           ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:49:32\n+  --> $DIR/inline-asm-bad-operand.rs:49:37\n    |\n-LL |         asm!(\"mov sp, $0\"::\"r\"(addr));\n-   |                                ^^^^\n+LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr));\n+   |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:56:32\n+  --> $DIR/inline-asm-bad-operand.rs:56:37\n    |\n-LL |         asm!(\"mov sp, $0\"::\"r\"(addr),\n-   |                                ^^^^\n+LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr),\n+   |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:57:32\n+  --> $DIR/inline-asm-bad-operand.rs:57:37\n    |\n LL | ...                   \"r\"(\"hello e0669\"));\n    |                           ^^^^^^^^^^^^^"}, {"sha": "02095a2f7e4d2e97370e17ac82a7d676b31fb639", "filename": "src/test/ui/issues/issue-14936.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14936.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n #![allow(unused_macros)]\n #![allow(dead_code)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n type History = Vec<&'static str>;\n \n@@ -18,10 +18,10 @@ macro_rules! demo {\n \n             let mut history: History = vec![];\n             unsafe {\n-                asm!(\"mov ($1), $0\"\n-                     : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n-                     : \"r\"(&wrap(y, \"in\", &mut history))\n-                     :: \"volatile\");\n+                llvm_asm!(\"mov ($1), $0\"\n+                          : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n+                          : \"r\"(&wrap(y, \"in\", &mut history))\n+                          :: \"volatile\");\n             }\n             assert_eq!((x,y), (1,1));\n             let b: &[_] = &[\"out\", \"in\"];"}, {"sha": "423b19c3ebd0999835a6391c70971d2f4868de85", "filename": "src/test/ui/issues/issue-23458.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n // build-fail\n // only-x86_64\n \n fn main() {\n     unsafe {\n-        asm!(\"int $3\"); //~ ERROR too few operands for instruction\n-                        //~| ERROR invalid operand in inline asm\n+        llvm_asm!(\"int $3\"); //~ ERROR too few operands for instruction\n+                             //~| ERROR invalid operand in inline asm\n     }\n }"}, {"sha": "81f06e639754205e35ed5649919adffda28860c3", "filename": "src/test/ui/issues/issue-23458.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,17 +1,17 @@\n error: invalid operand in inline asm: 'int $3'\n   --> $DIR/issue-23458.rs:8:9\n    |\n-LL |         asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"int $3\");\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: <inline asm>:1:2: error: too few operands for instruction\n         int \n         ^\n \n   --> $DIR/issue-23458.rs:8:9\n    |\n-LL |         asm!(\"int $3\");\n-   |         ^^^^^^^^^^^^^^^\n+LL |         llvm_asm!(\"int $3\");\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32a36e44aa1aee7791dcfff6e684361f1110d21c", "filename": "src/test/ui/issues/issue-33264.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33264.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -2,7 +2,7 @@\n // only-x86_64\n \n #![allow(dead_code, non_upper_case_globals)]\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n #[repr(C)]\n pub struct D32x4(f32,f32,f32,f32);\n@@ -11,16 +11,16 @@ impl D32x4 {\n     fn add(&self, vec: Self) -> Self {\n         unsafe {\n             let ret: Self;\n-            asm!(\"\n-                 movaps $1, %xmm1\n-                 movaps $2, %xmm2\n-                 addps %xmm1, %xmm2\n-                 movaps $xmm1, $0\n-                 \"\n-                 : \"=r\"(ret)\n-                 : \"1\"(self), \"2\"(vec)\n-                 : \"xmm1\", \"xmm2\"\n-                 );\n+            llvm_asm!(\"\n+                      movaps $1, %xmm1\n+                      movaps $2, %xmm2\n+                      addps %xmm1, %xmm2\n+                      movaps $xmm1, $0\n+                      \"\n+                      : \"=r\"(ret)\n+                      : \"1\"(self), \"2\"(vec)\n+                      : \"xmm1\", \"xmm2\"\n+                      );\n             ret\n         }\n     }"}, {"sha": "be9b4af8fbc41ec7daa92dc02548afc4f2cc88f9", "filename": "src/test/ui/issues/issue-37366.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,12 +1,12 @@\n // check-pass\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n macro_rules! interrupt_handler {\n     () => {\n         unsafe fn _interrupt_handler() {\n-            asm!(\"pop  eax\" :::: \"intel\");\n+            llvm_asm!(\"pop  eax\" :::: \"intel\");\n         }\n     }\n }"}, {"sha": "2ea970327f06b1797e1972b4635e20c67a51b7cf", "filename": "src/test/ui/issues/issue-37433.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn main() {\n     unsafe {\n-        asm!(\"\" :: \"r\"(\"\"));\n+        llvm_asm!(\"\" :: \"r\"(\"\"));\n         //~^ ERROR: invalid value for constraint in inline assembly\n     }\n }"}, {"sha": "ff6965ad353b21b38079e154c78ef6cbdc7bbebe", "filename": "src/test/ui/issues/issue-37433.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,8 +1,8 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:8:24\n+  --> $DIR/issue-37433.rs:8:29\n    |\n-LL |         asm!(\"\" :: \"r\"(\"\"));\n-   |                        ^^\n+LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n+   |                             ^^\n \n error: aborting due to previous error\n "}, {"sha": "38591b0a9f84e28fbab3bc48243a6d2f49856833", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,12 +3,12 @@\n // build-fail\n // ignore-emscripten\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n macro_rules! fake_jump {\n     ($id:expr) => {\n         unsafe {\n-            asm!(\n+            llvm_asm!(\n             \"\n             jmp $0\n             lea eax, [ebx]"}, {"sha": "9a0376ad51f7561ebd30701e05d416a6d13aad7a", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -12,7 +12,7 @@ impl bomb for S { fn boom(&self, _: Ident) { } }\n \n pub struct Ident { name: usize }\n \n-// macro_rules! int3 { () => ( unsafe { asm!( \"int3\" ); } ) }\n+// macro_rules! int3 { () => ( unsafe { llvm_asm!( \"int3\" ); } ) }\n macro_rules! int3 { () => ( { } ) }\n \n fn Ident_new() -> Ident {"}, {"sha": "f0eb92b2be8207b22d4a8a3d583e96ec949f67ab", "filename": "src/test/ui/macros/macro-expanded-include/foo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -5,5 +5,5 @@ macro_rules! m {\n }\n \n macro_rules! n {\n-    () => { unsafe { asm!(include_str!(\"file.txt\")); } }\n+    () => { unsafe { llvm_asm!(include_str!(\"file.txt\")); } }\n }"}, {"sha": "abf83a5c6ffd38f1a4a58d24a0f6cf5d892b6610", "filename": "src/test/ui/macros/macro-expanded-include/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -1,6 +1,6 @@\n-// ignore-emscripten no asm! support\n+// ignore-emscripten no llvm_asm! support\n // build-pass (FIXME(62277): could be check-pass?)\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "cc96a5bff522f4445cc6120f331f65e8e6532d05", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -3,14 +3,14 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n \n #[derive(Default)] //~ ERROR\n enum OrDeriveThis {}\n \n fn main() {\n-    asm!(invalid); //~ ERROR\n+    llvm_asm!(invalid); //~ ERROR\n \n     concat_idents!(\"not\", \"idents\"); //~ ERROR\n "}, {"sha": "f416c70123c665519339127d1f6dadd11635475f", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -7,10 +7,10 @@ LL | #[derive(Default)]\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:13:10\n+  --> $DIR/macros-nonfatal-errors.rs:13:15\n    |\n-LL |     asm!(invalid);\n-   |          ^^^^^^^\n+LL |     llvm_asm!(invalid);\n+   |               ^^^^^^^\n \n error: concat_idents! requires ident args.\n   --> $DIR/macros-nonfatal-errors.rs:15:5"}, {"sha": "d04b0c1a6303e966adecf4cbdb52bdbb089bffca", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c19a10e24af157b96687ca8dc1b48ebac4b9489/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=6c19a10e24af157b96687ca8dc1b48ebac4b9489", "patch": "@@ -8,7 +8,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n-#![feature(asm)]\n+#![feature(llvm_asm)]\n #![feature(rustc_private)]\n \n #[cfg(unix)]\n@@ -22,7 +22,7 @@ use std::thread;\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n // which doesn't consume stack.\n #[inline(always)]\n-pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n+pub fn black_box<T>(dummy: T) { unsafe { llvm_asm!(\"\" : : \"r\"(&dummy)) } }\n \n fn silent_recurse() {\n     let buf = [0u8; 1000];"}]}