{"sha": "bd194a77d57c5487baf1f9bb169e44dd844235e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTk0YTc3ZDU3YzU0ODdiYWYxZjliYjE2OWU0NGRkODQ0MjM1ZTY=", "commit": {"author": {"name": "Jonathan Creekmore", "email": "jonathan@thecreekmores.org", "date": "2016-07-23T12:22:58Z"}, "committer": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-07-27T17:29:43Z"}, "message": "librustc_back: json tests for builtin targets\n\nExpand the supported_targets!() macro to also generate a set of\nJSON encode/decode tests to verify that the parser will encode\nand decode all of the fields needed for all of the builtin targets.\nAdditionally, add PartialEq to Target and TargetOptions in support\nof the tests.", "tree": {"sha": "5d1c4320e738646208c59fea96262d530d84efa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1c4320e738646208c59fea96262d530d84efa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd194a77d57c5487baf1f9bb169e44dd844235e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd194a77d57c5487baf1f9bb169e44dd844235e6", "html_url": "https://github.com/rust-lang/rust/commit/bd194a77d57c5487baf1f9bb169e44dd844235e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd194a77d57c5487baf1f9bb169e44dd844235e6/comments", "author": {"login": "jcreekmore", "id": 385202, "node_id": "MDQ6VXNlcjM4NTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/385202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcreekmore", "html_url": "https://github.com/jcreekmore", "followers_url": "https://api.github.com/users/jcreekmore/followers", "following_url": "https://api.github.com/users/jcreekmore/following{/other_user}", "gists_url": "https://api.github.com/users/jcreekmore/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcreekmore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcreekmore/subscriptions", "organizations_url": "https://api.github.com/users/jcreekmore/orgs", "repos_url": "https://api.github.com/users/jcreekmore/repos", "events_url": "https://api.github.com/users/jcreekmore/events{/privacy}", "received_events_url": "https://api.github.com/users/jcreekmore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eafecbf86855c30d2f6d9c518165edec4cca8248", "url": "https://api.github.com/repos/rust-lang/rust/commits/eafecbf86855c30d2f6d9c518165edec4cca8248", "html_url": "https://github.com/rust-lang/rust/commit/eafecbf86855c30d2f6d9c518165edec4cca8248"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "84cb6c9ba7de39beff32fd633f2e19b56938e490", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd194a77d57c5487baf1f9bb169e44dd844235e6/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd194a77d57c5487baf1f9bb169e44dd844235e6/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=bd194a77d57c5487baf1f9bb169e44dd844235e6", "patch": "@@ -79,13 +79,39 @@ macro_rules! supported_targets {\n                     $triple => {\n                         let mut t = try!($module::target());\n                         t.options.is_builtin = true;\n+\n+                        // round-trip through the JSON parser to ensure at\n+                        // run-time that the parser works correctly\n+                        t = try!(Target::from_json(t.to_json()));\n                         debug!(\"Got builtin target: {:?}\", t);\n                         Ok(t)\n                     },\n                 )+\n                 _ => Err(format!(\"Unable to find target: {}\", target))\n             }\n         }\n+\n+        #[cfg(test)]\n+        mod test_json_encode_decode {\n+            use serialize::json::ToJson;\n+            use super::Target;\n+            $(use super::$module;)*\n+\n+            $(\n+                #[test]\n+                fn $module() {\n+                    // Grab the TargetResult struct. If we successfully retrieved\n+                    // a Target, then the test JSON encoding/decoding can run for this\n+                    // Target on this testing platform (i.e., checking the iOS targets\n+                    // only on a Mac test platform).\n+                    let _ = $module::target().map(|original| {\n+                        let as_json = original.to_json();\n+                        let parsed = Target::from_json(as_json).unwrap();\n+                        assert_eq!(original, parsed);\n+                    });\n+                }\n+            )*\n+        }\n     )\n }\n \n@@ -148,7 +174,7 @@ supported_targets! {\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n-#[derive(Clone, Debug)]\n+#[derive(PartialEq, Clone, Debug)]\n pub struct Target {\n     /// Target triple to pass to LLVM.\n     pub llvm_target: String,\n@@ -175,7 +201,7 @@ pub struct Target {\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n-#[derive(Clone, Debug)]\n+#[derive(PartialEq, Clone, Debug)]\n pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,"}]}