{"sha": "f688ba608923bdbf6b46ec65af2f6464b6233a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODhiYTYwODkyM2JkYmY2YjQ2ZWM2NWFmMmY2NDY0YjYyMzNhNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-23T07:31:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-23T07:31:24Z"}, "message": "Auto merge of #61075 - Centril:rollup-1ugmcqu, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #60981 (Bump compiler-builtins to 0.1.15)\n - #61014 (Make -Zemit-artifact-notifications also emit the artifact type)\n - #61043 (Disable LLVM/debug assertions in gnu-full-bootstrap)\n - #61046 (Fix ICE with inconsistent macro matchers)\n - #61055 (Solaris CI: Build with dilos2 stable)\n - #61057 (Revert \"Add implementations of last in terms of next_back on a bunch of DoubleEndedIterators.\")\n - #61073 (librustc_errors: Remove unused annotation style `OldSchoolNoteText`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3a10abc6d029085f5303852fe878da24b61bdc31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a10abc6d029085f5303852fe878da24b61bdc31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f688ba608923bdbf6b46ec65af2f6464b6233a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f688ba608923bdbf6b46ec65af2f6464b6233a75", "html_url": "https://github.com/rust-lang/rust/commit/f688ba608923bdbf6b46ec65af2f6464b6233a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f688ba608923bdbf6b46ec65af2f6464b6233a75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85334c50921a1c90707c9d0fb344c63bd373e1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/85334c50921a1c90707c9d0fb344c63bd373e1b8", "html_url": "https://github.com/rust-lang/rust/commit/85334c50921a1c90707c9d0fb344c63bd373e1b8"}, {"sha": "a89c62ca2b3f019850da20cde89669593e2edf39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89c62ca2b3f019850da20cde89669593e2edf39", "html_url": "https://github.com/rust-lang/rust/commit/a89c62ca2b3f019850da20cde89669593e2edf39"}], "stats": {"total": 337, "additions": 130, "deletions": 207}, "files": [{"sha": "b651faac90281fc91b3f8841920634db87495337", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -25,7 +25,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -123,7 +123,7 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -462,7 +462,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.14\"\n+version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -744,7 +744,7 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -910,7 +910,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -1071,7 +1071,7 @@ name = \"hashbrown\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -1772,7 +1772,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1782,7 +1782,7 @@ name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n@@ -1967,7 +1967,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2492,7 +2492,7 @@ name = \"rustc-demangle\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2620,7 +2620,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2850,7 +2850,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2912,7 +2912,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3029,7 +3029,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3298,7 +3298,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3889,7 +3889,7 @@ name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4087,7 +4087,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3f235c329e5cb9fa3d2ca2cc36256ba9a7f23fa76e0f4db6f68c23b73b2ac69\"\n+\"checksum compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e899b947d7e71c3d35c0b6194d64025b84946640510e215090c815b20828964e\"\n \"checksum compiletest_rs 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f40ecc9332b68270998995c00f8051ee856121764a0d3230e64c9efd059d27b6\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\""}, {"sha": "2da5e1c5902c11deadf028842a0b1d3d34c59b8e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -161,7 +161,33 @@ pub fn std_cargo(builder: &Builder<'_>,\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n \n+    // Determine if we're going to compile in optimized C intrinsics to\n+    // the `compiler-builtins` crate. These intrinsics live in LLVM's\n+    // `compiler-rt` repository, but our `src/llvm-project` submodule isn't\n+    // always checked out, so we need to conditionally look for this. (e.g. if\n+    // an external LLVM is used we skip the LLVM submodule checkout).\n+    //\n+    // Note that this shouldn't affect the correctness of `compiler-builtins`,\n+    // but only its speed. Some intrinsics in C haven't been translated to Rust\n+    // yet but that's pretty rare. Other intrinsics have optimized\n+    // implementations in C which have only had slower versions ported to Rust,\n+    // so we favor the C version where we can, but it's not critical.\n+    //\n+    // If `compiler-rt` is available ensure that the `c` feature of the\n+    // `compiler-builtins` crate is enabled and it's configured to learn where\n+    // `compiler-rt` is located.\n+    let compiler_builtins_root = builder.src.join(\"src/llvm-project/compiler-rt\");\n+    let compiler_builtins_c_feature = if compiler_builtins_root.exists() {\n+        cargo.env(\"RUST_COMPILER_RT_ROOT\", &compiler_builtins_root);\n+        \" compiler-builtins-c\".to_string()\n+    } else {\n+        String::new()\n+    };\n+\n     if builder.no_std(target) == Some(true) {\n+        let mut features = \"compiler-builtins-mem\".to_string();\n+        features.push_str(&compiler_builtins_c_feature);\n+\n         // for no-std targets we only compile a few no_std crates\n         cargo\n             .args(&[\"-p\", \"alloc\"])\n@@ -170,7 +196,8 @@ pub fn std_cargo(builder: &Builder<'_>,\n             .arg(\"--features\")\n             .arg(\"compiler-builtins-mem compiler-builtins-c\");\n     } else {\n-        let features = builder.std_features();\n+        let mut features = builder.std_features();\n+        features.push_str(&compiler_builtins_c_feature);\n \n         if compiler.stage != 0 && builder.config.sanitizers {\n             // This variable is used by the sanitizer runtime crates, e.g."}, {"sha": "8b00c1d81b08c4b6baf841b8c94d7b9daa2d5312", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -288,9 +288,9 @@ pub fn sanitizer_lib_boilerplate(sanitizer_name: &str)\n     } else {\n         format!(\"static={}\", link_name)\n     };\n-    // The source for `compiler-rt` comes from the `compiler-builtins` crate, so\n-    // load our env var set by cargo to find the source code.\n-    let dir = env::var_os(\"DEP_COMPILER_RT_COMPILER_RT\").unwrap();\n+    // This env var is provided by rustbuild to tell us where `compiler-rt`\n+    // lives.\n+    let dir = env::var_os(\"RUST_COMPILER_RT_ROOT\").unwrap();\n     let lib = native_lib_boilerplate(\n         dir.as_ref(),\n         sanitizer_name,"}, {"sha": "e7d6f201b444ec757ec0775e644252999459f45c", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -24,7 +24,7 @@ RUN apt-get update && apt-get build-dep -y clang llvm && apt-get install -y --no\n   gpg-agent\n \n RUN apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7924C5513486\n-RUN add-apt-repository -y 'deb http://apt.dilos.org/dilos dilos2-testing main'\n+RUN add-apt-repository -y 'deb http://apt.dilos.org/dilos dilos2 main'\n \n WORKDIR /tmp\n COPY dist-various-2/shared.sh /tmp/"}, {"sha": "a157fee16cfd5ddaabf87326fc7e5d4a31767454", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -20,3 +20,9 @@ ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-full-bootstrap\n ENV SCRIPT python2.7 ../x.py build\n+\n+# In general this just slows down the build and we're just a smoke test that\n+# a full bootstrap works in general, so there's not much need to take this\n+# penalty in build times.\n+ENV NO_LLVM_ASSERTIONS 1\n+ENV NO_DEBUG_ASSERTIONS 1"}, {"sha": "c898f064fd09f4fff4bb0e396a4384fe06049b26", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1035,11 +1035,6 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1095,11 +1090,6 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1146,11 +1136,6 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "6b079fc87cc78905f431a097a2aa8aaee7a33f3b", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1193,11 +1193,6 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<(&'a K, &'a V)> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1258,11 +1253,6 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1369,11 +1359,6 @@ impl<K, V> Iterator for IntoIter<K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<(K, V)> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1436,11 +1421,6 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a K> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1478,11 +1458,6 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a V> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1520,11 +1495,6 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<(&'a K, &'a V)> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1538,11 +1508,6 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a mut V> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1661,11 +1626,6 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n-        self.next_back()\n-    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "16a96ca19b82462b4a99f2e234f3e1c85b630e4f", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1019,11 +1019,6 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a T> {\n-        self.next_back()\n-    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1049,11 +1044,6 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<T> {\n-        self.next_back()\n-    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n@@ -1083,11 +1073,6 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "7f7722548f581df43deca22d09a91d2950158911", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -2385,10 +2385,6 @@ impl Iterator for Drain<'_> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-    #[inline]\n-    fn last(mut self) -> Option<char> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "073d3ab5937035a148053e8e6243a8c300903ab2", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -2395,11 +2395,6 @@ impl<T> Iterator for IntoIter<T> {\n     fn count(self) -> usize {\n         self.len()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2519,11 +2514,6 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<T> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2593,10 +2583,6 @@ impl<I: Iterator> Iterator for Splice<'_, I> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.drain.size_hint()\n     }\n-\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "c0ab364380fbd83d379fe22662e5d4eb20f80598", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -117,8 +117,6 @@ impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> { self.range.next().map(|i| self.data[i]) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n-    #[inline]\n-    fn last(mut self) -> Option<u8> { self.next_back() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {"}, {"sha": "518442efe74172a3c35ed85a23c00ff979681d72", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -73,11 +73,6 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     {\n         self.iter.position(predicate)\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "50d2ba0d3ef7fa06ee9c332bc59b4f5e3c96c3f8", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -3547,11 +3547,6 @@ impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3650,11 +3645,6 @@ impl<'a, T, P> Iterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3720,11 +3710,6 @@ impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -3789,11 +3774,6 @@ impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"}, {"sha": "ef4bd83cbc5a695997a044e9fdc0677a59fe7a19", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1333,11 +1333,6 @@ impl<'a> Iterator for Lines<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1384,11 +1379,6 @@ impl<'a> Iterator for LinesAny<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4231,11 +4221,6 @@ impl<'a> Iterator for SplitWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -4262,11 +4247,6 @@ impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}, {"sha": "491986480deba1082cce16d4b955915c2bce3121", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -57,9 +57,7 @@ fn main() {\n         cfg.define(\"COMPILER_RT_HAS_ATOMICS\", Some(\"1\"));\n     }\n \n-    // The source for `compiler-rt` comes from the `compiler-builtins` crate, so\n-    // load our env var set by cargo to find the source code.\n-    let root = env::var_os(\"DEP_COMPILER_RT_COMPILER_RT\").unwrap();\n+    let root = env::var_os(\"RUST_COMPILER_RT_ROOT\").unwrap();\n     let root = Path::new(&root);\n \n     for src in profile_sources {"}, {"sha": "c1ec2071789eb58d66ee39682dbe543202cc08e3", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -96,7 +96,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                 }\n             }\n             if sess.opts.debugging_opts.emit_artifact_notifications {\n-                sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename);\n+                sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename, \"link\");\n             }\n         }\n "}, {"sha": "890d2c5ce0b80e2f534138073036c5b2853e7834", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -56,7 +56,7 @@ pub trait Emitter {\n     /// Emit a notification that an artifact has been output.\n     /// This is currently only supported for the JSON format,\n     /// other formats can, and will, simply ignore it.\n-    fn emit_artifact_notification(&mut self, _path: &Path) {}\n+    fn emit_artifact_notification(&mut self, _path: &Path, _artifact_type: &str) {}\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n@@ -1645,7 +1645,7 @@ impl<'a> WritableDst<'a> {\n                 }\n             }\n             Style::Quotation => {}\n-            Style::OldSchoolNoteText | Style::MainHeaderMsg => {\n+            Style::MainHeaderMsg => {\n                 spec.set_bold(true);\n                 if cfg!(windows) {\n                     spec.set_intense(true)"}, {"sha": "2dcf7be2aa8b1f9dadf8bfae1f6b121be7dbb235", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -769,8 +769,8 @@ impl Handler {\n         }\n     }\n \n-    pub fn emit_artifact_notification(&self, path: &Path) {\n-        self.emitter.borrow_mut().emit_artifact_notification(path);\n+    pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n+        self.emitter.borrow_mut().emit_artifact_notification(path, artifact_type);\n     }\n }\n "}, {"sha": "47ba22d3d25aff6ebff6f6ee702bd1e4955df812", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -188,7 +188,6 @@ pub enum Style {\n     UnderlineSecondary,\n     LabelPrimary,\n     LabelSecondary,\n-    OldSchoolNoteText,\n     NoStyle,\n     Level(Level),\n     Highlight,"}, {"sha": "4a96864dc9d661aed721057dc89c191b213b2abd", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1050,7 +1050,8 @@ fn encode_and_write_metadata<'tcx>(\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n         if tcx.sess.opts.debugging_opts.emit_artifact_notifications {\n-            tcx.sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename);\n+            tcx.sess.parse_sess.span_diagnostic\n+                .emit_artifact_notification(&out_filename, \"metadata\");\n         }\n     }\n "}, {"sha": "c4c1170e539ae6c213f5a52a9a6f13971f4c3f04", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -19,7 +19,7 @@ panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.14\" }\n+compiler_builtins = { version = \"0.1.15\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.3.0\", features = ['rustc-dep-of-std'] }\n@@ -49,12 +49,12 @@ fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n cc = \"1.0\"\n \n [features]\n-default = [\"compiler_builtins_c\", \"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]\n+default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]\n \n backtrace = [\"backtrace-sys\"]\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n-compiler_builtins_c = [\"alloc/compiler-builtins-c\"]\n+compiler-builtins-c = [\"alloc/compiler-builtins-c\"]\n llvm-libunwind = [\"unwind/llvm-libunwind\"]\n \n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "9058ea93d6de077d2717173df417931ac68c364e", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -746,10 +746,6 @@ impl Iterator for Args {\n         self.inner.next().map(|s| s.into_string().unwrap())\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n-    #[inline]\n-    fn last(mut self) -> Option<String> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -785,8 +781,6 @@ impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n-    #[inline]\n-    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "126bc3754dabcac134e18c713c3d967878439aa3", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -888,11 +888,6 @@ impl<'a> Iterator for Iter<'a> {\n     fn next(&mut self) -> Option<&'a OsStr> {\n         self.inner.next().map(Component::as_os_str)\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<&'a OsStr> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -956,11 +951,6 @@ impl<'a> Iterator for Components<'a> {\n         }\n         None\n     }\n-\n-    #[inline]\n-    fn last(mut self) -> Option<Self::Item> {\n-        self.next_back()\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3b4de56f2c9b7602c3f5699a2a9fa00456ff3735", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -35,8 +35,6 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.iter.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n-    #[inline]\n-    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "b3c77b869956364326312711471bff4e66fa2556", "filename": "src/libstd/sys/wasm/args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -37,10 +37,6 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n-    #[inline]\n-    fn last(mut self) -> Option<OsString> {\n-        self.next_back()\n-    }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "b04bb484eedb9499cf453c344749251be4fca405", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -181,8 +181,6 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.parsed_args_list.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.parsed_args_list.size_hint() }\n-    #[inline]\n-    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl DoubleEndedIterator for Args {"}, {"sha": "e6b49e61937d6aae3e96670b44fd4e72213f2b02", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -170,9 +170,11 @@ pub fn transcribe(\n                     }\n \n                     LockstepIterSize::Contradiction(ref msg) => {\n-                        // This should never happen because the macro parser should generate\n-                        // properly-sized matches for all meta-vars.\n-                        cx.span_bug(seq.span(), &msg[..]);\n+                        // FIXME: this really ought to be caught at macro definition time... It\n+                        // happens when two meta-variables are used in the same repetition in a\n+                        // sequence, but they come from different sequence matchers and repeat\n+                        // different amounts.\n+                        cx.span_fatal(seq.span(), &msg[..]);\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -187,9 +189,10 @@ pub fn transcribe(\n                         // Is the repetition empty?\n                         if len == 0 {\n                             if seq.op == quoted::KleeneOp::OneOrMore {\n-                                // This should be impossible because the macro parser would not\n-                                // match the given macro arm.\n-                                cx.span_bug(sp.entire(), \"this must repeat at least once\");\n+                                // FIXME: this really ought to be caught at macro definition\n+                                // time... It happens when the Kleene operator in the matcher and\n+                                // the body for the same meta-variable do not match.\n+                                cx.span_fatal(sp.entire(), \"this must repeat at least once\");\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repretitions so far). `len`\n@@ -327,8 +330,7 @@ impl LockstepIterSize {\n                 LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n                     let msg = format!(\n-                        \"inconsistent lockstep iteration: \\\n-                         '{}' has {} items, but '{}' has {}\",\n+                        \"meta-variable `{}` repeats {} times, but `{}` repeats {} times\",\n                         l_id, l_len, r_id, r_len\n                     );\n                     LockstepIterSize::Contradiction(msg)"}, {"sha": "767ab74355e66213ff8c27fbec2ba22be41f7302", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -92,8 +92,8 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn emit_artifact_notification(&mut self, path: &Path) {\n-        let data = ArtifactNotification { artifact: path };\n+    fn emit_artifact_notification(&mut self, path: &Path, artifact_type: &str) {\n+        let data = ArtifactNotification { artifact: path, emit: artifact_type };\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n@@ -185,6 +185,8 @@ struct DiagnosticCode {\n struct ArtifactNotification<'a> {\n     /// The path of the artifact.\n     artifact: &'a Path,\n+    /// What kind of artifact we're emitting.\n+    emit: &'a str,\n }\n \n impl Diagnostic {"}, {"sha": "4efebe31651d5520bcba968878dbb8a4971d2045", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1 +1 @@\n-Subproject commit 2c5656ae593851d0b2336a727cc14b77a06b8ac0\n+Subproject commit 4efebe31651d5520bcba968878dbb8a4971d2045"}, {"sha": "5547631a4b0229e9b2b5310ebc16e316c9106140", "filename": "src/test/ui/emit-artifact-notifications.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1 +1 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\"}\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "260d41b8f15cc090902f2a39d22af5c1525ed2c9", "filename": "src/test/ui/emit-artifact-notifications.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -1 +1 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications/libemit_artifact_notifications.rmeta\"}\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "8f85dec017f2a0ee0b5c4c349bea9a72e066ea38", "filename": "src/test/ui/macros/issue-61033-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for issue #61033.\n+\n+macro_rules! test1 {\n+    ($x:ident, $($tt:tt)*) => { $($tt)+ } //~ERROR this must repeat at least once\n+}\n+\n+fn main() {\n+    test1!(x,);\n+}"}, {"sha": "f3c68f4928dbb3b343e6a1f70aa617715fb6a294", "filename": "src/test/ui/macros/issue-61033-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -0,0 +1,8 @@\n+error: this must repeat at least once\n+  --> $DIR/issue-61033-1.rs:4:34\n+   |\n+LL |     ($x:ident, $($tt:tt)*) => { $($tt)+ }\n+   |                                  ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0799be10b96c71f7001ac50a5aa0936ac3dc5da4", "filename": "src/test/ui/macros/issue-61033-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #61033.\n+\n+macro_rules! test2 {\n+    (\n+        $(* $id1:ident)*\n+        $(+ $id2:ident)*\n+    ) => {\n+        $( //~ERROR meta-variable `id1` repeats 2 times\n+            $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n+        )*\n+    }\n+}\n+\n+fn main() {\n+    test2! {\n+        * a * b\n+        + a + b + c\n+    }\n+}"}, {"sha": "bf502919cf79488e1fb98aae0950e1a9a22eb3cc", "filename": "src/test/ui/macros/issue-61033-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f688ba608923bdbf6b46ec65af2f6464b6233a75/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr?ref=f688ba608923bdbf6b46ec65af2f6464b6233a75", "patch": "@@ -0,0 +1,11 @@\n+error: meta-variable `id1` repeats 2 times, but `id2` repeats 3 times\n+  --> $DIR/issue-61033-2.rs:8:10\n+   |\n+LL |           $(\n+   |  __________^\n+LL | |             $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n+LL | |         )*\n+   | |_________^\n+\n+error: aborting due to previous error\n+"}]}