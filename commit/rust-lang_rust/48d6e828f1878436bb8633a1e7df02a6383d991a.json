{"sha": "48d6e828f1878436bb8633a1e7df02a6383d991a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZDZlODI4ZjE4Nzg0MzZiYjg2MzNhMWU3ZGYwMmE2MzgzZDk5MWE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-04-28T14:30:49Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-04-28T14:30:49Z"}, "message": "ms-vscode.cpptools debugger support, initial version.", "tree": {"sha": "24b1795e969c9fee0899f14a7e74bdce6764594e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b1795e969c9fee0899f14a7e74bdce6764594e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48d6e828f1878436bb8633a1e7df02a6383d991a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48d6e828f1878436bb8633a1e7df02a6383d991a", "html_url": "https://github.com/rust-lang/rust/commit/48d6e828f1878436bb8633a1e7df02a6383d991a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48d6e828f1878436bb8633a1e7df02a6383d991a/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9ba1657daa9fd90c639dcd937da11b4f526675", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ba1657daa9fd90c639dcd937da11b4f526675", "html_url": "https://github.com/rust-lang/rust/commit/7a9ba1657daa9fd90c639dcd937da11b4f526675"}], "stats": {"total": 150, "additions": 138, "deletions": 12}, "files": [{"sha": "d119b62253f3c7c9b9c8585cf26bf459a8079da2", "filename": "editors/code/src/cargo.ts", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/48d6e828f1878436bb8633a1e7df02a6383d991a/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48d6e828f1878436bb8633a1e7df02a6383d991a/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=48d6e828f1878436bb8633a1e7df02a6383d991a", "patch": "@@ -0,0 +1,103 @@\n+import { window } from 'vscode';\n+import * as cp from 'child_process';\n+import * as readline from 'readline';\n+\n+interface CompilationArtifact {\n+    fileName: string;\n+    name: string;\n+    kind: string;\n+    isTest: boolean;\n+}\n+\n+export class Cargo {\n+    rootFolder: string;\n+    env?: { [key: string]: string };\n+\n+    public constructor(cargoTomlFolder: string) {\n+        this.rootFolder = cargoTomlFolder;\n+    }\n+\n+    public async artifactsFromArgs(cargoArgs: string[]): Promise<CompilationArtifact[]> {\n+        let artifacts: CompilationArtifact[] = [];\n+\n+        try {\n+            await this.runCargo(cargoArgs,\n+                message => {\n+                    if (message.reason == 'compiler-artifact' && message.executable) {\n+                        let isBinary = message.target.crate_types.includes('bin');\n+                        let isBuildScript = message.target.kind.includes('custom-build');\n+                        if ((isBinary && !isBuildScript) || message.profile.test) {\n+                            artifacts.push({\n+                                fileName: message.executable,\n+                                name: message.target.name,\n+                                kind: message.target.kind[0],\n+                                isTest: message.profile.test\n+                            })\n+                        }\n+                    }\n+                },\n+                _stderr => {\n+                    // TODO: to output\n+                }\n+            );\n+        }\n+        catch (err) {\n+            // TODO: to output\n+            throw new Error(`Cargo invocation has failed: ${err}`);\n+        }\n+\n+        return artifacts;\n+    }\n+\n+    public async executableFromArgs(cargoArgs: string[], extraArgs?: string[]): Promise<string> {\n+        cargoArgs.push(\"--message-format=json\");\n+        if (extraArgs) {\n+            cargoArgs.push('--');\n+            cargoArgs.push(...extraArgs);\n+        }\n+\n+        let artifacts = await this.artifactsFromArgs(cargoArgs);\n+\n+        if (artifacts.length == 0 ) {\n+            throw new Error('No compilation artifacts');\n+        } else if (artifacts.length > 1) {\n+            throw new Error('Multiple compilation artifacts are not supported.');\n+        }\n+\n+        return artifacts[0].fileName;\n+    }\n+\n+    runCargo(\n+        cargoArgs: string[],\n+        onStdoutJson: (obj: any) => void,\n+        onStderrString: (data: string) => void\n+    ): Promise<number> {\n+        return new Promise<number>((resolve, reject) => {\n+            let cargo = cp.spawn('cargo', cargoArgs, {\n+                stdio: ['ignore', 'pipe', 'pipe'],\n+                cwd: this.rootFolder,\n+                env: this.env,\n+            });\n+\n+            cargo.on('error', err => {\n+                reject(new Error(`could not launch cargo: ${err}`));\n+            });\n+            cargo.stderr.on('data', chunk => {\n+                onStderrString(chunk.toString());\n+            });\n+\n+            let rl = readline.createInterface({ input: cargo.stdout });\n+            rl.on('line', line => {\n+                let message = JSON.parse(line);\n+                onStdoutJson(message);\n+            });\n+\n+            cargo.on('exit', (exitCode, _) => {\n+                if (exitCode == 0)\n+                    resolve(exitCode);\n+                else\n+                    reject(new Error(`exit code: ${exitCode}.`));\n+            });\n+        });\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "26db18156f5cfdcee6b22b714aa807c47fa83df6", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/48d6e828f1878436bb8633a1e7df02a6383d991a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/48d6e828f1878436bb8633a1e7df02a6383d991a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=48d6e828f1878436bb8633a1e7df02a6383d991a", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n+import { Cargo } from '../cargo';\n \n export function run(ctx: Ctx): Cmd {\n     let prevRunnable: RunnableQuickPick | undefined;\n@@ -62,25 +63,47 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n+function getLldbDebugConfig(config: ra.Runnable) : vscode.DebugConfiguration {\n+    return {\n+        type: \"lldb\",\n+        request: \"launch\",\n+        name: config.label,\n+        cargo: {\n+            args: config.args,\n+        },\n+        args: config.extraArgs,\n+        cwd: config.cwd\n+    };\n+}\n+\n+async function getCppvsDebugConfig(config: ra.Runnable) : Promise<vscode.DebugConfiguration> {\n+    let cargo = new Cargo(config.cwd || '.');\n+    let executable = await cargo.executableFromArgs(config.args, config.extraArgs);\n+\n+    return {\n+        type: \"cppvsdbg\",\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+    };\n+}\n+\n export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n-        if (!vscode.extensions.getExtension(\"vadimcn.vscode-lldb\")) {\n-            vscode.window.showErrorMessage(\"Install `vadimcn.vscode-lldb` extension for debugging\");\n+\n+        const mscpp = vscode.extensions.getExtension(\"ms-vscode.cpptools\");\n+        const lldb = vscode.extensions.getExtension(\"vadimcn.vscode-lldb\");\n+\n+        if (!(lldb || mscpp)) {\n+            vscode.window.showErrorMessage(\"Install `vadimcn.vscode-lldb` or `ms-vscode.cpptools` extension for debugging\");\n             return;\n         }\n \n-        const debugConfig = {\n-            type: \"lldb\",\n-            request: \"launch\",\n-            name: config.label,\n-            cargo: {\n-                args: config.args,\n-            },\n-            args: config.extraArgs,\n-            cwd: config.cwd\n-        };\n+        const debugConfig = lldb ? getLldbDebugConfig(config) : await getCppvsDebugConfig(config);\n \n         return vscode.debug.startDebugging(undefined, debugConfig);\n     };"}]}