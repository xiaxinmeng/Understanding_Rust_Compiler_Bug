{"sha": "1bc0627607262cc60a7692b16e205f30fc88b89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYzA2Mjc2MDcyNjJjYzYwYTc2OTJiMTZlMjA1ZjMwZmM4OGI4OWY=", "commit": {"author": {"name": "Federico Ponzi", "email": "isaacisback92@gmail.com", "date": "2020-08-31T13:48:28Z"}, "committer": {"name": "Federico Ponzi", "email": "isaacisback92@gmail.com", "date": "2020-08-31T13:48:28Z"}, "message": "Add as_flag function to the OpenOptionsExt struct", "tree": {"sha": "790ce45e5f53f20f9c64439fdd175f41580bf1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790ce45e5f53f20f9c64439fdd175f41580bf1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc0627607262cc60a7692b16e205f30fc88b89f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJfTP+sAAoJEM+pzP5TY9DG7pwQAIwKs9068uugHu0atm3/KGK/\n7bm1K1YMci0x+n3Yb8iBGmLb038tXjs139oQcXWDV5VooDTewiMHth+eNEBLEwR9\nxT5sXV2ApDM3Ir1D4rgJUrE5hLCZVGYQ9D6Trk32DC0y8SndEbRNEBZ2VyI8Inzt\nZU1obq4M+9xu96KOUzd0szCbcpjRKmHlfI85LRe83f1X3UeVCWpCEFQnLVNQjLNL\nX9p2d32ZM1Vrq5341YtM53XnXHKkd91lwYJNyrOyXsjwVLMJ87giGzDvIBOTPrN3\npiWPQIiARpT74PHFtdKOzyoxJg0LFibpuSUXGEIPF/vx/BfCwLfssX3nzNJM5WYw\n+Su8j9hHBXVVs+kCGiya03kSxYxCrjJM7y5TVO6pWDp9cM4NQOntRcVo6pxaS9zf\nC89u1LvtmVmyvYVMwILcgJ+ilwjCbkhkkyGDehZrruXmln6mfkKfFF0SP0GKKdYv\nzzOtok0+IETjphLxqh2Z5AnXjtNW0Um62dm2iAh28bWTdtvfYy/hh9YIEjMmIev2\nOc6f3+zOHCiXCwJOPCr7KfPULhRtFgIhxW04waFj5ZKQzJK2MeFqVcHfH6Kdvkiv\ns0hL81Qb1tCIBLj2XT3facYMVYCvfREaQKFtqK931w4sZI9T8VbH5mQHd6u1gP+W\nVVxsdRalBvX9srVcWVxJ\n=NQlo\n-----END PGP SIGNATURE-----", "payload": "tree 790ce45e5f53f20f9c64439fdd175f41580bf1a6\nparent 27c90b881df93b53fd3f24dcbfed116379c2fc69\nauthor Federico Ponzi <isaacisback92@gmail.com> 1598881708 +0200\ncommitter Federico Ponzi <isaacisback92@gmail.com> 1598881708 +0200\n\nAdd as_flag function to the OpenOptionsExt struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc0627607262cc60a7692b16e205f30fc88b89f", "html_url": "https://github.com/rust-lang/rust/commit/1bc0627607262cc60a7692b16e205f30fc88b89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc0627607262cc60a7692b16e205f30fc88b89f/comments", "author": {"login": "FedericoPonzi", "id": 2124904, "node_id": "MDQ6VXNlcjIxMjQ5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2124904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FedericoPonzi", "html_url": "https://github.com/FedericoPonzi", "followers_url": "https://api.github.com/users/FedericoPonzi/followers", "following_url": "https://api.github.com/users/FedericoPonzi/following{/other_user}", "gists_url": "https://api.github.com/users/FedericoPonzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/FedericoPonzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FedericoPonzi/subscriptions", "organizations_url": "https://api.github.com/users/FedericoPonzi/orgs", "repos_url": "https://api.github.com/users/FedericoPonzi/repos", "events_url": "https://api.github.com/users/FedericoPonzi/events{/privacy}", "received_events_url": "https://api.github.com/users/FedericoPonzi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FedericoPonzi", "id": 2124904, "node_id": "MDQ6VXNlcjIxMjQ5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2124904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FedericoPonzi", "html_url": "https://github.com/FedericoPonzi", "followers_url": "https://api.github.com/users/FedericoPonzi/followers", "following_url": "https://api.github.com/users/FedericoPonzi/following{/other_user}", "gists_url": "https://api.github.com/users/FedericoPonzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/FedericoPonzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FedericoPonzi/subscriptions", "organizations_url": "https://api.github.com/users/FedericoPonzi/orgs", "repos_url": "https://api.github.com/users/FedericoPonzi/repos", "events_url": "https://api.github.com/users/FedericoPonzi/events{/privacy}", "received_events_url": "https://api.github.com/users/FedericoPonzi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c90b881df93b53fd3f24dcbfed116379c2fc69", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c90b881df93b53fd3f24dcbfed116379c2fc69", "html_url": "https://github.com/rust-lang/rust/commit/27c90b881df93b53fd3f24dcbfed116379c2fc69"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "0a00c64e6c54525ce0ab518aeff985bf5c2f3dc8", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1bc0627607262cc60a7692b16e205f30fc88b89f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc0627607262cc60a7692b16e205f30fc88b89f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=1bc0627607262cc60a7692b16e205f30fc88b89f", "patch": "@@ -345,6 +345,33 @@ pub trait OpenOptionsExt {\n     /// ```\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: i32) -> &mut Self;\n+\n+    /// Get the flags of this OpenOptions as libc::c_int.\n+    ///\n+    /// This method allows the reuse of the OpenOptions as flags argument for `libc::open()`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// # #![feature(rustc_private)]\n+    /// extern crate libc;\n+    /// use std::ffi::CString;\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// # fn main() {\n+    /// let mut options = OpenOptions::new();\n+    /// options.write(true).read(true);\n+    /// if cfg!(unix) {\n+    ///     options.custom_flags(libc::O_NOFOLLOW);\n+    /// }\n+    /// let file_name = CString::new(\"foo.txt\").unwrap();\n+    /// let file = unsafe{ libc::open(file_name.as_c_str().as_ptr(), options.as_flags().unwrap()) };\n+    ///\n+    /// # }\n+    /// ```\n+    #[stable(feature = \"open_options_ext_as_flags\", since = \"1.47.0\")]\n+    fn as_flags(&self) -> io::Result<libc::c_int>;\n }\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n@@ -358,6 +385,9 @@ impl OpenOptionsExt for OpenOptions {\n         self.as_inner_mut().custom_flags(flags);\n         self\n     }\n+    fn as_flags(&self) -> io::Result<libc::c_int> {\n+        self.as_inner().as_flags()\n+    }\n }\n \n /// Unix-specific extensions to [`fs::Metadata`]."}, {"sha": "f4d3ad2d2a4848cd100fc5699ad66fa5a97ec215", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bc0627607262cc60a7692b16e205f30fc88b89f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc0627607262cc60a7692b16e205f30fc88b89f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1bc0627607262cc60a7692b16e205f30fc88b89f", "patch": "@@ -655,7 +655,11 @@ impl OpenOptions {\n     pub fn mode(&mut self, mode: u32) {\n         self.mode = mode as mode_t;\n     }\n-\n+    pub fn as_flags(&self) -> io::Result<c_int> {\n+        let access_mode = self.get_access_mode()?;\n+        let creation_mode = self.get_creation_mode()?;\n+        Ok(creation_mode | access_mode | self.custom_flags)\n+    }\n     fn get_access_mode(&self) -> io::Result<c_int> {\n         match (self.read, self.write, self.append) {\n             (true, false, false) => Ok(libc::O_RDONLY),\n@@ -692,7 +696,6 @@ impl OpenOptions {\n     }\n }\n \n-\n impl File {\n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n         let path = cstr(path)?;\n@@ -963,11 +966,6 @@ pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n     Ok(())\n }\n \n-pub fn get_openopetions_as_cint(from: OpenOptions) -> io::Result<libc::c_int> {\n-    let access_mode = from.get_access_mode()?;\n-    let creation_mode = from.get_creation_mode()?;\n-    Ok(creation_mode | access_mode)\n-}\n \n pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {\n     let p = cstr(p)?;"}]}