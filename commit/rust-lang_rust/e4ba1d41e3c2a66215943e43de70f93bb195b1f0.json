{"sha": "e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YmExZDQxZTNjMmE2NjIxNTk0M2U0M2RlNzBmOTNiYjE5NWIxZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-15T19:50:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-15T19:50:26Z"}, "message": "Auto merge of #54116 - eddyb:extern-prelude, r=petrochenkov\n\nrustc_resolve: allow only core, std, meta and --extern in Rust 2018 paths.\n\nAs per https://github.com/rust-lang/rust/issues/53166#issuecomment-419265401:\n* Rust 2018 imports can no longer refer to crates not in \"extern prelude\"\n  * `::foo` won't load a crate named `foo` unless `foo` is in the \"extern prelude\"\n  * `extern crate foo;`, however, remains unchanged (can load arbitrary crates)\n* `--extern crate_name` is added (note the lack of `=path`) as an unstable option\n  * adds `crate_name` to the \"extern prelude\" (see above)\n  * crate is searched in sysroot & library paths, just like `extern crate crate_name`.\n  * `Cargo` support will be added later\n* `core`, `std` and ~~`proc_macro`~~ `meta` are *always* available in the extern prelude\n  * warning for interaction with `no_std` / `no_core` will be added later\n  * **EDIT**: `proc_macro` was replaced by `meta`, see https://github.com/rust-lang/rust/issues/53166#issuecomment-421137230\n    * note that there is no crate named `meta` being added, so `use meta::...;` will fail, we're only whitelisting it so we can start producing `uniform_paths` compatibility errors\n\nFixes #54006 (as the example now requires `--extern alloc`, which is unstable).\nFixes #54253 (hit during fixing RLS).\n\nr? @petrochenkov cc @aturon @alexcrichton @Centril @joshtriplett", "tree": {"sha": "b987e0eddbd091477ef786182dd789a910ca0894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b987e0eddbd091477ef786182dd789a910ca0894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "html_url": "https://github.com/rust-lang/rust/commit/e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f53c87b4b1f097e111c9525d60470ed22631018", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f53c87b4b1f097e111c9525d60470ed22631018", "html_url": "https://github.com/rust-lang/rust/commit/9f53c87b4b1f097e111c9525d60470ed22631018"}, {"sha": "bde0a54737653776ce271ec38f65f07fe1bd4388", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde0a54737653776ce271ec38f65f07fe1bd4388", "html_url": "https://github.com/rust-lang/rust/commit/bde0a54737653776ce271ec38f65f07fe1bd4388"}], "stats": {"total": 770, "additions": 516, "deletions": 254}, "files": [{"sha": "9f9c58ef900eedd23975793f53809908effbbc3e", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -12,7 +12,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -433,7 +433,7 @@ dependencies = [\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -475,7 +475,7 @@ dependencies = [\n  \"crossbeam-epoch 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1444,7 +1444,7 @@ version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1644,7 +1644,7 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.5.4\"\n+version = \"0.5.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1767,6 +1767,7 @@ dependencies = [\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ordslice 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2191,7 +2192,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_fs_util 0.0.0\",\n@@ -2627,7 +2628,7 @@ dependencies = [\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\",\n  \"rustc_msan 0.0.0\",\n@@ -2794,7 +2795,7 @@ version = \"3.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3262,7 +3263,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd636425967c33af890042c483632d33fa7a18f19ad1d7ea72e8998c6ef8dea5\"\n \"checksum racer 2.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e4bc3847329b20ff5ba56c298938c179ae9911af15c9c10553f683b65164533\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n-\"checksum rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"12397506224b2f93e6664ffc4f664b29be8208e5157d3d90b44f09b5fae470ea\"\n+\"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n \"checksum rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edecf0f94da5551fc9b492093e30b041a891657db7940ee221f9d2f66e82eef2\"\n \"checksum rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80e811e76f1dbf68abf87a759083d34600017fc4e10b6bd5ad84a700f9dba4b1\"\n \"checksum rayon-core 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d24ad214285a7729b174ed6d3bcfcb80177807f959d95fafd5bfc5c4f201ac8\""}, {"sha": "4c0eeba74415076b3616e2edab6df8a32da371b7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -275,18 +275,18 @@ impl OutputTypes {\n // DO NOT switch BTreeMap or BTreeSet out for an unsorted container type! That\n // would break dependency tracking for commandline arguments.\n #[derive(Clone, Hash)]\n-pub struct Externs(BTreeMap<String, BTreeSet<String>>);\n+pub struct Externs(BTreeMap<String, BTreeSet<Option<String>>>);\n \n impl Externs {\n-    pub fn new(data: BTreeMap<String, BTreeSet<String>>) -> Externs {\n+    pub fn new(data: BTreeMap<String, BTreeSet<Option<String>>>) -> Externs {\n         Externs(data)\n     }\n \n-    pub fn get(&self, key: &str) -> Option<&BTreeSet<String>> {\n+    pub fn get(&self, key: &str) -> Option<&BTreeSet<Option<String>>> {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<String>> {\n+    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<Option<String>>> {\n         self.0.iter()\n     }\n }\n@@ -2169,6 +2169,8 @@ pub fn build_session_options_and_crate_config(\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n \n+    let is_unstable_enabled = nightly_options::is_unstable_enabled(matches);\n+\n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n         \"crate-name\" => PrintRequest::CrateName,\n         \"file-names\" => PrintRequest::FileNames,\n@@ -2182,15 +2184,13 @@ pub fn build_session_options_and_crate_config(\n         \"tls-models\" => PrintRequest::TlsModels,\n         \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n         \"target-spec-json\" => {\n-            if nightly_options::is_unstable_enabled(matches) {\n+            if is_unstable_enabled {\n                 PrintRequest::TargetSpec\n             } else {\n                 early_error(\n                     error_format,\n-                    &format!(\n-                        \"the `-Z unstable-options` flag must also be passed to \\\n-                         enable the target-spec-json print option\"\n-                    ),\n+                    \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable the target-spec-json print option\",\n                 );\n             }\n         }\n@@ -2220,18 +2220,19 @@ pub fn build_session_options_and_crate_config(\n             Some(s) => s,\n             None => early_error(error_format, \"--extern value must not be empty\"),\n         };\n-        let location = match parts.next() {\n-            Some(s) => s,\n-            None => early_error(\n+        let location = parts.next().map(|s| s.to_string());\n+        if location.is_none() && !is_unstable_enabled {\n+            early_error(\n                 error_format,\n-                \"--extern value must be of the format `foo=bar`\",\n-            ),\n+                \"the `-Z unstable-options` flag must also be passed to \\\n+                 enable `--extern crate_name` without `=path`\",\n+            );\n         };\n \n         externs\n             .entry(name.to_string())\n             .or_default()\n-            .insert(location.to_string());\n+            .insert(location);\n     }\n \n     let crate_name = matches.opt_str(\"crate-name\");\n@@ -2687,33 +2688,33 @@ mod tests {\n         v1.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"e\"), String::from(\"f\")]),\n+                mk_set(vec![Some(String::from(\"e\")), Some(String::from(\"f\"))]),\n             ),\n         ]));\n \n         v2.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"e\"), String::from(\"f\")]),\n+                mk_set(vec![Some(String::from(\"e\")), Some(String::from(\"f\"))]),\n             ),\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n         ]));\n \n         v3.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"f\"), String::from(\"e\")]),\n+                mk_set(vec![Some(String::from(\"f\")), Some(String::from(\"e\"))]),\n             ),\n         ]));\n "}, {"sha": "6738267b5b8c809ef5f987b39d88c0ddce10bc6f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1247,7 +1247,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .collect(),\n             hir,\n             def_path_hash_to_def_id,\n-            queries: query::Queries::new(providers, on_disk_query_result_cache),\n+            queries: query::Queries::new(\n+                providers,\n+                extern_providers,\n+                on_disk_query_result_cache,\n+            ),\n             rcache: Lock::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),"}, {"sha": "25e72f462e680006634de0636a81e0e6e10b0181", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -692,10 +692,12 @@ macro_rules! define_queries_inner {\n         impl<$tcx> Queries<$tcx> {\n             pub fn new(\n                 providers: IndexVec<CrateNum, Providers<$tcx>>,\n+                fallback_extern_providers: Providers<$tcx>,\n                 on_disk_cache: OnDiskCache<'tcx>,\n             ) -> Self {\n                 Queries {\n                     providers,\n+                    fallback_extern_providers: Box::new(fallback_extern_providers),\n                     on_disk_cache,\n                     $($name: Lock::new(QueryCache::new())),*\n                 }\n@@ -818,7 +820,13 @@ macro_rules! define_queries_inner {\n             #[inline]\n             fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {\n-                    let provider = tcx.queries.providers[key.query_crate()].$name;\n+                    let provider = tcx.queries.providers.get(key.query_crate())\n+                        // HACK(eddyb) it's possible crates may be loaded after\n+                        // the query engine is created, and because crate loading\n+                        // is not yet integrated with the query engine, such crates\n+                        // would be be missing appropriate entries in `providers`.\n+                        .unwrap_or(&tcx.queries.fallback_extern_providers)\n+                        .$name;\n                     provider(tcx.global_tcx(), key)\n                 })\n             }\n@@ -899,6 +907,7 @@ macro_rules! define_queries_struct {\n             pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n \n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n+            fallback_extern_providers: Box<Providers<$tcx>>,\n \n             $($(#[$attr])*  $name: Lock<QueryCache<$tcx, queries::$name<$tcx>>>,)*\n         }"}, {"sha": "6eef2397f9c6ed9b0cb28e0bd0ca9048aed2c27d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 63, "deletions": 21, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -100,6 +100,18 @@ enum LoadResult {\n     Loaded(Library),\n }\n \n+enum LoadError<'a> {\n+    LocatorError(locator::Context<'a>),\n+}\n+\n+impl<'a> LoadError<'a> {\n+    fn report(self) -> ! {\n+        match self {\n+            LoadError::LocatorError(mut locate_ctxt) => locate_ctxt.report_errs(),\n+        }\n+    }\n+}\n+\n impl<'a> CrateLoader<'a> {\n     pub fn new(sess: &'a Session, cstore: &'a CStore, local_crate_name: &str) -> Self {\n         CrateLoader {\n@@ -132,7 +144,8 @@ impl<'a> CrateLoader<'a> {\n             // from the strings on the command line.\n             let source = &self.cstore.get_crate_data(cnum).source;\n             if let Some(locs) = self.sess.opts.externs.get(&*name.as_str()) {\n-                let found = locs.iter().any(|l| {\n+                // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n+                let found = locs.iter().filter_map(|l| l.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();\n                     source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n                     source.rlib.as_ref().map(|p| &p.0) == l.as_ref()\n@@ -267,16 +280,17 @@ impl<'a> CrateLoader<'a> {\n         (cnum, cmeta)\n     }\n \n-    fn resolve_crate(&mut self,\n-                     root: &Option<CratePaths>,\n-                     ident: Symbol,\n-                     name: Symbol,\n-                     hash: Option<&Svh>,\n-                     extra_filename: Option<&str>,\n-                     span: Span,\n-                     path_kind: PathKind,\n-                     mut dep_kind: DepKind)\n-                     -> (CrateNum, Lrc<cstore::CrateMetadata>) {\n+    fn resolve_crate<'b>(\n+        &'b mut self,\n+        root: &'b Option<CratePaths>,\n+        ident: Symbol,\n+        name: Symbol,\n+        hash: Option<&'b Svh>,\n+        extra_filename: Option<&'b str>,\n+        span: Span,\n+        path_kind: PathKind,\n+        mut dep_kind: DepKind,\n+    ) -> Result<(CrateNum, Lrc<cstore::CrateMetadata>), LoadError<'b>> {\n         info!(\"resolving crate `extern crate {} as {}`\", name, ident);\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             LoadResult::Previous(cnum)\n@@ -320,7 +334,7 @@ impl<'a> CrateLoader<'a> {\n                 };\n \n                 self.load(&mut proc_macro_locator)\n-            }).unwrap_or_else(|| locate_ctxt.report_errs())\n+            }).ok_or_else(move || LoadError::LocatorError(locate_ctxt))?\n         };\n \n         match result {\n@@ -332,10 +346,10 @@ impl<'a> CrateLoader<'a> {\n                 data.dep_kind.with_lock(|data_dep_kind| {\n                     *data_dep_kind = cmp::max(*data_dep_kind, dep_kind);\n                 });\n-                (cnum, data)\n+                Ok((cnum, data))\n             }\n             LoadResult::Loaded(library) => {\n-                self.register_crate(root, ident, span, library, dep_kind)\n+                Ok(self.register_crate(root, ident, span, library, dep_kind))\n             }\n         }\n     }\n@@ -440,7 +454,7 @@ impl<'a> CrateLoader<'a> {\n             let (local_cnum, ..) = self.resolve_crate(\n                 root, dep.name, dep.name, Some(&dep.hash), Some(&dep.extra_filename), span,\n                 PathKind::Dependency, dep_kind,\n-            );\n+            ).unwrap_or_else(|err| err.report());\n             local_cnum\n         })).collect()\n     }\n@@ -694,7 +708,8 @@ impl<'a> CrateLoader<'a> {\n \n         let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind);\n+            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind)\n+                .unwrap_or_else(|err| err.report());\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n@@ -802,7 +817,8 @@ impl<'a> CrateLoader<'a> {\n                 let dep_kind = DepKind::Explicit;\n                 let (_, data) =\n                     self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n-                                       PathKind::Crate, dep_kind);\n+                                       PathKind::Crate, dep_kind)\n+                        .unwrap_or_else(|err| err.report());\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n                 if !data.root.sanitizer_runtime {\n@@ -825,7 +841,8 @@ impl<'a> CrateLoader<'a> {\n             let dep_kind = DepKind::Implicit;\n             let (_, data) =\n                 self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n-                                   PathKind::Crate, dep_kind);\n+                                   PathKind::Crate, dep_kind)\n+                    .unwrap_or_else(|err| err.report());\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n             if !data.root.profiler_runtime {\n@@ -945,7 +962,8 @@ impl<'a> CrateLoader<'a> {\n                                                               None,\n                                                               DUMMY_SP,\n                                                               PathKind::Crate,\n-                                                              DepKind::Implicit);\n+                                                              DepKind::Implicit)\n+                            .unwrap_or_else(|err| err.report());\n                         self.sess.injected_allocator.set(Some(cnum));\n                         data\n                     })\n@@ -1102,7 +1120,7 @@ impl<'a> CrateLoader<'a> {\n                 let (cnum, ..) = self.resolve_crate(\n                     &None, item.ident.name, orig_name, None, None,\n                     item.span, PathKind::Crate, dep_kind,\n-                );\n+                ).unwrap_or_else(|err| err.report());\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n                 let path_len = definitions.def_path(def_id.index).data.len();\n@@ -1130,7 +1148,7 @@ impl<'a> CrateLoader<'a> {\n     ) -> CrateNum {\n         let cnum = self.resolve_crate(\n             &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n-        ).0;\n+        ).unwrap_or_else(|err| err.report()).0;\n \n         self.update_extern_crate(\n             cnum,\n@@ -1146,4 +1164,28 @@ impl<'a> CrateLoader<'a> {\n \n         cnum\n     }\n+\n+    pub fn maybe_process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> Option<CrateNum> {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).ok()?.0;\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Path,\n+                span,\n+                // to have the least priority in `update_extern_crate`\n+                path_len: usize::max_value(),\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        Some(cnum)\n+    }\n }"}, {"sha": "02207c63b34642ae7522391ffdda27ce2039db9b", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -438,7 +438,12 @@ impl<'a> Context<'a> {\n         if self.hash.is_none() {\n             self.should_match_name = false;\n             if let Some(s) = self.sess.opts.externs.get(&self.crate_name.as_str()) {\n-                return self.find_commandline_library(s.iter());\n+                // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n+                if s.iter().any(|l| l.is_some()) {\n+                    return self.find_commandline_library(\n+                        s.iter().filter_map(|l| l.as_ref()),\n+                    );\n+                }\n             }\n             self.should_match_name = true;\n         }"}, {"sha": "10dddfed6a577da4273dc4dada5b69b3cf070985", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1674,13 +1674,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         let mut extern_prelude: FxHashSet<Name> =\n             session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n-        if !attr::contains_name(&krate.attrs, \"no_core\") {\n-            if !attr::contains_name(&krate.attrs, \"no_std\") {\n-                extern_prelude.insert(Symbol::intern(\"std\"));\n-            } else {\n-                extern_prelude.insert(Symbol::intern(\"core\"));\n-            }\n-        }\n+\n+        // HACK(eddyb) this ignore the `no_{core,std}` attributes.\n+        // FIXME(eddyb) warn (elsewhere) if core/std is used with `no_{core,std}`.\n+        // if !attr::contains_name(&krate.attrs, \"no_core\") {\n+        // if !attr::contains_name(&krate.attrs, \"no_std\") {\n+        extern_prelude.insert(Symbol::intern(\"core\"));\n+        extern_prelude.insert(Symbol::intern(\"std\"));\n+        extern_prelude.insert(Symbol::intern(\"meta\"));\n \n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),\n@@ -1982,7 +1983,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                 \"access to extern crates through prelude is experimental\").emit();\n                 }\n \n-                let crate_root = self.load_extern_prelude_crate_if_needed(ident);\n+                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(&crate_root);\n \n                 let binding = (crate_root, ty::Visibility::Public,\n                                ident.span, Mark::root()).to_name_binding(self.arenas);\n@@ -2010,13 +2013,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n-    fn load_extern_prelude_crate_if_needed(&mut self, ident: Ident) -> Module<'a> {\n-        let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n-        let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-        self.populate_module_if_necessary(&crate_root);\n-        crate_root\n-    }\n-\n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n         if !module.expansion.is_descendant_of(span.ctxt().outer()) {\n@@ -4427,15 +4423,24 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if self.session.features_untracked().extern_prelude {\n             let extern_prelude_names = self.extern_prelude.clone();\n-            for &krate_name in extern_prelude_names.iter() {\n-                let krate_ident = Ident::with_empty_ctxt(krate_name);\n-                let external_prelude_module = self.load_extern_prelude_crate_if_needed(krate_ident);\n+            for &name in extern_prelude_names.iter() {\n+                let ident = Ident::with_empty_ctxt(name);\n+                match self.crate_loader.maybe_process_path_extern(name, ident.span) {\n+                    Some(crate_id) => {\n+                        let crate_root = self.get_module(DefId {\n+                            krate: crate_id,\n+                            index: CRATE_DEF_INDEX,\n+                        });\n+                        self.populate_module_if_necessary(&crate_root);\n \n-                suggestions.extend(\n-                    self.lookup_import_candidates_from_module(\n-                        lookup_name, namespace, external_prelude_module, krate_ident, &filter_fn\n-                    )\n-                );\n+                        suggestions.extend(\n+                            self.lookup_import_candidates_from_module(\n+                                lookup_name, namespace, crate_root, ident, &filter_fn\n+                            )\n+                        );\n+                    }\n+                    None => {}\n+                }\n             }\n         }\n "}, {"sha": "dc4a76db6926654ad3af964ed30f5eec4befeba5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -196,7 +196,11 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     }\n \n                     // Fall back to resolving to an external crate.\n-                    if !(ns == TypeNS && self.extern_prelude.contains(&ident.name)) {\n+                    if !(\n+                        ns == TypeNS &&\n+                        !ident.is_path_segment_keyword() &&\n+                        self.extern_prelude.contains(&ident.name)\n+                    ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n                     }\n@@ -211,7 +215,11 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     )\n                 {\n                     self.resolve_crate_root(ident)\n-                } else if ns == TypeNS && !ident.is_path_segment_keyword() {\n+                } else if\n+                    ns == TypeNS &&\n+                    !ident.is_path_segment_keyword() &&\n+                    self.extern_prelude.contains(&ident.name)\n+                {\n                     let crate_id =\n                         self.crate_loader.process_path_extern(ident.name, ident.span);\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n@@ -738,7 +746,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             // Currently imports can't resolve in non-module scopes,\n             // we only have canaries in them for future-proofing.\n             if external_crate.is_none() && results.module_scope.is_none() {\n-                return;\n+                continue;\n             }\n \n             {\n@@ -753,7 +761,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 let possible_resultions =\n                     1 + all_results.filter(|&def| def != first).count();\n                 if possible_resultions <= 1 {\n-                    return;\n+                    continue;\n                 }\n             }\n "}, {"sha": "73057b19016c6a6081095cec2216e44bb1e44879", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -609,16 +609,19 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n /// Extracts `--extern CRATE=PATH` arguments from `matches` and\n /// returns a map mapping crate names to their paths or else an\n /// error message.\n+// FIXME(eddyb) This shouldn't be duplicated with `rustc::session`.\n fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n-        let location = parts.next()\n-                                 .ok_or(\"--extern value must be of the format `foo=bar`\"\n-                                    .to_string())?;\n+        let location = parts.next().map(|s| s.to_string());\n+        if location.is_none() && !nightly_options::is_unstable_enabled(matches) {\n+            return Err(\"the `-Z unstable-options` flag must also be passed to \\\n+                        enable `--extern crate_name` without `=path`\".to_string());\n+        }\n         let name = name.to_string();\n-        externs.entry(name).or_default().insert(location.to_string());\n+        externs.entry(name).or_default().insert(location);\n     }\n     Ok(Externs::new(externs))\n }"}, {"sha": "6ffa6e9be937d134c91b661134d31a00b8603f18", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 81, "deletions": 119, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -81,7 +81,7 @@ const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in qu\n // to be used by rustc to compile tests in libtest\n pub mod test {\n     pub use {assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n-             Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n+             Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, ShouldPanic,\n              StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName,\n              TestOpts, TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk};\n }\n@@ -349,19 +349,12 @@ pub enum OutputFormat {\n     Json,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum RunIgnored {\n-    Yes,\n-    No,\n-    Only,\n-}\n-\n #[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n     pub filter: Option<String>,\n     pub filter_exact: bool,\n-    pub run_ignored: RunIgnored,\n+    pub run_ignored: bool,\n     pub run_tests: bool,\n     pub bench_benchmarks: bool,\n     pub logfile: Option<PathBuf>,\n@@ -380,7 +373,7 @@ impl TestOpts {\n             list: false,\n             filter: None,\n             filter_exact: false,\n-            run_ignored: RunIgnored::No,\n+            run_ignored: false,\n             run_tests: false,\n             bench_benchmarks: false,\n             logfile: None,\n@@ -399,8 +392,7 @@ pub type OptRes = Result<TestOpts, String>;\n \n fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n-    opts.optflag(\"\", \"include-ignored\", \"Run ignored and not ignored tests\")\n-        .optflag(\"\", \"ignored\", \"Run only ignored tests\")\n+    opts.optflag(\"\", \"ignored\", \"Run ignored tests\")\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n         .optflag(\"\", \"list\", \"List all tests and benchmarks\")\n@@ -499,8 +491,8 @@ Test Attributes:\n                      contain: #[should_panic(expected = \"foo\")].\n     #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n-                     normal test runs. Running with --ignored or --include-ignored will run\n-                     these tests.\"#,\n+                     normal test runs. Running with --ignored will run these\n+                     tests.\"#,\n         usage = options.usage(&message)\n     );\n }\n@@ -553,21 +545,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         None\n     };\n \n-    let include_ignored = matches.opt_present(\"include-ignored\");\n-    if !allow_unstable && include_ignored {\n-        return Some(Err(\n-            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into()\n-        ));\n-    }\n-\n-    let run_ignored = match (include_ignored, matches.opt_present(\"ignored\")) {\n-        (true, true) => return Some(Err(\n-            \"the options --include-ignored and --ignored are mutually exclusive\".into()\n-        )),\n-        (true, false) => RunIgnored::Yes,\n-        (false, true) => RunIgnored::Only,\n-        (false, false) => RunIgnored::No,\n-    };\n+    let run_ignored = matches.opt_present(\"ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n     let exact = matches.opt_present(\"exact\");\n     let list = matches.opt_present(\"list\");\n@@ -1319,36 +1297,55 @@ fn get_concurrency() -> usize {\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {\n     let mut filtered = tests;\n-    let matches_filter = |test: &TestDescAndFn, filter: &str| {\n-        let test_name = test.desc.name.as_slice();\n-\n-        match opts.filter_exact {\n-            true => test_name == filter,\n-            false => test_name.contains(filter),\n-        }\n-    };\n-\n     // Remove tests that don't match the test filter\n-    if let Some(ref filter) = opts.filter {\n-        filtered.retain(|test| matches_filter(test, filter));\n-    }\n+    filtered = match opts.filter {\n+        None => filtered,\n+        Some(ref filter) => filtered\n+            .into_iter()\n+            .filter(|test| {\n+                if opts.filter_exact {\n+                    test.desc.name.as_slice() == &filter[..]\n+                } else {\n+                    test.desc.name.as_slice().contains(&filter[..])\n+                }\n+            })\n+            .collect(),\n+    };\n \n     // Skip tests that match any of the skip filters\n-    filtered.retain(|test| {\n-        !opts.skip.iter().any(|sf| matches_filter(test, sf))\n-    });\n-\n-    // maybe unignore tests\n-    match opts.run_ignored {\n-        RunIgnored::Yes => {\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n-        },\n-        RunIgnored::Only => {\n-            filtered.retain(|test| test.desc.ignore);\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n+    filtered = filtered\n+        .into_iter()\n+        .filter(|t| {\n+            !opts.skip.iter().any(|sf| {\n+                if opts.filter_exact {\n+                    t.desc.name.as_slice() == &sf[..]\n+                } else {\n+                    t.desc.name.as_slice().contains(&sf[..])\n+                }\n+            })\n+        })\n+        .collect();\n+\n+    // Maybe pull out the ignored test and unignore them\n+    filtered = if !opts.run_ignored {\n+        filtered\n+    } else {\n+        fn filter(test: TestDescAndFn) -> Option<TestDescAndFn> {\n+            if test.desc.ignore {\n+                let TestDescAndFn { desc, testfn } = test;\n+                Some(TestDescAndFn {\n+                    desc: TestDesc {\n+                        ignore: false,\n+                        ..desc\n+                    },\n+                    testfn,\n+                })\n+            } else {\n+                None\n+            }\n         }\n-        RunIgnored::No => {}\n-    }\n+        filtered.into_iter().filter_map(filter).collect()\n+    };\n \n     // Sort the tests alphabetically\n     filtered.sort_by(|t1, t2| t1.desc.name.as_slice().cmp(t2.desc.name.as_slice()));\n@@ -1737,37 +1734,13 @@ pub mod bench {\n \n #[cfg(test)]\n mod tests {\n-    use test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n-               ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n-               TrFailedMsg, TrIgnored, TrOk};\n+    use test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, ShouldPanic,\n+               StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed, TrFailedMsg,\n+               TrIgnored, TrOk};\n     use std::sync::mpsc::channel;\n     use bench;\n     use Bencher;\n \n-\n-    fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n-        vec![\n-            TestDescAndFn {\n-                desc: TestDesc {\n-                    name: StaticTestName(\"1\"),\n-                    ignore: true,\n-                    should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n-                },\n-                testfn: DynTestFn(Box::new(move || {})),\n-            },\n-            TestDescAndFn {\n-                desc: TestDesc {\n-                    name: StaticTestName(\"2\"),\n-                    ignore: false,\n-                    should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n-                },\n-                testfn: DynTestFn(Box::new(move || {})),\n-            },\n-        ]\n-    }\n-\n     #[test]\n     pub fn do_not_run_ignored_tests() {\n         fn f() {\n@@ -1893,20 +1866,11 @@ mod tests {\n             \"filter\".to_string(),\n             \"--ignored\".to_string(),\n         ];\n-        let opts = parse_opts(&args).unwrap().unwrap();\n-        assert_eq!(opts.run_ignored, RunIgnored::Only);\n-    }\n-\n-    #[test]\n-    fn parse_include_ignored_flag() {\n-        let args = vec![\n-            \"progname\".to_string(),\n-            \"filter\".to_string(),\n-            \"-Zunstable-options\".to_string(),\n-            \"--include-ignored\".to_string(),\n-        ];\n-        let opts = parse_opts(&args).unwrap().unwrap();\n-        assert_eq!(opts.run_ignored, RunIgnored::Yes);\n+        let opts = match parse_opts(&args) {\n+            Some(Ok(o)) => o,\n+            _ => panic!(\"Malformed arg in parse_ignored_flag\"),\n+        };\n+        assert!((opts.run_ignored));\n     }\n \n     #[test]\n@@ -1916,33 +1880,35 @@ mod tests {\n \n         let mut opts = TestOpts::new();\n         opts.run_tests = true;\n-        opts.run_ignored = RunIgnored::Only;\n+        opts.run_ignored = true;\n \n-        let tests = one_ignored_one_unignored_test();\n+        let tests = vec![\n+            TestDescAndFn {\n+                desc: TestDesc {\n+                    name: StaticTestName(\"1\"),\n+                    ignore: true,\n+                    should_panic: ShouldPanic::No,\n+                    allow_fail: false,\n+                },\n+                testfn: DynTestFn(Box::new(move || {})),\n+            },\n+            TestDescAndFn {\n+                desc: TestDesc {\n+                    name: StaticTestName(\"2\"),\n+                    ignore: false,\n+                    should_panic: ShouldPanic::No,\n+                    allow_fail: false,\n+                },\n+                testfn: DynTestFn(Box::new(move || {})),\n+            },\n+        ];\n         let filtered = filter_tests(&opts, tests);\n \n         assert_eq!(filtered.len(), 1);\n         assert_eq!(filtered[0].desc.name.to_string(), \"1\");\n         assert!(!filtered[0].desc.ignore);\n     }\n \n-    #[test]\n-    pub fn run_include_ignored_option() {\n-        // When we \"--include-ignored\" tests, the ignore flag should be set to false on\n-        // all tests and no test filtered out\n-\n-        let mut opts = TestOpts::new();\n-        opts.run_tests = true;\n-        opts.run_ignored = RunIgnored::Yes;\n-\n-        let tests = one_ignored_one_unignored_test();\n-        let filtered = filter_tests(&opts, tests);\n-\n-        assert_eq!(filtered.len(), 2);\n-        assert!(!filtered[0].desc.ignore);\n-        assert!(!filtered[1].desc.ignore);\n-    }\n-\n     #[test]\n     pub fn exact_filter_match() {\n         fn tests() -> Vec<TestDescAndFn> {\n@@ -2050,9 +2016,7 @@ mod tests {\n             \"test::ignored_tests_result_in_ignored\".to_string(),\n             \"test::first_free_arg_should_be_a_filter\".to_string(),\n             \"test::parse_ignored_flag\".to_string(),\n-            \"test::parse_include_ignored_flag\".to_string(),\n             \"test::filter_for_ignored_option\".to_string(),\n-            \"test::run_include_ignored_option\".to_string(),\n             \"test::sort_tests\".to_string(),\n         ];\n         let tests = {\n@@ -2083,8 +2047,6 @@ mod tests {\n             \"test::first_free_arg_should_be_a_filter\".to_string(),\n             \"test::ignored_tests_result_in_ignored\".to_string(),\n             \"test::parse_ignored_flag\".to_string(),\n-            \"test::parse_include_ignored_flag\".to_string(),\n-            \"test::run_include_ignored_option\".to_string(),\n             \"test::sort_tests\".to_string(),\n         ];\n "}, {"sha": "2b931d89f1fec5dd0a13fbc99625b1c32d2ea79b", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,11 @@\n -include ../tools.mk\n \n all: extern_absolute_paths.rs extern_in_paths.rs krate2\n-\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018\n+\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018 \\\n+\t\t-Z unstable-options --extern krate2\n \tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n-\t$(RUSTC) extern_in_paths.rs -Zsave-analysis --edition=2018\n+\t$(RUSTC) extern_in_paths.rs -Zsave-analysis --edition=2018 \\\n+\t\t-Z unstable-options --extern krate2\n \tcat $(TMPDIR)/save-analysis/extern_in_paths.json | \"$(PYTHON)\" validate_json.py\n \n krate2: krate2.rs"}, {"sha": "f26392e82acbd59094a90c8bae12443848c91f67", "filename": "src/test/ui/issues/issue-52489.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Fissues%2Fissue-52489.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Fissues%2Fissue-52489.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52489.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // edition:2018\n // aux-build:issue-52489.rs\n+// compile-flags:--extern issue_52489\n \n use issue_52489;\n //~^ ERROR use of unstable library feature 'issue_52489_unstable'"}, {"sha": "b8c41d82643e838927cba76e8480796184b2ce6f", "filename": "src/test/ui/issues/issue-52489.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Fissues%2Fissue-52489.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Fissues%2Fissue-52489.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52489.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'issue_52489_unstable'\n-  --> $DIR/issue-52489.rs:14:5\n+  --> $DIR/issue-52489.rs:15:5\n    |\n LL | use issue_52489;\n    |     ^^^^^^^^^^^"}, {"sha": "499a322593c60353a1a10f4f0d30560dbfca3470", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/meta.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Tests that `meta` is whitelisted, even if the crate doesn't exist\n+// yet (i.e. it causes a different error than `not-whitelisted.rs`).\n+use meta; //~ ERROR can't find crate for `meta`\n+\n+fn main() {}"}, {"sha": "b8a9b54d26bca58883067ed51cd9ef7dffd18c53", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/meta.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fmeta.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,9 @@\n+error[E0463]: can't find crate for `meta`\n+  --> $DIR/meta.rs:15:5\n+   |\n+LL | use meta; //~ ERROR can't find crate for `meta`\n+   |     ^^^^ can't find crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "a259266420a1de9e6fa89e50a40f0cd03de4401b", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,6 @@\n \n // edition:2018\n \n-use xcrate::S; //~ ERROR can't find crate for `xcrate`\n+use xcrate::S; //~ ERROR unresolved import `xcrate`\n \n fn main() {}"}, {"sha": "1a8ceec5dac068ddd8a4bffbc2f7e16686910ce4", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `xcrate`\n+error[E0432]: unresolved import `xcrate`\n   --> $DIR/non-existent-1.rs:13:5\n    |\n-LL | use xcrate::S; //~ ERROR can't find crate for `xcrate`\n-   |     ^^^^^^ can't find crate\n+LL | use xcrate::S; //~ ERROR unresolved import `xcrate`\n+   |     ^^^^^^ Could not find `xcrate` in `{{root}}`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "41adb974f21760a685fdc23069cbbb7c09fccfd0", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -11,5 +11,6 @@\n // edition:2018\n \n fn main() {\n-    let s = ::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+    let s = ::xcrate::S;\n+    //~^ ERROR failed to resolve. Could not find `xcrate` in `{{root}}`\n }"}, {"sha": "b46576b01436784650a47092c6e8762f338dedcb", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `xcrate`\n+error[E0433]: failed to resolve. Could not find `xcrate` in `{{root}}`\n   --> $DIR/non-existent-2.rs:14:15\n    |\n-LL |     let s = ::xcrate::S; //~ ERROR can't find crate for `xcrate`\n-   |               ^^^^^^ can't find crate\n+LL |     let s = ::xcrate::S;\n+   |               ^^^^^^ Could not find `xcrate` in `{{root}}`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "0cbeb8cf50fe3db7704a73d4dea113d0797e518b", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,6 @@\n \n // edition:2018\n \n-use ycrate; //~ ERROR can't find crate for `ycrate`\n+use ycrate; //~ ERROR unresolved import `ycrate`\n \n fn main() {}"}, {"sha": "31486e14bd2a88da47b8d794b1323ff3cd4f68ac", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `ycrate`\n+error[E0432]: unresolved import `ycrate`\n   --> $DIR/non-existent-3.rs:13:5\n    |\n-LL | use ycrate; //~ ERROR can't find crate for `ycrate`\n-   |     ^^^^^^ can't find crate\n+LL | use ycrate; //~ ERROR unresolved import `ycrate`\n+   |     ^^^^^^ no `ycrate` external crate\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "f95961d2a9b56970c5204ddc6deaab9bce2ce750", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Tests that arbitrary crates (other than `core`, `std` and `meta`)\n+// aren't allowed without `--extern`, even if they're in the sysroot.\n+use alloc; //~ ERROR unresolved import `alloc`\n+use test; //~ ERROR unresolved import `test`\n+use proc_macro; //~ ERROR unresolved import `proc_macro`\n+\n+fn main() {}"}, {"sha": "0865bd6bea52a584d7388fdd70e65383f7a076e2", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,21 @@\n+error[E0432]: unresolved import `alloc`\n+  --> $DIR/not-whitelisted.rs:15:5\n+   |\n+LL | use alloc; //~ ERROR unresolved import `alloc`\n+   |     ^^^^^ no `alloc` external crate\n+\n+error[E0432]: unresolved import `test`\n+  --> $DIR/not-whitelisted.rs:16:5\n+   |\n+LL | use test; //~ ERROR unresolved import `test`\n+   |     ^^^^ no `test` external crate\n+\n+error[E0432]: unresolved import `proc_macro`\n+  --> $DIR/not-whitelisted.rs:17:5\n+   |\n+LL | use proc_macro; //~ ERROR unresolved import `proc_macro`\n+   |     ^^^^^^^^^^ no `proc_macro` external crate\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "b5b1485f662c58393f1d9ce73fb3f6a3491b9081", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n+// compile-flags:--extern xcrate\n // edition:2018\n \n use crate; //~ ERROR crate root imports need to be explicitly named: `use crate as name;`"}, {"sha": "b49291b9c0c61a0195299e097335c3abba2456f9", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/single-segment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,17 +1,17 @@\n error: crate root imports need to be explicitly named: `use crate as name;`\n-  --> $DIR/single-segment.rs:14:5\n+  --> $DIR/single-segment.rs:15:5\n    |\n LL | use crate; //~ ERROR crate root imports need to be explicitly named: `use crate as name;`\n    |     ^^^^^\n \n error: cannot glob-import all possible crates\n-  --> $DIR/single-segment.rs:15:5\n+  --> $DIR/single-segment.rs:16:5\n    |\n LL | use *; //~ ERROR cannot glob-import all possible crates\n    |     ^\n \n error[E0423]: expected value, found module `xcrate`\n-  --> $DIR/single-segment.rs:18:13\n+  --> $DIR/single-segment.rs:19:13\n    |\n LL |     let s = ::xcrate; //~ ERROR expected value, found module `xcrate`\n    |             ^^^^^^^^ not a value"}, {"sha": "c17e74c547c1840c0bfefb04b339d88d72693266", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,6 @@\n \n #![feature(extern_in_paths)]\n \n-use extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n \n fn main() {}"}, {"sha": "55b8b6255073ea6506c7fb90d2893879c8e38467", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `xcrate`\n+error[E0432]: unresolved import `extern::xcrate`\n   --> $DIR/non-existent-1.rs:13:13\n    |\n-LL | use extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n-   |             ^^^^^^ can't find crate\n+LL | use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n+   |             ^^^^^^ Could not find `xcrate` in `extern`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "128ecf41a303df83d2cd3fe1f315629a3cd9259a", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -11,5 +11,6 @@\n #![feature(extern_in_paths)]\n \n fn main() {\n-    let s = extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+    let s = extern::xcrate::S;\n+    //~^ ERROR failed to resolve. Could not find `xcrate` in `extern`\n }"}, {"sha": "7fbe50a92022b23661d1203295fddb2d56e00588", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `xcrate`\n+error[E0433]: failed to resolve. Could not find `xcrate` in `extern`\n   --> $DIR/non-existent-2.rs:14:21\n    |\n-LL |     let s = extern::xcrate::S; //~ ERROR can't find crate for `xcrate`\n-   |                     ^^^^^^ can't find crate\n+LL |     let s = extern::xcrate::S;\n+   |                     ^^^^^^ Could not find `xcrate` in `extern`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "350cca70487f3bc1332ef609e1fa2939f57fda9b", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,6 @@\n \n #![feature(extern_in_paths)]\n \n-use extern::ycrate; //~ ERROR can't find crate for `ycrate`\n+use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n \n fn main() {}"}, {"sha": "0a49d1721695bd364bf059810f8857916c09b58c", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,9 +1,9 @@\n-error[E0463]: can't find crate for `ycrate`\n-  --> $DIR/non-existent-3.rs:13:13\n+error[E0432]: unresolved import `extern::ycrate`\n+  --> $DIR/non-existent-3.rs:13:5\n    |\n-LL | use extern::ycrate; //~ ERROR can't find crate for `ycrate`\n-   |             ^^^^^^ can't find crate\n+LL | use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n+   |     ^^^^^^^^^^^^^^ no `ycrate` external crate\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0463`.\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "ea4488637031e316bf1135998992928107922fb2", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:xcrate.rs\n+// compile-flags:--extern xcrate\n \n #![feature(extern_in_paths)]\n "}, {"sha": "033bedb3b938b20ee746c9b54a0ff4e65dc3e81c", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,17 +1,17 @@\n error: cannot glob-import all possible crates\n-  --> $DIR/single-segment.rs:17:5\n+  --> $DIR/single-segment.rs:18:5\n    |\n LL | use extern::*; //~ ERROR cannot glob-import all possible crates\n    |     ^^^^^^^^^\n \n error[E0432]: unresolved import `extern`\n-  --> $DIR/single-segment.rs:15:5\n+  --> $DIR/single-segment.rs:16:5\n    |\n LL | use extern; //~ ERROR unresolved import `extern`\n    |     ^^^^^^ no `extern` in the root\n \n error[E0423]: expected value, found module `extern::xcrate`\n-  --> $DIR/single-segment.rs:20:13\n+  --> $DIR/single-segment.rs:21:13\n    |\n LL |     let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n    |             ^^^^^^^^^^^^^^ not a value"}, {"sha": "3d727e2ad1b56139fb8792246a902e817ae422c9", "filename": "src/test/ui/run-pass/issues/issue-52140/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52140%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52140%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52140%2Fmain.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:some_crate.rs\n+// compile-flags:--extern some_crate\n // edition:2018\n \n mod foo {"}, {"sha": "20705dc38e1aec1413a285769e51980abc4b7016", "filename": "src/test/ui/run-pass/issues/issue-52141/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52141%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52141%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52141%2Fmain.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:some_crate.rs\n+// compile-flags:--extern some_crate\n // edition:2018\n \n use some_crate as some_name;"}, {"sha": "00cb5ac103a9130709ffe15916ae8085cf9b2de0", "filename": "src/test/ui/run-pass/issues/issue-52705/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52705%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52705%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-52705%2Fmain.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:png2.rs\n+// compile-flags:--extern png2\n // edition:2018\n \n mod png {"}, {"sha": "b13602297a4af35a3934c24b7cb5e8447f0f1b2c", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:xcrate.rs\n+// compile-flags:--extern xcrate\n // edition:2018\n \n use xcrate::Z;"}, {"sha": "0d84ccc3d322155f352a679da655a317fd808ace", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-extern-absolute-paths/extern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:xcrate.rs\n+// compile-flags:--extern xcrate\n \n #![feature(extern_in_paths)]\n "}, {"sha": "dfd9fbd27746b0137a16aeabbff617bed84409a2", "filename": "src/test/ui/run-pass/rfcs/rfc-2126-extern-absolute-paths/whitelisted.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fwhitelisted.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// edition:2018\n+\n+// Tests that `core` and `std` are always available.\n+use core::iter;\n+use std::io;\n+// FIXME(eddyb) Add a `meta` crate to the distribution.\n+// use meta;\n+\n+fn main() {\n+    for _ in iter::once(()) {\n+        io::stdout();\n+    }\n+}"}, {"sha": "7d997fe493a7bc01b53ccf4c4f2d48e0d6e9a974", "filename": "src/test/ui/run-pass/uniform-paths/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Funiform-paths%2Fbasic.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     {\n         // Test that having `std_io` in a module scope and a non-module\n         // scope is allowed, when both resolve to the same definition.\n-        use std::io as std_io;\n+        use ::std::io as std_io;\n         use std_io::stdout;\n         stdout();\n     }"}, {"sha": "36a837509c50cb3ea79ef3e3d98407b5d1ca0823", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // aux-build:edition-lint-paths.rs\n // run-rustfix\n+// compile-flags:--extern edition_lint_paths\n // edition:2018\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,"}, {"sha": "9daa4145630b7b1d89f8f73444a90d266ab11243", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // aux-build:edition-lint-paths.rs\n // run-rustfix\n+// compile-flags:--extern edition_lint_paths\n // edition:2018\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,"}, {"sha": "b3afa2bd1d59289bb9c7ffd23a23829793436a7b", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,18 +1,18 @@\n error: unused extern crate\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:21:1\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:22:1\n    |\n LL | extern crate edition_lint_paths;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:18:9\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:19:9\n    |\n LL | #![deny(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n \n error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:24:1\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:25:1\n    |\n LL | extern crate edition_lint_paths as bar;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`"}, {"sha": "0be1f2cc72bb0eb9b1c4f22c43cc87e07e16db0d", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:edition-lint-paths.rs\n+// compile-flags:--extern edition_lint_paths\n // run-rustfix\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,"}, {"sha": "0be1f2cc72bb0eb9b1c4f22c43cc87e07e16db0d", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // aux-build:edition-lint-paths.rs\n+// compile-flags:--extern edition_lint_paths\n // run-rustfix\n \n // The \"normal case\". Ideally we would remove the `extern crate` here,"}, {"sha": "ee58d240fcb834616f092838f16c81bfdd84f19c", "filename": "src/test/ui/rust-2018/issue-54006.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+#![no_std]\n+#![crate_type = \"lib\"]\n+\n+use alloc::vec;\n+//~^ ERROR unresolved import `alloc`\n+\n+pub fn foo() {\n+    let mut xs = vec![];\n+    //~^ ERROR cannot determine resolution for the macro `vec`\n+    xs.push(0);\n+}"}, {"sha": "1183dc9794a223082329e60ff215a2638445a369", "filename": "src/test/ui/rust-2018/issue-54006.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,17 @@\n+error[E0432]: unresolved import `alloc`\n+  --> $DIR/issue-54006.rs:16:5\n+   |\n+LL | use alloc::vec;\n+   |     ^^^^^ Could not find `alloc` in `{{root}}`\n+\n+error: cannot determine resolution for the macro `vec`\n+  --> $DIR/issue-54006.rs:20:18\n+   |\n+LL |     let mut xs = vec![];\n+   |                  ^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "cdae815b200d5d19ea266391697aa446f0a2a7c5", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -12,6 +12,7 @@\n // edition:2018\n // compile-pass\n // aux-build:remove-extern-crate.rs\n+// compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n "}, {"sha": "4984da802c05bc98dd047a7e5b5a4aa5ae89b573", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -12,6 +12,7 @@\n // edition:2018\n // compile-pass\n // aux-build:remove-extern-crate.rs\n+// compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n "}, {"sha": "064a853625f743e7a95d5d9e3fca049fc05e7b23", "filename": "src/test/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1,24 +1,24 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:18:1\n+  --> $DIR/remove-extern-crate.rs:19:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/remove-extern-crate.rs:16:9\n+  --> $DIR/remove-extern-crate.rs:17:9\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:19:1\n+  --> $DIR/remove-extern-crate.rs:20:1\n    |\n LL | extern crate core as another_name;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:32:5\n+  --> $DIR/remove-extern-crate.rs:33:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^ help: convert it to a `use`"}, {"sha": "1f19a05d7a7f64eda0df0ca747ac4cf0fac55788", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/issue-54253.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Dummy import to introduce `uniform_paths` canaries.\n+use std;\n+\n+// fn version() -> &'static str {\"\"}\n+\n+mod foo {\n+    // Error wasn't reported, despite `version` being commented out above.\n+    use crate::version; //~ ERROR unresolved import `crate::version`\n+\n+    fn bar() {\n+        version();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6dcc451c60a6125c45150ba350febf7ca78fd3d2", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/issue-54253.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,9 @@\n+error[E0432]: unresolved import `crate::version`\n+  --> $DIR/issue-54253.rs:20:9\n+   |\n+LL |     use crate::version; //~ ERROR unresolved import `crate::version`\n+   |         ^^^^^^^^^^^^^^ no `version` in the root\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "7ca5c9e9eaefd00562bf24ccb4331af0ab2595aa", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54253.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+#![feature(uniform_paths)]\n+\n+// Dummy import to introduce `uniform_paths` canaries.\n+use std;\n+\n+// fn version() -> &'static str {\"\"}\n+\n+mod foo {\n+    // Error wasn't reported, despite `version` being commented out above.\n+    use crate::version; //~ ERROR unresolved import `crate::version`\n+\n+    fn bar() {\n+        version();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0016e21ef4d55a4a751c2cbe0c658e6cfadcd9a8", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54253.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ba1d41e3c2a66215943e43de70f93bb195b1f0/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -0,0 +1,9 @@\n+error[E0432]: unresolved import `crate::version`\n+  --> $DIR/issue-54253.rs:22:9\n+   |\n+LL |     use crate::version; //~ ERROR unresolved import `crate::version`\n+   |         ^^^^^^^^^^^^^^ no `version` in the root\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "183639b70bacf457920694d78a19cefe3565e1c0", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1 +1 @@\n-Subproject commit daa922393c7417dcee930a880c80668cda3e308a\n+Subproject commit 183639b70bacf457920694d78a19cefe3565e1c0"}, {"sha": "2b21611d38a16a775f55ea102d8f442dfc51cf6d", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "patch": "@@ -1 +1 @@\n-Subproject commit fa922de1e5e1f02b576b7a5aa6ded16935693ec5\n+Subproject commit 2b21611d38a16a775f55ea102d8f442dfc51cf6d"}]}