{"sha": "0a5138c75244ffc0bc639d3060566e8efc83748e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTEzOGM3NTI0NGZmYzBiYzYzOWQzMDYwNTY2ZThlZmM4Mzc0OGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-04T21:16:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-04T21:16:41Z"}, "message": "auto merge of #12667 : Kimundi/rust/any_improv, r=cmr\n\n- Added `TraitObject` representation to `std::raw`.\r\n- Added doc to `std::raw`.\r\n- Removed `Any::as_void_ptr()` and `Any::as_mut_void_ptr()`\r\n  methods as they are uneccessary now after the removal of\r\n  headers on owned boxes. This reduces the number of virtual calls needed from 2 to 1.\r\n- Made the `..Ext` implementations work directly with the repr of\r\n  a trait object.\r\n- Removed `Any`-related traits from the prelude.\r\n- Added bench.\r\n\r\nBench before/after:\r\n~~~\r\n7 ns/iter (+/- 0)\r\n4 ns/iter (+/- 0)\r\n~~~", "tree": {"sha": "1d6f2aa69b5fac73270b2ed5d803ff2a06646ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6f2aa69b5fac73270b2ed5d803ff2a06646ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5138c75244ffc0bc639d3060566e8efc83748e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5138c75244ffc0bc639d3060566e8efc83748e", "html_url": "https://github.com/rust-lang/rust/commit/0a5138c75244ffc0bc639d3060566e8efc83748e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5138c75244ffc0bc639d3060566e8efc83748e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15448c85a557a2b047e4ed94fb36000320cccb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15448c85a557a2b047e4ed94fb36000320cccb5", "html_url": "https://github.com/rust-lang/rust/commit/a15448c85a557a2b047e4ed94fb36000320cccb5"}, {"sha": "3158047a459b6d60d0f8f6bf5c299db0910e029a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3158047a459b6d60d0f8f6bf5c299db0910e029a", "html_url": "https://github.com/rust-lang/rust/commit/3158047a459b6d60d0f8f6bf5c299db0910e029a"}], "stats": {"total": 190, "additions": 70, "deletions": 120}, "files": [{"sha": "27ad3b9b91973f7b99c67d0fca42045edf126aaa", "filename": "src/libgreen/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibgreen%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibgreen%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsimple.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -11,6 +11,7 @@\n //! A small module implementing a simple \"runtime\" used for bootstrapping a rust\n //! scheduler pool and then interacting with it.\n \n+use std::any::Any;\n use std::cast;\n use std::rt::Runtime;\n use std::rt::local::Local;"}, {"sha": "47c1445fb2251a1c1df1717a7101dee26aed1f24", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -18,6 +18,7 @@\n //! contains the rust task itself in order to juggle around ownership of the\n //! values.\n \n+use std::any::Any;\n use std::cast;\n use std::rt::env;\n use std::rt::Runtime;"}, {"sha": "aa3afd4c1a5f3b3fa0a63dc6dcf57d8d749b2537", "filename": "src/libnative/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -14,6 +14,7 @@\n //! by rust tasks. This implements the necessary API traits laid out by std::rt\n //! in order to spawn new tasks and deschedule the current task.\n \n+use std::any::Any;\n use std::cast;\n use std::rt::env;\n use std::rt::local::Local;"}, {"sha": "33d26c49a9ae5fc1d91e123d4891240fa62a968d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -46,6 +46,7 @@ use middle::lint;\n \n use d = driver::driver;\n \n+use std::any::AnyRefExt;\n use std::cmp;\n use std::io;\n use std::os;"}, {"sha": "517f4e9ab69f98daf13dae2b97378128aa2447b6", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -2229,6 +2229,7 @@ mod tests {\n         B(~str)\n     }\n     fn check_err<T: Decodable<Decoder>>(to_parse: &'static str, expected_error: &str) {\n+        use std::any::AnyRefExt;\n         use std::task;\n         let res = task::try(proc() {\n             // either fails in `decode` (which is what we want), or"}, {"sha": "80ead34b68adbc59a2aae16825088073f8146236", "filename": "src/libstd/any.rs", "status": "modified", "additions": 39, "deletions": 117, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -20,9 +20,10 @@\n //! value. `~Any` adds the `move` method, which will unwrap a `~T` from the object.  See the\n //! extension traits (`*Ext`) for the full details.\n \n-use cast::transmute;\n+use cast::{transmute, transmute_copy};\n use fmt;\n use option::{Option, Some, None};\n+use raw::TraitObject;\n use result::{Result, Ok, Err};\n use intrinsics::TypeId;\n use intrinsics;\n@@ -39,34 +40,18 @@ pub enum Void { }\n pub trait Any {\n     /// Get the `TypeId` of `self`\n     fn get_type_id(&self) -> TypeId;\n-\n-    /// Get a void pointer to `self`\n-    fn as_void_ptr(&self) -> *Void;\n-\n-    /// Get a mutable void pointer to `self`\n-    fn as_mut_void_ptr(&mut self) -> *mut Void;\n }\n \n impl<T: 'static> Any for T {\n     /// Get the `TypeId` of `self`\n     fn get_type_id(&self) -> TypeId {\n         TypeId::of::<T>()\n     }\n-\n-    /// Get a void pointer to `self`\n-    fn as_void_ptr(&self) -> *Void {\n-        self as *T as *Void\n-    }\n-\n-    /// Get a mutable void pointer to `self`\n-    fn as_mut_void_ptr(&mut self) -> *mut Void {\n-        self as *mut T as *mut Void\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////////\n // Extension methods for Any trait objects.\n-// Implemented as three extension traits so that generics work.\n+// Implemented as three extension traits so that the methods can be generic.\n ///////////////////////////////////////////////////////////////////////////////\n \n /// Extension methods for a referenced `Any` trait object\n@@ -95,7 +80,13 @@ impl<'a> AnyRefExt<'a> for &'a Any {\n     #[inline]\n     fn as_ref<T: 'static>(self) -> Option<&'a T> {\n         if self.is::<T>() {\n-            Some(unsafe { transmute(self.as_void_ptr()) })\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject = transmute_copy(&self);\n+\n+                // Extract the data pointer\n+                Some(transmute(to.data))\n+            }\n         } else {\n             None\n         }\n@@ -113,7 +104,13 @@ impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     #[inline]\n     fn as_mut<T: 'static>(self) -> Option<&'a mut T> {\n         if self.is::<T>() {\n-            Some(unsafe { transmute(self.as_mut_void_ptr()) })\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject = transmute_copy(&self);\n+\n+                // Extract the data pointer\n+                Some(transmute(to.data))\n+            }\n         } else {\n             None\n         }\n@@ -132,13 +129,14 @@ impl AnyOwnExt for ~Any {\n     fn move<T: 'static>(self) -> Result<~T, ~Any> {\n         if self.is::<T>() {\n             unsafe {\n-                // Extract the pointer to the boxed value, temporary alias with self\n-                let ptr: ~T = transmute(self.as_void_ptr());\n+                // Get the raw representation of the trait object\n+                let to: TraitObject = transmute_copy(&self);\n \n                 // Prevent destructor on self being run\n                 intrinsics::forget(self);\n \n-                Ok(ptr)\n+                // Extract the data pointer\n+                Ok(transmute(to.data))\n             }\n         } else {\n             Err(self)\n@@ -172,100 +170,6 @@ mod tests {\n \n     static TEST: &'static str = \"Test\";\n \n-    #[test]\n-    fn any_as_void_ptr() {\n-        let (a, b, c) = (~5u as ~Any, ~TEST as ~Any, ~Test as ~Any);\n-        let a_r: &Any = a;\n-        let b_r: &Any = b;\n-        let c_r: &Any = c;\n-\n-        assert_eq!(a.as_void_ptr(), a_r.as_void_ptr());\n-        assert_eq!(b.as_void_ptr(), b_r.as_void_ptr());\n-        assert_eq!(c.as_void_ptr(), c_r.as_void_ptr());\n-\n-        let (a, b, c) = (&5u as &Any, &TEST as &Any, &Test as &Any);\n-        let a_r: &Any = a;\n-        let b_r: &Any = b;\n-        let c_r: &Any = c;\n-\n-        assert_eq!(a.as_void_ptr(), a_r.as_void_ptr());\n-        assert_eq!(b.as_void_ptr(), b_r.as_void_ptr());\n-        assert_eq!(c.as_void_ptr(), c_r.as_void_ptr());\n-\n-        let mut x = Test;\n-        let mut y: &'static str = \"Test\";\n-        let (a, b, c) = (&mut 5u as &mut Any,\n-                         &mut y as &mut Any,\n-                         &mut x as &mut Any);\n-        let a_r: &Any = a;\n-        let b_r: &Any = b;\n-        let c_r: &Any = c;\n-\n-        assert_eq!(a.as_void_ptr(), a_r.as_void_ptr());\n-        assert_eq!(b.as_void_ptr(), b_r.as_void_ptr());\n-        assert_eq!(c.as_void_ptr(), c_r.as_void_ptr());\n-\n-        let (a, b, c) = (5u, \"hello\", Test);\n-        let (a_r, b_r, c_r) = (&a as &Any, &b as &Any, &c as &Any);\n-\n-        assert_eq!(a.as_void_ptr(), a_r.as_void_ptr());\n-        assert_eq!(b.as_void_ptr(), b_r.as_void_ptr());\n-        assert_eq!(c.as_void_ptr(), c_r.as_void_ptr());\n-    }\n-\n-    #[test]\n-    fn any_as_mut_void_ptr() {\n-        let y: &'static str = \"Test\";\n-        let mut a = ~5u as ~Any;\n-        let mut b = ~y as ~Any;\n-        let mut c = ~Test as ~Any;\n-\n-        let a_ptr = a.as_mut_void_ptr();\n-        let b_ptr = b.as_mut_void_ptr();\n-        let c_ptr = c.as_mut_void_ptr();\n-\n-        let a_r: &mut Any = a;\n-        let b_r: &mut Any = b;\n-        let c_r: &mut Any = c;\n-\n-        assert_eq!(a_ptr, a_r.as_mut_void_ptr());\n-        assert_eq!(b_ptr, b_r.as_mut_void_ptr());\n-        assert_eq!(c_ptr, c_r.as_mut_void_ptr());\n-\n-        let mut x = Test;\n-        let mut y: &'static str = \"Test\";\n-        let a = &mut 5u as &mut Any;\n-        let b = &mut y as &mut Any;\n-        let c = &mut x as &mut Any;\n-\n-        let a_ptr = a.as_mut_void_ptr();\n-        let b_ptr = b.as_mut_void_ptr();\n-        let c_ptr = c.as_mut_void_ptr();\n-\n-        let a_r: &mut Any = a;\n-        let b_r: &mut Any = b;\n-        let c_r: &mut Any = c;\n-\n-        assert_eq!(a_ptr, a_r.as_mut_void_ptr());\n-        assert_eq!(b_ptr, b_r.as_mut_void_ptr());\n-        assert_eq!(c_ptr, c_r.as_mut_void_ptr());\n-\n-        let y: &'static str = \"Test\";\n-        let mut a = 5u;\n-        let mut b = y;\n-        let mut c = Test;\n-\n-        let a_ptr = a.as_mut_void_ptr();\n-        let b_ptr = b.as_mut_void_ptr();\n-        let c_ptr = c.as_mut_void_ptr();\n-\n-        let (a_r, b_r, c_r) = (&mut a as &mut Any, &mut b as &mut Any, &mut c as &mut Any);\n-\n-        assert_eq!(a_ptr, a_r.as_mut_void_ptr());\n-        assert_eq!(b_ptr, b_r.as_mut_void_ptr());\n-        assert_eq!(c_ptr, c_r.as_mut_void_ptr());\n-    }\n-\n     #[test]\n     fn any_referenced() {\n         let (a, b, c) = (&5u as &Any, &TEST as &Any, &Test as &Any);\n@@ -395,3 +299,21 @@ mod tests {\n         assert_eq!(format!(\"{}\", b), ~\"&Any\");\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    extern crate test;\n+\n+    use any::{Any, AnyRefExt};\n+    use option::Some;\n+    use self::test::BenchHarness;\n+\n+    #[bench]\n+    fn bench_as_ref(bh: &mut BenchHarness) {\n+        bh.iter(|| {\n+            let mut x = 0; let mut y = &mut x as &mut Any;\n+            test::black_box(&mut y);\n+            test::black_box(y.as_ref::<int>() == Some(&0));\n+        });\n+    }\n+}"}, {"sha": "19848f650973f651f4b1ac0e0d477ee6c2c52085", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -35,7 +35,6 @@ pub use mem::drop;\n \n // Reexported types and traits\n \n-pub use any::{Any, AnyOwnExt, AnyRefExt, AnyMutRefExt};\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, IntoBytes};\n pub use c_str::ToCStr;\n pub use char::Char;"}, {"sha": "94ad268f512061dce4b8151cffde94bee3b00c58", "filename": "src/libstd/raw.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibstd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fraw.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -10,6 +10,13 @@\n \n #[allow(missing_doc)];\n \n+//! Contains struct definitions for the layout of compiler built-in types.\n+//!\n+//! They can be used as targets of transmutes in unsafe code for manipulating\n+//! the raw representations directly.\n+//!\n+//! Their definitition should always match the ABI defined in `rustc::back::abi`.\n+\n use cast;\n \n /// The representation of a Rust managed box\n@@ -49,13 +56,22 @@ pub struct Procedure {\n     env: *(),\n }\n \n+/// The representation of a Rust trait object.\n+///\n+/// This struct does not have a `Repr` implementation\n+/// because there is no way to refer to all trait objects generically.\n+pub struct TraitObject {\n+    vtable: *(),\n+    data: *(),\n+}\n+\n /// This trait is meant to map equivalences between raw structs and their\n /// corresponding rust values.\n pub trait Repr<T> {\n     /// This function \"unwraps\" a rust value (without consuming it) into its raw\n     /// struct representation. This can be used to read/write different values\n     /// for the struct. This is a safe method because by default it does not\n-    /// give write-access to the struct returned.\n+    /// enable write-access to the fields of the return value in safe code.\n     #[inline]\n     fn repr(&self) -> T { unsafe { cast::transmute_copy(self) } }\n }"}, {"sha": "9fe585c263fb024ca1e0747b72dc64794c47411b", "filename": "src/libsync/sync/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibsync%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Flibsync%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmod.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -976,6 +976,8 @@ mod tests {\n     }\n     #[test]\n     fn test_mutex_killed_simple() {\n+        use std::any::Any;\n+\n         // Mutex must get automatically unlocked if failed/killed within.\n         let m = Mutex::new();\n         let m2 = m.clone();\n@@ -992,6 +994,8 @@ mod tests {\n     #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn test_mutex_killed_cond() {\n+        use std::any::Any;\n+\n         // Getting killed during cond wait must not corrupt the mutex while\n         // unwinding (e.g. double unlock).\n         let m = Mutex::new();\n@@ -1019,6 +1023,7 @@ mod tests {\n     #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn test_mutex_killed_broadcast() {\n+        use std::any::Any;\n         use std::unstable::finally::Finally;\n \n         let m = Mutex::new();\n@@ -1329,6 +1334,8 @@ mod tests {\n     }\n     #[cfg(test)]\n     fn rwlock_kill_helper(mode1: RWLockMode, mode2: RWLockMode) {\n+        use std::any::Any;\n+\n         // Mutex must get automatically unlocked if failed/killed within.\n         let x = RWLock::new();\n         let x2 = x.clone();"}, {"sha": "9bedd8c8cc82be257a6ad217618c0982013cefc8", "filename": "src/test/run-fail/fail-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Ftest%2Frun-fail%2Ffail-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Ftest%2Frun-fail%2Ffail-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-any.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:failed at '~Any'\n \n fn main() {\n-    fail!(~413 as ~Any);\n+    fail!(~413 as ~::std::any::Any);\n }"}, {"sha": "29dbe35752aa130b64c91337d54493b3304542d5", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5138c75244ffc0bc639d3060566e8efc83748e/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=0a5138c75244ffc0bc639d3060566e8efc83748e", "patch": "@@ -10,6 +10,7 @@\n \n // Make sure the destructor is run for unit-like structs.\n \n+use std::any::AnyOwnExt;\n use std::task;\n \n struct Foo;"}]}