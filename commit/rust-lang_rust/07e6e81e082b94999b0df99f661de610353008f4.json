{"sha": "07e6e81e082b94999b0df99f661de610353008f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTZlODFlMDgyYjk0OTk5YjBkZjk5ZjY2MWRlNjEwMzUzMDA4ZjQ=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-22T08:59:18Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-24T18:48:48Z"}, "message": "Extract error reporting into its own fn", "tree": {"sha": "75c4b1cf46415665e02663f39e493d0d2be00616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c4b1cf46415665e02663f39e493d0d2be00616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e6e81e082b94999b0df99f661de610353008f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e6e81e082b94999b0df99f661de610353008f4", "html_url": "https://github.com/rust-lang/rust/commit/07e6e81e082b94999b0df99f661de610353008f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e6e81e082b94999b0df99f661de610353008f4/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490189634b656dcca9e41e6b52093569c03bd4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df", "html_url": "https://github.com/rust-lang/rust/commit/490189634b656dcca9e41e6b52093569c03bd4df"}], "stats": {"total": 148, "additions": 85, "deletions": 63}, "files": [{"sha": "582cce3d3d8087f63bb880b84d8a8630e68a647b", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 85, "deletions": 63, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/07e6e81e082b94999b0df99f661de610353008f4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e6e81e082b94999b0df99f661de610353008f4/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=07e6e81e082b94999b0df99f661de610353008f4", "patch": "@@ -299,11 +299,10 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &impl_sig);\n-        let impl_args = impl_sig.inputs.clone();\n         let impl_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: impl_m.fty.unsafety,\n             abi: impl_m.fty.abi,\n-            sig: ty::Binder(impl_sig)\n+            sig: ty::Binder(impl_sig.clone())\n         }));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n@@ -318,11 +317,10 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &trait_sig);\n-        let trait_args = trait_sig.inputs.clone();\n         let trait_fty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n             unsafety: trait_m.fty.unsafety,\n             abi: trait_m.fty.abi,\n-            sig: ty::Binder(trait_sig)\n+            sig: ty::Binder(trait_sig.clone())\n         }));\n \n         debug!(\"compare_impl_method: trait_fty={:?}\", trait_fty);\n@@ -332,65 +330,9 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                    impl_fty,\n                    trait_fty);\n \n-            let impl_m_iter = match tcx.map.expect_impl_item(impl_m_node_id).node {\n-                ImplItemKind::Method(ref impl_m_sig, _) => impl_m_sig.decl.inputs.iter(),\n-                _ => bug!(\"{:?} is not a method\", impl_m)\n-            };\n-\n-            let (impl_err_span, trait_err_span) = match terr {\n-                TypeError::Mutability => {\n-                    if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n-                        let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n-                            TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n-                                trait_m_sig.decl.inputs.iter(),\n-                            _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n-                        };\n-\n-                        impl_m_iter.zip(trait_m_iter).find(|&(ref impl_arg, ref trait_arg)| {\n-                            match (&impl_arg.ty.node, &trait_arg.ty.node) {\n-                                (&Ty_::TyRptr(_, ref impl_mt), &Ty_::TyRptr(_, ref trait_mt)) |\n-                                (&Ty_::TyPtr(ref impl_mt), &Ty_::TyPtr(ref trait_mt)) =>\n-                                    impl_mt.mutbl != trait_mt.mutbl,\n-                                _ => false\n-                            }\n-                        }).map(|(ref impl_arg, ref trait_arg)| {\n-                            match (impl_arg.to_self(), trait_arg.to_self()) {\n-                                (Some(impl_self), Some(trait_self)) =>\n-                                    (impl_self.span, Some(trait_self.span)),\n-                                (None, None) => (impl_arg.ty.span, Some(trait_arg.ty.span)),\n-                                _ => bug!(\"impl and trait fns have different first args, \\\n-                                           impl: {:?}, trait: {:?}\", impl_arg, trait_arg)\n-                            }\n-                        }).unwrap_or((origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n-                    } else {\n-                        (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n-                    }\n-                }\n-                TypeError::Sorts(ExpectedFound { expected, found }) => {\n-                    if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n-                        let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n-                            TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n-                                trait_m_sig.decl.inputs.iter(),\n-                            _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n-                        };\n-                        let impl_iter = impl_args.iter();\n-                        let trait_iter = trait_args.iter();\n-                        let arg_idx = impl_iter.zip(trait_iter)\n-                                               .position(|(impl_arg_ty, trait_arg_ty)| {\n-                                                *impl_arg_ty == found && *trait_arg_ty == expected\n-                                               }).unwrap();\n-                        impl_m_iter.zip(trait_m_iter)\n-                                   .nth(arg_idx)\n-                                   .map(|(impl_arg, trait_arg)|\n-                                        (impl_arg.ty.span, Some(trait_arg.ty.span)))\n-                                   .unwrap_or(\n-                                    (origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n-                    } else {\n-                        (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n-                    }\n-                }\n-                _ => (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n-            };\n+            let (impl_err_span, trait_err_span) =\n+                extract_spans_for_error_reporting(&infcx, &terr, origin, impl_m,\n+                    impl_sig, trait_m, trait_sig);\n \n             let origin = TypeOrigin::MethodCompatCheck(impl_err_span);\n \n@@ -478,6 +420,86 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n         return true;\n     }\n+\n+    fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n+                                                         terr: &TypeError,\n+                                                         origin: TypeOrigin,\n+                                                         impl_m: &ty::Method,\n+                                                         impl_sig: ty::FnSig<'tcx>,\n+                                                         trait_m: &ty::Method,\n+                                                         trait_sig: ty::FnSig<'tcx>)\n+                                                        -> (Span, Option<Span>) {\n+        let tcx = infcx.tcx;\n+        let impl_m_node_id = tcx.map.as_local_node_id(impl_m.def_id).unwrap();\n+        let (impl_m_output, impl_m_iter) = match tcx.map.expect_impl_item(impl_m_node_id).node {\n+            ImplItemKind::Method(ref impl_m_sig, _) =>\n+                (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter()),\n+            _ => bug!(\"{:?} is not a method\", impl_m)\n+        };\n+\n+        match *terr {\n+            TypeError::Mutability => {\n+                if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n+                    let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n+                        TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n+                            trait_m_sig.decl.inputs.iter(),\n+                        _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n+                    };\n+\n+                    impl_m_iter.zip(trait_m_iter).find(|&(ref impl_arg, ref trait_arg)| {\n+                        match (&impl_arg.ty.node, &trait_arg.ty.node) {\n+                            (&Ty_::TyRptr(_, ref impl_mt), &Ty_::TyRptr(_, ref trait_mt)) |\n+                            (&Ty_::TyPtr(ref impl_mt), &Ty_::TyPtr(ref trait_mt)) =>\n+                                impl_mt.mutbl != trait_mt.mutbl,\n+                            _ => false\n+                        }\n+                    }).map(|(ref impl_arg, ref trait_arg)| {\n+                        match (impl_arg.to_self(), trait_arg.to_self()) {\n+                            (Some(impl_self), Some(trait_self)) =>\n+                                (impl_self.span, Some(trait_self.span)),\n+                            (None, None) => (impl_arg.ty.span, Some(trait_arg.ty.span)),\n+                            _ => bug!(\"impl and trait fns have different first args, \\\n+                                       impl: {:?}, trait: {:?}\", impl_arg, trait_arg)\n+                        }\n+                    }).unwrap_or((origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n+                } else {\n+                    (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                }\n+            }\n+            TypeError::Sorts(ExpectedFound { .. }) => {\n+                if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n+                    let (trait_m_output, trait_m_iter) =\n+                    match tcx.map.expect_trait_item(trait_m_node_id).node {\n+                        TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n+                            (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter()),\n+                        _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n+                    };\n+\n+                    let impl_iter = impl_sig.inputs.iter();\n+                    let trait_iter = trait_sig.inputs.iter();\n+                    impl_iter.zip(trait_iter).zip(impl_m_iter).zip(trait_m_iter)\n+                        .filter_map(|(((impl_arg_ty, trait_arg_ty), impl_arg), trait_arg)| {\n+                            match infcx.sub_types(true, origin, trait_arg_ty, impl_arg_ty) {\n+                                Ok(_) => None,\n+                                Err(_) => Some((impl_arg.ty.span, Some(trait_arg.ty.span)))\n+                            }\n+                        })\n+                        .next()\n+                        .unwrap_or_else(|| {\n+                            if infcx.sub_types(false, origin, impl_sig.output,\n+                                               trait_sig.output).is_err() {\n+                                (impl_m_output.span(), Some(trait_m_output.span()))\n+                            } else {\n+                                (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                            }\n+                        })\n+                } else {\n+                    (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                }\n+            }\n+            _ => (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+        }\n+    }\n }\n \n pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,"}]}