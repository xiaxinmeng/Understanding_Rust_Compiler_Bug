{"sha": "f10e591de1d321b57af68502a78eef6f8f80c05c", "node_id": "C_kwDOAAsO6NoAKGYxMGU1OTFkZTFkMzIxYjU3YWY2ODUwMmE3OGVlZjZmOGY4MGMwNWM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-06-24T04:13:36Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-29T15:55:01Z"}, "message": "Fix wrapping pointer arithmetic", "tree": {"sha": "24b0f1ae17e9febd73d0a5c33b8493320a89bf23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b0f1ae17e9febd73d0a5c33b8493320a89bf23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10e591de1d321b57af68502a78eef6f8f80c05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10e591de1d321b57af68502a78eef6f8f80c05c", "html_url": "https://github.com/rust-lang/rust/commit/f10e591de1d321b57af68502a78eef6f8f80c05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10e591de1d321b57af68502a78eef6f8f80c05c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3c599ba29e46fd7011cf1f01ec6c4cfda395cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3c599ba29e46fd7011cf1f01ec6c4cfda395cf", "html_url": "https://github.com/rust-lang/rust/commit/6b3c599ba29e46fd7011cf1f01ec6c4cfda395cf"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "d10bd1481d06db27e9b6bfda1107d3f1531e88ff", "filename": "crates/core_simd/src/elements/const_ptr.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fconst_ptr.rs?ref=f10e591de1d321b57af68502a78eef6f8f80c05c", "patch": "@@ -1,11 +1,14 @@\n use super::sealed::Sealed;\n-use crate::simd::{LaneCount, Mask, Simd, SimdPartialEq, SupportedLaneCount};\n+use crate::simd::{intrinsics, LaneCount, Mask, Simd, SimdPartialEq, SupportedLaneCount};\n \n /// Operations on SIMD vectors of constant pointers.\n pub trait SimdConstPtr: Copy + Sealed {\n-    /// Vector of usize with the same number of lanes.\n+    /// Vector of `usize` with the same number of lanes.\n     type Usize;\n \n+    /// Vector of `isize` with the same number of lanes.\n+    type Isize;\n+\n     /// Vector of mutable pointers to the same type.\n     type MutPtr;\n \n@@ -23,10 +26,20 @@ pub trait SimdConstPtr: Copy + Sealed {\n     /// Equivalent to calling [`pointer::addr`] on each lane.\n     fn addr(self) -> Self::Usize;\n \n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    ///\n+    /// Equivalent to calling [`pointer::wrapping_offset`] on each lane.\n+    fn wrapping_offset(self, offset: Self::Isize) -> Self;\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     ///\n     /// Equivalent to calling [`pointer::wrapping_add`] on each lane.\n     fn wrapping_add(self, count: Self::Usize) -> Self;\n+\n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    ///\n+    /// Equivalent to calling [`pointer::wrapping_add`] on each lane.\n+    fn wrapping_sub(self, count: Self::Usize) -> Self;\n }\n \n impl<T, const LANES: usize> Sealed for Simd<*const T, LANES> where\n@@ -39,6 +52,7 @@ where\n     LaneCount<LANES>: SupportedLaneCount,\n {\n     type Usize = Simd<usize, LANES>;\n+    type Isize = Simd<isize, LANES>;\n     type MutPtr = Simd<*mut T, LANES>;\n     type Mask = Mask<isize, LANES>;\n \n@@ -57,10 +71,19 @@ where\n         self.cast()\n     }\n \n+    #[inline]\n+    fn wrapping_offset(self, count: Self::Isize) -> Self {\n+        // Safety: simd_arith_offset takes a vector of pointers and a vector of offsets\n+        unsafe { intrinsics::simd_arith_offset(self, count) }\n+    }\n+\n     #[inline]\n     fn wrapping_add(self, count: Self::Usize) -> Self {\n-        let addr = self.addr() + (count * Simd::splat(core::mem::size_of::<T>()));\n-        // Safety: transmuting usize to pointers is safe, even if accessing those pointers isn't.\n-        unsafe { core::mem::transmute_copy(&addr) }\n+        self.wrapping_offset(count.cast())\n+    }\n+\n+    #[inline]\n+    fn wrapping_sub(self, count: Self::Usize) -> Self {\n+        self.wrapping_offset(-count.cast::<isize>())\n     }\n }"}, {"sha": "4fc6202e14ef059e297ddb1c95a187afe1868179", "filename": "crates/core_simd/src/elements/mut_ptr.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fmut_ptr.rs?ref=f10e591de1d321b57af68502a78eef6f8f80c05c", "patch": "@@ -1,11 +1,14 @@\n use super::sealed::Sealed;\n-use crate::simd::{LaneCount, Mask, Simd, SimdPartialEq, SupportedLaneCount};\n+use crate::simd::{intrinsics, LaneCount, Mask, Simd, SimdPartialEq, SupportedLaneCount};\n \n /// Operations on SIMD vectors of mutable pointers.\n pub trait SimdMutPtr: Copy + Sealed {\n-    /// Vector of usize with the same number of lanes.\n+    /// Vector of `usize` with the same number of lanes.\n     type Usize;\n \n+    /// Vector of `isize` with the same number of lanes.\n+    type Isize;\n+\n     /// Vector of constant pointers to the same type.\n     type ConstPtr;\n \n@@ -23,10 +26,20 @@ pub trait SimdMutPtr: Copy + Sealed {\n     /// Equivalent to calling [`pointer::addr`] on each lane.\n     fn addr(self) -> Self::Usize;\n \n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    ///\n+    /// Equivalent to calling [`pointer::wrapping_offset`] on each lane.\n+    fn wrapping_offset(self, offset: Self::Isize) -> Self;\n+\n     /// Calculates the offset from a pointer using wrapping arithmetic.\n     ///\n     /// Equivalent to calling [`pointer::wrapping_add`] on each lane.\n     fn wrapping_add(self, count: Self::Usize) -> Self;\n+\n+    /// Calculates the offset from a pointer using wrapping arithmetic.\n+    ///\n+    /// Equivalent to calling [`pointer::wrapping_add`] on each lane.\n+    fn wrapping_sub(self, count: Self::Usize) -> Self;\n }\n \n impl<T, const LANES: usize> Sealed for Simd<*mut T, LANES> where LaneCount<LANES>: SupportedLaneCount\n@@ -37,6 +50,7 @@ where\n     LaneCount<LANES>: SupportedLaneCount,\n {\n     type Usize = Simd<usize, LANES>;\n+    type Isize = Simd<isize, LANES>;\n     type ConstPtr = Simd<*const T, LANES>;\n     type Mask = Mask<isize, LANES>;\n \n@@ -55,10 +69,19 @@ where\n         self.cast()\n     }\n \n+    #[inline]\n+    fn wrapping_offset(self, count: Self::Isize) -> Self {\n+        // Safety: simd_arith_offset takes a vector of pointers and a vector of offsets\n+        unsafe { intrinsics::simd_arith_offset(self, count) }\n+    }\n+\n     #[inline]\n     fn wrapping_add(self, count: Self::Usize) -> Self {\n-        let addr = self.addr() + (count * Simd::splat(core::mem::size_of::<T>()));\n-        // Safety: transmuting usize to pointers is safe, even if accessing those pointers isn't.\n-        unsafe { core::mem::transmute_copy(&addr) }\n+        self.wrapping_offset(count.cast())\n+    }\n+\n+    #[inline]\n+    fn wrapping_sub(self, count: Self::Usize) -> Self {\n+        self.wrapping_offset(-count.cast::<isize>())\n     }\n }"}, {"sha": "41128cd148196ce4a0c5c66ab71b8cdf5a06920a", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=f10e591de1d321b57af68502a78eef6f8f80c05c", "patch": "@@ -151,4 +151,7 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_select<M, T>(m: M, yes: T, no: T) -> T;\n     #[allow(unused)]\n     pub(crate) fn simd_select_bitmask<M, T>(m: M, yes: T, no: T) -> T;\n+\n+    // equivalent to wrapping_offset\n+    pub(crate) fn simd_arith_offset<T, U>(ptr: T, offset: U) -> T;\n }"}, {"sha": "2c20362119ef601b247bffd7729c3b4a0e0c9997", "filename": "crates/core_simd/tests/pointers.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Ftests%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10e591de1d321b57af68502a78eef6f8f80c05c/crates%2Fcore_simd%2Ftests%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fpointers.rs?ref=f10e591de1d321b57af68502a78eef6f8f80c05c", "patch": "@@ -21,13 +21,29 @@ macro_rules! common_tests {\n                 );\n             }\n \n+            fn wrapping_offset<const LANES: usize>() {\n+                test_helpers::test_binary_elementwise(\n+                    &Simd::<*$constness (), LANES>::wrapping_offset,\n+                    &<*$constness ()>::wrapping_offset,\n+                    &|_, _| true,\n+                );\n+            }\n+\n             fn wrapping_add<const LANES: usize>() {\n                 test_helpers::test_binary_elementwise(\n                     &Simd::<*$constness (), LANES>::wrapping_add,\n                     &<*$constness ()>::wrapping_add,\n                     &|_, _| true,\n                 );\n             }\n+\n+            fn wrapping_sub<const LANES: usize>() {\n+                test_helpers::test_binary_elementwise(\n+                    &Simd::<*$constness (), LANES>::wrapping_sub,\n+                    &<*$constness ()>::wrapping_sub,\n+                    &|_, _| true,\n+                );\n+            }\n         }\n     }\n }"}]}