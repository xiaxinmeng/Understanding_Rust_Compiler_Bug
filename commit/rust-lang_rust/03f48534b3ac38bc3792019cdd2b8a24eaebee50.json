{"sha": "03f48534b3ac38bc3792019cdd2b8a24eaebee50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjQ4NTM0YjNhYzM4YmMzNzkyMDE5Y2RkMmI4YTI0ZWFlYmVlNTA=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-13T20:15:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:39Z"}, "message": "shootout-mandlebrot: calculate two bits of the result per inner loop, +10-15%", "tree": {"sha": "56135a5eb6547772d7a1b8d13bd8b0d96cf28acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56135a5eb6547772d7a1b8d13bd8b0d96cf28acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f48534b3ac38bc3792019cdd2b8a24eaebee50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f48534b3ac38bc3792019cdd2b8a24eaebee50", "html_url": "https://github.com/rust-lang/rust/commit/03f48534b3ac38bc3792019cdd2b8a24eaebee50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f48534b3ac38bc3792019cdd2b8a24eaebee50/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bee7b05d59467bc6304b32eb14e617c2efbfc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bee7b05d59467bc6304b32eb14e617c2efbfc9", "html_url": "https://github.com/rust-lang/rust/commit/a7bee7b05d59467bc6304b32eb14e617c2efbfc9"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "5302bd1dd6312b98c22c56347d1f69f0ae7b3bf8", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/03f48534b3ac38bc3792019cdd2b8a24eaebee50/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f48534b3ac38bc3792019cdd2b8a24eaebee50/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=03f48534b3ac38bc3792019cdd2b8a24eaebee50", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(macro_rules)]\n \n // ignore-pretty very bad with line comments\n \n@@ -18,41 +19,72 @@ use sync::Future;\n static ITER: int = 50;\n static LIMIT: f64 = 2.0;\n \n+macro_rules! core_loop(\n+    ($pow:expr ~ $mask:expr: $ctx:ident, $b:ident) => (\n+        {\n+            let r = $ctx.r;\n+            let i = $ctx.i;\n+\n+            $ctx.r = r * r - i * i + $ctx.init_r;\n+            $ctx.i = 2.0 * r * i + $ctx.init_i;\n+\n+            if r * r + i * i > LIMIT * LIMIT {\n+                $b |= $pow;\n+                if $b == $mask { break; }\n+            }\n+        }\n+    );\n+)\n+\n+#[inline(always)]\n fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n+    struct Context { r: f64, i: f64, init_i: f64, init_r: f64 }\n+    impl Context {\n+        #[inline(always)]\n+        fn new(i: f64, r: f64) -> Context {\n+            Context { r: r, i: i, init_r: r, init_i: i }\n+        }\n+    }\n+\n+    let mut cur_byte;\n+    let mut i;\n+    let mut bit_1;\n+    let mut bit_2;\n+    let mut b;\n     for chunk_init_r in vec_init_r.chunks(8) {\n-        let mut cur_byte = 0xff;\n-        let mut cur_bitmask = 0x80;\n-        for &init_r in chunk_init_r.iter() {\n-            let mut cur_r = init_r;\n-            let mut cur_i = init_i;\n+        cur_byte = 0xff;\n+        i = 0;\n+\n+        while i < 8 {\n+            bit_1 = Context::new(init_i, chunk_init_r[i]);\n+            bit_2 = Context::new(init_i, chunk_init_r[i + 1]);\n+\n+            b = 0;\n             for _ in range(0, ITER) {\n-                let r = cur_r;\n-                let i = cur_i;\n-                cur_r = r * r - i * i + init_r;\n-                cur_i = 2.0 * r * i + init_i;\n-\n-                if r * r + i * i > LIMIT * LIMIT {\n-                    cur_byte &= !cur_bitmask;\n-                    break;\n-                }\n+                core_loop!(2 ~ 3: bit_1, b);\n+                core_loop!(1 ~ 3: bit_2, b);\n             }\n-            cur_bitmask >>= 1;\n+\n+            cur_byte = (cur_byte << 2) + b;\n+            i += 2;\n         }\n-        res.push(cur_byte);\n+        res.push(cur_byte^-1);\n     }\n }\n \n fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n     // Ensure w and h are multiples of 8.\n     let w = (w + 7) / 8 * 8;\n     let h = w;\n-    let chunk_size = h / 8;\n+    let inverse_w_doubled = 2.0 / w as f64;\n+    let inverse_h_doubled = 2.0 / h as f64;\n+    let chunk_size = h / 16;\n \n-    let data: Vec<Future<Vec<u8>>> = range(0u, 8).map(|i| Future::spawn(proc () {\n-        let vec_init_r = Vec::from_fn(w, |x| 2.0 * (x as f64) / (w as f64) - 1.5);\n+    let data: Vec<Future<Vec<u8>>> = range(0u, 16).map(|i| Future::spawn(proc () {\n+        let vec_init_r = Vec::from_fn(w, |x| (x as f64) * inverse_w_doubled - 1.5);\n         let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n         for y in range(i * chunk_size, (i + 1) * chunk_size) {\n-            let init_i = 2.0 * (y as f64) / (h as f64) - 1.0;\n+            let init_i = (y as f64) * inverse_h_doubled - 1.0;\n             write_line(init_i, vec_init_r.as_slice(), &mut res);\n         }\n         res"}]}