{"sha": "a39056e614b61489a8b8afc4171586e454d4dcbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTA1NmU2MTRiNjE0ODlhOGI4YWZjNDE3MTU4NmU0NTRkNGRjYmQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-16T06:12:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-18T10:55:53Z"}, "message": "std: convert first_non_utf8_byte to use the iterator.\n\nThis makes it very slightly faster, especially when the string is valid\nUTF-8, and completely removes the use of `unsafe` from the first half.\n\nBefore:\n\n    from_utf8_lossy_100_ascii              ... bench:       151 ns/iter (+/- 17)\n    from_utf8_lossy_100_invalid            ... bench:       447 ns/iter (+/- 33)\n    from_utf8_lossy_100_multibyte          ... bench:       135 ns/iter (+/- 4)\n    from_utf8_lossy_invalid                ... bench:       124 ns/iter (+/- 10\n\nAfter:\n\n    from_utf8_lossy_100_ascii              ... bench:       119 ns/iter (+/- 8)\n    from_utf8_lossy_100_invalid            ... bench:       454 ns/iter (+/- 16)\n    from_utf8_lossy_100_multibyte          ... bench:       116 ns/iter (+/- 9)\n    from_utf8_lossy_invalid                ... bench:       119 ns/iter (+/- 9)", "tree": {"sha": "912512ec2337e40e7772c40592c22cbbf33e3fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912512ec2337e40e7772c40592c22cbbf33e3fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39056e614b61489a8b8afc4171586e454d4dcbd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39056e614b61489a8b8afc4171586e454d4dcbd", "html_url": "https://github.com/rust-lang/rust/commit/a39056e614b61489a8b8afc4171586e454d4dcbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39056e614b61489a8b8afc4171586e454d4dcbd/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a68d10e6adc048b3a5f90e376f232a39223d1db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68d10e6adc048b3a5f90e376f232a39223d1db8", "html_url": "https://github.com/rust-lang/rust/commit/a68d10e6adc048b3a5f90e376f232a39223d1db8"}], "stats": {"total": 72, "additions": 11, "deletions": 61}, "files": [{"sha": "a780a912d4df3cfa1d954a84a265d6f0f1d2fa3a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 11, "deletions": 61, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a39056e614b61489a8b8afc4171586e454d4dcbd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39056e614b61489a8b8afc4171586e454d4dcbd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=a39056e614b61489a8b8afc4171586e454d4dcbd", "patch": "@@ -813,69 +813,19 @@ pub fn is_utf8(v: &[u8]) -> bool {\n \n #[inline(always)]\n fn first_non_utf8_index(v: &[u8]) -> Option<uint> {\n-    let mut i = 0u;\n-    let total = v.len();\n-    fn unsafe_get(xs: &[u8], i: uint) -> u8 {\n-        unsafe { *xs.unsafe_ref(i) }\n-    }\n-    while i < total {\n-        let v_i = unsafe_get(v, i);\n-        if v_i < 128u8 {\n-            i += 1u;\n-        } else {\n-            let w = utf8_char_width(v_i);\n-            if w == 0u { return Some(i); }\n-\n-            let nexti = i + w;\n-            if nexti > total { return Some(i); }\n+    let mut it = v.iter();\n \n-            // 2-byte encoding is for codepoints  \\u0080 to  \\u07ff\n-            //        first  C2 80        last DF BF\n-            // 3-byte encoding is for codepoints  \\u0800 to  \\uffff\n-            //        first  E0 A0 80     last EF BF BF\n-            //   excluding surrogates codepoints  \\ud800 to  \\udfff\n-            //               ED A0 80 to       ED BF BF\n-            // 4-byte encoding is for codepoints \\u10000 to \\u10ffff\n-            //        first  F0 90 80 80  last F4 8F BF BF\n-            //\n-            // Use the UTF-8 syntax from the RFC\n-            //\n-            // https://tools.ietf.org/html/rfc3629\n-            // UTF8-1      = %x00-7F\n-            // UTF8-2      = %xC2-DF UTF8-tail\n-            // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n-            //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n-            // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n-            //               %xF4 %x80-8F 2( UTF8-tail )\n-            // UTF8-tail   = %x80-BF\n-            match w {\n-                2 => if unsafe_get(v, i + 1) & 192u8 != TAG_CONT_U8 {\n-                    return Some(i)\n-                },\n-                3 => match (v_i,\n-                            unsafe_get(v, i + 1),\n-                            unsafe_get(v, i + 2) & 192u8) {\n-                    (0xE0        , 0xA0 .. 0xBF, TAG_CONT_U8) => (),\n-                    (0xE1 .. 0xEC, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n-                    (0xED        , 0x80 .. 0x9F, TAG_CONT_U8) => (),\n-                    (0xEE .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n-                    _ => return Some(i),\n-                },\n-                _ => match (v_i,\n-                            unsafe_get(v, i + 1),\n-                            unsafe_get(v, i + 2) & 192u8,\n-                            unsafe_get(v, i + 3) & 192u8) {\n-                    (0xF0        , 0x90 .. 0xBF, TAG_CONT_U8, TAG_CONT_U8) => (),\n-                    (0xF1 .. 0xF3, 0x80 .. 0xBF, TAG_CONT_U8, TAG_CONT_U8) => (),\n-                    (0xF4        , 0x80 .. 0x8F, TAG_CONT_U8, TAG_CONT_U8) => (),\n-                    _ => return Some(i)\n-                },\n-            }\n-\n-            i = nexti;\n-        }\n+    let ok = run_utf8_validation_iterator(&mut it);\n+    if ok {\n+        None\n+    } else {\n+        // work out how many valid bytes we've consumed\n+        // (run_utf8_validation_iterator resets the iterator to just\n+        // after the last good byte), which we can do because the\n+        // vector iterator size_hint is exact.\n+        let (remaining, _) = it.size_hint();\n+        Some(v.len() - remaining)\n     }\n-    None\n }\n \n /// Determines if a vector of `u16` contains valid UTF-16"}]}