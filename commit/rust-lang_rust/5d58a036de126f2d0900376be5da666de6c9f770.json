{"sha": "5d58a036de126f2d0900376be5da666de6c9f770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNThhMDM2ZGUxMjZmMmQwOTAwMzc2YmU1ZGE2NjZkZTZjOWY3NzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-04T15:01:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T13:52:02Z"}, "message": "Give `AllocationExtra`s access to their entire `Allocation`", "tree": {"sha": "e639b18338f9052d971806ec04be76325d2c0176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e639b18338f9052d971806ec04be76325d2c0176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d58a036de126f2d0900376be5da666de6c9f770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d58a036de126f2d0900376be5da666de6c9f770", "html_url": "https://github.com/rust-lang/rust/commit/5d58a036de126f2d0900376be5da666de6c9f770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d58a036de126f2d0900376be5da666de6c9f770/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "769ee79a6978226a3ae788524b3276e71ac000d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/769ee79a6978226a3ae788524b3276e71ac000d4", "html_url": "https://github.com/rust-lang/rust/commit/769ee79a6978226a3ae788524b3276e71ac000d4"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "e55997099c82b92c9312abd9755e84d5b1df5893", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d58a036de126f2d0900376be5da666de6c9f770/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d58a036de126f2d0900376be5da666de6c9f770/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=5d58a036de126f2d0900376be5da666de6c9f770", "patch": "@@ -49,21 +49,17 @@ pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Default + Clone {\n     /// need to mutate.\n     #[inline]\n     fn memory_read(\n-        &self,\n+        _alloc: &Allocation<Tag, Self>,\n         _ptr: Pointer<Tag>,\n         _size: Size,\n     ) -> EvalResult<'tcx> {\n         Ok(())\n     }\n \n     /// Hook for performing extra checks on a memory write access.\n-    ///\n-    /// Takes read-only access to the allocation so we can keep all the memory read\n-    /// operations take `&self`.  Use a `RefCell` in `AllocExtra` if you\n-    /// need to mutate.\n     #[inline]\n     fn memory_written(\n-        &mut self,\n+        _alloc: &mut Allocation<Tag, Self>,\n         _ptr: Pointer<Tag>,\n         _size: Size,\n     ) -> EvalResult<'tcx> {"}, {"sha": "10bc984a447a3c17d74a12bd7eaf4ce927625196", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d58a036de126f2d0900376be5da666de6c9f770/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d58a036de126f2d0900376be5da666de6c9f770/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5d58a036de126f2d0900376be5da666de6c9f770", "patch": "@@ -637,7 +637,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n \n         let alloc = self.get(ptr.alloc_id)?;\n-        AllocationExtra::memory_read(&alloc.extra, ptr, size)?;\n+        AllocationExtra::memory_read(alloc, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());\n@@ -683,7 +683,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.clear_relocations(ptr, size)?;\n \n         let alloc = self.get_mut(ptr.alloc_id)?;\n-        AllocationExtra::memory_written(&mut alloc.extra, ptr, size)?;\n+        AllocationExtra::memory_written(alloc, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());"}]}