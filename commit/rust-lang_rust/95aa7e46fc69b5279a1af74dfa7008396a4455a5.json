{"sha": "95aa7e46fc69b5279a1af74dfa7008396a4455a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YWE3ZTQ2ZmM2OWI1Mjc5YTFhZjc0ZGZhNzAwODM5NmE0NDU1YTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-30T19:18:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-30T19:36:22Z"}, "message": "move item_map_query", "tree": {"sha": "e7439a2b29197ae3d202a66d50f737a7f45e40e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7439a2b29197ae3d202a66d50f737a7f45e40e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95aa7e46fc69b5279a1af74dfa7008396a4455a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95aa7e46fc69b5279a1af74dfa7008396a4455a5", "html_url": "https://github.com/rust-lang/rust/commit/95aa7e46fc69b5279a1af74dfa7008396a4455a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95aa7e46fc69b5279a1af74dfa7008396a4455a5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b704ce803b99f0c69bbcd3d4ab531d2604de8594", "url": "https://api.github.com/repos/rust-lang/rust/commits/b704ce803b99f0c69bbcd3d4ab531d2604de8594", "html_url": "https://github.com/rust-lang/rust/commit/b704ce803b99f0c69bbcd3d4ab531d2604de8594"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "e7c5d14361ffbebeba28241517cfe96f14c4de55", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=95aa7e46fc69b5279a1af74dfa7008396a4455a5", "patch": "@@ -67,7 +67,7 @@ pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_source_map_query)]\n     fn lower_module_source_map(&self, module: Module) -> Arc<ImportSourceMap>;\n \n-    #[salsa::invoke(query_definitions::item_map)]\n+    #[salsa::invoke(crate::nameres::ItemMap::item_map_query)]\n     fn item_map(&self, crate_id: CrateId) -> Arc<ItemMap>;\n \n     #[salsa::invoke(crate::module_tree::ModuleTree::module_tree_query)]"}, {"sha": "d06cd5c69e297458b3d2116ca289387d2d692b56", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=95aa7e46fc69b5279a1af74dfa7008396a4455a5", "patch": "@@ -16,7 +16,7 @@\n //! structure itself is modified.\n pub(crate) mod lower;\n \n-use std::sync::Arc;\n+use std::{time, sync::Arc};\n \n use ra_db::CrateId;\n use ra_arena::map::ArenaMap;\n@@ -156,7 +156,7 @@ impl<T> PerNs<T> {\n     }\n }\n \n-pub(crate) struct Resolver<'a, DB> {\n+struct Resolver<'a, DB> {\n     db: &'a DB,\n     input: &'a FxHashMap<ModuleId, Arc<LoweredModule>>,\n     krate: CrateId,\n@@ -169,7 +169,7 @@ impl<'a, DB> Resolver<'a, DB>\n where\n     DB: HirDatabase,\n {\n-    pub(crate) fn new(\n+    fn new(\n         db: &'a DB,\n         input: &'a FxHashMap<ModuleId, Arc<LoweredModule>>,\n         krate: CrateId,\n@@ -331,6 +331,29 @@ enum ReachedFixedPoint {\n }\n \n impl ItemMap {\n+    pub(crate) fn item_map_query(db: &impl HirDatabase, crate_id: CrateId) -> Arc<ItemMap> {\n+        let start = time::Instant::now();\n+        let module_tree = db.module_tree(crate_id);\n+        let input = module_tree\n+            .modules()\n+            .map(|module_id| {\n+                (\n+                    module_id,\n+                    db.lower_module_module(Module {\n+                        krate: crate_id,\n+                        module_id,\n+                    }),\n+                )\n+            })\n+            .collect::<FxHashMap<_, _>>();\n+\n+        let resolver = Resolver::new(db, &input, crate_id);\n+        let res = resolver.resolve();\n+        let elapsed = start.elapsed();\n+        log::info!(\"item_map: {:?}\", elapsed);\n+        Arc::new(res)\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "6724649e1d3a01d2f006725bfeb652ab6eff095b", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95aa7e46fc69b5279a1af74dfa7008396a4455a5/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=95aa7e46fc69b5279a1af74dfa7008396a4455a5", "patch": "@@ -1,17 +1,11 @@\n-use std::{\n-    sync::Arc,\n-    time::Instant,\n-};\n+use std::sync::Arc;\n \n-use rustc_hash::FxHashMap;\n use ra_syntax::{SyntaxNode, TreeArc};\n-use ra_db::{CrateId};\n \n use crate::{\n     SourceFileItems, SourceItemId, HirFileId,\n-    Function, FnScopes, Module,\n+    Function, FnScopes,\n     db::HirDatabase,\n-    nameres::{ItemMap, Resolver},\n };\n \n pub(super) fn fn_scopes(db: &impl HirDatabase, func: Function) -> Arc<FnScopes> {\n@@ -35,26 +29,3 @@ pub(super) fn file_item(\n         .to_node(&source_file)\n         .to_owned()\n }\n-\n-pub(super) fn item_map(db: &impl HirDatabase, crate_id: CrateId) -> Arc<ItemMap> {\n-    let start = Instant::now();\n-    let module_tree = db.module_tree(crate_id);\n-    let input = module_tree\n-        .modules()\n-        .map(|module_id| {\n-            (\n-                module_id,\n-                db.lower_module_module(Module {\n-                    krate: crate_id,\n-                    module_id,\n-                }),\n-            )\n-        })\n-        .collect::<FxHashMap<_, _>>();\n-\n-    let resolver = Resolver::new(db, &input, crate_id);\n-    let res = resolver.resolve();\n-    let elapsed = start.elapsed();\n-    log::info!(\"item_map: {:?}\", elapsed);\n-    Arc::new(res)\n-}"}]}