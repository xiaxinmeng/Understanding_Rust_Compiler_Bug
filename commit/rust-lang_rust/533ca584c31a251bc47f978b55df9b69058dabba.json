{"sha": "533ca584c31a251bc47f978b55df9b69058dabba", "node_id": "C_kwDOAAsO6NoAKDUzM2NhNTg0YzMxYTI1MWJjNDdmOTc4YjU1ZGY5YjY5MDU4ZGFiYmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-27T18:00:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T18:00:08Z"}, "message": "Merge #10378\n\n10378: fix: Implement most proc_macro span handling methods r=jonas-schievink a=jonas-schievink\n\nThis closes https://github.com/rust-analyzer/rust-analyzer/issues/10368 \u2013 some APIs are still missing, but they are either for unstable features or require https://github.com/rust-analyzer/rust-analyzer/issues/9403\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "b5faf86cafd820f9090f08ee93de7e2171bfb4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5faf86cafd820f9090f08ee93de7e2171bfb4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533ca584c31a251bc47f978b55df9b69058dabba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUgapCRBK7hj4Ov3rIwAAfq4IAFu36+YZJy4YigffipAFgPZ/\n+bs/n6xvasCpwKcDBUfww5cLI5VjYwj2XlU9DGBojDPcspd8R4lkvt7rTKm6HuwT\nPQTPjob/2kUZboNZNu6N6Pmd4Sk32sOH9uLh0e4ip9MyOHuEJhPRBlsCOiTpedvq\na+4OoQtPi0ZrtnI6PbYsN3EuTCY4iXEVJ+g249ss2ZZA+ikyWij0O+LBNEag43hM\nntWaSfyQOfjVW0+rXfWg/kvsYPoPdLqGlzKS/dAHE4jxG/kXUcynxnYCR36BcMDM\n/9+iVsYwJydM7ofRaIFL0uRIU5t710PPBXLCrCcfWFBZUWNjns8HQgvpuY06gEQ=\n=TsAI\n-----END PGP SIGNATURE-----\n", "payload": "tree b5faf86cafd820f9090f08ee93de7e2171bfb4cf\nparent afa9e31b80b4305352589098b001b1bec5020933\nparent 577aedb8cfa9577e75594e786411b44a604aee1f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632765608 +0000\ncommitter GitHub <noreply@github.com> 1632765608 +0000\n\nMerge #10378\n\n10378: fix: Implement most proc_macro span handling methods r=jonas-schievink a=jonas-schievink\n\nThis closes https://github.com/rust-analyzer/rust-analyzer/issues/10368 \u2013 some APIs are still missing, but they are either for unstable features or require https://github.com/rust-analyzer/rust-analyzer/issues/9403\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533ca584c31a251bc47f978b55df9b69058dabba", "html_url": "https://github.com/rust-lang/rust/commit/533ca584c31a251bc47f978b55df9b69058dabba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533ca584c31a251bc47f978b55df9b69058dabba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa9e31b80b4305352589098b001b1bec5020933", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa9e31b80b4305352589098b001b1bec5020933", "html_url": "https://github.com/rust-lang/rust/commit/afa9e31b80b4305352589098b001b1bec5020933"}, {"sha": "577aedb8cfa9577e75594e786411b44a604aee1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/577aedb8cfa9577e75594e786411b44a604aee1f", "html_url": "https://github.com/rust-lang/rust/commit/577aedb8cfa9577e75594e786411b44a604aee1f"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "c1064ae96847de084f0cf7524ea7219dde832a27", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/533ca584c31a251bc47f978b55df9b69058dabba/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533ca584c31a251bc47f978b55df9b69058dabba/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=533ca584c31a251bc47f978b55df9b69058dabba", "patch": "@@ -424,19 +424,20 @@ impl server::Group for Rustc {\n         group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn set_span(&mut self, _group: &mut Self::Group, _span: Self::Span) {\n-        // FIXME handle span\n+    fn set_span(&mut self, group: &mut Self::Group, span: Self::Span) {\n+        if let Some(delim) = &mut group.delimiter {\n+            delim.id = span;\n+        }\n     }\n \n-    fn span_open(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        // MySpan(self.span_interner.intern(&MySpanData(group.span_open())))\n-        tt::TokenId::unspecified()\n+    fn span_open(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn span_close(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span_close(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n }\n \n@@ -454,13 +455,11 @@ impl server::Punct for Rustc {\n     fn spacing(&mut self, punct: Self::Punct) -> bridge::Spacing {\n         spacing_to_external(punct.spacing)\n     }\n-    fn span(&mut self, _punct: Self::Punct) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, punct: Self::Punct) -> Self::Span {\n+        punct.id\n     }\n-    fn with_span(&mut self, punct: Self::Punct, _span: Self::Span) -> Self::Punct {\n-        // FIXME handle span\n-        punct\n+    fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {\n+        tt::Punct { id: span, ..punct }\n     }\n }\n \n@@ -474,13 +473,13 @@ impl server::Ident for Rustc {\n         )\n     }\n \n-    fn span(&mut self, _ident: Self::Ident) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, ident: Self::Ident) -> Self::Span {\n+        self.ident_interner.get(ident.0).0.id\n     }\n-    fn with_span(&mut self, ident: Self::Ident, _span: Self::Span) -> Self::Ident {\n-        // FIXME handle span\n-        ident\n+    fn with_span(&mut self, ident: Self::Ident, span: Self::Span) -> Self::Ident {\n+        let data = self.ident_interner.get(ident.0);\n+        let new = IdentData(tt::Ident { id: span, ..data.0.clone() });\n+        IdentId(self.ident_interner.intern(&new))\n     }\n }\n \n@@ -500,8 +499,8 @@ impl server::Literal for Rustc {\n         None\n     }\n \n-    fn to_string(&mut self, _literal: &Self::Literal) -> String {\n-        _literal.to_string()\n+    fn to_string(&mut self, literal: &Self::Literal) -> String {\n+        literal.to_string()\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n@@ -581,8 +580,8 @@ impl server::Literal for Rustc {\n         literal.id\n     }\n \n-    fn set_span(&mut self, _literal: &mut Self::Literal, _span: Self::Span) {\n-        // FIXME handle span\n+    fn set_span(&mut self, literal: &mut Self::Literal, span: Self::Span) {\n+        literal.id = span;\n     }\n \n     fn subspan("}]}