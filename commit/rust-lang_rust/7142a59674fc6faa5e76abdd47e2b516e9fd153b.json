{"sha": "7142a59674fc6faa5e76abdd47e2b516e9fd153b", "node_id": "C_kwDOAAsO6NoAKDcxNDJhNTk2NzRmYzZmYWE1ZTc2YWJkZDQ3ZTJiNTE2ZTlmZDE1M2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T15:29:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T15:29:43Z"}, "message": "Auto merge of #9132 - hellow554:maybe_trait_bound_on_type_repetition, r=Manishearth\n\nMaybe trait bound on type repetition\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: fix maybe trait on [`type_repetition_in_bounds`] lint\n\nI simplified the two for loops, which did exactly the same. Only downside is, that I need a `copied`, but that's to convert from `&&` to `&`, to that should be a noop?\n\nOne more thing: I only handle [`TraitBoundModifier::Maybe`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.TraitBoundModifier.html#variant.Maybe). Can anyone give me an example (and testcase) for [`TraitBoundModifier::MaybeConst`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.TraitBoundModifier.html#variant.MaybeConst)?\n\ncloses #8770", "tree": {"sha": "f8c3b15386e215d627e085afe5e96272f9ea3a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c3b15386e215d627e085afe5e96272f9ea3a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7142a59674fc6faa5e76abdd47e2b516e9fd153b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7142a59674fc6faa5e76abdd47e2b516e9fd153b", "html_url": "https://github.com/rust-lang/rust/commit/7142a59674fc6faa5e76abdd47e2b516e9fd153b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7142a59674fc6faa5e76abdd47e2b516e9fd153b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb34eb261aa8e54b9045a582d2553bb7d6fd463", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb34eb261aa8e54b9045a582d2553bb7d6fd463", "html_url": "https://github.com/rust-lang/rust/commit/afb34eb261aa8e54b9045a582d2553bb7d6fd463"}, {"sha": "ead2c4f1222c7c9023f02bf6dceaa49eb987c716", "url": "https://api.github.com/repos/rust-lang/rust/commits/ead2c4f1222c7c9023f02bf6dceaa49eb987c716", "html_url": "https://github.com/rust-lang/rust/commit/ead2c4f1222c7c9023f02bf6dceaa49eb987c716"}], "stats": {"total": 85, "additions": 55, "deletions": 30}, "files": [{"sha": "2741179074bd5c50d60fdfc9a840579892aa6577", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7142a59674fc6faa5e76abdd47e2b516e9fd153b/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7142a59674fc6faa5e76abdd47e2b516e9fd153b/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=7142a59674fc6faa5e76abdd47e2b516e9fd153b", "patch": "@@ -3,18 +3,18 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath, TraitItem, Ty, TyKind,\n-    WherePredicate,\n+    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath, TraitBoundModifier,\n+    TraitItem, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n-use std::fmt::Write as _;\n+use rustc_span::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -178,30 +178,18 @@ impl TraitBounds {\n                 );\n \n                 then {\n-                    let mut hint_string = format!(\n-                        \"consider combining the bounds: `{}:\",\n-                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    let trait_bounds = v\n+                        .iter()\n+                        .copied()\n+                        .chain(p.bounds.iter())\n+                        .filter_map(get_trait_info_from_bound)\n+                        .map(|(_, _, span)| snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                        .join(\" + \");\n+                    let hint_string = format!(\n+                        \"consider combining the bounds: `{}: {}`\",\n+                        snippet(cx, p.bounded_ty.span, \"_\"),\n+                        trait_bounds,\n                     );\n-                    for b in v.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    for b in p.bounds.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    hint_string.truncate(hint_string.len() - 2);\n-                    hint_string.push('`');\n                     span_lint_and_help(\n                         cx,\n                         TYPE_REPETITION_IN_BOUNDS,\n@@ -254,8 +242,17 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n }\n \n fn get_trait_info_from_bound<'a>(bound: &'a GenericBound<'_>) -> Option<(Res, &'a [PathSegment<'a>], Span)> {\n-    if let GenericBound::Trait(t, _) = bound {\n-        Some((t.trait_ref.path.res, t.trait_ref.path.segments, t.span))\n+    if let GenericBound::Trait(t, tbm) = bound {\n+        let trait_path = t.trait_ref.path;\n+        let trait_span = {\n+            let path_span = trait_path.span;\n+            if let TraitBoundModifier::Maybe = tbm {\n+                path_span.with_lo(path_span.lo() - BytePos(1)) // include the `?`\n+            } else {\n+                path_span\n+            }\n+        };\n+        Some((trait_path.res, trait_path.segments, trait_span))\n     } else {\n         None\n     }"}, {"sha": "2eca1f4701c9fdaeccb0da0160b67bea538f4da1", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7142a59674fc6faa5e76abdd47e2b516e9fd153b/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7142a59674fc6faa5e76abdd47e2b516e9fd153b/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=7142a59674fc6faa5e76abdd47e2b516e9fd153b", "patch": "@@ -79,6 +79,18 @@ where\n     u: U,\n }\n \n+// Check for the `?` in `?Sized`\n+pub fn f<T: ?Sized>()\n+where\n+    T: Clone,\n+{\n+}\n+pub fn g<T: Clone>()\n+where\n+    T: ?Sized,\n+{\n+}\n+\n // This should not lint\n fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n "}, {"sha": "1d88714814d477007bc0dc6afc60f0fee9bb95a4", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7142a59674fc6faa5e76abdd47e2b516e9fd153b/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7142a59674fc6faa5e76abdd47e2b516e9fd153b/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=7142a59674fc6faa5e76abdd47e2b516e9fd153b", "patch": "@@ -19,5 +19,21 @@ LL |     Self: Copy + Default + Ord,\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n-error: aborting due to 2 previous errors\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:85:5\n+   |\n+LL |     T: Clone,\n+   |     ^^^^^^^^\n+   |\n+   = help: consider combining the bounds: `T: ?Sized + Clone`\n+\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:90:5\n+   |\n+LL |     T: ?Sized,\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider combining the bounds: `T: Clone + ?Sized`\n+\n+error: aborting due to 4 previous errors\n "}]}