{"sha": "db534b3ac286cf45688c3bbae6aa6e77439e52d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTM0YjNhYzI4NmNmNDU2ODhjM2JiYWU2YWE2ZTc3NDM5ZTUyZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-30T13:16:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-30T13:16:38Z"}, "message": "Auto merge of #75176 - jyn514:impl-link, r=GuillaumeGomez,petrochenkov\n\nFix intra-doc links for cross-crate re-exports of default trait methods\n\nThe original fix for this was very simple: https://github.com/rust-lang/rust/pull/58972 ignored `extern_traits` because before https://github.com/rust-lang/rust/issues/65983 was fixed, they would always fail to resolve, giving spurious warnings. So the first commit just undoes that change, so extern traits are now seen by the `collect_intra_doc_links` pass. There are also some minor changes in `librustdoc/fold.rs` to avoid borrowing the `extern_traits` RefCell more than once at a time.\n\nHowever, that brought up a much more thorny problem. `rustc_resolve` started giving 'error: cannot find a built-in macro with name `cfg`' when documenting `libproc_macro` (I still haven't been able to reproduce on anything smaller than the full standard library). The chain of events looked like this (thanks @eddyb for the help debugging!):\n\n0. `x.py build --stage 1` builds the standard library and creates a sysroot\n1. `cargo doc` does something like `cargo check` to create `rmeta`s for all the crates (unrelated to what was built above)\n2. the `cargo check`-like `libcore-*.rmeta` is loaded as a transitive dependency *and claims ownership* of builtin macros\n3. `rustdoc` later tries to resolve some path in a doc link\n4. suggestion logic fires and loads \"extern prelude\" crates by name\n5. the sysroot `libcore-*.rlib` is loaded and *fails to claim ownership* of builtin macros\n\n`rustc_resolve` gives the error after step 5. However, `rustdoc` doesn't need suggestions at all - `resolve_str_path_error` completely discards the `ResolutionError`! The fix implemented in this PR is to skip the suggestion logic for `resolve_ast_path`: pass `record_used: false` and skip `lookup_import_candidates` when `record_used` isn't set.\n\nIt's possible that if/when https://github.com/rust-lang/rust/issues/74207 is implemented this will need a more in-depth fix which returns a `ResolutionError` from `compile_macro`, to allow rustdoc to reuse the suggestions from rustc_resolve. However, that's a much larger change and there's no need for it yet, so I haven't implemented it here.\n\nFixes https://github.com/rust-lang/rust/issues/73829.\n\nr? @GuillaumeGomez", "tree": {"sha": "f9faa1856eb502189c86a1513847e754105cf42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9faa1856eb502189c86a1513847e754105cf42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db534b3ac286cf45688c3bbae6aa6e77439e52d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db534b3ac286cf45688c3bbae6aa6e77439e52d2", "html_url": "https://github.com/rust-lang/rust/commit/db534b3ac286cf45688c3bbae6aa6e77439e52d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db534b3ac286cf45688c3bbae6aa6e77439e52d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d092c15942ab2e59152dde6f1af77e888473c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d092c15942ab2e59152dde6f1af77e888473c8", "html_url": "https://github.com/rust-lang/rust/commit/b1d092c15942ab2e59152dde6f1af77e888473c8"}, {"sha": "9131d23cc0fb5461050bc19e40a3858b61487069", "url": "https://api.github.com/repos/rust-lang/rust/commits/9131d23cc0fb5461050bc19e40a3858b61487069", "html_url": "https://github.com/rust-lang/rust/commit/9131d23cc0fb5461050bc19e40a3858b61487069"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "7562da6d782614275c3e4c33cfba9cd16d0ebd91", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -222,6 +222,7 @@ impl<'a> CrateLoader<'a> {\n         let mut ret = None;\n         self.cstore.iter_crate_data(|cnum, data| {\n             if data.name() != name {\n+                tracing::trace!(\"{} did not match {}\", data.name(), name);\n                 return;\n             }\n \n@@ -230,7 +231,10 @@ impl<'a> CrateLoader<'a> {\n                     ret = Some(cnum);\n                     return;\n                 }\n-                Some(..) => return,\n+                Some(hash) => {\n+                    debug!(\"actual hash {} did not match expected {}\", hash, data.hash());\n+                    return;\n+                }\n                 None => {}\n             }\n \n@@ -273,6 +277,11 @@ impl<'a> CrateLoader<'a> {\n                 .1;\n             if kind.matches(prev_kind) {\n                 ret = Some(cnum);\n+            } else {\n+                debug!(\n+                    \"failed to load existing crate {}; kind {:?} did not match prev_kind {:?}\",\n+                    name, kind, prev_kind\n+                );\n             }\n         });\n         ret"}, {"sha": "5892edf7652b73a802e32a9abebe013dd5dddca8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -2385,8 +2385,12 @@ impl<'a> Resolver<'a> {\n                             Res::Def(DefKind::Mod, _) => true,\n                             _ => false,\n                         };\n-                        let mut candidates =\n-                            self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod);\n+                        // Don't look up import candidates if this is a speculative resolve\n+                        let mut candidates = if record_used {\n+                            self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod)\n+                        } else {\n+                            Vec::new()\n+                        };\n                         candidates.sort_by_cached_key(|c| {\n                             (c.path.segments.len(), pprust::path_to_string(&c.path))\n                         });\n@@ -3200,7 +3204,7 @@ impl<'a> Resolver<'a> {\n             &Segment::from_path(path),\n             Some(ns),\n             parent_scope,\n-            true,\n+            false,\n             path.span,\n             CrateLint::No,\n         ) {"}, {"sha": "50cb987cf0870d9b0bb98989941245ca342b5c57", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -628,7 +628,9 @@ pub fn record_extern_trait(cx: &DocContext<'_>, did: DefId) {\n         }\n     }\n \n-    cx.active_extern_traits.borrow_mut().insert(did);\n+    {\n+        cx.active_extern_traits.borrow_mut().insert(did);\n+    }\n \n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);"}, {"sha": "7c89b38a92c75f329d296fb5b8ef1050732c750a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -439,6 +439,7 @@ pub fn run_core(\n                 resolver.borrow_mut().access(|resolver| {\n                     sess.time(\"load_extern_crates\", || {\n                         for extern_name in &extern_names {\n+                            debug!(\"loading extern crate {}\", extern_name);\n                             resolver\n                                 .resolve_str_path_error(\n                                     DUMMY_SP,"}, {"sha": "d4ada3278e6a1298901371d33cabfe12dcccec07", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -93,15 +93,11 @@ pub trait DocFolder: Sized {\n         c.module = c.module.take().and_then(|module| self.fold_item(module));\n \n         {\n-            let mut guard = c.external_traits.borrow_mut();\n-            let external_traits = std::mem::replace(&mut *guard, Default::default());\n-            *guard = external_traits\n-                .into_iter()\n-                .map(|(k, mut v)| {\n-                    v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n-                    (k, v)\n-                })\n-                .collect();\n+            let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n+            for (k, mut v) in external_traits {\n+                v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n+                c.external_traits.borrow_mut().insert(k, v);\n+            }\n         }\n         c\n     }"}, {"sha": "8d4eb67204f53469dcb345e86e5e4c4ec324dd53", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -161,6 +161,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));\n             }\n             if let Some(module_id) = parent_id {\n+                debug!(\"resolving {} as a macro in the module {:?}\", path_str, module_id);\n                 if let Ok((_, res)) =\n                     resolver.resolve_str_path_error(DUMMY_SP, path_str, MacroNS, module_id)\n                 {\n@@ -972,15 +973,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             self.fold_item_recur(item)\n         }\n     }\n-\n-    // FIXME: if we can resolve intra-doc links from other crates, we can use the stock\n-    // `fold_crate`, but until then we should avoid scanning `krate.external_traits` since those\n-    // will never resolve properly\n-    fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        c.module = c.module.take().and_then(|module| self.fold_item(module));\n-\n-        c\n-    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "07decb48019da26c168cbcc031ba6df4f48e4bb7", "filename": "src/test/rustdoc/intra-doc-crate/traits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db534b3ac286cf45688c3bbae6aa6e77439e52d2/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Ftraits.rs?ref=db534b3ac286cf45688c3bbae6aa6e77439e52d2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-test\n-// ^ this is https://github.com/rust-lang/rust/issues/73829\n // aux-build:traits.rs\n // build-aux-docs\n // ignore-tidy-line-length"}]}