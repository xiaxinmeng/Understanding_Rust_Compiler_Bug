{"sha": "37eca59438e46ed4b6d52bf8d25e035fee160f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZWNhNTk0MzhlNDZlZDRiNmQ1MmJmOGQyNWUwMzVmZWUxNjBmNDA=", "commit": {"author": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-01T21:00:43Z"}, "committer": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-01T21:00:43Z"}, "message": "lint: while immutable condition: refactor to use hir::Visitor", "tree": {"sha": "c50cec65ae91ced895a891227669188ae6140cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50cec65ae91ced895a891227669188ae6140cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37eca59438e46ed4b6d52bf8d25e035fee160f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37eca59438e46ed4b6d52bf8d25e035fee160f40", "html_url": "https://github.com/rust-lang/rust/commit/37eca59438e46ed4b6d52bf8d25e035fee160f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37eca59438e46ed4b6d52bf8d25e035fee160f40/comments", "author": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f", "html_url": "https://github.com/rust-lang/rust/commit/5c1be4a4ba6c56394545a95e92e4ad6f62c3605f"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "20623620f3edc0e64c58c1fd0f0ddfd8fbc68cb9", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/37eca59438e46ed4b6d52bf8d25e035fee160f40/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37eca59438e46ed4b6d52bf8d25e035fee160f40/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=37eca59438e46ed4b6d52bf8d25e035fee160f40", "patch": "@@ -689,46 +689,6 @@ fn check_for_loop<'a, 'tcx>(\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n-fn search_mutable_vars<'a, 'tcx> (\n-    cx: &LateContext<'a, 'tcx>,\n-    ex: &'tcx Expr,\n-    acc: &mut Vec<NodeId>,\n-) -> bool {\n-    match ex.node {\n-        ExprBinary(_, ref a, ref b) =>\n-            search_mutable_vars(cx, a, acc) && search_mutable_vars(cx, b, acc),\n-\n-        ExprUnary(_, ref a) => search_mutable_vars(cx, a, acc),\n-        ExprPath(_) => {\n-            if let Some(node_id) = check_for_mutability(cx, &ex) {\n-                acc.push(node_id);\n-            }\n-            true\n-        }\n-        ExprLit(_) => true,\n-\n-        // Skip if any method or function call is encountered\n-        _ => false\n-    }\n-}\n-\n-fn check_infinite_loop<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n-    cond: &'tcx Expr,\n-    _block: &'tcx Block,\n-    _expr: &'tcx Expr,\n-) {\n-    let mut mutable_vars = Vec::new();\n-    if search_mutable_vars(cx, cond, &mut mutable_vars) && mutable_vars.len() == 0 {\n-        span_lint(\n-            cx,\n-            WHILE_IMMUTABLE_CONDITION,\n-            cond.span,\n-            \"all variables in condition are immutable. This might lead to infinite loops.\"\n-        )\n-    }\n-}\n-\n fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: ast::NodeId) -> bool {\n     if_chain! {\n         if let ExprPath(ref qpath) = expr.node;\n@@ -2179,3 +2139,45 @@ fn path_name(e: &Expr) -> Option<Name> {\n     };\n     None\n }\n+\n+fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, _block: &'tcx Block, _expr: &'tcx Expr) {\n+    let mut mut_var_visitor = MutableVarsVisitor {\n+        cx,\n+        ids: HashSet::new(),\n+        skip: false,\n+    };\n+    walk_expr(&mut mut_var_visitor, cond);\n+    if !mut_var_visitor.skip && mut_var_visitor.ids.len() == 0 {\n+        span_lint(\n+            cx,\n+            WHILE_IMMUTABLE_CONDITION,\n+            cond.span,\n+            \"all variables in condition are immutable. This might lead to infinite loops.\",\n+        )\n+    }\n+}\n+\n+struct MutableVarsVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    ids: HashSet<NodeId>,\n+    skip: bool,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx Expr) {\n+        match ex.node {\n+            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, &ex) {\n+                self.ids.insert(node_id);\n+            },\n+\n+            // If there is any fuction/method call\u2026 we just stop analysis\n+            ExprCall(_, _) | ExprMethodCall(_, _, _) => self.skip = true,\n+\n+            _ => walk_expr(self, ex),\n+        }\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "ecdf42c6d3d09c283b035d37166770149eda8301", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37eca59438e46ed4b6d52bf8d25e035fee160f40/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37eca59438e46ed4b6d52bf8d25e035fee160f40/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=37eca59438e46ed4b6d52bf8d25e035fee160f40", "patch": "@@ -77,8 +77,8 @@ fn used_immutable() {\n     }\n \n     while i < 3 {\n-        fn_mutref(&mut i);\n         println!(\"OK - passed by mutable reference\");\n+        fn_mutref(&mut i)\n     }\n }\n "}]}