{"sha": "05a040f406009a22600a9e0c37738ad0643cf811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTA0MGY0MDYwMDlhMjI2MDBhOWUwYzM3NzM4YWQwNjQzY2Y4MTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T20:41:11Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T20:41:11Z"}, "message": "Remove unused `ns` parameter", "tree": {"sha": "94f7515b1d752a1785cc2ef6a4110107e3e35bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f7515b1d752a1785cc2ef6a4110107e3e35bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a040f406009a22600a9e0c37738ad0643cf811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a040f406009a22600a9e0c37738ad0643cf811", "html_url": "https://github.com/rust-lang/rust/commit/05a040f406009a22600a9e0c37738ad0643cf811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a040f406009a22600a9e0c37738ad0643cf811/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d3f3963c174f0a5a42d0a22f150257e8f64024", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d3f3963c174f0a5a42d0a22f150257e8f64024", "html_url": "https://github.com/rust-lang/rust/commit/56d3f3963c174f0a5a42d0a22f150257e8f64024"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "f9c766f3119cad120356f02b20caa60596107bcd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05a040f406009a22600a9e0c37738ad0643cf811/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a040f406009a22600a9e0c37738ad0643cf811/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=05a040f406009a22600a9e0c37738ad0643cf811", "patch": "@@ -829,16 +829,13 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             }\n                             let candidates =\n                                 candidates.map(|candidate| candidate.map(|(res, _)| res));\n-                            let candidates = [TypeNS, ValueNS, MacroNS]\n-                                .iter()\n-                                .filter_map(|&ns| candidates[ns].map(|res| (res, ns)));\n                             ambiguity_error(\n                                 cx,\n                                 &item,\n                                 path_str,\n                                 &dox,\n                                 link_range,\n-                                candidates.collect(),\n+                                candidates.present_items().collect(),\n                             );\n                             continue;\n                         }\n@@ -880,7 +877,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                         fragment = Some(path.to_owned());\n                     } else {\n                         // `[char]` when a `char` module is in scope\n-                        let candidates = vec![(res, TypeNS), (prim, TypeNS)];\n+                        let candidates = vec![res, prim];\n                         ambiguity_error(cx, &item, path_str, &dox, link_range, candidates);\n                         continue;\n                     }\n@@ -1251,12 +1248,12 @@ fn ambiguity_error(\n     path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n-    candidates: Vec<(Res, Namespace)>,\n+    candidates: Vec<Res>,\n ) {\n     let mut msg = format!(\"`{}` is \", path_str);\n \n     match candidates.as_slice() {\n-        [(first_def, _), (second_def, _)] => {\n+        [first_def, second_def] => {\n             msg += &format!(\n                 \"both {} {} and {} {}\",\n                 first_def.article(),\n@@ -1267,7 +1264,7 @@ fn ambiguity_error(\n         }\n         _ => {\n             let mut candidates = candidates.iter().peekable();\n-            while let Some((res, _)) = candidates.next() {\n+            while let Some(res) = candidates.next() {\n                 if candidates.peek().is_some() {\n                     msg += &format!(\"{} {}, \", res.article(), res.descr());\n                 } else {\n@@ -1284,7 +1281,7 @@ fn ambiguity_error(\n             diag.note(\"ambiguous link\");\n         }\n \n-        for (res, _ns) in candidates {\n+        for res in candidates {\n             let disambiguator = Disambiguator::from_res(res);\n             suggest_disambiguator(disambiguator, diag, path_str, dox, sp, &link_range);\n         }"}]}