{"sha": "d76e168f01e5ed6fc4bbdc127dacb121b51de098", "node_id": "C_kwDOAAsO6NoAKGQ3NmUxNjhmMDFlNWVkNmZjNGJiZGMxMjdkYWNiMTIxYjUxZGUwOTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T18:51:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T20:44:47Z"}, "message": "Point at HIR types when impl trait ref doesn't normalize", "tree": {"sha": "117d106f030bb32c60493434ed615103e2cf3138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/117d106f030bb32c60493434ed615103e2cf3138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d76e168f01e5ed6fc4bbdc127dacb121b51de098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d76e168f01e5ed6fc4bbdc127dacb121b51de098", "html_url": "https://github.com/rust-lang/rust/commit/d76e168f01e5ed6fc4bbdc127dacb121b51de098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d76e168f01e5ed6fc4bbdc127dacb121b51de098/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70", "html_url": "https://github.com/rust-lang/rust/commit/1bc3683b3275a5eb2ed13d24edcdcbc59afe5d70"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "ca45e16d9d9fea74d4d698f880cb3ab5c0f38813", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d76e168f01e5ed6fc4bbdc127dacb121b51de098/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76e168f01e5ed6fc4bbdc127dacb121b51de098/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d76e168f01e5ed6fc4bbdc127dacb121b51de098", "patch": "@@ -1254,7 +1254,11 @@ fn check_impl<'tcx>(\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n                 let trait_ref = tcx.impl_trait_ref(item.owner_id).unwrap();\n-                let trait_ref = wfcx.normalize(ast_trait_ref.path.span, None, trait_ref);\n+                let trait_ref = wfcx.normalize(\n+                    ast_trait_ref.path.span,\n+                    Some(WellFormedLoc::Ty(item.hir_id().expect_owner().def_id)),\n+                    trait_ref,\n+                );\n                 let trait_pred = ty::TraitPredicate {\n                     trait_ref,\n                     constness: match constness {"}, {"sha": "2dbfc1bc9a229c4a4a069ddf76ab79cbb26db179", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d76e168f01e5ed6fc4bbdc127dacb121b51de098/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76e168f01e5ed6fc4bbdc127dacb121b51de098/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=d76e168f01e5ed6fc4bbdc127dacb121b51de098", "patch": "@@ -114,51 +114,63 @@ fn diagnostic_hir_wf_check<'tcx>(\n     // Get the starting `hir::Ty` using our `WellFormedLoc`.\n     // We will walk 'into' this type to try to find\n     // a more precise span for our predicate.\n-    let ty = match loc {\n+    let tys = match loc {\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n-                hir::ImplItemKind::Type(ty) => Some(ty),\n-                hir::ImplItemKind::Const(ty, _) => Some(ty),\n+                hir::ImplItemKind::Type(ty) => vec![ty],\n+                hir::ImplItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },\n             hir::Node::TraitItem(item) => match item.kind {\n-                hir::TraitItemKind::Type(_, ty) => ty,\n-                hir::TraitItemKind::Const(ty, _) => Some(ty),\n+                hir::TraitItemKind::Type(_, ty) => ty.into_iter().collect(),\n+                hir::TraitItemKind::Const(ty, _) => vec![ty],\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {\n-                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => Some(ty),\n-                hir::ItemKind::Impl(ref impl_) => {\n-                    assert!(impl_.of_trait.is_none(), \"Unexpected trait impl: {:?}\", impl_);\n-                    Some(impl_.self_ty)\n-                }\n+                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => vec![ty],\n+                hir::ItemKind::Impl(ref impl_) => match &impl_.of_trait {\n+                    Some(t) => t\n+                        .path\n+                        .segments\n+                        .last()\n+                        .iter()\n+                        .flat_map(|seg| seg.args().args)\n+                        .filter_map(|arg| {\n+                            if let hir::GenericArg::Type(ty) = arg { Some(*ty) } else { None }\n+                        })\n+                        .chain([impl_.self_ty])\n+                        .collect(),\n+                    None => {\n+                        vec![impl_.self_ty]\n+                    }\n+                },\n                 ref item => bug!(\"Unexpected item {:?}\", item),\n             },\n-            hir::Node::Field(field) => Some(field.ty),\n+            hir::Node::Field(field) => vec![field.ty],\n             hir::Node::ForeignItem(ForeignItem {\n                 kind: ForeignItemKind::Static(ty, _), ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             hir::Node::GenericParam(hir::GenericParam {\n                 kind: hir::GenericParamKind::Type { default: Some(ty), .. },\n                 ..\n-            }) => Some(*ty),\n+            }) => vec![*ty],\n             ref node => bug!(\"Unexpected node {:?}\", node),\n         },\n         WellFormedLoc::Param { function: _, param_idx } => {\n             let fn_decl = hir.fn_decl_by_hir_id(hir_id).unwrap();\n             // Get return type\n             if param_idx as usize == fn_decl.inputs.len() {\n                 match fn_decl.output {\n-                    hir::FnRetTy::Return(ty) => Some(ty),\n+                    hir::FnRetTy::Return(ty) => vec![ty],\n                     // The unit type `()` is always well-formed\n-                    hir::FnRetTy::DefaultReturn(_span) => None,\n+                    hir::FnRetTy::DefaultReturn(_span) => vec![],\n                 }\n             } else {\n-                Some(&fn_decl.inputs[param_idx as usize])\n+                vec![&fn_decl.inputs[param_idx as usize]]\n             }\n         }\n     };\n-    if let Some(ty) = ty {\n+    for ty in tys {\n         visitor.visit_ty(ty);\n     }\n     visitor.cause"}, {"sha": "505baa23ca336c8c6202f23d14fec317fca13838", "filename": "tests/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d76e168f01e5ed6fc4bbdc127dacb121b51de098/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76e168f01e5ed6fc4bbdc127dacb121b51de098/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=d76e168f01e5ed6fc4bbdc127dacb121b51de098", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:18:17\n+  --> $DIR/issue-79224.rs:18:29\n    |\n LL | impl<B: ?Sized> Display for Cow<'_, B> {\n-   |                 ^^^^^^^ the trait `Clone` is not implemented for `B`\n+   |                             ^^^^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound"}, {"sha": "85d903fadd120ac36831dbd02c5e80ed0c7780a4", "filename": "tests/ui/traits/issue-91594.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d76e168f01e5ed6fc4bbdc127dacb121b51de098/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d76e168f01e5ed6fc4bbdc127dacb121b51de098/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91594.stderr?ref=d76e168f01e5ed6fc4bbdc127dacb121b51de098", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Foo: HasComponent<()>` is not satisfied\n-  --> $DIR/issue-91594.rs:10:6\n+  --> $DIR/issue-91594.rs:10:19\n    |\n LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n    = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n note: required for `Foo` to implement `Component<Foo>`"}]}