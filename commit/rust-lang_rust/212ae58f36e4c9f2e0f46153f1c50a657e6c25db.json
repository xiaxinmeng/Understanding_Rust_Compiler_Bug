{"sha": "212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMmFlNThmMzZlNGM5ZjJlMGY0NjE1M2YxYzUwYTY1N2U2YzI1ZGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-14T00:24:46Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-18T02:25:17Z"}, "message": "Change `Lit::tokens()` to `Lit::token_tree()`.\n\nBecause most of the call sites have an easier time working with a\n`TokenTree` instead of a `TokenStream`.", "tree": {"sha": "1927b7b4abb875e020d6b8ab4a8356285049fdda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1927b7b4abb875e020d6b8ab4a8356285049fdda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "html_url": "https://github.com/rust-lang/rust/commit/212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6eef299d3b0ca24f8ffc0c3dc03283c09ec7945", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6eef299d3b0ca24f8ffc0c3dc03283c09ec7945", "html_url": "https://github.com/rust-lang/rust/commit/a6eef299d3b0ca24f8ffc0c3dc03283c09ec7945"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "8786c850bfdd2bb3171b212c6217f7c53e79b1ca", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "patch": "@@ -541,9 +541,10 @@ impl MetaItemKind {\n         match *self {\n             MetaItemKind::Word => TokenStream::default(),\n             MetaItemKind::NameValue(ref lit) => {\n-                let mut vec = vec![TokenTree::token(token::Eq, span).into()];\n-                lit.tokens().append_to_tree_and_joint_vec(&mut vec);\n-                TokenStream::new(vec)\n+                TokenStream::new(vec![\n+                    TokenTree::token(token::Eq, span).into(),\n+                    lit.token_tree().into(),\n+                ])\n             }\n             MetaItemKind::List(ref list) => {\n                 let mut tokens = Vec::new();\n@@ -606,7 +607,7 @@ impl NestedMetaItem {\n     fn tokens(&self) -> TokenStream {\n         match *self {\n             NestedMetaItem::MetaItem(ref item) => item.tokens(),\n-            NestedMetaItem::Literal(ref lit) => lit.tokens(),\n+            NestedMetaItem::Literal(ref lit) => lit.token_tree().into(),\n         }\n     }\n "}, {"sha": "7952e293a532d72eef0914ddc03908ac19f328bf", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "patch": "@@ -3,7 +3,7 @@\n use crate::ast::{self, Lit, LitKind};\n use crate::parse::token::{self, Token};\n use crate::symbol::{kw, sym, Symbol};\n-use crate::tokenstream::{TokenStream, TokenTree};\n+use crate::tokenstream::TokenTree;\n \n use log::debug;\n use rustc_data_structures::sync::Lrc;\n@@ -216,13 +216,13 @@ impl Lit {\n         Lit { token: kind.to_lit_token(), kind, span }\n     }\n \n-    /// Losslessly convert an AST literal into a token stream.\n-    crate fn tokens(&self) -> TokenStream {\n+    /// Losslessly convert an AST literal into a token tree.\n+    crate fn token_tree(&self) -> TokenTree {\n         let token = match self.token.kind {\n             token::Bool => token::Ident(self.token.symbol, false),\n             _ => token::Literal(self.token),\n         };\n-        TokenTree::token(token, self.span).into()\n+        TokenTree::token(token, self.span)\n     }\n }\n "}, {"sha": "188a144cac9de93a6a2706e59848ad68409b30a3", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212ae58f36e4c9f2e0f46153f1c50a657e6c25db/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "patch": "@@ -6,7 +6,6 @@ use crate::tokenstream::{TokenStream, TokenTree};\n use crate::source_map::Span;\n \n use log::debug;\n-use smallvec::smallvec;\n \n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n@@ -193,15 +192,15 @@ impl<'a> Parser<'a> {\n                         is_interpolated_expr = true;\n                     }\n                 }\n-                let tokens = if is_interpolated_expr {\n+                let token_tree = if is_interpolated_expr {\n                     // We need to accept arbitrary interpolated expressions to continue\n                     // supporting things like `doc = $expr` that work on stable.\n                     // Non-literal interpolated expressions are rejected after expansion.\n-                    self.parse_token_tree().into()\n+                    self.parse_token_tree()\n                 } else {\n-                    self.parse_unsuffixed_lit()?.tokens()\n+                    self.parse_unsuffixed_lit()?.token_tree()\n                 };\n-                TokenStream::from_streams(smallvec![eq.into(), tokens])\n+                TokenStream::new(vec![eq.into(), token_tree.into()])\n             } else {\n                 TokenStream::default()\n             };"}]}