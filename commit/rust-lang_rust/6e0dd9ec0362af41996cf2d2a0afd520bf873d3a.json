{"sha": "6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGRkOWVjMDM2MmFmNDE5OTZjZjJkMmEwYWZkNTIwYmY4NzNkM2E=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-30T09:13:21Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T01:53:37Z"}, "message": "Include is_empty() in PartialEq and Hash.\n\nWhen the index is not PartialOrd, always treat the range as empty.", "tree": {"sha": "44d9c77f23d4fc19f95de5016e81febb5330399e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d9c77f23d4fc19f95de5016e81febb5330399e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltIBiEACgkQ/vbIBR0O\nATz8yA//Wv1lQj+t7oxashCRABJit/UuBzKRMxElhBSVuR+miyN/RhrfrWsdtH2g\nh0n9smnV3vpaPlysr/NO3bcVa+UiJcMGrPe4HJkRMR8nlJLH20qKF5vvd6zggKN/\nDBw8rjdZ5Fy03WvxrqRpIQH26p6/WQ9nw8YTwrh9wnlwaS6pjd+qnsx3Zy1dr+Gt\nyOdO1E2IjLwwoH6PKxs9C3OdWWZ6rKL0MUh6VESLKetc52jfYR+SEyuweT56crPo\nAHqswascfB5XLpE8XPDeyoVRwDDNV0mzZu/i0DPT7kFB2n3dFWg9nhQP0xR+8LZL\npjn5YDAEMbwQhrrYnO3muIJOs0n5MSIlu+HobriwDTRxkRSebwHu/WwuRuRxNLXw\nHaZCLoQNM/loD5CBoVxrn2ATTG9LlLrDz24yq/jCPE6G60KoNADQJsJ82/lmiDs2\nMEEpAna6CINdJMzUxpwEr9DteBBtJsPkaoi1RqRKM9I2ogRLKxxmK7VlPn5Zg2T+\nvhhmLlol4ot+rA4nwwGj7rSmKCh8346ClnnfrZbHhXKy4ACF76Zx6uomuWQFqmjR\nJ5/ZoqMSPEGM+tQH/WNOSMBkpe89NpZHl0nVTuEBp2dx4o+VY2R6gD+ZPLIxLawY\nVHnxp1O3pYzwra1sua7tHXSLeyE8Hgtmib7qSJvY5jpGzEE76Ts=\n=gvYA\n-----END PGP SIGNATURE-----", "payload": "tree 44d9c77f23d4fc19f95de5016e81febb5330399e\nparent b6ea93e46410cccf8d115e57283d1df5968dd0f2\nauthor kennytm <kennytm@gmail.com> 1530350001 +0800\ncommitter kennytm <kennytm@gmail.com> 1531446817 +0800\n\nInclude is_empty() in PartialEq and Hash.\n\nWhen the index is not PartialOrd, always treat the range as empty.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "html_url": "https://github.com/rust-lang/rust/commit/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ea93e46410cccf8d115e57283d1df5968dd0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea93e46410cccf8d115e57283d1df5968dd0f2", "html_url": "https://github.com/rust-lang/rust/commit/b6ea93e46410cccf8d115e57283d1df5968dd0f2"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "0f119789a75f81c9c8d00692e73b2eeefc5dc906", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "patch": "@@ -341,11 +341,29 @@ pub struct RangeInclusive<Idx> {\n     // accept non-PartialOrd types, also we want the constructor to be const.\n }\n \n+trait RangeInclusiveEquality: Sized {\n+    fn canonicalized_is_empty(range: &RangeInclusive<Self>) -> bool;\n+}\n+impl<T> RangeInclusiveEquality for T {\n+    #[inline]\n+    default fn canonicalized_is_empty(range: &RangeInclusive<Self>) -> bool {\n+        !range.is_iterating.unwrap_or(false)\n+    }\n+}\n+impl<T: PartialOrd> RangeInclusiveEquality for T {\n+    #[inline]\n+    fn canonicalized_is_empty(range: &RangeInclusive<Self>) -> bool {\n+        range.is_empty()\n+    }\n+}\n+\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: PartialEq> PartialEq for RangeInclusive<Idx> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.start == other.start && self.end == other.end\n+            && RangeInclusiveEquality::canonicalized_is_empty(self)\n+                == RangeInclusiveEquality::canonicalized_is_empty(other)\n     }\n }\n \n@@ -357,6 +375,7 @@ impl<Idx: Hash> Hash for RangeInclusive<Idx> {\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         self.start.hash(state);\n         self.end.hash(state);\n+        RangeInclusiveEquality::canonicalized_is_empty(self).hash(state);\n     }\n }\n "}]}