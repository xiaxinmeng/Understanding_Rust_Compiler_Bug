{"sha": "704228d0bb65227c82a8b44ab819485912b44007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDIyOGQwYmI2NTIyN2M4MmE4YjQ0YWI4MTk0ODU5MTJiNDQwMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T19:12:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-11T19:12:05Z"}, "message": "Auto merge of #1220 - elichai:2020-03-bump, r=RalfJung\n\nBump rust-version to latest\n\nI hoped for some errors I could fix to learn more of the codebase but got none :/\nIDK if it's still worth the PR hehe\n(is there a TODO list or something like that I can look at when I'm in the mood of contributing to Miri? :) )", "tree": {"sha": "c3ba5c49645a7f7ae870be56810d55e8fec2ba9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ba5c49645a7f7ae870be56810d55e8fec2ba9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/704228d0bb65227c82a8b44ab819485912b44007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/704228d0bb65227c82a8b44ab819485912b44007", "html_url": "https://github.com/rust-lang/rust/commit/704228d0bb65227c82a8b44ab819485912b44007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/704228d0bb65227c82a8b44ab819485912b44007/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676c4f8c8cafe06c10263131da48c496717b6b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/676c4f8c8cafe06c10263131da48c496717b6b8e", "html_url": "https://github.com/rust-lang/rust/commit/676c4f8c8cafe06c10263131da48c496717b6b8e"}, {"sha": "548c90e102fe46a8348bbf7cb06c92782c66a02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c90e102fe46a8348bbf7cb06c92782c66a02a", "html_url": "https://github.com/rust-lang/rust/commit/548c90e102fe46a8348bbf7cb06c92782c66a02a"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "fb138448f9f4bd85ea6b3300e16d51dfec0e6dff", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/704228d0bb65227c82a8b44ab819485912b44007/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/704228d0bb65227c82a8b44ab819485912b44007/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=704228d0bb65227c82a8b44ab819485912b44007", "patch": "@@ -1 +1 @@\n-3dbade652ed8ebac70f903e01f51cd92c4e4302c\n+303d8aff6092709edd4dbd35b1c88e9aa40bf6d8"}, {"sha": "fbb0a654294f21d1b9fc3b503fc80ae31bca67c7", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/704228d0bb65227c82a8b44ab819485912b44007/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704228d0bb65227c82a8b44ab819485912b44007/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=704228d0bb65227c82a8b44ab819485912b44007", "patch": "@@ -444,12 +444,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(result_ptr, dest)?;\n             }\n \n-            \"panic_if_uninhabited\" => {\n+            \"panic_if_uninhabited\" |\n+            \"panic_if_zero_invalid\" |\n+            \"panic_if_any_invalid\" => {\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 if layout.abi.is_uninhabited() {\n                     // Return here because we paniced instead of returning normally from the intrinsic.\n-                    return this.start_panic(&format!(\"Attempted to instantiate uninhabited type {}\", ty), unwind);\n+                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type `{}`\", ty), unwind);\n+                }\n+                if intrinsic_name == \"panic_if_zero_invalid\" && !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n+                    // Return here because we paniced instead of returning normally from the intrinsic.\n+                    return this.start_panic(&format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty), unwind);\n+                }\n+                if intrinsic_name == \"panic_if_any_invalid\" && !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n+                    // Return here because we paniced instead of returning normally from the intrinsic.\n+                    return this.start_panic(&format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty), unwind);\n                 }\n             }\n "}, {"sha": "cc97ba5a85d290a9cdce3043ce29f575b5450eec", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/704228d0bb65227c82a8b44ab819485912b44007/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/704228d0bb65227c82a8b44ab819485912b44007/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=704228d0bb65227c82a8b44ab819485912b44007", "patch": "@@ -69,10 +69,41 @@ fn main() {\n \n     // libcore panics from shims.\n     #[allow(deprecated, invalid_value)]\n-    test(\n-        Some(\"Attempted to instantiate uninhabited type !\"),\n-        |_old_val| unsafe { std::mem::uninitialized::<!>() },\n-    );\n+    {\n+        test(\n+            Some(\"attempted to instantiate uninhabited type `!`\"),\n+            |_old_val| unsafe { std::mem::uninitialized::<!>() },\n+        );\n+        test(\n+            Some(\"attempted to instantiate uninhabited type `!`\"),\n+            |_old_val| unsafe { std::mem::zeroed::<!>() },\n+        );\n+        test(\n+            Some(\"attempted to leave type `fn()` uninitialized, which is invalid\"),\n+            |_old_val| unsafe { std::mem::uninitialized::<fn()>(); loop {} },\n+        );\n+        test(\n+            Some(\"attempted to zero-initialize type `fn()`, which is invalid\"),\n+            |_old_val| unsafe { std::mem::zeroed::<fn()>(); loop {} },\n+        );\n+        test(\n+            Some(\"attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid\"),\n+            |_old_val| unsafe { std::mem::uninitialized::<*const dyn Sync>(); loop {} },\n+        );\n+        test(\n+            Some(\"attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid\"),\n+            |_old_val| unsafe { std::mem::zeroed::<*mut dyn Sync>(); loop {} },\n+        );\n+        test(\n+            Some(\"attempted to leave type `&u8` uninitialized, which is invalid\"),\n+            |_old_val| unsafe { std::mem::uninitialized::<&u8>(); loop {} },\n+        );\n+        test(\n+            Some(\"attempted to zero-initialize type `&u8`, which is invalid\"),\n+            |_old_val| unsafe { std::mem::zeroed::<&u8>(); loop {} },\n+        );\n+    }\n+\n     test(\n         Some(\"align_offset: align is not a power-of-two\"),\n         |_old_val| { (0usize as *const u8).align_offset(3); loop {} },"}, {"sha": "8d97fd6321f18cc6dfbf2960212554f9008974a7", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/704228d0bb65227c82a8b44ab819485912b44007/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/704228d0bb65227c82a8b44ab819485912b44007/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=704228d0bb65227c82a8b44ab819485912b44007", "patch": "@@ -16,13 +16,27 @@ thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:67:33\n Caught panic message (String): attempt to divide by zero\n-thread 'main' panicked at 'Attempted to instantiate uninhabited type !', $LOC\n-Caught panic message (String): Attempted to instantiate uninhabited type !\n+thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n+Caught panic message (String): attempted to instantiate uninhabited type `!`\n+thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n+Caught panic message (String): attempted to instantiate uninhabited type `!`\n+thread 'main' panicked at 'attempted to leave type `fn()` uninitialized, which is invalid', $LOC\n+Caught panic message (String): attempted to leave type `fn()` uninitialized, which is invalid\n+thread 'main' panicked at 'attempted to zero-initialize type `fn()`, which is invalid', $LOC\n+Caught panic message (String): attempted to zero-initialize type `fn()`, which is invalid\n+thread 'main' panicked at 'attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid', $LOC\n+Caught panic message (String): attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid\n+thread 'main' panicked at 'attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid', $LOC\n+Caught panic message (String): attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid\n+thread 'main' panicked at 'attempted to leave type `&u8` uninitialized, which is invalid', $LOC\n+Caught panic message (String): attempted to leave type `&u8` uninitialized, which is invalid\n+thread 'main' panicked at 'attempted to zero-initialize type `&u8`, which is invalid', $LOC\n+Caught panic message (String): attempted to zero-initialize type `&u8`, which is invalid\n thread 'main' panicked at 'align_offset: align is not a power-of-two', $LOC\n Caught panic message (String): align_offset: align is not a power-of-two\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:82:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:113:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:83:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:114:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'attempt to copy from unaligned or null pointer', $LOC\n Caught panic message (String): attempt to copy from unaligned or null pointer"}]}