{"sha": "fb2813bcab3b031b92566daaf0c4debb22aa0f70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjgxM2JjYWIzYjAzMWI5MjU2NmRhYWYwYzRkZWJiMjJhYTBmNzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-24T23:08:33Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-20T23:15:11Z"}, "message": "Add index page", "tree": {"sha": "c5d34be2763d213022e9aa5c3ee887e71dd37382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d34be2763d213022e9aa5c3ee887e71dd37382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2813bcab3b031b92566daaf0c4debb22aa0f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2813bcab3b031b92566daaf0c4debb22aa0f70", "html_url": "https://github.com/rust-lang/rust/commit/fb2813bcab3b031b92566daaf0c4debb22aa0f70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2813bcab3b031b92566daaf0c4debb22aa0f70/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2639e82ec4a18d7359efbfb555ea69dd644c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2639e82ec4a18d7359efbfb555ea69dd644c97", "html_url": "https://github.com/rust-lang/rust/commit/ca2639e82ec4a18d7359efbfb555ea69dd644c97"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "5e02444490cbad61514e513ff0beefa1ae3be6ea", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=fb2813bcab3b031b92566daaf0c4debb22aa0f70", "patch": "@@ -405,6 +405,7 @@ impl Step for Standalone {\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n+               .arg(\"--index-page\").arg(\"src/doc/index.md\")\n                .arg(\"--markdown-playground-url\")\n                .arg(\"https://play.rust-lang.org/\")\n                .arg(\"-o\").arg(&out)"}, {"sha": "6436189bbf105bc27d68dc0c5e2379732ea58c64", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 76, "deletions": 6, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fb2813bcab3b031b92566daaf0c4debb22aa0f70", "patch": "@@ -80,6 +80,8 @@ use html::{highlight, layout};\n \n use minifier;\n \n+use pulldown_cmark;\n+\n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n \n@@ -106,6 +108,8 @@ struct Context {\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n+    pub enable_index_page: bool,\n+    pub index_page: Option<PathBuf>,\n }\n \n struct SharedContext {\n@@ -501,7 +505,10 @@ pub fn run(mut krate: clean::Crate,\n            sort_modules_alphabetically: bool,\n            themes: Vec<PathBuf>,\n            enable_minification: bool,\n-           id_map: IdMap) -> Result<(), Error> {\n+           id_map: IdMap,\n+           enable_index_page: bool,\n+           index_page: Option<PathBuf>,\n+) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -572,6 +579,8 @@ pub fn run(mut krate: clean::Crate,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n+        enable_index_page,\n+        index_page,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -902,8 +911,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n     write(cx.dst.join(\"COPYRIGHT.txt\"),\n           include_bytes!(\"static/COPYRIGHT.txt\"))?;\n \n-    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<Vec<String>> {\n+    fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n         let mut ret = Vec::new();\n+        let mut krates = Vec::new();\n         if path.exists() {\n             for line in BufReader::new(File::open(path)?).lines() {\n                 let line = line?;\n@@ -914,9 +924,13 @@ themePicker.onblur = handleThemeButtonsBlur;\n                     continue;\n                 }\n                 ret.push(line.to_string());\n+                krates.push(line[key.len() + 2..].split('\"')\n+                                                 .next()\n+                                                 .map(|s| s.to_owned())\n+                                                 .unwrap_or_else(|| String::new()));\n             }\n         }\n-        Ok(ret)\n+        Ok((ret, krates))\n     }\n \n     fn show_item(item: &IndexItem, krate: &str) -> String {\n@@ -931,7 +945,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     let dst = cx.dst.join(\"aliases.js\");\n     {\n-        let mut all_aliases = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n+        let (mut all_aliases, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n         let mut w = try_err!(File::create(&dst), &dst);\n         let mut output = String::with_capacity(100);\n         for (alias, items) in &cache.aliases {\n@@ -955,7 +969,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n-    let mut all_indexes = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect(&dst, &krate.name, \"searchIndex\"), &dst);\n     all_indexes.push(search_index);\n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n@@ -969,6 +983,61 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n     try_err!(writeln!(&mut w, \"initSearch(searchIndex);\"), &dst);\n \n+<<<<<<< HEAD\n+    if cx.disable_index_page == false {\n+        let dst = cx.dst.join(\"index.html\");\n+=======\n+    if cx.enable_index_page == true {\n+>>>>>>> a2642cf... f\n+        if let Some(ref index_page) = cx.index_page {\n+            let mut content = Vec::with_capacity(100000);\n+\n+            let mut f = try_err!(File::open(&index_page), &index_page);\n+            try_err!(f.read_to_end(&mut content), &index_page);\n+            let content = match String::from_utf8(content) {\n+                Ok(c) => c,\n+                Err(_) => return Err(Error::new(\n+                                         io::Error::new(\n+                                             io::ErrorKind::Other, \"invalid markdown\"),\n+                                             &index_page)),\n+            };\n+            let parser = pulldown_cmark::Parser::new(&content);\n+            let mut html_buf = String::new();\n+            pulldown_cmark::html::push_html(&mut html_buf, parser);\n+            let mut f = try_err!(File::create(&dst), &dst);\n+            try_err!(f.write_all(html_buf.as_bytes()), &dst);\n+        } else {\n+            let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));\n+            let page = layout::Page {\n+                title: \"Index of crates\",\n+                css_class: \"mod\",\n+                root_path: \"./\",\n+                description: \"List of crates\",\n+                keywords: BASIC_KEYWORDS,\n+                resource_suffix: &cx.shared.resource_suffix,\n+            };\n+            krates.push(krate.name.clone());\n+            krates.sort();\n+            krates.dedup();\n+\n+            let content = format!(\n+\"<h1 class='fqn'>\\\n+     <span class='in-band'>List of all crates</span>\\\n+</h1><ul class='mod'>{}</ul>\",\n+                                  krates\n+                                    .iter()\n+                                    .map(|s| {\n+                                        format!(\"<li><a href=\\\"{}/index.html\\\">{}</li>\", s, s)\n+                                    })\n+                                    .collect::<String>());\n+            try_err!(layout::render(&mut w, &cx.shared.layout,\n+                                    &page, &(\"\"), &content,\n+                                    cx.shared.css_file_extension.is_some(),\n+                                    &cx.shared.themes), &dst);\n+            try_err!(w.flush(), &dst);\n+        }\n+    }\n+\n     // Update the list of all implementors for traits\n     let dst = cx.dst.join(\"implementors\");\n     for (&did, imps) in &cache.implementors {\n@@ -1022,7 +1091,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n                             remote_item_type.css_class(),\n                             remote_path[remote_path.len() - 1]));\n \n-        let mut all_implementors = try_err!(collect(&mydst, &krate.name, \"implementors\"), &mydst);\n+        let (mut all_implementors, _) = try_err!(collect(&mydst, &krate.name, \"implementors\"),\n+                                                 &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "cb9fb94db7c16cf29b1a80644ee14d5b468052e5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2813bcab3b031b92566daaf0c4debb22aa0f70/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fb2813bcab3b031b92566daaf0c4debb22aa0f70", "patch": "@@ -334,6 +334,17 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"LEVEL\",\n             )\n         }),\n+        unstable(\"index-page\", |o| {\n+             o.optopt(\"\",\n+                      \"index-page\",\n+                      \"Markdown file to be used as index page\",\n+                      \"PATH\")\n+        }),\n+        unstable(\"enable-index-page\", |o| {\n+             o.optflag(\"\",\n+                       \"enable-index-page\",\n+                       \"To enable generation of the index page\")\n+        }),\n     ]\n }\n \n@@ -534,6 +545,8 @@ fn main_args(args: &[String]) -> isize {\n     let linker = matches.opt_str(\"linker\").map(PathBuf::from);\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n+    let index_page = matches.opt_str(\"index-page\").map(|s| PathBuf::from(&s));\n+    let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n     let enable_minification = !matches.opt_present(\"disable-minification\");\n \n     let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n@@ -544,6 +557,12 @@ fn main_args(args: &[String]) -> isize {\n             return 1;\n         }\n     };\n+    if let Some(ref index_page) = index_page {\n+        if !index_page.is_file() {\n+            diag.struct_err(\"option `--index-page` argument must be a file\").emit();\n+            return 1;\n+        }\n+    }\n \n     let cg = build_codegen_options(&matches, ErrorOutputType::default());\n \n@@ -580,7 +599,10 @@ fn main_args(args: &[String]) -> isize {\n                                   renderinfo,\n                                   sort_modules_alphabetically,\n                                   themes,\n-                                  enable_minification, id_map)\n+                                  enable_minification, id_map,\n+                                  enable_index_page, index_page,\n+                                  &matches,\n+                                  &diag)\n                     .expect(\"failed to generate documentation\");\n                 0\n             }"}]}