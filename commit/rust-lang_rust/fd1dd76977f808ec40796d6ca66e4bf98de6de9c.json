{"sha": "fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMWRkNzY5NzdmODA4ZWM0MDc5NmQ2Y2E2NmU0YmY5OGRlNmRlOWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-12-16T00:56:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-12-16T01:39:53Z"}, "message": "stdlib: Add a str::split_str() to split on a delimiter string of any length", "tree": {"sha": "8cea66fdfdd74af92cd74fb472f82854af538c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cea66fdfdd74af92cd74fb472f82854af538c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "html_url": "https://github.com/rust-lang/rust/commit/fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd1dd76977f808ec40796d6ca66e4bf98de6de9c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8f6054d283f7a2d5e5277f422463bfaecbe139", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8f6054d283f7a2d5e5277f422463bfaecbe139", "html_url": "https://github.com/rust-lang/rust/commit/1f8f6054d283f7a2d5e5277f422463bfaecbe139"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "8a532fcc75323437b5aabd007eefebbfdabeb8ba", "filename": "src/libcore/str.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd1dd76977f808ec40796d6ca66e4bf98de6de9c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1dd76977f808ec40796d6ca66e4bf98de6de9c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "patch": "@@ -6,11 +6,11 @@ String manipulation.\n \n export eq, lteq, hash, is_empty, is_not_empty, is_whitespace, byte_len,\n        byte_len_range, index,\n-       rindex, find, starts_with, ends_with, substr, slice, split, concat,\n-       connect, to_upper, replace, char_slice, trim_left, trim_right, trim,\n-       unshift_char, shift_char, pop_char, push_char, is_utf8, from_chars,\n-       to_chars, char_len, char_len_range, char_at, bytes, is_ascii,\n-       shift_byte, pop_byte,\n+       rindex, find, starts_with, ends_with, substr, slice, split, split_str,\n+       concat, connect, to_upper, replace, char_slice, trim_left, trim_right,\n+       trim, unshift_char, shift_char, pop_char, push_char, is_utf8,\n+       from_chars, to_chars, char_len, char_len_range, char_at, bytes,\n+       is_ascii, shift_byte, pop_byte,\n        unsafe_from_byte, unsafe_from_bytes, from_char, char_range_at,\n        str_from_cstr, sbuf, as_buf, push_byte, utf8_char_width, safe_slice,\n        contains, iter_chars, loop_chars, loop_chars_sub,\n@@ -744,6 +744,42 @@ fn split(s: str, sep: u8) -> [str] {\n     ret v;\n }\n \n+/*\n+Function: split_str\n+\n+Splits a string at each occurrence of the given separator string. Empty\n+leading fields are suppressed, and empty trailing fields are preserved.\n+\n+Returns:\n+\n+A vector containing all the strings between each occurrence of the separator.\n+*/\n+fn split_str(s: str, sep: str) -> [str] {\n+    assert byte_len(sep) > 0u;\n+    let v: [str] = [], accum = \"\", sep_match = 0u, leading = true;\n+    for c: u8 in s {\n+        // Did we match the entire separator?\n+        if sep_match == byte_len(sep) {\n+            if !leading { v += [accum]; }\n+            accum = \"\";\n+            sep_match = 0u;\n+        }\n+\n+        if c == sep[sep_match] {\n+            sep_match += 1u;\n+        } else {\n+            sep_match = 0u;\n+            accum += unsafe_from_byte(c);\n+            leading = false;\n+        }\n+    }\n+\n+    if byte_len(accum) > 0u { v += [accum]; }\n+    if sep_match == byte_len(sep) { v += [\"\"]; }\n+\n+    ret v;\n+}\n+\n /*\n Function: concat\n "}, {"sha": "b519904836480eca234ee2159b08e5d17d15646d", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1dd76977f808ec40796d6ca66e4bf98de6de9c/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1dd76977f808ec40796d6ca66e4bf98de6de9c/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=fd1dd76977f808ec40796d6ca66e4bf98de6de9c", "patch": "@@ -59,6 +59,20 @@ fn test_split() {\n     t(\"...hello.there.\", '.', 5, \"\");\n }\n \n+#[test]\n+fn test_split_str() {\n+    fn t(s: str, sep: str, i: int, k: str) {\n+        let v = str::split_str(s, sep);\n+        assert str::eq(v[i], k);\n+    }\n+    t(\"abc::hello::there\", \"::\", 0, \"abc\");\n+    t(\"abc::hello::there\", \"::\", 1, \"hello\");\n+    t(\"abc::hello::there\", \"::\", 2, \"there\");\n+    t(\"::hello::there\", \"::\", 0, \"hello\");\n+    t(\"hello::there::\", \"::\", 2, \"\");\n+    t(\"::hello::there::\", \"::\", 2, \"\");\n+}\n+\n #[test]\n fn test_find() {\n     fn t(haystack: str, needle: str, i: int) {"}]}