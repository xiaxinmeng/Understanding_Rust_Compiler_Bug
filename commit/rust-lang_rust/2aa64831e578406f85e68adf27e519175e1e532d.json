{"sha": "2aa64831e578406f85e68adf27e519175e1e532d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYTY0ODMxZTU3ODQwNmY4NWU2OGFkZjI3ZTUxOTE3NWUxZTUzMmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-24T10:17:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-24T10:17:12Z"}, "message": "Merge #8183\n\n8183: Fix missing command error with macros r=Veykril a=brandondong\n\n**Reproduction:**\r\n1. Define a struct through a macro (can be via `macro_rules`, proc macro, or `include!()`).\r\n2. !!MISSING: command!! annotation appears. Clicking on it results in an error message. No matter where the macro is called/defined, the annotation is always at the start of the file.\r\n![image](https://user-images.githubusercontent.com/13722457/112268785-bce14500-8c34-11eb-9a23-bafd63ffd6ef.png)\r\n\r\n**Cause:**\r\n- For struct `A`, a `HasImpls` annotation is added just like for struct `B`. Unlike `B`, the file id for `A` is not the file we are adding annotations to but a macro file.\r\n- The resolving step of the code lens does not succeed.\r\n\r\n**Fix:**\r\n- Check that the files match before computing offsets and adding `HasImpls`/`HasReferences` annotations.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>", "tree": {"sha": "ac288ca7b8a25ea41d8b66ed2deeedb33d5c8df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac288ca7b8a25ea41d8b66ed2deeedb33d5c8df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa64831e578406f85e68adf27e519175e1e532d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWxGoCRBK7hj4Ov3rIwAAdHIIAB7C6t6yD6Zg9AEDuh0Io9kh\nLEzpIcUHcUBTRjx0cUsjAOurd151CUmX7XbnRhm3qSLaCTl+lnN9ntUJHOI5gZSk\nWZVsFV5LFzebIyt120yb9aKJDDc4DCiBYrAXQWOcqM/9B6DCvIIjuS22v5MgCEOa\nZ/LWfpnCQoRYPtviOIU8TykaRLomxmJC+kXYlEilpU8mWxYCPkHl+7xbVEZ41jhM\nzhCJiB3sw0fikj9bCgOkSHMkrFoJO90ULqtuqNJGxjU8bod+1gCHXDsiawmXRbo9\nqlc30HPqwYDNfbuyVb1TauokHhe8MpgV+vECgSwyJtfEJB82N35DasFHp7Ra+rA=\n=c+6K\n-----END PGP SIGNATURE-----\n", "payload": "tree ac288ca7b8a25ea41d8b66ed2deeedb33d5c8df8\nparent 5f9ba2d589afaaec91ee79bfc7fa3aba636916f2\nparent 903a2e98f93df87af19375e951c56e7c285989d4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616581032 +0000\ncommitter GitHub <noreply@github.com> 1616581032 +0000\n\nMerge #8183\n\n8183: Fix missing command error with macros r=Veykril a=brandondong\n\n**Reproduction:**\r\n1. Define a struct through a macro (can be via `macro_rules`, proc macro, or `include!()`).\r\n2. !!MISSING: command!! annotation appears. Clicking on it results in an error message. No matter where the macro is called/defined, the annotation is always at the start of the file.\r\n![image](https://user-images.githubusercontent.com/13722457/112268785-bce14500-8c34-11eb-9a23-bafd63ffd6ef.png)\r\n\r\n**Cause:**\r\n- For struct `A`, a `HasImpls` annotation is added just like for struct `B`. Unlike `B`, the file id for `A` is not the file we are adding annotations to but a macro file.\r\n- The resolving step of the code lens does not succeed.\r\n\r\n**Fix:**\r\n- Check that the files match before computing offsets and adding `HasImpls`/`HasReferences` annotations.\n\nCo-authored-by: Brandon <brandondong604@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa64831e578406f85e68adf27e519175e1e532d", "html_url": "https://github.com/rust-lang/rust/commit/2aa64831e578406f85e68adf27e519175e1e532d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa64831e578406f85e68adf27e519175e1e532d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9ba2d589afaaec91ee79bfc7fa3aba636916f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9ba2d589afaaec91ee79bfc7fa3aba636916f2", "html_url": "https://github.com/rust-lang/rust/commit/5f9ba2d589afaaec91ee79bfc7fa3aba636916f2"}, {"sha": "903a2e98f93df87af19375e951c56e7c285989d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/903a2e98f93df87af19375e951c56e7c285989d4", "html_url": "https://github.com/rust-lang/rust/commit/903a2e98f93df87af19375e951c56e7c285989d4"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "64bc926f1c612b2ea53d612d4e827a0578e4a853", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2aa64831e578406f85e68adf27e519175e1e532d/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa64831e578406f85e68adf27e519175e1e532d/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=2aa64831e578406f85e68adf27e519175e1e532d", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{HasSource, Semantics};\n+use hir::{HasSource, InFile, Semantics};\n use ide_db::{\n     base_db::{FileId, FilePosition, FileRange},\n     helpers::visit_file_defs,\n@@ -80,19 +80,19 @@ pub(crate) fn annotations(\n         Either::Left(def) => {\n             let node = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    konst.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    trait_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    strukt.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    strukt.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(enum_)) => {\n-                    enum_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    enum_.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Union(union)) => {\n-                    union.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    union.source(db).and_then(|node| range_and_position_of(&node, file_id))\n                 }\n                 _ => None,\n             };\n@@ -120,8 +120,19 @@ pub(crate) fn annotations(\n                 });\n             }\n \n-            fn range_and_position_of(node: &dyn NameOwner) -> Option<(TextSize, TextRange)> {\n-                Some((node.name()?.syntax().text_range().start(), node.syntax().text_range()))\n+            fn range_and_position_of<T: NameOwner>(\n+                node: &InFile<T>,\n+                file_id: FileId,\n+            ) -> Option<(TextSize, TextRange)> {\n+                if node.file_id != file_id.into() {\n+                    // Node is outside the file we are adding annotations to (e.g. macros).\n+                    None\n+                } else {\n+                    Some((\n+                        node.value.name()?.syntax().text_range().start(),\n+                        node.value.syntax().text_range(),\n+                    ))\n+                }\n             }\n         }\n         Either::Right(_) => (),\n@@ -961,6 +972,25 @@ mod tests {\n struct Foo;\n //- /lib.rs\n // this file comes last since `check` checks the first file only\n+\"#,\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_no_annotations_macro_struct_def() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+macro_rules! m {\n+    () => {\n+        struct A {}\n+    };\n+}\n+\n+m!();\n \"#,\n             expect![[r#\"\n                 []"}]}