{"sha": "9b92a4419d6a76a9de6d56adb3084d97e3e31d20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTJhNDQxOWQ2YTc2YTlkZTZkNTZhZGIzMDg0ZDk3ZTNlMzFkMjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-18T11:48:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-18T18:18:01Z"}, "message": "Add stresstests for shared bytes for pattern API", "tree": {"sha": "12140f58b03c45f467d13606d632ba019613479a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12140f58b03c45f467d13606d632ba019613479a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b92a4419d6a76a9de6d56adb3084d97e3e31d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b92a4419d6a76a9de6d56adb3084d97e3e31d20", "html_url": "https://github.com/rust-lang/rust/commit/9b92a4419d6a76a9de6d56adb3084d97e3e31d20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b92a4419d6a76a9de6d56adb3084d97e3e31d20/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5535557662fb7851d80ff1538b5518af921571", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5535557662fb7851d80ff1538b5518af921571", "html_url": "https://github.com/rust-lang/rust/commit/bc5535557662fb7851d80ff1538b5518af921571"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "7fe274a79ed085618cad8dec32715ec62f76db2f", "filename": "src/libcore/tests/pattern.rs", "status": "modified", "additions": 153, "deletions": 1, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9b92a4419d6a76a9de6d56adb3084d97e3e31d20/src%2Flibcore%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b92a4419d6a76a9de6d56adb3084d97e3e31d20/src%2Flibcore%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fpattern.rs?ref=9b92a4419d6a76a9de6d56adb3084d97e3e31d20", "patch": "@@ -21,7 +21,7 @@ enum Step {\n     Done\n }\n \n-use Step::*;\n+use self::Step::*;\n \n impl From<SearchStep> for Step {\n     fn from(x: SearchStep) -> Self {\n@@ -42,6 +42,12 @@ impl From<Option<(usize, usize)>> for Step {\n     }\n }\n \n+// XXXManishearth these tests focus on single-character searching  (CharSearcher)\n+// and on next()/next_match(), not next_reject(). This is because\n+// the memchr changes make next_match() for single chars complex, but next_reject()\n+// continues to use next() under the hood. We should add more test cases for all\n+// of these, as well as tests for StrSearcher and higher level tests for str::find() (etc)\n+\n #[test]\n fn test_simple_iteration() {\n     search_asserts! (\"abcdeabcd\", 'a', \"forward iteration for ASCII string\",\n@@ -98,3 +104,149 @@ fn test_simple_search() {\n     );\n }\n \n+// \u00c1, \uac01, \u0e01, \ud83d\ude00 all end in 0x81\n+// \ud83c\udc40, \u1600 do not end in 0x81 but contain the byte\n+// \ua041 has 0x81 as its second and third bytes.\n+//\n+// The memchr-using implementation of next_match\n+// and next_match_back temporarily violate\n+// the property that the search is always on a unicode boundary,\n+// which is fine as long as this never reaches next() or next_back().\n+// So we test if next() is correct after each next_match() as well.\n+const STRESS: &str = \"\u00c1a\ud83c\udc40b\u00c1\ua041fg\ud83d\ude01\uac01\u0e01\u1600\uac01a\u00c1\uac01\ua041\u0e01\ud83d\ude01a\";\n+\n+#[test]\n+fn test_stress_indices() {\n+    // this isn't really a test, more of documentation on the indices of each character in the stresstest string\n+\n+    search_asserts!(STRESS, 'x', \"Indices of characters in stress test\",\n+        [next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next, next],\n+        [Rejects(0, 2), // \u00c1\n+         Rejects(2, 3), // a\n+         Rejects(3, 7), // \ud83c\udc40\n+         Rejects(7, 8), // b\n+         Rejects(8, 10), // \u00c1\n+         Rejects(10, 13), // \ua041\n+         Rejects(13, 14), // f\n+         Rejects(14, 15), // g\n+         Rejects(15, 19), // \ud83d\ude00\n+         Rejects(19, 22), // \uac01\n+         Rejects(22, 25), // \u0e01\n+         Rejects(25, 28), // \u1600\n+         Rejects(28, 31), // \uac01\n+         Rejects(31, 32), // a\n+         Rejects(32, 34), // \u00c1\n+         Rejects(34, 37), // \uac01\n+         Rejects(37, 40), // \ua041\n+         Rejects(40, 43), // \u0e01\n+         Rejects(43, 47), // \ud83d\ude00\n+         Rejects(47, 48), // a\n+         Done]\n+    );\n+}\n+\n+#[test]\n+fn test_forward_search_shared_bytes() {\n+    search_asserts!(STRESS, '\u00c1', \"Forward search for two-byte Latin character\",\n+        [next_match,    next_match,     next_match,      next_match],\n+        [InRange(0, 2), InRange(8, 10), InRange(32, 34), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u00c1', \"Forward search for two-byte Latin character; check if next() still works\",\n+        [next_match,    next,          next_match,     next,             next_match,     next,            next_match],\n+        [InRange(0, 2), Rejects(2, 3), InRange(8, 10), Rejects(10, 13), InRange(32, 34), Rejects(34, 37), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\uac01', \"Forward search for three-byte Hangul character\",\n+        [next_match,      next,            next_match,      next_match,      next_match],\n+        [InRange(19, 22), Rejects(22, 25), InRange(28, 31), InRange(34, 37), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\uac01', \"Forward search for three-byte Hangul character; check if next() still works\",\n+        [next_match,      next,            next_match,      next,            next_match,      next,            next_match],\n+        [InRange(19, 22), Rejects(22, 25), InRange(28, 31), Rejects(31, 32), InRange(34, 37), Rejects(37, 40), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u0e01', \"Forward search for three-byte Thai character\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(22, 25), Rejects(25, 28), InRange(40, 43), Rejects(43, 47), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u0e01', \"Forward search for three-byte Thai character; check if next() still works\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(22, 25), Rejects(25, 28), InRange(40, 43), Rejects(43, 47), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ud83d\ude01', \"Forward search for four-byte emoji\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(15, 19), Rejects(19, 22), InRange(43, 47), Rejects(47, 48), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ud83d\ude01', \"Forward search for four-byte emoji; check if next() still works\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(15, 19), Rejects(19, 22), InRange(43, 47), Rejects(47, 48), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ua041', \"Forward search for three-byte Yi character with repeated bytes\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(10, 13), Rejects(13, 14), InRange(37, 40), Rejects(40, 43), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ua041', \"Forward search for three-byte Yi character with repeated bytes; check if next() still works\",\n+        [next_match,      next,            next_match,      next,            next_match],\n+        [InRange(10, 13), Rejects(13, 14), InRange(37, 40), Rejects(40, 43), Done]\n+    );\n+}\n+\n+#[test]\n+fn test_reverse_search_shared_bytes() {\n+    search_asserts!(STRESS, '\u00c1', \"Reverse search for two-byte Latin character\",\n+        [next_match_back, next_match_back, next_match_back, next_match_back],\n+        [InRange(32, 34), InRange(8, 10),  InRange(0, 2),   Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u00c1', \"Reverse search for two-byte Latin character; check if next_back() still works\",\n+        [next_match_back, next_back,       next_match_back, next_back,     next_match_back, next_back],\n+        [InRange(32, 34), Rejects(31, 32), InRange(8, 10),  Rejects(7, 8), InRange(0, 2),   Done]\n+    );\n+\n+    search_asserts!(STRESS, '\uac01', \"Reverse search for three-byte Hangul character\",\n+        [next_match_back, next_back,        next_match_back, next_match_back, next_match_back],\n+        [InRange(34, 37), Rejects(32, 34), InRange(28, 31),  InRange(19, 22), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\uac01', \"Reverse search for three-byte Hangul character; check if next_back() still works\",\n+        [next_match_back, next_back,       next_match_back, next_back,       next_match_back, next_back,       next_match_back],\n+        [InRange(34, 37), Rejects(32, 34), InRange(28, 31), Rejects(25, 28), InRange(19, 22), Rejects(15, 19), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u0e01', \"Reverse search for three-byte Thai character\",\n+        [next_match_back, next_back,       next_match_back, next_back,       next_match_back],\n+        [InRange(40, 43), Rejects(37, 40), InRange(22, 25), Rejects(19, 22), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\u0e01', \"Reverse search for three-byte Thai character; check if next_back() still works\",\n+        [next_match_back, next_back,       next_match_back, next_back,       next_match_back],\n+        [InRange(40, 43), Rejects(37, 40), InRange(22, 25), Rejects(19, 22), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ud83d\ude01', \"Reverse search for four-byte emoji\",\n+        [next_match_back, next_back,       next_match_back, next_back,       next_match_back],\n+        [InRange(43, 47), Rejects(40, 43), InRange(15, 19), Rejects(14, 15), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ud83d\ude01', \"Reverse search for four-byte emoji; check if next_back() still works\",\n+        [next_match_back, next_back,       next_match_back, next_back,       next_match_back],\n+        [InRange(43, 47), Rejects(40, 43), InRange(15, 19), Rejects(14, 15), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ua041', \"Reverse search for three-byte Yi character with repeated bytes\",\n+        [next_match_back, next_back,       next_match_back, next_back,      next_match_back],\n+        [InRange(37, 40), Rejects(34, 37), InRange(10, 13), Rejects(8, 10), Done]\n+    );\n+\n+    search_asserts!(STRESS, '\ua041', \"Reverse search for three-byte Yi character with repeated bytes; check if next_back() still works\",\n+        [next_match_back, next_back,       next_match_back, next_back,      next_match_back],\n+        [InRange(37, 40), Rejects(34, 37), InRange(10, 13), Rejects(8, 10), Done]\n+    );\n+}"}]}