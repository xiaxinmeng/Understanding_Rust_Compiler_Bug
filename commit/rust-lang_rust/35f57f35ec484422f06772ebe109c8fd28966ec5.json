{"sha": "35f57f35ec484422f06772ebe109c8fd28966ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZjU3ZjM1ZWM0ODQ0MjJmMDY3NzJlYmUxMDljOGZkMjg5NjZlYzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-27T09:51:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T09:51:02Z"}, "message": "Merge #2427\n\n2427: Decouple r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1b8a22d7991901808f1801c25feaaeaf141901b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8a22d7991901808f1801c25feaaeaf141901b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35f57f35ec484422f06772ebe109c8fd28966ec5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3kcGCRBK7hj4Ov3rIwAAdHIIAJPQUtVVmDHb5aI6WPvd7l3r\nmnCSfJ1aA59dcysCxnpHuMjexUzTyVVXFpcp8VEM/U7T+3JF965U+bzmmE7CuSjQ\napeOYGwjLJLuydx4YRTDMJzi1AJ23l3MTZcY5eCEW0sPLAHFAB+04ORoyMt4rEdS\nDG6hhR0NVfq41eauFSVxiLJ3N1JnYQYLDhvP80wiZtFQC+aBA3t3hmQ52LHubjOU\nCh52d4IfqNcFoUtjVszbuA1+mg4VH/p8jXtB5Qe9/0E9TVADspPFzv45qCoyXphL\ne1wXn0E3iyHqdDz3K8R7Afzb5K7ggcuFpN96BDgAzg6mCPXVjB3Y1N7wRouAtNw=\n=PQ4B\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b8a22d7991901808f1801c25feaaeaf141901b5\nparent 84bd7916ffa91081e8938d15c673142498442042\nparent 1fe9656ba4fdb1369153d4f0f6a7c8bfea6bfe08\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574848262 +0000\ncommitter GitHub <noreply@github.com> 1574848262 +0000\n\nMerge #2427\n\n2427: Decouple r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35f57f35ec484422f06772ebe109c8fd28966ec5", "html_url": "https://github.com/rust-lang/rust/commit/35f57f35ec484422f06772ebe109c8fd28966ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35f57f35ec484422f06772ebe109c8fd28966ec5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bd7916ffa91081e8938d15c673142498442042", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bd7916ffa91081e8938d15c673142498442042", "html_url": "https://github.com/rust-lang/rust/commit/84bd7916ffa91081e8938d15c673142498442042"}, {"sha": "1fe9656ba4fdb1369153d4f0f6a7c8bfea6bfe08", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9656ba4fdb1369153d4f0f6a7c8bfea6bfe08", "html_url": "https://github.com/rust-lang/rust/commit/1fe9656ba4fdb1369153d4f0f6a7c8bfea6bfe08"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "76189a60b14e1e4381f5500681ebd978d7aa5820", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35f57f35ec484422f06772ebe109c8fd28966ec5/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f57f35ec484422f06772ebe109c8fd28966ec5/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=35f57f35ec484422f06772ebe109c8fd28966ec5", "patch": "@@ -8,7 +8,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, ImplBlock};\n+use crate::db::HirDatabase;\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -302,7 +302,7 @@ pub struct ClosureFnTraitImplData {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Impl {\n     /// A normal impl from an impl block.\n-    ImplBlock(ImplBlock),\n+    ImplBlock(ImplId),\n     /// Closure types implement the Fn traits synthetically.\n     ClosureFnTraitImpl(ClosureFnTraitImplData),\n }"}, {"sha": "67ac5422cf9f0d31a356089c1b0593ec9debc6fa", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35f57f35ec484422f06772ebe109c8fd28966ec5/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f57f35ec484422f06772ebe109c8fd28966ec5/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=35f57f35ec484422f06772ebe109c8fd28966ec5", "patch": "@@ -4,15 +4,15 @@ use std::sync::Arc;\n use log::debug;\n \n use chalk_ir::{\n-    cast::Cast, family::ChalkIr, Identifier, ImplId, Parameter, PlaceholderIndex, TypeId,\n-    TypeKindId, TypeName, UniverseIndex,\n+    cast::Cast, family::ChalkIr, Identifier, Parameter, PlaceholderIndex, TypeId, TypeKindId,\n+    TypeName, UniverseIndex,\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n use ra_db::CrateId;\n \n use hir_def::{\n-    lang_item::LangItemTarget, resolver::HasResolver, AstItemDef, ContainerId, GenericDefId,\n-    Lookup, TraitId, TypeAliasId,\n+    lang_item::LangItemTarget, resolver::HasResolver, AssocItemId, AstItemDef, ContainerId,\n+    GenericDefId, ImplId, Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name;\n \n@@ -23,7 +23,6 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    ImplBlock,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -435,14 +434,14 @@ where\n     fn struct_datum(&self, struct_id: chalk_ir::StructId) -> Arc<StructDatum<ChalkIr>> {\n         self.db.struct_datum(self.krate, struct_id)\n     }\n-    fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum<ChalkIr>> {\n+    fn impl_datum(&self, impl_id: chalk_ir::ImplId) -> Arc<ImplDatum<ChalkIr>> {\n         self.db.impl_datum(self.krate, impl_id)\n     }\n     fn impls_for_trait(\n         &self,\n         trait_id: chalk_ir::TraitId,\n         parameters: &[Parameter<ChalkIr>],\n-    ) -> Vec<ImplId> {\n+    ) -> Vec<chalk_ir::ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         if trait_id == UNKNOWN_TRAIT {\n             return Vec::new();\n@@ -614,7 +613,7 @@ pub(crate) fn struct_datum_query(\n pub(crate) fn impl_datum_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n-    impl_id: ImplId,\n+    impl_id: chalk_ir::ImplId,\n ) -> Arc<ImplDatum<ChalkIr>> {\n     let _p = ra_prof::profile(\"impl_datum\");\n     debug!(\"impl_datum {:?}\", impl_id);\n@@ -629,23 +628,31 @@ pub(crate) fn impl_datum_query(\n fn impl_block_datum(\n     db: &impl HirDatabase,\n     krate: CrateId,\n+    chalk_id: chalk_ir::ImplId,\n     impl_id: ImplId,\n-    impl_block: ImplBlock,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n-    let generic_params = db.generic_params(impl_block.id.into());\n+    let impl_data = db.impl_data(impl_id);\n+    let resolver = impl_id.resolver(db);\n+    let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+\n+    // `CoerseUnsized` has one generic parameter for the target type.\n+    let trait_ref =\n+        TraitRef::from_hir(db, &resolver, impl_data.target_trait.as_ref()?, Some(target_ty))?;\n+\n+    let generic_params = db.generic_params(impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n-    let trait_ref = impl_block.target_trait_ref(db)?.subst(&bound_vars);\n+    let trait_ref = trait_ref.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_block.krate(db).crate_id == krate {\n+    let impl_type = if impl_id.module(db).krate == krate {\n         chalk_rust_ir::ImplType::Local\n     } else {\n         chalk_rust_ir::ImplType::External\n     };\n-    let where_clauses = convert_where_clauses(db, impl_block.id.into(), &bound_vars);\n-    let negative = impl_block.is_negative(db);\n+    let where_clauses = convert_where_clauses(db, impl_id.into(), &bound_vars);\n+    let negative = impl_data.is_negative;\n     debug!(\n         \"impl {:?}: {}{} where {:?}\",\n-        impl_id,\n+        chalk_id,\n         if negative { \"!\" } else { \"\" },\n         trait_ref.display(db),\n         where_clauses\n@@ -660,18 +667,19 @@ fn impl_block_datum(\n \n     let impl_datum_bound = chalk_rust_ir::ImplDatumBound { trait_ref, where_clauses };\n     let trait_data = db.trait_data(trait_);\n-    let associated_ty_value_ids = impl_block\n-        .items(db)\n-        .into_iter()\n+    let associated_ty_value_ids = impl_data\n+        .items\n+        .iter()\n         .filter_map(|item| match item {\n-            crate::AssocItem::TypeAlias(type_alias) => Some(type_alias),\n+            AssocItemId::TypeAliasId(type_alias) => Some(*type_alias),\n             _ => None,\n         })\n-        .filter(|type_alias| {\n+        .filter(|&type_alias| {\n             // don't include associated types that don't exist in the trait\n-            trait_data.associated_type_by_name(&type_alias.name(db)).is_some()\n+            let name = &db.type_alias_data(type_alias).name;\n+            trait_data.associated_type_by_name(name).is_some()\n         })\n-        .map(|type_alias| AssocTyValue::TypeAlias(type_alias.id).to_chalk(db))\n+        .map(|type_alias| AssocTyValue::TypeAlias(type_alias).to_chalk(db))\n         .collect();\n     debug!(\"impl_datum: {:?}\", impl_datum_bound);\n     let impl_datum = ImplDatum {"}]}