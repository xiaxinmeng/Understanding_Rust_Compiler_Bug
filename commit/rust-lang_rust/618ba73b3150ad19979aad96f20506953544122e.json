{"sha": "618ba73b3150ad19979aad96f20506953544122e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOGJhNzNiMzE1MGFkMTk5NzlhYWQ5NmYyMDUwNjk1MzU0NDEyMmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-05T22:53:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T22:53:45Z"}, "message": "Rollup merge of #70750 - cuviper:direct-fuse, r=scottmcm\n\nMatch options directly in the Fuse implementation\n\nRather than using `as_ref()`, `as_mut()`, and `?`, we can use `match` directly to save a lot of generated code. This was mentioned as a possibility in https://github.com/rust-lang/rust/pull/70366#issuecomment-603462546, and I found that it had a very large impact on #70332 using `Fuse` within `Chain`. Let's evaluate this change on its own first.", "tree": {"sha": "d53ce464b1cb1034fd6c41d5f6e1e5786d249780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d53ce464b1cb1034fd6c41d5f6e1e5786d249780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618ba73b3150ad19979aad96f20506953544122e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeimF5CRBK7hj4Ov3rIwAAdHIIAKj1ea0S45n61CvUNUuV/szD\nJ1YHr61HuP3NGg6s+GVWAi5lWmhDZ/bD7pi1FpS+2REzghlmYPqQJZDL6sZ5ILL5\nLUbZiRRaAxqIQl9cHwCXF6VV7A6rNddX7ZTD/KRvchvC93jF1OjrbOytjlKpf151\ne0oNb/BPsibJLGvKe37KGTOtkva07WNEjrslWkz0NRT2ozumHaKH6iyPOBbAyzFz\nM4ntFhKgjXl6a+7Ugfd6gpVpJAVdz45a6OiP6Z3l7YnwD/6xzwQ0T5+r+PrDTLUG\n3/2bQGv2oKFyHhhE5ydwfpmgC7bHRH32+4M15WZ0A+cA+Q6W3X8pfWzdt/C5VRA=\n=QWoM\n-----END PGP SIGNATURE-----\n", "payload": "tree d53ce464b1cb1034fd6c41d5f6e1e5786d249780\nparent aafbe07af3eb9b497c5c24db0a5c7253b2125bbf\nparent 6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586127225 +0200\ncommitter GitHub <noreply@github.com> 1586127225 +0200\n\nRollup merge of #70750 - cuviper:direct-fuse, r=scottmcm\n\nMatch options directly in the Fuse implementation\n\nRather than using `as_ref()`, `as_mut()`, and `?`, we can use `match` directly to save a lot of generated code. This was mentioned as a possibility in https://github.com/rust-lang/rust/pull/70366#issuecomment-603462546, and I found that it had a very large impact on #70332 using `Fuse` within `Chain`. Let's evaluate this change on its own first.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618ba73b3150ad19979aad96f20506953544122e", "html_url": "https://github.com/rust-lang/rust/commit/618ba73b3150ad19979aad96f20506953544122e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618ba73b3150ad19979aad96f20506953544122e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafbe07af3eb9b497c5c24db0a5c7253b2125bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafbe07af3eb9b497c5c24db0a5c7253b2125bbf", "html_url": "https://github.com/rust-lang/rust/commit/aafbe07af3eb9b497c5c24db0a5c7253b2125bbf"}, {"sha": "6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6", "html_url": "https://github.com/rust-lang/rust/commit/6fdd4f37b7eb68a4a44d97db70ee6b805255f0e6"}], "stats": {"total": 137, "additions": 63, "deletions": 74}, "files": [{"sha": "23bc215aa779d09d1f6d2dc0ed38641617e6b818", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 63, "deletions": 74, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/618ba73b3150ad19979aad96f20506953544122e/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618ba73b3150ad19979aad96f20506953544122e/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=618ba73b3150ad19979aad96f20506953544122e", "patch": "@@ -28,6 +28,22 @@ impl<I> Fuse<I> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n \n+/// Fuse the iterator if the expression is `None`.\n+macro_rules! fuse {\n+    ($self:ident . iter . $($call:tt)+) => {\n+        match $self.iter {\n+            Some(ref mut iter) => match iter.$($call)+ {\n+                None => {\n+                    $self.iter = None;\n+                    None\n+                }\n+                item => item,\n+            },\n+            None => None,\n+        }\n+    };\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Fuse<I>\n where\n@@ -37,35 +53,36 @@ where\n \n     #[inline]\n     default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next())\n     }\n \n     #[inline]\n     default fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        let nth = self.iter.as_mut()?.nth(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth(n))\n     }\n \n     #[inline]\n     default fn last(self) -> Option<I::Item> {\n-        self.iter?.last()\n+        match self.iter {\n+            Some(iter) => iter.last(),\n+            None => None,\n+        }\n     }\n \n     #[inline]\n     default fn count(self) -> usize {\n-        self.iter.map_or(0, I::count)\n+        match self.iter {\n+            Some(iter) => iter.count(),\n+            None => 0,\n+        }\n     }\n \n     #[inline]\n     default fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.as_ref().map_or((0, Some(0)), I::size_hint)\n+        match self.iter {\n+            Some(ref iter) => iter.size_hint(),\n+            None => (0, Some(0)),\n+        }\n     }\n \n     #[inline]\n@@ -98,11 +115,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.find(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.find(predicate))\n     }\n }\n \n@@ -113,20 +126,12 @@ where\n {\n     #[inline]\n     default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next_back();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next_back())\n     }\n \n     #[inline]\n     default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        let nth = self.iter.as_mut()?.nth_back(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth_back(n))\n     }\n \n     #[inline]\n@@ -159,11 +164,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.rfind(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.rfind(predicate))\n     }\n }\n \n@@ -173,42 +174,30 @@ where\n     I: ExactSizeIterator,\n {\n     default fn len(&self) -> usize {\n-        self.iter.as_ref().map_or(0, I::len)\n-    }\n-\n-    default fn is_empty(&self) -> bool {\n-        self.iter.as_ref().map_or(true, I::is_empty)\n-    }\n-}\n-\n-// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`\n-impl<I: FusedIterator> Fuse<I> {\n-    #[inline(always)]\n-    fn as_inner(&self) -> &I {\n         match self.iter {\n-            Some(ref iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Some(ref iter) => iter.len(),\n+            None => 0,\n         }\n     }\n \n-    #[inline(always)]\n-    fn as_inner_mut(&mut self) -> &mut I {\n+    default fn is_empty(&self) -> bool {\n         match self.iter {\n-            Some(ref mut iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Some(ref iter) => iter.is_empty(),\n+            None => true,\n         }\n     }\n+}\n \n-    #[inline(always)]\n-    fn into_inner(self) -> I {\n-        match self.iter {\n-            Some(iter) => iter,\n+// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`.\n+// Implementing this as a directly-expanded macro helps codegen performance.\n+macro_rules! unchecked {\n+    ($self:ident) => {\n+        match $self {\n+            Fuse { iter: Some(iter) } => iter,\n             // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Fuse { iter: None } => unsafe { intrinsics::unreachable() },\n         }\n-    }\n+    };\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -218,27 +207,27 @@ where\n {\n     #[inline]\n     fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next()\n+        unchecked!(self).next()\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        self.as_inner_mut().nth(n)\n+        unchecked!(self).nth(n)\n     }\n \n     #[inline]\n     fn last(self) -> Option<I::Item> {\n-        self.into_inner().last()\n+        unchecked!(self).last()\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.into_inner().count()\n+        unchecked!(self).count()\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.as_inner().size_hint()\n+        unchecked!(self).size_hint()\n     }\n \n     #[inline]\n@@ -248,23 +237,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_fold(init, fold)\n+        unchecked!(self).try_fold(init, fold)\n     }\n \n     #[inline]\n     fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().fold(init, fold)\n+        unchecked!(self).fold(init, fold)\n     }\n \n     #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().find(predicate)\n+        unchecked!(self).find(predicate)\n     }\n }\n \n@@ -275,12 +264,12 @@ where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next_back()\n+        unchecked!(self).next_back()\n     }\n \n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().nth_back(n)\n+        unchecked!(self).nth_back(n)\n     }\n \n     #[inline]\n@@ -290,23 +279,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_rfold(init, fold)\n+        unchecked!(self).try_rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().rfold(init, fold)\n+        unchecked!(self).rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().rfind(predicate)\n+        unchecked!(self).rfind(predicate)\n     }\n }\n \n@@ -316,11 +305,11 @@ where\n     I: ExactSizeIterator + FusedIterator,\n {\n     fn len(&self) -> usize {\n-        self.as_inner().len()\n+        unchecked!(self).len()\n     }\n \n     fn is_empty(&self) -> bool {\n-        self.as_inner().is_empty()\n+        unchecked!(self).is_empty()\n     }\n }\n "}]}