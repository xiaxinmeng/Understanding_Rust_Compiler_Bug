{"sha": "0a20770f46138909d91a1db371ed7371caf704e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjA3NzBmNDYxMzg5MDlkOTFhMWRiMzcxZWQ3MzcxY2FmNzA0ZTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-09T19:34:23Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-14T16:22:47Z"}, "message": "Some renamings for clarity", "tree": {"sha": "91e0ce8cdaaf93abf97c08f69e99a8047f57f545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e0ce8cdaaf93abf97c08f69e99a8047f57f545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a20770f46138909d91a1db371ed7371caf704e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a20770f46138909d91a1db371ed7371caf704e1", "html_url": "https://github.com/rust-lang/rust/commit/0a20770f46138909d91a1db371ed7371caf704e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a20770f46138909d91a1db371ed7371caf704e1/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "html_url": "https://github.com/rust-lang/rust/commit/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "040c782e6963e3d43a22e39a3685c06f908652d4", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -189,9 +189,9 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     /// because Chalk does its own internal caching, the solver is wrapped in a\n     /// Mutex and the query is marked volatile, to make sure the cached state is\n     /// thrown away when input facts change.\n-    #[salsa::invoke(crate::ty::traits::solver_query)]\n+    #[salsa::invoke(crate::ty::traits::trait_solver_query)]\n     #[salsa::volatile]\n-    fn solver(&self, krate: Crate) -> Arc<Mutex<crate::ty::traits::Solver>>;\n+    fn trait_solver(&self, krate: Crate) -> Arc<Mutex<crate::ty::traits::Solver>>;\n \n     #[salsa::invoke(crate::ty::traits::chalk::associated_ty_data_query)]\n     fn associated_ty_data(&self, id: chalk_ir::TypeId) -> Arc<chalk_rust_ir::AssociatedTyDatum>;\n@@ -213,8 +213,8 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(crate::ty::traits::chalk::impl_datum_query)]\n     fn impl_datum(&self, krate: Crate, impl_id: chalk_ir::ImplId) -> Arc<chalk_rust_ir::ImplDatum>;\n \n-    #[salsa::invoke(crate::ty::traits::solve_query)]\n-    fn solve(\n+    #[salsa::invoke(crate::ty::traits::trait_solve_query)]\n+    fn trait_solve(\n         &self,\n         krate: Crate,\n         goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::Obligation>>,"}, {"sha": "4cf714f5dcdb988891c4f4731eac30f3cb76d960", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -26,7 +26,7 @@ pub(crate) use lower::{\n     callable_item_sig, generic_defaults_query, generic_predicates_query, type_for_def,\n     type_for_field, TypableDef,\n };\n-pub(crate) use traits::{Environment, InEnvironment, Obligation, ProjectionPredicate};\n+pub(crate) use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or"}, {"sha": "2535d4ae79e394d62a56c48bbcffb64bcdb05b26", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -68,7 +68,7 @@ fn deref_by_trait(\n \n     let canonical = super::Canonical { num_vars: 1 + ty.num_vars, value: in_env };\n \n-    let solution = db.solve(krate, canonical)?;\n+    let solution = db.trait_solve(krate, canonical)?;\n \n     match &solution {\n         Solution::Unique(vars) => {"}, {"sha": "36189e20df2da64a7171b06c53f57678ec248e22", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -29,8 +29,8 @@ use test_utils::tested_by;\n use super::{\n     autoderef, lower, method_resolution, op, primitive,\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, CallableDef, Environment, InEnvironment, ProjectionTy, Substs, TraitRef, Ty,\n-    TypableDef, TypeCtor,\n+    ApplicationTy, CallableDef, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n+    Ty, TypableDef, TypeCtor,\n };\n use crate::{\n     adt::VariantDef,\n@@ -170,7 +170,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n     body: Arc<Body>,\n     resolver: Resolver,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n-    trait_env: Arc<Environment>,\n+    trait_env: Arc<TraitEnvironment>,\n     obligations: Vec<Obligation>,\n     method_resolutions: FxHashMap<ExprId, Function>,\n     field_resolutions: FxHashMap<ExprId, StructField>,\n@@ -345,7 +345,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             let in_env = InEnvironment::new(self.trait_env.clone(), obligation.clone());\n             let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n             let solution =\n-                self.db.solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n+                self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n \n             match solution {\n                 Some(Solution::Unique(substs)) => {"}, {"sha": "894ba06955a0ea9b8299a82793a084e53d88e8ba", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -317,7 +317,10 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     Ty::from_hir(db, &resolver, type_ref)\n }\n \n-pub(crate) fn trait_env(db: &impl HirDatabase, resolver: &Resolver) -> Arc<super::Environment> {\n+pub(crate) fn trait_env(\n+    db: &impl HirDatabase,\n+    resolver: &Resolver,\n+) -> Arc<super::TraitEnvironment> {\n     let predicates = resolver\n         .where_predicates_in_scope()\n         .map(|pred| {\n@@ -326,7 +329,7 @@ pub(crate) fn trait_env(db: &impl HirDatabase, resolver: &Resolver) -> Arc<super\n         })\n         .collect::<Vec<_>>();\n \n-    Arc::new(super::Environment { predicates })\n+    Arc::new(super::TraitEnvironment { predicates })\n }\n \n /// Resolve the where clause(s) of an item with generics."}, {"sha": "d421bf9efeeb6a74ab7d029ecefb9d55c0627866", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -7,7 +7,7 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n-use super::{autoderef, lower, Canonical, Environment, InEnvironment, TraitRef};\n+use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n use crate::{\n     generics::HasGenericParams,\n     impl_block::{ImplBlock, ImplId, ImplItem},\n@@ -214,7 +214,7 @@ fn iterate_trait_method_candidates<T>(\n                 if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n                         let goal = generic_implements_goal(db, env.clone(), t, ty.clone());\n-                        if db.solve(krate, goal).is_none() {\n+                        if db.trait_solve(krate, goal).is_none() {\n                             continue 'traits;\n                         }\n                     }\n@@ -283,7 +283,7 @@ impl Ty {\n /// for all other parameters, to query Chalk with it.\n fn generic_implements_goal(\n     db: &impl HirDatabase,\n-    env: Arc<Environment>,\n+    env: Arc<TraitEnvironment>,\n     trait_: Trait,\n     self_ty: Canonical<Ty>,\n ) -> Canonical<InEnvironment<super::Obligation>> {"}, {"sha": "7dccd93bed6abca94ee563ea3bc533d430de2b52", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -27,7 +27,7 @@ struct ChalkContext<'a, DB> {\n     krate: Crate,\n }\n \n-pub(crate) fn solver_query(_db: &impl HirDatabase, _krate: Crate) -> Arc<Mutex<Solver>> {\n+pub(crate) fn trait_solver_query(_db: &impl HirDatabase, _krate: Crate) -> Arc<Mutex<Solver>> {\n     // krate parameter is just so we cache a unique solver per crate\n     let solver_choice = chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE };\n     debug!(\"Creating new solver for crate {:?}\", _krate);\n@@ -60,7 +60,7 @@ fn solve(\n     goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal>>,\n ) -> Option<chalk_solve::Solution> {\n     let context = ChalkContext { db, krate };\n-    let solver = db.solver(krate);\n+    let solver = db.trait_solver(krate);\n     debug!(\"solve goal: {:?}\", goal);\n     let solution = solver.lock().solve_with_fuel(&context, goal, Some(1000));\n     debug!(\"solve({:?}) => {:?}\", goal, solution);\n@@ -73,19 +73,19 @@ fn solve(\n /// ```\n /// we assume that `T: Default`.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct Environment {\n+pub struct TraitEnvironment {\n     pub predicates: Vec<GenericPredicate>,\n }\n \n /// Something (usually a goal), along with an environment.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct InEnvironment<T> {\n-    pub environment: Arc<Environment>,\n+    pub environment: Arc<TraitEnvironment>,\n     pub value: T,\n }\n \n impl<T> InEnvironment<T> {\n-    pub fn new(environment: Arc<Environment>, value: T) -> InEnvironment<T> {\n+    pub fn new(environment: Arc<TraitEnvironment>, value: T) -> InEnvironment<T> {\n         InEnvironment { environment, value }\n     }\n }\n@@ -117,12 +117,12 @@ pub struct ProjectionPredicate {\n }\n \n /// Solve a trait goal using Chalk.\n-pub(crate) fn solve_query(\n+pub(crate) fn trait_solve_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n     trait_ref: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n-    let _p = profile(\"solve_query\");\n+    let _p = profile(\"trait_solve_query\");\n     let canonical = trait_ref.to_chalk(db).cast();\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)"}, {"sha": "1b9ae8dc11ee14d6ec9e084990e9b4c4d78d928f", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -266,7 +266,7 @@ where\n     }\n }\n \n-impl ToChalk for Arc<super::Environment> {\n+impl ToChalk for Arc<super::TraitEnvironment> {\n     type Chalk = Arc<chalk_ir::Environment>;\n \n     fn to_chalk(self, db: &impl HirDatabase) -> Arc<chalk_ir::Environment> {\n@@ -289,7 +289,7 @@ impl ToChalk for Arc<super::Environment> {\n     fn from_chalk(\n         _db: &impl HirDatabase,\n         _env: Arc<chalk_ir::Environment>,\n-    ) -> Arc<super::Environment> {\n+    ) -> Arc<super::TraitEnvironment> {\n         unimplemented!()\n     }\n }"}, {"sha": "147d2b21d3985e9369ff57b2c167d466867650fc", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20770f46138909d91a1db371ed7371caf704e1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=0a20770f46138909d91a1db371ed7371caf704e1", "patch": "@@ -302,7 +302,7 @@ impl RootDatabase {\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n             hir::db::ImplDatumQuery\n-            hir::db::SolveQuery\n+            hir::db::TraitSolveQuery\n         ];\n         acc.sort_by_key(|it| std::cmp::Reverse(it.1));\n         acc"}]}