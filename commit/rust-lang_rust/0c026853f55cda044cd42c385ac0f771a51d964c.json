{"sha": "0c026853f55cda044cd42c385ac0f771a51d964c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDI2ODUzZjU1Y2RhMDQ0Y2Q0MmMzODVhYzBmNzcxYTUxZDk2NGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-15T19:47:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-15T19:47:22Z"}, "message": "Rustup to rustc 1.41.0-nightly (82cf3a448 2019-11-14)", "tree": {"sha": "7a5b4aedc6cc0dc94dae3a61307a7c920fad8336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5b4aedc6cc0dc94dae3a61307a7c920fad8336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c026853f55cda044cd42c385ac0f771a51d964c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c026853f55cda044cd42c385ac0f771a51d964c", "html_url": "https://github.com/rust-lang/rust/commit/0c026853f55cda044cd42c385ac0f771a51d964c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c026853f55cda044cd42c385ac0f771a51d964c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f86204326f9a9ce537136875af7d78a7e965fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f86204326f9a9ce537136875af7d78a7e965fd", "html_url": "https://github.com/rust-lang/rust/commit/42f86204326f9a9ce537136875af7d78a7e965fd"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e0d3a873f7c13ffbbcc7e475206b1409f2133b5b", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c026853f55cda044cd42c385ac0f771a51d964c/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c026853f55cda044cd42c385ac0f771a51d964c/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=0c026853f55cda044cd42c385ac0f771a51d964c", "patch": "@@ -3,7 +3,7 @@ use std::borrow::Cow;\n use rustc::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, GlobalId, InterpResult, Scalar,\n };\n-use rustc::ty::{layout::Align, Const};\n+use rustc::ty::{layout::Align, Const, ConstKind};\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup,\n     StackPopInfo,\n@@ -84,7 +84,7 @@ pub fn force_eval_const<'tcx>(\n     const_: &'tcx Const,\n ) -> &'tcx Const<'tcx> {\n     match const_.val {\n-        ConstValue::Unevaluated(def_id, ref substs) => {\n+        ConstKind::Unevaluated(def_id, ref substs) => {\n             let param_env = ParamEnv::reveal_all();\n             let substs = fx.monomorphize(substs);\n             let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n@@ -176,7 +176,7 @@ fn trans_const_place<'tcx>(\n             .get_raw(ptr.to_ref().to_scalar()?.to_ptr()?.alloc_id)?;\n         Ok(fx.tcx.intern_const_alloc(alloc.clone()))\n     };\n-    let alloc = result().expect(\"unable to convert ConstValue to Allocation\");\n+    let alloc = result().expect(\"unable to convert ConstKind to Allocation\");\n \n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n@@ -294,7 +294,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                 let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n \n                 let alloc = match const_.val {\n-                    ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n+                    ConstKind::Value(ConstValue::ByRef { alloc, offset }) if offset.bytes() == 0 => alloc,\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n "}, {"sha": "421160a34faf732503a5046505057b222f990371", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c026853f55cda044cd42c385ac0f771a51d964c/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c026853f55cda044cd42c385ac0f771a51d964c/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=0c026853f55cda044cd42c385ac0f771a51d964c", "patch": "@@ -1004,7 +1004,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const.val {\n-                    ConstValue::ByRef { alloc, offset } => {\n+                    ty::ConstKind::Value(ConstValue::ByRef { alloc, offset }) => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()"}]}