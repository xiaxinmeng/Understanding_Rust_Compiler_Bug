{"sha": "0ee069c70a20da4bebbe630d316481bfffa7ab42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTA2OWM3MGEyMGRhNGJlYmJlNjMwZDMxNjQ4MWJmZmZhN2FiNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:49Z"}, "message": "Rollup merge of #46814 - varkor:contrib-7, r=alexcrichton\n\nPrevent rustc overwriting input files\n\nIf rustc is invoked on a file that would be overwritten by the\ncompilation, the compilation now fails, to avoid accidental loss. This\nresolves #13019. Kudos to @estebank, whose patch I finished off.", "tree": {"sha": "07ed5dbc4c4ce10195b8375cfa1f9adf20fe56c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ed5dbc4c4ce10195b8375cfa1f9adf20fe56c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee069c70a20da4bebbe630d316481bfffa7ab42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee069c70a20da4bebbe630d316481bfffa7ab42", "html_url": "https://github.com/rust-lang/rust/commit/0ee069c70a20da4bebbe630d316481bfffa7ab42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee069c70a20da4bebbe630d316481bfffa7ab42/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4981e9742d085eed3953f2ae71c01b7d66d22e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4981e9742d085eed3953f2ae71c01b7d66d22e6", "html_url": "https://github.com/rust-lang/rust/commit/d4981e9742d085eed3953f2ae71c01b7d66d22e6"}, {"sha": "3a29f2878f33cadb0f63094e574bad222d63aef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a29f2878f33cadb0f63094e574bad222d63aef3", "html_url": "https://github.com/rust-lang/rust/commit/3a29f2878f33cadb0f63094e574bad222d63aef3"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "7e80139b791d1dfb5781e77a2915d9b8464a6d5c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -528,6 +528,25 @@ impl OutputFilenames {\n     pub fn filestem(&self) -> String {\n         format!(\"{}{}\", self.out_filestem, self.extra)\n     }\n+\n+    pub fn contains_path(&self, input_path: &PathBuf) -> bool {\n+        let input_path = input_path.canonicalize().ok();\n+        if input_path.is_none() {\n+            return false\n+        }\n+        match self.single_output_file {\n+            Some(ref output_path) => output_path.canonicalize().ok() == input_path,\n+            None => {\n+                for k in self.outputs.keys() {\n+                    let output_path = self.path(k.to_owned());\n+                    if output_path.canonicalize().ok() == input_path {\n+                        return true;\n+                    }\n+                }\n+                false\n+            }\n+        }\n+    }\n }\n \n pub fn host_triple() -> &'static str {\n@@ -596,6 +615,12 @@ impl Options {\n             ).map(|(src, dst)| (src.clone(), dst.clone())).collect()\n         )\n     }\n+\n+    /// True if there will be an output file generated\n+    pub fn will_create_output_file(&self) -> bool {\n+        !self.debugging_opts.parse_only && // The file is just being parsed\n+            !self.debugging_opts.ls // The file is just being queried\n+    }\n }\n \n // The type of entry function, so"}, {"sha": "a288ff6316f8316e77bd576ecbc350bf68b84d81", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -71,6 +71,7 @@ use profile;\n \n pub fn compile_input(sess: &Session,\n                      cstore: &CStore,\n+                     input_path: &Option<PathBuf>,\n                      input: &Input,\n                      outdir: &Option<PathBuf>,\n                      output: &Option<PathBuf>,\n@@ -142,6 +143,20 @@ pub fn compile_input(sess: &Session,\n         };\n \n         let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n+\n+        // Ensure the source file isn't accidentally overwritten during compilation.\n+        match *input_path {\n+            Some(ref input_path) => {\n+                if outputs.contains_path(input_path) && sess.opts.will_create_output_file() {\n+                    sess.err(&format!(\n+                        \"the input file \\\"{}\\\" would be overwritten by the generated executable\",\n+                        input_path.display()));\n+                    return Err(CompileIncomplete::Stopped);\n+                }\n+            },\n+            None => {}\n+        }\n+\n         let crate_name =\n             ::rustc_trans_utils::link::find_crate_name(Some(sess), &krate.attrs, input);\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {"}, {"sha": "60857505c7ac5277ed5aa97d29cb67fd14e2958c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -232,7 +232,7 @@ pub fn run_compiler<'a>(args: &[String],\n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader, sopts.file_path_mapping()));\n     let mut sess = session::build_session_with_codemap(\n-        sopts, input_file_path, descriptions, codemap, emitter_dest,\n+        sopts, input_file_path.clone(), descriptions, codemap, emitter_dest,\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -252,6 +252,7 @@ pub fn run_compiler<'a>(args: &[String],\n     let control = callbacks.build_controller(&sess, &matches);\n     (driver::compile_input(&sess,\n                            &cstore,\n+                           &input_file_path,\n                            &input,\n                            &odir,\n                            &ofile,"}, {"sha": "8e861f10dd8d4851c4fc2baf24fe37da897ec0b5", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -263,7 +263,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, cfgs: Vec<String>,\n     }\n \n     let res = panic::catch_unwind(AssertUnwindSafe(|| {\n-        driver::compile_input(&sess, &cstore, &input, &out, &None, None, &control)\n+        driver::compile_input(&sess, &cstore, &None, &input, &out, &None, None, &control)\n     }));\n \n     let compile_result = match res {"}, {"sha": "f0ab1d5dc0fec7eabec80afd1a2bb6c1c907e803", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -71,5 +71,5 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     let (sess, cstore) = basic_sess(sysroot);\n     let control = CompileController::basic();\n     let input = Input::Str { name: FileName::Anon, input: code };\n-    let _ = compile_input(&sess, &cstore, &input, &None, &Some(output), None, &control);\n+    let _ = compile_input(&sess, &cstore, &None, &input, &None, &Some(output), None, &control);\n }"}, {"sha": "0554627d67753cd7a79b57140cf66cf41550f1d2", "filename": "src/test/run-make/output-filename-overwrites-input/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp foo.rs $(TMPDIR)/foo\n+\t$(RUSTC) $(TMPDIR)/foo 2>&1 \\\n+\t\t| $(CGREP) -e \"the input file \\\".*foo\\\" would be overwritten by the generated executable\"\n+\t$(RUSTC) foo.rs 2>&1 && $(RUSTC) -Z ls $(TMPDIR)/foo 2>&1\n+\tcp foo.rs $(TMPDIR)/foo.rs\n+\t$(RUSTC) $(TMPDIR)/foo.rs -o $(TMPDIR)/foo.rs 2>&1 \\\n+\t\t| $(CGREP) -e \"the input file \\\".*foo.rs\\\" would be overwritten by the generated executable\""}, {"sha": "046d27a9f0fe55586ed5f82a1533900e04e6b1ec", "filename": "src/test/run-make/output-filename-overwrites-input/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "f161fe9f8e8df2f8d4ed7ac6ae31c35149492d29", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0ee069c70a20da4bebbe630d316481bfffa7ab42/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=0ee069c70a20da4bebbe630d316481bfffa7ab42", "patch": "@@ -7,8 +7,8 @@ all:\n \tcp foo.rs $(TMPDIR)/.foo.bar\n \t$(RUSTC) $(TMPDIR)/.foo.bar 2>&1 \\\n \t\t| $(CGREP) -e \"invalid character.*in crate name:\"\n-\tcp foo.rs $(TMPDIR)/+foo+bar\n-\t$(RUSTC) $(TMPDIR)/+foo+bar 2>&1 \\\n+\tcp foo.rs $(TMPDIR)/+foo+bar.rs\n+\t$(RUSTC) $(TMPDIR)/+foo+bar.rs 2>&1 \\\n \t\t| $(CGREP) -e \"invalid character.*in crate name:\"\n \tcp foo.rs $(TMPDIR)/-foo.rs\n \t$(RUSTC) $(TMPDIR)/-foo.rs 2>&1 \\"}]}