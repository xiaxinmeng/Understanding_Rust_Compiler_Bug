{"sha": "9fc298ca894204fc9699f8989b2d3f1bf425d583", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzI5OGNhODk0MjA0ZmM5Njk5Zjg5ODliMmQzZjFiZjQyNWQ1ODM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T18:00:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T18:00:00Z"}, "message": "Rollup merge of #80217 - camelid:io-read_to_string, r=m-ou-se\n\nAdd a `std::io::read_to_string` function\n\nI recognize that you're usually supposed to open an issue first, but the\nimplementation is very small so it's okay if this is closed and it was 'wasted\nwork' :)\n\n-----\n\nThe equivalent of `std::fs::read_to_string`, but generalized to all\n`Read` impls.\n\nAs the documentation on `std::io::read_to_string` says, the advantage of\nthis function is that it means you don't have to create a variable first\nand it provides more type safety since you can only get the buffer out\nif there were no errors. If you use `Read::read_to_string`, you have to\nremember to check whether the read succeeded because otherwise your\nbuffer will be empty.\n\nIt's friendlier to newcomers and better in most cases to use an explicit\nreturn value instead of an out parameter.", "tree": {"sha": "1b34c596a8c8c9b034cf1c4aa05e0a14bdb7193e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b34c596a8c8c9b034cf1c4aa05e0a14bdb7193e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc298ca894204fc9699f8989b2d3f1bf425d583", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIagCRBK7hj4Ov3rIwAAdHIIAAdYz5XrBy3HcKoN9Lk6Gs81\n1EZw+l4rAVHw+PzHSkGicnj1gev+NJCCEPJznmfNGNqZ5BxuS8RMqv8c5rWBBQSb\nkp6K0v1sprIZYsFuFty4vYjAg6U/L++NYRBGfN91o6faIqdDC4XDqvpCIXcZkm9n\nNiOolZWh+Lu7z0cip0heuNnaHBLFas3wnQm5orJQhqkOEQirFhnAhC2d/+F9sPHs\nZgxw+XZ59/SmVHUFbtYbN46jDZx3fMLT0UKluIDnNtUq6qJv/O8Y/urPZlknApM2\njDAJAG5LCWoZsAvgQ37pwDtlRMkF7av7x49N9j4i9aMl76Yq2mKYcEjClBH3RD0=\n=icqY\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b34c596a8c8c9b034cf1c4aa05e0a14bdb7193e\nparent 930371b3ae7aae262f62363c8c77d4903742c210\nparent 746329201546d38875bf1a7fa232453e833c01eb\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647200 +0000\ncommitter GitHub <noreply@github.com> 1610647200 +0000\n\nRollup merge of #80217 - camelid:io-read_to_string, r=m-ou-se\n\nAdd a `std::io::read_to_string` function\n\nI recognize that you're usually supposed to open an issue first, but the\nimplementation is very small so it's okay if this is closed and it was 'wasted\nwork' :)\n\n-----\n\nThe equivalent of `std::fs::read_to_string`, but generalized to all\n`Read` impls.\n\nAs the documentation on `std::io::read_to_string` says, the advantage of\nthis function is that it means you don't have to create a variable first\nand it provides more type safety since you can only get the buffer out\nif there were no errors. If you use `Read::read_to_string`, you have to\nremember to check whether the read succeeded because otherwise your\nbuffer will be empty.\n\nIt's friendlier to newcomers and better in most cases to use an explicit\nreturn value instead of an out parameter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc298ca894204fc9699f8989b2d3f1bf425d583", "html_url": "https://github.com/rust-lang/rust/commit/9fc298ca894204fc9699f8989b2d3f1bf425d583", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc298ca894204fc9699f8989b2d3f1bf425d583/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930371b3ae7aae262f62363c8c77d4903742c210", "url": "https://api.github.com/repos/rust-lang/rust/commits/930371b3ae7aae262f62363c8c77d4903742c210", "html_url": "https://github.com/rust-lang/rust/commit/930371b3ae7aae262f62363c8c77d4903742c210"}, {"sha": "746329201546d38875bf1a7fa232453e833c01eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/746329201546d38875bf1a7fa232453e833c01eb", "html_url": "https://github.com/rust-lang/rust/commit/746329201546d38875bf1a7fa232453e833c01eb"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "6b051400890ca1efddeaa27df20486b353b62991", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9fc298ca894204fc9699f8989b2d3f1bf425d583/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc298ca894204fc9699f8989b2d3f1bf425d583/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=9fc298ca894204fc9699f8989b2d3f1bf425d583", "patch": "@@ -944,6 +944,54 @@ pub trait Read {\n     }\n }\n \n+/// Read all bytes from a [reader][Read] into a new [`String`].\n+///\n+/// This is a convenience function for [`Read::read_to_string`]. Using this\n+/// function avoids having to create a variable first and provides more type\n+/// safety since you can only get the buffer out if there were no errors. (If you\n+/// use [`Read::read_to_string`] you have to remember to check whether the read\n+/// succeeded because otherwise your buffer will be empty or only partially full.)\n+///\n+/// # Performance\n+///\n+/// The downside of this function's increased ease of use and type safety is\n+/// that it gives you less control over performance. For example, you can't\n+/// pre-allocate memory like you can using [`String::with_capacity`] and\n+/// [`Read::read_to_string`]. Also, you can't re-use the buffer if an error\n+/// occurs while reading.\n+///\n+/// In many cases, this function's performance will be adequate and the ease of use\n+/// and type safety tradeoffs will be worth it. However, there are cases where you\n+/// need more control over performance, and in those cases you should definitely use\n+/// [`Read::read_to_string`] directly.\n+///\n+/// # Errors\n+///\n+/// This function forces you to handle errors because the output (the `String`)\n+/// is wrapped in a [`Result`]. See [`Read::read_to_string`] for the errors\n+/// that can occur. If any error occurs, you will get an [`Err`], so you\n+/// don't have to worry about your buffer being empty or partially full.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(io_read_to_string)]\n+///\n+/// # use std::io;\n+/// fn main() -> io::Result<()> {\n+///     let stdin = io::read_to_string(&mut io::stdin())?;\n+///     println!(\"Stdin was:\");\n+///     println!(\"{}\", stdin);\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"io_read_to_string\", issue = \"80218\")]\n+pub fn read_to_string<R: Read>(reader: &mut R) -> Result<String> {\n+    let mut buf = String::new();\n+    reader.read_to_string(&mut buf)?;\n+    Ok(buf)\n+}\n+\n /// A buffer type used with `Read::read_vectored`.\n ///\n /// It is semantically a wrapper around an `&mut [u8]`, but is guaranteed to be"}]}