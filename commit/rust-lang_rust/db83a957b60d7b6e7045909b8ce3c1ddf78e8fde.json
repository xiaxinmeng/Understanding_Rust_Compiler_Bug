{"sha": "db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODNhOTU3YjYwZDdiNmU3MDQ1OTA5YjhjZTNjMWRkZjc4ZThmZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:53:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:24Z"}, "message": "librustc: De-`@mut` `CrateContext::llsizingtypes`", "tree": {"sha": "b41f2794d78455c090eb29c6941468a2fd49198b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41f2794d78455c090eb29c6941468a2fd49198b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "html_url": "https://github.com/rust-lang/rust/commit/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "html_url": "https://github.com/rust-lang/rust/commit/06805209e4f03f32ec0e06b156bb76fbf8f7a93e"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "449862c898d140dcf6bd1f293d366d6d7868ce46", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "patch": "@@ -93,7 +93,7 @@ pub struct CrateContext {\n \n      module_data: RefCell<HashMap<~str, ValueRef>>,\n      lltypes: RefCell<HashMap<ty::t, Type>>,\n-     llsizingtypes: HashMap<ty::t, Type>,\n+     llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n      adt_reprs: HashMap<ty::t, @adt::Repr>,\n      symbol_hasher: Sha256,\n      type_hashcodes: HashMap<ty::t, @str>,\n@@ -204,7 +204,7 @@ impl CrateContext {\n                   impl_method_cache: RefCell::new(HashMap::new()),\n                   module_data: RefCell::new(HashMap::new()),\n                   lltypes: RefCell::new(HashMap::new()),\n-                  llsizingtypes: HashMap::new(),\n+                  llsizingtypes: RefCell::new(HashMap::new()),\n                   adt_reprs: HashMap::new(),\n                   symbol_hasher: symbol_hasher,\n                   type_hashcodes: HashMap::new(),"}, {"sha": "2270b5aa05810ebb57c52a155274f0c1696fbf41", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "patch": "@@ -101,9 +101,12 @@ pub fn type_of_fn_from_ty(cx: &mut CrateContext, fty: ty::t) -> Type {\n //     recursive types. For example, enum types rely on this behavior.\n \n pub fn sizing_type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n-    match cx.llsizingtypes.find_copy(&t) {\n-        Some(t) => return t,\n-        None => ()\n+    {\n+        let llsizingtypes = cx.llsizingtypes.borrow();\n+        match llsizingtypes.get().find_copy(&t) {\n+            Some(t) => return t,\n+            None => ()\n+        }\n     }\n \n     let llsizingty = match ty::get(t).sty {\n@@ -166,7 +169,8 @@ pub fn sizing_type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n         }\n     };\n \n-    cx.llsizingtypes.insert(t, llsizingty);\n+    let mut llsizingtypes = cx.llsizingtypes.borrow_mut();\n+    llsizingtypes.get().insert(t, llsizingty);\n     llsizingty\n }\n "}]}