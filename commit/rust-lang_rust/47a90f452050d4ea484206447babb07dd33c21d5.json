{"sha": "47a90f452050d4ea484206447babb07dd33c21d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTkwZjQ1MjA1MGQ0ZWE0ODQyMDY0NDdiYWJiMDdkZDMzYzIxZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T01:17:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T01:17:02Z"}, "message": "Auto merge of #85535 - dtolnay:weakdangle, r=kennytm\n\nWeak's type parameter may dangle on drop\n\nWay back in https://github.com/rust-lang/rust/commit/34076bc0c9fb9ee718e1cebc407547eef730a080, #\\[may_dangle\\] was added to Rc\\<T\\> and Arc\\<T\\>'s Drop impls. That appears to have been because a test added in #28929 used Arc and Rc with dangling references at drop time. However, Weak was not covered by that test, and therefore no #\\[may_dangle\\] was forced to be added at the time.\n\nAs far as dropping, Weak has *even less need* to interact with the T than Rc and Arc do. Roughly speaking #\\[may_dangle\\] describes generic parameters that the outer type's Drop impl does not interact with except by possibly dropping them; no other interaction (such as trait method calls on the generic type) is permissible. It's clear this applies to Rc's and Arc's drop impl, which sometimes drop T but otherwise do not interact with one. It applies *even more* to Weak. Dropping a Weak cannot ever cause T's drop impl to run. Either there are strong references still in existence, in which case better not drop the T. Or there are no strong references still in existence, in which case the T would already have been dropped previously by the drop of the last strong count.", "tree": {"sha": "36cc6db15488f9ff8766259d39bb8f02be2eb63a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cc6db15488f9ff8766259d39bb8f02be2eb63a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a90f452050d4ea484206447babb07dd33c21d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a90f452050d4ea484206447babb07dd33c21d5", "html_url": "https://github.com/rust-lang/rust/commit/47a90f452050d4ea484206447babb07dd33c21d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a90f452050d4ea484206447babb07dd33c21d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2c947c00f867b9f012e28ba88cecfbe556f904", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2c947c00f867b9f012e28ba88cecfbe556f904", "html_url": "https://github.com/rust-lang/rust/commit/ff2c947c00f867b9f012e28ba88cecfbe556f904"}, {"sha": "23a4050f7dbc8675df6305b9968a3d5648518ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a4050f7dbc8675df6305b9968a3d5648518ff4", "html_url": "https://github.com/rust-lang/rust/commit/23a4050f7dbc8675df6305b9968a3d5648518ff4"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "f19a13c8defefd0da569ce8a675dd502dda7c8c9", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=47a90f452050d4ea484206447babb07dd33c21d5", "patch": "@@ -2303,7 +2303,7 @@ impl<T: ?Sized> Weak<T> {\n }\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n-impl<T: ?Sized> Drop for Weak<T> {\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Weak<T> {\n     /// Drops the `Weak` pointer.\n     ///\n     /// # Examples"}, {"sha": "02a739309cde037ce3ac628248d779578995327e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=47a90f452050d4ea484206447babb07dd33c21d5", "patch": "@@ -2015,7 +2015,7 @@ impl<T> Default for Weak<T> {\n }\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n-impl<T: ?Sized> Drop for Weak<T> {\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Weak<T> {\n     /// Drops the `Weak` pointer.\n     ///\n     /// # Examples"}, {"sha": "ce40b5c9b0a0d3a5948635c131dc1b353adbbcfb", "filename": "library/alloc/tests/arc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Farc.rs?ref=47a90f452050d4ea484206447babb07dd33c21d5", "patch": "@@ -195,3 +195,18 @@ fn shared_from_iter_trustedlen_no_fuse() {\n     assert_trusted_len(&iter);\n     assert_eq!(&[Box::new(42), Box::new(24)], &*iter.collect::<Rc<[_]>>());\n }\n+\n+#[test]\n+fn weak_may_dangle() {\n+    fn hmm<'a>(val: &'a mut Weak<&'a str>) -> Weak<&'a str> {\n+        val.clone()\n+    }\n+\n+    // Without #[may_dangle] we get:\n+    let mut val = Weak::new();\n+    hmm(&mut val);\n+    //  ~~~~~~~~ borrowed value does not live long enough\n+    //\n+    // `val` dropped here while still borrowed\n+    // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::sync::Weak`\n+}"}, {"sha": "efb39a609665b33ad2e6b9b43a75533a98f1feb5", "filename": "library/alloc/tests/rc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a90f452050d4ea484206447babb07dd33c21d5/library%2Falloc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Frc.rs?ref=47a90f452050d4ea484206447babb07dd33c21d5", "patch": "@@ -191,3 +191,18 @@ fn shared_from_iter_trustedlen_no_fuse() {\n     assert_trusted_len(&iter);\n     assert_eq!(&[Box::new(42), Box::new(24)], &*iter.collect::<Rc<[_]>>());\n }\n+\n+#[test]\n+fn weak_may_dangle() {\n+    fn hmm<'a>(val: &'a mut Weak<&'a str>) -> Weak<&'a str> {\n+        val.clone()\n+    }\n+\n+    // Without #[may_dangle] we get:\n+    let mut val = Weak::new();\n+    hmm(&mut val);\n+    //  ~~~~~~~~ borrowed value does not live long enough\n+    //\n+    // `val` dropped here while still borrowed\n+    // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::rc::Weak`\n+}"}]}