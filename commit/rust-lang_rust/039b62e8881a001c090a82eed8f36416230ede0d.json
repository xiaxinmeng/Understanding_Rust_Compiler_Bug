{"sha": "039b62e8881a001c090a82eed8f36416230ede0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOWI2MmU4ODgxYTAwMWMwOTBhODJlZWQ4ZjM2NDE2MjMwZWRlMGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T09:15:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T09:15:27Z"}, "message": "Rollup merge of #80482 - matthiaskrgr:cl0ne_on_copy, r=jyn514\n\ndon't clone copy types\n\nr? `@Dylan-DPC`", "tree": {"sha": "7fc3d5ce3fdbe6f9c7727633c4e0911a1a5e404e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc3d5ce3fdbe6f9c7727633c4e0911a1a5e404e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039b62e8881a001c090a82eed8f36416230ede0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7EUvCRBK7hj4Ov3rIwAAdHIIAB4VoHMW0G4wJNwOzUWLRJt9\n1eXy6SyRy/hfoPFy+P7jZiOJio560NnJFSDQgcWefqvULXYL2kzql3gLWLJkJ4ew\nsvyqnsBc0HWWIpBpNZaI5gsi9YjPDlNDsqiAyJVF6J6o5Ti3obgS/ui3NX2r5Rl8\nd/wDtA80VYgMT1iAeYGWe42eRkosR9dLrC9VSnpb6phuolnYiSkNmke+SO4sBZwa\nfmTJGdLtC4AC6qgbv/pBqQXbmJabofJyv+ly8LsgpomzP3LJS+s7eiWfir47R/ll\njkTfRKACcEvJLZoXlTso2kkHeA3KPsrX844EKA2HAhayJoU2xlFqy9slmrDxcu4=\n=RuOY\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fc3d5ce3fdbe6f9c7727633c4e0911a1a5e404e\nparent 9576ee97d1f824281e34ecd531965c33bb2e9dd2\nparent 17a8c1017f189b9921794b90e3fa3a46ed35e5c5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609319727 +0900\ncommitter GitHub <noreply@github.com> 1609319727 +0900\n\nRollup merge of #80482 - matthiaskrgr:cl0ne_on_copy, r=jyn514\n\ndon't clone copy types\n\nr? `@Dylan-DPC`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039b62e8881a001c090a82eed8f36416230ede0d", "html_url": "https://github.com/rust-lang/rust/commit/039b62e8881a001c090a82eed8f36416230ede0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039b62e8881a001c090a82eed8f36416230ede0d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9576ee97d1f824281e34ecd531965c33bb2e9dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9576ee97d1f824281e34ecd531965c33bb2e9dd2", "html_url": "https://github.com/rust-lang/rust/commit/9576ee97d1f824281e34ecd531965c33bb2e9dd2"}, {"sha": "17a8c1017f189b9921794b90e3fa3a46ed35e5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a8c1017f189b9921794b90e3fa3a46ed35e5c5", "html_url": "https://github.com/rust-lang/rust/commit/17a8c1017f189b9921794b90e3fa3a46ed35e5c5"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "e27eac3f69b00e5fe25620529303c436cf53012c", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -116,7 +116,7 @@ pub struct NativeLib {\n \n impl From<&cstore::NativeLib> for NativeLib {\n     fn from(lib: &cstore::NativeLib) -> Self {\n-        NativeLib { kind: lib.kind.clone(), name: lib.name.clone(), cfg: lib.cfg.clone() }\n+        NativeLib { kind: lib.kind, name: lib.name, cfg: lib.cfg.clone() }\n     }\n }\n "}, {"sha": "2a8b6a321f1c6c7841af3bea2684fecf6307892e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -597,7 +597,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                             ref mut bindings, ..\n                                         } => {\n                                             bindings.push(TypeBinding {\n-                                                name: left_name.clone(),\n+                                                name: left_name,\n                                                 kind: TypeBindingKind::Equality { ty: rhs },\n                                             });\n                                         }\n@@ -665,7 +665,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 GenericParamDefKind::Type { ref mut default, ref mut bounds, .. } => {\n                     // We never want something like `impl<T=Foo>`.\n                     default.take();\n-                    let generic_ty = Type::Generic(param.name.clone());\n+                    let generic_ty = Type::Generic(param.name);\n                     if !has_sized.contains(&generic_ty) {\n                         bounds.insert(0, GenericBound::maybe_sized(self.cx));\n                     }"}, {"sha": "e56556b5af70c4395662d51b5f2dba5600157eb7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         where_predicates.retain(|pred| match *pred {\n             WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n                 if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n-                    sized_params.insert(g.clone());\n+                    sized_params.insert(*g);\n                     false\n                 } else {\n                     true\n@@ -847,7 +847,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 && !sized_params.contains(&tp.name)\n             {\n                 where_predicates.push(WP::BoundPredicate {\n-                    ty: Type::Generic(tp.name.clone()),\n+                    ty: Type::Generic(tp.name),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n                 })\n             }"}, {"sha": "2cde0c209ee9ba2905a52729fb7077111341d6c6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -74,7 +74,7 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             )\n         }));\n         m.items.extend(keywords.into_iter().map(|(def_id, kw)| {\n-            Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n+            Item::from_def_id_and_parts(def_id, Some(kw), ItemKind::KeywordItem(kw), cx)\n         }));\n     }\n \n@@ -307,7 +307,7 @@ crate fn strip_path(path: &Path) -> Path {\n         .segments\n         .iter()\n         .map(|s| PathSegment {\n-            name: s.name.clone(),\n+            name: s.name,\n             args: GenericArgs::AngleBracketed { args: vec![], bindings: vec![] },\n         })\n         .collect();"}, {"sha": "407076ed6fff61953742943b777e06ab5d7b3c6e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -538,7 +538,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n         let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n-        let crate_name = krate.name.clone();\n+        let crate_name = krate.name;\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n         if !root_path.ends_with('/') {\n@@ -3967,7 +3967,7 @@ fn render_impl(\n         cache: &Cache,\n     ) {\n         for trait_item in &t.items {\n-            let n = trait_item.name.clone();\n+            let n = trait_item.name;\n             if i.items.iter().any(|m| m.name == n) {\n                 continue;\n             }"}, {"sha": "aa100363a38baee2b0ac67c6d858fe5cce13065e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b62e8881a001c090a82eed8f36416230ede0d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=039b62e8881a001c090a82eed8f36416230ede0d", "patch": "@@ -1234,7 +1234,7 @@ impl LinkCollector<'_, '_> {\n     ) -> Option<(Res, Option<String>)> {\n         // Try to look up both the result and the corresponding side channel value\n         if let Some(ref cached) = self.visited_links.get(&key) {\n-            self.kind_side_channel.set(cached.side_channel.clone());\n+            self.kind_side_channel.set(cached.side_channel);\n             return Some(cached.res.clone());\n         }\n "}]}