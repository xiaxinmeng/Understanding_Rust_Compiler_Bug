{"sha": "12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "node_id": "C_kwDOAAsO6NoAKDEyYjcxZWQ0YzVkZmM2OTM3Njk0OTdkOTY0MmQ0ZWYzOGI5ZmZmZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T02:09:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-26T02:09:29Z"}, "message": "Auto merge of #94385 - matthiaskrgr:rollup-4pwegqk, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93603 (Populate liveness facts when calling `get_body_with_borrowck_facts` without `-Z polonius`)\n - #93870 (Fix switch on discriminant detection in a presence of coverage counters)\n - #94355 (Add one more case to avoid ICE)\n - #94363 (Remove needless borrows from core::fmt)\n - #94377 (`check_used` should only look at actual `used` attributes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2982a3225bfea9e9aaf9247afbfdfd2ddd9178c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2982a3225bfea9e9aaf9247afbfdfd2ddd9178c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "html_url": "https://github.com/rust-lang/rust/commit/12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d973b358c6dc5261f9c13e4ef7f9ab58586d628e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d973b358c6dc5261f9c13e4ef7f9ab58586d628e", "html_url": "https://github.com/rust-lang/rust/commit/d973b358c6dc5261f9c13e4ef7f9ab58586d628e"}, {"sha": "04f77803eed8616c32cf95d6620a1f07648d2640", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f77803eed8616c32cf95d6620a1f07648d2640", "html_url": "https://github.com/rust-lang/rust/commit/04f77803eed8616c32cf95d6620a1f07648d2640"}], "stats": {"total": 134, "additions": 109, "deletions": 25}, "files": [{"sha": "6fd9f4954a6cc869694e13b4700aa31f451f1939", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -188,6 +188,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             move_data,\n             elements,\n             upvars,\n+            use_polonius,\n         );\n \n     if let Some(all_facts) = &mut all_facts {"}, {"sha": "ac8670a513820f108bd62f29321c131904e90de0", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -37,6 +37,7 @@ pub(super) fn generate<'mir, 'tcx>(\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     location_table: &LocationTable,\n+    use_polonius: bool,\n ) {\n     debug!(\"liveness::generate\");\n \n@@ -46,7 +47,7 @@ pub(super) fn generate<'mir, 'tcx>(\n         &typeck.borrowck_context.constraints.outlives_constraints,\n     );\n     let live_locals = compute_live_locals(typeck.tcx(), &free_regions, &body);\n-    let facts_enabled = AllFacts::enabled(typeck.tcx());\n+    let facts_enabled = use_polonius || AllFacts::enabled(typeck.tcx());\n \n     let polonius_drop_used = if facts_enabled {\n         let mut drop_used = Vec::new();"}, {"sha": "fdbf95591c8b838fd1d4dd330d0bcb236d94b960", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -136,6 +136,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     upvars: &[Upvar<'tcx>],\n+    use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let mut universe_causes = FxHashMap::default();\n@@ -187,7 +188,15 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut borrowck_context,\n         |mut cx| {\n             cx.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n-            liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n+            liveness::generate(\n+                &mut cx,\n+                body,\n+                elements,\n+                flow_inits,\n+                move_data,\n+                location_table,\n+                use_polonius,\n+            );\n \n             translate_outlives_facts(&mut cx);\n             let opaque_type_values = mem::take(&mut infcx.inner.borrow_mut().opaque_types);"}, {"sha": "7d6a08d47dae1bb7eb84e24e3be5c2d28f848d16", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -706,24 +706,27 @@ fn switch_on_enum_discriminant<'mir, 'tcx>(\n     block: &'mir mir::BasicBlockData<'tcx>,\n     switch_on: mir::Place<'tcx>,\n ) -> Option<(mir::Place<'tcx>, &'tcx ty::AdtDef)> {\n-    match block.statements.last().map(|stmt| &stmt.kind) {\n-        Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(discriminated))))\n-            if *lhs == switch_on =>\n-        {\n-            match &discriminated.ty(body, tcx).ty.kind() {\n-                ty::Adt(def, _) => Some((*discriminated, def)),\n-\n-                // `Rvalue::Discriminant` is also used to get the active yield point for a\n-                // generator, but we do not need edge-specific effects in that case. This may\n-                // change in the future.\n-                ty::Generator(..) => None,\n-\n-                t => bug!(\"`discriminant` called on unexpected type {:?}\", t),\n+    for statement in block.statements.iter().rev() {\n+        match &statement.kind {\n+            mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(discriminated)))\n+                if *lhs == switch_on =>\n+            {\n+                match &discriminated.ty(body, tcx).ty.kind() {\n+                    ty::Adt(def, _) => return Some((*discriminated, def)),\n+\n+                    // `Rvalue::Discriminant` is also used to get the active yield point for a\n+                    // generator, but we do not need edge-specific effects in that case. This may\n+                    // change in the future.\n+                    ty::Generator(..) => return None,\n+\n+                    t => bug!(\"`discriminant` called on unexpected type {:?}\", t),\n+                }\n             }\n+            mir::StatementKind::Coverage(_) => continue,\n+            _ => return None,\n         }\n-\n-        _ => None,\n     }\n+    None\n }\n \n struct OnMutBorrow<F>(F);"}, {"sha": "6e4907fe518ae1626594a112ec015dfeb11b0e6a", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -1740,8 +1740,8 @@ impl CheckAttrVisitor<'_> {\n     fn check_used(&self, attrs: &[Attribute], target: Target) {\n         let mut used_linker_span = None;\n         let mut used_compiler_span = None;\n-        for attr in attrs {\n-            if attr.has_name(sym::used) && target != Target::Static {\n+        for attr in attrs.iter().filter(|attr| attr.has_name(sym::used)) {\n+            if target != Target::Static {\n                 self.tcx\n                     .sess\n                     .span_err(attr.span, \"attribute must be applied to a `static` variable\");"}, {"sha": "d884073126306f4e0a43b852c39a21edb535664b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -313,6 +313,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) => {\n                         // A reborrow has no effect before a dereference.\n                     }\n+                    // Catch cases which have Deref(None)\n+                    // having them slip to bug! causes ICE\n+                    // see #94291 for more info\n+                    (&[Adjustment { kind: Adjust::Deref(None), .. }], _) => {\n+                        self.tcx.sess.delay_span_bug(\n+                            DUMMY_SP,\n+                            &format!(\"Can't compose Deref(None) expressions\"),\n+                        )\n+                    }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n                     _ => bug!("}, {"sha": "32d1a4e55083428dee2923730ce162130a63bb94", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 writer.write_str(name)?;\n                 writer.write_str(\": \")?;\n                 value.fmt(&mut writer)?;\n@@ -189,7 +189,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n                 if self.is_pretty() {\n                     let mut slot = None;\n                     let mut state = Default::default();\n-                    let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                    let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                     writer.write_str(\"..\\n\")?;\n                     self.fmt.write_str(\"}\")\n                 } else {\n@@ -323,7 +323,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 value.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")\n             } else {\n@@ -394,7 +394,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 let mut state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut state);\n                 entry.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")\n             } else {\n@@ -789,7 +789,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n                 }\n                 let mut slot = None;\n                 self.state = Default::default();\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut self.state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut self.state);\n                 key.fmt(&mut writer)?;\n                 writer.write_str(\": \")?;\n             } else {\n@@ -845,7 +845,7 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n \n             if self.is_pretty() {\n                 let mut slot = None;\n-                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut self.state);\n+                let mut writer = PadAdapter::wrap(self.fmt, &mut slot, &mut self.state);\n                 value.fmt(&mut writer)?;\n                 writer.write_str(\",\\n\")?;\n             } else {"}, {"sha": "d0bbe76ef3e570a222485efae4caa8cacd1424d8", "filename": "src/test/ui/attributes/used_with_arg_no_mangle.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg_no_mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg_no_mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg_no_mangle.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(used_with_arg)]\n+\n+#[used(linker)]\n+#[no_mangle] // accidentally detected as `used(compiler)`\n+pub static GLOB: usize = 0;\n+\n+fn main() {}"}, {"sha": "275cb38693f0e463eeefe0a764bb44fceb33b1b4", "filename": "src/test/ui/consts/precise-drop-with-coverage.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-coverage.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -0,0 +1,16 @@\n+// Checks that code coverage doesn't interfere with const_precise_live_drops.\n+// Regression test for issue #93848.\n+//\n+// check-pass\n+// compile-flags: --crate-type=lib -Cinstrument-coverage  -Zno-profiler-runtime\n+\n+#![feature(const_precise_live_drops)]\n+\n+#[inline]\n+pub const fn transpose<T, E>(this: Option<Result<T, E>>) -> Result<Option<T>, E> {\n+    match this {\n+        Some(Ok(x)) => Ok(Some(x)),\n+        Some(Err(e)) => Err(e),\n+        None => Ok(None),\n+    }\n+}"}, {"sha": "da967d8c1467610c87b497a2367eb7beca3bf478", "filename": "src/test/ui/tuple/wrong_argument_ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -0,0 +1,17 @@\n+use std::collections::VecDeque;\n+\n+pub struct BuildPlanBuilder {\n+    acc: VecDeque<(String, String)>,\n+    current_provides: String,\n+    current_requires: String,\n+}\n+\n+impl BuildPlanBuilder {\n+    pub fn or(&mut self) -> &mut Self {\n+        self.acc.push_back(self.current_provides, self.current_requires);\n+        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e96a957350b2fdb231116bf4ffe3895ca20e0a7c", "filename": "src/test/ui/tuple/wrong_argument_ice.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12b71ed4c5dfc693769497d9642d4ef38b9fffd3/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=12b71ed4c5dfc693769497d9642d4ef38b9fffd3", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/wrong_argument_ice.rs:11:18\n+   |\n+LL |         self.acc.push_back(self.current_provides, self.current_requires);\n+   |                  ^^^^^^^^^ ---------------------  --------------------- supplied 2 arguments\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/collections/vec_deque/mod.rs:LL:COL\n+   |\n+LL |     pub fn push_back(&mut self, value: T) {\n+   |            ^^^^^^^^^\n+help: use parentheses to construct a tuple\n+   |\n+LL |         self.acc.push_back((self.current_provides, self.current_requires));\n+   |                            +                                            +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}]}