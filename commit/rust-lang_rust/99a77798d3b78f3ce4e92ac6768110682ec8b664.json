{"sha": "99a77798d3b78f3ce4e92ac6768110682ec8b664", "node_id": "C_kwDOAAsO6NoAKDk5YTc3Nzk4ZDNiNzhmM2NlNGU5MmFjNjc2ODExMDY4MmVjOGI2NjQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-25T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-28T20:48:42Z"}, "message": "Fix inconsistent symbol mangling of integers constants with -Zverbose\n\nThe `PrettyPrinter` changes formatting of array size and integer\nconstants based on `-Zverbose`, so its implementation cannot be used in\nlegacy symbol mangling.", "tree": {"sha": "c85b769c79f3f4fb7962ad4f070c4e776de33d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85b769c79f3f4fb7962ad4f070c4e776de33d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a77798d3b78f3ce4e92ac6768110682ec8b664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a77798d3b78f3ce4e92ac6768110682ec8b664", "html_url": "https://github.com/rust-lang/rust/commit/99a77798d3b78f3ce4e92ac6768110682ec8b664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a77798d3b78f3ce4e92ac6768110682ec8b664/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6634cc3c2adb534bb564f3fa49be7cfe82744c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6634cc3c2adb534bb564f3fa49be7cfe82744c3", "html_url": "https://github.com/rust-lang/rust/commit/f6634cc3c2adb534bb564f3fa49be7cfe82744c3"}], "stats": {"total": 512, "additions": 505, "deletions": 7}, "files": [{"sha": "6e526bf8fc77a697635ec384017a5dcad38b735e", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/99a77798d3b78f3ce4e92ac6768110682ec8b664/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a77798d3b78f3ce4e92ac6768110682ec8b664/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=99a77798d3b78f3ce4e92ac6768110682ec8b664", "patch": "@@ -216,14 +216,32 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_type(self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+    fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n+\n+            // The `pretty_print_type` formatting of array size depends on\n+            // -Zverbose flag, so we cannot reuse it here.\n+            ty::Array(ty, size) => {\n+                self.write_str(\"[\")?;\n+                self = self.print_type(ty)?;\n+                self.write_str(\"; \")?;\n+                if let Some(size) = size.val().try_to_bits(self.tcx().data_layout.pointer_size) {\n+                    write!(self, \"{}\", size)?\n+                } else if let ty::ConstKind::Param(param) = size.val() {\n+                    self = param.print(self)?\n+                } else {\n+                    self.write_str(\"_\")?\n+                }\n+                self.write_str(\"]\")?;\n+                Ok(self)\n+            }\n+\n             _ => self.pretty_print_type(ty),\n         }\n     }\n@@ -245,12 +263,22 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n \n     fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // only print integers\n-        if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int { .. })) = ct.val() {\n-            if ct.ty().is_integral() {\n-                return self.pretty_print_const(ct, true);\n+        match (ct.val(), ct.ty().kind()) {\n+            (\n+                ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(scalar))),\n+                ty::Int(_) | ty::Uint(_),\n+            ) => {\n+                // The `pretty_print_const` formatting depends on -Zverbose\n+                // flag, so we cannot reuse it here.\n+                let signed = matches!(ct.ty().kind(), ty::Int(_));\n+                write!(\n+                    self,\n+                    \"{:#?}\",\n+                    ty::ConstInt::new(scalar, signed, ct.ty().is_ptr_sized_integral())\n+                )?;\n             }\n+            _ => self.write_str(\"_\")?,\n         }\n-        self.write_str(\"_\")?;\n         Ok(self)\n     }\n "}, {"sha": "0ae699c93c2de67d3fa189850ee65e1a65449a5b", "filename": "src/test/ui/symbol-names/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99a77798d3b78f3ce4e92ac6768110682ec8b664/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a77798d3b78f3ce4e92ac6768110682ec8b664/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs?ref=99a77798d3b78f3ce4e92ac6768110682ec8b664", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n-// revisions: legacy\n+// revisions: legacy verbose-legacy\n // compile-flags: --crate-name=a -C symbol-mangling-version=legacy -Z unstable-options\n-//\n+//[verbose-legacy]compile-flags: -Zverbose\n // normalize-stderr-test: \"h[[:xdigit:]]{16}\" -> \"h[HASH]\"\n \n #![feature(never_type)]"}, {"sha": "a4984d5629f7d4f734cc46ffceb64234370f636a", "filename": "src/test/ui/symbol-names/types.verbose-legacy.stderr", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/rust-lang/rust/blob/99a77798d3b78f3ce4e92ac6768110682ec8b664/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99a77798d3b78f3ce4e92ac6768110682ec8b664/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr?ref=99a77798d3b78f3ce4e92ac6768110682ec8b664", "patch": "@@ -0,0 +1,470 @@\n+error: symbol-name(_ZN1a1b16Type$LT$bool$GT$17h[HASH]E)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<bool>::h[HASH])\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<bool>)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b16Type$LT$char$GT$17h[HASH]E)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<char>::h[HASH])\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<char>)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$i8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i8>::h[HASH])\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i8>)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i16>::h[HASH])\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i16>)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i32>::h[HASH])\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i32>)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i64>::h[HASH])\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i64>)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u8>::h[HASH])\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u8>)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u16>::h[HASH])\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u16>)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u32>::h[HASH])\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u32>)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u64>::h[HASH])\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u64>)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f32>::h[HASH])\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f32>)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f64>::h[HASH])\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f64>)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<str>::h[HASH])\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<str>)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b17Type$LT$$u21$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<!>::h[HASH])\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<!>)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b20Type$LT$$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<()>::h[HASH])\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<()>)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b25Type$LT$$LP$u8$C$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,)>::h[HASH])\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,)>)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$LP$u8$C$u16$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16)>::h[HASH])\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16)>)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$LP$u8$C$u16$C$u32$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16,u32)>::h[HASH])\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16,u32)>)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$BP$const$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*const u8>::h[HASH])\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*const u8>)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b26Type$LT$$BP$mut$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*mut u8>::h[HASH])\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*mut u8>)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b19Type$LT$$RF$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&str>::h[HASH])\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&str>)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b27Type$LT$$RF$mut$u20$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&mut str>::h[HASH])\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&mut str>)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b35Type$LT$$u5b$u8$u3b$$u20$0$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[u8; 0]>::h[HASH])\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[u8; 0]>)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b22Type$LT$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<fn()>::h[HASH])\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<fn()>)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b60Type$LT$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<unsafe extern \"C\" fn()>::h[HASH])\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<unsafe extern \"C\" fn()>)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$u5b$T$u3b$$u20$N$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[T; N]>::h[HASH])\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[T; N]>)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 78 previous errors\n+"}]}