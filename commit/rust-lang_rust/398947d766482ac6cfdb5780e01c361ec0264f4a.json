{"sha": "398947d766482ac6cfdb5780e01c361ec0264f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODk0N2Q3NjY0ODJhYzZjZmRiNTc4MGUwMWMzNjFlYzAyNjRmNGE=", "commit": {"author": {"name": "Paul Li\u00e9tar", "email": "lietar@google.com", "date": "2017-10-05T00:12:59Z"}, "committer": {"name": "Paul Li\u00e9tar", "email": "lietar@google.com", "date": "2017-10-27T21:01:34Z"}, "message": "Undo changes to core::ptr", "tree": {"sha": "74e02b957173ab741546e12e58f98445fa12339d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e02b957173ab741546e12e58f98445fa12339d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398947d766482ac6cfdb5780e01c361ec0264f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398947d766482ac6cfdb5780e01c361ec0264f4a", "html_url": "https://github.com/rust-lang/rust/commit/398947d766482ac6cfdb5780e01c361ec0264f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398947d766482ac6cfdb5780e01c361ec0264f4a/comments", "author": null, "committer": null, "parents": [{"sha": "77f7e85d7f4ebcc1a291edae95a3747b0e54d7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f7e85d7f4ebcc1a291edae95a3747b0e54d7fa", "html_url": "https://github.com/rust-lang/rust/commit/77f7e85d7f4ebcc1a291edae95a3747b0e54d7fa"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "01990f61feeb3cbda9babdccf1e2f651e31f3d41", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/398947d766482ac6cfdb5780e01c361ec0264f4a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398947d766482ac6cfdb5780e01c361ec0264f4a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=398947d766482ac6cfdb5780e01c361ec0264f4a", "patch": "@@ -485,9 +485,8 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool {\n-        // cast to () pointer, as T may not be sized\n-        self as *const () == null()\n+    pub fn is_null(self) -> bool where T: Sized {\n+        self == null()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -518,7 +517,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n             None\n         } else {\n@@ -1117,9 +1116,8 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool {\n-        // cast to () pointer, as T may not be sized\n-        self as *mut () == null_mut()\n+    pub fn is_null(self) -> bool where T: Sized {\n+        self == null_mut()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -1150,7 +1148,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n             None\n         } else {\n@@ -1274,7 +1272,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n+    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> where T: Sized {\n         if self.is_null() {\n             None\n         } else {"}]}