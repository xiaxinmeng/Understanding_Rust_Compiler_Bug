{"sha": "682875929efe558b42318d6ae8b2ef8dc625e94a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Mjg3NTkyOWVmZTU1OGI0MjMxOGQ2YWU4YjJlZjhkYzYyNWU5NGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-18T07:24:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-18T07:24:21Z"}, "message": "rustc: Stub binary operator translation", "tree": {"sha": "93bf5ae30edb8552d37c0beeebbdb7343564d9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bf5ae30edb8552d37c0beeebbdb7343564d9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682875929efe558b42318d6ae8b2ef8dc625e94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682875929efe558b42318d6ae8b2ef8dc625e94a", "html_url": "https://github.com/rust-lang/rust/commit/682875929efe558b42318d6ae8b2ef8dc625e94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682875929efe558b42318d6ae8b2ef8dc625e94a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437b77610001d7fc9b41ce50d82db94cc3c642ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/437b77610001d7fc9b41ce50d82db94cc3c642ac", "html_url": "https://github.com/rust-lang/rust/commit/437b77610001d7fc9b41ce50d82db94cc3c642ac"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "91d7fef8fd4d3231bc207c393f32d14cd79784ae", "filename": "src/comp/middle/trans_dps.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/682875929efe558b42318d6ae8b2ef8dc625e94a/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682875929efe558b42318d6ae8b2ef8dc625e94a/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs?ref=682875929efe558b42318d6ae8b2ef8dc625e94a", "patch": "@@ -221,6 +221,36 @@ fn malloc(&@block_ctxt bcx, ValueRef lldest, heap heap,\n     ret bcx;\n }\n \n+// If the supplied destination is an alias, spills to a temporary. Returns the\n+// new destination.\n+fn spill_alias(&@block_ctxt cx, &dest dest, ty::t t)\n+        -> tup(@block_ctxt, dest) {\n+    auto bcx = cx;\n+    alt (dest) {\n+      dst_alias(?box) {\n+        // TODO: Mark the alias as needing a cleanup.\n+        assert (std::option::is_none(*box));\n+        auto r = trans::alloc_ty(cx, t);\n+        bcx = r.bcx; auto llptr = r.val;\n+        *box = some(llptr);\n+        ret tup(bcx, dst_move(llptr));\n+      }\n+      _ { ret tup(bcx, dest); }\n+    }\n+}\n+\n+fn mk_temp(&@block_ctxt cx, ty::t t) -> tup(@block_ctxt, dest) {\n+    auto bcx = cx;\n+    if ty::type_is_nil(bcx_tcx(bcx), t) { ret tup(bcx, dst_nil); }\n+    if trans::type_is_immediate(bcx_ccx(bcx), t) {\n+        ret tup(bcx, dst_imm(@mutable none));\n+    }\n+\n+    auto r = trans::alloc_ty(cx, t);\n+    bcx = r.bcx; auto llptr = r.val;\n+    ret tup(bcx, dst_copy(llptr));\n+}\n+\n \n // AST substructure translation, with destinations\n \n@@ -257,6 +287,20 @@ fn trans_lit(&@block_ctxt cx, &dest dest, &ast::lit lit) -> @block_ctxt {\n     ret bcx;\n }\n \n+fn trans_binary(&@block_ctxt cx, &dest in_dest, ast::binop op,\n+                &@ast::expr lhs, &@ast::expr rhs) -> @block_ctxt {\n+    auto bcx = cx;\n+    auto r = spill_alias(bcx, in_dest, ty::expr_ty(bcx_tcx(bcx), lhs));\n+    bcx = r._0; auto dest = r._1;\n+    bcx = trans_expr(bcx, dest, lhs);\n+\n+    r = mk_temp(bcx, ty::expr_ty(bcx_tcx(bcx), rhs));\n+    bcx = r._0; auto rhs_tmp = r._1;\n+    bcx = trans_expr(bcx, rhs_tmp, rhs);\n+\n+    ret bcx;    // TODO\n+}\n+\n fn trans_log(&@block_ctxt cx, &span sp, int level, &@ast::expr expr)\n         -> @block_ctxt {\n     fn trans_log_level(&@local_ctxt lcx) -> ValueRef {\n@@ -363,6 +407,9 @@ fn trans_expr(&@block_ctxt bcx, &dest dest, &@ast::expr expr) -> @block_ctxt {\n       ast::expr_log(?level, ?operand) {\n         ret trans_log(bcx, expr.span, level, operand);\n       }\n+      ast::expr_binary(?op, ?lhs, ?rhs) {\n+        ret trans_binary(bcx, dest, op, lhs, rhs);\n+      }\n       _ { fail \"unhandled expr type in trans_expr\"; }\n     }\n }"}]}