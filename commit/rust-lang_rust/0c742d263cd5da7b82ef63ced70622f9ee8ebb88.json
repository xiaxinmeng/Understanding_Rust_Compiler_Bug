{"sha": "0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzQyZDI2M2NkNWRhN2I4MmVmNjNjZWQ3MDYyMmY5ZWU4ZWJiODg=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-06-12T17:27:17Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-06-14T14:24:06Z"}, "message": "rustdoc: Fix redirect pages for renamed reexports\n\nWe need to use the name of the target not the name of the current item\nwhen creating the link.", "tree": {"sha": "d2862ca38f14897edbbe0bbfd793516f5fc01613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2862ca38f14897edbbe0bbfd793516f5fc01613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "html_url": "https://github.com/rust-lang/rust/commit/0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c742d263cd5da7b82ef63ced70622f9ee8ebb88/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76698b5eecb4b8addc43a4a58a739da39bcbaaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76698b5eecb4b8addc43a4a58a739da39bcbaaa", "html_url": "https://github.com/rust-lang/rust/commit/a76698b5eecb4b8addc43a4a58a739da39bcbaaa"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "0b6065c56c699e3bd99fb8200f5456019207875e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c742d263cd5da7b82ef63ced70622f9ee8ebb88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c742d263cd5da7b82ef63ced70622f9ee8ebb88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "patch": "@@ -1343,12 +1343,12 @@ impl Context {\n             } else {\n                 let mut url = repeat(\"../\").take(cx.current.len())\n                                            .collect::<String>();\n-                if let Some(&(ref names, _)) = cache().paths.get(&it.def_id) {\n+                if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {\n                     for name in &names[..names.len() - 1] {\n                         url.push_str(name);\n                         url.push_str(\"/\");\n                     }\n-                    url.push_str(&item_path(it));\n+                    url.push_str(&item_path(ty, names.last().unwrap()));\n                     layout::redirect(writer, &url)?;\n                 }\n             }\n@@ -1409,7 +1409,8 @@ impl Context {\n             render(&mut buf, self, &item, true).unwrap();\n             // buf will be empty if the item is stripped and there is no redirect for it\n             if !buf.is_empty() {\n-                let joint_dst = self.dst.join(&item_path(&item));\n+                let joint_dst = self.dst.join(&item_path(shortty(&item),\n+                                                         item.name.as_ref().unwrap()));\n                 try_err!(fs::create_dir_all(&self.dst), &self.dst);\n                 let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n                 try_err!(dst.write_all(&buf), &joint_dst);\n@@ -1531,7 +1532,7 @@ impl<'a> Item<'a> {\n             Some(format!(\"{root}{path}/{file}?gotosrc={goto}\",\n                          root = root,\n                          path = path[..path.len() - 1].join(\"/\"),\n-                         file = item_path(self.item),\n+                         file = item_path(shortty(self.item), self.item.name.as_ref().unwrap()),\n                          goto = self.item.def_id.index.as_usize()))\n         }\n     }\n@@ -1623,13 +1624,10 @@ impl<'a> fmt::Display for Item<'a> {\n     }\n }\n \n-fn item_path(item: &clean::Item) -> String {\n-    if item.is_mod() {\n-        format!(\"{}/index.html\", item.name.as_ref().unwrap())\n-    } else {\n-        format!(\"{}.{}.html\",\n-                shortty(item).to_static_str(),\n-                *item.name.as_ref().unwrap())\n+fn item_path(ty: ItemType, name: &str) -> String {\n+    match ty {\n+        ItemType::Module => format!(\"{}/index.html\", name),\n+        _ => format!(\"{}.{}.html\", ty.to_static_str(), name),\n     }\n }\n \n@@ -1821,7 +1819,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        docs = shorter(Some(&Markdown(doc_value).to_string())),\n                        class = shortty(myitem),\n                        stab = myitem.stability_class(),\n-                       href = item_path(myitem),\n+                       href = item_path(shortty(myitem), myitem.name.as_ref().unwrap()),\n                        title = full_path(cx, myitem))?;\n             }\n         }"}, {"sha": "b7c702dcc1fc599956f69cf543aa51ca2c9245b2", "filename": "src/test/rustdoc/redirect-rename.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0c742d263cd5da7b82ef63ced70622f9ee8ebb88/src%2Ftest%2Frustdoc%2Fredirect-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c742d263cd5da7b82ef63ced70622f9ee8ebb88/src%2Ftest%2Frustdoc%2Fredirect-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-rename.rs?ref=0c742d263cd5da7b82ef63ced70622f9ee8ebb88", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+mod hidden {\n+    // @has foo/hidden/struct.Foo.html\n+    // @has - '//p/a' '../../foo/struct.FooBar.html'\n+    pub struct Foo {}\n+\n+    // @has foo/hidden/bar/index.html\n+    // @has - '//p/a' '../../foo/baz/index.html'\n+    pub mod bar {\n+        // @has foo/hidden/bar/struct.Thing.html\n+        // @has - '//p/a' '../../foo/baz/struct.Thing.html'\n+        pub struct Thing {}\n+    }\n+}\n+\n+// @has foo/struct.FooBar.html\n+pub use hidden::Foo as FooBar;\n+\n+// @has foo/baz/index.html\n+// @has foo/baz/struct.Thing.html\n+pub use hidden::bar as baz;"}]}