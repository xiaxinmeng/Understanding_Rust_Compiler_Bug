{"sha": "03715907f46f79250904c799a59b87c26c2b0377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzE1OTA3ZjQ2Zjc5MjUwOTA0Yzc5OWE1OWI4N2MyNmMyYjAzNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T07:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T07:50:41Z"}, "message": "Auto merge of #1332 - RalfJung:disable-alignment-check, r=RalfJung\n\nAdd option to disable alignment check\n\nRequires https://github.com/rust-lang/rust/pull/71101\nFixes https://github.com/rust-lang/miri/issues/1326", "tree": {"sha": "cfbda0f8abd7bb2a4ab5f1d346f5ae664e9be5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbda0f8abd7bb2a4ab5f1d346f5ae664e9be5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03715907f46f79250904c799a59b87c26c2b0377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03715907f46f79250904c799a59b87c26c2b0377", "html_url": "https://github.com/rust-lang/rust/commit/03715907f46f79250904c799a59b87c26c2b0377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03715907f46f79250904c799a59b87c26c2b0377/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0e32c7579980c8984fbd1389229017c1200341", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0e32c7579980c8984fbd1389229017c1200341", "html_url": "https://github.com/rust-lang/rust/commit/df0e32c7579980c8984fbd1389229017c1200341"}, {"sha": "f4a15444cf90452876733549731ab94517656e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a15444cf90452876733549731ab94517656e8b", "html_url": "https://github.com/rust-lang/rust/commit/f4a15444cf90452876733549731ab94517656e8b"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "76f95ee55e8020773112643ef0ef244d3b5bf10e", "filename": "README.md", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -165,43 +165,51 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see\n ## Miri `-Z` flags and environment variables\n [miri-flags]: #miri--z-flags-and-environment-variables\n \n-Several `-Z` flags are relevant for Miri:\n-\n-* `-Zmiri-seed=<hex>` is a custom `-Z` flag added by Miri.  It configures the\n-  seed of the RNG that Miri uses to resolve non-determinism.  This RNG is used\n-  to pick base addresses for allocations.  When isolation is enabled (the default),\n-  this is also used to emulate system entropy.  The default seed is 0.\n-  **NOTE**: This entropy is not good enough for cryptographic use!  Do not\n-  generate secret keys in Miri or perform other kinds of cryptographic\n-  operations that rely on proper random numbers.\n-* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n-  enforced by default.  This is mostly useful for debugging.  It means Miri will\n-  miss bugs in your program.  However, this can also help to make Miri run\n-  faster.\n+Miri adds its own set of `-Z` flags:\n+\n+* `-Zmiri-disable-alignment-check` disables checking pointer alignment. This is\n+  useful to avoid [false positives][alignment-false-positives]. However, setting\n+  this flag means Miri could miss bugs in your program.\n * `-Zmiri-disable-stacked-borrows` disables checking the experimental\n   [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n   means no aliasing violations will be detected.\n+* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n+  enforced by default.  This is mostly useful to focus on other failures (such\n+  as out-of-bounds accesses) first.  Setting this flag means Miri will miss bugs\n+  in your program.  However, this can also help to make Miri run faster.\n * `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n-* `-Zmiri-ignore-leaks` disables the memory leak checker.\n * `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from\n-  the host. Can be used multiple times to exclude several variables. The `TERM`\n-  environment variable is excluded by default.\n+  the host so that it cannot be accessed by the program.  Can be used multiple\n+  times to exclude several variables.  On Windows, the `TERM` environment\n+  variable is excluded by default.\n+* `-Zmiri-ignore-leaks` disables the memory leak checker.\n+* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n+  non-determinism.  This RNG is used to pick base addresses for allocations.\n+  When isolation is enabled (the default), this is also used to emulate system\n+  entropy.  The default seed is 0.  **NOTE**: This entropy is not good enough\n+  for cryptographic use!  Do not generate secret keys in Miri or perform other\n+  kinds of cryptographic operations that rely on proper random numbers.\n+* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n+  being allocated.  This helps in debugging memory leaks.\n+* `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n+  is popped from a borrow stack (which is where the tag becomes invalid and any\n+  future use of it will error).  This helps you in finding out why UB is\n+  happening and where in your code would be a good place to look for it.\n+\n+[alignment-false-positives]: https://github.com/rust-lang/miri/issues/1074\n+\n+Some native rustc `-Z` flags are also very relevant for Miri:\n+\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away.\n * `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n   functions.  This is needed so that Miri can execute such functions, so Miri\n   sets this flag per default.\n * `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n-  enables this per default because it is needed for validation.\n-* `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n-  is popped from a borrow stack (which is where the tag becomes invalid and any\n-  future use of it will error).  This helps you in finding out why UB is\n-  happening and where in your code would be a good place to look for it.\n-* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n-  being allocated.  This helps in debugging memory leaks.\n+  enables this per default because it is needed for [Stacked Borrows].\n \n Moreover, Miri recognizes some environment variables:\n "}, {"sha": "48247d653cdcec7c70e3ef037d514ced7c37c04e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -1 +1 @@\n-4d1fbaccb822b6d52dc786589de7918d3c5effb1\n+47f49695dfb4fe9e584239fdc59c771887148a57"}, {"sha": "1ceb6e621a47b543e0ec0d59dbeca30d605da020", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -128,6 +128,7 @@ fn main() {\n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n     let mut stacked_borrows = true;\n+    let mut check_alignment = true;\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n@@ -152,6 +153,9 @@ fn main() {\n                 \"-Zmiri-disable-stacked-borrows\" => {\n                     stacked_borrows = false;\n                 }\n+                \"-Zmiri-disable-alignment-check\" => {\n+                    check_alignment = false;\n+                }\n                 \"-Zmiri-disable-isolation\" => {\n                     communicate = true;\n                 }\n@@ -243,6 +247,7 @@ fn main() {\n     let miri_config = miri::MiriConfig {\n         validate,\n         stacked_borrows,\n+        check_alignment,\n         communicate,\n         ignore_leaks,\n         excluded_env_vars,"}, {"sha": "2359b67323d753856d4d831c3f32138932cb0a9a", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -97,6 +97,7 @@ pub fn report_error<'tcx, 'mir>(\n                     vec![\n                         format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\"),\n                         format!(\"but alignment errors can also be false positives, see https://github.com/rust-lang/miri/issues/1074\"),\n+                        format!(\"you can disable the alignment check with `-Zmiri-disable-alignment-check`, but that could hide true bugs\")\n                     ],\n                 UndefinedBehavior(_) =>\n                     vec!["}, {"sha": "b360b1bd8bbc50daf86fada55c8e6490c6677f29", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -19,6 +19,8 @@ pub struct MiriConfig {\n     pub validate: bool,\n     /// Determines if Stacked Borrows is enabled.\n     pub stacked_borrows: bool,\n+    /// Determines if alignment checking is enabled.\n+    pub check_alignment: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     /// Determines if memory leaks should be ignored.\n@@ -40,6 +42,7 @@ impl Default for MiriConfig {\n         MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n+            check_alignment: true,\n             communicate: false,\n             ignore_leaks: false,\n             excluded_env_vars: vec![],\n@@ -72,6 +75,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             config.stacked_borrows,\n             config.tracked_pointer_tag,\n             config.tracked_alloc_id,\n+            config.check_alignment,\n         ),\n     );\n     // Complete initialization."}, {"sha": "54dfb49d798be55fd8e0d0a01718bd8094e906f6", "filename": "src/machine.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -118,10 +118,19 @@ pub struct MemoryExtra {\n     /// An allocation ID to report when it is being allocated\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n+\n+    /// Controls whether alignment of memory accesses is being checked.\n+    check_alignment: bool,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n+    pub fn new(\n+        rng: StdRng,\n+        stacked_borrows: bool,\n+        tracked_pointer_tag: Option<PtrId>,\n+        tracked_alloc_id: Option<AllocId>,\n+        check_alignment: bool,\n+    ) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n         } else {\n@@ -133,6 +142,7 @@ impl MemoryExtra {\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id,\n+            check_alignment,\n         }\n     }\n \n@@ -299,7 +309,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     const GLOBAL_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Global);\n \n-    const CHECK_ALIGN: bool = true;\n+    #[inline(always)]\n+    fn enforce_alignment(memory_extra: &MemoryExtra) -> bool {\n+        memory_extra.check_alignment\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "8532f91a5c0060ae77a5e8cf182df6d1409c31ce", "filename": "tests/compile-fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n-    // miri always gives allocations the worst possible alignment, so a `u8` array is guaranteed\n-    // to be at the virtual location 1 (so one byte offset from the ultimate alignemnt location 0)\n     let mut x = [0u8; 20];\n-    let x_ptr: *mut u8 = &mut x[0];\n-    let y_ptr = x_ptr as *mut u64;\n+    let x_ptr: *mut u8 = x.as_mut_ptr();\n+    // At least one of these is definitely unaligned.\n+    // Currently, we guarantee to complain about the first one already (https://github.com/rust-lang/miri/issues/1074).\n     unsafe {\n-        *y_ptr = 42; //~ ERROR accessing memory with alignment 1, but alignment\n+        *(x_ptr as *mut u64) = 42; //~ ERROR accessing memory with alignment 1, but alignment\n+        *(x_ptr.add(1) as *mut u64) = 42;\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "0a3b48dab5a0c2052634791b4782048d478db1ca", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -2,6 +2,8 @@\n // that arise from pointers being insufficiently aligned. The only way to achieve\n // that is not not let programs exploit integer information for alignment, so here\n // we test that this is indeed the case.\n+//\n+// See https://github.com/rust-lang/miri/issues/1074.\n fn main() {\n     let x = &mut [0u8; 3];\n     let base_addr = x as *mut _ as usize;"}, {"sha": "2fb0dd8369df723831da9eb3db49993a45d73673", "filename": "tests/run-pass/disable-alignment-check.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03715907f46f79250904c799a59b87c26c2b0377/tests%2Frun-pass%2Fdisable-alignment-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03715907f46f79250904c799a59b87c26c2b0377/tests%2Frun-pass%2Fdisable-alignment-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdisable-alignment-check.rs?ref=03715907f46f79250904c799a59b87c26c2b0377", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Zmiri-disable-alignment-check\n+\n+fn main() {\n+    let mut x = [0u8; 20];\n+    let x_ptr: *mut u8 = x.as_mut_ptr();\n+    // At least one of these is definitely unaligned.\n+    unsafe {\n+        *(x_ptr as *mut u64) = 42;\n+        *(x_ptr.add(1) as *mut u64) = 42;\n+    }\n+}"}]}