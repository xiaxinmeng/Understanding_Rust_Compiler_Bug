{"sha": "acad9f35b3aef8cc0d82c6a43c662ddc0f946568", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWQ5ZjM1YjNhZWY4Y2MwZDgyYzZhNDNjNjYyZGRjMGY5NDY1Njg=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:34:58Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:34:58Z"}, "message": "commenting out special Eq implementation for now\n\nSee the comments for details on why I'm leaving this code\nin, though commented out.", "tree": {"sha": "03dec67332189719211d24fdcfe9760622c42082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dec67332189719211d24fdcfe9760622c42082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acad9f35b3aef8cc0d82c6a43c662ddc0f946568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acad9f35b3aef8cc0d82c6a43c662ddc0f946568", "html_url": "https://github.com/rust-lang/rust/commit/acad9f35b3aef8cc0d82c6a43c662ddc0f946568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acad9f35b3aef8cc0d82c6a43c662ddc0f946568/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c96d754e3a5d4b8dd59269b0cb0324350ccbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c96d754e3a5d4b8dd59269b0cb0324350ccbec", "html_url": "https://github.com/rust-lang/rust/commit/77c96d754e3a5d4b8dd59269b0cb0324350ccbec"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "c2087928e8d8831e2b1dad5339e3834e3cb567d5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acad9f35b3aef8cc0d82c6a43c662ddc0f946568/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acad9f35b3aef8cc0d82c6a43c662ddc0f946568/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=acad9f35b3aef8cc0d82c6a43c662ddc0f946568", "patch": "@@ -24,15 +24,25 @@ use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n // table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving(Clone, IterBytes, ToStr)]\n+#[deriving(Clone, Eq, IterBytes, ToStr)]\n pub struct Ident { name: Name, ctxt: SyntaxContext }\n \n impl Ident {\n     /// Construct an identifier with the given name and an empty context:\n     pub fn new(name: Name) -> Ident { Ident {name: name, ctxt: EMPTY_CTXT}}\n }\n \n-impl Eq for Ident {\n+// defining eq in this way is a way of guaranteeing that later stages of the\n+// compiler don't compare identifiers unhygienically. Unfortunately, some tests\n+// (specifically debuginfo in no-opt) want to do these comparisons, and that\n+// seems fine.  If only I could find a nice way to statically ensure that\n+// the compiler \"proper\" never compares identifiers.... I'm leaving this\n+// code here (commented out) for potential use in debugging. Specifically, if\n+// there's a bug where \"identifiers aren't matching\", it may be because\n+// they should be compared using mtwt_resolve. In such a case, re-enabling this\n+// code (and disabling deriving(Eq) for Idents) could help to isolate the\n+// problem\n+/* impl Eq for Ident {\n     fn eq(&self, other: &Ident) -> bool {\n         if (self.ctxt == other.ctxt) {\n             self.name == other.name\n@@ -44,6 +54,7 @@ impl Eq for Ident {\n         ! self.eq(other)\n     }\n }\n+*/\n \n /// A SyntaxContext represents a chain of macro-expandings\n /// and renamings. Each macro expansion corresponds to"}]}