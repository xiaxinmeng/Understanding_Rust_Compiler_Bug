{"sha": "c945e30d100a79a2d2c73358d54d7545d03093ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NDVlMzBkMTAwYTc5YTJkMmM3MzM1OGQ1NGQ3NTQ1ZDAzMDkzYWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T15:30:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T07:16:58Z"}, "message": "setup routine to install xargo when missing", "tree": {"sha": "3abfbfbf0124a2696d2ed2880203c5f44484afa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3abfbfbf0124a2696d2ed2880203c5f44484afa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c945e30d100a79a2d2c73358d54d7545d03093ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c945e30d100a79a2d2c73358d54d7545d03093ac", "html_url": "https://github.com/rust-lang/rust/commit/c945e30d100a79a2d2c73358d54d7545d03093ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c945e30d100a79a2d2c73358d54d7545d03093ac/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd76c7ee1d81f97a797022c0f3cee01769d7178", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd76c7ee1d81f97a797022c0f3cee01769d7178", "html_url": "https://github.com/rust-lang/rust/commit/6bd76c7ee1d81f97a797022c0f3cee01769d7178"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "e39011db5ca70e1aa6f11bde35b7cbe1fec5dee3", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c945e30d100a79a2d2c73358d54d7545d03093ac/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c945e30d100a79a2d2c73358d54d7545d03093ac/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=c945e30d100a79a2d2c73358d54d7545d03093ac", "patch": "@@ -3,14 +3,19 @@\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n-use std::io::Write;\n+use std::io::{self, Write};\n use std::process::Command;\n \n \n const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates\n \n Usage:\n-    cargo miri [options] [--] [<opts>...]\n+    cargo miri [subcommand] [options] [--] [<opts>...]\n+\n+Subcommands:\n+    run                      Run binaries (default)\n+    test                     Run tests\n+    setup                    Only perform automatic setup, but without asking questions (for getting a proper libstd)\n \n Common options:\n     -h, --help               Print this message\n@@ -27,7 +32,7 @@ it to configure the resource limits\n available resource limits are `memory_size`, `step_limit`, `stack_limit`\n \"#;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum MiriCommand {\n     Run,\n     Test,\n@@ -43,6 +48,11 @@ fn show_version() {\n         env!(\"CARGO_PKG_VERSION\"), env!(\"VERGEN_SHA_SHORT\"), env!(\"VERGEN_COMMIT_DATE\"));\n }\n \n+fn show_error(msg: String) -> ! {\n+    eprintln!(\"fatal error: {}\", msg);\n+    std::process::exit(1)\n+}\n+\n fn list_targets(mut args: impl Iterator<Item=String>) -> impl Iterator<Item=cargo_metadata::Target> {\n     // We need to get the manifest, and then the metadata, to enumerate targets.\n     let manifest_path_arg = args.find(|val| {\n@@ -91,6 +101,40 @@ fn list_targets(mut args: impl Iterator<Item=String>) -> impl Iterator<Item=carg\n     package.targets.into_iter()\n }\n \n+fn ask(question: &str) {\n+    let mut buf = String::new();\n+    print!(\"{} [Y/n] \", question);\n+    io::stdout().flush().unwrap();\n+    io::stdin().read_line(&mut buf).unwrap();\n+    let answer = match buf.trim().to_lowercase().as_ref() {\n+        \"\" | \"y\" | \"yes\" => true,\n+        \"n\" | \"no\" => false,\n+        a => show_error(format!(\"I do not understand `{}`\", a))\n+    };\n+    if !answer {\n+        show_error(format!(\"Aborting as per your request\"))\n+    }\n+}\n+\n+/// Perform the setup requires to make `cargo miri` work: Getting a custom-built libstd. Then sets MIRI_SYSROOT.\n+/// Skipped if MIRI_SYSROOT is already set, in that case we expect the user has done all this already.\n+fn setup(ask_user: bool) {\n+    if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n+        return;\n+    }\n+\n+    // First, we need xargo\n+    if Command::new(\"xargo\").arg(\"--version\").output().is_err()\n+    {\n+        if ask_user {\n+            ask(\"It seems you do not have xargo installed. I will run `cargo install xargo`. Proceed?\");\n+        }\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\"]).status().unwrap().success() {\n+            show_error(format!(\"Failed to install xargo\"));\n+        }\n+    }\n+}\n+\n fn main() {\n     // Check for version and help flags even when invoked as 'cargo-miri'\n     if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n@@ -117,11 +161,15 @@ fn main() {\n             None => (MiriCommand::Run, 2),\n             // Unvalid command\n             Some(s) => {\n-                eprintln!(\"Unknown command `{}`\", s);\n-                std::process::exit(1)\n+                show_error(format!(\"Unknown command `{}`\", s))\n             }\n         };\n \n+        // We always setup\n+        let ask = subcommand != MiriCommand::Setup;\n+        setup(ask);\n+\n+        // Now run the command.\n         for target in list_targets(std::env::args().skip(skip)) {\n             let args = std::env::args().skip(skip);\n             let kind = target.kind.get(0).expect("}]}