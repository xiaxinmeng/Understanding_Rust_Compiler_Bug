{"sha": "e19857c4dbbde65803d619011af4415fbdda8c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOTg1N2M0ZGJiZGU2NTgwM2Q2MTkwMTFhZjQ0MTVmYmRkYThjMDE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-31T22:35:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:14Z"}, "message": "Optimize `glob_adjust` and `reverse_glob_adjust`.\n\nThey can each now do a single `HygieneData::with` call by replacing the\n`SyntaxContext` and `Mark` methods with the equivalent methods from\n`HygieneData`.", "tree": {"sha": "22765b8610a8f8b8901731a4e3bbd1025b08000a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22765b8610a8f8b8901731a4e3bbd1025b08000a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19857c4dbbde65803d619011af4415fbdda8c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19857c4dbbde65803d619011af4415fbdda8c01", "html_url": "https://github.com/rust-lang/rust/commit/e19857c4dbbde65803d619011af4415fbdda8c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19857c4dbbde65803d619011af4415fbdda8c01/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a486928e4bf78cc33aaae43ad835eb482b14f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a486928e4bf78cc33aaae43ad835eb482b14f1", "html_url": "https://github.com/rust-lang/rust/commit/58a486928e4bf78cc33aaae43ad835eb482b14f1"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "e50b9da62e76191bfbf217148c97b0408405adb8", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e19857c4dbbde65803d619011af4415fbdda8c01/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19857c4dbbde65803d619011af4415fbdda8c01/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=e19857c4dbbde65803d619011af4415fbdda8c01", "patch": "@@ -499,18 +499,20 @@ impl SyntaxContext {\n     /// This returns `None` if the context cannot be glob-adjusted.\n     /// Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).\n     pub fn glob_adjust(&mut self, expansion: Mark, glob_span: Span) -> Option<Option<Mark>> {\n-        let mut scope = None;\n-        let mut glob_ctxt = glob_span.ctxt().modern();\n-        while !expansion.outer_is_descendant_of(glob_ctxt) {\n-            scope = Some(glob_ctxt.remove_mark());\n-            if self.remove_mark() != scope.unwrap() {\n+        HygieneData::with(|data| {\n+            let mut scope = None;\n+            let mut glob_ctxt = data.modern(glob_span.ctxt());\n+            while !data.is_descendant_of(expansion, data.outer(glob_ctxt)) {\n+                scope = Some(data.remove_mark(&mut glob_ctxt));\n+                if data.remove_mark(self) != scope.unwrap() {\n+                    return None;\n+                }\n+            }\n+            if data.adjust(self, expansion).is_some() {\n                 return None;\n             }\n-        }\n-        if self.adjust(expansion).is_some() {\n-            return None;\n-        }\n-        Some(scope)\n+            Some(scope)\n+        })\n     }\n \n     /// Undo `glob_adjust` if possible:\n@@ -522,21 +524,23 @@ impl SyntaxContext {\n     /// ```\n     pub fn reverse_glob_adjust(&mut self, expansion: Mark, glob_span: Span)\n                                -> Option<Option<Mark>> {\n-        if self.adjust(expansion).is_some() {\n-            return None;\n-        }\n+        HygieneData::with(|data| {\n+            if data.adjust(self, expansion).is_some() {\n+                return None;\n+            }\n \n-        let mut glob_ctxt = glob_span.ctxt().modern();\n-        let mut marks = Vec::new();\n-        while !expansion.outer_is_descendant_of(glob_ctxt) {\n-            marks.push(glob_ctxt.remove_mark());\n-        }\n+            let mut glob_ctxt = data.modern(glob_span.ctxt());\n+            let mut marks = Vec::new();\n+            while !data.is_descendant_of(expansion, data.outer(glob_ctxt)) {\n+                marks.push(data.remove_mark(&mut glob_ctxt));\n+            }\n \n-        let scope = marks.last().cloned();\n-        while let Some(mark) = marks.pop() {\n-            *self = self.apply_mark(mark);\n-        }\n-        Some(scope)\n+            let scope = marks.last().cloned();\n+            while let Some(mark) = marks.pop() {\n+                *self = data.apply_mark(*self, mark);\n+            }\n+            Some(scope)\n+        })\n     }\n \n     #[inline]"}]}