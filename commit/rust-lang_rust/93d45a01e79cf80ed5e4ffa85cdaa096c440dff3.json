{"sha": "93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDQ1YTAxZTc5Y2Y4MGVkNWU0ZmZhODVjZGFhMDk2YzQ0MGRmZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T11:45:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T11:45:02Z"}, "message": "Rollup merge of #72368 - CAD97:rangeto, r=dtolnay\n\nResolve overflow behavior for RangeFrom\n\nThis specifies a documented unspecified implementation detail of `RangeFrom` and makes it consistently implement the specified behavior.\n\nSpecifically, `(u8::MAX).next()` is defined to cause an overflow, and resolve that overflow in the same manner as the `Step::forward` implementation.\n\nThe inconsistency that has existed is `<RangeFrom as Iterator>::nth`. The existing behavior should be plain to see after #69659: the skipping part previously always panicked if it caused an overflow, but the final step (to set up the state for further iteration) has always been debug-checked.\n\nThe inconsistency, then, is that `RangeFrom::nth` does not implement the same behavior as the naive (and default) implementation of just calling `next` multiple times. This PR aligns `RangeFrom::nth` to have identical behavior to the naive implementation. It also lines up with the standard behavior of primitive math in Rust everywhere else in the language: debug checked overflow.\n\ncc @Amanieu\n\n---\n\nFollowup to #69659. Closes #25708 (by documenting the panic as intended).\n\nThe documentation wording is preliminary and can probably be improved.\n\nThis will probably need an FCP, as it changes observable stable behavior.", "tree": {"sha": "44849ef9c57e43d4a2e96e650ebedb3f8e92a7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44849ef9c57e43d4a2e96e650ebedb3f8e92a7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0kc+CRBK7hj4Ov3rIwAAdHIIAAj/kr7eCCzKntFo2VgQh+Xz\nPYM7rdCL6kC5X7cfsI89CeBLQeadZxubA02lfLnhIBatwzdjgRbbjZMb/T0Vr9Z/\nY2iUK/AIckslYhacgqfz0vNTAjW4wRM9A8BbZX4W/FcaTa7KwsY0CGmWQ/56HgzF\no676x3wUNcI1uFhIXwXDugb37p29PNgx2Fgo4uIgu/EEN8maP6+671+yR6hNDJa5\nQy/NrRXKx27PLDelFgFH0dnI/omySY/tI4uUo/DPb+hi981x3vYqOH3dBozTplyk\nLsMSpf6oO6kQCW7wN044GngIwaJzocrXHng400RQYCZ7+xavRlstnAoAUVLo6K4=\n=VVig\n-----END PGP SIGNATURE-----\n", "payload": "tree 44849ef9c57e43d4a2e96e650ebedb3f8e92a7a9\nparent 35db8196f93a717173a8e58b076dd7c6d845629f\nparent 406852ae0d92e5dfda890fa75ac522963065f903\nauthor Ralf Jung <post@ralfj.de> 1590839102 +0200\ncommitter GitHub <noreply@github.com> 1590839102 +0200\n\nRollup merge of #72368 - CAD97:rangeto, r=dtolnay\n\nResolve overflow behavior for RangeFrom\n\nThis specifies a documented unspecified implementation detail of `RangeFrom` and makes it consistently implement the specified behavior.\n\nSpecifically, `(u8::MAX).next()` is defined to cause an overflow, and resolve that overflow in the same manner as the `Step::forward` implementation.\n\nThe inconsistency that has existed is `<RangeFrom as Iterator>::nth`. The existing behavior should be plain to see after #69659: the skipping part previously always panicked if it caused an overflow, but the final step (to set up the state for further iteration) has always been debug-checked.\n\nThe inconsistency, then, is that `RangeFrom::nth` does not implement the same behavior as the naive (and default) implementation of just calling `next` multiple times. This PR aligns `RangeFrom::nth` to have identical behavior to the naive implementation. It also lines up with the standard behavior of primitive math in Rust everywhere else in the language: debug checked overflow.\n\ncc @Amanieu\n\n---\n\nFollowup to #69659. Closes #25708 (by documenting the panic as intended).\n\nThe documentation wording is preliminary and can probably be improved.\n\nThis will probably need an FCP, as it changes observable stable behavior.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "html_url": "https://github.com/rust-lang/rust/commit/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35db8196f93a717173a8e58b076dd7c6d845629f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35db8196f93a717173a8e58b076dd7c6d845629f", "html_url": "https://github.com/rust-lang/rust/commit/35db8196f93a717173a8e58b076dd7c6d845629f"}, {"sha": "406852ae0d92e5dfda890fa75ac522963065f903", "url": "https://api.github.com/repos/rust-lang/rust/commits/406852ae0d92e5dfda890fa75ac522963065f903", "html_url": "https://github.com/rust-lang/rust/commit/406852ae0d92e5dfda890fa75ac522963065f903"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "bd7e6cfa5a750116009b7b407ebfeef82d9f1ecc", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "patch": "@@ -619,15 +619,7 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<A> {\n-        // If we would jump over the maximum value, panic immediately.\n-        // This is consistent with behavior before the Step redesign,\n-        // even though it's inconsistent with n `next` calls.\n-        // To get consistent behavior, change it to use `forward` instead.\n-        // This change should go through FCP separately to the redesign, so is for now left as a\n-        // FIXME: make this consistent\n-        let plus_n =\n-            Step::forward_checked(self.start.clone(), n).expect(\"overflow in RangeFrom::nth\");\n-        // The final step should always be debug-checked.\n+        let plus_n = Step::forward(self.start.clone(), n);\n         self.start = Step::forward(plus_n.clone(), 1);\n         Some(plus_n)\n     }"}, {"sha": "d86f39c4550c843fc3aa8f5212ccc5c633710e46", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d45a01e79cf80ed5e4ffa85cdaa096c440dff3/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=93d45a01e79cf80ed5e4ffa85cdaa096c440dff3", "patch": "@@ -151,10 +151,16 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// The `RangeFrom` `start..` contains all values with `x >= start`.\n ///\n-/// *Note*: Currently, no overflow checking is done for the [`Iterator`]\n-/// implementation; if you use an integer range and the integer overflows, it\n-/// might panic in debug mode or create an endless loop in release mode. **This\n-/// overflow behavior might change in the future.**\n+/// *Note*: Overflow in the [`Iterator`] implementation (when the contained\n+/// data type reaches its numerical limit) is allowed to panic, wrap, or\n+/// saturate. This behavior is defined by the implementation of the [`Step`]\n+/// trait. For primitive integers, this follows the normal rules, and respects\n+/// the overflow checks profile (panic in debug, wrap in release). Note also\n+/// that overflow happens earlier than you might assume: the overflow happens\n+/// in the call to `next` that yields the maximum value, as the range must be\n+/// set to a state to yield the next value.\n+///\n+/// [`Step`]: crate::iter::Step\n ///\n /// # Examples\n ///"}]}