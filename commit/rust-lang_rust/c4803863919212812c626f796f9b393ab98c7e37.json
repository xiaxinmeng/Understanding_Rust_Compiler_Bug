{"sha": "c4803863919212812c626f796f9b393ab98c7e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODAzODYzOTE5MjEyODEyYzYyNmY3OTZmOWIzOTNhYjk4YzdlMzc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-09-11T03:08:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-25T20:48:44Z"}, "message": "dump refs for path segments in save-analysis\n\nRequires adding path segments to the hir map", "tree": {"sha": "ba3962c7528305c5fffe0c84911f3b39a3833815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3962c7528305c5fffe0c84911f3b39a3833815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4803863919212812c626f796f9b393ab98c7e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4803863919212812c626f796f9b393ab98c7e37", "html_url": "https://github.com/rust-lang/rust/commit/c4803863919212812c626f796f9b393ab98c7e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4803863919212812c626f796f9b393ab98c7e37/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609d0bd8ac3f339697a0b036062ba7784ab41232", "url": "https://api.github.com/repos/rust-lang/rust/commits/609d0bd8ac3f339697a0b036062ba7784ab41232", "html_url": "https://github.com/rust-lang/rust/commit/609d0bd8ac3f339697a0b036062ba7784ab41232"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "1ac0d3946386a9833c5f91b7f445ca28893a57f2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -1861,6 +1861,7 @@ impl<'a> LoweringContext<'a> {\n         let def = self.expect_full_def(segment.id);\n         hir::PathSegment::new(\n             segment.ident,\n+            Some(segment.id),\n             Some(def),\n             generic_args,\n             infer_types,"}, {"sha": "7e5dd3f3756f7cbd72ed822d3a0adef549ec6d2a", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -392,6 +392,13 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment) {\n+        if let Some(id) = path_segment.id {\n+            self.insert(id, Node::PathSegment(path_segment));\n+        }\n+        intravisit::walk_path_segment(self, path_span, path_segment);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'hir Ty) {\n         self.insert(ty.id, Node::Ty(ty));\n "}, {"sha": "d89bb5db12f266d05440c1e4ca6ea379efbacefa", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -204,7 +204,7 @@ impl<'hir> Map<'hir> {\n         if let Some(entry) = self.map[id.as_usize()] {\n             self.dep_graph.read_index(entry.dep_node);\n         } else {\n-            bug!(\"called `HirMap::read()` with invalid `NodeId`\")\n+            bug!(\"called `HirMap::read()` with invalid `NodeId`: {:?}\", id)\n         }\n     }\n \n@@ -344,6 +344,7 @@ impl<'hir> Map<'hir> {\n             Node::AnonConst(_) |\n             Node::Expr(_) |\n             Node::Stmt(_) |\n+            Node::PathSegment(_) |\n             Node::Ty(_) |\n             Node::TraitRef(_) |\n             Node::Pat(_) |\n@@ -884,6 +885,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::AnonConst(constant)) => self.body(constant.body).value.span,\n             Some(Node::Expr(expr)) => expr.span,\n             Some(Node::Stmt(stmt)) => stmt.span,\n+            Some(Node::PathSegment(seg)) => seg.ident.span,\n             Some(Node::Ty(ty)) => ty.span,\n             Some(Node::TraitRef(tr)) => tr.path.span,\n             Some(Node::Binding(pat)) => pat.span,\n@@ -1098,6 +1100,7 @@ impl<'a> print::State<'a> {\n             Node::AnonConst(a)    => self.print_anon_const(&a),\n             Node::Expr(a)         => self.print_expr(&a),\n             Node::Stmt(a)         => self.print_stmt(&a),\n+            Node::PathSegment(_)  => bug!(\"cannot print PathSegment\"),\n             Node::Ty(a)           => self.print_type(&a),\n             Node::TraitRef(a)     => self.print_trait_ref(&a),\n             Node::Binding(a)      |\n@@ -1215,6 +1218,9 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n         Some(Node::Stmt(_)) => {\n             format!(\"stmt {}{}\", map.node_to_pretty_string(id), id_str)\n         }\n+        Some(Node::PathSegment(_)) => {\n+            format!(\"path segment {}{}\", map.node_to_pretty_string(id), id_str)\n+        }\n         Some(Node::Ty(_)) => {\n             format!(\"type {}{}\", map.node_to_pretty_string(id), id_str)\n         }"}, {"sha": "c72a4a6dfc2b261c15935c17320710e9adbf12e7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -347,6 +347,7 @@ impl fmt::Display for Path {\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n+    pub id: Option<NodeId>,\n     pub def: Option<Def>,\n \n     /// Type/lifetime parameters attached to this path. They come in\n@@ -368,15 +369,23 @@ impl PathSegment {\n     pub fn from_ident(ident: Ident) -> PathSegment {\n         PathSegment {\n             ident,\n+            id: None,\n             def: None,\n             infer_types: true,\n             args: None,\n         }\n     }\n \n-    pub fn new(ident: Ident, def: Option<Def>, args: GenericArgs, infer_types: bool) -> Self {\n+    pub fn new(\n+        ident: Ident,\n+        id: Option<NodeId>,\n+        def: Option<Def>,\n+        args: GenericArgs,\n+        infer_types: bool,\n+    ) -> Self {\n         PathSegment {\n             ident,\n+            id,\n             def,\n             infer_types,\n             args: if args.is_empty() {\n@@ -2514,6 +2523,7 @@ pub enum Node<'hir> {\n     AnonConst(&'hir AnonConst),\n     Expr(&'hir Expr),\n     Stmt(&'hir Stmt),\n+    PathSegment(&'hir PathSegment),\n     Ty(&'hir Ty),\n     TraitRef(&'hir TraitRef),\n     Binding(&'hir Pat),"}, {"sha": "b220634d0d90316897725879b39d2189c6a1ae74", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -174,6 +174,7 @@ impl_stable_hash_for!(struct hir::Path {\n \n impl_stable_hash_for!(struct hir::PathSegment {\n     ident -> (ident.name),\n+    id,\n     def,\n     infer_types,\n     args"}, {"sha": "cdb6e9a23182c99c7381d0244266a5efc2f04c3b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -392,18 +392,18 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     e.emit();\n                 }\n \n-                for &(ref tree, id) in items {\n-                    let prefix = ast::Path {\n-                        segments: module_path.iter()\n-                            .map(|ident| {\n-                                let mut seg = ast::PathSegment::from_ident(ident.0);\n-                                seg.id = self.session.next_node_id();\n-                                seg\n-                            })\n-                            .collect(),\n-                        span: path.span,\n-                    };\n+                let prefix = ast::Path {\n+                    segments: module_path.into_iter()\n+                        .map(|(ident, id)| {\n+                            let mut seg = ast::PathSegment::from_ident(ident);\n+                            seg.id = id.expect(\"Missing node id\");\n+                            seg\n+                        })\n+                        .collect(),\n+                    span: path.span,\n+                };\n \n+                for &(ref tree, id) in items {\n                     self.build_reduced_graph_for_use_tree(\n                         root_use_tree,\n                         root_id,"}, {"sha": "4eb40320c4abbf687f5fa3f869150f0dbeb3eef8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -3614,6 +3614,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         for (i, &(ident, id)) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?}\", i, ident);\n+\n             let is_last = i == path.len() - 1;\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n             let name = ident.name;\n@@ -3713,10 +3714,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(def);\n                     if let Some(next_module) = binding.module() {\n                         module = Some(ModuleOrUniformRoot::Module(next_module));\n-                        if !is_last && record_used {\n+                        if record_used {\n                             if let Some(id) = id {\n-                                assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n-                                self.record_def(id, PathResolution::new(def));\n+                                if !self.def_map.contains_key(&id) {\n+                                    assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n+                                    self.record_def(id, PathResolution::new(def));\n+                                }\n                             }\n                         }\n                     } else if def == Def::ToolMod && i + 1 != path.len() {"}, {"sha": "7ba1783400664218be463e526792c1663211cbd1", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -812,9 +812,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         variant: &'l ty::VariantDef,\n         base: &'l Option<P<ast::Expr>>,\n     ) {\n-        self.write_sub_paths_truncated(path);\n-\n         if let Some(struct_lit_data) = self.save_ctxt.get_expr_data(ex) {\n+            self.write_sub_paths_truncated(path);\n             down_cast_data!(struct_lit_data, RefData, ex.span);\n             if !generated_code(ex.span) {\n                 self.dumper.dump_ref(struct_lit_data);\n@@ -1232,8 +1231,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         value: String::new(),\n                         parent,\n                     });\n+                    self.write_sub_paths_truncated(&path);\n                 }\n-                self.write_sub_paths_truncated(&path);\n             }\n             ast::UseTreeKind::Glob => {\n                 let path = ast::Path {\n@@ -1268,8 +1267,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         value: names.join(\", \"),\n                         parent,\n                     });\n+                    self.write_sub_paths(&path);\n                 }\n-                self.write_sub_paths(&path);\n             }\n             ast::UseTreeKind::Nested(ref nested_items) => {\n                 let prefix = ast::Path {"}, {"sha": "23eab3e15f6432b1f3a3a873c655fa899fdcf473", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4803863919212812c626f796f9b393ab98c7e37/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c4803863919212812c626f796f9b393ab98c7e37", "patch": "@@ -632,6 +632,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Visibility(&Spanned {\n                 node: hir::VisibilityKind::Restricted { ref path, .. }, .. }) => path.def,\n \n+            Node::PathSegment(seg) => match seg.def {\n+                Some(def) => def,\n+                None => HirDef::Err,\n+            },\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Struct(ref qpath, ..),\n                 .."}]}