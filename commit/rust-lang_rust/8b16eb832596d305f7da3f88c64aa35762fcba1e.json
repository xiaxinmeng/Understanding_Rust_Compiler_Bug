{"sha": "8b16eb832596d305f7da3f88c64aa35762fcba1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTZlYjgzMjU5NmQzMDVmN2RhM2Y4OGM2NGFhMzU3NjJmY2JhMWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T14:18:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T14:18:56Z"}, "message": "Add note for when a type error comes from similarly named objects from two different crate of the same name (#22750)", "tree": {"sha": "d649fbf37c86225a76757ff295eb1534616cf64c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d649fbf37c86225a76757ff295eb1534616cf64c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b16eb832596d305f7da3f88c64aa35762fcba1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b16eb832596d305f7da3f88c64aa35762fcba1e", "html_url": "https://github.com/rust-lang/rust/commit/8b16eb832596d305f7da3f88c64aa35762fcba1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b16eb832596d305f7da3f88c64aa35762fcba1e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf626a68045be1d1a4fac9a635113bb7775b6bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf626a68045be1d1a4fac9a635113bb7775b6bb", "html_url": "https://github.com/rust-lang/rust/commit/7bf626a68045be1d1a4fac9a635113bb7775b6bb"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "67357ab239f53e1ba641eacc0d5ca5a3745d6af8", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b16eb832596d305f7da3f88c64aa35762fcba1e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b16eb832596d305f7da3f88c64aa35762fcba1e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=8b16eb832596d305f7da3f88c64aa35762fcba1e", "patch": "@@ -226,6 +226,8 @@ pub trait ErrorReporting<'tcx> {\n \n     fn report_type_error(&self, trace: TypeTrace<'tcx>, terr: &ty::TypeError<'tcx>);\n \n+    fn check_and_note_conflicting_crates(&self, terr: &ty::TypeError<'tcx>, sp: Span);\n+\n     fn report_and_explain_type_error(&self,\n                                      trace: TypeTrace<'tcx>,\n                                      terr: &ty::TypeError<'tcx>);\n@@ -484,13 +486,48 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                  expected_found_str,\n                  terr);\n \n+        self.check_and_note_conflicting_crates(terr, trace.origin.span());\n+\n         match trace.origin {\n             infer::MatchExpressionArm(_, arm_span) =>\n                 self.tcx.sess.span_note(arm_span, \"match arm with an incompatible type\"),\n             _ => ()\n         }\n     }\n \n+    /// Adds a note if the types come from similarly named crates\n+    fn check_and_note_conflicting_crates(&self, terr: &ty::TypeError<'tcx>, sp: Span) {\n+        match *terr {\n+            ty::TypeError::Sorts(ref exp_found) => {\n+                // if they are both \"path types\", there's a chance of ambiguity\n+                // due to different versions of the same crate\n+                match (&exp_found.expected.sty, &exp_found.found.sty) {\n+                    (&ty::TyEnum(ref exp_adt, _), &ty::TyEnum(ref found_adt, _)) |\n+                    (&ty::TyStruct(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n+                    (&ty::TyEnum(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n+                    (&ty::TyStruct(ref exp_adt, _), &ty::TyEnum(ref found_adt, _)) => {\n+                        // Only external crates, if either is from a local\n+                        // module we could have false positives\n+                        if exp_adt.did.is_local() || found_adt.did.is_local() {\n+                            return\n+                        }\n+                        let exp_path = self.tcx.with_path(exp_adt.did, \n+                                                          |p| p.collect::<Vec<_>>());\n+                        let found_path = self.tcx.with_path(exp_adt.did, \n+                                                            |p| p.collect::<Vec<_>>());\n+                        if exp_path == found_path {\n+                            self.tcx.sess.span_note(sp, &format!(\"Perhaps two different versions \\\n+                                                                  of crate `{}` are being used?\",\n+                                                                  exp_path[0]));\n+                        }\n+                    },\n+                    _ => ()\n+                }\n+            }\n+            _ => () // FIXME(Manishearth) handle traits and stuff\n+        }\n+    }\n+\n     fn report_and_explain_type_error(&self,\n                                      trace: TypeTrace<'tcx>,\n                                      terr: &ty::TypeError<'tcx>) {"}]}