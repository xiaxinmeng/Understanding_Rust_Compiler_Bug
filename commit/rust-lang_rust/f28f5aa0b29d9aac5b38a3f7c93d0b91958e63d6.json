{"sha": "f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOGY1YWEwYjI5ZDlhYWM1YjM4YTNmN2M5M2QwYjkxOTU4ZTYzZDY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-24T03:57:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-24T03:57:04Z"}, "message": "Rollup merge of #49906 - kennytm:stable-unreachable, r=sfackler\n\nStabilize `std::hint::unreachable_unchecked`.\n\nCloses #43751.", "tree": {"sha": "0b6f08335def1b2e84484180220d98c29aadd929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6f08335def1b2e84484180220d98c29aadd929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa3qsQCRBK7hj4Ov3rIwAAdHIIAAu+8eTF2aXN/GgcRTlODnw/\nE3P93eIgBcABgbO3JEK8DmeqJ7DOVxcO6X8/ph5eNQDURpnPknvYYhsuXrgccyrL\nFavVznosbmunWh5sPhl1SCqsf1SzCjrPOOnEbes8oJh4ClUuoEEUQgbHlEREAARF\nO8Zk2XuOMDKYgRtQqtYWBvtK1BpYn00ULe3WhH+KpEBmdMYpFIbnIeoPmfyyXruT\nIePsXX/psp5AC8eVU20dQe5w1gLGIHh6ur97thefBd0jyEx5iFSh9ISOiYiWUSbZ\nrP5+fH6Z8Q9zz3oOcd6bd/g00uq1uEsPhzvcH06FpbIDoyhtDHNMm2VGFltpihc=\n=9XrH\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b6f08335def1b2e84484180220d98c29aadd929\nparent 2701c175a507c52e80e262b65bbe003687d4a96a\nparent 5fe8c59f1219705ea54f842f9868ad0017643a33\nauthor kennytm <kennytm@gmail.com> 1524542224 +0800\ncommitter GitHub <noreply@github.com> 1524542224 +0800\n\nRollup merge of #49906 - kennytm:stable-unreachable, r=sfackler\n\nStabilize `std::hint::unreachable_unchecked`.\n\nCloses #43751.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "html_url": "https://github.com/rust-lang/rust/commit/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2701c175a507c52e80e262b65bbe003687d4a96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2701c175a507c52e80e262b65bbe003687d4a96a", "html_url": "https://github.com/rust-lang/rust/commit/2701c175a507c52e80e262b65bbe003687d4a96a"}, {"sha": "5fe8c59f1219705ea54f842f9868ad0017643a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe8c59f1219705ea54f842f9868ad0017643a33", "html_url": "https://github.com/rust-lang/rust/commit/5fe8c59f1219705ea54f842f9868ad0017643a33"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "f4e96e67b2c66aeea3b8b7b73e7949fd2d1ffba2", "filename": "src/libcore/hint.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"core_hint\", since = \"1.27.0\")]\n+\n+//! Hints to compiler that affects how code should be emitted or optimized.\n+\n+use intrinsics;\n+\n+/// Informs the compiler that this point in the code is not reachable, enabling\n+/// further optimizations.\n+///\n+/// # Safety\n+///\n+/// Reaching this function is completely *undefined behavior* (UB). In\n+/// particular, the compiler assumes that all UB must never happen, and\n+/// therefore will eliminate all branches that reach to a call to\n+/// `unreachable_unchecked()`.\n+///\n+/// Like all instances of UB, if this assumption turns out to be wrong, i.e. the\n+/// `unreachable_unchecked()` call is actually reachable among all possible\n+/// control flow, the compiler will apply the wrong optimization strategy, and\n+/// may sometimes even corrupt seemingly unrelated code, causing\n+/// difficult-to-debug problems.\n+///\n+/// Use this function only when you can prove that the code will never call it.\n+///\n+/// The [`unreachable!()`] macro is the safe counterpart of this function, which\n+/// will panic instead when executed.\n+///\n+/// [`unreachable!()`]: ../macro.unreachable.html\n+///\n+/// # Example\n+///\n+/// ```\n+/// fn div_1(a: u32, b: u32) -> u32 {\n+///     use std::hint::unreachable_unchecked;\n+///\n+///     // `b.saturating_add(1)` is always positive (not zero),\n+///     // hence `checked_div` will never return None.\n+///     // Therefore, the else branch is unreachable.\n+///     a.checked_div(b.saturating_add(1))\n+///         .unwrap_or_else(|| unsafe { unreachable_unchecked() })\n+/// }\n+///\n+/// assert_eq!(div_1(7, 0), 7);\n+/// assert_eq!(div_1(9, 1), 4);\n+/// assert_eq!(div_1(11, std::u32::MAX), 0);\n+/// ```\n+#[inline]\n+#[stable(feature = \"unreachable\", since = \"1.27.0\")]\n+pub unsafe fn unreachable_unchecked() -> ! {\n+    intrinsics::unreachable()\n+}"}, {"sha": "fb0d2d9c882196da3d7189d234ad7a9a992e5c93", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -638,6 +638,9 @@ extern \"rust-intrinsic\" {\n     /// NB: This is very different from the `unreachable!()` macro: Unlike the\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::hint::unreachable_unchecked`](../../std/hint/fn.unreachable_unchecked.html).\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "0e21a3327fddf471f6a486fb9e1f222f5e545981", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -163,6 +163,7 @@ pub mod intrinsics;\n pub mod mem;\n pub mod nonzero;\n pub mod ptr;\n+pub mod hint;\n \n /* Core language traits */\n "}, {"sha": "f9371ed0575e49782f7471320d83c5b852d663a1", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -421,13 +421,13 @@ macro_rules! writeln {\n /// * Iterators that dynamically terminate.\n ///\n /// If the determination that the code is unreachable proves incorrect, the\n-/// program immediately terminates with a [`panic!`].  The function [`unreachable`],\n-/// which belongs to the [`std::intrinsics`] module, informs the compilier to\n+/// program immediately terminates with a [`panic!`].  The function [`unreachable_unchecked`],\n+/// which belongs to the [`std::hint`] module, informs the compilier to\n /// optimize the code out of the release version entirely.\n ///\n /// [`panic!`]:  ../std/macro.panic.html\n-/// [`unreachable`]: ../std/intrinsics/fn.unreachable.html\n-/// [`std::intrinsics`]: ../std/intrinsics/index.html\n+/// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n+/// [`std::hint`]: ../std/hint/index.html\n ///\n /// # Panics\n ///"}, {"sha": "10efab82ddff586d6c44671388968ecf8e8a318f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -1094,18 +1094,6 @@ impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n     }\n }\n \n-/// Tells LLVM that this point in the code is not reachable, enabling further\n-/// optimizations.\n-///\n-/// NB: This is very different from the `unreachable!()` macro: Unlike the\n-/// macro, which panics when it is executed, it is *undefined behavior* to\n-/// reach code marked with this function.\n-#[inline]\n-#[unstable(feature = \"unreachable\", issue = \"43751\")]\n-pub unsafe fn unreachable() -> ! {\n-    intrinsics::unreachable()\n-}\n-\n /// A pinned reference.\n ///\n /// A pinned reference is a lot like a mutable reference, except that it is not"}, {"sha": "419921931350906e5c9223ace3e19de4d80a63c0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "patch": "@@ -461,6 +461,8 @@ pub use alloc_crate::vec;\n pub use core::char;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n pub use core::u128;\n+#[stable(feature = \"core_hint\", since = \"1.27.0\")]\n+pub use core::hint;\n \n pub mod f32;\n pub mod f64;"}]}