{"sha": "75208942f6144daac669e8e382029fc33bdce841", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjA4OTQyZjYxNDRkYWFjNjY5ZThlMzgyMDI5ZmMzM2JkY2U4NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T16:09:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T16:09:48Z"}, "message": "Auto merge of #70474 - Dylan-DPC:rollup-0lsxmmk, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #65222 (Proposal: `fold_self` and `try_fold_self` for Iterators)\n - #69887 (clean up E0404 explanation)\n - #70068 (use \"gcc\" instead of \"cc\" on *-sun-solaris systems when linking)\n - #70470 (Clean up E0463 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2b9032f24a013b18171c7b67bacea9bf841e8b85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9032f24a013b18171c7b67bacea9bf841e8b85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75208942f6144daac669e8e382029fc33bdce841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75208942f6144daac669e8e382029fc33bdce841", "html_url": "https://github.com/rust-lang/rust/commit/75208942f6144daac669e8e382029fc33bdce841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75208942f6144daac669e8e382029fc33bdce841/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a2df620735134d5907e4d4e25241a64cec2ceac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2df620735134d5907e4d4e25241a64cec2ceac", "html_url": "https://github.com/rust-lang/rust/commit/0a2df620735134d5907e4d4e25241a64cec2ceac"}, {"sha": "3de5a892ac29296f9f592d8351a544353a55b390", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de5a892ac29296f9f592d8351a544353a55b390", "html_url": "https://github.com/rust-lang/rust/commit/3de5a892ac29296f9f592d8351a544353a55b390"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "daa880e7cd53b4b35fa5115717dbda8149824c22", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/75208942f6144daac669e8e382029fc33bdce841/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75208942f6144daac669e8e382029fc33bdce841/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=75208942f6144daac669e8e382029fc33bdce841", "patch": "@@ -2005,6 +2005,43 @@ pub trait Iterator {\n         self.try_fold(init, ok(f)).unwrap()\n     }\n \n+    /// The same as [`fold()`](#method.fold), but uses the first element in the\n+    /// iterator as the initial value, folding every subsequent element into it.\n+    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// of the fold.\n+    ///\n+    /// # Example\n+    ///\n+    /// Find the maximum value:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_fold_self)]\n+    ///\n+    /// fn find_max<I>(iter: I) -> Option<I::Item>\n+    ///     where I: Iterator,\n+    ///           I::Item: Ord,\n+    /// {\n+    ///     iter.fold_first(|a, b| {\n+    ///         if a >= b { a } else { b }\n+    ///     })\n+    /// }\n+    /// let a = [10, 20, 5, -23, 0];\n+    /// let b: [u32; 0] = [];\n+    ///\n+    /// assert_eq!(find_max(a.iter()), Some(&20));\n+    /// assert_eq!(find_max(b.iter()), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_fold_self\", issue = \"68125\")]\n+    fn fold_first<F>(mut self, f: F) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+        F: FnMut(Self::Item, Self::Item) -> Self::Item,\n+    {\n+        let first = self.next()?;\n+        Some(self.fold(first, f))\n+    }\n+\n     /// Tests if every element of the iterator matches a predicate.\n     ///\n     /// `all()` takes a closure that returns `true` or `false`. It applies\n@@ -2497,7 +2534,7 @@ pub trait Iterator {\n             move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2561,7 +2598,7 @@ pub trait Iterator {\n             move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Reverses an iterator's direction.\n@@ -3214,20 +3251,6 @@ pub trait Iterator {\n     }\n }\n \n-/// Fold an iterator without having to provide an initial value.\n-#[inline]\n-fn fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n-where\n-    I: Iterator,\n-    F: FnMut(I::Item, I::Item) -> I::Item,\n-{\n-    // start with the first element as our selection. This avoids\n-    // having to use `Option`s inside the loop, translating to a\n-    // sizeable performance gain (6x in one case).\n-    let first = it.next()?;\n-    Some(it.fold(first, f))\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;"}, {"sha": "1fb08a058034dddbf135b735097e9f7fc45864bd", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=75208942f6144daac669e8e382029fc33bdce841", "patch": "@@ -838,7 +838,19 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                             \"emcc\"\n                         }\n                     }\n-                    LinkerFlavor::Gcc => \"cc\",\n+                    LinkerFlavor::Gcc => {\n+                        if cfg!(target_os = \"solaris\") {\n+                            // On historical Solaris systems, \"cc\" may have\n+                            // been Sun Studio, which is not flag-compatible\n+                            // with \"gcc\".  This history casts a long shadow,\n+                            // and many modern illumos distributions today\n+                            // ship GCC as \"gcc\" without also making it\n+                            // available as \"cc\".\n+                            \"gcc\"\n+                        } else {\n+                            \"cc\"\n+                        }\n+                    }\n                     LinkerFlavor::Ld => \"ld\",\n                     LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\","}, {"sha": "1360cc99afcc432eeded5e3a9249d176c456e936", "filename": "src/librustc_error_codes/error_codes/E0404.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md", "raw_url": "https://github.com/rust-lang/rust/raw/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0404.md?ref=75208942f6144daac669e8e382029fc33bdce841", "patch": "@@ -1,5 +1,5 @@\n-You tried to use something which is not a trait in a trait position, such as\n-a bound or `impl`.\n+A type that is not a trait was used in a trait position, such as a bound\n+or `impl`.\n \n Erroneous code example:\n \n@@ -18,8 +18,8 @@ struct Foo;\n fn bar<T: Foo>(t: T) {} // error: `Foo` is not a trait\n ```\n \n-Please verify that you didn't misspell the trait's name or otherwise use the\n-wrong identifier. Example:\n+Please verify that the trait's name was not misspelled or that the right\n+identifier was used. Example:\n \n ```\n trait Foo {\n@@ -32,7 +32,7 @@ impl Foo for Bar { // ok!\n }\n ```\n \n-or\n+or:\n \n ```\n trait Foo {"}, {"sha": "e46938c607d34f45a5e68b0328ff61da4625883e", "filename": "src/librustc_error_codes/error_codes/E0463.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_error_codes%2Ferror_codes%2FE0463.md", "raw_url": "https://github.com/rust-lang/rust/raw/75208942f6144daac669e8e382029fc33bdce841/src%2Flibrustc_error_codes%2Ferror_codes%2FE0463.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0463.md?ref=75208942f6144daac669e8e382029fc33bdce841", "patch": "@@ -1,4 +1,6 @@\n-A plugin/crate was declared but cannot be found. Erroneous code example:\n+A plugin/crate was declared but cannot be found.\n+\n+Erroneous code example:\n \n ```compile_fail,E0463\n #![feature(plugin)]"}]}