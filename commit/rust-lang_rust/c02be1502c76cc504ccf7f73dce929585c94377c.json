{"sha": "c02be1502c76cc504ccf7f73dce929585c94377c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmJlMTUwMmM3NmNjNTA0Y2NmN2Y3M2RjZTkyOTU4NWM5NDM3N2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T12:13:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T12:13:49Z"}, "message": "move resolve local name", "tree": {"sha": "af21ab880f246e50209789614b45248d1f27ddd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af21ab880f246e50209789614b45248d1f27ddd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02be1502c76cc504ccf7f73dce929585c94377c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02be1502c76cc504ccf7f73dce929585c94377c", "html_url": "https://github.com/rust-lang/rust/commit/c02be1502c76cc504ccf7f73dce929585c94377c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02be1502c76cc504ccf7f73dce929585c94377c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67295134bf5c518b39bc88abbe1bc5b9d7d3baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67295134bf5c518b39bc88abbe1bc5b9d7d3baf", "html_url": "https://github.com/rust-lang/rust/commit/b67295134bf5c518b39bc88abbe1bc5b9d7d3baf"}], "stats": {"total": 125, "additions": 31, "deletions": 94}, "files": [{"sha": "bb68b0ce757976d51613c4baa8fd039009cadbf9", "filename": "crates/ra_analysis/src/descriptors/function/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     syntax_ptr::SyntaxPtr\n };\n \n-pub(crate) use self::scope::FnScopes;\n+pub(crate) use self::scope::{FnScopes, resolve_local_name};\n \n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "d9929414c1a0342e8a457bd40faa8c10a5e7119b", "filename": "crates/ra_analysis/src/descriptors/function/scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -1,4 +1,4 @@\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use ra_syntax::{\n     algo::generate,\n@@ -261,8 +261,6 @@ pub fn resolve_local_name<'a>(\n     name_ref: ast::NameRef,\n     scopes: &'a FnScopes,\n ) -> Option<&'a ScopeEntry> {\n-    use rustc_hash::FxHashSet;\n-\n     let mut shadowed = FxHashSet::default();\n     let ret = scopes\n         .scope_chain(name_ref.syntax())"}, {"sha": "6473a1dbcb914c6ce06cf229309294a4bf4fb4f3", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -3,7 +3,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_editor::{self, find_node_at_offset, resolve_local_name, FileSymbol, LineIndex, LocalEdit, CompletionItem};\n+use ra_editor::{self, find_node_at_offset, FileSymbol, LineIndex, LocalEdit, CompletionItem};\n use ra_syntax::{\n     ast::{self, ArgListOwner, Expr, NameOwner},\n     AstNode, File, SmolStr,\n@@ -21,10 +21,13 @@ use crate::{\n         self, SyntaxDatabase, FileSyntaxQuery,\n     },\n     input::{SourceRootId, FilesDatabase, SourceRoot, WORKSPACE},\n-    descriptors::DescriptorDatabase,\n-    descriptors::module::{ModuleTree, Problem},\n-    descriptors::function::{FnDescriptor},\n+    descriptors::{\n+        DescriptorDatabase,\n+        module::{ModuleTree, Problem},\n+        function::{FnDescriptor, FnId},\n+    },\n     symbol_index::SymbolIndex,\n+    syntax_ptr::SyntaxPtrDatabase,\n     CrateGraph, CrateId, Diagnostic, FileId, FileResolver, FileSystemEdit, Position,\n     Query, SourceChange, SourceFileEdit, Cancelable,\n };\n@@ -272,7 +275,7 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n             // First try to resolve the symbol locally\n-            return if let Some((name, range)) = resolve_local_name(name_ref) {\n+            return if let Some((name, range)) = resolve_local_name(&self.db, file_id, name_ref) {\n                 let mut vec = vec![];\n                 vec.push((\n                     file_id,\n@@ -326,15 +329,15 @@ impl AnalysisImpl {\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n \n             // We are only handing local references for now\n-            if let Some(resolved) = resolve_local_name(name_ref) {\n+            if let Some(resolved) = resolve_local_name(&self.db, file_id, name_ref) {\n \n                 ret.push((file_id, resolved.1));\n \n                 if let Some(fn_def) = find_node_at_offset::<ast::FnDef>(syntax, offset) {\n \n                     let refs : Vec<_> = fn_def.syntax().descendants()\n                         .filter_map(ast::NameRef::cast)\n-                        .filter(|&n: &ast::NameRef| resolve_local_name(n) == Some(resolved.clone()))\n+                        .filter(|&n: &ast::NameRef| resolve_local_name(&self.db, file_id, n) == Some(resolved.clone()))\n                         .collect();\n \n                     for r in refs {\n@@ -598,3 +601,16 @@ impl<'a> FnCallNode<'a> {\n         }\n     }\n }\n+\n+fn resolve_local_name(\n+    db: &db::RootDatabase,\n+    file_id: FileId,\n+    name_ref: ast::NameRef,\n+) -> Option<(SmolStr, TextRange)> {\n+    let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n+    let fn_id = FnId::new(file_id, fn_def);\n+    let scopes = db.fn_scopes(fn_id);\n+    let scope_entry = crate::descriptors::function::resolve_local_name(name_ref, &scopes)?;\n+    let syntax = db.resolve_syntax_ptr(scope_entry.ptr().into_global(file_id));\n+    Some((scope_entry.name().clone(), syntax.range()))\n+}"}, {"sha": "563a010d74c4ddb2b86aa0f313d07314d9bd37b7", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -84,6 +84,10 @@ impl LocalSyntaxPtr {\n                 .unwrap_or_else(|| panic!(\"can't resovle local ptr to SyntaxNode: {:?}\", self))\n         }\n     }\n+\n+    pub(crate) fn into_global(self, file_id: FileId) -> SyntaxPtr {\n+        SyntaxPtr { file_id, local: self}\n+    }\n }\n \n "}, {"sha": "ddcb6c6a28a4bcce6689c6e0457e337051a22d65", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -151,15 +151,7 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n     leaf.ancestors().filter_map(N::cast).next()\n }\n \n-pub fn resolve_local_name(\n-    name_ref: ast::NameRef,\n-) -> Option<(SmolStr, TextRange)> {\n-    let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n-    let scopes = scope::FnScopes::new(fn_def);\n-    let scope_entry = scope::resolve_local_name(name_ref, &scopes)?;\n-    let name = scope_entry.ast().name()?;\n-    Some((scope_entry.name(), name.syntax().range()))\n-}\n+\n \n #[cfg(test)]\n mod tests {"}, {"sha": "4cb1f077cc573cb5ac16742fdf637f12a4a11bf4", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -258,22 +258,6 @@ struct ScopeData {\n     entries: Vec<ScopeEntry>,\n }\n \n-pub fn resolve_local_name<'a>(\n-    name_ref: ast::NameRef,\n-    scopes: &'a FnScopes,\n-) -> Option<&'a ScopeEntry> {\n-    use rustc_hash::FxHashSet;\n-\n-    let mut shadowed = FxHashSet::default();\n-    let ret = scopes\n-        .scope_chain(name_ref.syntax())\n-        .flat_map(|scope| scopes.entries(scope).iter())\n-        .filter(|entry| shadowed.insert(entry.name()))\n-        .filter(|entry| entry.name() == name_ref.text())\n-        .nth(0);\n-    ret\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -376,61 +360,4 @@ mod tests {\n             &[\"x\"],\n         );\n     }\n-\n-    fn do_check_local_name(code: &str, expected_offset: u32) {\n-        let (off, code) = extract_offset(code);\n-        let file = File::parse(&code);\n-        let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n-        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n-\n-        let scopes = FnScopes::new(fn_def);\n-\n-        let local_name = resolve_local_name(name_ref, &scopes)\n-            .unwrap()\n-            .ast()\n-            .name()\n-            .unwrap();\n-        let expected_name =\n-            find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into()).unwrap();\n-        assert_eq!(local_name.syntax().range(), expected_name.syntax().range());\n-    }\n-\n-    #[test]\n-    fn test_resolve_local_name() {\n-        do_check_local_name(\n-            r#\"\n-            fn foo(x: i32, y: u32) {\n-                {\n-                    let z = x * 2;\n-                }\n-                {\n-                    let t = x<|> * 3;\n-                }\n-            }\"#,\n-            21,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_resolve_local_name_declaration() {\n-        do_check_local_name(\n-            r#\"\n-            fn foo(x: String) {\n-                let x : &str = &x<|>;\n-            }\"#,\n-            21,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_resolve_local_name_shadow() {\n-        do_check_local_name(\n-            r\"\n-        fn foo(x: String) {\n-            let x : &str = &x;\n-            x<|>\n-        }\",\n-            46,\n-        );\n-    }\n }"}, {"sha": "483f5e63cc64d7db10155640abcd01098849a5c7", "filename": "crates/ra_editor/src/scope/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02be1502c76cc504ccf7f73dce929585c94377c/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs?ref=c02be1502c76cc504ccf7f73dce929585c94377c", "patch": "@@ -2,6 +2,6 @@ mod fn_scope;\n mod mod_scope;\n \n pub use self::{\n-    fn_scope::{resolve_local_name, FnScopes},\n+    fn_scope::{FnScopes},\n     mod_scope::ModuleScope,\n };"}]}