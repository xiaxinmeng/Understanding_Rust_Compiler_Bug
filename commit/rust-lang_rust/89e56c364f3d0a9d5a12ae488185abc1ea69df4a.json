{"sha": "89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTU2YzM2NGYzZDBhOWQ1YTEyYWU0ODgxODVhYmMxZWE2OWRmNGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T08:45:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T08:45:50Z"}, "message": "Labeled expressions", "tree": {"sha": "fd619bd07dbb2ec351a0c23549dc31dad64e7641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd619bd07dbb2ec351a0c23549dc31dad64e7641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "html_url": "https://github.com/rust-lang/rust/commit/89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "html_url": "https://github.com/rust-lang/rust/commit/719710a13256a32b9fcbf06c1ff43f8961b9b2e6"}], "stats": {"total": 146, "additions": 123, "deletions": 23}, "files": [{"sha": "52764e664641d260ac4538a88b7b7d75630ab5d6", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -161,11 +161,12 @@ Grammar(\n         \"PATH_EXPR\",\n         \"LAMBDA_EXPR\",\n         \"IF_EXPR\",\n-        \"WHILE_EXPR\",\n         \"LOOP_EXPR\",\n+        \"FOR_EXPR\",\n+        \"WHILE_EXPR\",\n         \"CONTINUE_EXPR\",\n         \"BREAK_EXPR\",\n-        \"FOR_EXPR\",\n+        \"LABEL\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n         \"MATCH_EXPR\","}, {"sha": "9d98340af34e30ef738bfd4b40d5ff1c6c2d8b27", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -30,7 +30,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     token_set_union![\n         LITERAL_FIRST,\n         token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, WHILE_KW, MATCH_KW, UNSAFE_KW, L_CURLY, RETURN_KW,\n-                   IDENT, SELF_KW, SUPER_KW, COLONCOLON, BREAK_KW, CONTINUE_KW ],\n+                   IDENT, SELF_KW, SUPER_KW, COLONCOLON, BREAK_KW, CONTINUE_KW, LIFETIME ],\n     ];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n@@ -48,9 +48,24 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         PIPE => lambda_expr(p),\n         MOVE_KW if la == PIPE => lambda_expr(p),\n         IF_KW => if_expr(p),\n-        WHILE_KW => while_expr(p),\n-        LOOP_KW => loop_expr(p),\n-        FOR_KW => for_expr(p),\n+\n+        LOOP_KW => loop_expr(p, None),\n+        FOR_KW => for_expr(p, None),\n+        WHILE_KW => while_expr(p, None),\n+        LIFETIME if la == COLON => {\n+            let m = p.start();\n+            label(p);\n+            match p.current() {\n+                LOOP_KW => loop_expr(p, Some(m)),\n+                FOR_KW => for_expr(p, Some(m)),\n+                WHILE_KW => while_expr(p, Some(m)),\n+                _ => {\n+                    p.error(\"expected a loop\");\n+                    return None;\n+                }\n+            }\n+        }\n+\n         MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n@@ -164,39 +179,53 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, IF_EXPR)\n }\n \n-// test while_expr\n+// test label\n // fn foo() {\n-//     while true {};\n-//     while let Some(x) = it.next() {};\n+//     'a: loop {}\n+//     'b: while true {}\n+//     'c: for x in () {}\n // }\n-fn while_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(WHILE_KW));\n+fn label(p: &mut Parser) {\n+    assert!(p.at(LIFETIME) && p.nth(1) == COLON);\n     let m = p.start();\n     p.bump();\n-    cond(p);\n-    block(p);\n-    m.complete(p, WHILE_EXPR)\n+    p.bump();\n+    m.complete(p, LABEL);\n }\n \n // test loop_expr\n // fn foo() {\n //     loop {};\n // }\n-fn loop_expr(p: &mut Parser) -> CompletedMarker {\n+fn loop_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(LOOP_KW));\n-    let m = p.start();\n+    let m = m.unwrap_or_else(|| p.start());\n     p.bump();\n     block(p);\n     m.complete(p, LOOP_EXPR)\n }\n \n+// test while_expr\n+// fn foo() {\n+//     while true {};\n+//     while let Some(x) = it.next() {};\n+// }\n+fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+    assert!(p.at(WHILE_KW));\n+    let m = m.unwrap_or_else(|| p.start());\n+    p.bump();\n+    cond(p);\n+    block(p);\n+    m.complete(p, WHILE_EXPR)\n+}\n+\n // test for_expr\n // fn foo() {\n //     for x in [] {};\n // }\n-fn for_expr(p: &mut Parser) -> CompletedMarker {\n+fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(FOR_KW));\n-    let m = p.start();\n+    let m = m.unwrap_or_else(|| p.start());\n     p.bump();\n     patterns::pattern(p);\n     p.expect(IN_KW);"}, {"sha": "25887921b2f033f6a4fe8f79fda4b7b1fd9e54c7", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -32,7 +32,7 @@ mod type_params;\n mod types;\n \n use {\n-    parser_api::{CompletedMarker, Parser, TokenSet},\n+    parser_api::{Marker, CompletedMarker, Parser, TokenSet},\n     SyntaxKind::{self, *},\n };\n "}, {"sha": "61d527f936777921e46dc13bb10637f47795e807", "filename": "crates/libsyntax2/src/syntax_kinds/generated.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -157,11 +157,12 @@ pub enum SyntaxKind {\n     PATH_EXPR,\n     LAMBDA_EXPR,\n     IF_EXPR,\n-    WHILE_EXPR,\n     LOOP_EXPR,\n+    FOR_EXPR,\n+    WHILE_EXPR,\n     CONTINUE_EXPR,\n     BREAK_EXPR,\n-    FOR_EXPR,\n+    LABEL,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n     MATCH_EXPR,\n@@ -406,11 +407,12 @@ impl SyntaxKind {\n             PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n-            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n             LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n+            FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n+            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n             CONTINUE_EXPR => &SyntaxInfo { name: \"CONTINUE_EXPR\" },\n             BREAK_EXPR => &SyntaxInfo { name: \"BREAK_EXPR\" },\n-            FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n+            LABEL => &SyntaxInfo { name: \"LABEL\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n             MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },"}, {"sha": "48e83f263b9127912c63a595de5086168ec0d7c4", "filename": "crates/libsyntax2/tests/data/parser/inline/0107_label.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.rs?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    'a: loop {}\n+    'b: while true {}\n+    'c: for x in () {}\n+}"}, {"sha": "66ba792b8e751e2b1df7e8ca0a9d84a7c0d3c59c", "filename": "crates/libsyntax2/tests/data/parser/inline/0107_label.txt", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt", "raw_url": "https://github.com/rust-lang/rust/raw/89e56c364f3d0a9d5a12ae488185abc1ea69df4a/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt?ref=89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "patch": "@@ -0,0 +1,63 @@\n+FILE@[0; 74)\n+  FN_DEF@[0; 73)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 73)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 26)\n+        LOOP_EXPR@[15; 26)\n+          LABEL@[15; 18)\n+            LIFETIME@[15; 17) \"'a\"\n+            COLON@[17; 18)\n+          WHITESPACE@[18; 19)\n+          LOOP_KW@[19; 23)\n+          WHITESPACE@[23; 24)\n+          BLOCK_EXPR@[24; 26)\n+            L_CURLY@[24; 25)\n+            R_CURLY@[25; 26)\n+      WHITESPACE@[26; 31)\n+      EXPR_STMT@[31; 48)\n+        WHILE_EXPR@[31; 48)\n+          LABEL@[31; 34)\n+            LIFETIME@[31; 33) \"'b\"\n+            COLON@[33; 34)\n+          WHITESPACE@[34; 35)\n+          WHILE_KW@[35; 40)\n+          WHITESPACE@[40; 41)\n+          LITERAL@[41; 45)\n+            TRUE_KW@[41; 45)\n+          WHITESPACE@[45; 46)\n+          BLOCK_EXPR@[46; 48)\n+            L_CURLY@[46; 47)\n+            R_CURLY@[47; 48)\n+      WHITESPACE@[48; 53)\n+      FOR_EXPR@[53; 71)\n+        LABEL@[53; 56)\n+          LIFETIME@[53; 55) \"'c\"\n+          COLON@[55; 56)\n+        WHITESPACE@[56; 57)\n+        FOR_KW@[57; 60)\n+        WHITESPACE@[60; 61)\n+        BIND_PAT@[61; 62)\n+          NAME@[61; 62)\n+            IDENT@[61; 62) \"x\"\n+        WHITESPACE@[62; 63)\n+        IN_KW@[63; 65)\n+        WHITESPACE@[65; 66)\n+        TUPLE_EXPR@[66; 68)\n+          L_PAREN@[66; 67)\n+          R_PAREN@[67; 68)\n+        WHITESPACE@[68; 69)\n+        BLOCK_EXPR@[69; 71)\n+          L_CURLY@[69; 70)\n+          R_CURLY@[70; 71)\n+      WHITESPACE@[71; 72)\n+      R_CURLY@[72; 73)\n+  WHITESPACE@[73; 74)"}]}