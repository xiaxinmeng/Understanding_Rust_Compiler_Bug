{"sha": "b8c41492939c77b7139e46ee67375b47041f6692", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YzQxNDkyOTM5Yzc3YjcxMzllNDZlZTY3Mzc1YjQ3MDQxZjY2OTI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T16:30:49Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T23:48:48Z"}, "message": "[std::str] Rename from_utf8_opt() to from_utf8(), drop the old from_utf8() behavior", "tree": {"sha": "cff3b09dceb4ee8ee9384a88f66b9a55505e9deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff3b09dceb4ee8ee9384a88f66b9a55505e9deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c41492939c77b7139e46ee67375b47041f6692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c41492939c77b7139e46ee67375b47041f6692", "html_url": "https://github.com/rust-lang/rust/commit/b8c41492939c77b7139e46ee67375b47041f6692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c41492939c77b7139e46ee67375b47041f6692/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b01647ba14f1d66d5af2cd70bea400d3ca4df3", "html_url": "https://github.com/rust-lang/rust/commit/46b01647ba14f1d66d5af2cd70bea400d3ca4df3"}], "stats": {"total": 143, "additions": 59, "deletions": 84}, "files": [{"sha": "7fede7f855d12c319249bf75f33e374bfe04e7f7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -308,7 +308,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n \n             let adb_arg = format!(\"export LD_LIBRARY_PATH={}; gdbserver :5039 {}/{}\",\n                                   config.adb_test_dir.clone(), config.adb_test_dir.clone(),\n-                                  str::from_utf8(exe_file.filename().unwrap()));\n+                                  str::from_utf8(exe_file.filename().unwrap()).unwrap());\n \n             let mut process = procsrv::run_background(\"\", config.adb_path,\n                                                       [~\"shell\",adb_arg.clone()],"}, {"sha": "aac8253b8428add2924158e230bc861662771a09", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -30,7 +30,7 @@ impl<'doc> Doc<'doc> {\n     }\n \n     pub fn as_str_slice<'a>(&'a self) -> &'a str {\n-        str::from_utf8(self.data.slice(self.start, self.end))\n+        str::from_utf8(self.data.slice(self.start, self.end)).unwrap()\n     }\n \n     pub fn as_str(&self) -> ~str {"}, {"sha": "1b98a9af548ae69064db118a6e76a25dc62a5e26", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -704,7 +704,7 @@ fn should_sort_failures_before_printing_them() {\n \n     st.write_failures();\n     let s = match st.out {\n-        Raw(ref m) => str::from_utf8(m.get_ref()),\n+        Raw(ref m) => str::from_utf8(m.get_ref()).unwrap(),\n         Pretty(_) => unreachable!()\n     };\n "}, {"sha": "661ae5b7297b2fd0c8293db433569c1a132407a5", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -57,8 +57,8 @@ fn run_ar(sess: Session, args: &str, cwd: Option<&Path>,\n             if !o.status.success() {\n                 sess.err(format!(\"{} {} failed with: {}\", ar, args.connect(\" \"),\n                                  o.status));\n-                sess.note(format!(\"stdout ---\\n{}\", str::from_utf8(o.output)));\n-                sess.note(format!(\"stderr ---\\n{}\", str::from_utf8(o.error)));\n+                sess.note(format!(\"stdout ---\\n{}\", str::from_utf8(o.output).unwrap()));\n+                sess.note(format!(\"stderr ---\\n{}\", str::from_utf8(o.error).unwrap()));\n                 sess.abort_if_errors();\n             }\n             o\n@@ -141,7 +141,7 @@ impl Archive {\n     /// Lists all files in an archive\n     pub fn files(&self) -> ~[~str] {\n         let output = run_ar(self.sess, \"t\", None, [&self.dst]);\n-        str::from_utf8(output.output).lines().map(|s| s.to_owned()).collect()\n+        str::from_utf8(output.output).unwrap().lines().map(|s| s.to_owned()).collect()\n     }\n \n     fn add_archive(&mut self, archive: &Path, name: &str, skip: &[&str]) {"}, {"sha": "4f19d461c854c7216d0f42fc67a8d4407e0f6199", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -97,7 +97,7 @@ pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident {\n \n fn parse_ident_(st: &mut PState, is_last: |char| -> bool) -> ast::Ident {\n     scan(st, is_last, |bytes| {\n-            st.tcx.sess.ident_of(str::from_utf8(bytes))\n+            st.tcx.sess.ident_of(str::from_utf8(bytes).unwrap())\n         })\n }\n \n@@ -476,7 +476,7 @@ fn parse_abi_set(st: &mut PState) -> AbiSet {\n     let mut abis = AbiSet::empty();\n     while peek(st) != ']' {\n          scan(st, |c| c == ',', |bytes| {\n-                 let abi_str = str::from_utf8(bytes).to_owned();\n+                 let abi_str = str::from_utf8(bytes).unwrap().to_owned();\n                  let abi = abi::lookup(abi_str).expect(abi_str);\n                  abis.add(abi);\n               });"}, {"sha": "965aab31f142682272e137bdd637d64aa3ac8146", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -72,7 +72,7 @@ pub fn enc_ty(w: &mut MemWriter, cx: @ctxt, t: ty::t) {\n             None => {\n                 let wr = &mut MemWriter::new();\n                 enc_sty(wr, cx, &ty::get(t).sty);\n-                let s = str::from_utf8(wr.get_ref()).to_managed();\n+                let s = str::from_utf8(wr.get_ref()).unwrap().to_managed();\n                 let mut short_names_cache = cx.tcx\n                                               .short_names_cache\n                                               .borrow_mut();"}, {"sha": "5d0728c8cdf77c6ff4ac6df1216a8f53d1ab6830", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -112,7 +112,7 @@ pub fn render(w: &mut io::Writer, s: &str) {\n         unsafe {\n             let my_opaque: &my_opaque = cast::transmute(opaque);\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n-                let text = str::from_utf8(text);\n+                let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().filter(|l| stripped_filtered_line(*l).is_none());\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n \n@@ -172,14 +172,14 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             let (test, shouldfail, ignore) =\n                 vec::raw::buf_as_slice((*lang).data,\n                                        (*lang).size as uint, |lang| {\n-                    let s = str::from_utf8(lang);\n+                    let s = str::from_utf8(lang).unwrap();\n                     (s.contains(\"rust\"), s.contains(\"should_fail\"),\n                      s.contains(\"ignore\"))\n                 });\n             if !test { return }\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let tests: &mut ::test::Collector = intrinsics::transmute(opaque);\n-                let text = str::from_utf8(text);\n+                let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n                 tests.add_test(text, ignore, shouldfail);"}, {"sha": "c9db8af0b8a9ce17e9b5547a93e2a521515b0456", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -193,7 +193,7 @@ impl<'a> PkgScript<'a> {\n                         Some(output) => {\n                             debug!(\"run_custom: second pkg command did {:?}\", output.status);\n                             // Run the configs() function to get the configs\n-                            let cfgs = str::from_utf8(output.output).words()\n+                            let cfgs = str::from_utf8(output.output).unwrap().words()\n                                 .map(|w| w.to_owned()).collect();\n                             Some((cfgs, output.status))\n                         },"}, {"sha": "b2cc568ee5e60d89097b38c9bdce94abc00e2917", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -143,7 +143,7 @@ fn run_git(args: &[~str], env: Option<~[(~str, ~str)]>, cwd: &Path, err_msg: &st\n     let rslt = prog.finish_with_output();\n     if !rslt.status.success() {\n         fail!(\"{} [git returned {:?}, output = {}, error = {}]\", err_msg,\n-           rslt.status, str::from_utf8(rslt.output), str::from_utf8(rslt.error));\n+           rslt.status, str::from_utf8(rslt.output).unwrap(), str::from_utf8(rslt.error).unwrap());\n     }\n }\n \n@@ -279,13 +279,13 @@ fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~s\n     }).expect(format!(\"failed to exec `{}`\", cmd));\n     let output = prog.finish_with_output();\n     debug!(\"Output from command {} with args {:?} was {} \\\\{{}\\\\}[{:?}]\",\n-           cmd, args, str::from_utf8(output.output),\n-           str::from_utf8(output.error),\n+           cmd, args, str::from_utf8(output.output).unwrap(),\n+           str::from_utf8(output.error).unwrap(),\n            output.status);\n     if !output.status.success() {\n         debug!(\"Command {} {:?} failed with exit code {:?}; its output was --- {} {} ---\",\n               cmd, args, output.status,\n-              str::from_utf8(output.output), str::from_utf8(output.error));\n+              str::from_utf8(output.output).unwrap(), str::from_utf8(output.error).unwrap());\n         Fail(output)\n     }\n     else {\n@@ -445,7 +445,7 @@ fn built_library_exists(repo: &Path, short_name: &str) -> bool {\n fn command_line_test_output(args: &[~str]) -> ~[~str] {\n     let mut result = ~[];\n     let p_output = command_line_test(args, &os::getcwd());\n-    let test_output = str::from_utf8(p_output.output);\n+    let test_output = str::from_utf8(p_output.output).unwrap();\n     for s in test_output.split('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -459,7 +459,7 @@ fn command_line_test_output_with_env(args: &[~str], env: ~[(~str, ~str)]) -> ~[~\n         Fail(_) => fail!(\"Command-line test failed\"),\n         Success(r) => r\n     };\n-    let test_output = str::from_utf8(p_output.output);\n+    let test_output = str::from_utf8(p_output.output).unwrap();\n     for s in test_output.split('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -1199,7 +1199,7 @@ fn test_uninstall() {\n     let workspace = create_local_package(&CrateId::new(\"foo\"));\n     command_line_test([~\"uninstall\", ~\"foo\"], workspace.path());\n     let output = command_line_test([~\"list\"], workspace.path());\n-    assert!(!str::from_utf8(output.output).contains(\"foo\"));\n+    assert!(!str::from_utf8(output.output).unwrap().contains(\"foo\"));\n }\n \n #[test]\n@@ -1269,8 +1269,8 @@ fn test_extern_mod() {\n     let outp = prog.finish_with_output();\n     if !outp.status.success() {\n         fail!(\"output was {}, error was {}\",\n-              str::from_utf8(outp.output),\n-              str::from_utf8(outp.error));\n+              str::from_utf8(outp.output).unwrap(),\n+              str::from_utf8(outp.error).unwrap());\n     }\n     assert!(exec_file.exists() && is_executable(&exec_file));\n }\n@@ -1324,8 +1324,8 @@ fn test_extern_mod_simpler() {\n     let outp = prog.finish_with_output();\n     if !outp.status.success() {\n         fail!(\"output was {}, error was {}\",\n-              str::from_utf8(outp.output),\n-              str::from_utf8(outp.error));\n+              str::from_utf8(outp.output).unwrap(),\n+              str::from_utf8(outp.error).unwrap());\n     }\n     assert!(exec_file.exists() && is_executable(&exec_file));\n }\n@@ -2092,7 +2092,7 @@ fn test_rustpkg_test_creates_exec() {\n fn test_rustpkg_test_output() {\n     let workspace = create_local_package_with_test(&CrateId::new(\"foo\"));\n     let output = command_line_test([~\"test\", ~\"foo\"], workspace.path());\n-    let output_str = str::from_utf8(output.output);\n+    let output_str = str::from_utf8(output.output).unwrap();\n     // The first two assertions are separate because test output may\n     // contain color codes, which could appear between \"test f\" and \"ok\".\n     assert!(output_str.contains(\"test f\"));\n@@ -2123,7 +2123,7 @@ fn test_rustpkg_test_cfg() {\n               \"#[test] #[cfg(not(foobar))] fn f() { assert!('a' != 'a'); }\");\n     let output = command_line_test([~\"test\", ~\"--cfg\", ~\"foobar\", ~\"foo\"],\n                                    foo_workspace);\n-    let output_str = str::from_utf8(output.output);\n+    let output_str = str::from_utf8(output.output).unwrap();\n     assert!(output_str.contains(\"0 passed; 0 failed; 0 ignored; 0 measured\"));\n }\n \n@@ -2424,8 +2424,8 @@ fn correct_error_dependency() {\n         Fail(ProcessOutput{ error: error, output: output, .. }) => {\n             assert!(str::is_utf8(error));\n             assert!(str::is_utf8(output));\n-            let error_str = str::from_utf8(error);\n-            let out_str   = str::from_utf8(output);\n+            let error_str = str::from_utf8(error).unwrap();\n+            let out_str   = str::from_utf8(output).unwrap();\n             debug!(\"ss = {}\", error_str);\n             debug!(\"out_str = {}\", out_str);\n             if out_str.contains(\"Package badpkg depends on some_package_that_doesnt_exist\") &&"}, {"sha": "77dbb33551808351ab15a2fcf04833d7c5c9057b", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -115,7 +115,7 @@ pub fn try_getting_local_version(local_path: &Path) -> Option<Version> {\n         }\n \n         let mut output = None;\n-        let output_text = str::from_utf8(outp.output);\n+        let output_text = str::from_utf8(outp.output).unwrap();\n         for l in output_text.lines() {\n             if !l.is_whitespace() {\n                 output = Some(l);\n@@ -147,8 +147,8 @@ pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n         let outp = opt_outp.expect(\"Failed to exec `git`\");\n         if outp.status.success() {\n             debug!(\"Cloned it... ( {}, {} )\",\n-                   str::from_utf8(outp.output),\n-                   str::from_utf8(outp.error));\n+                   str::from_utf8(outp.output).unwrap(),\n+                   str::from_utf8(outp.error).unwrap());\n             let mut output = None;\n             let git_dir = tmp_dir.join(\".git\");\n             debug!(\"(getting version, now getting tags) executing \\\\{git --git-dir={} tag -l\\\\}\",\n@@ -158,7 +158,7 @@ pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n                                                [\"--git-dir=\" + git_dir.as_str().unwrap(),\n                                                 ~\"tag\", ~\"-l\"]);\n             let outp = opt_outp.expect(\"Failed to exec `git`\");\n-            let output_text = str::from_utf8(outp.output);\n+            let output_text = str::from_utf8(outp.output).unwrap();\n             debug!(\"Full output: ( {} ) [{:?}]\", output_text, outp.status);\n             for l in output_text.lines() {\n                 debug!(\"A line of output: {}\", l);"}, {"sha": "8f7ced93fb0c6a7defbc7fa3e19a65d3a99dd90c", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -488,7 +488,7 @@ mod test {\n \n             let nread = result.unwrap();\n             assert!(nread > 0);\n-            let read_str = str::from_utf8(read_mem.slice_to(nread as uint));\n+            let read_str = str::from_utf8(read_mem.slice_to(nread as uint)).unwrap();\n             assert_eq!(read_str, \"hello\");\n         }\n         // unlink"}, {"sha": "c735e325068247e0ed7bfaefa70a16081beed8c6", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -167,7 +167,7 @@ impl CString {\n         if self.buf.is_null() { return None; }\n         let buf = self.as_bytes();\n         let buf = buf.slice_to(buf.len()-1); // chop off the trailing NUL\n-        str::from_utf8_opt(buf)\n+        str::from_utf8(buf)\n     }\n \n     /// Return a CString iterator."}, {"sha": "4bee1f42b86cdebd9bd2eebffc8cecccde053546", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -812,7 +812,7 @@ impl<'a> Formatter<'a> {\n \n     fn runplural(&mut self, value: uint, pieces: &[rt::Piece]) {\n         ::uint::to_str_bytes(value, 10, |buf| {\n-            let valuestr = str::from_utf8(buf);\n+            let valuestr = str::from_utf8(buf).unwrap();\n             for piece in pieces.iter() {\n                 self.run(piece, Some(valuestr));\n             }"}, {"sha": "0564311ad2270df38c7644041ca137ecb09b91fa", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -805,7 +805,7 @@ mod test {\n             }\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n+        let read_str = str::from_utf8(read_mem).unwrap();\n         assert_eq!(read_str, message);\n     })\n \n@@ -829,7 +829,7 @@ mod test {\n             tell_pos_post_read = read_stream.tell();\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n+        let read_str = str::from_utf8(read_mem).unwrap();\n         assert_eq!(read_str, message.slice(4, 8));\n         assert_eq!(tell_pos_pre_read, set_cursor);\n         assert_eq!(tell_pos_post_read, message.len() as u64);\n@@ -854,7 +854,7 @@ mod test {\n             read_stream.read(read_mem);\n         }\n         unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n+        let read_str = str::from_utf8(read_mem).unwrap();\n         assert!(read_str == final_msg.to_owned());\n     })\n \n@@ -876,15 +876,15 @@ mod test {\n \n             read_stream.seek(-4, SeekEnd);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8(read_mem), chunk_three);\n+            assert_eq!(str::from_utf8(read_mem).unwrap(), chunk_three);\n \n             read_stream.seek(-9, SeekCur);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8(read_mem), chunk_two);\n+            assert_eq!(str::from_utf8(read_mem).unwrap(), chunk_two);\n \n             read_stream.seek(0, SeekSet);\n             read_stream.read(read_mem);\n-            assert_eq!(str::from_utf8(read_mem), chunk_one);\n+            assert_eq!(str::from_utf8(read_mem).unwrap(), chunk_one);\n         }\n         unlink(filename);\n     })\n@@ -958,7 +958,7 @@ mod test {\n             {\n                 let n = f.filestem_str();\n                 File::open(f).read(mem);\n-                let read_str = str::from_utf8(mem);\n+                let read_str = str::from_utf8(mem).unwrap();\n                 let expected = match n {\n                     None|Some(\"\") => fail!(\"really shouldn't happen..\"),\n                     Some(n) => prefix+n"}, {"sha": "b12adbf230fd0597c3c2f0b5369579acb0cc3581", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -1202,7 +1202,7 @@ pub trait Buffer: Reader {\n                 }\n             }\n         }\n-        match str::from_utf8_opt(buf.slice_to(width)) {\n+        match str::from_utf8(buf.slice_to(width)) {\n             Some(s) => Some(s.char_at(0)),\n             None => None\n         }"}, {"sha": "c3fb3e97edfde7f8fef9fde17c3182f694342b2b", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -254,7 +254,7 @@ mod tests {\n         loop {\n             match input.read(buf) {\n                 None => { break }\n-                Some(n) => { ret.push_str(str::from_utf8(buf.slice_to(n))); }\n+                Some(n) => { ret.push_str(str::from_utf8(buf.slice_to(n)).unwrap()); }\n             }\n         }\n         return ret;"}, {"sha": "6464d6021ee53e3adf3b2f30822bf05ff9781b6d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -189,7 +189,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// If the path is not representable in utf-8, this returns None.\n     #[inline]\n     fn as_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_opt(self.as_vec())\n+        str::from_utf8(self.as_vec())\n     }\n \n     /// Returns the path as a byte vector\n@@ -220,7 +220,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `dirname` for details.\n     #[inline]\n     fn dirname_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_opt(self.dirname())\n+        str::from_utf8(self.dirname())\n     }\n     /// Returns the file component of `self`, as a byte vector.\n     /// If `self` represents the root of the file hierarchy, returns None.\n@@ -230,7 +230,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filename` for details.\n     #[inline]\n     fn filename_str<'a>(&'a self) -> Option<&'a str> {\n-        self.filename().and_then(str::from_utf8_opt)\n+        self.filename().and_then(str::from_utf8)\n     }\n     /// Returns the stem of the filename of `self`, as a byte vector.\n     /// The stem is the portion of the filename just before the last '.'.\n@@ -252,7 +252,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `filestem` for details.\n     #[inline]\n     fn filestem_str<'a>(&'a self) -> Option<&'a str> {\n-        self.filestem().and_then(str::from_utf8_opt)\n+        self.filestem().and_then(str::from_utf8)\n     }\n     /// Returns the extension of the filename of `self`, as an optional byte vector.\n     /// The extension is the portion of the filename just after the last '.'.\n@@ -275,7 +275,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See `extension` for details.\n     #[inline]\n     fn extension_str<'a>(&'a self) -> Option<&'a str> {\n-        self.extension().and_then(str::from_utf8_opt)\n+        self.extension().and_then(str::from_utf8)\n     }\n \n     /// Replaces the filename portion of the path with the given byte vector or string.\n@@ -502,7 +502,7 @@ pub trait BytesContainer {\n     /// Returns the receiver interpreted as a utf-8 string, if possible\n     #[inline]\n     fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        str::from_utf8_opt(self.container_as_bytes())\n+        str::from_utf8(self.container_as_bytes())\n     }\n     /// Returns whether .container_as_str() is guaranteed to not fail\n     // FIXME (#8888): Remove unused arg once ::<for T> works"}, {"sha": "e95bd2d8ca2f3ddfd7dcbcd3ae87e51f0b1a4f09", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -402,13 +402,13 @@ impl Path {\n     /// Returns an iterator that yields each component of the path as Option<&str>.\n     /// See components() for details.\n     pub fn str_components<'a>(&'a self) -> StrComponents<'a> {\n-        self.components().map(str::from_utf8_opt)\n+        self.components().map(str::from_utf8)\n     }\n \n     /// Returns an iterator that yields each component of the path in reverse as Option<&str>.\n     /// See components() for details.\n     pub fn rev_str_components<'a>(&'a self) -> RevStrComponents<'a> {\n-        self.rev_components().map(str::from_utf8_opt)\n+        self.rev_components().map(str::from_utf8)\n     }\n }\n \n@@ -691,7 +691,7 @@ mod tests {\n             (s: $path:expr, $op:ident, $exp:expr, opt) => (\n                 {\n                     let path = Path::new($path);\n-                    let left = path.$op().map(|x| str::from_utf8(x));\n+                    let left = path.$op().map(|x| str::from_utf8(x).unwrap());\n                     assert_eq!(left, $exp);\n                 }\n             );"}, {"sha": "c266ddfea4b924df3174ad464033f8c19edf036a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -161,17 +161,8 @@ pub fn from_utf8_owned_opt(vv: ~[u8]) -> Option<~str> {\n /// Once the slice has been validated as utf-8, it is transmuted in-place and\n /// returned as a '&str' instead of a '&[u8]'\n ///\n-/// # Failure\n-///\n-/// Fails if invalid UTF-8\n-pub fn from_utf8<'a>(v: &'a [u8]) -> &'a str {\n-    from_utf8_opt(v).expect(\"from_utf8: not utf-8\")\n-}\n-\n-/// Converts a vector to a string slice without performing any allocations.\n-///\n /// Returns None if the slice is not utf-8.\n-pub fn from_utf8_opt<'a>(v: &'a [u8]) -> Option<&'a str> {\n+pub fn from_utf8<'a>(v: &'a [u8]) -> Option<&'a str> {\n     if is_utf8(v) {\n         Some(unsafe { raw::from_utf8(v) })\n     } else { None }\n@@ -3436,7 +3427,7 @@ mod tests {\n         let s1: ~str = ~\"All mimsy were the borogoves\";\n \n         let v: ~[u8] = s1.as_bytes().to_owned();\n-        let s2: ~str = from_utf8(v).to_owned();\n+        let s2: ~str = from_utf8(v).unwrap().to_owned();\n         let mut i: uint = 0u;\n         let n1: uint = s1.len();\n         let n2: uint = v.len();\n@@ -3961,29 +3952,13 @@ mod tests {\n     #[test]\n     fn test_str_from_utf8() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_utf8(xs), \"hello\");\n-\n-        let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_utf8(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_str_from_utf8_invalid() {\n-        let xs = bytes!(\"hello\", 0xff);\n-        let _ = from_utf8(xs);\n-    }\n-\n-    #[test]\n-    fn test_str_from_utf8_opt() {\n-        let xs = bytes!(\"hello\");\n-        assert_eq!(from_utf8_opt(xs), Some(\"hello\"));\n+        assert_eq!(from_utf8(xs), Some(\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_utf8_opt(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff);\n-        assert_eq!(from_utf8_opt(xs), None);\n+        assert_eq!(from_utf8(xs), None);\n     }\n \n     #[test]"}, {"sha": "96a6e1c4f6061973fa227443fe5ca9a4ef172c71", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c41492939c77b7139e46ee67375b47041f6692/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c41492939c77b7139e46ee67375b47041f6692/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=b8c41492939c77b7139e46ee67375b47041f6692", "patch": "@@ -81,7 +81,7 @@ mod map_reduce {\n               mapper_done => { num_mappers -= 1; }\n               find_reducer(k, cc) => {\n                 let mut c;\n-                match reducers.find(&str::from_utf8(k).to_owned()) {\n+                match reducers.find(&str::from_utf8(k).unwrap().to_owned()) {\n                   Some(&_c) => { c = _c; }\n                   None => { c = 0; }\n                 }"}]}