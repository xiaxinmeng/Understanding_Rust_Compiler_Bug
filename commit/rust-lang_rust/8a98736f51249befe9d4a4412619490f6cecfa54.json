{"sha": "8a98736f51249befe9d4a4412619490f6cecfa54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTg3MzZmNTEyNDliZWZlOWQ0YTQ0MTI2MTk0OTBmNmNlY2ZhNTQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T07:44:03Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T13:31:16Z"}, "message": "spelling fix, rework needless_bool with snippet (fixes #150)", "tree": {"sha": "93b14bbea1be671c949e6bcbeab309a7bbea2f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b14bbea1be671c949e6bcbeab309a7bbea2f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a98736f51249befe9d4a4412619490f6cecfa54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a98736f51249befe9d4a4412619490f6cecfa54", "html_url": "https://github.com/rust-lang/rust/commit/8a98736f51249befe9d4a4412619490f6cecfa54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a98736f51249befe9d4a4412619490f6cecfa54/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d64553bc63b059b8685bf88e7cfc7e1fce2d45d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d64553bc63b059b8685bf88e7cfc7e1fce2d45d", "html_url": "https://github.com/rust-lang/rust/commit/1d64553bc63b059b8685bf88e7cfc7e1fce2d45d"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "2a4ed50b93d32daa6dc48ce5534ee9a8e16db169", "filename": "src/needless_bool.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a98736f51249befe9d4a4412619490f6cecfa54/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98736f51249befe9d4a4412619490f6cecfa54/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=8a98736f51249befe9d4a4412619490f6cecfa54", "patch": "@@ -10,7 +10,7 @@ use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n-use utils::{de_p, span_lint};\n+use utils::{de_p, span_lint, snippet};\n \n declare_lint! {\n     pub NEEDLESS_BOOL,\n@@ -28,20 +28,30 @@ impl LintPass for NeedlessBool {\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n-        if let ExprIf(_, ref then_block, Option::Some(ref else_expr)) = e.node {\n+        if let ExprIf(ref pred, ref then_block, Some(ref else_expr)) = e.node {\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n-                (Option::Some(true), Option::Some(true)) => {\n+                (Some(true), Some(true)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"your if-then-else expression will always return true\"); },\n-                (Option::Some(true), Option::Some(false)) => {\n+                              \"this if-then-else expression will always return true\"); },\n+                (Some(false), Some(false)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"you can reduce your if statement to its predicate\"); },\n-                (Option::Some(false), Option::Some(true)) => {\n-                    span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"you can reduce your if statement to `!` + its predicate\"); },\n-                (Option::Some(false), Option::Some(false)) => {\n-                    span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"your if-then-else expression will always return false\"); },\n+                              \"this if-then-else expression will always return false\"); },\n+                (Some(true), Some(false)) => {\n+                    let pred_snip = snippet(cx, pred.span, \"..\");\n+                    let hint = if pred_snip == \"..\" { \"its predicate\".into() } else {\n+                        format!(\"`{}`\", pred_snip)\n+                    };\n+                    span_lint(cx, NEEDLESS_BOOL, e.span, &format!(\n+                        \"you can reduce this if-then-else expression to just {}\", hint));\n+                },\n+                (Some(false), Some(true)) => {\n+                    let pred_snip = snippet(cx, pred.span, \"..\");\n+                    let hint = if pred_snip == \"..\" { \"`!` and its predicate\".into() } else {\n+                        format!(\"`!{}`\", pred_snip)\n+                    };\n+                    span_lint(cx, NEEDLESS_BOOL, e.span, &format!(\n+                        \"you can reduce this if-then-else expression to just {}\", hint));\n+                },\n                 _ => ()\n             }\n         }\n@@ -51,14 +61,14 @@ impl LintPass for NeedlessBool {\n fn fetch_bool_block(block: &Block) -> Option<bool> {\n     if block.stmts.is_empty() {\n         block.expr.as_ref().map(de_p).and_then(fetch_bool_expr)\n-    } else { Option::None }\n+    } else { None }\n }\n \n fn fetch_bool_expr(expr: &Expr) -> Option<bool> {\n     match &expr.node {\n         &ExprBlock(ref block) => fetch_bool_block(block),\n         &ExprLit(ref lit_ptr) => if let &LitBool(value) = &lit_ptr.node {\n-            Option::Some(value) } else { Option::None },\n-        _ => Option::None\n+            Some(value) } else { None },\n+        _ => None\n     }\n }"}, {"sha": "8f61a11aa084d05a4b67e5c85a7b0b1e5f91e41c", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a98736f51249befe9d4a4412619490f6cecfa54/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98736f51249befe9d4a4412619490f6cecfa54/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=8a98736f51249befe9d4a4412619490f6cecfa54", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     1.5 < 1.5; //~ERROR equal expressions\n     1u64 >= 1u64; //~ERROR equal expressions\n \n-    // casts, methods, parenthesis\n+    // casts, methods, parentheses\n     (1 as u64) & (1 as u64); //~ERROR equal expressions\n     1 ^ ((((((1)))))); //~ERROR equal expressions\n     id((1)) | id(1); //~ERROR equal expressions"}, {"sha": "39fdf6353fd0f09418174df0406ec970844ae849", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a98736f51249befe9d4a4412619490f6cecfa54/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a98736f51249befe9d4a4412619490f6cecfa54/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=8a98736f51249befe9d4a4412619490f6cecfa54", "patch": "@@ -4,9 +4,9 @@\n #[deny(needless_bool)]\n fn main() {\n     let x = true;\n-    if x { true } else { true }; //~ERROR your if-then-else expression will always return true\n-    if x { false } else { false }; //~ERROR your if-then-else expression will always return false\n-    if x { true } else { false }; //~ERROR you can reduce your if statement to its predicate\n-    if x { false } else { true }; //~ERROR you can reduce your if statement to `!` + its predicate\n+    if x { true } else { true }; //~ERROR this if-then-else expression will always return true\n+    if x { false } else { false }; //~ERROR this if-then-else expression will always return false\n+    if x { true } else { false }; //~ERROR you can reduce this if-then-else expression to just `x`\n+    if x { false } else { true }; //~ERROR you can reduce this if-then-else expression to just `!x`\n     if x { x } else { false }; // would also be questionable, but we don't catch this yet\n }"}]}