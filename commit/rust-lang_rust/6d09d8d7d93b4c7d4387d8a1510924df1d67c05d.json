{"sha": "6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDlkOGQ3ZDkzYjRjN2Q0Mzg3ZDhhMTUxMDkyNGRmMWQ2N2MwNWQ=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-24T17:04:07Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-26T05:07:41Z"}, "message": "add unstable_features to ParseSess", "tree": {"sha": "17b47764b3603e6405bb091a8152334d67dd1869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b47764b3603e6405bb091a8152334d67dd1869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "html_url": "https://github.com/rust-lang/rust/commit/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9", "html_url": "https://github.com/rust-lang/rust/commit/b0dba7439d4bc35df6185388d4e9af1b6cd5f1e9"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "2b4f03bd4f6ef6904b82d798cc87ca0aa7ecb3b9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "patch": "@@ -36,6 +36,7 @@ use parse::ParseSess;\n use parse::token::InternedString;\n \n use std::ascii::AsciiExt;\n+use std::env;\n \n macro_rules! setter {\n     ($field: ident) => {{\n@@ -1296,6 +1297,23 @@ pub enum UnstableFeatures {\n     Cheat\n }\n \n+impl UnstableFeatures {\n+    pub fn from_environment() -> UnstableFeatures {\n+        // Whether this is a feature-staged build, i.e. on the beta or stable channel\n+        let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+        // The secret key needed to get through the rustc build itself by\n+        // subverting the unstable features lints\n+        let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n+        // The matching key to the above, only known by the build system\n+        let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n+        match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n+            (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n+            (true, _, _) => UnstableFeatures::Disallow,\n+            (false, _, _) => UnstableFeatures::Allow\n+        }\n+    }\n+}\n+\n fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,\n                         unstable: UnstableFeatures) {\n     let allow_features = match unstable {"}, {"sha": "1e286c143de9b4b5ad97718343f6f1ea2c9ed053", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d09d8d7d93b4c7d4387d8a1510924df1d67c05d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6d09d8d7d93b4c7d4387d8a1510924df1d67c05d", "patch": "@@ -14,6 +14,7 @@ use ast;\n use codemap::CodeMap;\n use syntax_pos::{self, Span, FileMap};\n use errors::{Handler, ColorConfig, DiagnosticBuilder};\n+use feature_gate::UnstableFeatures;\n use parse::parser::Parser;\n use parse::token::InternedString;\n use ptr::P;\n@@ -42,6 +43,7 @@ pub mod obsolete;\n /// Info about a parsing session.\n pub struct ParseSess {\n     pub span_diagnostic: Handler, // better be the same as the one in the reader!\n+    pub unstable_features: UnstableFeatures,\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n     code_map: Rc<CodeMap>,\n@@ -60,6 +62,7 @@ impl ParseSess {\n     pub fn with_span_handler(handler: Handler, code_map: Rc<CodeMap>) -> ParseSess {\n         ParseSess {\n             span_diagnostic: handler,\n+            unstable_features: UnstableFeatures::from_environment(),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map: code_map\n         }"}]}