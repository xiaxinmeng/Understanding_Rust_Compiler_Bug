{"sha": "4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NjhjZGYzYzQ3ODhlNGE2N2YxYjdkZWEwZWIyZDY2MWFjMDVhNDk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-15T04:01:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-15T23:13:56Z"}, "message": "Convert some unnecessary StaticNativeMutexes to NativeMutexes.", "tree": {"sha": "040ab0c33642c93b68c44fdd3db594cacab64a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040ab0c33642c93b68c44fdd3db594cacab64a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "html_url": "https://github.com/rust-lang/rust/commit/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "html_url": "https://github.com/rust-lang/rust/commit/5d86e24ab27dba0a773bd00a98e3845ece0ebf16"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "ad32ba7ba6d1c8ff5dda82bef37ab754a4da3d7b", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "patch": "@@ -15,7 +15,7 @@ use std::rt::rtio::{RemoteCallback, PausableIdleCallback, Callback, EventLoop};\n use std::rt::task::BlockedTask;\n use std::rt::task::Task;\n use std::sync::deque;\n-use std::unstable::mutex::StaticNativeMutex;\n+use std::unstable::mutex::NativeMutex;\n use std::unstable::raw;\n \n use TaskState;\n@@ -764,7 +764,7 @@ impl Scheduler {\n         // to it, but we're guaranteed that the task won't exit until we've\n         // unlocked the lock so there's no worry of this memory going away.\n         let cur = self.change_task_context(cur, next, |sched, mut task| {\n-            let lock: *mut StaticNativeMutex = &mut task.nasty_deschedule_lock;\n+            let lock: *mut NativeMutex = &mut task.nasty_deschedule_lock;\n             unsafe {\n                 let _guard = (*lock).lock();\n                 f(sched, BlockedTask::block(task.swap()));"}, {"sha": "74d93b4b2db9aadafb90f903f814eff381cc8263", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "patch": "@@ -25,7 +25,7 @@ use std::rt::local::Local;\n use std::rt::rtio;\n use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::task::TaskOpts;\n-use std::unstable::mutex::StaticNativeMutex;\n+use std::unstable::mutex::NativeMutex;\n use std::unstable::raw;\n \n use context::Context;\n@@ -65,7 +65,7 @@ pub struct GreenTask {\n     pool_id: uint,\n \n     // See the comments in the scheduler about why this is necessary\n-    nasty_deschedule_lock: StaticNativeMutex,\n+    nasty_deschedule_lock: NativeMutex,\n }\n \n pub enum TaskType {\n@@ -163,7 +163,7 @@ impl GreenTask {\n             task_type: task_type,\n             sched: None,\n             handle: None,\n-            nasty_deschedule_lock: unsafe { StaticNativeMutex::new() },\n+            nasty_deschedule_lock: unsafe { NativeMutex::new() },\n             task: Some(~Task::new()),\n         }\n     }\n@@ -322,7 +322,7 @@ impl GreenTask {\n     // uncontended except for when the task is rescheduled).\n     fn reawaken_remotely(mut ~self) {\n         unsafe {\n-            let mtx = &mut self.nasty_deschedule_lock as *mut StaticNativeMutex;\n+            let mtx = &mut self.nasty_deschedule_lock as *mut NativeMutex;\n             let handle = self.handle.get_mut_ref() as *mut SchedHandle;\n             let _guard = (*mtx).lock();\n             (*handle).send(RunOnce(self));\n@@ -478,12 +478,6 @@ impl Runtime for GreenTask {\n     fn wrap(~self) -> ~Any { self as ~Any }\n }\n \n-impl Drop for GreenTask {\n-    fn drop(&mut self) {\n-        unsafe { self.nasty_deschedule_lock.destroy(); }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use std::rt::Runtime;"}, {"sha": "d8f410834f252c3b99d7b15086e2b91fc6692a5c", "filename": "src/libnative/task.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "patch": "@@ -22,7 +22,7 @@ use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::rt::thread::Thread;\n use std::rt;\n use std::task::TaskOpts;\n-use std::unstable::mutex::StaticNativeMutex;\n+use std::unstable::mutex::NativeMutex;\n use std::unstable::stack;\n \n use io;\n@@ -40,7 +40,7 @@ pub fn new(stack_bounds: (uint, uint)) -> ~Task {\n \n fn ops() -> ~Ops {\n     ~Ops {\n-        lock: unsafe { StaticNativeMutex::new() },\n+        lock: unsafe { NativeMutex::new() },\n         awoken: false,\n         io: io::IoFactory::new(),\n         // these *should* get overwritten\n@@ -109,7 +109,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n // This structure is the glue between channels and the 1:1 scheduling mode. This\n // structure is allocated once per task.\n struct Ops {\n-    lock: StaticNativeMutex,       // native synchronization\n+    lock: NativeMutex,       // native synchronization\n     awoken: bool,      // used to prevent spurious wakeups\n     io: io::IoFactory, // local I/O factory\n \n@@ -251,12 +251,6 @@ impl rt::Runtime for Ops {\n     }\n }\n \n-impl Drop for Ops {\n-    fn drop(&mut self) {\n-        unsafe { self.lock.destroy() }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use std::rt::Runtime;"}, {"sha": "031ce991ba47bdf1aa977696ad310c13aab1d9b8", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=4668cdf3c4788e4a67f1b7dea0eb2d661ac05a49", "patch": "@@ -28,7 +28,7 @@ use rt::local::Local;\n use rt::task::{Task, BlockedTask};\n use rt::thread::Thread;\n use sync::atomics;\n-use unstable::mutex::StaticNativeMutex;\n+use unstable::mutex::NativeMutex;\n use vec::OwnedVector;\n \n use mpsc = sync::mpsc_queue;\n@@ -53,7 +53,7 @@ pub struct Packet<T> {\n \n     // this lock protects various portions of this implementation during\n     // select()\n-    select_lock: StaticNativeMutex,\n+    select_lock: NativeMutex,\n }\n \n pub enum Failure {\n@@ -72,7 +72,7 @@ impl<T: Send> Packet<T> {\n             channels: atomics::AtomicInt::new(2),\n             port_dropped: atomics::AtomicBool::new(false),\n             sender_drain: atomics::AtomicInt::new(0),\n-            select_lock: unsafe { StaticNativeMutex::new() },\n+            select_lock: unsafe { NativeMutex::new() },\n         };\n         // see comments in inherit_blocker about why we grab this lock\n         unsafe { p.select_lock.lock_noguard() }\n@@ -486,7 +486,6 @@ impl<T: Send> Drop for Packet<T> {\n             assert_eq!(self.cnt.load(atomics::SeqCst), DISCONNECTED);\n             assert_eq!(self.to_wake.load(atomics::SeqCst), 0);\n             assert_eq!(self.channels.load(atomics::SeqCst), 0);\n-            self.select_lock.destroy();\n         }\n     }\n }"}]}