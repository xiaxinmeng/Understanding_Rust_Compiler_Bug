{"sha": "5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOWJhNGM1NTA1ZjNmM2MxYzQyYzUwMDA0ZjJiYWIwMTBkZWMwYjA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-01T21:35:53Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-03T01:58:21Z"}, "message": "Remove redundant 'Import' in variant names, stop reexporting.", "tree": {"sha": "a15eba5dbc4302e0bc6c88e7cefedb398fe070ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15eba5dbc4302e0bc6c88e7cefedb398fe070ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "html_url": "https://github.com/rust-lang/rust/commit/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a400cccd5439cb16e8be087f14ca3109318d7435", "url": "https://api.github.com/repos/rust-lang/rust/commits/a400cccd5439cb16e8be087f14ca3109318d7435", "html_url": "https://github.com/rust-lang/rust/commit/a400cccd5439cb16e8be087f14ca3109318d7435"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "b3e65293a86752da383fc1fc66f899eab5fdf405", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "patch": "@@ -14,7 +14,6 @@\n pub use self::Type::*;\n pub use self::VariantKind::*;\n pub use self::Mutability::*;\n-pub use self::Import::*;\n pub use self::ItemEnum::*;\n pub use self::Attribute::*;\n pub use self::TyParamBound::*;\n@@ -2527,7 +2526,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         });\n         let (mut ret, inner) = match self.node {\n             hir::ViewPathGlob(ref p) => {\n-                (vec![], GlobImport(resolve_use_source(cx, p.clean(cx), self.id)))\n+                (vec![], Import::Glob(resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n             hir::ViewPathList(ref p, ref list) => {\n                 // Attempt to inline all reexported items, but be sure\n@@ -2553,17 +2552,17 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 if remaining.is_empty() {\n                     return ret;\n                 }\n-                (ret, ImportList(resolve_use_source(cx, p.clean(cx), self.id),\n-                                 remaining))\n+                (ret, Import::List(resolve_use_source(cx, p.clean(cx), self.id),\n+                                   remaining))\n             }\n             hir::ViewPathSimple(name, ref p) => {\n                 if !denied {\n                     if let Some(items) = inline::try_inline(cx, self.id, Some(name)) {\n                         return items;\n                     }\n                 }\n-                (vec![], SimpleImport(name.clean(cx),\n-                                      resolve_use_source(cx, p.clean(cx), self.id)))\n+                (vec![], Import::Simple(name.clean(cx),\n+                                        resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n         };\n         ret.push(Item {\n@@ -2583,11 +2582,11 @@ impl Clean<Vec<Item>> for doctree::Import {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum Import {\n     // use source as str;\n-    SimpleImport(String, ImportSource),\n+    Simple(String, ImportSource),\n     // use source::*;\n-    GlobImport(ImportSource),\n+    Glob(ImportSource),\n     // use source::{a, b, c};\n-    ImportList(ImportSource, Vec<ViewListIdent>),\n+    List(ImportSource, Vec<ViewListIdent>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "3f7f01a9a3b51708691317dd5ae6686d3e100f25", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5b9ba4c5505f3f3c1c42c50004f2bab010dec0b0", "patch": "@@ -708,17 +708,17 @@ impl fmt::Display for ConstnessSpace {\n impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::SimpleImport(ref name, ref src) => {\n+            clean::Import::Simple(ref name, ref src) => {\n                 if *name == src.path.last_name() {\n                     write!(f, \"use {};\", *src)\n                 } else {\n                     write!(f, \"use {} as {};\", *src, *name)\n                 }\n             }\n-            clean::GlobImport(ref src) => {\n+            clean::Import::Glob(ref src) => {\n                 write!(f, \"use {}::*;\", *src)\n             }\n-            clean::ImportList(ref src, ref names) => {\n+            clean::Import::List(ref src, ref names) => {\n                 write!(f, \"use {}::{{\", *src)?;\n                 for (i, n) in names.iter().enumerate() {\n                     if i > 0 {"}]}