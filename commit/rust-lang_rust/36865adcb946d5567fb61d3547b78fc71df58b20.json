{"sha": "36865adcb946d5567fb61d3547b78fc71df58b20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODY1YWRjYjk0NmQ1NTY3ZmI2MWQzNTQ3Yjc4ZmM3MWRmNThiMjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T13:40:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "Introduce HasSource trait", "tree": {"sha": "4cec6a3d18de8242c334fe303717c1f2b1c42be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cec6a3d18de8242c334fe303717c1f2b1c42be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36865adcb946d5567fb61d3547b78fc71df58b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36865adcb946d5567fb61d3547b78fc71df58b20", "html_url": "https://github.com/rust-lang/rust/commit/36865adcb946d5567fb61d3547b78fc71df58b20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36865adcb946d5567fb61d3547b78fc71df58b20/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "html_url": "https://github.com/rust-lang/rust/commit/2a1fe26b6d354dbbd1b3843d288d56e74fa00557"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "7658504883ef1e8d5edf3cdfb76871d085c8c640", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=36865adcb946d5567fb61d3547b78fc71df58b20", "patch": "@@ -31,6 +31,11 @@ impl<T> From<(HirFileId, T)> for Source<T> {\n     }\n }\n \n+pub trait HasSource {\n+    type Ast;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast>;\n+}\n+\n /// hir::Crate describes a single crate. It's the main interface with which\n /// a crate's dependencies interact. Mostly, it should be just a proxy for the\n /// root module.\n@@ -364,6 +369,13 @@ pub struct Struct {\n     pub(crate) id: StructId,\n }\n \n+impl HasSource for Struct {\n+    type Ast = TreeArc<ast::StructDef>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Struct {\n     pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n         self.id.source(db).into()\n@@ -422,6 +434,13 @@ pub struct Union {\n     pub(crate) id: StructId,\n }\n \n+impl HasSource for Union {\n+    type Ast = TreeArc<ast::StructDef>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Union {\n     pub fn source(\n         self,\n@@ -455,6 +474,13 @@ pub struct Enum {\n     pub(crate) id: EnumId,\n }\n \n+impl HasSource for Enum {\n+    type Ast = TreeArc<ast::EnumDef>;\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::EnumDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Enum {\n     pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::EnumDef>> {\n         self.id.source(db).into()"}, {"sha": "02f5f7f40d052af14bcc484f02c247f4b1f09c1b", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=36865adcb946d5567fb61d3547b78fc71df58b20", "patch": "@@ -81,5 +81,5 @@ pub use self::code_model::{\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n     Trait, TypeAlias, MacroDef, Container,\n-    BuiltinType, Source,\n+    BuiltinType, Source, HasSource,\n };"}, {"sha": "bef5f0980a1bcfbd7e851bd1e0a615dde064097e", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36865adcb946d5567fb61d3547b78fc71df58b20/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=36865adcb946d5567fb61d3547b78fc71df58b20", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr, TextRange, AstPtr,\n+    SyntaxNode, AstNode, SmolStr, TextRange, AstPtr, TreeArc,\n     SyntaxKind::{self, NAME},\n     ast::{self, DocCommentsOwner},\n     algo::visit::{visitor, Visitor},\n@@ -186,35 +186,25 @@ impl NavigationTarget {\n         }\n     }\n \n+    pub(crate) fn from_def_source<A, D>(db: &RootDatabase, def: D) -> NavigationTarget\n+    where\n+        D: hir::HasSource<Ast = TreeArc<A>>,\n+        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+    {\n+        let src = def.source(db);\n+        NavigationTarget::from_named(\n+            src.file_id.original_file(db),\n+            &*src.ast,\n+            src.ast.doc_comment_text(),\n+            src.ast.short_label(),\n+        )\n+    }\n+\n     pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::AdtDef) -> NavigationTarget {\n         match adt_def {\n-            hir::AdtDef::Struct(s) => {\n-                let src = s.source(db);\n-                NavigationTarget::from_named(\n-                    src.file_id.original_file(db),\n-                    &*src.ast,\n-                    src.ast.doc_comment_text(),\n-                    src.ast.short_label(),\n-                )\n-            }\n-            hir::AdtDef::Union(s) => {\n-                let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n-            hir::AdtDef::Enum(s) => {\n-                let src = s.source(db);\n-                NavigationTarget::from_named(\n-                    src.file_id.original_file(db),\n-                    &*src.ast,\n-                    src.ast.doc_comment_text(),\n-                    src.ast.short_label(),\n-                )\n-            }\n+            hir::AdtDef::Struct(it) => NavigationTarget::from_def_source(db, it),\n+            hir::AdtDef::Union(it) => NavigationTarget::from_def_source(db, it),\n+            hir::AdtDef::Enum(it) => NavigationTarget::from_def_source(db, it),\n         }\n     }\n "}]}