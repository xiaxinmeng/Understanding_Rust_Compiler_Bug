{"sha": "5585cce06c19524b5e8f44dcbe8de80af5083cf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODVjY2UwNmMxOTUyNGI1ZThmNDRkY2JlOGRlODBhZjUwODNjZjg=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-06-24T22:02:44Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-06-24T22:54:34Z"}, "message": "Add another example", "tree": {"sha": "5786462e2cd4614d231563bee427b1c870351b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5786462e2cd4614d231563bee427b1c870351b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5585cce06c19524b5e8f44dcbe8de80af5083cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5585cce06c19524b5e8f44dcbe8de80af5083cf8", "html_url": "https://github.com/rust-lang/rust/commit/5585cce06c19524b5e8f44dcbe8de80af5083cf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5585cce06c19524b5e8f44dcbe8de80af5083cf8/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8033f77fc9e394bbc4ba28b29e0be081341b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8033f77fc9e394bbc4ba28b29e0be081341b17", "html_url": "https://github.com/rust-lang/rust/commit/1c8033f77fc9e394bbc4ba28b29e0be081341b17"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "e797227c85b738b8f729a36813467f577cd61bdc", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5585cce06c19524b5e8f44dcbe8de80af5083cf8/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5585cce06c19524b5e8f44dcbe8de80af5083cf8/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=5585cce06c19524b5e8f44dcbe8de80af5083cf8", "patch": "@@ -454,6 +454,36 @@ impl<T> MaybeUninit<T> {\n     /// // x is initialized now:\n     /// let s = unsafe { x.assume_init() };\n     /// ```\n+    ///\n+    /// This method can be used to avoid unsafe in some cases. The example below\n+    /// shows a part of an implementation of a fixed sized arena that lends out\n+    /// pinned references.\n+    /// With `write`, we can avoid the need to write through a raw pointer:\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit_extra)]\n+    /// use core::pin::Pin;\n+    /// use core::mem::MaybeUninit;\n+    ///\n+    /// struct PinArena<T> {\n+    ///     memory: Box<[MaybeUninit<T>]>,\n+    ///     len: usize,\n+    /// }\n+    ///\n+    /// impl <T> PinArena<T> {\n+    ///     pub fn capacity(&self) -> usize {\n+    ///         self.memory.len()\n+    ///     }\n+    ///     pub fn push(&mut self, val: T) -> Pin<&mut T> {\n+    ///         if self.len >= self.capacity() {\n+    ///             panic!(\"Attempted to push to a full pin arena!\");\n+    ///         }\n+    ///         let ref_ = self.memory[self.len].write(val);\n+    ///         self.len += 1;\n+    ///         unsafe { Pin::new_unchecked(ref_) }\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"maybe_uninit_write\", since = \"1.55.0\")]\n     #[rustc_const_unstable(feature = \"const_maybe_uninit_write\", issue = \"63567\")]\n     #[inline(always)]"}]}