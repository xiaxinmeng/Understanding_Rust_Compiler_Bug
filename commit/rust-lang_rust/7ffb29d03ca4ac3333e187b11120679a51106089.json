{"sha": "7ffb29d03ca4ac3333e187b11120679a51106089", "node_id": "C_kwDOAAsO6NoAKDdmZmIyOWQwM2NhNGFjMzMzM2UxODdiMTExMjA2NzlhNTExMDYwODk", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-12-06T21:17:22Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2022-03-12T20:16:11Z"}, "message": "Only filter doc(hidden) fields/variants when not crate local", "tree": {"sha": "559fb51d90a2f7c90dece848262dbb2117e4e6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559fb51d90a2f7c90dece848262dbb2117e4e6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ffb29d03ca4ac3333e187b11120679a51106089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffb29d03ca4ac3333e187b11120679a51106089", "html_url": "https://github.com/rust-lang/rust/commit/7ffb29d03ca4ac3333e187b11120679a51106089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ffb29d03ca4ac3333e187b11120679a51106089/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04210aec5ff8e369a8e8468652e02254b5ee2922", "url": "https://api.github.com/repos/rust-lang/rust/commits/04210aec5ff8e369a8e8468652e02254b5ee2922", "html_url": "https://github.com/rust-lang/rust/commit/04210aec5ff8e369a8e8468652e02254b5ee2922"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "72b12759315eaa3ad151fc757e7d7be5075ddf26", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -692,11 +692,11 @@ impl<'tcx> Constructor<'tcx> {\n     }\n \n     /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`\n-    /// attribute.\n+    /// attribute from a type not local to the current crate.\n     pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n         if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n-            let variant_def_id = adt.variant(*idx).def_id;\n-            return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n+            let variant_def_id = adt.variants[*idx].def_id;\n+            return pcx.cx.tcx.is_doc_hidden(variant_def_id) && !variant_def_id.is_local();\n         }\n         false\n     }"}, {"sha": "6a9870d708f597d61f5504565e5e6126c8795972", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -1313,7 +1313,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             tcx.eval_stability(field.did, None, DUMMY_SP, None),\n                             EvalResult::Deny { .. }\n                         )\n-                        && !tcx.is_doc_hidden(field.did)\n+                        // We only want to report the error if it is hidden and not local\n+                        && !(tcx.is_doc_hidden(field.did) && !field.did.is_local())\n                 })\n                 .collect();\n "}, {"sha": "aad3809a410a468d45fee33466e58301fb52272e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -4,6 +4,13 @@ extern crate hidden;\n \n use hidden::HiddenStruct;\n \n+struct InCrate {\n+    a: usize,\n+    b: bool,\n+    #[doc(hidden)]\n+    im_hidden: u8\n+}\n+\n fn main() {\n     let HiddenStruct { one, two, } = HiddenStruct::default();\n     //~^ pattern requires `..` due to inaccessible fields\n@@ -13,4 +20,7 @@ fn main() {\n \n     let HiddenStruct { one, hide } = HiddenStruct::default();\n     //~^ pattern does not mention field `two`\n+\n+    let InCrate { a, b } = InCrate { a: 0, b: false, im_hidden: 0 };\n+    //~^ pattern does not mention field `im_hidden`\n }"}, {"sha": "2f1575bfa4167f30dd5c715e66533f69ca2851d4", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -1,5 +1,5 @@\n error: pattern requires `..` due to inaccessible fields\n-  --> $DIR/doc-hidden-fields.rs:8:9\n+  --> $DIR/doc-hidden-fields.rs:15:9\n    |\n LL |     let HiddenStruct { one, two, } = HiddenStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL |     let HiddenStruct { one, two, .., } = HiddenStruct::default();\n    |                                ++++\n \n error[E0027]: pattern does not mention field `two` and inaccessible fields\n-  --> $DIR/doc-hidden-fields.rs:11:9\n+  --> $DIR/doc-hidden-fields.rs:18:9\n    |\n LL |     let HiddenStruct { one, } = HiddenStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^ missing field `two` and inaccessible fields\n@@ -25,7 +25,7 @@ LL |     let HiddenStruct { one, .. } = HiddenStruct::default();\n    |                           ~~~~~~\n \n error[E0027]: pattern does not mention field `two`\n-  --> $DIR/doc-hidden-fields.rs:14:9\n+  --> $DIR/doc-hidden-fields.rs:21:9\n    |\n LL |     let HiddenStruct { one, hide } = HiddenStruct::default();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `two`\n@@ -39,6 +39,21 @@ help: if you don't care about this missing field, you can explicitly ignore it\n LL |     let HiddenStruct { one, hide, .. } = HiddenStruct::default();\n    |                                 ~~~~~~\n \n-error: aborting due to 3 previous errors\n+error[E0027]: pattern does not mention field `im_hidden`\n+  --> $DIR/doc-hidden-fields.rs:24:9\n+   |\n+LL |     let InCrate { a, b } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |         ^^^^^^^^^^^^^^^^ missing field `im_hidden`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let InCrate { a, b, im_hidden } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |                       ~~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let InCrate { a, b, .. } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |                       ~~~~~~\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0027`."}, {"sha": "d968c48fb1ab78b3b733363c53c9d90dc97ebd5e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -4,6 +4,13 @@ extern crate hidden;\n \n use hidden::HiddenEnum;\n \n+enum InCrate {\n+    A,\n+    B,\n+    #[doc(hidden)]\n+    C,\n+}\n+\n fn main() {\n     match HiddenEnum::A {\n         HiddenEnum::A => {}\n@@ -27,4 +34,10 @@ fn main() {\n         Some(HiddenEnum::A) => {}\n     }\n     //~^^^^ non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+\n+    match InCrate::A {\n+        InCrate::A => {}\n+        InCrate::B => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `C` not covered\n }"}, {"sha": "729716cb723ddd8f9f535ccedf5775030dfab49e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ffb29d03ca4ac3333e187b11120679a51106089/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=7ffb29d03ca4ac3333e187b11120679a51106089", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:8:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:15:11\n    |\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ pattern `_` not covered\n@@ -8,7 +8,7 @@ LL |     match HiddenEnum::A {\n    = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:21:11\n    |\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ pattern `B` not covered\n@@ -23,7 +23,7 @@ LL |     B,\n    = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:27:11\n    |\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered\n@@ -38,7 +38,7 @@ LL |     B,\n    = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:25:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:32:11\n    |\n LL |     match None {\n    |           ^^^^ patterns `Some(B)` and `Some(_)` not covered\n@@ -52,6 +52,24 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Option<HiddenEnum>`\n \n-error: aborting due to 4 previous errors\n+error[E0004]: non-exhaustive patterns: `C` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:38:11\n+   |\n+LL | / enum InCrate {\n+LL | |     A,\n+LL | |     B,\n+LL | |     #[doc(hidden)]\n+LL | |     C,\n+   | |     - not covered\n+LL | | }\n+   | |_- `InCrate` defined here\n+...\n+LL |       match InCrate::A {\n+   |             ^^^^^^^^^^ pattern `C` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `InCrate`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}