{"sha": "4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzMzMTQwYTM0NzAzYzM4M2VkNDZmMGZiMmQxZDYxZjYzZDk2ZDc=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-16T16:03:37Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-16T16:03:37Z"}, "message": "Imrove fn name computation in `Generate function`", "tree": {"sha": "e8f3de4f03bdcc678e646fd7a9f7ada800099c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f3de4f03bdcc678e646fd7a9f7ada800099c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "html_url": "https://github.com/rust-lang/rust/commit/4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc33140a34703c383ed46f0fb2d1d61f63d96d7/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726a2aa211974a6bb1a612fe8824df7baf59faf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/726a2aa211974a6bb1a612fe8824df7baf59faf6", "html_url": "https://github.com/rust-lang/rust/commit/726a2aa211974a6bb1a612fe8824df7baf59faf6"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "9e08b466e276b28193e6b385bbb5c1b223a72d21", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4dc33140a34703c383ed46f0fb2d1d61f63d96d7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc33140a34703c383ed46f0fb2d1d61f63d96d7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "patch": "@@ -71,12 +71,13 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n     let path = path_expr.path()?;\n-    let fn_name = fn_name(&path)?;\n+    let name_ref = path.segment()?.name_ref()?;\n     if ctx.sema.resolve_path(&path).is_some() {\n         // The function call already resolves, no need to add a function\n         return None;\n     }\n \n+    let fn_name = &*name_ref.text();\n     let target_module;\n     let mut adt_name = None;\n \n@@ -93,7 +94,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                 if current_module.krate() != module.krate() {\n                     return None;\n                 }\n-                let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n+                let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n                 let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n                 adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n                 (target, file, insert_offset)\n@@ -107,7 +108,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             get_fn_target(ctx, &target_module, call.clone())?\n         }\n     };\n-    let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module, target)?;\n+    let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let label = format!(\"Generate {} function\", function_builder.fn_name);\n     add_func_to_accumulator(\n@@ -241,13 +242,13 @@ impl FunctionBuilder {\n     fn from_call(\n         ctx: &AssistContext,\n         call: &ast::CallExpr,\n-        path: &ast::Path,\n+        fn_name: &str,\n         target_module: Option<hir::Module>,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| current_module(target.syntax(), ctx))?;\n-        let fn_name = fn_name(path)?;\n+        let fn_name = make::name(fn_name);\n         let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call.clone()))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n@@ -428,11 +429,6 @@ impl GeneratedFunctionTarget {\n     }\n }\n \n-fn fn_name(call: &ast::Path) -> Option<ast::Name> {\n-    let name = call.segment()?.syntax().to_string();\n-    Some(make::name(&name))\n-}\n-\n /// Computes the type variables and arguments required for the generated function\n fn fn_args(\n     ctx: &AssistContext,\n@@ -1646,4 +1642,25 @@ fn bar() ${0:-> _} {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn no_panic_on_invalid_global_path() {\n+        check_assist(\n+            generate_function,\n+            r#\"\n+fn main() {\n+    ::foo$0();\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    ::foo();\n+}\n+\n+fn foo() ${0:-> _} {\n+    todo!()\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "c8ba638c523116362cb8cbc200daa6f2aae3f1b1", "filename": "crates/syntax/src/token_text.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dc33140a34703c383ed46f0fb2d1d61f63d96d7/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc33140a34703c383ed46f0fb2d1d61f63d96d7/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs?ref=4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "patch": "@@ -21,9 +21,9 @@ impl<'a> TokenText<'a> {\n     }\n \n     pub fn as_str(&self) -> &str {\n-        match self.0 {\n-            Repr::Borrowed(it) => it,\n-            Repr::Owned(ref green) => green.text(),\n+        match &self.0 {\n+            &Repr::Borrowed(it) => it,\n+            Repr::Owned(green) => green.text(),\n         }\n     }\n }"}]}