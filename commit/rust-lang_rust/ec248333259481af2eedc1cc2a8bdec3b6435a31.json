{"sha": "ec248333259481af2eedc1cc2a8bdec3b6435a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMjQ4MzMzMjU5NDgxYWYyZWVkYzFjYzJhOGJkZWMzYjY0MzVhMzE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-06T14:37:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T14:37:47Z"}, "message": "Rollup merge of #68845 - dwrensha:fix-68783, r=estebank\n\nstop using BytePos for computing spans in librustc_parse/parser/mod.rs\n\nComputing spans using logic such as `self.token.span.lo() + BytePos(1)` can cause internal compiler errors like #68730 when non-ascii characters are given as input.\n\n#68735 partially addressed this problem, but only for one case. Moreover, its usage of `next_point()` does not actually align with what `bump_with()` expects. For example, given the token `>>=`, we should pass the span consisting of the final two characters `>=`, but `next_point()` advances the span beyond the end of the `=`.\n\nThis pull request instead computes the start of the new span by doing `start_point(self.token.span).hi()`. This matches `self.token.span.lo() + BytePos(1)` in the common case where the characters are ascii, and it gracefully handles multibyte characters.\n\nFixes #68783.", "tree": {"sha": "7a074f7ee7ab201e97a0ce6bfde28f463f3dcd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a074f7ee7ab201e97a0ce6bfde28f463f3dcd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec248333259481af2eedc1cc2a8bdec3b6435a31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePCS7CRBK7hj4Ov3rIwAAdHIIAJ7DMxAyLVLpGDbprDymkDoN\nZXPKlamrsbBy/COR+ZG3FcoKAduhPYRHpillo3RpCaAkOxHwJF/jicq9kEqsrcNW\nYDait4HOl/OZPUG4KYY7wI0re6KzgjethvkSrIe4UTjOKD2M7qbV3eYxnn+gDXFZ\n28r9Rj04/tZ06poWSma3CoWHuzY7xYHI3HDbkgl3TMT9QW6fzD2aoXYg2FFNGvEa\nXX6r4Nt3LTSaryWTITninnuClgyOZuq4OsTJDwBof85kd151lqhF5eiapmEuhLeX\nHJ8TV20rkX+PsYRw20pPOurgU1GzqWE/k5Q4Wm5H5DN9bRA3fQGMOO83Ofxo6sI=\n=C8Lb\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a074f7ee7ab201e97a0ce6bfde28f463f3dcd0c\nparent 16e4e8f2de21601fb40e0419579a6126df8a1607\nparent 9ac68e128b112e312cfde264d04b9d374a4402d0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580999867 +0100\ncommitter GitHub <noreply@github.com> 1580999867 +0100\n\nRollup merge of #68845 - dwrensha:fix-68783, r=estebank\n\nstop using BytePos for computing spans in librustc_parse/parser/mod.rs\n\nComputing spans using logic such as `self.token.span.lo() + BytePos(1)` can cause internal compiler errors like #68730 when non-ascii characters are given as input.\n\n#68735 partially addressed this problem, but only for one case. Moreover, its usage of `next_point()` does not actually align with what `bump_with()` expects. For example, given the token `>>=`, we should pass the span consisting of the final two characters `>=`, but `next_point()` advances the span beyond the end of the `=`.\n\nThis pull request instead computes the start of the new span by doing `start_point(self.token.span).hi()`. This matches `self.token.span.lo() + BytePos(1)` in the common case where the characters are ascii, and it gracefully handles multibyte characters.\n\nFixes #68783.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec248333259481af2eedc1cc2a8bdec3b6435a31", "html_url": "https://github.com/rust-lang/rust/commit/ec248333259481af2eedc1cc2a8bdec3b6435a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec248333259481af2eedc1cc2a8bdec3b6435a31/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e4e8f2de21601fb40e0419579a6126df8a1607", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e4e8f2de21601fb40e0419579a6126df8a1607", "html_url": "https://github.com/rust-lang/rust/commit/16e4e8f2de21601fb40e0419579a6126df8a1607"}, {"sha": "9ac68e128b112e312cfde264d04b9d374a4402d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac68e128b112e312cfde264d04b9d374a4402d0", "html_url": "https://github.com/rust-lang/rust/commit/9ac68e128b112e312cfde264d04b9d374a4402d0"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "825607a234859c8cf4757c4a1480ceb8c1e13b32", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec248333259481af2eedc1cc2a8bdec3b6435a31/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec248333259481af2eedc1cc2a8bdec3b6435a31/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=ec248333259481af2eedc1cc2a8bdec3b6435a31", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n+use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::ptr::P;\n@@ -615,8 +615,8 @@ impl<'a> Parser<'a> {\n                 true\n             }\n             token::BinOpEq(token::Plus) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                self.bump_with(token::Eq, span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(token::Eq, self.token.span.with_lo(start_point.hi()));\n                 true\n             }\n             _ => false,\n@@ -633,8 +633,9 @@ impl<'a> Parser<'a> {\n                 Ok(())\n             }\n             token::AndAnd => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Ok(self.bump_with(token::BinOp(token::And), span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Ok(self\n+                    .bump_with(token::BinOp(token::And), self.token.span.with_lo(start_point.hi())))\n             }\n             _ => self.unexpected(),\n         }\n@@ -650,8 +651,9 @@ impl<'a> Parser<'a> {\n                 Ok(())\n             }\n             token::OrOr => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Ok(self.bump_with(token::BinOp(token::Or), span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Ok(self\n+                    .bump_with(token::BinOp(token::Or), self.token.span.with_lo(start_point.hi())))\n             }\n             _ => self.unexpected(),\n         }\n@@ -671,13 +673,16 @@ impl<'a> Parser<'a> {\n                 true\n             }\n             token::BinOp(token::Shl) => {\n-                let span = self.sess.source_map().next_point(self.token.span);\n-                self.bump_with(token::Lt, span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(token::Lt, self.token.span.with_lo(start_point.hi()));\n                 true\n             }\n             token::LArrow => {\n-                let span = self.sess.source_map().next_point(self.token.span);\n-                self.bump_with(token::BinOp(token::Minus), span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(\n+                    token::BinOp(token::Minus),\n+                    self.token.span.with_lo(start_point.hi()),\n+                );\n                 true\n             }\n             _ => false,\n@@ -707,16 +712,16 @@ impl<'a> Parser<'a> {\n                 Some(())\n             }\n             token::BinOp(token::Shr) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Gt, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Gt, self.token.span.with_lo(start_point.hi())))\n             }\n             token::BinOpEq(token::Shr) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Ge, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Ge, self.token.span.with_lo(start_point.hi())))\n             }\n             token::Ge => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Eq, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Eq, self.token.span.with_lo(start_point.hi())))\n             }\n             _ => None,\n         };"}, {"sha": "090b41d839f82b68c11fe38111b9fda254aa39b0", "filename": "src/test/ui/parser/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec248333259481af2eedc1cc2a8bdec3b6435a31/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec248333259481af2eedc1cc2a8bdec3b6435a31/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr?ref=ec248333259481af2eedc1cc2a8bdec3b6435a31"}]}