{"sha": "ac2284b80b5bf50702af2289c2ac4f04efa573ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjI4NGI4MGI1YmY1MDcwMmFmMjI4OWMyYWM0ZjA0ZWZhNTczZWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-23T15:18:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-23T15:18:50Z"}, "message": "expand type name", "tree": {"sha": "8e518af3acab740c5061e9ddc8d2c776b4ac3169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e518af3acab740c5061e9ddc8d2c776b4ac3169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2284b80b5bf50702af2289c2ac4f04efa573ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2284b80b5bf50702af2289c2ac4f04efa573ec", "html_url": "https://github.com/rust-lang/rust/commit/ac2284b80b5bf50702af2289c2ac4f04efa573ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2284b80b5bf50702af2289c2ac4f04efa573ec/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c027588263abf69bf0124f15eb6d261cd43316", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c027588263abf69bf0124f15eb6d261cd43316", "html_url": "https://github.com/rust-lang/rust/commit/53c027588263abf69bf0124f15eb6d261cd43316"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "b354815a3a1422c5579efec3b666af86e569f0ee", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ac2284b80b5bf50702af2289c2ac4f04efa573ec/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2284b80b5bf50702af2289c2ac4f04efa573ec/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=ac2284b80b5bf50702af2289c2ac4f04efa573ec", "patch": "@@ -1035,7 +1035,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n     }\n }\n \n-/// A newtype to construct uninitialized instances of `T`.\n+/// A wrapper to construct uninitialized instances of `T`.\n ///\n /// The compiler, in general, assumes that variables are properly initialized\n /// at their respective type. For example, a variable of reference type must\n@@ -1049,7 +1049,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// use std::mem::{self, MaybeUninit};\n ///\n /// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n-/// // equivalent code with `MaybeUninit`\n+/// // equivalent code with `MaybeUninit<&i32>`\n /// let x: &i32 = unsafe { MaybeUninit::zeroed().into_initialized() }; // undefined behavior!\n /// ```\n ///\n@@ -1064,7 +1064,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// use std::mem::{self, MaybeUninit};\n ///\n /// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n-/// // The equivalent code with `MaybeUninit`:\n+/// // The equivalent code with `MaybeUninit<bool>`:\n /// let b: bool = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n /// ```\n ///\n@@ -1078,7 +1078,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// use std::mem::{self, MaybeUninit};\n ///\n /// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior!\n-/// // equivalent code with `MaybeUninit`\n+/// // equivalent code with `MaybeUninit<i32>`\n /// let x: i32 = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n /// ```\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n@@ -1093,7 +1093,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// use std::mem::MaybeUninit;\n ///\n /// // Create an explicitly uninitialized reference. The compiler knows that data inside\n-/// // a `MaybeUninit` may be invalid, and hence this is not UB:\n+/// // a `MaybeUninit<T>` may be invalid, and hence this is not UB:\n /// let mut x = MaybeUninit::<&i32>::uninitialized();\n /// // Set it to a valid value.\n /// x.set(&0);\n@@ -1125,25 +1125,25 @@ impl<T: Copy> Clone for MaybeUninit<T> {\n impl<T> MaybeUninit<T> {\n     /// Create a new `MaybeUninit<T>` initialized with the given value.\n     ///\n-    /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n+    /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n     }\n \n-    /// Creates a new `MaybeUninit` in an uninitialized state.\n+    /// Creates a new `MaybeUninit<T>` in an uninitialized state.\n     ///\n-    /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n+    /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub const fn uninitialized() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n-    /// Creates a new `MaybeUninit` in an uninitialized state, with the memory being\n+    /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,\n     /// but `MaybeUninit<&'static i32>::zeroed()` is not because references must not\n@@ -1190,9 +1190,9 @@ impl<T> MaybeUninit<T> {\n         u\n     }\n \n-    /// Sets the value of the `MaybeUninit`. This overwrites any previous value without dropping it.\n-    /// For your convenience, this also returns a mutable reference to the (now safely initialized)\n-    /// contents of `self`.\n+    /// Sets the value of the `MaybeUninit<T>`. This overwrites any previous value\n+    /// without dropping it. For your convenience, this also returns a mutable\n+    /// reference to the (now safely initialized) contents of `self`.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn set(&mut self, val: T) -> &mut T {\n@@ -1215,7 +1215,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n     /// x.set(vec![0,1,2]);\n-    /// // Create a reference into the `MaybeUninit`. This is okay because we initialized it.\n+    /// // Create a reference into the `MaybeUninit<T>`. This is okay because we initialized it.\n     /// let x_vec = unsafe { &*x.as_ptr() };\n     /// assert_eq!(x_vec.len(), 3);\n     /// ```\n@@ -1272,13 +1272,13 @@ impl<T> MaybeUninit<T> {\n         unsafe { &mut *self.value as *mut T }\n     }\n \n-    /// Extracts the value from the `MaybeUninit` container. This is a great way\n+    /// Extracts the value from the `MaybeUninit<T>` container. This is a great way\n     /// to ensure that the data will get dropped, because the resulting `T` is\n     /// subject to the usual drop handling.\n     ///\n     /// # Unsafety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n     ///\n@@ -1374,7 +1374,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// # Unsafety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"53491\")]\n@@ -1387,7 +1387,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// # Unsafety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n     // FIXME(#53491): We currently rely on the above being incorrect, i.e., we have references"}]}