{"sha": "63cd10154dac82503c446baf8eb1b2abd3dac3ff", "node_id": "C_kwDOAAsO6NoAKDYzY2QxMDE1NGRhYzgyNTAzYzQ0NmJhZjhlYjFiMmFiZDNkYWMzZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-02T21:07:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-02T21:07:44Z"}, "message": "Rollup merge of #99933 - alex:parallel-html-checking, r=Mark-Simulacrum\n\nparallelize HTML checking tool\n\nthere's a lot of IO, so timings on my laptop are far from stable, but it seems to be considerably faster.\n\nthis step often appears to take 5+ minutes in CI, so hopefully this offers a speedup", "tree": {"sha": "fcf3bb727fbcd8c8242a175052210af7ea6f2d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf3bb727fbcd8c8242a175052210af7ea6f2d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63cd10154dac82503c446baf8eb1b2abd3dac3ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6ZIgCRBK7hj4Ov3rIwAAqZgIAErqo3JqitGfk9OrGbM4SSaj\nXESG6rGSBxTzv8MaxnSWMzi8BP3wL+NHENftNrRHKr575lt+4iKxr4+JCEdUGta9\nemSKGJt4WFWFj3+7NU69BSzd4x/yhDKdWqlDmHxoNfzWPNL2lgLGwX9fZvwu4JQc\nEnAV7zejR08m//S6UIBZ1yN4trFMHJNWlXDhkB3jZ3kZ0zXvUTcNpNNwm1DNrmv7\nhdQA1sKXREYvTAJjNF4jNTa13kyyh3YoesCYh8qFFklpka5aUPBBqwZlxj91jhl1\nXgkSetbVv0F8znMMyZdN8KKcIYjZD/Wyqx/Qy5V0HMzHQE5oWkl7sXM6+NcpuYA=\n=R9oz\n-----END PGP SIGNATURE-----\n", "payload": "tree fcf3bb727fbcd8c8242a175052210af7ea6f2d6f\nparent 4493a0f4724c0bae1436242d76cccc9c0a287b80\nparent 5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659474464 +0200\ncommitter GitHub <noreply@github.com> 1659474464 +0200\n\nRollup merge of #99933 - alex:parallel-html-checking, r=Mark-Simulacrum\n\nparallelize HTML checking tool\n\nthere's a lot of IO, so timings on my laptop are far from stable, but it seems to be considerably faster.\n\nthis step often appears to take 5+ minutes in CI, so hopefully this offers a speedup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd10154dac82503c446baf8eb1b2abd3dac3ff", "html_url": "https://github.com/rust-lang/rust/commit/63cd10154dac82503c446baf8eb1b2abd3dac3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63cd10154dac82503c446baf8eb1b2abd3dac3ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80"}, {"sha": "5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "html_url": "https://github.com/rust-lang/rust/commit/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "b07da0644046ee731e6069f66ba1f41c3305c691", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63cd10154dac82503c446baf8eb1b2abd3dac3ff/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/63cd10154dac82503c446baf8eb1b2abd3dac3ff/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=63cd10154dac82503c446baf8eb1b2abd3dac3ff", "patch": "@@ -1788,6 +1788,7 @@ dependencies = [\n name = \"html-checker\"\n version = \"0.1.0\"\n dependencies = [\n+ \"rayon\",\n  \"walkdir\",\n ]\n "}, {"sha": "72d61d9bd2638048050344c787a97d84d11c6a63", "filename": "src/tools/html-checker/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63cd10154dac82503c446baf8eb1b2abd3dac3ff/src%2Ftools%2Fhtml-checker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/63cd10154dac82503c446baf8eb1b2abd3dac3ff/src%2Ftools%2Fhtml-checker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2FCargo.toml?ref=63cd10154dac82503c446baf8eb1b2abd3dac3ff", "patch": "@@ -9,3 +9,4 @@ path = \"main.rs\"\n \n [dependencies]\n walkdir = \"2\"\n+rayon = \"1.5\""}, {"sha": "9b4d2c52598068892f8277f1b7bff44a6b23a6f4", "filename": "src/tools/html-checker/main.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/63cd10154dac82503c446baf8eb1b2abd3dac3ff/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cd10154dac82503c446baf8eb1b2abd3dac3ff/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=63cd10154dac82503c446baf8eb1b2abd3dac3ff", "patch": "@@ -1,3 +1,4 @@\n+use rayon::iter::{ParallelBridge, ParallelIterator};\n use std::env;\n use std::path::Path;\n use std::process::{Command, Output};\n@@ -56,27 +57,30 @@ const DOCS_TO_CHECK: &[&str] =\n \n // Returns the number of files read and the number of errors.\n fn find_all_html_files(dir: &Path) -> (usize, usize) {\n-    let mut files_read = 0;\n-    let mut errors = 0;\n-\n-    for entry in walkdir::WalkDir::new(dir).into_iter().filter_entry(|e| {\n-        e.depth() != 1\n-            || e.file_name()\n-                .to_str()\n-                .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n-                .unwrap_or(false)\n-    }) {\n-        let entry = entry.expect(\"failed to read file\");\n-        if !entry.file_type().is_file() {\n-            continue;\n-        }\n-        let entry = entry.path();\n-        if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n-            errors += check_html_file(&entry);\n-            files_read += 1;\n-        }\n-    }\n-    (files_read, errors)\n+    walkdir::WalkDir::new(dir)\n+        .into_iter()\n+        .filter_entry(|e| {\n+            e.depth() != 1\n+                || e.file_name()\n+                    .to_str()\n+                    .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n+                    .unwrap_or(false)\n+        })\n+        .par_bridge()\n+        .map(|entry| {\n+            let entry = entry.expect(\"failed to read file\");\n+            if !entry.file_type().is_file() {\n+                return (0, 0);\n+            }\n+            let entry = entry.path();\n+            // (Number of files processed, number of errors)\n+            if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n+                (1, check_html_file(&entry))\n+            } else {\n+                (0, 0)\n+            }\n+        })\n+        .reduce(|| (0, 0), |a, b| (a.0 + b.0, a.1 + b.1))\n }\n \n /// Default `tidy` command for macOS is too old that it does not have `mute-id` and `mute` options."}]}