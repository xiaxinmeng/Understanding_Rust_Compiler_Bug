{"sha": "3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNWQwMThlYmI2ZWU4YWE2MTgxZWJmMWNmOWJhMGNiNDA3ZjYyMmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-23T20:48:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-03T21:34:28Z"}, "message": "Handle `Span`s for byte and raw strings and add more detail", "tree": {"sha": "e714dab8b842b3abe0f3507ae61e250bb2f46105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e714dab8b842b3abe0f3507ae61e250bb2f46105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "html_url": "https://github.com/rust-lang/rust/commit/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "html_url": "https://github.com/rust-lang/rust/commit/b81f5811f96fe750ab28c15219d1b0dba6b1dc90"}], "stats": {"total": 461, "additions": 278, "deletions": 183}, "files": [{"sha": "4a638ec3f80206efc4dda9ef4af01dcecfd5d323", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -14,7 +14,7 @@ mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;\n \n-use unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n+use unescape_error_reporting::{emit_unescape_error, escaped_char};\n \n #[derive(Clone, Debug)]\n pub struct UnmatchedBrace {\n@@ -122,11 +122,9 @@ impl<'a> StringReader<'a> {\n         m: &str,\n         c: char,\n     ) -> DiagnosticBuilder<'a> {\n-        let mut m = m.to_string();\n-        m.push_str(\": \");\n-        push_escaped_char(&mut m, c);\n-\n-        self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), &m[..])\n+        self.sess\n+            .span_diagnostic\n+            .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n     }\n \n     /// Turns simple `rustc_lexer::TokenKind` enum into a rich\n@@ -421,7 +419,7 @@ impl<'a> StringReader<'a> {\n         let content_start = start + BytePos(prefix_len);\n         let content_end = suffix_start - BytePos(postfix_len);\n         let id = self.symbol_from_to(content_start, content_end);\n-        self.validate_literal_escape(mode, content_start, content_end);\n+        self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);\n         (lit_kind, id)\n     }\n \n@@ -525,17 +523,29 @@ impl<'a> StringReader<'a> {\n         .raise();\n     }\n \n-    fn validate_literal_escape(&self, mode: Mode, content_start: BytePos, content_end: BytePos) {\n+    fn validate_literal_escape(\n+        &self,\n+        mode: Mode,\n+        content_start: BytePos,\n+        content_end: BytePos,\n+        prefix_len: u32,\n+        postfix_len: u32,\n+    ) {\n         let lit_content = self.str_from_to(content_start, content_end);\n         unescape::unescape_literal(lit_content, mode, &mut |range, result| {\n             // Here we only check for errors. The actual unescaping is done later.\n             if let Err(err) = result {\n-                let span_with_quotes =\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1));\n+                let span_with_quotes = self\n+                    .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));\n+                let (start, end) = (range.start as u32, range.end as u32);\n+                let lo = content_start + BytePos(start);\n+                let hi = lo + BytePos(end - start);\n+                let span = self.mk_sp(lo, hi);\n                 emit_unescape_error(\n                     &self.sess.span_diagnostic,\n                     lit_content,\n                     span_with_quotes,\n+                    span,\n                     mode,\n                     range,\n                     err,"}, {"sha": "a580f0c55d0e33d0f5755b4a092eaed4fa7c10ef", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 116, "deletions": 70, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -13,6 +13,8 @@ pub(crate) fn emit_unescape_error(\n     lit: &str,\n     // full span of the literal, including quotes\n     span_with_quotes: Span,\n+    // interior span of the literal, without quotes\n+    span: Span,\n     mode: Mode,\n     // range of the error inside `lit`\n     range: Range<usize>,\n@@ -26,13 +28,6 @@ pub(crate) fn emit_unescape_error(\n         range,\n         error\n     );\n-    let span = {\n-        let Range { start, end } = range;\n-        let (start, end) = (start as u32, end as u32);\n-        let lo = span_with_quotes.lo() + BytePos(start + 1);\n-        let hi = lo + BytePos(end - start);\n-        span_with_quotes.with_lo(lo).with_hi(hi)\n-    };\n     let last_char = || {\n         let c = lit[range.clone()].chars().rev().next().unwrap();\n         let span = span.with_lo(span.hi() - BytePos(c.len_utf8() as u32));\n@@ -42,20 +37,22 @@ pub(crate) fn emit_unescape_error(\n         EscapeError::LoneSurrogateUnicodeEscape => {\n             handler\n                 .struct_span_err(span, \"invalid unicode character escape\")\n+                .span_label(span, \"invalid escape\")\n                 .help(\"unicode escape must not be a surrogate\")\n                 .emit();\n         }\n         EscapeError::OutOfRangeUnicodeEscape => {\n             handler\n                 .struct_span_err(span, \"invalid unicode character escape\")\n+                .span_label(span, \"invalid escape\")\n                 .help(\"unicode escape must be at most 10FFFF\")\n                 .emit();\n         }\n         EscapeError::MoreThanOneChar => {\n-            let msg = if mode.is_bytes() {\n-                \"if you meant to write a byte string literal, use double quotes\"\n+            let (prefix, msg) = if mode.is_bytes() {\n+                (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n             } else {\n-                \"if you meant to write a `str` literal, use double quotes\"\n+                (\"\", \"if you meant to write a `str` literal, use double quotes\")\n             };\n \n             handler\n@@ -66,31 +63,44 @@ pub(crate) fn emit_unescape_error(\n                 .span_suggestion(\n                     span_with_quotes,\n                     msg,\n-                    format!(\"\\\"{}\\\"\", lit),\n+                    format!(\"{}\\\"{}\\\"\", prefix, lit),\n                     Applicability::MachineApplicable,\n                 )\n                 .emit();\n         }\n         EscapeError::EscapeOnlyChar => {\n-            let (c, _span) = last_char();\n+            let (c, char_span) = last_char();\n \n-            let mut msg = if mode.is_bytes() {\n-                \"byte constant must be escaped: \"\n+            let msg = if mode.is_bytes() {\n+                \"byte constant must be escaped\"\n             } else {\n-                \"character constant must be escaped: \"\n-            }\n-            .to_string();\n-            push_escaped_char(&mut msg, c);\n-\n-            handler.span_err(span, msg.as_str())\n+                \"character constant must be escaped\"\n+            };\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, escaped_char(c)))\n+                .span_suggestion(\n+                    char_span,\n+                    \"escape the character\",\n+                    c.escape_default().to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit()\n         }\n         EscapeError::BareCarriageReturn => {\n             let msg = if mode.in_double_quotes() {\n-                \"bare CR not allowed in string, use \\\\r instead\"\n+                \"bare CR not allowed in string, use `\\\\r` instead\"\n             } else {\n-                \"character constant must be escaped: \\\\r\"\n+                \"character constant must be escaped: `\\\\r`\"\n             };\n-            handler.span_err(span, msg);\n+            handler\n+                .struct_span_err(span, msg)\n+                .span_suggestion(\n+                    span,\n+                    \"escape the character\",\n+                    \"\\\\r\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n         }\n         EscapeError::BareCarriageReturnInRawString => {\n             assert!(mode.in_double_quotes());\n@@ -102,21 +112,22 @@ pub(crate) fn emit_unescape_error(\n \n             let label =\n                 if mode.is_bytes() { \"unknown byte escape\" } else { \"unknown character escape\" };\n-            let mut msg = label.to_string();\n-            msg.push_str(\": \");\n-            push_escaped_char(&mut msg, c);\n-\n-            let mut diag = handler.struct_span_err(span, msg.as_str());\n+            let ec = escaped_char(c);\n+            let mut diag = handler.struct_span_err(span, &format!(\"{}: `{}`\", label, ec));\n             diag.span_label(span, label);\n             if c == '{' || c == '}' && !mode.is_bytes() {\n                 diag.help(\n-                    \"if used in a formatting string, \\\n-                           curly braces are escaped with `{{` and `}}`\",\n+                    \"if used in a formatting string, curly braces are escaped with `{{` and `}}`\",\n                 );\n             } else if c == '\\r' {\n                 diag.help(\n-                    \"this is an isolated carriage return; \\\n-                           consider checking your editor and version control settings\",\n+                    \"this is an isolated carriage return; consider checking your editor and \\\n+                     version control settings\",\n+                );\n+            } else {\n+                diag.help(\n+                    \"for more information, visit \\\n+                     <https://static.rust-lang.org/doc/master/reference.html#literals>\",\n                 );\n             }\n             diag.emit();\n@@ -127,45 +138,70 @@ pub(crate) fn emit_unescape_error(\n         EscapeError::InvalidCharInHexEscape | EscapeError::InvalidCharInUnicodeEscape => {\n             let (c, span) = last_char();\n \n-            let mut msg = if error == EscapeError::InvalidCharInHexEscape {\n-                \"invalid character in numeric character escape: \"\n+            let msg = if error == EscapeError::InvalidCharInHexEscape {\n+                \"invalid character in numeric character escape\"\n             } else {\n-                \"invalid character in unicode escape: \"\n-            }\n-            .to_string();\n-            push_escaped_char(&mut msg, c);\n+                \"invalid character in unicode escape\"\n+            };\n+            let c = escaped_char(c);\n \n-            handler.span_err(span, msg.as_str())\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n+                .span_label(span, msg)\n+                .emit();\n         }\n         EscapeError::NonAsciiCharInByte => {\n             assert!(mode.is_bytes());\n-            let (_c, span) = last_char();\n-            handler.span_err(\n-                span,\n-                \"byte constant must be ASCII. \\\n-                                    Use a \\\\xHH escape for a non-ASCII byte\",\n-            )\n+            let (c, span) = last_char();\n+            handler\n+                .struct_span_err(span, \"non-ASCII character in byte constant\")\n+                .span_label(span, \"byte constant must be ASCII\")\n+                .span_suggestion(\n+                    span,\n+                    \"use a \\\\xHH escape for a non-ASCII byte\",\n+                    format!(\"\\\\x{:X}\", c as u32),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n         }\n         EscapeError::NonAsciiCharInByteString => {\n             assert!(mode.is_bytes());\n             let (_c, span) = last_char();\n-            handler.span_err(span, \"raw byte string must be ASCII\")\n+            handler\n+                .struct_span_err(span, \"raw byte string must be ASCII\")\n+                .span_label(span, \"must be ASCII\")\n+                .emit();\n+        }\n+        EscapeError::OutOfRangeHexEscape => {\n+            handler\n+                .struct_span_err(span, \"out of range hex escape\")\n+                .span_label(span, \"must be a character in the range [\\\\x00-\\\\x7f]\")\n+                .emit();\n         }\n-        EscapeError::OutOfRangeHexEscape => handler.span_err(\n-            span,\n-            \"this form of character escape may only be used \\\n-                                    with characters in the range [\\\\x00-\\\\x7f]\",\n-        ),\n         EscapeError::LeadingUnderscoreUnicodeEscape => {\n-            let (_c, span) = last_char();\n-            handler.span_err(span, \"invalid start of unicode escape\")\n+            let (c, span) = last_char();\n+            let msg = \"invalid start of unicode escape\";\n+            handler\n+                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n+                .span_label(span, msg)\n+                .emit();\n         }\n         EscapeError::OverlongUnicodeEscape => {\n-            handler.span_err(span, \"overlong unicode escape (must have at most 6 hex digits)\")\n-        }\n-        EscapeError::UnclosedUnicodeEscape => {\n-            handler.span_err(span, \"unterminated unicode escape (needed a `}`)\")\n+            handler\n+                .struct_span_err(span, \"overlong unicode escape\")\n+                .span_label(span, \"must have at most 6 hex digits\")\n+                .emit();\n         }\n+        EscapeError::UnclosedUnicodeEscape => handler\n+            .struct_span_err(span, \"unterminated unicode escape\")\n+            .span_label(span, \"missing a closing `}`\")\n+            .span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                \"terminate the unicode escape\",\n+                \"}\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit(),\n         EscapeError::NoBraceInUnicodeEscape => {\n             let msg = \"incorrect unicode escape sequence\";\n             let mut diag = handler.struct_span_err(span, msg);\n@@ -195,28 +231,38 @@ pub(crate) fn emit_unescape_error(\n \n             diag.emit();\n         }\n-        EscapeError::UnicodeEscapeInByte => handler.span_err(\n-            span,\n-            \"unicode escape sequences cannot be used \\\n-                                    as a byte or in a byte string\",\n-        ),\n+        EscapeError::UnicodeEscapeInByte => {\n+            let msg = \"unicode escape in byte string\";\n+            handler\n+                .struct_span_err(span, msg)\n+                .span_label(span, msg)\n+                .help(\"unicode escape sequences cannot be used as a byte or in a byte string\")\n+                .emit();\n+        }\n         EscapeError::EmptyUnicodeEscape => {\n-            handler.span_err(span, \"empty unicode escape (must have at least 1 hex digit)\")\n+            handler\n+                .struct_span_err(span, \"empty unicode escape\")\n+                .span_label(span, \"this escape must have at least 1 hex digit\")\n+                .emit();\n+        }\n+        EscapeError::ZeroChars => {\n+            let msg = \"empty character literal\";\n+            handler.struct_span_err(span, msg).span_label(span, msg).emit()\n+        }\n+        EscapeError::LoneSlash => {\n+            let msg = \"invalid trailing slash in literal\";\n+            handler.struct_span_err(span, msg).span_label(span, msg).emit();\n         }\n-        EscapeError::ZeroChars => handler.span_err(span, \"empty character literal\"),\n-        EscapeError::LoneSlash => handler.span_err(span, \"invalid trailing slash in literal\"),\n     }\n }\n \n /// Pushes a character to a message string for error reporting\n-pub(crate) fn push_escaped_char(msg: &mut String, c: char) {\n+pub(crate) fn escaped_char(c: char) -> String {\n     match c {\n         '\\u{20}'..='\\u{7e}' => {\n             // Don't escape \\, ' or \" for user-facing messages\n-            msg.push(c);\n-        }\n-        _ => {\n-            msg.extend(c.escape_default());\n+            c.to_string()\n         }\n+        _ => c.escape_default().to_string(),\n     }\n }"}, {"sha": "12942eabdf7b533cfec963112204273d9097f665", "filename": "src/test/ui/attributes/key-value-non-ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,4 +1,4 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR byte constant must be ASCII\n+#[rustc_dummy = b\"\ufb03.rs\"] //~ ERROR non-ASCII character in byte constant\n fn main() {}"}, {"sha": "1d4b0d5b2b130e7dd5123e042de82cf692ccdb16", "filename": "src/test/ui/attributes/key-value-non-ascii.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,11 @@\n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/key-value-non-ascii.rs:3:19\n    |\n LL | #[rustc_dummy = b\"\ufb03.rs\"]\n    |                   ^\n+   |                   |\n+   |                   byte constant must be ASCII\n+   |                   help: use a \\xHH escape for a non-ASCII byte: `\\xFB03`\n \n error: aborting due to previous error\n "}, {"sha": "725c8ad23515e615e6bf717487cf346806a920c8", "filename": "src/test/ui/parser/ascii-only-character-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n-    let x = \"\\x80\"; //~ ERROR may only be used\n-    let y = \"\\xff\"; //~ ERROR may only be used\n-    let z = \"\\xe2\"; //~ ERROR may only be used\n+    let x = \"\\x80\"; //~ ERROR out of range hex escape\n+    let y = \"\\xff\"; //~ ERROR out of range hex escape\n+    let z = \"\\xe2\"; //~ ERROR out of range hex escape\n     let a = b\"\\x00e2\";  // ok because byte literal\n }"}, {"sha": "b599b35f4b324f0e6b77b85aa17c2e9ca8ca61b8", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,20 +1,20 @@\n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:2:14\n    |\n LL |     let x = \"\\x80\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:3:14\n    |\n LL |     let y = \"\\xff\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n-error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+error: out of range hex escape\n   --> $DIR/ascii-only-character-escape.rs:4:14\n    |\n LL |     let z = \"\\xe2\";\n-   |              ^^^^\n+   |              ^^^^ must be a character in the range [\\x00-\\x7f]\n \n error: aborting due to 3 previous errors\n "}, {"sha": "748b4a22253f52301df92a22cf2b848ac6e4726f", "filename": "src/test/ui/parser/bad-char-literals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -4,17 +4,17 @@\n fn main() {\n     // these literals are just silly.\n     ''';\n-    //~^ ERROR: character constant must be escaped: '\n+    //~^ ERROR: character constant must be escaped: `'`\n \n     // note that this is a literal \"\\n\" byte\n     '\n ';\n-    //~^^ ERROR: character constant must be escaped: \\n\n+    //~^^ ERROR: character constant must be escaped: `\\n`\n \n     // note that this is a literal \"\\r\" byte\n-    '\r'; //~ ERROR: character constant must be escaped: \\r\n+    '\r'; //~ ERROR: character constant must be escaped: `\\r`\n \n     // note that this is a literal tab character here\n     '\t';\n-    //~^ ERROR: character constant must be escaped: \\t\n+    //~^ ERROR: character constant must be escaped: `\\t`\n }"}, {"sha": "a22ddbac1b931803c021b6af1783a552e83ae245", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,28 +1,28 @@\n-error: character constant must be escaped: '\n+error: character constant must be escaped: `'`\n   --> $DIR/bad-char-literals.rs:6:6\n    |\n LL |     ''';\n-   |      ^\n+   |      ^ help: escape the character: `\\'`\n \n-error: character constant must be escaped: \\n\n+error: character constant must be escaped: `\\n`\n   --> $DIR/bad-char-literals.rs:10:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n-   | |_\n+   | |_ help: escape the character: `\\n`\n \n-error: character constant must be escaped: \\r\n+error: character constant must be escaped: `\\r`\n   --> $DIR/bad-char-literals.rs:15:6\n    |\n LL |     '\r';\n-   |      ^\n+   |      ^ help: escape the character: `\\r`\n \n-error: character constant must be escaped: \\t\n+error: character constant must be escaped: `\\t`\n   --> $DIR/bad-char-literals.rs:18:6\n    |\n LL |     '    ';\n-   |      ^^^^\n+   |      ^^^^ help: escape the character: `\\t`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "05a510b24a7aba188168690f68c98723bd54071e", "filename": "src/test/ui/parser/byte-literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -4,9 +4,9 @@ static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b'\\f';  //~ ERROR unknown byte escape\n-    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: Z\n+    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: `Z`\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n-    b'\u00e9';  //~ ERROR byte constant must be ASCII\n+    b'\u00e9';  //~ ERROR non-ASCII character in byte constant\n     b'a  //~ ERROR unterminated byte constant [E0763]\n }"}, {"sha": "55be113e16b99eb4d9fac3a63478a2fa98eedf8c", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,38 +1,45 @@\n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-literals.rs:3:21\n    |\n LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-literals.rs:6:8\n    |\n LL |     b'\\f';\n    |        ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: invalid character in numeric character escape: Z\n+error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-literals.rs:7:10\n    |\n LL |     b'\\x0Z';\n-   |          ^\n+   |          ^ invalid character in numeric character escape\n \n-error: byte constant must be escaped: \\t\n+error: byte constant must be escaped: `\\t`\n   --> $DIR/byte-literals.rs:8:7\n    |\n LL |     b'    ';\n-   |       ^^^^\n+   |       ^^^^ help: escape the character: `\\t`\n \n-error: byte constant must be escaped: '\n+error: byte constant must be escaped: `'`\n   --> $DIR/byte-literals.rs:9:7\n    |\n LL |     b''';\n-   |       ^\n+   |       ^ help: escape the character: `\\'`\n \n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n    |       ^\n+   |       |\n+   |       byte constant must be ASCII\n+   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n \n error[E0763]: unterminated byte constant\n   --> $DIR/byte-literals.rs:11:6"}, {"sha": "b1f11024a7bb6cdcd5bad76e2311a085b3a82b18", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -2,7 +2,8 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n-    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: Z\n-    b\"\u00e9\";  //~ ERROR byte constant must be ASCII\n+    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: `Z`\n+    b\"\u00e9\";  //~ ERROR non-ASCII character in byte constant\n+    br##\"\u00e9\"##;  //~ ERROR raw byte string must be ASCII\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "3a5a8b331d339dd1db09b29745c6dbfeb6875089", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,35 +1,48 @@\n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-string-literals.rs:1:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown byte escape: f\n+error: unknown byte escape: `f`\n   --> $DIR/byte-string-literals.rs:4:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: invalid character in numeric character escape: Z\n+error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-string-literals.rs:5:10\n    |\n LL |     b\"\\x0Z\";\n-   |          ^\n+   |          ^ invalid character in numeric character escape\n \n-error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n+error: non-ASCII character in byte constant\n   --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n+   |       |\n+   |       byte constant must be ASCII\n+   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n+\n+error: raw byte string must be ASCII\n+  --> $DIR/byte-string-literals.rs:7:10\n+   |\n+LL |     br##\"\u00e9\"##;\n+   |          ^ must be ASCII\n \n error[E0766]: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:7:6\n+  --> $DIR/byte-string-literals.rs:8:6\n    |\n LL |       b\"a\n    |  ______^\n LL | | }\n    | |__^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0766`."}, {"sha": "c1355f0d6fe0c4a6955483a5b1737e3c0988a70e", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n     let _ = b\"\\u{a66e}\";\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n+    //~^ ERROR unicode escape in byte string\n \n     let _ = b'\\u{a66e}';\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n+    //~^ ERROR unicode escape in byte string\n \n     let _ = b'\\u';\n     //~^ ERROR incorrect unicode escape sequence\n@@ -12,21 +12,21 @@ fn main() {\n     //~^ ERROR numeric character escape is too short\n \n     let _ = b'\\xxy';\n-    //~^ ERROR invalid character in numeric character escape: x\n+    //~^ ERROR invalid character in numeric character escape: `x`\n \n     let _ = '\\x5';\n     //~^ ERROR numeric character escape is too short\n \n     let _ = '\\xxy';\n-    //~^ ERROR invalid character in numeric character escape: x\n+    //~^ ERROR invalid character in numeric character escape: `x`\n \n     let _ = b\"\\u{a4a4} \\xf \\u\";\n-    //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n-    //~^^ ERROR invalid character in numeric character escape:\n+    //~^ ERROR unicode escape in byte string\n+    //~^^ ERROR invalid character in numeric character escape: ` `\n     //~^^^ ERROR incorrect unicode escape sequence\n \n     let _ = \"\\xf \\u\";\n-    //~^ ERROR invalid character in numeric character escape:\n+    //~^ ERROR invalid character in numeric character escape: ` `\n     //~^^ ERROR incorrect unicode escape sequence\n \n     let _ = \"\\u8f\";"}, {"sha": "88d97c795fc2a30f8bde096b5651858c88ea5c72", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,14 +1,18 @@\n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:2:15\n    |\n LL |     let _ = b\"\\u{a66e}\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:5:15\n    |\n LL |     let _ = b'\\u{a66e}';\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:8:15\n@@ -24,35 +28,37 @@ error: numeric character escape is too short\n LL |     let _ = b'\\x5';\n    |               ^^^\n \n-error: invalid character in numeric character escape: x\n+error: invalid character in numeric character escape: `x`\n   --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n LL |     let _ = b'\\xxy';\n-   |                 ^\n+   |                 ^ invalid character in numeric character escape\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:17:14\n    |\n LL |     let _ = '\\x5';\n    |              ^^^\n \n-error: invalid character in numeric character escape: x\n+error: invalid character in numeric character escape: `x`\n   --> $DIR/issue-23620-invalid-escapes.rs:20:16\n    |\n LL |     let _ = '\\xxy';\n-   |                ^\n+   |                ^ invalid character in numeric character escape\n \n-error: unicode escape sequences cannot be used as a byte or in a byte string\n+error: unicode escape in byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:23:15\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ unicode escape in byte string\n+   |\n+   = help: unicode escape sequences cannot be used as a byte or in a byte string\n \n-error: invalid character in numeric character escape:  \n+error: invalid character in numeric character escape: ` `\n   --> $DIR/issue-23620-invalid-escapes.rs:23:27\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n-   |                           ^\n+   |                           ^ invalid character in numeric character escape\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:23:28\n@@ -62,11 +68,11 @@ LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n-error: invalid character in numeric character escape:  \n+error: invalid character in numeric character escape: ` `\n   --> $DIR/issue-23620-invalid-escapes.rs:28:17\n    |\n LL |     let _ = \"\\xf \\u\";\n-   |                 ^\n+   |                 ^ invalid character in numeric character escape\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:18"}, {"sha": "baf998035178b55e43a493d37f27d2e9200def00", "filename": "src/test/ui/parser/issue-43692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,8 @@\n-error: invalid start of unicode escape\n+error: invalid start of unicode escape: `_`\n   --> $DIR/issue-43692.rs:2:9\n    |\n LL |     '\\u{_10FFFF}';\n-   |         ^\n+   |         ^ invalid start of unicode escape\n \n error: aborting due to previous error\n "}, {"sha": "6f385e8dc1777f22fe86459a7dad30d57560f4db", "filename": "src/test/ui/parser/issue-62913.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -10,7 +10,7 @@ error: invalid trailing slash in literal\n   --> $DIR/issue-62913.rs:1:5\n    |\n LL | \"\\u\\\"\n-   |     ^\n+   |     ^ invalid trailing slash in literal\n \n error: expected item, found `\"\\u\\\"`\n   --> $DIR/issue-62913.rs:1:1"}, {"sha": "ac042580962807b3ad8421cec438cf016b5db29b", "filename": "src/test/ui/parser/issue-64732.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-64732.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,13 +1,13 @@\n error: character literal may only contain one codepoint\n-  --> $DIR/issue-64732.rs:3:17\n+  --> $DIR/issue-64732.rs:3:16\n    |\n LL |     let _foo = b'hello\\0';\n-   |                 ^^^^^^^^^\n+   |                ^^^^^^^^^^\n    |\n help: if you meant to write a byte string literal, use double quotes\n    |\n LL |     let _foo = b\"hello\\0\";\n-   |                 ^^^^^^^^^\n+   |                ^^^^^^^^^^\n \n error: character literal may only contain one codepoint\n   --> $DIR/issue-64732.rs:6:16"}, {"sha": "ed129a1d13388189766ebed2270a0f565121972b", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -10,17 +10,21 @@ error: numeric character escape is too short\n LL |     \"\\x1\"\n    |      ^^^\n \n-error: unknown character escape: \\u{25cf}\n+error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:10:7\n    |\n LL |     '\\\u25cf'\n    |       ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n-error: unknown character escape: \\u{25cf}\n+error: unknown character escape: `\\u{25cf}`\n   --> $DIR/lex-bad-char-literals-1.rs:14:7\n    |\n LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n+   |\n+   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c675df2f3ccd095fc2630b051b3e5d12faf849aa", "filename": "src/test/ui/parser/lex-bad-char-literals-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let _: char = '';\n     //~^ ERROR: empty character literal\n     let _: char = '\\u{}';\n-    //~^ ERROR: empty unicode escape (must have at least 1 hex digit)\n+    //~^ ERROR: empty unicode escape\n \n     // Next two are OK, but may befool error recovery\n     let _ = '/';"}, {"sha": "255b9c689999930a86b46ae85320d425b15fa413", "filename": "src/test/ui/parser/lex-bad-char-literals-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -2,13 +2,13 @@ error: empty character literal\n   --> $DIR/lex-bad-char-literals-7.rs:2:20\n    |\n LL |     let _: char = '';\n-   |                    ^\n+   |                    ^ empty character literal\n \n-error: empty unicode escape (must have at least 1 hex digit)\n+error: empty unicode escape\n   --> $DIR/lex-bad-char-literals-7.rs:4:20\n    |\n LL |     let _: char = '\\u{}';\n-   |                    ^^^^\n+   |                    ^^^^ this escape must have at least 1 hex digit\n \n error[E0762]: unterminated character literal\n   --> $DIR/lex-bad-char-literals-7.rs:11:13"}, {"sha": "b7752e1f0c45fe2800dbfe86022dd010ce8db515", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let _s = r\"bar\rfoo\"; //~ ERROR: bare CR not allowed in raw string\n \n     // the following string literal has a bare CR in it\n-    let _s = \"foo\\\rbar\"; //~ ERROR: unknown character escape: \\r\n+    let _s = \"foo\\\rbar\"; //~ ERROR: unknown character escape: `\\r`\n }"}, {"sha": "1a21fed63bdec3e6af6e841565762b40b68d6e15", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -22,19 +22,19 @@ error: bare CR not allowed in block doc-comment\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n-error: bare CR not allowed in string, use \\r instead\n+error: bare CR not allowed in string, use `\\r` instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:19:18\n    |\n LL |     let _s = \"foo\rbar\";\n-   |                  ^\n+   |                  ^ help: escape the character: `\\r`\n \n error: bare CR not allowed in raw string\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:22:19\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |                   ^\n \n-error: unknown character escape: \\r\n+error: unknown character escape: `\\r`\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:25:19\n    |\n LL |     let _s = \"foo\\\rbar\";"}, {"sha": "e874f62497ea8a245cabe405775057870c1cb6bf", "filename": "src/test/ui/parser/macro/literals-are-validated-before-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fliterals-are-validated-before-expansion.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -2,15 +2,15 @@ error: invalid unicode character escape\n   --> $DIR/literals-are-validated-before-expansion.rs:6:20\n    |\n LL |     black_hole! { '\\u{FFFFFF}' }\n-   |                    ^^^^^^^^^^\n+   |                    ^^^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must be at most 10FFFF\n \n error: invalid unicode character escape\n   --> $DIR/literals-are-validated-before-expansion.rs:8:39\n    |\n LL |     black_hole! { \"this is surrogate: \\u{DAAA}\" }\n-   |                                       ^^^^^^^^\n+   |                                       ^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must not be a surrogate\n "}, {"sha": "d6a54660ea6e8b539f7b57629977d70b6bf87214", "filename": "src/test/ui/parser/new-unicode-escapes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,3 +1,3 @@\n pub fn main() {\n-    let s = \"\\u{2603\"; //~ ERROR unterminated unicode escape (needed a `}`)\n+    let s = \"\\u{2603\"; //~ ERROR unterminated unicode escape\n }"}, {"sha": "1ffdc0401e59c9d6248d08933da62e6fb9a3448d", "filename": "src/test/ui/parser/new-unicode-escapes-1.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,13 @@\n-error: unterminated unicode escape (needed a `}`)\n+error: unterminated unicode escape\n   --> $DIR/new-unicode-escapes-1.rs:2:14\n    |\n LL |     let s = \"\\u{2603\";\n-   |              ^^^^^^^\n+   |              ^^^^^^^ missing a closing `}`\n+   |\n+help: terminate the unicode escape\n+   |\n+LL |     let s = \"\\u{2603}\";\n+   |                     ^\n \n error: aborting due to previous error\n "}, {"sha": "cbb614c19c0048e8d0d083e55a4a0e59691bbc9e", "filename": "src/test/ui/parser/new-unicode-escapes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,3 +1,3 @@\n pub fn main() {\n-    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape (must have at most 6 hex digits)\n+    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape\n }"}, {"sha": "2f3f8c0f9dae500450d370778f70f6ac5f338cb4", "filename": "src/test/ui/parser/new-unicode-escapes-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,8 @@\n-error: overlong unicode escape (must have at most 6 hex digits)\n+error: overlong unicode escape\n   --> $DIR/new-unicode-escapes-2.rs:2:14\n    |\n LL |     let s = \"\\u{260311111111}\";\n-   |              ^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^ must have at most 6 hex digits\n \n error: aborting due to previous error\n "}, {"sha": "f5a0f8fc785c59e23e04a078bd506358a6000f8f", "filename": "src/test/ui/parser/new-unicode-escapes-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -2,15 +2,15 @@ error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:2:15\n    |\n LL |     let s1 = \"\\u{d805}\";\n-   |               ^^^^^^^^\n+   |               ^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must not be a surrogate\n \n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:3:15\n    |\n LL |     let s2 = \"\\u{ffffff}\";\n-   |               ^^^^^^^^^^\n+   |               ^^^^^^^^^^ invalid escape\n    |\n    = help: unicode escape must be at most 10FFFF\n "}, {"sha": "79882713e59a26457978cf0272aa9b1775de836a", "filename": "src/test/ui/parser/new-unicode-escapes-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,4 +1,4 @@\n pub fn main() {\n     let s = \"\\u{lol}\";\n-     //~^ ERROR invalid character in unicode escape: l\n+     //~^ ERROR invalid character in unicode escape: `l`\n }"}, {"sha": "514591af17e6e44d9dd6bcc21949b23934057bf9", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,8 @@\n-error: invalid character in unicode escape: l\n+error: invalid character in unicode escape: `l`\n   --> $DIR/new-unicode-escapes-4.rs:2:17\n    |\n LL |     let s = \"\\u{lol}\";\n-   |                 ^\n+   |                 ^ invalid character in unicode escape\n \n error: aborting due to previous error\n "}, {"sha": "cfc877104bd9f37b3857cec8a7cb5fbe0f2c1fd3", "filename": "src/test/ui/parser/raw/raw-byte-string-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-literals.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -8,7 +8,7 @@ error: raw byte string must be ASCII\n   --> $DIR/raw-byte-string-literals.rs:5:8\n    |\n LL |     br\"\u00e9\";\n-   |        ^\n+   |        ^ must be ASCII\n \n error: found invalid character; only `#` is allowed in raw string delimitation: ~\n   --> $DIR/raw-byte-string-literals.rs:6:5"}, {"sha": "5d3c31944064a974e585c1be0d849adcf5fdd66a", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -8,7 +8,7 @@ fn main() {\n  a test\";\n     // \\r only\n     let bad = \"This is \\\r a test\";\n-    //~^ ERROR unknown character escape: \\r\n-    //~^^ HELP this is an isolated carriage return\n+    //~^ ERROR unknown character escape: `\\r`\n+    //~| HELP this is an isolated carriage return\n \n }"}, {"sha": "8a44e02707ce5a8ec7f0e994a068fb7981731ec0", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,4 +1,4 @@\n-error: unknown character escape: \\r\n+error: unknown character escape: `\\r`\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n LL |     let bad = \"This is \\\r a test\";"}, {"sha": "8e5258acd49da9109df24506208dca04c543bf21", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.rs?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n     let ok = \"{{everything fine}}\";\n     let bad = \"\\{it is wrong\\}\";\n-    //~^  ERROR unknown character escape: {\n-    //~^^  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-    //~^^^ ERROR unknown character escape: }\n-    //~^^^^  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n+    //~^  ERROR unknown character escape: `{`\n+    //~|  HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n+    //~| ERROR unknown character escape: `}`\n+    //~| HELP if used in a formatting string, curly braces are escaped with `{{` and `}}`\n }"}, {"sha": "ff1a2fb0f3c67be6f5f525e9f885613e846a6bda", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=3b5d018ebb6ee8aa6181ebf1cf9ba0cb407f622f", "patch": "@@ -1,12 +1,12 @@\n-error: unknown character escape: {\n+error: unknown character escape: `{`\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n LL |     let bad = \"\\{it is wrong\\}\";\n    |                 ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n-error: unknown character escape: }\n+error: unknown character escape: `}`\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n LL |     let bad = \"\\{it is wrong\\}\";"}]}