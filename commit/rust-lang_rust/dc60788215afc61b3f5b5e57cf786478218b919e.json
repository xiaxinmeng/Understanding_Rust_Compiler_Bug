{"sha": "dc60788215afc61b3f5b5e57cf786478218b919e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjA3ODgyMTVhZmM2MWIzZjViNWU1N2NmNzg2NDc4MjE4YjkxOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-01T22:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-01T22:12:43Z"}, "message": "auto merge of #5660 : brson/rust/doc, r=catamorphism", "tree": {"sha": "1521eea87df7964b717acc9c37993322e8ca5426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1521eea87df7964b717acc9c37993322e8ca5426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc60788215afc61b3f5b5e57cf786478218b919e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc60788215afc61b3f5b5e57cf786478218b919e", "html_url": "https://github.com/rust-lang/rust/commit/dc60788215afc61b3f5b5e57cf786478218b919e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc60788215afc61b3f5b5e57cf786478218b919e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9fd72d05d5baa1005eedb6511e2577e363549a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9fd72d05d5baa1005eedb6511e2577e363549a", "html_url": "https://github.com/rust-lang/rust/commit/8e9fd72d05d5baa1005eedb6511e2577e363549a"}, {"sha": "243e601e51fa899dd57c98f0624659364ea77f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/243e601e51fa899dd57c98f0624659364ea77f22", "html_url": "https://github.com/rust-lang/rust/commit/243e601e51fa899dd57c98f0624659364ea77f22"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "3ae320adffc07c6b4717ebe1f47a7d7ece6305e4", "filename": "doc/tutorial.md", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dc60788215afc61b3f5b5e57cf786478218b919e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc60788215afc61b3f5b5e57cf786478218b919e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=dc60788215afc61b3f5b5e57cf786478218b919e", "patch": "@@ -2554,26 +2554,65 @@ a hash representing the crate metadata.\n \n ## The core library\n \n-The Rust [core] library is the language runtime and contains\n-required memory management and task scheduling code as well as a\n-number of modules necessary for effective usage of the primitive\n-types. Methods on [vectors] and [strings], implementations of most\n-comparison and math operators, and pervasive types like [`Option`]\n-and [`Result`] live in core.\n-\n-All Rust programs link to the core library and import its contents,\n-as if the following were written at the top of the crate.\n-\n-~~~ {.xfail-test}\n-extern mod core;\n-use core::*;\n-~~~\n-\n-[core]: core/index.html\n-[vectors]: core/vec.html\n+The Rust core library provides runtime features required by the language,\n+including the task scheduler and memory allocators, as well as library\n+support for Rust built-in types, platform abstractions, and other commonly\n+used features.\n+\n+[`core`] includes modules corresponding to each of the integer types, each of\n+the floating point types, the [`bool`] type, [tuples], [characters], [strings],\n+[vectors], [managed boxes], [owned boxes],\n+and unsafe and borrowed [pointers].  Additionally, `core` provides\n+some pervasive types ([`option`] and [`result`]),\n+[task] creation and [communication] primitives,\n+platform abstractions ([`os`] and [`path`]), basic\n+I/O abstractions ([`io`]), [containers] like [`hashmap`],\n+common traits ([`kinds`], [`ops`], [`cmp`], [`num`],\n+[`to_str`], [`clone`]), and complete bindings to the C standard library ([`libc`]).\n+\n+### Core injection and the Rust prelude\n+\n+`core` is imported at the topmost level of every crate by default, as\n+if the first line of each crate was\n+\n+    extern mod core;\n+\n+This means that the contents of core can be accessed from from any context\n+with the `core::` path prefix, as in `use core::vec`, `use core::task::spawn`,\n+etc.\n+\n+Additionally, `core` contains a `prelude` module that reexports many of the\n+most common core modules, types and traits. The contents of the prelude are\n+imported into every *module* by default.  Implicitly, all modules behave as if\n+they contained the following prologue:\n+\n+    use core::prelude::*;\n+\n+[`core`]: core/index.html\n+[`bool`]: core/bool.html\n+[tuples]: core/tuple.html\n+[characters]: core/char.html\n [strings]: core/str.html\n-[`Option`]: core/option.html\n-[`Result`]: core/result.html\n+[vectors]: core/vec.html\n+[managed boxes]: core/managed.html\n+[owned boxes]: core/owned.html\n+[pointers]: core/ptr.html\n+[`option`]: core/option.html\n+[`result`]: core/result.html\n+[task]: core/task.html\n+[communication]: core/comm.html\n+[`os`]: core/os.html\n+[`path`]: core/path.html\n+[`io`]: core/io.html\n+[containers]: core/container.html\n+[`hashmap`]: core/hashmap.html\n+[`kinds`]: core/kinds.html\n+[`ops`]: core/ops.html\n+[`cmp`]: core/cmp.html\n+[`num`]: core/num.html\n+[`to_str`]: core/to_str.html\n+[`clone`]: core/clone.html\n+[`libc`]: core/libc.html\n \n # What next?\n \n@@ -2585,10 +2624,7 @@ tutorials on individual topics.\n * [Macros][macros]\n * [The foreign function interface][ffi]\n \n-There is further documentation on the [wiki], including articles about\n-[unit testing] in Rust, [documenting][rustdoc] and [packaging][cargo]\n-Rust code, and a discussion of the [attributes] used to apply metadata\n-to code.\n+There is further documentation on the [wiki].\n \n [borrow]: tutorial-borrowed-ptr.html\n [tasks]: tutorial-tasks.html"}, {"sha": "292dd1d92cfa3b65af3f5d997988fcdae6587cf4", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc60788215afc61b3f5b5e57cf786478218b919e/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dc60788215afc61b3f5b5e57cf786478218b919e/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=dc60788215afc61b3f5b5e57cf786478218b919e", "patch": "@@ -39,7 +39,7 @@ etc.\n \n Additionally, `core` contains a `prelude` module that reexports many of the\n most common core modules, types and traits. The contents of the prelude are\n-imported inte every *module* by default.  Implicitly, all modules behave as if\n+imported into every *module* by default.  Implicitly, all modules behave as if\n they contained the following prologue:\n \n     use core::prelude::*;"}, {"sha": "fdb82a7303bea0bcb365dfd811a9db4ecf41f434", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc60788215afc61b3f5b5e57cf786478218b919e/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc60788215afc61b3f5b5e57cf786478218b919e/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=dc60788215afc61b3f5b5e57cf786478218b919e", "patch": "@@ -9,7 +9,19 @@\n // except according to those terms.\n \n /*!\n-* Bindings for libc.\n+* Bindings for the C standard library and other platform libraries\n+*\n+* This module contains bindings to the C standard library,\n+* organized into modules by their defining standard.\n+* Additionally, it contains some assorted platform-specific definitions.\n+* For convenience, most functions and types are reexported from `core::libc`,\n+* so `pub use core::libc::*` will import the available\n+* C bindings as appropriate for the target platform. The exact\n+* set of functions available are platform specific.\n+*\n+* *Note* Rustdoc does not indicate reexports currently. Also, because these\n+* definitions are platform-specific, some may not\n+* appear in the generated documentation.\n *\n * We consider the following specs reasonably normative with respect\n * to interoperating with the C standard library (libc/msvcrt):"}]}