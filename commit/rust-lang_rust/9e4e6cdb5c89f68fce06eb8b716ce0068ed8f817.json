{"sha": "9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGU2Y2RiNWM4OWY2OGZjZTA2ZWI4YjcxNmNlMDA2OGVkOGY4MTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T16:32:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T16:32:20Z"}, "message": "Dropping arrays works again", "tree": {"sha": "a1910458bd9b64a2e52d9fcf74542c74d42d3659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1910458bd9b64a2e52d9fcf74542c74d42d3659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "html_url": "https://github.com/rust-lang/rust/commit/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c12ebc78dbe86896c66e8cfb4e6923184f89e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c12ebc78dbe86896c66e8cfb4e6923184f89e24", "html_url": "https://github.com/rust-lang/rust/commit/7c12ebc78dbe86896c66e8cfb4e6923184f89e24"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "bf847051d8ab5d7d43b0f5f9242a4fa8cfb6343b", "filename": "src/eval_context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax::codemap::{self, DUMMY_SP, Span};\n use syntax::ast;\n use syntax::abi::Abi;\n+use syntax::symbol::Symbol;\n \n use error::{EvalError, EvalResult};\n use lvalue::{Global, GlobalId, Lvalue, LvalueExtra};\n@@ -231,7 +232,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 span: DUMMY_SP,\n                                 ty: tcx.types.usize,\n                                 literal: mir::Literal::Value {\n-                                    value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(0, tcx.sess.target.uint_type).unwrap())),\n+                                    value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(1, tcx.sess.target.uint_type).unwrap())),\n                                 },\n                             }),\n                         )\n@@ -262,7 +263,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             },\n             mir::LocalDecl {\n                 mutability: mir::Mutability::Mut,\n-                ty: tcx.mk_mut_ptr(tcx.mk_self_type()),\n+                ty: tcx.mk_mut_ptr(tcx.mk_slice(tcx.mk_param(0, Symbol::intern(\"T\")))),\n                 name: None,\n                 source_info: None,\n             },"}, {"sha": "ed178f6de0d78dda09982a89b928ac924e98ae09", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=9e4e6cdb5c89f68fce06eb8b716ce0068ed8f817", "patch": "@@ -2,6 +2,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::Layout;\n+use rustc::ty::subst::Kind;\n use syntax::codemap::Span;\n use syntax::attr;\n use syntax::abi::Abi;\n@@ -76,24 +77,36 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Drop { ref location, target, .. } => {\n+                trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n                 let lval = self.eval_lvalue(location)?;\n+                trace!(\"drop lval: {:#?}\", lval);\n                 let src_ptr = self.force_allocation(lval)?.to_ptr();\n-\n                 let ty = self.lvalue_ty(location);\n+                self.goto_block(target);\n+\n                 let ty = ::eval_context::apply_param_substs(self.tcx, self.substs(), &ty);\n \n-                self.goto_block(target);\n-                let instance = ::eval_context::resolve_drop_in_place(self.tcx, ty);\n+                let mut instance = ::eval_context::resolve_drop_in_place(self.tcx, ty);\n \n                 if let ty::InstanceDef::DropGlue(_, None) = instance.def {\n                     // we don't actually need to drop anything\n                     return Ok(());\n                 }\n-\n+                let arg;\n                 let mir = match ty.sty {\n                     ty::TyDynamic(..) => unimplemented!(),\n-                    ty::TyArray(..) | ty::TySlice(..) => ::eval_context::MirRef::clone(&self.seq_drop_glue),\n-                    _ => self.load_mir(instance.def)?,\n+                    ty::TyArray(elem, n) => {\n+                        instance.substs = self.tcx.mk_substs([\n+                            Kind::from(elem),\n+                        ].iter().cloned());\n+                        arg = Value::ByValPair(PrimVal::Ptr(src_ptr), PrimVal::Bytes(n as u128));\n+                        ::eval_context::MirRef::clone(&self.seq_drop_glue)\n+                    },\n+                    ty::TySlice(ref elem) => unimplemented!(),\n+                    _ => {\n+                        arg = Value::ByVal(PrimVal::Ptr(src_ptr));\n+                        self.load_mir(instance.def)?\n+                    },\n                 };\n \n                 self.push_stack_frame(\n@@ -109,7 +122,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let arg_local = arg_locals.next().unwrap();\n                 let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n                 let arg_ty = self.tcx.mk_mut_ptr(ty);\n-                self.write_value(Value::ByVal(PrimVal::Ptr(src_ptr)), dest, arg_ty)?;\n+                self.write_value(arg, dest, arg_ty)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, .. } => {"}]}