{"sha": "3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTg0MmFmZTFlMTAwMjNkODRiN2MxZDQ0MTU1YzM1NmY4YWU0ZTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-05T10:18:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:52Z"}, "message": "add a new RegionKind variant: ReClosureBound\n\nThis is needed to allow the `ClosureRegionRequirements` to capture\ntypes that include regions.", "tree": {"sha": "ffcc8a88f180bc97b018a8386e0dbbb9e2628ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffcc8a88f180bc97b018a8386e0dbbb9e2628ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "html_url": "https://github.com/rust-lang/rust/commit/3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e1d4749e5ba14ff89073f5812974ec8fdbffd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e1d4749e5ba14ff89073f5812974ec8fdbffd4", "html_url": "https://github.com/rust-lang/rust/commit/85e1d4749e5ba14ff89073f5812974ec8fdbffd4"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "ea3a1074aa2698b140f4020f7eeeff5a192f697a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -75,6 +75,9 @@ for ty::RegionKind {\n             ty::ReFree(ref free_region) => {\n                 free_region.hash_stable(hcx, hasher);\n             }\n+            ty::ReClosureBound(vid) => {\n+                vid.hash_stable(hcx, hasher);\n+            }\n             ty::ReLateBound(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) => {"}, {"sha": "f7bc092a3d7ae7b3351e9231c02556263faaf560", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -475,6 +475,14 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n                     ty::Bivariant | ty::Covariant | ty::Contravariant => (),\n                 }\n             }\n+\n+            ty::ReClosureBound(..) => {\n+                span_bug!(\n+                    self.span,\n+                    \"encountered unexpected ReClosureBound: {:?}\",\n+                    r,\n+                );\n+            }\n         }\n \n         // FIXME: This is non-ideal because we don't give a"}, {"sha": "3e3aea0256e72e4ef816053900d888fd95e2e81b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -240,6 +240,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::ReErased => {\n                 (format!(\"lifetime {:?}\", region), None)\n             }\n+\n+            // We shouldn't encounter an error message with ReClosureBound.\n+            ty::ReClosureBound(..) => {\n+                bug!(\n+                    \"encountered unexpected ReClosureBound: {:?}\",\n+                    region,\n+                );\n+            }\n         };\n         let message = format!(\"{}{}{}\", prefix, description, suffix);\n         if let Some(span) = span {"}, {"sha": "1783d5abfc7c6b5cabb3edb86adac499a7c4d305", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -113,6 +113,13 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 // replace all free regions with 'erased\n                 self.tcx().types.re_erased\n             }\n+\n+            ty::ReClosureBound(..) => {\n+                bug!(\n+                    \"encountered unexpected ReClosureBound: {:?}\",\n+                    r,\n+                );\n+            }\n         }\n     }\n "}, {"sha": "3ac4ec5bee41644390a3e5349096bedb702850bd", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -258,7 +258,12 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let tcx = self.region_rels.tcx;\n         match (a, b) {\n-            (&ReLateBound(..), _) | (_, &ReLateBound(..)) | (&ReErased, _) | (_, &ReErased) => {\n+            (&ty::ReClosureBound(..), _) |\n+            (_, &ty::ReClosureBound(..)) |\n+            (&ReLateBound(..), _) |\n+            (_, &ReLateBound(..)) |\n+            (&ReErased, _) |\n+            (_, &ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n "}, {"sha": "dd3dd1e06de370945c7b0d4cf56e6f20edfc7bbc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -1831,6 +1831,15 @@ pub struct GeneratorLayout<'tcx> {\n /// instance of the closure is created, the corresponding free regions\n /// can be extracted from its type and constrained to have the given\n /// outlives relationship.\n+///\n+/// In some cases, we have to record outlives requirements between\n+/// types and regions as well. In that case, if those types include\n+/// any regions, those regions are recorded as `ReClosureBound`\n+/// instances assigned one of these same indices. Those regions will\n+/// be substituted away by the creator. We use `ReClosureBound` in\n+/// that case because the regions must be allocated in the global\n+/// TyCtxt, and hence we cannot use `ReVar` (which is what we use\n+/// internally within the rest of the NLL code).\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureRegionRequirements<'gcx> {\n     /// The number of external regions defined on the closure.  In our"}, {"sha": "02729c6d60084081689edd0d5e9b45e816f8f086", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -1036,6 +1036,12 @@ pub enum RegionKind {\n \n     /// Erased region, used by trait selection, in MIR and during trans.\n     ReErased,\n+\n+    /// These are regions bound in the \"defining type\" for a\n+    /// closure. They are used ONLY as part of the\n+    /// `ClosureRegionRequirements` that are produced by MIR borrowck.\n+    /// See `ClosureRegionRequirements` for more details.\n+    ReClosureBound(RegionVid),\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n@@ -1207,6 +1213,9 @@ impl RegionKind {\n             }\n             ty::ReErased => {\n             }\n+            ty::ReClosureBound(..) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+            }\n         }\n \n         match *self {"}, {"sha": "84d5f547f1b755c74c0cfef8587e85342d0331ae", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -822,6 +822,8 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, .. }) => {\n                 self.def_id(def_id);\n             }\n+\n+            ty::ReClosureBound(..) |\n             ty::ReLateBound(..) |\n             ty::ReFree(..) |\n             ty::ReScope(..) |"}, {"sha": "5bfa646456857b2f88436841ff052c3278b6bc5f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -733,6 +733,9 @@ define_print! {\n                 ty::ReErased => Ok(()),\n                 ty::ReStatic => write!(f, \"'static\"),\n                 ty::ReEmpty => write!(f, \"'<empty>\"),\n+\n+                // The user should never encounter these in unsubstituted form.\n+                ty::ReClosureBound(vid) => write!(f, \"{:?}\", vid),\n             }\n         }\n         debug {\n@@ -743,6 +746,11 @@ define_print! {\n                            data.name)\n                 }\n \n+                ty::ReClosureBound(ref vid) => {\n+                    write!(f, \"ReClosureBound({:?})\",\n+                           vid)\n+                }\n+\n                 ty::ReLateBound(binder_id, ref bound_region) => {\n                     write!(f, \"ReLateBound({:?}, {:?})\",\n                            binder_id,"}, {"sha": "5cbe2822e5c038ed33f5192d7ac19802bf384b43", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -367,6 +367,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     ty::ReStatic => self.item_ub,\n \n                     ty::ReEmpty |\n+                    ty::ReClosureBound(..) |\n                     ty::ReLateBound(..) |\n                     ty::ReVar(..) |\n                     ty::ReSkolemized(..) |"}, {"sha": "2c0fa9878aaf2572479a411e5582d16ae215e8d2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -381,6 +381,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             },\n             (RegionKind::ReLateBound(_, _), _) |\n             (RegionKind::ReSkolemized(_, _), _) |\n+            (RegionKind::ReClosureBound(_), _) |\n             (RegionKind::ReErased, _) => {\n                 span_bug!(drop_span, \"region does not make sense in this context\");\n             },"}, {"sha": "df42d5eaa0a3d6abd57e443aa1fcf7ffb8d2942e", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -465,6 +465,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::ReFree(..) |\n+            ty::ReClosureBound(..) |\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) |"}, {"sha": "c7657c9b2ff456f675c26022b926b9450f834ffb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5842afe1e10023d84b7c1d44155c356f8ae4e0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a5842afe1e10023d84b7c1d44155c356f8ae4e0", "patch": "@@ -1055,6 +1055,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) |\n             ty::ReEmpty |\n+            ty::ReClosureBound(_) |\n             ty::ReErased => None\n         }\n     }"}]}