{"sha": "d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWIxODMwNmNkMzY3OWU5NGM1OGQ5ZDVjMWM0YTNkMjkxMTY3ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-28T04:26:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-28T04:26:35Z"}, "message": "auto merge of #11826 : huonw/rust/7621-deriving-errors, r=alexcrichton\n\ncc #7621.\r\n\r\nSee the commit message. I'm not sure if we should merge this now, or wait until we can write `Clone::clone(x)` which will directly solve the above issue with perfect error messages.", "tree": {"sha": "c0bc8549bbd8d6b5b2ef4718ed793f8693f01e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0bc8549bbd8d6b5b2ef4718ed793f8693f01e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "html_url": "https://github.com/rust-lang/rust/commit/d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6c229831a0859d7345b16b46473002073b646d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6c229831a0859d7345b16b46473002073b646d", "html_url": "https://github.com/rust-lang/rust/commit/8c6c229831a0859d7345b16b46473002073b646d"}, {"sha": "cb02a370428afaae76db59080befe88b8c97e14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb02a370428afaae76db59080befe88b8c97e14d", "html_url": "https://github.com/rust-lang/rust/commit/cb02a370428afaae76db59080befe88b8c97e14d"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "f00168a52c6a8735bbae12a11e216457269356f5", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -118,7 +118,7 @@ def write_file(name, string):\n for (trait, supers, errs) in [('Rand', [], 1),\n                               ('Clone', [], 1), ('DeepClone', ['Clone'], 1),\n                               ('Eq', [], 2), ('Ord', [], 8),\n-                              ('TotalEq', [], 2), ('TotalOrd', ['TotalEq'], 2)]:\n+                              ('TotalEq', [], 1), ('TotalOrd', ['TotalEq'], 1)]:\n     traits[trait] = (ALL, supers, errs)\n \n for (trait, (types, super_traits, error_count)) in traits.items():"}, {"sha": "4023a4d7e7fbe18853fa0c5226b364166dc83bb2", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -47,13 +47,17 @@ struct Node<T> {\n }\n \n /// Double-ended DList iterator\n-#[deriving(Clone)]\n pub struct Items<'a, T> {\n     priv head: &'a Link<T>,\n     priv tail: Rawlink<Node<T>>,\n     priv nelem: uint,\n }\n \n+// FIXME #11820: the &'a Option<> of the Link stops clone working.\n+impl<'a, T> Clone for Items<'a, T> {\n+    fn clone(&self) -> Items<'a, T> { *self }\n+}\n+\n /// Double-ended mutable DList iterator\n pub struct MutItems<'a, T> {\n     priv list: &'a mut DList<T>,"}, {"sha": "2fabc44d0e4b208f8bc950c4503c983b7247c188", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -399,13 +399,17 @@ struct BindingInfo {\n \n type BindingsMap = HashMap<Ident, BindingInfo>;\n \n-#[deriving(Clone)]\n struct ArmData<'a,'b> {\n     bodycx: &'b Block<'b>,\n     arm: &'a ast::Arm,\n     bindings_map: @BindingsMap\n }\n \n+// FIXME #11820: method resolution is unreliable with &\n+impl<'a,'b> Clone for ArmData<'a, 'b> {\n+    fn clone(&self) -> ArmData<'a, 'b> { *self }\n+}\n+\n /**\n  * Info about Match.\n  * If all `pats` are matched then arm `data` will be executed.\n@@ -2227,5 +2231,3 @@ fn bind_irrefutable_pat<'a>(\n     }\n     return bcx;\n }\n-\n-"}, {"sha": "5a02d8eead85c9b847a13998a39d3fd1a4955e07", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -78,14 +78,10 @@ fn cs_op(less: bool, equal: bool, cx: &ExtCtxt, span: Span, substr: &Substructur\n                 _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(Ord)`\")\n             };\n \n-            let cmp = cx.expr_binary(span, op,\n-                                     cx.expr_deref(span, self_f),\n-                                     cx.expr_deref(span, other_f));\n+            let cmp = cx.expr_binary(span, op, self_f, other_f);\n \n             let not_cmp = cx.expr_unary(span, ast::UnNot,\n-                                        cx.expr_binary(span, op,\n-                                                       cx.expr_deref(span, other_f),\n-                                                       cx.expr_deref(span, self_f)));\n+                                        cx.expr_binary(span, op, other_f, self_f));\n \n             let and = cx.expr_binary(span, ast::BiAnd, not_cmp, subexpr);\n             cx.expr_binary(span, ast::BiOr, cmp, and)"}, {"sha": "3c9401b109f3a133bdad568b8905b73152fb2970", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -1013,7 +1013,8 @@ impl<'a> TraitDef<'a> {\n             };\n             let path = cx.path_ident(sp, cx.ident_of(format!(\"{}_{}\", prefix, i)));\n             paths.push(path.clone());\n-            ident_expr.push((sp, opt_id, cx.expr_path(path)));\n+            let val = cx.expr(sp, ast::ExprParen(cx.expr_deref(sp, cx.expr_path(path))));\n+            ident_expr.push((sp, opt_id, val));\n         }\n \n         let subpats = self.create_subpatterns(paths, mutbl);\n@@ -1057,7 +1058,8 @@ impl<'a> TraitDef<'a> {\n                     let path = cx.path_ident(sp, cx.ident_of(format!(\"{}_{}\", prefix, i)));\n \n                     paths.push(path.clone());\n-                    ident_expr.push((sp, None, cx.expr_path(path)));\n+                    let val = cx.expr(sp, ast::ExprParen(cx.expr_deref(sp, cx.expr_path(path))));\n+                    ident_expr.push((sp, None, val));\n                 }\n \n                 let subpats = self.create_subpatterns(paths, mutbl);\n@@ -1132,7 +1134,7 @@ pub fn cs_same_method(f: |&ExtCtxt, Span, ~[@Expr]| -> @Expr,\n                 cx.expr_method_call(field.span,\n                                     field.self_,\n                                     substructure.method_ident,\n-                                    field.other.clone())\n+                                    field.other.map(|e| cx.expr_addr_of(field.span, *e)))\n             });\n \n             f(cx, trait_span, called)"}, {"sha": "604aa0dd06a34cb21ff18a4215d7ca915a877f36", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct NoCloneOrEq;\n+\n+#[deriving(Eq)]\n+struct E {\n+    x: NoCloneOrEq //~ ERROR does not implement any method in scope named `eq`\n+         //~^ ERROR does not implement any method in scope named `ne`\n+}\n+#[deriving(Clone)]\n+struct C {\n+    x: NoCloneOrEq //~ ERROR does not implement any method in scope named `clone`\n+}\n+\n+\n+fn main() {}"}, {"sha": "8e55609a515d83c6644258c8781f2d7c90432bc0", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -20,7 +20,6 @@ struct Error;\n enum Enum {\n    A {\n      x: Error //~ ERROR\n-//~^ ERROR\n    }\n }\n "}, {"sha": "968f0420687c57bb16a7e999b17c6b44ba85b5dc", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -20,7 +20,6 @@ struct Error;\n enum Enum {\n    A(\n      Error //~ ERROR\n-//~^ ERROR\n      )\n }\n "}, {"sha": "8c53d1167f12ff21b36744349b8150d89e9eaa6d", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -19,7 +19,6 @@ struct Error;\n #[deriving(TotalEq)]\n struct Struct {\n     x: Error //~ ERROR\n-//~^ ERROR\n }\n \n fn main() {}"}, {"sha": "16d49954dce7ab214184678fa44a208118d9b10b", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -19,7 +19,6 @@ struct Error;\n #[deriving(TotalEq)]\n struct Struct(\n     Error //~ ERROR\n-//~^ ERROR\n );\n \n fn main() {}"}, {"sha": "fe598906c02880d098b4a95473bf492f71dfe889", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -20,7 +20,6 @@ struct Error;\n enum Enum {\n    A {\n      x: Error //~ ERROR\n-//~^ ERROR\n    }\n }\n "}, {"sha": "6bccd22c45f8e82710f3583a7306e584d358b3d1", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -20,7 +20,6 @@ struct Error;\n enum Enum {\n    A(\n      Error //~ ERROR\n-//~^ ERROR\n      )\n }\n "}, {"sha": "4ff48824a7bace0137cef20dd1de1a62667299f0", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -19,7 +19,6 @@ struct Error;\n #[deriving(TotalOrd,TotalEq)]\n struct Struct {\n     x: Error //~ ERROR\n-//~^ ERROR\n }\n \n fn main() {}"}, {"sha": "08e2c9bcd7d9a03aa780eb1e38b7f9c832d5ae80", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -19,7 +19,6 @@ struct Error;\n #[deriving(TotalOrd,TotalEq)]\n struct Struct(\n     Error //~ ERROR\n-//~^ ERROR\n );\n \n fn main() {}"}, {"sha": "cf53664e32a14457bdd3911d875748eb8a2c00d8", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+// xfail-test FIXME #11820: & is unreliable in deriving\n+\n use std::cmp::{Less,Equal,Greater};\n \n #[deriving(TotalEq,TotalOrd)]"}, {"sha": "38eee7430ac5a94676244596d3663934387ca6fa", "filename": "src/test/run-pass/deriving-self-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test FIXME #11820: & is unreliable in deriving\n+\n #[deriving(Eq,Ord)]\n struct A<'a> {\n     x: &'a int"}, {"sha": "71b9e3ee7bafdb517530a6b87c671956e05fcacc", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21b18306cd3679e94c58d9d5c1c4a3d291167fe/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=d21b18306cd3679e94c58d9d5c1c4a3d291167fe", "patch": "@@ -27,11 +27,19 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[deriving(Eq)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n }\n+impl<'tcx> Eq for TypeStructure<'tcx> {\n+    fn eq(&self, other: &TypeStructure<'tcx>) -> bool {\n+        match (*self, *other) {\n+            (TypeInt, TypeInt) => true,\n+            (TypeFunction(s_a, s_b), TypeFunction(o_a, o_b)) => *s_a == *o_a && *s_b == *o_b,\n+            _ => false\n+        }\n+    }\n+}\n \n struct TypeContext<'tcx, 'ast> {\n     ty_arena: &'tcx Arena,"}]}