{"sha": "61b29993ddd531c6f53f7d21ddf28d26d4d63a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYjI5OTkzZGRkNTMxYzZmNTNmN2QyMWRkZjI4ZDI2ZDRkNjNhMjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-11T12:33:41Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-11T23:01:03Z"}, "message": "bool: implement Ord and TotalOrd", "tree": {"sha": "578b5658e1d5bd1d398c38468dda28813fdb5266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578b5658e1d5bd1d398c38468dda28813fdb5266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b29993ddd531c6f53f7d21ddf28d26d4d63a21", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b29993ddd531c6f53f7d21ddf28d26d4d63a21", "html_url": "https://github.com/rust-lang/rust/commit/61b29993ddd531c6f53f7d21ddf28d26d4d63a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b29993ddd531c6f53f7d21ddf28d26d4d63a21/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0defb8466e624ded66ef00f092a86b638e01152", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0defb8466e624ded66ef00f092a86b638e01152", "html_url": "https://github.com/rust-lang/rust/commit/e0defb8466e624ded66ef00f092a86b638e01152"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "6c60cec2595ef885f724ef1ab6a1f92935d35491", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 72, "deletions": 27, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/61b29993ddd531c6f53f7d21ddf28d26d4d63a21/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b29993ddd531c6f53f7d21ddf28d26d4d63a21/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=61b29993ddd531c6f53f7d21ddf28d26d4d63a21", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n //! Boolean logic\n \n+#[cfg(notest)]\n+use cmp::{Eq, Ord, TotalOrd, Ordering};\n use option::{None, Option, Some};\n use from_str::FromStr;\n \n-#[cfg(notest)] use cmp;\n-\n /// Negation / inverse\n pub fn not(v: bool) -> bool { !v }\n \n@@ -73,40 +72,86 @@ pub fn all_values(blk: &fn(v: bool)) {\n }\n \n /// converts truth value to an 8 bit byte\n+#[inline(always)]\n pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n #[cfg(notest)]\n-impl cmp::Eq for bool {\n+impl Ord for bool {\n+    #[inline(always)]\n+    fn lt(&self, other: &bool) -> bool { to_bit(*self) < to_bit(*other) }\n+    #[inline(always)]\n+    fn le(&self, other: &bool) -> bool { to_bit(*self) <= to_bit(*other) }\n+    #[inline(always)]\n+    fn gt(&self, other: &bool) -> bool { to_bit(*self) > to_bit(*other) }\n+    #[inline(always)]\n+    fn ge(&self, other: &bool) -> bool { to_bit(*self) >= to_bit(*other) }\n+}\n+\n+#[cfg(notest)]\n+impl TotalOrd for bool {\n+    #[inline(always)]\n+    fn cmp(&self, other: &bool) -> Ordering { to_bit(*self).cmp(&to_bit(*other)) }\n+}\n+\n+#[cfg(notest)]\n+impl Eq for bool {\n+    #[inline(always)]\n     fn eq(&self, other: &bool) -> bool { (*self) == (*other) }\n+    #[inline(always)]\n     fn ne(&self, other: &bool) -> bool { (*self) != (*other) }\n }\n \n-#[test]\n-pub fn test_bool_from_str() {\n-    use from_str::FromStr;\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use prelude::*;\n \n-    do all_values |v| {\n-        assert!(Some(v) == FromStr::from_str(to_str(v)))\n+    #[test]\n+    fn test_bool_from_str() {\n+        use from_str::FromStr;\n+\n+        do all_values |v| {\n+            assert!(Some(v) == FromStr::from_str(to_str(v)))\n+        }\n     }\n-}\n \n-#[test]\n-pub fn test_bool_to_str() {\n-    assert!(to_str(false) == ~\"false\");\n-    assert!(to_str(true) == ~\"true\");\n-}\n+    #[test]\n+    fn test_bool_to_str() {\n+        assert!(to_str(false) == ~\"false\");\n+        assert!(to_str(true) == ~\"true\");\n+    }\n \n-#[test]\n-pub fn test_bool_to_bit() {\n-    do all_values |v| {\n-        assert!(to_bit(v) == if is_true(v) { 1u8 } else { 0u8 });\n+    #[test]\n+    fn test_bool_to_bit() {\n+        do all_values |v| {\n+            assert!(to_bit(v) == if is_true(v) { 1u8 } else { 0u8 });\n+        }\n     }\n-}\n \n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n+    #[test]\n+    fn test_bool_ord() {\n+        assert!(true > false);\n+        assert!(!(false > true));\n+\n+        assert!(false < true);\n+        assert!(!(true < false));\n+\n+        assert!(false <= false);\n+        assert!(false >= false);\n+        assert!(true <= true);\n+        assert!(true >= true);\n+\n+        assert!(false <= true);\n+        assert!(!(false >= true));\n+        assert!(true >= false);\n+        assert!(!(true <= false));\n+    }\n+\n+    #[test]\n+    fn test_bool_totalord() {\n+        assert_eq!(true.cmp(&true), Equal);\n+        assert_eq!(false.cmp(&false), Equal);\n+        assert_eq!(true.cmp(&false), Greater);\n+        assert_eq!(false.cmp(&true), Less);\n+    }\n+}"}]}