{"sha": "998141f8ef8225704f8641ef0372c686bcbd2c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODE0MWY4ZWY4MjI1NzA0Zjg2NDFlZjAzNzJjNjg2YmNiZDJjNWY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-01T16:40:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-02T18:43:16Z"}, "message": "Fix another return-const ICE", "tree": {"sha": "176286b0c0adbac0e14214bb8e7478a8b9f3ba60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176286b0c0adbac0e14214bb8e7478a8b9f3ba60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/998141f8ef8225704f8641ef0372c686bcbd2c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/998141f8ef8225704f8641ef0372c686bcbd2c5f", "html_url": "https://github.com/rust-lang/rust/commit/998141f8ef8225704f8641ef0372c686bcbd2c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/998141f8ef8225704f8641ef0372c686bcbd2c5f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad1c62d38294e145aa65425a08b5accac121cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad1c62d38294e145aa65425a08b5accac121cd3", "html_url": "https://github.com/rust-lang/rust/commit/7ad1c62d38294e145aa65425a08b5accac121cd3"}], "stats": {"total": 74, "additions": 39, "deletions": 35}, "files": [{"sha": "a7806131f2c8947d1233a8ba90ec1b6c5dc789d1", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=998141f8ef8225704f8641ef0372c686bcbd2c5f", "patch": "@@ -309,33 +309,32 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n     pat.walk(|p| {\n         if let PatKind::Binding(_, _, ident, None) = p.node {\n-            let bm = *cx.tables\n-                        .pat_binding_modes()\n-                        .get(p.hir_id)\n-                        .expect(\"missing binding mode\");\n-\n-            if bm != ty::BindByValue(hir::MutImmutable) {\n-                // Nothing to check.\n-                return true;\n-            }\n-            let pat_ty = cx.tables.pat_ty(p);\n-            if let ty::TyAdt(edef, _) = pat_ty.sty {\n-                if edef.is_enum() && edef.variants.iter().any(|variant| {\n-                    variant.name == ident.name && variant.ctor_kind == CtorKind::Const\n-                }) {\n-                    let ty_path = cx.tcx.item_path_str(edef.did);\n-                    let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n-                        \"pattern binding `{}` is named the same as one \\\n-                         of the variants of the type `{}`\",\n-                        ident, ty_path);\n-                    err.span_suggestion_with_applicability(\n-                        p.span,\n-                        \"to match on the variant, qualify the path\",\n-                        format!(\"{}::{}\", ty_path, ident),\n-                        Applicability::MachineApplicable\n-                    );\n-                    err.emit();\n+            if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n+                if bm != ty::BindByValue(hir::MutImmutable) {\n+                    // Nothing to check.\n+                    return true;\n+                }\n+                let pat_ty = cx.tables.pat_ty(p);\n+                if let ty::TyAdt(edef, _) = pat_ty.sty {\n+                    if edef.is_enum() && edef.variants.iter().any(|variant| {\n+                        variant.name == ident.name && variant.ctor_kind == CtorKind::Const\n+                    }) {\n+                        let ty_path = cx.tcx.item_path_str(edef.did);\n+                        let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n+                            \"pattern binding `{}` is named the same as one \\\n+                            of the variants of the type `{}`\",\n+                            ident, ty_path);\n+                        err.span_suggestion_with_applicability(\n+                            p.span,\n+                            \"to match on the variant, qualify the path\",\n+                            format!(\"{}::{}\", ty_path, ident),\n+                            Applicability::MachineApplicable\n+                        );\n+                        err.emit();\n+                    }\n                 }\n+            } else {\n+                cx.tcx.sess.delay_span_bug(p.span, \"missing binding mode\");\n             }\n         }\n         true"}, {"sha": "f8d12b991eaef37d8752c4693d81a5cbda741ee4", "filename": "src/test/ui/issue-51714.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Ftest%2Fui%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Ftest%2Fui%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51714.rs?ref=998141f8ef8225704f8641ef0372c686bcbd2c5f", "patch": "@@ -9,16 +9,15 @@\n // except according to those terms.\n \n fn main() {\n-    |_:  [_; return || {}] | {}\n+    |_:  [_; return || {}] | {};\n     //~^ ERROR return statement outside of function body\n-}\n \n-fn foo() {\n     [(); return || {}];\n     //~^ ERROR return statement outside of function body\n-}\n \n-fn bar() {\n     [(); return |ice| {}];\n     //~^ ERROR return statement outside of function body\n+\n+    [(); return while let Some(n) = Some(0) {}];\n+    //~^ ERROR return statement outside of function body\n }"}, {"sha": "c8764564dca38a3622fe22ad99bbedd46cb7ade9", "filename": "src/test/ui/issue-51714.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Ftest%2Fui%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998141f8ef8225704f8641ef0372c686bcbd2c5f/src%2Ftest%2Fui%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51714.stderr?ref=998141f8ef8225704f8641ef0372c686bcbd2c5f", "patch": "@@ -1,21 +1,27 @@\n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:12:14\n    |\n-LL |     |_:  [_; return || {}] | {}\n+LL |     |_:  [_; return || {}] | {};\n    |              ^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:17:10\n+  --> $DIR/issue-51714.rs:15:10\n    |\n LL |     [(); return || {}];\n    |          ^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:22:10\n+  --> $DIR/issue-51714.rs:18:10\n    |\n LL |     [(); return |ice| {}];\n    |          ^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-51714.rs:21:10\n+   |\n+LL |     [(); return while let Some(n) = Some(0) {}];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0572`."}]}