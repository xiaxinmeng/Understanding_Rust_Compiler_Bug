{"sha": "443bf93e48b90415564046ae846e8781fe1f163e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0M2JmOTNlNDhiOTA0MTU1NjQwNDZhZTg0NmU4NzgxZmUxZjE2M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-14T04:33:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-15T21:19:09Z"}, "message": "Fix a typo in the ifmt dox", "tree": {"sha": "54ae98b338e5876ef4a7e2c7bebea64a31f45fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ae98b338e5876ef4a7e2c7bebea64a31f45fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/443bf93e48b90415564046ae846e8781fe1f163e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/443bf93e48b90415564046ae846e8781fe1f163e", "html_url": "https://github.com/rust-lang/rust/commit/443bf93e48b90415564046ae846e8781fe1f163e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/443bf93e48b90415564046ae846e8781fe1f163e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783c6a1fbf9c44bc58e3ba9224d5920db1de91f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/783c6a1fbf9c44bc58e3ba9224d5920db1de91f0", "html_url": "https://github.com/rust-lang/rust/commit/783c6a1fbf9c44bc58e3ba9224d5920db1de91f0"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "70ec5d931998430fa865ec6c7dc39869c1e6c4c5", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443bf93e48b90415564046ae846e8781fe1f163e/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443bf93e48b90415564046ae846e8781fe1f163e/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=443bf93e48b90415564046ae846e8781fe1f163e", "patch": "@@ -93,7 +93,7 @@ string.\n Because formatting is done via traits, there is no requirement that the\n `d` format actually takes an `int`, but rather it simply requires a type which\n ascribes to the `Signed` formatting trait. There are various parameters which do\n-require a particular type, however. Namely if the sytnax `{:.*s}` is used, then\n+require a particular type, however. Namely if the syntax `{:.*s}` is used, then\n the number of characters to print from the string precedes the actual string and\n must have the type `uint`. Although a `uint` can be printed with `{:u}`, it is\n illegal to reference an argument as such. For example, this is another invalid"}, {"sha": "a3ead83321f64a525b5bab01229910680018aff7", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443bf93e48b90415564046ae846e8781fe1f163e/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443bf93e48b90415564046ae846e8781fe1f163e/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=443bf93e48b90415564046ae846e8781fe1f163e", "patch": "@@ -13,7 +13,7 @@\n // part of issue-6919.rs\n \n struct C<'self> {\n-    pub k: &'self fn(),\n+    k: &'self fn(),\n }\n \n fn no_op() { }"}, {"sha": "2d612bb742eb383fd1342853d253acbe44159967", "filename": "src/test/run-pass/issue-6898.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443bf93e48b90415564046ae846e8781fe1f163e/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443bf93e48b90415564046ae846e8781fe1f163e/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6898.rs?ref=443bf93e48b90415564046ae846e8781fe1f163e", "patch": "@@ -21,18 +21,18 @@ pub fn size_of_val<T>(val: &T) -> uint {\n }\n \n pub trait TypeInfo {\n-    pub fn size_of() -> uint;\n-    pub fn size_of_val(&self) -> uint;\n+    fn size_of() -> uint;\n+    fn size_of_val(&self) -> uint;\n }\n \n impl<T> TypeInfo for T {\n     /// The size of the type in bytes.\n-    pub fn size_of() -> uint {\n+    fn size_of() -> uint {\n         unsafe { intrinsics::size_of::<T>() }\n     }\n \n     /// Returns the size of the type of `self` in bytes.\n-    pub fn size_of_val(&self) -> uint {\n+    fn size_of_val(&self) -> uint {\n         TypeInfo::size_of::<T>()\n     }\n }"}]}