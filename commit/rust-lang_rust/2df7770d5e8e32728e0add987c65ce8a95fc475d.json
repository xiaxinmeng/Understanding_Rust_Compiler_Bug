{"sha": "2df7770d5e8e32728e0add987c65ce8a95fc475d", "node_id": "C_kwDOAAsO6NoAKDJkZjc3NzBkNWU4ZTMyNzI4ZTBhZGQ5ODdjNjVjZThhOTVmYzQ3NWQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-10T21:19:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-12T14:12:42Z"}, "message": "Add lint for useless anonymous reexports", "tree": {"sha": "0ee6b8143c71ea0977637fb5d0cfa804e598e9b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ee6b8143c71ea0977637fb5d0cfa804e598e9b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df7770d5e8e32728e0add987c65ce8a95fc475d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df7770d5e8e32728e0add987c65ce8a95fc475d", "html_url": "https://github.com/rust-lang/rust/commit/2df7770d5e8e32728e0add987c65ce8a95fc475d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df7770d5e8e32728e0add987c65ce8a95fc475d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c0b81c1fd5de8e00276524896d3352ed91a8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "html_url": "https://github.com/rust-lang/rust/commit/24c0b81c1fd5de8e00276524896d3352ed91a8cb"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "1924ae08c3938c047dee60a5cdd045cec16bb157", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=2df7770d5e8e32728e0add987c65ce8a95fc475d", "patch": "@@ -508,3 +508,6 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n+\n+lint_useless_anonymous_reexport = useless anonymous re-export\n+    .note = only anonymous re-exports of traits are useful, this is {$article} `${desc}`"}, {"sha": "c2cc2fcdf551a580d4fe094c53b5f2807c7b0ae6", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2df7770d5e8e32728e0add987c65ce8a95fc475d", "patch": "@@ -74,6 +74,7 @@ mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n+mod reexports;\n mod traits;\n mod types;\n mod unused;\n@@ -111,6 +112,7 @@ use noop_method_call::*;\n use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n+use reexports::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -242,6 +244,7 @@ late_lint_methods!(\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n             MapUnitFn: MapUnitFn,\n+            UselessAnonymousReexport: UselessAnonymousReexport,\n         ]\n     ]\n );"}, {"sha": "ac73f0830f68b4145fab56f37d091493a64359cc", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=2df7770d5e8e32728e0add987c65ce8a95fc475d", "patch": "@@ -1530,3 +1530,10 @@ pub struct UnusedAllocationDiag;\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_allocation_mut)]\n pub struct UnusedAllocationMutDiag;\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_useless_anonymous_reexport)]\n+pub struct UselessAnonymousReexportDiag {\n+    pub article: &'static str,\n+    pub desc: &'static str,\n+}"}, {"sha": "8737a57ea0264cddb1476d51411acbed456d027f", "filename": "compiler/rustc_lint/src/reexports.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df7770d5e8e32728e0add987c65ce8a95fc475d/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Freexports.rs?ref=2df7770d5e8e32728e0add987c65ce8a95fc475d", "patch": "@@ -0,0 +1,82 @@\n+use crate::lints::UselessAnonymousReexportDiag;\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Item, ItemKind, UseKind};\n+use rustc_middle::ty::Visibility;\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n+\n+declare_lint! {\n+    /// The `useless_anonymous_reexport` lint checks if anonymous re-exports\n+    /// are re-exports of traits.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(useless_anonymous_reexport)]\n+    ///\n+    /// mod sub {\n+    ///     pub struct Bar;\n+    /// }\n+    ///\n+    /// pub use self::sub::Bar as _;\n+    /// # fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Anonymous re-exports are only useful if it's a re-export of a trait\n+    /// in case you want to give access to it. If you re-export any other kind,\n+    /// you won't be able to use it since its name won't be accessible.\n+    pub USELESS_ANONYMOUS_REEXPORT,\n+    Warn,\n+    \"useless anonymous re-export\"\n+}\n+\n+declare_lint_pass!(UselessAnonymousReexport => [USELESS_ANONYMOUS_REEXPORT]);\n+\n+fn emit_err(cx: &LateContext<'_>, span: Span, def_id: DefId) {\n+    let article = cx.tcx.def_descr_article(def_id);\n+    let desc = cx.tcx.def_descr(def_id);\n+    cx.emit_spanned_lint(\n+        USELESS_ANONYMOUS_REEXPORT,\n+        span,\n+        UselessAnonymousReexportDiag { article, desc },\n+    );\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UselessAnonymousReexport {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Use(path, kind) = item.kind &&\n+            !matches!(kind, UseKind::Glob) &&\n+            item.ident.name == kw::Underscore &&\n+            // We only want re-exports. If it's just a `use X;`, then we ignore it.\n+            match cx.tcx.local_visibility(item.owner_id.def_id) {\n+                Visibility::Public => true,\n+                Visibility::Restricted(level) => {\n+                    level != cx.tcx.parent_module_from_def_id(item.owner_id.def_id)\n+                }\n+            }\n+        {\n+            for def_id in path.res.iter().filter_map(|r| r.opt_def_id()) {\n+                match cx.tcx.def_kind(def_id) {\n+                    DefKind::Trait | DefKind::TraitAlias => {}\n+                    DefKind::TyAlias => {\n+                        let ty = cx.tcx.type_of(def_id);\n+                        if !ty.0.is_trait() {\n+                            emit_err(cx, item.span, def_id);\n+                            break;\n+                        }\n+                    }\n+                    _ => {\n+                        emit_err(cx, item.span, def_id);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}