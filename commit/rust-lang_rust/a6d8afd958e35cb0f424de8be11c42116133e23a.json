{"sha": "a6d8afd958e35cb0f424de8be11c42116133e23a", "node_id": "C_kwDOAAsO6NoAKGE2ZDhhZmQ5NThlMzVjYjBmNDI0ZGU4YmUxMWM0MjExNjEzM2UyM2E", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2022-09-08T18:04:43Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2022-09-08T18:04:43Z"}, "message": "Fix `range_{plus,minus}_one` bad suggestions\n\nFixes #9431.\n\nThe current `range_plus_one` and `range_minus_one` suggestions\nare completely incorrect when macros are involved.\n\nThis commit resolves this by disabling the lints for any range\nexpression that is expanded from a macro. The reasons for this\nare that it is very difficult to create a correct suggestion in\nthis case and that false negatives are less important for\npedantic lints.", "tree": {"sha": "e3f61368dc190fc285d71c7fe625f533dfbb92a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f61368dc190fc285d71c7fe625f533dfbb92a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d8afd958e35cb0f424de8be11c42116133e23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d8afd958e35cb0f424de8be11c42116133e23a", "html_url": "https://github.com/rust-lang/rust/commit/a6d8afd958e35cb0f424de8be11c42116133e23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d8afd958e35cb0f424de8be11c42116133e23a/comments", "author": null, "committer": null, "parents": [{"sha": "b30c5c05545047305ca56ce4a2a545ce90dc2821", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30c5c05545047305ca56ce4a2a545ce90dc2821", "html_url": "https://github.com/rust-lang/rust/commit/b30c5c05545047305ca56ce4a2a545ce90dc2821"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "918d624eec6fa852da2d6767b4c2eef29f5cb7ed", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6d8afd958e35cb0f424de8be11c42116133e23a/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d8afd958e35cb0f424de8be11c42116133e23a/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=a6d8afd958e35cb0f424de8be11c42116133e23a", "patch": "@@ -350,21 +350,15 @@ fn check_range_bounds<'a>(cx: &'a LateContext<'_>, ex: &'a Expr<'_>) -> Option<R\n // exclusive range plus one: `x..(y+1)`\n fn check_exclusive_range_plus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n+        if expr.span.can_be_used_for_suggestions();\n         if let Some(higher::Range {\n             start,\n             end: Some(end),\n             limits: RangeLimits::HalfOpen\n         }) = higher::Range::hir(expr);\n         if let Some(y) = y_plus_one(cx, end);\n         then {\n-            let span = if expr.span.from_expansion() {\n-                expr.span\n-                    .ctxt()\n-                    .outer_expn_data()\n-                    .call_site\n-            } else {\n-                expr.span\n-            };\n+            let span = expr.span;\n             span_lint_and_then(\n                 cx,\n                 RANGE_PLUS_ONE,\n@@ -399,6 +393,7 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n // inclusive range minus one: `x..=(y-1)`\n fn check_inclusive_range_minus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n+        if expr.span.can_be_used_for_suggestions();\n         if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::Range::hir(expr);\n         if let Some(y) = y_minus_one(cx, end);\n         then {"}, {"sha": "a16a3e54d45eadaaf8025b6eadb94b4a2847076d", "filename": "tests/ui/range_plus_minus_one.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.fixed?ref=a6d8afd958e35cb0f424de8be11c42116133e23a", "patch": "@@ -6,6 +6,22 @@ fn f() -> usize {\n     42\n }\n \n+macro_rules! macro_plus_one {\n+    ($m: literal) => {\n+        for i in 0..$m + 1 {\n+            println!(\"{}\", i);\n+        }\n+    };\n+}\n+\n+macro_rules! macro_minus_one {\n+    ($m: literal) => {\n+        for i in 0..=$m - 1 {\n+            println!(\"{}\", i);\n+        }\n+    };\n+}\n+\n #[warn(clippy::range_plus_one)]\n #[warn(clippy::range_minus_one)]\n fn main() {\n@@ -39,4 +55,7 @@ fn main() {\n \n     let mut vec: Vec<()> = std::vec::Vec::new();\n     vec.drain(..);\n+\n+    macro_plus_one!(5);\n+    macro_minus_one!(5);\n }"}, {"sha": "bd6cb4d21be51b653e54e6c42eb2148688175729", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=a6d8afd958e35cb0f424de8be11c42116133e23a", "patch": "@@ -6,6 +6,22 @@ fn f() -> usize {\n     42\n }\n \n+macro_rules! macro_plus_one {\n+    ($m: literal) => {\n+        for i in 0..$m + 1 {\n+            println!(\"{}\", i);\n+        }\n+    };\n+}\n+\n+macro_rules! macro_minus_one {\n+    ($m: literal) => {\n+        for i in 0..=$m - 1 {\n+            println!(\"{}\", i);\n+        }\n+    };\n+}\n+\n #[warn(clippy::range_plus_one)]\n #[warn(clippy::range_minus_one)]\n fn main() {\n@@ -39,4 +55,7 @@ fn main() {\n \n     let mut vec: Vec<()> = std::vec::Vec::new();\n     vec.drain(..);\n+\n+    macro_plus_one!(5);\n+    macro_minus_one!(5);\n }"}, {"sha": "0223696243b20c75e41e68840d3e05be1f3a83c7", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6d8afd958e35cb0f424de8be11c42116133e23a/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=a6d8afd958e35cb0f424de8be11c42116133e23a", "patch": "@@ -1,57 +1,57 @@\n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:15:14\n+  --> $DIR/range_plus_minus_one.rs:31:14\n    |\n LL |     for _ in 0..3 + 1 {}\n    |              ^^^^^^^^ help: use: `0..=3`\n    |\n    = note: `-D clippy::range-plus-one` implied by `-D warnings`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:18:14\n+  --> $DIR/range_plus_minus_one.rs:34:14\n    |\n LL |     for _ in 0..1 + 5 {}\n    |              ^^^^^^^^ help: use: `0..=5`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:21:14\n+  --> $DIR/range_plus_minus_one.rs:37:14\n    |\n LL |     for _ in 1..1 + 1 {}\n    |              ^^^^^^^^ help: use: `1..=1`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:27:14\n+  --> $DIR/range_plus_minus_one.rs:43:14\n    |\n LL |     for _ in 0..(1 + f()) {}\n    |              ^^^^^^^^^^^^ help: use: `0..=f()`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:31:13\n+  --> $DIR/range_plus_minus_one.rs:47:13\n    |\n LL |     let _ = ..=11 - 1;\n    |             ^^^^^^^^^ help: use: `..11`\n    |\n    = note: `-D clippy::range-minus-one` implied by `-D warnings`\n \n error: an exclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:32:13\n+  --> $DIR/range_plus_minus_one.rs:48:13\n    |\n LL |     let _ = ..=(11 - 1);\n    |             ^^^^^^^^^^^ help: use: `..11`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:33:13\n+  --> $DIR/range_plus_minus_one.rs:49:13\n    |\n LL |     let _ = (1..11 + 1);\n    |             ^^^^^^^^^^^ help: use: `(1..=11)`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:34:13\n+  --> $DIR/range_plus_minus_one.rs:50:13\n    |\n LL |     let _ = (f() + 1)..(f() + 1);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: use: `((f() + 1)..=f())`\n \n error: an inclusive range would be more readable\n-  --> $DIR/range_plus_minus_one.rs:38:14\n+  --> $DIR/range_plus_minus_one.rs:54:14\n    |\n LL |     for _ in 1..ONE + ONE {}\n    |              ^^^^^^^^^^^^ help: use: `1..=ONE`"}]}