{"sha": "f4f20c0663b686f76c5722fde481c83acf2dd1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZjIwYzA2NjNiNjg2Zjc2YzU3MjJmZGU0ODFjODNhY2YyZGQxZTk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-21T04:51:46Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-24T20:28:29Z"}, "message": "Reimplement `Usefulness::merge` in terms of a binop", "tree": {"sha": "f78c1e8a05a103f3b14c483b758d77d69e16c141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78c1e8a05a103f3b14c483b758d77d69e16c141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f20c0663b686f76c5722fde481c83acf2dd1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f20c0663b686f76c5722fde481c83acf2dd1e9", "html_url": "https://github.com/rust-lang/rust/commit/f4f20c0663b686f76c5722fde481c83acf2dd1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f20c0663b686f76c5722fde481c83acf2dd1e9/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5547105f6b030c3cfb42850213d0ad94726937a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5547105f6b030c3cfb42850213d0ad94726937a8", "html_url": "https://github.com/rust-lang/rust/commit/5547105f6b030c3cfb42850213d0ad94726937a8"}], "stats": {"total": 63, "additions": 24, "deletions": 39}, "files": [{"sha": "bb8213a98ac209bf37e0429be3e0f0617336c771", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 24, "deletions": 39, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f4f20c0663b686f76c5722fde481c83acf2dd1e9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f20c0663b686f76c5722fde481c83acf2dd1e9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=f4f20c0663b686f76c5722fde481c83acf2dd1e9", "patch": "@@ -696,9 +696,9 @@ impl<'tcx> Usefulness<'tcx> {\n         }\n     }\n \n-    /// When trying several branches and each returns a `Usefulness`, we need to combine the\n-    /// results together.\n-    fn merge(usefulnesses: impl Iterator<Item = Self>) -> Self {\n+    /// Combine usefulnesses from two branches. This is an associative operation and `NotUseful` is\n+    /// a unit.\n+    fn extend(&mut self, other: Self) {\n         // If we have detected some unreachable sub-branches, we only want to keep them when they\n         // were unreachable in _all_ branches. Eg. in the following, the last `true` is unreachable\n         // in the second branch of the first or-pattern, but not otherwise. Therefore we don't want\n@@ -709,54 +709,39 @@ impl<'tcx> Usefulness<'tcx> {\n         //     (false | true, false | true) => {}\n         // }\n         // ```\n-        // Here however we _do_ want to lint that the last `false` is unreachable. So we don't want\n-        // to intersect the spans that come directly from the or-pattern, since each branch of the\n-        // or-pattern brings a new disjoint pattern.\n+        // Here however we _do_ want to lint that the last `false` is unreachable. In order to\n+        // handle that correctly, each branch of an or-pattern marks the other branches as\n+        // unreachable (see `unsplit_or_pat`). That way, intersecting the results will correctly\n+        // identify unreachable sub-patterns.\n         // ```\n         // match None {\n         //     Some(false) => {}\n         //     None | Some(true | false) => {}\n         // }\n         // ```\n+        match (&mut *self, other) {\n+            (Useful(s), Useful(o)) => s.intersection_mut(&o),\n+            (UsefulWithWitness(s), UsefulWithWitness(o)) => s.extend(o),\n+            (_, NotUseful) => {}\n+            (NotUseful, other) => *self = other,\n+            (UsefulWithWitness(_), Useful(_)) | (Useful(_), UsefulWithWitness(_)) => unreachable!(),\n+        }\n+    }\n \n-        // Is `None` when no branch was useful. Will often be `Some(Spanset::new())` because the\n-        // sets are only non-empty in the presence of or-patterns.\n-        let mut unreachables: Option<SpanSet> = None;\n-        // Witnesses of usefulness, if any.\n-        let mut witnesses = Vec::new();\n-\n+    /// When trying several branches and each returns a `Usefulness`, we need to combine the\n+    /// results together.\n+    fn merge(usefulnesses: impl Iterator<Item = Self>) -> Self {\n+        let mut ret = NotUseful;\n         for u in usefulnesses {\n-            match u {\n-                Useful(spans) if spans.is_empty() => {\n+            ret.extend(u);\n+            if let Useful(spans) = &ret {\n+                if spans.is_empty() {\n                     // Once we reach the empty set, more intersections won't change the result.\n-                    return Useful(SpanSet::new());\n-                }\n-                Useful(spans) => {\n-                    if let Some(unreachables) = &mut unreachables {\n-                        if !unreachables.is_empty() {\n-                            unreachables.intersection_mut(&spans);\n-                        }\n-                        if unreachables.is_empty() {\n-                            return Useful(SpanSet::new());\n-                        }\n-                    } else {\n-                        unreachables = Some(spans);\n-                    }\n-                }\n-                NotUseful => {}\n-                UsefulWithWitness(wits) => {\n-                    witnesses.extend(wits);\n+                    return ret;\n                 }\n             }\n         }\n-\n-        if !witnesses.is_empty() {\n-            UsefulWithWitness(witnesses)\n-        } else if let Some(unreachables) = unreachables {\n-            Useful(unreachables)\n-        } else {\n-            NotUseful\n-        }\n+        ret\n     }\n \n     /// After calculating the usefulness for a branch of an or-pattern, call this to make this"}]}