{"sha": "c84a7abf8b2c5753179472464dc2baeb86c6fed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NGE3YWJmOGIyYzU3NTMxNzk0NzI0NjRkYzJiYWViODZjNmZlZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-15T04:34:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-15T04:34:14Z"}, "message": "Auto merge of #60775 - hellow554:no_bitrig, r=joshtriplett\n\nRemove bitrig support from rust\n\nResolves #60743\n\nusing `find` and `rg` I delete every occurence of \"bitrig\" in the sources, expect for the llvm submodule (is this correct?).\n\nThere's also this file https://github.com/rust-lang/rls/blob/5b8e99bb61958ca8abcb7c5eda70521726be1065/rls-analysis/test_data/rust-analysis/libstd-af9bacceee784405.json which contains a bitrig string in it. What to do with that?", "tree": {"sha": "44dd6c99672306e615f9ba4481e7ffb35aebdfac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44dd6c99672306e615f9ba4481e7ffb35aebdfac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84a7abf8b2c5753179472464dc2baeb86c6fed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84a7abf8b2c5753179472464dc2baeb86c6fed6", "html_url": "https://github.com/rust-lang/rust/commit/c84a7abf8b2c5753179472464dc2baeb86c6fed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84a7abf8b2c5753179472464dc2baeb86c6fed6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372be4f360ce42b1a10126a711189796f8440ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/372be4f360ce42b1a10126a711189796f8440ab4", "html_url": "https://github.com/rust-lang/rust/commit/372be4f360ce42b1a10126a711189796f8440ab4"}, {"sha": "cc314b066a2f1d688ec2f5dec1fa5cb01ca1ebb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc314b066a2f1d688ec2f5dec1fa5cb01ca1ebb0", "html_url": "https://github.com/rust-lang/rust/commit/cc314b066a2f1d688ec2f5dec1fa5cb01ca1ebb0"}], "stats": {"total": 384, "additions": 21, "deletions": 363}, "files": [{"sha": "1c2b882f66594a45254e24f2e75a12183c29d43a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -177,7 +177,6 @@ def default_build_triple():\n     # The goal here is to come up with the same triple as LLVM would,\n     # at least for the subset of platforms we're willing to target.\n     ostype_mapper = {\n-        'Bitrig': 'unknown-bitrig',\n         'Darwin': 'apple-darwin',\n         'DragonFly': 'unknown-dragonfly',\n         'FreeBSD': 'unknown-freebsd',"}, {"sha": "60911d917899f6f338da76cd30a96dfbadd470a4", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -113,7 +113,7 @@ pub fn gnu_target(target: &str) -> &str {\n }\n \n pub fn make(host: &str) -> PathBuf {\n-    if host.contains(\"bitrig\") || host.contains(\"dragonfly\") || host.contains(\"freebsd\")\n+    if host.contains(\"dragonfly\") || host.contains(\"freebsd\")\n         || host.contains(\"netbsd\") || host.contains(\"openbsd\")\n     {\n         PathBuf::from(\"gmake\")"}, {"sha": "b63701dbc0967d1209718f55b6511c86b8134961", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -44,7 +44,6 @@ cfg_if! {\n         }\n \n         #[cfg(any(target_os = \"dragonfly\",\n-                  target_os = \"bitrig\",\n                   target_os = \"netbsd\",\n                   target_os = \"openbsd\"))]\n         mod os {"}, {"sha": "9b34119fc00c9f9484f7aed38989d6b20003d410", "filename": "src/librustc_target/spec/bitrig_base.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1,16 +0,0 @@\n-use crate::spec::{TargetOptions, RelroLevel};\n-use std::default::Default;\n-\n-pub fn opts() -> TargetOptions {\n-    TargetOptions {\n-        dynamic_linking: true,\n-        executables: true,\n-        target_family: Some(\"unix\".to_string()),\n-        linker_is_gnu: true,\n-        has_rpath: true,\n-        position_independent_executables: true,\n-        relro_level: RelroLevel::Full,\n-\n-        .. Default::default()\n-    }\n-}"}, {"sha": "844edbb946a515f9899974e64ee1acecc79ef50d", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -47,7 +47,6 @@ mod android_base;\n mod apple_base;\n mod apple_ios_base;\n mod arm_base;\n-mod bitrig_base;\n mod cloudabi_base;\n mod dragonfly_base;\n mod freebsd_base;\n@@ -390,8 +389,6 @@ supported_targets! {\n     (\"i686-unknown-dragonfly\", i686_unknown_dragonfly),\n     (\"x86_64-unknown-dragonfly\", x86_64_unknown_dragonfly),\n \n-    (\"x86_64-unknown-bitrig\", x86_64_unknown_bitrig),\n-\n     (\"aarch64-unknown-openbsd\", aarch64_unknown_openbsd),\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),"}, {"sha": "999d93a7e60902d876692819bb78db70fdaa68a9", "filename": "src/librustc_target/spec/x86_64_unknown_bitrig.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1,23 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::bitrig_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.stack_probes = true;\n-\n-    Ok(Target {\n-        llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"64\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n-        arch: \"x86_64\".to_string(),\n-        target_os: \"bitrig\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n-    })\n-}"}, {"sha": "61399e0568cb10bf2ca8406a7c1af04ca88c6854", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -338,7 +338,6 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"debug_assertions\", None) => \"debug-assertions enabled\",\n                     (\"target_os\", Some(os)) => match &*os.as_str() {\n                         \"android\" => \"Android\",\n-                        \"bitrig\" => \"Bitrig\",\n                         \"dragonfly\" => \"DragonFly BSD\",\n                         \"emscripten\" => \"Emscripten\",\n                         \"freebsd\" => \"FreeBSD\","}, {"sha": "7a6c97ebaa226093156aadc472cc93f95e6d9254", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -20,8 +20,7 @@ fn main() {\n     } else if target.contains(\"netbsd\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n         println!(\"cargo:rustc-link-lib=rt\");\n-    } else if target.contains(\"dragonfly\") || target.contains(\"bitrig\") ||\n-              target.contains(\"openbsd\") {\n+    } else if target.contains(\"dragonfly\") || target.contains(\"openbsd\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n     } else if target.contains(\"solaris\") {\n         println!(\"cargo:rustc-link-lib=socket\");"}, {"sha": "260624a8bd8594945fde8d6923159bad3b31c7dc", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -851,7 +851,6 @@ pub mod consts {\n     /// - ios\n     /// - freebsd\n     /// - dragonfly\n-    /// - bitrig\n     /// - netbsd\n     /// - openbsd\n     /// - solaris"}, {"sha": "e7923e381f1407205c647012acf15c81aab40644", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -974,9 +974,9 @@ mod tests {\n         // s has been moved into the tsa call\n     }\n \n-    // FIXME: figure out why this fails on openbsd and bitrig and fix it\n+    // FIXME: figure out why this fails on openbsd and fix it\n     #[test]\n-    #[cfg(not(any(windows, target_os = \"openbsd\", target_os = \"bitrig\")))]\n+    #[cfg(not(any(windows, target_os = \"openbsd\")))]\n     fn to_socket_addr_str_bad() {\n         assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n     }"}, {"sha": "cdffa390223a2c48fa0a458d88bfcc3de3819686", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1595,9 +1595,9 @@ mod tests {\n         assert_eq!(format!(\"{:?}\", stream), compare);\n     }\n \n-    // FIXME: re-enabled bitrig/openbsd tests once their socket timeout code\n+    // FIXME: re-enabled openbsd tests once their socket timeout code\n     //        no longer has rounding errors.\n-    #[cfg_attr(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n+    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n     #[cfg_attr(target_env = \"sgx\", ignore)] // FIXME: https://github.com/fortanix/rust-sgx/issues/31\n     #[test]\n     fn timeouts() {"}, {"sha": "61d9149952ee5e2994119d13606c46f2b66fff0d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1024,9 +1024,9 @@ mod tests {\n         assert_eq!(format!(\"{:?}\", udpsock), compare);\n     }\n \n-    // FIXME: re-enabled bitrig/openbsd/netbsd tests once their socket timeout code\n+    // FIXME: re-enabled openbsd/netbsd tests once their socket timeout code\n     //        no longer has rounding errors.\n-    #[cfg_attr(any(target_os = \"bitrig\", target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n+    #[cfg_attr(any(target_os = \"netbsd\", target_os = \"openbsd\"), ignore)]\n     #[test]\n     fn timeouts() {\n         let addr = next_test_ip4();"}, {"sha": "b5c6903c41047df11320f8cce2d552b24f0f0452", "filename": "src/libstd/os/bitrig/fs.rs", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1,138 +0,0 @@\n-#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-\n-use crate::fs::Metadata;\n-use crate::sys_common::AsInner;\n-\n-#[allow(deprecated)]\n-use crate::os::bitrig::raw;\n-\n-/// OS-specific extensions to [`fs::Metadata`].\n-///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-pub trait MetadataExt {\n-    /// Gain a reference to the underlying `stat` structure which contains\n-    /// the raw information returned by the OS.\n-    ///\n-    /// The contents of the returned `stat` are **not** consistent across\n-    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n-    /// cross-Unix abstractions contained within the raw stat.\n-    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat;\n-\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_dev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ino(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mode(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_nlink(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_uid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_gid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_rdev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_size(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_birthtime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_birthtime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blksize(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blocks(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_flags(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_gen(&self) -> u32;\n-}\n-\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-impl MetadataExt for Metadata {\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat\n-                                          as *const raw::stat)\n-        }\n-    }\n-    fn st_dev(&self) -> u64 {\n-        self.as_inner().as_inner().st_dev as u64\n-    }\n-    fn st_ino(&self) -> u64 {\n-        self.as_inner().as_inner().st_ino as u64\n-    }\n-    fn st_mode(&self) -> u32 {\n-        self.as_inner().as_inner().st_mode as u32\n-    }\n-    fn st_nlink(&self) -> u64 {\n-        self.as_inner().as_inner().st_nlink as u64\n-    }\n-    fn st_uid(&self) -> u32 {\n-        self.as_inner().as_inner().st_uid as u32\n-    }\n-    fn st_gid(&self) -> u32 {\n-        self.as_inner().as_inner().st_gid as u32\n-    }\n-    fn st_rdev(&self) -> u64 {\n-        self.as_inner().as_inner().st_rdev as u64\n-    }\n-    fn st_size(&self) -> u64 {\n-        self.as_inner().as_inner().st_size as u64\n-    }\n-    fn st_atime(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime as i64\n-    }\n-    fn st_atime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime_nsec as i64\n-    }\n-    fn st_mtime(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime as i64\n-    }\n-    fn st_mtime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime_nsec as i64\n-    }\n-    fn st_ctime(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime as i64\n-    }\n-    fn st_ctime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime_nsec as i64\n-    }\n-    fn st_birthtime(&self) -> i64 {\n-        self.as_inner().as_inner().st_birthtime as i64\n-    }\n-    fn st_birthtime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_birthtime_nsec as i64\n-    }\n-    fn st_blksize(&self) -> u64 {\n-        self.as_inner().as_inner().st_blksize as u64\n-    }\n-    fn st_blocks(&self) -> u64 {\n-        self.as_inner().as_inner().st_blocks as u64\n-    }\n-    fn st_gen(&self) -> u32 {\n-        self.as_inner().as_inner().st_gen as u32\n-    }\n-    fn st_flags(&self) -> u32 {\n-        self.as_inner().as_inner().st_flags as u32\n-    }\n-}"}, {"sha": "0bc105bb2b40a34db3612d04a435715358ca0350", "filename": "src/libstd/os/bitrig/mod.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1,6 +0,0 @@\n-//! Bitrig-specific definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-\n-pub mod raw;\n-pub mod fs;"}, {"sha": "c966d5a8e5b4938caaa4748407e771b04fd332a2", "filename": "src/libstd/os/bitrig/raw.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372be4f360ce42b1a10126a711189796f8440ab4/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fraw.rs?ref=372be4f360ce42b1a10126a711189796f8440ab4", "patch": "@@ -1,71 +0,0 @@\n-//! Bitrig-specific raw type definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n-#![allow(deprecated)]\n-\n-use crate::os::raw::c_long;\n-use crate::os::unix::raw::{uid_t, gid_t};\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n-\n-#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub type pthread_t = usize;\n-\n-#[repr(C)]\n-#[derive(Clone)]\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub struct stat {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mode: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_dev: i32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ino: u64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_nlink: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_uid: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gid: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_rdev: i32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_atime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime: u64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_mtime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_ctime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_size: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blocks: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_blksize: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_flags: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_gen: u32,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub st_birthtime_nsec: i64,\n-}"}, {"sha": "44cbc180b8b01563d280ff0e9958d9abd86cb15d", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -39,7 +39,6 @@ cfg_if! {\n }\n \n #[cfg(target_os = \"android\")]    pub mod android;\n-#[cfg(target_os = \"bitrig\")]     pub mod bitrig;\n #[cfg(target_os = \"dragonfly\")]  pub mod dragonfly;\n #[cfg(target_os = \"freebsd\")]    pub mod freebsd;\n #[cfg(target_os = \"haiku\")]      pub mod haiku;"}, {"sha": "6ba947d4598b1da1163214923bbf24dbacc854c8", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -51,7 +51,6 @@ impl DoubleEndedIterator for Args {\n           target_os = \"android\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\","}, {"sha": "891013406a1699cead6ea8630ba4ba89a96b1e58", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -53,17 +53,6 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n-#[cfg(target_os = \"bitrig\")]\n-pub mod os {\n-    pub const FAMILY: &str = \"unix\";\n-    pub const OS: &str = \"bitrig\";\n-    pub const DLL_PREFIX: &str = \"lib\";\n-    pub const DLL_SUFFIX: &str = \".so\";\n-    pub const DLL_EXTENSION: &str = \"so\";\n-    pub const EXE_SUFFIX: &str = \"\";\n-    pub const EXE_EXTENSION: &str = \"\";\n-}\n-\n #[cfg(target_os = \"netbsd\")]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "3ccb0a1b1abc7c547b023be8dc0a67c0f24fd55e", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -32,12 +32,12 @@ use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n           target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"haiku\", target_os = \"bitrig\"))]\n+          target_os = \"haiku\"))]\n use libc::MSG_NOSIGNAL;\n #[cfg(not(any(target_os = \"linux\", target_os = \"android\",\n               target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"haiku\", target_os = \"bitrig\")))]\n+              target_os = \"haiku\")))]\n const MSG_NOSIGNAL: libc::c_int = 0x0;\n \n fn sun_path_offset() -> usize {"}, {"sha": "cc1f0790d4334fbb3266a6abe70e942eb9d5aa32", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -147,8 +147,7 @@ impl FileAttr {\n         }))\n     }\n \n-    #[cfg(any(target_os = \"bitrig\",\n-              target_os = \"freebsd\",\n+    #[cfg(any(target_os = \"freebsd\",\n               target_os = \"openbsd\",\n               target_os = \"macos\",\n               target_os = \"ios\"))]\n@@ -159,8 +158,7 @@ impl FileAttr {\n         }))\n     }\n \n-    #[cfg(not(any(target_os = \"bitrig\",\n-                  target_os = \"freebsd\",\n+    #[cfg(not(any(target_os = \"freebsd\",\n                   target_os = \"openbsd\",\n                   target_os = \"macos\",\n                   target_os = \"ios\")))]\n@@ -355,7 +353,6 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"openbsd\",\n-              target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"dragonfly\"))]\n     pub fn ino(&self) -> u64 {\n@@ -367,8 +364,7 @@ impl DirEntry {\n               target_os = \"netbsd\",\n               target_os = \"openbsd\",\n               target_os = \"freebsd\",\n-              target_os = \"dragonfly\",\n-              target_os = \"bitrig\"))]\n+              target_os = \"dragonfly\"))]\n     fn name_bytes(&self) -> &[u8] {\n         use crate::slice;\n         unsafe {"}, {"sha": "c2b264ff8de1154788c3cbce34ff466732ba0c30", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -5,7 +5,6 @@ use crate::io::ErrorKind;\n #[cfg(any(rustdoc, target_os = \"linux\"))] pub use crate::os::linux as platform;\n \n #[cfg(all(not(rustdoc), target_os = \"android\"))]   pub use crate::os::android as platform;\n-#[cfg(all(not(rustdoc), target_os = \"bitrig\"))]    pub use crate::os::bitrig as platform;\n #[cfg(all(not(rustdoc), target_os = \"dragonfly\"))] pub use crate::os::dragonfly as platform;\n #[cfg(all(not(rustdoc), target_os = \"freebsd\"))]   pub use crate::os::freebsd as platform;\n #[cfg(all(not(rustdoc), target_os = \"haiku\"))]     pub use crate::os::haiku as platform;"}, {"sha": "dad19eabf7db79bd87ba8827dc8e45f2ab1c9bf4", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -33,8 +33,7 @@ extern {\n                    target_os = \"fuchsia\",\n                    target_os = \"l4re\"),\n                link_name = \"__errno_location\")]\n-    #[cfg_attr(any(target_os = \"bitrig\",\n-                   target_os = \"netbsd\",\n+    #[cfg_attr(any(target_os = \"netbsd\",\n                    target_os = \"openbsd\",\n                    target_os = \"android\",\n                    target_os = \"hermit\",\n@@ -257,7 +256,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     sysctl().or_else(|_| procfs())\n }\n \n-#[cfg(any(target_os = \"bitrig\", target_os = \"openbsd\"))]\n+#[cfg(target_os = \"openbsd\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n         let mut mib = [libc::CTL_KERN,"}, {"sha": "fe1095fa0c2f65596fba38711f38cbb1b43b0fd4", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -25,7 +25,6 @@ impl Drop for Handler {\n \n #[cfg(any(target_os = \"linux\",\n           target_os = \"macos\",\n-          target_os = \"bitrig\",\n           target_os = \"dragonfly\",\n           target_os = \"freebsd\",\n           target_os = \"solaris\",\n@@ -139,7 +138,6 @@ mod imp {\n \n     #[cfg(any(target_os = \"linux\",\n               target_os = \"macos\",\n-              target_os = \"bitrig\",\n               target_os = \"freebsd\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\",\n@@ -185,7 +183,6 @@ mod imp {\n \n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"macos\",\n-              target_os = \"bitrig\",\n               target_os = \"dragonfly\",\n               target_os = \"freebsd\",\n               target_os = \"solaris\","}, {"sha": "f4a1783ce8903d202fe5cafe2d1e8b25148caa3c", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -99,7 +99,6 @@ impl Thread {\n \n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n-              target_os = \"bitrig\",\n               target_os = \"openbsd\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n@@ -189,7 +188,6 @@ impl Drop for Thread {\n #[cfg(all(not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n           not(target_os = \"freebsd\"),\n           not(target_os = \"macos\"),\n-          not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n           not(target_os = \"openbsd\"),\n           not(target_os = \"solaris\")))]\n@@ -205,7 +203,6 @@ pub mod guard {\n #[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n           target_os = \"freebsd\",\n           target_os = \"macos\",\n-          target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\",\n           target_os = \"solaris\"))]\n@@ -236,16 +233,15 @@ pub mod guard {\n         Some(stackaddr as *mut libc::c_void)\n     }\n \n-    #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n+    #[cfg(target_os = \"openbsd\")]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut current_stack: libc::stack_t = crate::mem::zeroed();\n         assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(),\n                                              &mut current_stack), 0);\n \n-        let extra = if cfg!(target_os = \"bitrig\") {3} else {1} * PAGE_SIZE;\n         let stackaddr = if libc::pthread_main_np() == 1 {\n             // main thread\n-            current_stack.ss_sp as usize - current_stack.ss_size + extra\n+            current_stack.ss_sp as usize - current_stack.ss_size + PAGE_SIZE\n         } else {\n             // new thread\n             current_stack.ss_sp as usize - current_stack.ss_size\n@@ -343,7 +339,6 @@ pub mod guard {\n     }\n \n     #[cfg(any(target_os = \"macos\",\n-              target_os = \"bitrig\",\n               target_os = \"openbsd\",\n               target_os = \"solaris\"))]\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "391f670346f2ad92e1e63e98f8edf0b5dac44551", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -37,12 +37,12 @@ use crate::sys::net::netc::IPV6_DROP_MEMBERSHIP;\n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n           target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"haiku\", target_os = \"bitrig\"))]\n+          target_os = \"haiku\"))]\n use libc::MSG_NOSIGNAL;\n #[cfg(not(any(target_os = \"linux\", target_os = \"android\",\n               target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"haiku\", target_os = \"bitrig\")))]\n+              target_os = \"haiku\")))]\n const MSG_NOSIGNAL: c_int = 0x0;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "c6afa90e4ee614d5c85d2961c8b1bff7424d955f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1289,7 +1289,6 @@ fn get_concurrency() -> usize {\n     #[cfg(any(\n         target_os = \"freebsd\",\n         target_os = \"dragonfly\",\n-        target_os = \"bitrig\",\n         target_os = \"netbsd\"\n     ))]\n     fn num_cpus() -> usize {"}, {"sha": "70f591e653baf4ae139625a2ca253f77e221bc59", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -26,8 +26,6 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=c++abi\");\n     } else if target.contains(\"solaris\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"bitrig\") {\n-        println!(\"cargo:rustc-link-lib=c++abi\");\n     } else if target.contains(\"dragonfly\") {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n     } else if target.contains(\"windows-gnu\") {"}, {"sha": "52543297ead647f1f6874204e3e0ec70b3b66b9f", "filename": "src/test/codegen/dllimports/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,6 +1,5 @@\n // This test is for *-windows-msvc only.\n // ignore-android\n-// ignore-bitrig\n // ignore-cloudabi\n // ignore-dragonfly\n // ignore-emscripten"}, {"sha": "f2fd297dc70f77d37e24d61217575f35f9980b39", "filename": "src/test/codegen/panic-abort-windows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,6 +1,5 @@\n // This test is for *-windows-msvc only.\n // ignore-android\n-// ignore-bitrig\n // ignore-cloudabi\n // ignore-dragonfly\n // ignore-emscripten"}, {"sha": "0c0e331da1d5aaa47c3365486c46e05377c0487c", "filename": "src/test/run-make-fulldeps/issue-14500/Makefile", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -6,10 +6,6 @@\n # is compiled with LTO, it shouldn't strip the symbol from `foo`, and that's the\n # only way that `foo.c` will successfully compile.\n \n-ifeq ($(UNAME),Bitrig)\n-\tEXTRACFLAGS := -lc $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n-endif\n-\n all:\n \t$(RUSTC) foo.rs --crate-type=rlib\n \t$(RUSTC) bar.rs --crate-type=staticlib -C lto -L. -o $(TMPDIR)/libbar.a"}, {"sha": "3b4df73cdfd6dbcf8f0d59f5cff9b48e51d5aa5d", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -88,10 +88,6 @@ else\n ifeq ($(UNAME),FreeBSD)\n \tEXTRACFLAGS := -lm -lpthread -lgcc_s\n else\n-ifeq ($(UNAME),Bitrig)\n-\tEXTRACFLAGS := -lm -lpthread\n-\tEXTRACXXFLAGS := -lc++ -lc++abi\n-else\n ifeq ($(UNAME),SunOS)\n \tEXTRACFLAGS := -lm -lpthread -lposix4 -lsocket -lresolv\n else\n@@ -106,7 +102,6 @@ endif\n endif\n endif\n endif\n-endif\n \n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))"}, {"sha": "838b1a2719b9f5551bbd2970f60bf57e71a4a662", "filename": "src/test/run-make-fulldeps/use-extern-for-plugins/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -2,7 +2,6 @@\n \n # ignore-freebsd\n # ignore-openbsd\n-# ignore-bitrig\n # ignore-sunos\n \n HOST := $(shell $(RUSTC) -vV | grep 'host:' | sed 's/host: //')"}, {"sha": "279a30d6c2eebcb7645f8820129016de73ef346b", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -32,7 +32,6 @@ macro_rules! dump_and_die {\n                     all(target_os = \"linux\", target_arch = \"arm\"),\n                     target_os = \"freebsd\",\n                     target_os = \"dragonfly\",\n-                    target_os = \"bitrig\",\n                     target_os = \"openbsd\")) {\n             // skip these platforms as this support isn't implemented yet.\n         } else {"}, {"sha": "8b7025b7be7daea4368317a84a43181e4506de2e", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -18,9 +18,6 @@ mod hello;\n #[cfg(target_os = \"dragonfly\")]\n mod hello;\n \n-#[cfg(target_os = \"bitrig\")]\n-mod hello;\n-\n #[cfg(target_os = \"android\")]\n mod hello;\n "}, {"sha": "79759daba501cfdeef1f9816075554c527e0cd42", "filename": "src/test/run-pass/functions-closures/parallel-codegen-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -6,7 +6,6 @@\n // Tests parallel codegen - this can fail if the symbol for the anonymous\n // closure in `sum` pollutes the second codegen unit from the first.\n \n-// ignore-bitrig\n // compile-flags: -C codegen_units=2\n \n #![feature(iter_arith)]"}, {"sha": "ac9fb94c37507c6f82a9b181eba6276e1232fda2", "filename": "src/test/run-pass/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-alignment.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -40,18 +40,6 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"bitrig\")]\n-mod m {\n-    #[main]\n-    #[cfg(target_arch = \"x86_64\")]\n-    pub fn main() {\n-        unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n-        }\n-    }\n-}\n-\n #[cfg(target_os = \"windows\")]\n mod m {\n     #[main]"}, {"sha": "02bbab30e9c6e55a97e01ecb09b9b1da185c3e2e", "filename": "src/test/run-pass/sepcomp/sepcomp-cci.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-cci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-cci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-cci.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n // aux-build:sepcomp_cci_lib.rs\n "}, {"sha": "c4ccf23c47ab44f386714be3c68315a11abeae82", "filename": "src/test/run-pass/sepcomp/sepcomp-extern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-extern.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n // aux-build:sepcomp-extern-lib.rs\n "}, {"sha": "f56769e2b8c6d2baebd36559c88590831d42bffa", "filename": "src/test/run-pass/sepcomp/sepcomp-fns-backwards.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns-backwards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns-backwards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns-backwards.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n \n // Test references to items that haven't been codegened yet."}, {"sha": "a432c89606e339dab939666f1de5f1280660f318", "filename": "src/test/run-pass/sepcomp/sepcomp-fns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-fns.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n \n // Test basic separate compilation functionality.  The functions should be able"}, {"sha": "5457c8a0ae97d29be2b715cb57f4128d5d9e0478", "filename": "src/test/run-pass/sepcomp/sepcomp-statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-statics.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n \n // Test references to static items across compilation units."}, {"sha": "50a4e043943f0d0d9c1c9c55ed68aa0c078e55d7", "filename": "src/test/run-pass/sepcomp/sepcomp-unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp%2Fsepcomp-unwind.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-bitrig\n // compile-flags: -C codegen-units=3\n // ignore-emscripten no threads support\n "}, {"sha": "07e60114018929b6694724f30891b994c7ec7b77", "filename": "src/test/run-pass/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Frec-align-u64.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -55,15 +55,6 @@ mod m {\n     }\n }\n \n-#[cfg(target_os = \"bitrig\")]\n-mod m {\n-    #[cfg(target_arch = \"x86_64\")]\n-    pub mod m {\n-        pub fn align() -> usize { 8 }\n-        pub fn size() -> usize { 16 }\n-    }\n-}\n-\n #[cfg(target_os = \"windows\")]\n mod m {\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "d4476ab0a310f02862b45737c7b5fe77b7d73420", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -1,5 +1,4 @@\n // ignore-android needs extra network permissions\n-// ignore-bitrig system ulimit (Too many open files)\n // ignore-cloudabi no global network namespace access\n // ignore-emscripten no threads or sockets support\n // ignore-netbsd system ulimit (Too many open files)"}, {"sha": "1b6ffc4c2bfdac4fc16bb37596f5a0a3661d2647", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -23,7 +23,6 @@ pub fn main() {\n }\n \n #[cfg(any(target_os = \"android\",\n-          target_os = \"bitrig\",\n           target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\","}, {"sha": "b335fe3ae185a270d17057dcc7adfb2781c9d215", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -2217,9 +2217,7 @@ impl<'test> TestCx<'test> {\n \n     fn charset() -> &'static str {\n         // FreeBSD 10.1 defaults to GDB 6.1.1 which doesn't support \"auto\" charset\n-        if cfg!(target_os = \"bitrig\") {\n-            \"auto\"\n-        } else if cfg!(target_os = \"freebsd\") {\n+        if cfg!(target_os = \"freebsd\") {\n             \"ISO-8859-1\"\n         } else {\n             \"UTF-8\"\n@@ -2670,8 +2668,7 @@ impl<'test> TestCx<'test> {\n         create_dir_all(&tmpdir).unwrap();\n \n         let host = &self.config.host;\n-        let make = if host.contains(\"bitrig\")\n-            || host.contains(\"dragonfly\")\n+        let make = if host.contains(\"dragonfly\")\n             || host.contains(\"freebsd\")\n             || host.contains(\"netbsd\")\n             || host.contains(\"openbsd\")"}, {"sha": "8caf5ca00f5053638f6ded0bfcdf298c814d325f", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84a7abf8b2c5753179472464dc2baeb86c6fed6/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=c84a7abf8b2c5753179472464dc2baeb86c6fed6", "patch": "@@ -9,7 +9,6 @@ use log::*;\n const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"android\", \"android\"),\n     (\"androideabi\", \"android\"),\n-    (\"bitrig\", \"bitrig\"),\n     (\"cloudabi\", \"cloudabi\"),\n     (\"cuda\", \"cuda\"),\n     (\"darwin\", \"macos\"),"}]}