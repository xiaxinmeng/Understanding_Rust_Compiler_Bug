{"sha": "a3b84ad197fb209d903857df747af3ca0a1f2c25", "node_id": "C_kwDOAAsO6NoAKGEzYjg0YWQxOTdmYjIwOWQ5MDM4NTdkZjc0N2FmM2NhMGExZjJjMjU", "commit": {"author": {"name": "Lamb", "email": "lamb@ltow.me", "date": "2022-01-10T21:01:23Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-08-10T16:55:41Z"}, "message": "Check if extern crate enum has non exhaustive variant when cast", "tree": {"sha": "12715823556e30f8875e801e994b09a36e0b7997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12715823556e30f8875e801e994b09a36e0b7997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b84ad197fb209d903857df747af3ca0a1f2c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b84ad197fb209d903857df747af3ca0a1f2c25", "html_url": "https://github.com/rust-lang/rust/commit/a3b84ad197fb209d903857df747af3ca0a1f2c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b84ad197fb209d903857df747af3ca0a1f2c25/comments", "author": null, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1603a70f82240ba2d27f72f964e36614d7620ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1603a70f82240ba2d27f72f964e36614d7620ad3", "html_url": "https://github.com/rust-lang/rust/commit/1603a70f82240ba2d27f72f964e36614d7620ad3"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "88bce06297bdbebe9bb9a0014e136b475b343bdf", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3b84ad197fb209d903857df747af3ca0a1f2c25/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b84ad197fb209d903857df747af3ca0a1f2c25/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=a3b84ad197fb209d903857df747af3ca0a1f2c25", "patch": "@@ -32,6 +32,7 @@ use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n use crate::type_error_struct;\n+use hir::def_id::LOCAL_CRATE;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -40,7 +41,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -173,6 +174,7 @@ pub enum CastError {\n     /// or \"a length\". If this argument is None, then the metadata is unknown, for example,\n     /// when we're typechecking a type parameter with a ?Sized bound.\n     IntToFatCast(Option<&'static str>),\n+    ForeignNonExhaustiveAdt,\n }\n \n impl From<ErrorGuaranteed> for CastError {\n@@ -591,6 +593,17 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 }\n                 err.emit();\n             }\n+            CastError::ForeignNonExhaustiveAdt => {\n+                make_invalid_casting_error(\n+                    fcx.tcx.sess,\n+                    self.span,\n+                    self.expr_ty,\n+                    self.cast_ty,\n+                    fcx,\n+                )\n+                .note(\"cannot cast a non-exhaustive enum defined in another crate\")\n+                .emit();\n+            }\n         }\n     }\n \n@@ -789,6 +802,14 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             _ => return Err(CastError::NonScalar),\n         };\n \n+        if let ty::Adt(adt_def, _) = *self.expr_ty.kind() {\n+            if adt_def.did().krate != LOCAL_CRATE {\n+                if adt_def.variants().iter().any(VariantDef::is_field_list_non_exhaustive) {\n+                    return Err(CastError::ForeignNonExhaustiveAdt);\n+                }\n+            }\n+        }\n+\n         match (t_from, t_cast) {\n             // These types have invariants! can't cast into them.\n             (_, Int(CEnum) | FnPtr) => Err(CastError::NonScalar),"}, {"sha": "5dce8180f59206ecd1968ebdb635cdacee400c36", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum-as-cast.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b84ad197fb209d903857df747af3ca0a1f2c25/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b84ad197fb209d903857df747af3ca0a1f2c25/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs?ref=a3b84ad197fb209d903857df747af3ca0a1f2c25", "patch": "@@ -1,17 +1,11 @@\n // aux-build:enums.rs\n-// run-pass\n \n extern crate enums;\n \n use enums::FieldLessWithNonExhaustiveVariant;\n \n fn main() {\n     let e = FieldLessWithNonExhaustiveVariant::default();\n-    // FIXME: https://github.com/rust-lang/rust/issues/91161\n-    // This `as` cast *should* be an error, since it would fail\n-    // if the non-exhaustive variant got fields.  But today it\n-    // doesn't.  The fix for that will update this test to\n-    // show an error (and not be run-pass any more).\n-    let d = e as u8;\n+    let d = e as u8; //~ ERROR casting `FieldLessWithNonExhaustiveVariant` as `u8` is invalid [E0606]\n     assert_eq!(d, 0);\n }"}, {"sha": "c5f0105296fffff2a11b0fb44ea7174cb9a32b00", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum-as-cast.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3b84ad197fb209d903857df747af3ca0a1f2c25/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3b84ad197fb209d903857df747af3ca0a1f2c25/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.stderr?ref=a3b84ad197fb209d903857df747af3ca0a1f2c25", "patch": "@@ -0,0 +1,11 @@\n+error[E0606]: casting `FieldLessWithNonExhaustiveVariant` as `u8` is invalid\n+  --> $DIR/enum-as-cast.rs:9:13\n+   |\n+LL |     let d = e as u8;\n+   |             ^^^^^^^\n+   |\n+   = note: cannot cast a non-exhaustive enum defined in another crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0606`."}]}