{"sha": "9a6d92c1d706af14da336892e8d5148c3d3859ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNmQ5MmMxZDcwNmFmMTRkYTMzNjg5MmU4ZDUxNDhjM2QzODU5ZWU=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-02T22:52:06Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-13T19:52:16Z"}, "message": "Replace `extern mod` with `extern crate`\n\nThis patch adds a new keyword `crate` which is intended to replace mod\nin the context of `extern mod` as part of the issue #9880. The patch\ndoesn't replace all `extern mod` cases since it is necessary to first\npush a new snapshot 0.\n\nThe implementation could've been less invasive than this. However I\npreferred to take this chance to split the `parse_item_foreign_mod`\nmethod and pull the `extern crate` part out of there, hence the new\nmethod `parse_item_foreign_crate`.", "tree": {"sha": "83d1384905d7086cf92a78fb6a8d5e9af9b102e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d1384905d7086cf92a78fb6a8d5e9af9b102e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6d92c1d706af14da336892e8d5148c3d3859ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6d92c1d706af14da336892e8d5148c3d3859ee", "html_url": "https://github.com/rust-lang/rust/commit/9a6d92c1d706af14da336892e8d5148c3d3859ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6d92c1d706af14da336892e8d5148c3d3859ee/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968633b60ad7f2fd0c5663e92b06f2c9d21964a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/968633b60ad7f2fd0c5663e92b06f2c9d21964a8", "html_url": "https://github.com/rust-lang/rust/commit/968633b60ad7f2fd0c5663e92b06f2c9d21964a8"}], "stats": {"total": 255, "additions": 150, "deletions": 105}, "files": [{"sha": "15608a0f28e9ac72dbd76c981706d6c2a6b22a53", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 81, "deletions": 79, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9a6d92c1d706af14da336892e8d5148c3d3859ee", "patch": "@@ -866,7 +866,10 @@ impl Parser {\n \n         */\n \n-        let opt_abis = self.parse_opt_abis();\n+        let opt_abis = if self.eat_keyword(keywords::Extern) {\n+            self.parse_opt_abis()\n+        } else { None };\n+\n         let abis = opt_abis.unwrap_or(AbiSet::Rust());\n         let purity = self.parse_unsafety();\n         self.expect_keyword(keywords::Fn);\n@@ -4308,91 +4311,78 @@ impl Parser {\n         }\n     }\n \n-    // parse extern foo; or extern mod foo { ... } or extern { ... }\n-    fn parse_item_foreign_mod(&mut self,\n-                              lo: BytePos,\n-                              opt_abis: Option<AbiSet>,\n-                              visibility: Visibility,\n-                              attrs: ~[Attribute],\n-                              items_allowed: bool)\n-                              -> ItemOrViewItem {\n-        let mut must_be_named_mod = false;\n-        if self.is_keyword(keywords::Mod) {\n-            must_be_named_mod = true;\n-            self.expect_keyword(keywords::Mod);\n-        } else if self.token != token::LBRACE {\n-            let token_str = self.this_token_to_str();\n-            self.span_fatal(self.span,\n-                            format!(\"expected `\\\\{` or `mod` but found `{}`\",\n-                                    token_str))\n-        }\n+    /// Parse extern crate links\n+    ///\n+    /// # Example\n+    ///\n+    /// extern crate extra;\n+    /// extern crate foo = \"bar\";\n+    fn parse_item_extern_crate(&mut self,\n+                                lo: BytePos,\n+                                visibility: Visibility,\n+                                attrs: ~[Attribute])\n+                                -> ItemOrViewItem {\n \n-        let (named, maybe_path, ident) = match self.token {\n+        let (maybe_path, ident) = match self.token {\n             token::IDENT(..) => {\n                 let the_ident = self.parse_ident();\n+                self.expect_one_of(&[], &[token::EQ, token::SEMI]);\n                 let path = if self.token == token::EQ {\n                     self.bump();\n                     Some(self.parse_str())\n-                }\n-                else { None };\n-                (true, path, the_ident)\n+                } else {None};\n+\n+                self.expect(&token::SEMI);\n+                (path, the_ident)\n             }\n             _ => {\n-                if must_be_named_mod {\n-                    let token_str = self.this_token_to_str();\n-                    self.span_fatal(self.span,\n-                                    format!(\"expected foreign module name but \\\n-                                             found `{}`\",\n-                                            token_str))\n-                }\n-\n-                (false, None,\n-                 special_idents::clownshoes_foreign_mod)\n+                let token_str = self.this_token_to_str();\n+                self.span_fatal(self.span,\n+                                format!(\"expected extern crate name but found `{}`\",\n+                                        token_str));\n             }\n         };\n \n-        // extern mod foo { ... } or extern { ... }\n-        if items_allowed && self.eat(&token::LBRACE) {\n-            // `extern mod foo { ... }` is obsolete.\n-            if named {\n-                self.obsolete(self.last_span, ObsoleteNamedExternModule);\n-            }\n-\n-            let abis = opt_abis.unwrap_or(AbiSet::C());\n+        IoviViewItem(ast::ViewItem {\n+                node: ViewItemExternMod(ident, maybe_path, ast::DUMMY_NODE_ID),\n+                attrs: attrs,\n+                vis: visibility,\n+                span: mk_sp(lo, self.last_span.hi)\n+            })\n+    }\n \n-            let (inner, next) = self.parse_inner_attrs_and_next();\n-            let m = self.parse_foreign_mod_items(abis, next);\n-            self.expect(&token::RBRACE);\n+    /// Parse `extern` for foreign ABIs\n+    /// modules.\n+    ///\n+    /// `extern` is expected to have been\n+    /// consumed before calling this method\n+    ///\n+    /// # Examples:\n+    ///\n+    /// extern \"C\" {}\n+    /// extern {}\n+    fn parse_item_foreign_mod(&mut self,\n+                              lo: BytePos,\n+                              opt_abis: Option<AbiSet>,\n+                              visibility: Visibility,\n+                              attrs: ~[Attribute])\n+                              -> ItemOrViewItem {\n \n-            let item = self.mk_item(lo,\n-                                    self.last_span.hi,\n-                                    ident,\n-                                    ItemForeignMod(m),\n-                                    visibility,\n-                                    maybe_append(attrs, Some(inner)));\n-            return IoviItem(item);\n-        }\n+        self.expect(&token::LBRACE);\n \n-        if opt_abis.is_some() {\n-            self.span_err(self.span, \"an ABI may not be specified here\");\n-        }\n+        let abis = opt_abis.unwrap_or(AbiSet::C());\n \n+        let (inner, next) = self.parse_inner_attrs_and_next();\n+        let m = self.parse_foreign_mod_items(abis, next);\n+        self.expect(&token::RBRACE);\n \n-        if self.token == token::LPAREN {\n-            // `extern mod foo (name = \"bar\"[,vers = \"version\"]) is obsolete,\n-            // `extern mod foo = \"bar#[version]\";` should be used.\n-            // Parse obsolete options to avoid wired parser errors\n-            self.parse_optional_meta();\n-            self.obsolete(self.span, ObsoleteExternModAttributesInParens);\n-        }\n-        // extern mod foo;\n-        self.expect(&token::SEMI);\n-        IoviViewItem(ast::ViewItem {\n-            node: ViewItemExternMod(ident, maybe_path, ast::DUMMY_NODE_ID),\n-            attrs: attrs,\n-            vis: visibility,\n-            span: mk_sp(lo, self.last_span.hi)\n-        })\n+        let item = self.mk_item(lo,\n+                                self.last_span.hi,\n+                                special_idents::clownshoes_foreign_mod,\n+                                ItemForeignMod(m),\n+                                visibility,\n+                                maybe_append(attrs, Some(inner)));\n+        return IoviItem(item);\n     }\n \n     // parse type Foo = Bar;\n@@ -4504,10 +4494,6 @@ impl Parser {\n     // Parses a string as an ABI spec on an extern type or module. Consumes\n     // the `extern` keyword, if one is found.\n     fn parse_opt_abis(&mut self) -> Option<AbiSet> {\n-        if !self.eat_keyword(keywords::Extern) {\n-            return None\n-        }\n-\n         match self.token {\n             token::LIT_STR(s)\n             | token::LIT_STR_RAW(s, _) => {\n@@ -4585,7 +4571,20 @@ impl Parser {\n             });\n         }\n         // either a view item or an item:\n-        if self.is_keyword(keywords::Extern) {\n+        if self.eat_keyword(keywords::Extern) {\n+            let next_is_mod = self.eat_keyword(keywords::Mod);\n+\n+            if next_is_mod || self.eat_keyword(keywords::Crate) {\n+                // NOTE(flaper87): Uncomment this when this changes gets into stage0\n+                //\n+                // if next_is_mod {\n+                //    self.span_err(self.span,\n+                //                   format!(\"`extern mod` is obsolete, use `extern crate` instead \\\n+                //                           to refer to external crates.\"))\n+                // }\n+                return self.parse_item_extern_crate(lo, visibility, attrs);\n+            }\n+\n             let opt_abis = self.parse_opt_abis();\n \n             if self.eat_keyword(keywords::Fn) {\n@@ -4600,12 +4599,15 @@ impl Parser {\n                                         visibility,\n                                         maybe_append(attrs, extra_attrs));\n                 return IoviItem(item);\n-            } else  {\n-                // EXTERN MODULE ITEM (IoviViewItem)\n-                return self.parse_item_foreign_mod(lo, opt_abis, visibility, attrs,\n-                                                   true);\n+            } else if self.token == token::LBRACE {\n+                return self.parse_item_foreign_mod(lo, opt_abis, visibility, attrs);\n             }\n+\n+            let token_str = self.this_token_to_str();\n+            self.span_fatal(self.span,\n+                            format!(\"expected `\\\\{` or `fn` but found `{}`\", token_str));\n         }\n+\n         // the rest are all guaranteed to be items:\n         if self.is_keyword(keywords::Static) {\n             // STATIC ITEM"}, {"sha": "423ddb828083c1cd0276f37b3e1c5851268875ba", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9a6d92c1d706af14da336892e8d5148c3d3859ee", "patch": "@@ -462,37 +462,38 @@ declare_special_idents_and_keywords! {\n         (28,                         Loop,       \"loop\");\n         (29,                         Match,      \"match\");\n         (30,                         Mod,        \"mod\");\n-        (31,                         Mut,        \"mut\");\n-        (32,                         Once,       \"once\");\n-        (33,                         Priv,       \"priv\");\n-        (34,                         Pub,        \"pub\");\n-        (35,                         Ref,        \"ref\");\n-        (36,                         Return,     \"return\");\n+        (31,                         Crate,      \"crate\");\n+        (32,                         Mut,        \"mut\");\n+        (33,                         Once,       \"once\");\n+        (34,                         Priv,       \"priv\");\n+        (35,                         Pub,        \"pub\");\n+        (36,                         Ref,        \"ref\");\n+        (37,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (37,                         Struct,     \"struct\");\n-        (38,                         Super,      \"super\");\n-        (39,                         True,       \"true\");\n-        (40,                         Trait,      \"trait\");\n-        (41,                         Type,       \"type\");\n-        (42,                         Unsafe,     \"unsafe\");\n-        (43,                         Use,        \"use\");\n-        (44,                         While,      \"while\");\n-        (45,                         Continue,   \"continue\");\n-        (46,                         Proc,       \"proc\");\n-        (47,                         Box,        \"box\");\n+        (38,                         Struct,     \"struct\");\n+        (39,                         Super,      \"super\");\n+        (40,                         True,       \"true\");\n+        (41,                         Trait,      \"trait\");\n+        (42,                         Type,       \"type\");\n+        (43,                         Unsafe,     \"unsafe\");\n+        (44,                         Use,        \"use\");\n+        (45,                         While,      \"while\");\n+        (46,                         Continue,   \"continue\");\n+        (47,                         Proc,       \"proc\");\n+        (48,                         Box,        \"box\");\n \n         'reserved:\n-        (48,                         Alignof,    \"alignof\");\n-        (49,                         Be,         \"be\");\n-        (50,                         Offsetof,   \"offsetof\");\n-        (51,                         Pure,       \"pure\");\n-        (52,                         Sizeof,     \"sizeof\");\n-        (53,                         Typeof,     \"typeof\");\n-        (54,                         Unsized,    \"unsized\");\n-        (55,                         Yield,      \"yield\");\n-        (56,                         Do,         \"do\");\n+        (49,                         Alignof,    \"alignof\");\n+        (50,                         Be,         \"be\");\n+        (51,                         Offsetof,   \"offsetof\");\n+        (52,                         Pure,       \"pure\");\n+        (53,                         Sizeof,     \"sizeof\");\n+        (54,                         Typeof,     \"typeof\");\n+        (55,                         Unsized,    \"unsized\");\n+        (56,                         Yield,      \"yield\");\n+        (57,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "638253f816ac6642458abb549636997f4c462ce1", "filename": "src/test/compile-fail/extern-expected-fn-or-brace.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-expected-fn-or-brace.rs?ref=9a6d92c1d706af14da336892e8d5148c3d3859ee", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verifies that the expected token errors for `extern crate` are\n+// raised\n+\n+extern \"C\" mod foo; //~ERROR expected `{` or `fn` but found `mod`"}, {"sha": "ffa6ffb042fe9ad64d020de16d4bc5669c5a313c", "filename": "src/test/compile-fail/extern-foreign-crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-foreign-crate.rs?ref=9a6d92c1d706af14da336892e8d5148c3d3859ee", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verifies that the expected token errors for `extern crate` are\n+// raised\n+\n+extern crate foo {} //~ERROR expected one of `=`, `;` but found `{`"}, {"sha": "8949734b80e484f80729ba8eb5ed573462e55c83", "filename": "src/test/run-pass/extern-foreign-crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6d92c1d706af14da336892e8d5148c3d3859ee/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs?ref=9a6d92c1d706af14da336892e8d5148c3d3859ee", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate extra;\n+extern mod mystd = \"std\";\n+\n+pub fn main() {}"}]}