{"sha": "87c841e19096f065d0e8a320c2c529b9d293da5d", "node_id": "C_kwDOAAsO6NoAKDg3Yzg0MWUxOTA5NmYwNjVkMGU4YTMyMGMyYzUyOWI5ZDI5M2RhNWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-05T19:43:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T20:28:53Z"}, "message": "Remove the `region` terminology.", "tree": {"sha": "4cf12a49013759e7c605970c6e103cdbce65f6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf12a49013759e7c605970c6e103cdbce65f6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c841e19096f065d0e8a320c2c529b9d293da5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c841e19096f065d0e8a320c2c529b9d293da5d", "html_url": "https://github.com/rust-lang/rust/commit/87c841e19096f065d0e8a320c2c529b9d293da5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c841e19096f065d0e8a320c2c529b9d293da5d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf38ba260d43171051249b08cfd9466a518804d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf38ba260d43171051249b08cfd9466a518804d6", "html_url": "https://github.com/rust-lang/rust/commit/bf38ba260d43171051249b08cfd9466a518804d6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f260713a18fe791329cc3db6ed1e95864ddc753e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87c841e19096f065d0e8a320c2c529b9d293da5d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c841e19096f065d0e8a320c2c529b9d293da5d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=87c841e19096f065d0e8a320c2c529b9d293da5d", "patch": "@@ -238,7 +238,7 @@ enum LifetimeRibKind {\n     /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n     AnonConst,\n \n-    /// Create a new anonymous region parameter and reference it.\n+    /// Create a new anonymous lifetime parameter and reference it.\n     ///\n     /// If `report_in_path`, report an error when encountering lifetime elision in a path:\n     /// ```ignore\n@@ -1279,13 +1279,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         for i in &mut indices {\n             let rib = &self.lifetime_ribs[i];\n             let normalized_ident = ident.normalize_to_macros_2_0();\n-            if let Some(&(_, region)) = rib.bindings.get(&normalized_ident) {\n-                self.record_lifetime_res(lifetime.id, region);\n+            if let Some(&(_, res)) = rib.bindings.get(&normalized_ident) {\n+                self.record_lifetime_res(lifetime.id, res);\n \n-                if let LifetimeRes::Param { param, .. } = region {\n+                if let LifetimeRes::Param { param, .. } = res {\n                     match self.lifetime_uses.entry(param) {\n                         Entry::Vacant(v) => {\n-                            debug!(\"First use of {:?} at {:?}\", region, ident.span);\n+                            debug!(\"First use of {:?} at {:?}\", res, ident.span);\n                             let use_set = self\n                                 .lifetime_ribs\n                                 .iter()\n@@ -1310,7 +1310,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             v.insert(use_set);\n                         }\n                         Entry::Occupied(mut o) => {\n-                            debug!(\"Many uses of {:?} at {:?}\", region, ident.span);\n+                            debug!(\"Many uses of {:?} at {:?}\", res, ident.span);\n                             *o.get_mut() = LifetimeUseSet::Many;\n                         }\n                     }\n@@ -1433,13 +1433,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n         debug!(?def_id);\n \n-        let region = LifetimeRes::Fresh { param: def_id, binder: item_node_id };\n+        let res = LifetimeRes::Fresh { param: def_id, binder: item_node_id };\n         self.r.extra_lifetime_params_map.entry(item_node_id).or_insert_with(Vec::new).push((\n             ident,\n             def_node_id,\n-            region,\n+            res,\n         ));\n-        region\n+        res\n     }\n \n     #[tracing::instrument(level = \"debug\", skip(self))]"}]}