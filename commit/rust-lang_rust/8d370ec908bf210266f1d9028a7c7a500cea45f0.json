{"sha": "8d370ec908bf210266f1d9028a7c7a500cea45f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMzcwZWM5MDhiZjIxMDI2NmYxZDkwMjhhN2M3YTUwMGNlYTQ1ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T02:36:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T02:36:41Z"}, "message": "Auto merge of #47225 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #46987, #47165, #47173, #47202, #47216\n- Failed merges:", "tree": {"sha": "d72a92a8f31cfc7081a6883267647fc612fa1284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72a92a8f31cfc7081a6883267647fc612fa1284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d370ec908bf210266f1d9028a7c7a500cea45f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d370ec908bf210266f1d9028a7c7a500cea45f0", "html_url": "https://github.com/rust-lang/rust/commit/8d370ec908bf210266f1d9028a7c7a500cea45f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d370ec908bf210266f1d9028a7c7a500cea45f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b98fd524eca6dca5c4788f0d20becb10e099b876", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98fd524eca6dca5c4788f0d20becb10e099b876", "html_url": "https://github.com/rust-lang/rust/commit/b98fd524eca6dca5c4788f0d20becb10e099b876"}, {"sha": "35d15554bd5d10655ae9f7602721781ab2d78fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d15554bd5d10655ae9f7602721781ab2d78fea", "html_url": "https://github.com/rust-lang/rust/commit/35d15554bd5d10655ae9f7602721781ab2d78fea"}], "stats": {"total": 111, "additions": 45, "deletions": 66}, "files": [{"sha": "4e65195626507fb1177f311c5102416d34545648", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -538,9 +538,6 @@ extern \"C\" {\n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: TypeRef) -> TypeKind;\n \n-    /// See llvm::Value::getContext\n-    pub fn LLVMRustGetValueContext(V: ValueRef) -> ContextRef;\n-\n     // Operations on integer types\n     pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;\n@@ -812,13 +809,12 @@ extern \"C\" {\n                                Bundle: OperandBundleDefRef,\n                                Name: *const c_char)\n                                -> ValueRef;\n-    pub fn LLVMRustBuildLandingPad(B: BuilderRef,\n-                                   Ty: TypeRef,\n-                                   PersFn: ValueRef,\n-                                   NumClauses: c_uint,\n-                                   Name: *const c_char,\n-                                   F: ValueRef)\n-                                   -> ValueRef;\n+    pub fn LLVMBuildLandingPad(B: BuilderRef,\n+                               Ty: TypeRef,\n+                               PersFn: ValueRef,\n+                               NumClauses: c_uint,\n+                               Name: *const c_char)\n+                               -> ValueRef;\n     pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n     pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n "}, {"sha": "4a0b1381a40084c3b1d192cfc62b70a663a9ed44", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -1012,12 +1012,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n \n     pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,\n-                       num_clauses: usize,\n-                       llfn: ValueRef) -> ValueRef {\n+                       num_clauses: usize) -> ValueRef {\n         self.count_insn(\"landingpad\");\n         unsafe {\n-            llvm::LLVMRustBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n-                                          num_clauses as c_uint, noname(), llfn)\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n+                                      num_clauses as c_uint, noname())\n         }\n     }\n "}, {"sha": "cfddd99d0dd9aab1df1457c3c724d749afdbe728", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -925,7 +925,7 @@ fn trans_gnu_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         // rust_try ignores the selector.\n         let lpad_ty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)],\n                                     false);\n-        let vals = catch.landing_pad(lpad_ty, bcx.ccx.eh_personality(), 1, catch.llfn());\n+        let vals = catch.landing_pad(lpad_ty, bcx.ccx.eh_personality(), 1);\n         catch.add_clause(vals, C_null(Type::i8p(ccx)));\n         let ptr = catch.extract_value(vals, 0);\n         let ptr_align = bcx.tcx().data_layout.pointer_align;"}, {"sha": "8c9fb03954583fca26f1bb24b8613f445f2c0869", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -753,7 +753,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         let llpersonality = self.ccx.eh_personality();\n         let llretty = self.landing_pad_type();\n-        let lp = bcx.landing_pad(llretty, llpersonality, 1, self.llfn);\n+        let lp = bcx.landing_pad(llretty, llpersonality, 1);\n         bcx.set_cleanup(lp);\n \n         let slot = self.get_personality_slot(&bcx);"}, {"sha": "b4dbd76d0b4d0f9c87c7bec5111447f3a72d6c20", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -1132,6 +1132,10 @@\n                     e.preventDefault();\n                 } else if (e.which === 16) { // shift\n                     // Does nothing, it's just to avoid losing \"focus\" on the highlighted element.\n+                } else if (e.which === 27) { // escape\n+                    removeClass(actives[currentTab][0], 'highlighted');\n+                    document.getElementsByClassName('search-input')[0].value = '';\n+                    defocusSearchBar();\n                 } else if (actives[currentTab].length > 0) {\n                     removeClass(actives[currentTab][0], 'highlighted');\n                 }"}, {"sha": "ed34c1204b3a1bd21e4c220c11cdf300b8eac0c4", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -571,8 +571,11 @@ pub fn temp_dir() -> PathBuf {\n \n /// Returns the full filesystem path of the current running executable.\n ///\n-/// The path returned is not necessarily a \"real path\" of the executable as\n-/// there may be intermediate symlinks.\n+/// # Platform-specific behavior\n+///\n+/// If the executable was invoked through a symbolic link, some platforms will\n+/// return the path of the symbolic link and other platforms will return the\n+/// path of the symbolic link\u2019s target.\n ///\n /// # Errors\n ///\n@@ -599,24 +602,24 @@ pub fn temp_dir() -> PathBuf {\n /// Ok(\"/home/alex/foo\")\n /// ```\n ///\n-/// And you make a symbolic link of the program:\n+/// And you make a hard link of the program:\n ///\n /// ```bash\n /// $ ln foo bar\n /// ```\n ///\n-/// When you run it, you won't get the original executable, you'll get the\n-/// symlink:\n+/// When you run it, you won\u2019t get the path of the original executable, you\u2019ll\n+/// get the path of the hard link:\n ///\n /// ```bash\n /// $ ./bar\n /// Ok(\"/home/alex/bar\")\n /// ```\n ///\n /// This sort of behavior has been known to [lead to privilege escalation] when\n-/// used incorrectly, for example.\n+/// used incorrectly.\n ///\n-/// [lead to privilege escalation]: http://securityvulns.com/Wdocument183.html\n+/// [lead to privilege escalation]: https://securityvulns.com/Wdocument183.html\n ///\n /// # Examples\n ///\n@@ -625,7 +628,7 @@ pub fn temp_dir() -> PathBuf {\n ///\n /// match env::current_exe() {\n ///     Ok(exe_path) => println!(\"Path of this executable is: {}\",\n-///                               exe_path.display()),\n+///                              exe_path.display()),\n ///     Err(e) => println!(\"failed to get current exe path: {}\", e),\n /// };\n /// ```"}, {"sha": "ad9cf1eed7013374e669fd006584831af76af77a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -601,7 +601,7 @@ pub trait Read {\n         read_to_end(self, buf)\n     }\n \n-    /// Read all bytes until EOF in this source, placing them into `buf`.\n+    /// Read all bytes until EOF in this source, appending them to `buf`.\n     ///\n     /// If successful, this function returns the number of bytes which were read\n     /// and appended to `buf`."}, {"sha": "e1c7ffc19e51eb1bb911c8a2df98d05fecc3c181", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -69,57 +69,50 @@ impl DoubleEndedIterator for Args {\n           target_os = \"fuchsia\"))]\n mod imp {\n     use os::unix::prelude::*;\n-    use mem;\n+    use ptr;\n     use ffi::{CStr, OsString};\n     use marker::PhantomData;\n     use libc;\n     use super::Args;\n \n     use sys_common::mutex::Mutex;\n \n-    static mut GLOBAL_ARGS_PTR: usize = 0;\n+    static mut ARGC: isize = 0;\n+    static mut ARGV: *const *const u8 = ptr::null();\n     static LOCK: Mutex = Mutex::new();\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-        let args = (0..argc).map(|i| {\n-            CStr::from_ptr(*argv.offset(i) as *const libc::c_char).to_bytes().to_vec()\n-        }).collect();\n-\n         LOCK.lock();\n-        let ptr = get_global_ptr();\n-        assert!((*ptr).is_none());\n-        (*ptr) = Some(box args);\n+        ARGC = argc;\n+        ARGV = argv;\n         LOCK.unlock();\n     }\n \n     pub unsafe fn cleanup() {\n         LOCK.lock();\n-        *get_global_ptr() = None;\n+        ARGC = 0;\n+        ARGV = ptr::null();\n         LOCK.unlock();\n     }\n \n     pub fn args() -> Args {\n-        let bytes = clone().unwrap_or(Vec::new());\n-        let v: Vec<OsString> = bytes.into_iter().map(|v| {\n-            OsStringExt::from_vec(v)\n-        }).collect();\n-        Args { iter: v.into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args {\n+            iter: clone().into_iter(),\n+            _dont_send_or_sync_me: PhantomData\n+        }\n     }\n \n-    fn clone() -> Option<Vec<Vec<u8>>> {\n+    fn clone() -> Vec<OsString> {\n         unsafe {\n             LOCK.lock();\n-            let ptr = get_global_ptr();\n-            let ret = (*ptr).as_ref().map(|s| (**s).clone());\n+            let ret = (0..ARGC).map(|i| {\n+                let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n+                OsStringExt::from_vec(cstr.to_bytes().to_vec())\n+            }).collect();\n             LOCK.unlock();\n             return ret\n         }\n     }\n-\n-    fn get_global_ptr() -> *mut Option<Box<Vec<Vec<u8>>>> {\n-        unsafe { mem::transmute(&GLOBAL_ARGS_PTR) }\n-    }\n-\n }\n \n #[cfg(any(target_os = \"macos\","}, {"sha": "96fb05ee06e378cd3b3fdc1bd1c0257f37a348e2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8d370ec908bf210266f1d9028a7c7a500cea45f0/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=8d370ec908bf210266f1d9028a7c7a500cea45f0", "patch": "@@ -1144,13 +1144,6 @@ extern \"C\" void LLVMRustWriteSMDiagnosticToString(LLVMSMDiagnosticRef D,\n   unwrap(D)->print(\"\", OS);\n }\n \n-extern \"C\" LLVMValueRef\n-LLVMRustBuildLandingPad(LLVMBuilderRef B, LLVMTypeRef Ty,\n-                        LLVMValueRef PersFn, unsigned NumClauses,\n-                        const char *Name, LLVMValueRef F) {\n-  return LLVMBuildLandingPad(B, Ty, PersFn, NumClauses, Name);\n-}\n-\n extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,\n                                                 LLVMValueRef ParentPad,\n                                                 unsigned ArgCount,\n@@ -1355,10 +1348,6 @@ extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *hig\n     return true;\n }\n \n-extern \"C\" LLVMContextRef LLVMRustGetValueContext(LLVMValueRef V) {\n-  return wrap(&unwrap(V)->getContext());\n-}\n-\n enum class LLVMRustVisibility {\n   Default = 0,\n   Hidden = 1,\n@@ -1439,11 +1428,6 @@ LLVMRustModuleBufferLen(const LLVMRustModuleBuffer *Buffer) {\n \n extern \"C\" uint64_t\n LLVMRustModuleCost(LLVMModuleRef M) {\n-  Module &Mod = *unwrap(M);\n-  uint64_t cost = 0;\n-  for (auto &F : Mod.functions()) {\n-    (void)F;\n-    cost += 1;\n-  }\n-  return cost;\n+  auto f = unwrap(M)->functions();\n+  return std::distance(std::begin(f), std::end(f));\n }"}]}