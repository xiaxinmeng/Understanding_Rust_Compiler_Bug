{"sha": "01d7f87d8ee16915d8f663f44a5587ec45f54f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDdmODdkOGVlMTY5MTVkOGY2NjNmNDRhNTU4N2VjNDVmNTRmNzY=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-19T23:50:06Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-19T23:50:06Z"}, "message": "Reserve necessary space for params in generics_of", "tree": {"sha": "83f874de0760b75acda45560f9afe414829a34f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f874de0760b75acda45560f9afe414829a34f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d7f87d8ee16915d8f663f44a5587ec45f54f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d7f87d8ee16915d8f663f44a5587ec45f54f76", "html_url": "https://github.com/rust-lang/rust/commit/01d7f87d8ee16915d8f663f44a5587ec45f54f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d7f87d8ee16915d8f663f44a5587ec45f54f76/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "8f4f4fdcbe78707c206ff388f31b238fae7db7ee", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01d7f87d8ee16915d8f663f44a5587ec45f54f76/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d7f87d8ee16915d8f663f44a5587ec45f54f76/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=01d7f87d8ee16915d8f663f44a5587ec45f54f76", "patch": "@@ -1369,7 +1369,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         generics.parent_count + generics.params.len()\n     });\n \n-    let mut params: Vec<_> = opt_self.into_iter().collect();\n+    let mut params: Vec<_> = Vec::with_capacity(ast_generics.params.len() + has_self as usize);\n+\n+    if let Some(opt_self) = opt_self {\n+        params.push(opt_self);\n+    }\n \n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| ty::GenericParamDef {"}]}