{"sha": "b9bcddc5276c97f8d66f637ae84658b37fbb4957", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YmNkZGM1Mjc2Yzk3ZjhkNjZmNjM3YWU4NDY1OGIzN2ZiYjQ5NTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-03T03:15:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T09:53:54Z"}, "message": "Make option type descriptions non-optional.\n\nBecause all options now can take a value. This simplifies some code\nquite a bit.", "tree": {"sha": "3fc6b278d8811451f4684f9d50be29ba20cd3e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc6b278d8811451f4684f9d50be29ba20cd3e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9bcddc5276c97f8d66f637ae84658b37fbb4957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bcddc5276c97f8d66f637ae84658b37fbb4957", "html_url": "https://github.com/rust-lang/rust/commit/b9bcddc5276c97f8d66f637ae84658b37fbb4957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9bcddc5276c97f8d66f637ae84658b37fbb4957/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309301847479403298438d70ce5c3f332da896d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/309301847479403298438d70ce5c3f332da896d4", "html_url": "https://github.com/rust-lang/rust/commit/309301847479403298438d70ce5c3f332da896d4"}], "stats": {"total": 122, "additions": 43, "deletions": 79}, "files": [{"sha": "fff86ba819450fa71235be72f013ba409c576332", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b9bcddc5276c97f8d66f637ae84658b37fbb4957/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bcddc5276c97f8d66f637ae84658b37fbb4957/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b9bcddc5276c97f8d66f637ae84658b37fbb4957", "patch": "@@ -955,32 +955,17 @@ fn describe_codegen_flags() {\n \n fn print_flag_list<T>(\n     cmdline_opt: &str,\n-    flag_list: &[(&'static str, T, Option<&'static str>, &'static str)],\n+    flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {\n-    let max_len = flag_list\n-        .iter()\n-        .map(|&(name, _, opt_type_desc, _)| {\n-            let extra_len = match opt_type_desc {\n-                Some(..) => 4,\n-                None => 0,\n-            };\n-            name.chars().count() + extra_len\n-        })\n-        .max()\n-        .unwrap_or(0);\n+    let max_len = flag_list.iter().map(|&(name, _, _, _)| name.chars().count()).max().unwrap_or(0);\n \n-    for &(name, _, opt_type_desc, desc) in flag_list {\n-        let (width, extra) = match opt_type_desc {\n-            Some(..) => (max_len - 4, \"=val\"),\n-            None => (max_len, \"\"),\n-        };\n+    for &(name, _, _, desc) in flag_list {\n         println!(\n-            \"    {} {:>width$}{} -- {}\",\n+            \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n             name.replace(\"_\", \"-\"),\n-            extra,\n             desc,\n-            width = width\n+            width = max_len\n         );\n     }\n }"}, {"sha": "d47baf08e9e064d172b344192e40834450d85797", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 38, "deletions": 59, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b9bcddc5276c97f8d66f637ae84658b37fbb4957/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bcddc5276c97f8d66f637ae84658b37fbb4957/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=b9bcddc5276c97f8d66f637ae84658b37fbb4957", "patch": "@@ -181,27 +181,22 @@ macro_rules! options {\n             let value = iter.next();\n             let option_to_lookup = key.replace(\"-\", \"_\");\n             let mut found = false;\n-            for &(candidate, setter, opt_type_desc, _) in $stat {\n+            for &(candidate, setter, type_desc, _) in $stat {\n                 if option_to_lookup != candidate { continue }\n                 if !setter(&mut op, value) {\n-                    match (value, opt_type_desc) {\n-                        (Some(..), None) => {\n-                            early_error(error_format, &format!(\"{} option `{}` takes no \\\n-                                                                value\", $outputname, key))\n-                        }\n-                        (None, Some(type_desc)) => {\n+                    match value {\n+                        None => {\n                             early_error(error_format, &format!(\"{0} option `{1}` requires \\\n                                                                 {2} ({3} {1}=<value>)\",\n                                                                $outputname, key,\n                                                                type_desc, $prefix))\n                         }\n-                        (Some(value), Some(type_desc)) => {\n+                        Some(value) => {\n                             early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n                                                                 option `{}` - {} was expected\",\n                                                                value, $outputname,\n                                                                key, type_desc))\n                         }\n-                        (None, None) => panic!()\n                     }\n                 }\n                 found = true;\n@@ -231,60 +226,44 @@ macro_rules! options {\n     }\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n-    pub const $stat: &[(&str, $setter_name, Option<&str>, &str)] =\n+    pub const $stat: &[(&str, $setter_name, &str, &str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n-        pub const parse_bool: Option<&str> = Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n-        pub const parse_opt_bool: Option<&str> = parse_bool;\n-        pub const parse_string: Option<&str> = Some(\"a string\");\n-        pub const parse_opt_string: Option<&str> = parse_string;\n-        pub const parse_string_push: Option<&str> = parse_string;\n-        pub const parse_opt_pathbuf: Option<&str> = Some(\"a path\");\n-        pub const parse_pathbuf_push: Option<&str> = parse_opt_pathbuf;\n-        pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n-        pub const parse_opt_list: Option<&str> = parse_list;\n-        pub const parse_opt_comma_list: Option<&str> = Some(\"a comma-separated list of strings\");\n-        pub const parse_uint: Option<&str> = Some(\"a number\");\n-        pub const parse_opt_uint: Option<&str> = parse_uint;\n-        pub const parse_threads: Option<&str> = parse_uint;\n-        pub const parse_passes: Option<&str> =\n-            Some(\"a space-separated list of passes, or `all`\");\n-        pub const parse_panic_strategy: Option<&str> =\n-            Some(\"either `unwind` or `abort`\");\n-        pub const parse_relro_level: Option<&str> =\n-            Some(\"one of: `full`, `partial`, or `off`\");\n-        pub const parse_sanitizer: Option<&str> =\n-            Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n-        pub const parse_sanitizer_list: Option<&str> =\n-            Some(\"comma separated list of sanitizers\");\n-        pub const parse_sanitizer_memory_track_origins: Option<&str> =\n-            Some(\"0, 1, or 2\");\n-        pub const parse_cfguard: Option<&str> =\n-            Some(\"either `disabled`, `nochecks`, or `checks`\");\n-        pub const parse_linker_flavor: Option<&str> =\n-            Some(::rustc_target::spec::LinkerFlavor::one_of());\n-        pub const parse_optimization_fuel: Option<&str> =\n-            Some(\"crate=integer\");\n-        pub const parse_unpretty: Option<&str> =\n-            Some(\"`string` or `string=string`\");\n-        pub const parse_treat_err_as_bug: Option<&str> =\n-            Some(\"either no value or a number bigger than 0\");\n-        pub const parse_lto: Option<&str> =\n-            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n-                  `fat`, or omitted\");\n-        pub const parse_linker_plugin_lto: Option<&str> =\n-            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n-                  or the path to the linker plugin\");\n-        pub const parse_switch_with_opt_path: Option<&str> =\n-            Some(\"an optional path to the profiling data output directory\");\n-        pub const parse_merge_functions: Option<&str> =\n-            Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n-        pub const parse_symbol_mangling_version: Option<&str> =\n-            Some(\"either `legacy` or `v0` (RFC 2603)\");\n-        pub const parse_src_file_hash: Option<&str> =\n-            Some(\"either `md5`, or `sha1`\");\n+        pub const parse_bool: &str = \"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\";\n+        pub const parse_opt_bool: &str = parse_bool;\n+        pub const parse_string: &str = \"a string\";\n+        pub const parse_opt_string: &str = parse_string;\n+        pub const parse_string_push: &str = parse_string;\n+        pub const parse_opt_pathbuf: &str = \"a path\";\n+        pub const parse_pathbuf_push: &str = parse_opt_pathbuf;\n+        pub const parse_list: &str = \"a space-separated list of strings\";\n+        pub const parse_opt_list: &str = parse_list;\n+        pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n+        pub const parse_uint: &str = \"a number\";\n+        pub const parse_opt_uint: &str = parse_uint;\n+        pub const parse_threads: &str = parse_uint;\n+        pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n+        pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n+        pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n+        pub const parse_sanitizer: &str = \"one of: `address`, `leak`, `memory` or `thread`\";\n+        pub const parse_sanitizer_list: &str = \"comma separated list of sanitizers\";\n+        pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n+        pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n+        pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n+        pub const parse_optimization_fuel: &str = \"crate=integer\";\n+        pub const parse_unpretty: &str = \"`string` or `string=string`\";\n+        pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n+        pub const parse_lto: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n+        pub const parse_linker_plugin_lto: &str =\n+            \"either a boolean (`yes`, `no`, `on`, `off`, etc), or the path to the linker plugin\";\n+        pub const parse_switch_with_opt_path: &str =\n+            \"an optional path to the profiling data output directory\";\n+        pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n+        pub const parse_symbol_mangling_version: &str = \"either `legacy` or `v0` (RFC 2603)\";\n+        pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n     }\n \n     #[allow(dead_code)]"}]}