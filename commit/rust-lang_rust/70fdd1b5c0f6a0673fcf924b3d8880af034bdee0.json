{"sha": "70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZmRkMWI1YzBmNmEwNjczZmNmOTI0YjNkODg4MGFmMDM0YmRlZTA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T06:36:31Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-21T07:47:38Z"}, "message": "Make the unstable StrExt and SliceExt traits private to libcore in not(stage0)\n\n`Float` still needs to be public for libcore unit tests.", "tree": {"sha": "424c8534abbff8f858c055bfc39cf2a6d80e040e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424c8534abbff8f858c055bfc39cf2a6d80e040e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "html_url": "https://github.com/rust-lang/rust/commit/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ab16b5104403ef7a55a2d241c566e35c5ae57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ab16b5104403ef7a55a2d241c566e35c5ae57a", "html_url": "https://github.com/rust-lang/rust/commit/18ab16b5104403ef7a55a2d241c566e35c5ae57a"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "6399be98cd5197f9d3d2eae08d30ae746c35c9ce", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -75,7 +75,7 @@\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(test, allow(deprecated))] // rand\n-#![cfg_attr(not(test), feature(core_float))]\n+#![cfg_attr(all(not(test), stage0), feature(float_internals))]\n #![cfg_attr(not(test), feature(exact_size_is_empty))]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(rand, test))]"}, {"sha": "58eef6492877a4b0d6430d614eb119498289a6ce", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -87,3 +87,16 @@ macro_rules! forward_ref_op_assign {\n     }\n }\n \n+#[cfg(stage0)]\n+macro_rules! public_in_stage0 {\n+    ( { $(#[$attr:meta])* } $($Item: tt)*) => {\n+        $(#[$attr])* pub $($Item)*\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+macro_rules! public_in_stage0 {\n+    ( { $(#[$attr:meta])* } $($Item: tt)*) => {\n+        $(#[$attr])* pub(crate) $($Item)*\n+    }\n+}"}, {"sha": "70c704267d2dd410007850061be04a3a357beff4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -4098,65 +4098,58 @@ pub enum FpCategory {\n     Normal,\n }\n \n-/// A built-in floating point number.\n+// Technically private and only exposed for coretests:\n #[doc(hidden)]\n-#[unstable(feature = \"core_float\",\n-           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n-           issue = \"32110\")]\n+#[unstable(feature = \"float_internals\",\n+           reason = \"internal routines only exposed for testing\",\n+           issue = \"0\")]\n pub trait Float: Sized {\n     /// Type used by `to_bits` and `from_bits`.\n-    #[stable(feature = \"core_float_bits\", since = \"1.25.0\")]\n     type Bits;\n \n     /// Returns `true` if this value is NaN and false otherwise.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_nan(self) -> bool;\n+\n     /// Returns `true` if this value is positive infinity or negative infinity and\n     /// false otherwise.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_infinite(self) -> bool;\n+\n     /// Returns `true` if this number is neither infinite nor NaN.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_finite(self) -> bool;\n+\n     /// Returns `true` if this number is neither zero, infinite, denormal, or NaN.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_normal(self) -> bool;\n+\n     /// Returns the category that this number falls into.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn classify(self) -> FpCategory;\n \n     /// Returns `true` if `self` is positive, including `+0.0` and\n     /// `Float::infinity()`.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_sign_positive(self) -> bool;\n+\n     /// Returns `true` if `self` is negative, including `-0.0` and\n     /// `Float::neg_infinity()`.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_sign_negative(self) -> bool;\n \n     /// Take the reciprocal (inverse) of a number, `1/x`.\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn recip(self) -> Self;\n \n     /// Convert radians to degrees.\n-    #[stable(feature = \"deg_rad_conversions\", since=\"1.7.0\")]\n     fn to_degrees(self) -> Self;\n+\n     /// Convert degrees to radians.\n-    #[stable(feature = \"deg_rad_conversions\", since=\"1.7.0\")]\n     fn to_radians(self) -> Self;\n \n     /// Returns the maximum of the two numbers.\n-    #[stable(feature = \"core_float_min_max\", since=\"1.20.0\")]\n     fn max(self, other: Self) -> Self;\n+\n     /// Returns the minimum of the two numbers.\n-    #[stable(feature = \"core_float_min_max\", since=\"1.20.0\")]\n     fn min(self, other: Self) -> Self;\n \n     /// Raw transmutation to integer.\n-    #[stable(feature = \"core_float_bits\", since=\"1.25.0\")]\n     fn to_bits(self) -> Self::Bits;\n+\n     /// Raw transmutation from integer.\n-    #[stable(feature = \"core_float_bits\", since=\"1.25.0\")]\n     fn from_bits(v: Self::Bits) -> Self;\n }\n "}, {"sha": "cc42acd77aed1c29b6ed847b4cbc53e344d15fcb", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -68,12 +68,15 @@ struct Repr<T> {\n // Extension traits\n //\n \n+public_in_stage0! {\n+{\n /// Extension methods for slices.\n #[unstable(feature = \"core_slice_ext\",\n            reason = \"stable interface provided by `impl [T]` in later crates\",\n            issue = \"32110\")]\n #[allow(missing_docs)] // documented elsewhere\n-pub trait SliceExt {\n+}\n+trait SliceExt {\n     type Item;\n \n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -238,7 +241,7 @@ pub trait SliceExt {\n     fn sort_unstable_by_key<B, F>(&mut self, f: F)\n         where F: FnMut(&Self::Item) -> B,\n               B: Ord;\n-}\n+}}\n \n // Use macros to be generic over const/mut\n macro_rules! slice_offset {"}, {"sha": "a76de79107bd5fa552232857cb6503fee6851ef3", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -2117,14 +2117,16 @@ mod traits {\n \n }\n \n-\n+public_in_stage0! {\n+{\n /// Methods for string slices\n #[allow(missing_docs)]\n #[doc(hidden)]\n #[unstable(feature = \"core_str_ext\",\n            reason = \"stable interface provided by `impl str` in later crates\",\n            issue = \"32110\")]\n-pub trait StrExt {\n+}\n+trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // liballoc, not here.\n \n@@ -2224,7 +2226,7 @@ pub trait StrExt {\n     fn trim_left(&self) -> &str;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trim_right(&self) -> &str;\n-}\n+}}\n \n // truncate `&str` to length at most equal to `max`\n // return `true` if it were truncated, and the new str."}, {"sha": "2cc2ac289bf27e4f6cb7a0fb6339fd87255a0874", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -17,6 +17,7 @@\n #![feature(decode_utf8)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n+#![feature(float_internals)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]"}, {"sha": "3b98abb929331765b9b9aa3f944e31f7747f0a00", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -252,14 +252,15 @@\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]\n-#![feature(core_float)]\n+#![cfg_attr(stage0, feature(core_float))]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(external_doc)]\n #![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]\n+#![cfg_attr(stage0, feature(float_internals))]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]"}, {"sha": "f7aaab4242c0fab7bb6faf104d08cdd58f387df1", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70fdd1b5c0f6a0673fcf924b3d8880af034bdee0/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=70fdd1b5c0f6a0673fcf924b3d8880af034bdee0", "patch": "@@ -8,10 +8,8 @@ LL |     foo(|s| s.is_empty());\n    |               ^^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:\n+   = note: the following trait defines an item `is_empty`, perhaps you need to implement it:\n            candidate #1: `std::iter::ExactSizeIterator`\n-           candidate #2: `core::slice::SliceExt`\n-           candidate #3: `core::str::StrExt`\n \n error: aborting due to previous error\n "}]}