{"sha": "90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTJlNWUzZmU1OWEyNTRkNGQ3MDdhYTI5MTUxN2IzNzkxZWE1YTY=", "commit": {"author": {"name": "bstrie", "email": "bstrie@thinwsl", "date": "2020-10-24T23:21:40Z"}, "committer": {"name": "bstrie", "email": "bstrie@thinwsl", "date": "2020-11-29T05:55:55Z"}, "message": "Update tests to remove old numeric constants\n\nPart of #68490.\n\nCare has been taken to leave the old consts where appropriate, for testing backcompat regressions, module shadowing, etc. The intrinsics docs were accidentally referring to some methods on f64 as std::f64, which I changed due to being contrary with how we normally disambiguate the shadow module from the primitive. In one other place I changed std::u8 to std::ops since it was just testing path handling in macros.\n\nFor places which have legitimate uses of the old consts, deprecated attributes have been optimistically inserted. Although currently unnecessary, they exist to emphasize to any future deprecation effort the necessity of these specific symbols and prevent them from being accidentally removed.", "tree": {"sha": "d69ece1bc91aeb70d7bbf1d1180107eb90d5225f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69ece1bc91aeb70d7bbf1d1180107eb90d5225f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "html_url": "https://github.com/rust-lang/rust/commit/90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/comments", "author": null, "committer": null, "parents": [{"sha": "914d07ae5f90f01f138e66807873295fceaa9a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/914d07ae5f90f01f138e66807873295fceaa9a26", "html_url": "https://github.com/rust-lang/rust/commit/914d07ae5f90f01f138e66807873295fceaa9a26"}], "stats": {"total": 991, "additions": 463, "deletions": 528}, "files": [{"sha": "1a588b314c4f163cdc195ae11334d044a569497d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1173,133 +1173,133 @@ extern \"rust-intrinsic\" {\n     /// Returns the square root of an `f32`\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n+    /// [`f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n     pub fn sqrtf32(x: f32) -> f32;\n     /// Returns the square root of an `f64`\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n+    /// [`f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n     pub fn sqrtf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an integer power.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::powi`](../../std/primitive.f32.html#method.powi)\n+    /// [`f32::powi`](../../std/primitive.f32.html#method.powi)\n     pub fn powif32(a: f32, x: i32) -> f32;\n     /// Raises an `f64` to an integer power.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::powi`](../../std/primitive.f64.html#method.powi)\n+    /// [`f64::powi`](../../std/primitive.f64.html#method.powi)\n     pub fn powif64(a: f64, x: i32) -> f64;\n \n     /// Returns the sine of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::sin`](../../std/primitive.f32.html#method.sin)\n+    /// [`f32::sin`](../../std/primitive.f32.html#method.sin)\n     pub fn sinf32(x: f32) -> f32;\n     /// Returns the sine of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::sin`](../../std/primitive.f64.html#method.sin)\n+    /// [`f64::sin`](../../std/primitive.f64.html#method.sin)\n     pub fn sinf64(x: f64) -> f64;\n \n     /// Returns the cosine of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::cos`](../../std/primitive.f32.html#method.cos)\n+    /// [`f32::cos`](../../std/primitive.f32.html#method.cos)\n     pub fn cosf32(x: f32) -> f32;\n     /// Returns the cosine of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::cos`](../../std/primitive.f64.html#method.cos)\n+    /// [`f64::cos`](../../std/primitive.f64.html#method.cos)\n     pub fn cosf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an `f32` power.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::powf`](../../std/primitive.f32.html#method.powf)\n+    /// [`f32::powf`](../../std/primitive.f32.html#method.powf)\n     pub fn powf32(a: f32, x: f32) -> f32;\n     /// Raises an `f64` to an `f64` power.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::powf`](../../std/primitive.f64.html#method.powf)\n+    /// [`f64::powf`](../../std/primitive.f64.html#method.powf)\n     pub fn powf64(a: f64, x: f64) -> f64;\n \n     /// Returns the exponential of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::exp`](../../std/primitive.f32.html#method.exp)\n+    /// [`f32::exp`](../../std/primitive.f32.html#method.exp)\n     pub fn expf32(x: f32) -> f32;\n     /// Returns the exponential of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::exp`](../../std/primitive.f64.html#method.exp)\n+    /// [`f64::exp`](../../std/primitive.f64.html#method.exp)\n     pub fn expf64(x: f64) -> f64;\n \n     /// Returns 2 raised to the power of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::exp2`](../../std/primitive.f32.html#method.exp2)\n+    /// [`f32::exp2`](../../std/primitive.f32.html#method.exp2)\n     pub fn exp2f32(x: f32) -> f32;\n     /// Returns 2 raised to the power of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::exp2`](../../std/primitive.f64.html#method.exp2)\n+    /// [`f64::exp2`](../../std/primitive.f64.html#method.exp2)\n     pub fn exp2f64(x: f64) -> f64;\n \n     /// Returns the natural logarithm of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::ln`](../../std/primitive.f32.html#method.ln)\n+    /// [`f32::ln`](../../std/primitive.f32.html#method.ln)\n     pub fn logf32(x: f32) -> f32;\n     /// Returns the natural logarithm of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::ln`](../../std/primitive.f64.html#method.ln)\n+    /// [`f64::ln`](../../std/primitive.f64.html#method.ln)\n     pub fn logf64(x: f64) -> f64;\n \n     /// Returns the base 10 logarithm of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::log10`](../../std/primitive.f32.html#method.log10)\n+    /// [`f32::log10`](../../std/primitive.f32.html#method.log10)\n     pub fn log10f32(x: f32) -> f32;\n     /// Returns the base 10 logarithm of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::log10`](../../std/primitive.f64.html#method.log10)\n+    /// [`f64::log10`](../../std/primitive.f64.html#method.log10)\n     pub fn log10f64(x: f64) -> f64;\n \n     /// Returns the base 2 logarithm of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::log2`](../../std/primitive.f32.html#method.log2)\n+    /// [`f32::log2`](../../std/primitive.f32.html#method.log2)\n     pub fn log2f32(x: f32) -> f32;\n     /// Returns the base 2 logarithm of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::log2`](../../std/primitive.f64.html#method.log2)\n+    /// [`f64::log2`](../../std/primitive.f64.html#method.log2)\n     pub fn log2f64(x: f64) -> f64;\n \n     /// Returns `a * b + c` for `f32` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n+    /// [`f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n     pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n     /// Returns `a * b + c` for `f64` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n+    /// [`f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n     pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n \n     /// Returns the absolute value of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::abs`](../../std/primitive.f32.html#method.abs)\n+    /// [`f32::abs`](../../std/primitive.f32.html#method.abs)\n     pub fn fabsf32(x: f32) -> f32;\n     /// Returns the absolute value of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::abs`](../../std/primitive.f64.html#method.abs)\n+    /// [`f64::abs`](../../std/primitive.f64.html#method.abs)\n     pub fn fabsf64(x: f64) -> f64;\n \n     /// Returns the minimum of two `f32` values.\n@@ -1326,45 +1326,45 @@ extern \"rust-intrinsic\" {\n     /// Copies the sign from `y` to `x` for `f32` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::copysign`](../../std/primitive.f32.html#method.copysign)\n+    /// [`f32::copysign`](../../std/primitive.f32.html#method.copysign)\n     pub fn copysignf32(x: f32, y: f32) -> f32;\n     /// Copies the sign from `y` to `x` for `f64` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::copysign`](../../std/primitive.f64.html#method.copysign)\n+    /// [`f64::copysign`](../../std/primitive.f64.html#method.copysign)\n     pub fn copysignf64(x: f64, y: f64) -> f64;\n \n     /// Returns the largest integer less than or equal to an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::floor`](../../std/primitive.f32.html#method.floor)\n+    /// [`f32::floor`](../../std/primitive.f32.html#method.floor)\n     pub fn floorf32(x: f32) -> f32;\n     /// Returns the largest integer less than or equal to an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::floor`](../../std/primitive.f64.html#method.floor)\n+    /// [`f64::floor`](../../std/primitive.f64.html#method.floor)\n     pub fn floorf64(x: f64) -> f64;\n \n     /// Returns the smallest integer greater than or equal to an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::ceil`](../../std/primitive.f32.html#method.ceil)\n+    /// [`f32::ceil`](../../std/primitive.f32.html#method.ceil)\n     pub fn ceilf32(x: f32) -> f32;\n     /// Returns the smallest integer greater than or equal to an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::ceil`](../../std/primitive.f64.html#method.ceil)\n+    /// [`f64::ceil`](../../std/primitive.f64.html#method.ceil)\n     pub fn ceilf64(x: f64) -> f64;\n \n     /// Returns the integer part of an `f32`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::trunc`](../../std/primitive.f32.html#method.trunc)\n+    /// [`f32::trunc`](../../std/primitive.f32.html#method.trunc)\n     pub fn truncf32(x: f32) -> f32;\n     /// Returns the integer part of an `f64`.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::trunc`](../../std/primitive.f64.html#method.trunc)\n+    /// [`f64::trunc`](../../std/primitive.f64.html#method.trunc)\n     pub fn truncf64(x: f64) -> f64;\n \n     /// Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n@@ -1386,12 +1386,12 @@ extern \"rust-intrinsic\" {\n     /// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::round`](../../std/primitive.f32.html#method.round)\n+    /// [`f32::round`](../../std/primitive.f32.html#method.round)\n     pub fn roundf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::round`](../../std/primitive.f64.html#method.round)\n+    /// [`f64::round`](../../std/primitive.f64.html#method.round)\n     pub fn roundf64(x: f64) -> f64;\n \n     /// Float addition that allows optimizations based on algebraic rules."}, {"sha": "ef81988c9612f8d952d920344ea98f018d3036c5", "filename": "library/core/tests/num/nan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/library%2Fcore%2Ftests%2Fnum%2Fnan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/library%2Fcore%2Ftests%2Fnum%2Fnan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fnan.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,6 +1,5 @@\n #[test]\n fn test_nan() {\n-    use core::f64;\n     let x = \"NaN\".to_string();\n     assert_eq!(format!(\"{}\", f64::NAN), x);\n     assert_eq!(format!(\"{:e}\", f64::NAN), x);"}, {"sha": "cc14c21200253249e48a6b0388997e361857e265", "filename": "src/test/codegen/enum-discriminant-value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-discriminant-value.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,14 +4,14 @@\n \n #[repr(i64)]\n pub enum I64 {\n-    I64Min = std::i64::MIN,\n-    I64Max = std::i64::MAX,\n+    I64Min = i64::MIN,\n+    I64Max = i64::MAX,\n }\n \n #[repr(u64)]\n pub enum U64 {\n-    U64Min = std::u64::MIN,\n-    U64Max = std::u64::MAX,\n+    U64Min = u64::MIN,\n+    U64Max = u64::MAX,\n }\n \n fn main() {"}, {"sha": "2c84015d5e29a760fe5b99270dfdf21a57c9a6db", "filename": "src/test/codegen/issue-56927.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56927.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type=\"rlib\"]\n-use std::usize;\n \n #[repr(align(16))]\n pub struct S {"}, {"sha": "fee664caa17833fea08c75f53c57d1cdeb1c881f", "filename": "src/test/compile-fail/consts/issue-55878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fissue-55878.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,5 +3,5 @@\n \n // error-pattern: are too big for the current architecture\n fn main() {\n-    println!(\"Size: {}\", std::mem::size_of::<[u8; std::u64::MAX as usize]>());\n+    println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n }"}, {"sha": "841702987ef7ce00d200396630a7d0a9f6c69c3e", "filename": "src/test/rustdoc/reexport-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-check.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,6 +6,7 @@ extern crate reexport_check;\n // @!has 'foo/index.html' '//code' 'pub use self::i32;'\n // @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'i32'\n // @has 'foo/i32/index.html'\n+#[allow(deprecated, deprecated_in_future)]\n pub use std::i32;\n // @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n // @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'String'"}, {"sha": "f5a356bcae6acf09fd27f60fd86b68ad234f6c74", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -52,6 +52,7 @@ pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n pub use std::f32::consts::PI;\n \n // @has show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n+#[allow(deprecated, deprecated_in_future)]\n pub use std::i32::MAX;\n \n macro_rules! int_module {"}, {"sha": "577853a4e911134f51f471c5a40c0b732dd86a7e", "filename": "src/test/ui/array-slice-vec/bounds-check-no-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Farray-slice-vec%2Fbounds-check-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Farray-slice-vec%2Fbounds-check-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbounds-check-no-overflow.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -2,7 +2,6 @@\n // error-pattern:index out of bounds\n // ignore-emscripten no processes\n \n-use std::usize;\n use std::mem::size_of;\n \n fn main() {"}, {"sha": "0c35819007b7fda5c400b099e9883b7e5a127f7b", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,51 +1,51 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:27:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n    |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:32:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n    |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:37:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n    |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:42:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n    |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1"}, {"sha": "0c35819007b7fda5c400b099e9883b7e5a127f7b", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,51 +1,51 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:27:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n    |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:32:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n    |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:37:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n    |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:42:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n    |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1"}, {"sha": "0c35819007b7fda5c400b099e9883b7e5a127f7b", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,51 +1,51 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:27:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:35\n    |\n LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n    |                                   ^^^^^^^^^^^ attempt to negate `i32::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:32:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:36\n    |\n LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n    |                                    ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:37:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide `1_i32` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:35\n    |\n LL |     const DIV_REV: i32 = T::DIV + (1/0);\n    |                                   ^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:42:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:35\n    |\n LL |     const OOB_REV: i32 = T::OOB + [1][1];\n    |                                   ^^^^^^ index out of bounds: the length is 1 but the index is 1"}, {"sha": "d4af6e8641440baa88e244c7e0db71b07fe18bbf", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -5,8 +5,6 @@\n \n #![crate_type=\"lib\"]\n \n-use std::i32;\n-\n pub trait Foo {\n     const NEG: i32;\n     const NEG_REV: i32;"}, {"sha": "96ea115c877f0c5728f138809ca8bc7797b23d04", "filename": "src/test/ui/big-literals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbig-literals.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -10,8 +10,8 @@ pub fn main() {\n \n     assert_eq!((-2147483648i32).wrapping_sub(1), 2147483647);\n \n-    assert_eq!(-3.40282356e+38_f32, ::std::f32::MIN);\n-    assert_eq!(3.40282356e+38_f32, ::std::f32::MAX);\n-    assert_eq!(-1.7976931348623158e+308_f64, ::std::f64::MIN);\n-    assert_eq!(1.7976931348623158e+308_f64, ::std::f64::MAX);\n+    assert_eq!(-3.40282356e+38_f32, f32::MIN);\n+    assert_eq!(3.40282356e+38_f32, f32::MAX);\n+    assert_eq!(-1.7976931348623158e+308_f64, f64::MIN);\n+    assert_eq!(1.7976931348623158e+308_f64, f64::MAX);\n }"}, {"sha": "c182f5ef81b7d34f4ffa14971a1a4293a0969ef3", "filename": "src/test/ui/const-generics/const_evaluatable_checked/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,7 +6,7 @@ const fn test_me<T>(a: usize, b: usize) -> usize {\n     if a < b {\n         std::mem::size_of::<T>()\n     } else {\n-        std::usize::MAX\n+        usize::MAX\n     }\n }\n "}, {"sha": "b499400472153727cffe0974653311db1afe7bc4", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.full.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,8 +1,8 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72819-generic-in-const-eval.rs:9:47\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:9:39\n    |\n-LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-   |                                               ^^^^^^\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "8df3c85ec1f7749d83cccd11a225976b116896b0", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,7 @@\n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n-LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`"}, {"sha": "4c0004795f0dcabfe6e8a537c24afeb47af07d9a", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,7 +6,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n struct Arr<const N: usize>\n-where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+where Assert::<{N < usize::MAX / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n //[min]~^^ ERROR generic parameters may not be used in const operations\n {\n@@ -19,5 +19,5 @@ trait IsTrue {}\n impl IsTrue for Assert<true> {}\n \n fn main() {\n-    let x: Arr<{usize::max_value()}> = Arr {};\n+    let x: Arr<{usize::MAX}> = Arr {};\n }"}, {"sha": "04e4e9cd52b0063608dc8c912c4bcdafd81b732b", "filename": "src/test/ui/const-generics/issues/issue-73260.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,7 +3,7 @@\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n struct Arr<const N: usize>\n-where Assert::<{N < usize::max_value() / 2}>: IsTrue, //~ ERROR constant expression\n+where Assert::<{N < usize::MAX / 2}>: IsTrue, //~ ERROR constant expression\n {\n }\n \n@@ -14,7 +14,7 @@ trait IsTrue {}\n impl IsTrue for Assert<true> {}\n \n fn main() {\n-    let x: Arr<{usize::max_value()}> = Arr {};\n+    let x: Arr<{usize::MAX}> = Arr {};\n     //~^ ERROR mismatched types\n     //~| ERROR mismatched types\n }"}, {"sha": "6a912ffc3c01bd112ca2b1185b88f83a8cc68d01", "filename": "src/test/ui/const-generics/issues/issue-73260.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,25 +1,25 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-73260.rs:6:47\n+  --> $DIR/issue-73260.rs:6:39\n    |\n-LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-   |                                               ^^^^^^\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error[E0308]: mismatched types\n   --> $DIR/issue-73260.rs:17:12\n    |\n-LL |     let x: Arr<{usize::max_value()}> = Arr {};\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n+LL |     let x: Arr<{usize::MAX}> = Arr {};\n+   |            ^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n    |\n    = note: expected type `false`\n               found type `true`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-73260.rs:17:40\n+  --> $DIR/issue-73260.rs:17:32\n    |\n-LL |     let x: Arr<{usize::max_value()}> = Arr {};\n-   |                                        ^^^ expected `false`, found `true`\n+LL |     let x: Arr<{usize::MAX}> = Arr {};\n+   |                                ^^^ expected `false`, found `true`\n    |\n    = note: expected type `false`\n               found type `true`"}, {"sha": "13dfe7fac990093b3143be265662b05c4aa0818b", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,6 +1,6 @@\n #![deny(const_err)]\n \n-pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n+pub const A: i8 = -i8::MIN; //~ ERROR const_err\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err"}, {"sha": "ec55139f173457afff11d1be64a337eac9702fc9", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:3:19\n    |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   | ------------------^^^^^^^^^^^^^-\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n    |                   |\n    |                   attempt to negate `i8::MIN`, which would overflow\n    |"}, {"sha": "ce74fae98162d4ff486bab8ff072a57fcf96e310", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,6 +1,6 @@\n #![deny(const_err)]\n \n-pub const A: i8 = -std::i8::MIN;\n+pub const A: i8 = -i8::MIN;\n //~^ ERROR const_err\n pub const B: i8 = A;\n //~^ ERROR const_err"}, {"sha": "b3123b4e359284dd7fd6d621dfadbfe2ebe90eca", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,8 +1,8 @@\n error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:3:19\n    |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   | ------------------^^^^^^^^^^^^^-\n+LL | pub const A: i8 = -i8::MIN;\n+   | ------------------^^^^^^^^-\n    |                   |\n    |                   attempt to negate `i8::MIN`, which would overflow\n    |"}, {"sha": "8b1688c4a898910a3e143ce09a1344d9bf7ec953", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,16 +1,16 @@\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n+LL |     let a = -i8::MIN;\n+   |             ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n+LL |     let a_i128 = -i128::MIN;\n+   |                  ^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n@@ -21,8 +21,8 @@ LL |     let b = 200u8 + 200u8 + 200u8;\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n+LL |     let b_i128 = i128::MIN - i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13"}, {"sha": "8b1688c4a898910a3e143ce09a1344d9bf7ec953", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,16 +1,16 @@\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n+LL |     let a = -i8::MIN;\n+   |             ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n+LL |     let a_i128 = -i128::MIN;\n+   |                  ^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n@@ -21,8 +21,8 @@ LL |     let b = 200u8 + 200u8 + 200u8;\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n+LL |     let b_i128 = i128::MIN - i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13"}, {"sha": "8b1688c4a898910a3e143ce09a1344d9bf7ec953", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,16 +1,16 @@\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:19:13\n    |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n+LL |     let a = -i8::MIN;\n+   |             ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:21:18\n    |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n+LL |     let a_i128 = -i128::MIN;\n+   |                  ^^^^^^^^^^ attempt to negate `i128::MIN`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:23:13\n@@ -21,8 +21,8 @@ LL |     let b = 200u8 + 200u8 + 200u8;\n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:25:18\n    |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n+LL |     let b_i128 = i128::MIN - i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i128::MIN - i128::MAX`, which would overflow\n \n error: this arithmetic operation will overflow\n   --> $DIR/const-err2.rs:27:13"}, {"sha": "db49ec25aaaeb70ff10d269bd0400355f5ca9aaf", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -16,13 +16,13 @@ fn black_box<T>(_: T) {\n }\n \n fn main() {\n-    let a = -std::i8::MIN;\n+    let a = -i8::MIN;\n     //~^ ERROR arithmetic operation will overflow\n-    let a_i128 = -std::i128::MIN;\n+    let a_i128 = -i128::MIN;\n     //~^ ERROR arithmetic operation will overflow\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ ERROR arithmetic operation will overflow\n-    let b_i128 = std::i128::MIN - std::i128::MAX;\n+    let b_i128 = i128::MIN - i128::MAX;\n     //~^ ERROR arithmetic operation will overflow\n     let c = 200u8 * 4;\n     //~^ ERROR arithmetic operation will overflow"}, {"sha": "bcc966dc9621cc04a2170f143c6c09143b206315", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -12,8 +12,6 @@\n #![allow(unused_imports)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const A_I8_I\n     : [u32; (i8::MAX as usize) + 1]"}, {"sha": "73f421b5b1465e2a3ec8c95b8630a41278b79980", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-overflow-3.rs:20:11\n+  --> $DIR/const-eval-overflow-3.rs:18:11\n    |\n LL |     = [0; (i8::MAX + 1) as usize];\n    |           ^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow"}, {"sha": "480069e67fa28d8fdb5fda90625df61ad30b4789", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -10,8 +10,6 @@\n #![allow(unused_imports)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const A_I8_I\n     : [u32; (i8::MAX as usize) + 1]"}, {"sha": "2b96b6681928616b66f189054477ee2829aba60e", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-eval-overflow-3b.rs:18:22\n+  --> $DIR/const-eval-overflow-3b.rs:16:22\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                      ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n-  --> $DIR/const-eval-overflow-3b.rs:18:20\n+  --> $DIR/const-eval-overflow-3b.rs:16:20\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`"}, {"sha": "762c7a968a8ffd7495d613759ad6bfd3a84059a7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,8 +6,6 @@\n #![allow(unused_imports)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]"}, {"sha": "94f4193195c20280e061940196c222bdfdbd8501", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-overflow-4.rs:13:13\n+  --> $DIR/const-eval-overflow-4.rs:11:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow"}, {"sha": "ce9c980de0dd2cadaa0743dd09222573997647a7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -5,9 +5,6 @@\n \n #![allow(unused_imports)]\n \n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n-\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types"}, {"sha": "1e181c465dba768c3b628cbd50c4b6c613ee9a39", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,19 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-eval-overflow-4b.rs:12:30\n+  --> $DIR/const-eval-overflow-4b.rs:9:30\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                              ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n-  --> $DIR/const-eval-overflow-4b.rs:12:28\n+  --> $DIR/const-eval-overflow-4b.rs:9:28\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`\n-  --> $DIR/const-eval-overflow-4b.rs:25:13\n+  --> $DIR/const-eval-overflow-4b.rs:22:13\n    |\n LL |     : [u32; 5i8 as char as usize]\n    |             ^^^^^^^^^^^ invalid cast"}, {"sha": "57a9dd55c8b55ff6a92f4cc3e2ab4278dfb6a226", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -8,8 +8,6 @@\n #![deny(const_err)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n     ("}, {"sha": "8864bc170f2eec62897f7604799f43cebc8d45df", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:16:6\n+  --> $DIR/const-eval-overflow2.rs:14:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n@@ -15,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:22:6\n+  --> $DIR/const-eval-overflow2.rs:20:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n@@ -25,7 +25,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:28:6\n+  --> $DIR/const-eval-overflow2.rs:26:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n@@ -35,7 +35,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:34:6\n+  --> $DIR/const-eval-overflow2.rs:32:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n@@ -45,7 +45,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:40:6\n+  --> $DIR/const-eval-overflow2.rs:38:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n@@ -55,7 +55,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:45:6\n+  --> $DIR/const-eval-overflow2.rs:43:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n@@ -64,7 +64,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:50:6\n+  --> $DIR/const-eval-overflow2.rs:48:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n@@ -73,7 +73,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:56:6\n+  --> $DIR/const-eval-overflow2.rs:54:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     ("}, {"sha": "e87952ab0f438f9e5fc1bab7acf9056952b3691a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -8,8 +8,6 @@\n #![deny(const_err)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n     ("}, {"sha": "e66e80c8f1937f90312262067305a1fd86dec85b", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:16:6\n+  --> $DIR/const-eval-overflow2b.rs:14:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n@@ -15,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:22:6\n+  --> $DIR/const-eval-overflow2b.rs:20:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n@@ -25,7 +25,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:28:6\n+  --> $DIR/const-eval-overflow2b.rs:26:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n@@ -35,7 +35,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:34:6\n+  --> $DIR/const-eval-overflow2b.rs:32:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n@@ -45,7 +45,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:40:6\n+  --> $DIR/const-eval-overflow2b.rs:38:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n@@ -55,7 +55,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:45:6\n+  --> $DIR/const-eval-overflow2b.rs:43:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n@@ -64,7 +64,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:50:6\n+  --> $DIR/const-eval-overflow2b.rs:48:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n@@ -73,7 +73,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:56:6\n+  --> $DIR/const-eval-overflow2b.rs:54:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     ("}, {"sha": "84d3dd20a924e6769fab6885c4d9f0bde0b53f6b", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -8,8 +8,6 @@\n #![deny(const_err)]\n \n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n     ("}, {"sha": "10e308938f3a1e38209e869f263720582e500295", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:16:6\n+  --> $DIR/const-eval-overflow2c.rs:14:6\n    |\n LL | / const VALS_I8: (i8,) =\n LL | |     (\n@@ -15,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:22:6\n+  --> $DIR/const-eval-overflow2c.rs:20:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n@@ -25,7 +25,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:28:6\n+  --> $DIR/const-eval-overflow2c.rs:26:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n@@ -35,7 +35,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:34:6\n+  --> $DIR/const-eval-overflow2c.rs:32:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n@@ -45,7 +45,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:40:6\n+  --> $DIR/const-eval-overflow2c.rs:38:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n@@ -55,7 +55,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:45:6\n+  --> $DIR/const-eval-overflow2c.rs:43:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n@@ -64,7 +64,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:50:6\n+  --> $DIR/const-eval-overflow2c.rs:48:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n@@ -73,7 +73,7 @@ LL | |      );\n    | |_______-\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:56:6\n+  --> $DIR/const-eval-overflow2c.rs:54:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     ("}, {"sha": "72e97c03220fc91dd10337d8c26dfef51e843303", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,6 +1,6 @@\n #![feature(const_raw_ptr_deref)]\n \n-use std::{mem, usize};\n+use std::mem;\n \n // Make sure we error with the right kind of error on a too large slice.\n const TEST: () = { unsafe { //~ NOTE"}, {"sha": "e0d722ede94e343634725e6b636b81dce58b3010", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -5,8 +5,6 @@\n #![feature(const_overflowing_int_methods)]\n #![feature(const_wrapping_int_methods)]\n \n-use std::{i8, i128};\n-\n macro_rules! suite {\n     ($(\n         $fn:ident -> $ty:ty { $( $label:ident : $expr:expr, $result:expr; )* }"}, {"sha": "75e77fdf1be1736992a9d8ae58607ceda8558c44", "filename": "src/test/ui/consts/const-int-overflowing-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -16,7 +16,7 @@ const SHR_A: (u32, bool) = 0x10u32.overflowing_shr(4);\n const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n \n const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n-const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n+const NEG_B: (u32, bool) = u32::MAX.overflowing_neg();\n \n const ABS_POS: (i32, bool) = 10i32.overflowing_abs();\n const ABS_NEG: (i32, bool) = (-10i32).overflowing_abs();"}, {"sha": "26c3c0b836bec5ee7f9231dbf3fed495dc1ba262", "filename": "src/test/ui/consts/const-negation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-negation.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -8,19 +8,19 @@ fn main() {\n     const I: isize = -2147483648isize;\n     #[cfg(target_pointer_width = \"64\")]\n     const I: isize = -9223372036854775808isize;\n-    assert_eq!(::std::i32::MIN as u64, 0xffffffff80000000);\n+    assert_eq!(i32::MIN as u64, 0xffffffff80000000);\n     assert_eq!(-2147483648isize as u64, 0xffffffff80000000);\n     assert_eq!(-2147483648i32 as u64, 0xffffffff80000000);\n-    assert_eq!(::std::i64::MIN as u64, 0x8000000000000000);\n+    assert_eq!(i64::MIN as u64, 0x8000000000000000);\n     #[cfg(target_pointer_width = \"64\")]\n     assert_eq!(-9223372036854775808isize as u64, 0x8000000000000000);\n     #[cfg(target_pointer_width = \"32\")]\n     assert_eq!(-9223372036854775808isize as u64, 0);\n     assert_eq!(-9223372036854775808i32 as u64, 0);\n-    const J: usize = ::std::i32::MAX as usize;\n+    const J: usize = i32::MAX as usize;\n     const K: usize = -1i32 as u32 as usize;\n-    const L: usize = ::std::i32::MIN as usize;\n-    const M: usize = ::std::i64::MIN as usize;\n+    const L: usize = i32::MIN as usize;\n+    const M: usize = i64::MIN as usize;\n     match 5 {\n         J => {},\n         K => {},"}, {"sha": "f50e1e51f612f8b55a9a39dccc46c19bccc9cf56", "filename": "src/test/ui/consts/issue-63952.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #63952, shouldn't hang.\n \n-use std::usize;\n-\n #[repr(C)]\n #[derive(Copy, Clone)]\n struct SliceRepr {"}, {"sha": "503c5706fa24ee70a3276629a7275f75d3ec88c3", "filename": "src/test/ui/consts/issue-63952.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-63952.rs:18:1\n+  --> $DIR/issue-63952.rs:16:1\n    |\n LL | / const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n LL | |     SliceTransmute {"}, {"sha": "557f6a434f4cd3c7eb022d740c7fba6f4dfdfd2c", "filename": "src/test/ui/consts/promote_fn_calls_std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,3 +1,4 @@\n+#![allow(deprecated, deprecated_in_future)] // can be removed if different fns are chosen\n // build-pass (FIXME(62277): could be check-pass?)\n \n fn main() {"}, {"sha": "e6f5c3d27ca994f5d737641669de79036d22279a", "filename": "src/test/ui/consts/promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -13,5 +13,5 @@ fn main() {\n \n     // make sure that these do not cause trouble despite overflowing\n     baz_u32(&(0-1));\n-    baz_i32(&-std::i32::MIN);\n+    baz_i32(&-i32::MIN);\n }"}, {"sha": "3cf0ea0e6b99768b21e0139acb39f0735fd7c557", "filename": "src/test/ui/discrim/discrim-ill-typed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -7,8 +7,6 @@\n \n #![allow(dead_code, unused_variables, unused_imports)]\n \n-use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n-\n fn f_i8() {\n     #[repr(i8)]\n     enum A {"}, {"sha": "9a695a8987a37c40b61649c5ac94bc0891923374", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:17:16\n+  --> $DIR/discrim-ill-typed.rs:15:16\n    |\n LL |         OhNo = 0_u8,\n    |                ^^^^ expected `i8`, found `u8`\n@@ -10,7 +10,7 @@ LL |         OhNo = 0_i8,\n    |                ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:30:16\n+  --> $DIR/discrim-ill-typed.rs:28:16\n    |\n LL |         OhNo = 0_i8,\n    |                ^^^^ expected `u8`, found `i8`\n@@ -21,7 +21,7 @@ LL |         OhNo = 0_u8,\n    |                ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:43:16\n+  --> $DIR/discrim-ill-typed.rs:41:16\n    |\n LL |         OhNo = 0_u16,\n    |                ^^^^^ expected `i16`, found `u16`\n@@ -32,7 +32,7 @@ LL |         OhNo = 0_i16,\n    |                ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:56:16\n+  --> $DIR/discrim-ill-typed.rs:54:16\n    |\n LL |         OhNo = 0_i16,\n    |                ^^^^^ expected `u16`, found `i16`\n@@ -43,7 +43,7 @@ LL |         OhNo = 0_u16,\n    |                ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:69:16\n+  --> $DIR/discrim-ill-typed.rs:67:16\n    |\n LL |         OhNo = 0_u32,\n    |                ^^^^^ expected `i32`, found `u32`\n@@ -54,7 +54,7 @@ LL |         OhNo = 0_i32,\n    |                ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:82:16\n+  --> $DIR/discrim-ill-typed.rs:80:16\n    |\n LL |         OhNo = 0_i32,\n    |                ^^^^^ expected `u32`, found `i32`\n@@ -65,7 +65,7 @@ LL |         OhNo = 0_u32,\n    |                ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:95:16\n+  --> $DIR/discrim-ill-typed.rs:93:16\n    |\n LL |         OhNo = 0_u64,\n    |                ^^^^^ expected `i64`, found `u64`\n@@ -76,7 +76,7 @@ LL |         OhNo = 0_i64,\n    |                ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/discrim-ill-typed.rs:108:16\n+  --> $DIR/discrim-ill-typed.rs:106:16\n    |\n LL |         OhNo = 0_i64,\n    |                ^^^^^ expected `u64`, found `i64`"}, {"sha": "ca24317c54dc216de5936d19eca39b61450103b5", "filename": "src/test/ui/discrim/discrim-overflow-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -5,8 +5,6 @@\n // See also run-pass/discrim-explicit-23030.rs where the suggested\n // workaround is tested.\n \n-use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n-\n fn f_i8() {\n     #[repr(i8)]\n     enum A {"}, {"sha": "3ca84c66753575dc9c609c60490cf23529381a00", "filename": "src/test/ui/discrim/discrim-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:15:9\n+  --> $DIR/discrim-overflow-2.rs:13:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:24:9\n+  --> $DIR/discrim-overflow-2.rs:22:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:33:9\n+  --> $DIR/discrim-overflow-2.rs:31:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:42:9\n+  --> $DIR/discrim-overflow-2.rs:40:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:51:9\n+  --> $DIR/discrim-overflow-2.rs:49:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:60:9\n+  --> $DIR/discrim-overflow-2.rs:58:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:69:9\n+  --> $DIR/discrim-overflow-2.rs:67:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:78:9\n+  --> $DIR/discrim-overflow-2.rs:76:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "774ced93c17238fe634eb7f0e6bfec8264239967", "filename": "src/test/ui/discrim/discrim-overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,8 +3,6 @@\n // See also run-pass/discrim-explicit-23030.rs where the suggested\n // workaround is tested.\n \n-use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n-\n fn f_i8() {\n     #[repr(i8)]\n     enum A {"}, {"sha": "1b331bb1b8d98301a54f5d5e67d65deb4292e346", "filename": "src/test/ui/discrim/discrim-overflow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:13:9\n+  --> $DIR/discrim-overflow.rs:11:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:24:9\n+  --> $DIR/discrim-overflow.rs:22:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:35:9\n+  --> $DIR/discrim-overflow.rs:33:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:46:9\n+  --> $DIR/discrim-overflow.rs:44:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:58:9\n+  --> $DIR/discrim-overflow.rs:56:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:70:9\n+  --> $DIR/discrim-overflow.rs:68:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:82:9\n+  --> $DIR/discrim-overflow.rs:80:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:94:9\n+  --> $DIR/discrim-overflow.rs:92:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "c4f7c3786168b437a732b0c50a4f076486c74d22", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -18,7 +18,6 @@ use std::{\n     ptr,\n     rc::Rc,\n     task::{Context, Poll, RawWaker, RawWakerVTable, Waker},\n-    usize,\n };\n \n struct InjectedFailure;"}, {"sha": "88f557055f371e98cc193eee2147bf3ca98d3578", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -12,7 +12,6 @@ use std::mem::ManuallyDrop;\n use std::ops::Generator;\n use std::panic;\n use std::pin::Pin;\n-use std::usize;\n \n struct InjectedFailure;\n "}, {"sha": "4c77180b767a3c166ea49ae58ec84bbf6bb1f35a", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,3 @@\n-use std::{isize, usize};\n-\n fn main() {\n     match 0usize {\n         //~^ ERROR non-exhaustive patterns: `_` not covered"}, {"sha": "9895646fc2ba477d8aa3c7d530acf78a79c46731", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-precise_pointer_size_matching.rs:4:11\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:2:11\n    |\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -10,7 +10,7 @@ LL |     match 0usize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-precise_pointer_size_matching.rs:12:11\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered"}, {"sha": "be225359bffabd5a6b2cad11c8b049439064439a", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -13,8 +13,8 @@ macro_rules! m {\n }\n \n fn floats() {\n-    m!(0f32, core::f32::NEG_INFINITY..); //~ ERROR non-exhaustive patterns: `_` not covered\n-    m!(0f32, ..core::f32::INFINITY); //~ ERROR non-exhaustive patterns: `_` not covered\n+    m!(0f32, f32::NEG_INFINITY..); //~ ERROR non-exhaustive patterns: `_` not covered\n+    m!(0f32, ..f32::INFINITY); //~ ERROR non-exhaustive patterns: `_` not covered\n }\n \n fn khar() {\n@@ -33,64 +33,64 @@ fn khar() {\n \n mod unsigned {\n     fn u8() {\n-        const ALMOST_MAX: u8 = core::u8::MAX - 1;\n-        const ALMOST_MIN: u8 = core::u8::MIN + 1;\n+        const ALMOST_MAX: u8 = u8::MAX - 1;\n+        const ALMOST_MIN: u8 = u8::MIN + 1;\n         const VAL: u8 = 42;\n         const VAL_1: u8 = VAL + 1;\n         const VAL_2: u8 = VAL + 2;\n-        m!(0, ..core::u8::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..u8::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn u16() {\n-        const ALMOST_MAX: u16 = core::u16::MAX - 1;\n-        const ALMOST_MIN: u16 = core::u16::MIN + 1;\n+        const ALMOST_MAX: u16 = u16::MAX - 1;\n+        const ALMOST_MIN: u16 = u16::MIN + 1;\n         const VAL: u16 = 42;\n         const VAL_1: u16 = VAL + 1;\n         const VAL_2: u16 = VAL + 2;\n-        m!(0, ..core::u16::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..u16::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn u32() {\n-        const ALMOST_MAX: u32 = core::u32::MAX - 1;\n-        const ALMOST_MIN: u32 = core::u32::MIN + 1;\n+        const ALMOST_MAX: u32 = u32::MAX - 1;\n+        const ALMOST_MIN: u32 = u32::MIN + 1;\n         const VAL: u32 = 42;\n         const VAL_1: u32 = VAL + 1;\n         const VAL_2: u32 = VAL + 2;\n-        m!(0, ..core::u32::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..u32::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn u64() {\n-        const ALMOST_MAX: u64 = core::u64::MAX - 1;\n-        const ALMOST_MIN: u64 = core::u64::MIN + 1;\n+        const ALMOST_MAX: u64 = u64::MAX - 1;\n+        const ALMOST_MIN: u64 = u64::MIN + 1;\n         const VAL: u64 = 42;\n         const VAL_1: u64 = VAL + 1;\n         const VAL_2: u64 = VAL + 2;\n-        m!(0, ..core::u64::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..u64::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn u128() {\n-        const ALMOST_MAX: u128 = core::u128::MAX - 1;\n-        const ALMOST_MIN: u128 = core::u128::MIN + 1;\n+        const ALMOST_MAX: u128 = u128::MAX - 1;\n+        const ALMOST_MIN: u128 = u128::MIN + 1;\n         const VAL: u128 = 42;\n         const VAL_1: u128 = VAL + 1;\n         const VAL_2: u128 = VAL + 2;\n-        m!(0, ..core::u128::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..u128::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n@@ -101,64 +101,64 @@ mod unsigned {\n \n mod signed {\n     fn i8() {\n-        const ALMOST_MAX: i8 = core::i8::MAX - 1;\n-        const ALMOST_MIN: i8 = core::i8::MIN + 1;\n+        const ALMOST_MAX: i8 = i8::MAX - 1;\n+        const ALMOST_MIN: i8 = i8::MIN + 1;\n         const VAL: i8 = 42;\n         const VAL_1: i8 = VAL + 1;\n         const VAL_2: i8 = VAL + 2;\n-        m!(0, ..core::i8::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..i8::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn i16() {\n-        const ALMOST_MAX: i16 = core::i16::MAX - 1;\n-        const ALMOST_MIN: i16 = core::i16::MIN + 1;\n+        const ALMOST_MAX: i16 = i16::MAX - 1;\n+        const ALMOST_MIN: i16 = i16::MIN + 1;\n         const VAL: i16 = 42;\n         const VAL_1: i16 = VAL + 1;\n         const VAL_2: i16 = VAL + 2;\n-        m!(0, ..core::i16::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..i16::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn i32() {\n-        const ALMOST_MAX: i32 = core::i32::MAX - 1;\n-        const ALMOST_MIN: i32 = core::i32::MIN + 1;\n+        const ALMOST_MAX: i32 = i32::MAX - 1;\n+        const ALMOST_MIN: i32 = i32::MIN + 1;\n         const VAL: i32 = 42;\n         const VAL_1: i32 = VAL + 1;\n         const VAL_2: i32 = VAL + 2;\n-        m!(0, ..core::i32::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..i32::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn i64() {\n-        const ALMOST_MAX: i64 = core::i64::MAX - 1;\n-        const ALMOST_MIN: i64 = core::i64::MIN + 1;\n+        const ALMOST_MAX: i64 = i64::MAX - 1;\n+        const ALMOST_MIN: i64 = i64::MIN + 1;\n         const VAL: i64 = 42;\n         const VAL_1: i64 = VAL + 1;\n         const VAL_2: i64 = VAL + 2;\n-        m!(0, ..core::i64::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..i64::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n         m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n     }\n     fn i128() {\n-        const ALMOST_MAX: i128 = core::i128::MAX - 1;\n-        const ALMOST_MIN: i128 = core::i128::MIN + 1;\n+        const ALMOST_MAX: i128 = i128::MAX - 1;\n+        const ALMOST_MIN: i128 = i128::MIN + 1;\n         const VAL: i128 = 42;\n         const VAL_1: i128 = VAL + 1;\n         const VAL_2: i128 = VAL + 2;\n-        m!(0, ..core::i128::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..i128::MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n         m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n         m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns"}, {"sha": "14dbca60b78f238d8202519ccd52e8d825a0fca8", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,7 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:16:8\n    |\n-LL |     m!(0f32, core::f32::NEG_INFINITY..);\n+LL |     m!(0f32, f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -10,7 +10,7 @@ LL |     m!(0f32, core::f32::NEG_INFINITY..);\n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n    |\n-LL |     m!(0f32, ..core::f32::INFINITY);\n+LL |     m!(0f32, ..f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -73,7 +73,7 @@ LL |     m!('a', ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n    |\n-LL |         m!(0, ..core::u8::MAX);\n+LL |         m!(0, ..u8::MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -127,7 +127,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n    |\n-LL |         m!(0, ..core::u16::MAX);\n+LL |         m!(0, ..u16::MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -181,7 +181,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n    |\n-LL |         m!(0, ..core::u32::MAX);\n+LL |         m!(0, ..u32::MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -235,7 +235,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n    |\n-LL |         m!(0, ..core::u64::MAX);\n+LL |         m!(0, ..u64::MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -289,7 +289,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n    |\n-LL |         m!(0, ..core::u128::MAX);\n+LL |         m!(0, ..u128::MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -343,7 +343,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n    |\n-LL |         m!(0, ..core::i8::MAX);\n+LL |         m!(0, ..i8::MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -397,7 +397,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n    |\n-LL |         m!(0, ..core::i16::MAX);\n+LL |         m!(0, ..i16::MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -451,7 +451,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n    |\n-LL |         m!(0, ..core::i32::MAX);\n+LL |         m!(0, ..i32::MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -505,7 +505,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n    |\n-LL |         m!(0, ..core::i64::MAX);\n+LL |         m!(0, ..i64::MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -559,7 +559,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n    |\n-LL |         m!(0, ..core::i128::MAX);\n+LL |         m!(0, ..i128::MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms"}, {"sha": "d3a59e4dffcd620f9b045c49865b4157ba4b7a74", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -26,19 +26,19 @@ macro_rules! test_int {\n }\n \n fn unsigned_int() {\n-    test_int!(0u8, core::u8::MIN, core::u8::MAX);\n-    test_int!(0u16, core::u16::MIN, core::u16::MAX);\n-    test_int!(0u32, core::u32::MIN, core::u32::MAX);\n-    test_int!(0u64, core::u64::MIN, core::u64::MAX);\n-    test_int!(0u128, core::u128::MIN, core::u128::MAX);\n+    test_int!(0u8, u8::MIN, u8::MAX);\n+    test_int!(0u16, u16::MIN, u16::MAX);\n+    test_int!(0u32, u32::MIN, u32::MAX);\n+    test_int!(0u64, u64::MIN, u64::MAX);\n+    test_int!(0u128, u128::MIN, u128::MAX);\n }\n \n fn signed_int() {\n-    test_int!(0i8, core::i8::MIN, core::i8::MAX);\n-    test_int!(0i16, core::i16::MIN, core::i16::MAX);\n-    test_int!(0i32, core::i32::MIN, core::i32::MAX);\n-    test_int!(0i64, core::i64::MIN, core::i64::MAX);\n-    test_int!(0i128, core::i128::MIN, core::i128::MAX);\n+    test_int!(0i8, i8::MIN, i8::MAX);\n+    test_int!(0i16, i16::MIN, i16::MAX);\n+    test_int!(0i32, i32::MIN, i32::MAX);\n+    test_int!(0i64, i64::MIN, i64::MAX);\n+    test_int!(0i128, i128::MIN, i128::MAX);\n }\n \n fn khar() {"}, {"sha": "ae532d935df82e00e19bc0fe9717e0201fcca640", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-semantics.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -24,15 +24,15 @@ fn range_to_inclusive() {\n     //---------------------------------------\n \n     // u8; `..=X`\n-    assert!(yes!(core::u8::MIN, ..=core::u8::MIN));\n-    assert!(yes!(core::u8::MIN, ..=5));\n+    assert!(yes!(u8::MIN, ..=u8::MIN));\n+    assert!(yes!(u8::MIN, ..=5));\n     assert!(yes!(5u8, ..=5));\n     assert!(!yes!(6u8, ..=5));\n \n     // i16; `..=X`\n-    assert!(yes!(core::i16::MIN, ..=core::i16::MIN));\n-    assert!(yes!(core::i16::MIN, ..=0));\n-    assert!(yes!(core::i16::MIN, ..=-5));\n+    assert!(yes!(i16::MIN, ..=i16::MIN));\n+    assert!(yes!(i16::MIN, ..=0));\n+    assert!(yes!(i16::MIN, ..=-5));\n     assert!(yes!(-5, ..=-5));\n     assert!(!yes!(-4, ..=-5));\n \n@@ -43,14 +43,14 @@ fn range_to_inclusive() {\n     assert!(!yes!('b', ..='a'));\n \n     // f32; `..=X`\n-    assert!(yes!(core::f32::NEG_INFINITY, ..=core::f32::NEG_INFINITY));\n-    assert!(yes!(core::f32::NEG_INFINITY, ..=1.0f32));\n+    assert!(yes!(f32::NEG_INFINITY, ..=f32::NEG_INFINITY));\n+    assert!(yes!(f32::NEG_INFINITY, ..=1.0f32));\n     assert!(yes!(1.5f32, ..=1.5f32));\n     assert!(!yes!(1.6f32, ..=-1.5f32));\n \n     // f64; `..=X`\n-    assert!(yes!(core::f64::NEG_INFINITY, ..=core::f64::NEG_INFINITY));\n-    assert!(yes!(core::f64::NEG_INFINITY, ..=1.0f64));\n+    assert!(yes!(f64::NEG_INFINITY, ..=f64::NEG_INFINITY));\n+    assert!(yes!(f64::NEG_INFINITY, ..=1.0f64));\n     assert!(yes!(1.5f64, ..=1.5f64));\n     assert!(!yes!(1.6f64, ..=-1.5f64));\n }\n@@ -66,16 +66,16 @@ fn range_to() {\n     assert!(!yes!(6u8, ..5));\n \n     // u8; `..X`\n-    const NU8: u8 = core::u8::MIN + 1;\n-    assert!(yes!(core::u8::MIN, ..NU8));\n+    const NU8: u8 = u8::MIN + 1;\n+    assert!(yes!(u8::MIN, ..NU8));\n     assert!(yes!(0u8, ..5));\n     assert!(!yes!(5u8, ..5));\n     assert!(!yes!(6u8, ..5));\n \n     // i16; `..X`\n-    const NI16: i16 = core::i16::MIN + 1;\n-    assert!(yes!(core::i16::MIN, ..NI16));\n-    assert!(yes!(core::i16::MIN, ..5));\n+    const NI16: i16 = i16::MIN + 1;\n+    assert!(yes!(i16::MIN, ..NI16));\n+    assert!(yes!(i16::MIN, ..5));\n     assert!(yes!(-6, ..-5));\n     assert!(!yes!(-5, ..-5));\n \n@@ -87,16 +87,16 @@ fn range_to() {\n     assert!(!yes!('b', ..'a'));\n \n     // f32; `..X`\n-    assert!(yes!(core::f32::NEG_INFINITY, ..1.0f32));\n+    assert!(yes!(f32::NEG_INFINITY, ..1.0f32));\n     assert!(!yes!(1.5f32, ..1.5f32));\n-    const E32: f32 = 1.5f32 + core::f32::EPSILON;\n+    const E32: f32 = 1.5f32 + f32::EPSILON;\n     assert!(yes!(1.5f32, ..E32));\n     assert!(!yes!(1.6f32, ..1.5f32));\n \n     // f64; `..X`\n-    assert!(yes!(core::f64::NEG_INFINITY, ..1.0f64));\n+    assert!(yes!(f64::NEG_INFINITY, ..1.0f64));\n     assert!(!yes!(1.5f64, ..1.5f64));\n-    const E64: f64 = 1.5f64 + core::f64::EPSILON;\n+    const E64: f64 = 1.5f64 + f64::EPSILON;\n     assert!(yes!(1.5f64, ..E64));\n     assert!(!yes!(1.6f64, ..1.5f64));\n }\n@@ -106,23 +106,23 @@ fn range_from() {\n     //--------------------------------\n \n     // u8; `X..`\n-    assert!(yes!(core::u8::MIN, core::u8::MIN..));\n-    assert!(yes!(core::u8::MAX, core::u8::MIN..));\n-    assert!(!yes!(core::u8::MIN, 1..));\n+    assert!(yes!(u8::MIN, u8::MIN..));\n+    assert!(yes!(u8::MAX, u8::MIN..));\n+    assert!(!yes!(u8::MIN, 1..));\n     assert!(!yes!(4, 5..));\n     assert!(yes!(5, 5..));\n     assert!(yes!(6, 5..));\n-    assert!(yes!(core::u8::MAX, core::u8::MAX..));\n+    assert!(yes!(u8::MAX, u8::MAX..));\n \n     // i16; `X..`\n-    assert!(yes!(core::i16::MIN, core::i16::MIN..));\n-    assert!(yes!(core::i16::MAX, core::i16::MIN..));\n-    const NI16: i16 = core::i16::MIN + 1;\n-    assert!(!yes!(core::i16::MIN, NI16..));\n+    assert!(yes!(i16::MIN, i16::MIN..));\n+    assert!(yes!(i16::MAX, i16::MIN..));\n+    const NI16: i16 = i16::MIN + 1;\n+    assert!(!yes!(i16::MIN, NI16..));\n     assert!(!yes!(-4, 5..));\n     assert!(yes!(-4, -4..));\n     assert!(yes!(-3, -4..));\n-    assert!(yes!(core::i16::MAX, core::i16::MAX..));\n+    assert!(yes!(i16::MAX, i16::MAX..));\n \n     // char; `X..`\n     assert!(yes!('\\u{0}', '\\u{0}'..));\n@@ -133,24 +133,24 @@ fn range_from() {\n     assert!(yes!(core::char::MAX, core::char::MAX..));\n \n     // f32; `X..`\n-    assert!(yes!(core::f32::NEG_INFINITY, core::f32::NEG_INFINITY..));\n-    assert!(yes!(core::f32::INFINITY, core::f32::NEG_INFINITY..));\n-    assert!(!yes!(core::f32::NEG_INFINITY, 1.0f32..));\n-    assert!(yes!(core::f32::INFINITY, 1.0f32..));\n-    assert!(!yes!(1.0f32 - core::f32::EPSILON, 1.0f32..));\n+    assert!(yes!(f32::NEG_INFINITY, f32::NEG_INFINITY..));\n+    assert!(yes!(f32::INFINITY, f32::NEG_INFINITY..));\n+    assert!(!yes!(f32::NEG_INFINITY, 1.0f32..));\n+    assert!(yes!(f32::INFINITY, 1.0f32..));\n+    assert!(!yes!(1.0f32 - f32::EPSILON, 1.0f32..));\n     assert!(yes!(1.0f32, 1.0f32..));\n-    assert!(yes!(core::f32::INFINITY, 1.0f32..));\n-    assert!(yes!(core::f32::INFINITY, core::f32::INFINITY..));\n+    assert!(yes!(f32::INFINITY, 1.0f32..));\n+    assert!(yes!(f32::INFINITY, f32::INFINITY..));\n \n     // f64; `X..`\n-    assert!(yes!(core::f64::NEG_INFINITY, core::f64::NEG_INFINITY..));\n-    assert!(yes!(core::f64::INFINITY, core::f64::NEG_INFINITY..));\n-    assert!(!yes!(core::f64::NEG_INFINITY, 1.0f64..));\n-    assert!(yes!(core::f64::INFINITY, 1.0f64..));\n-    assert!(!yes!(1.0f64 - core::f64::EPSILON, 1.0f64..));\n+    assert!(yes!(f64::NEG_INFINITY, f64::NEG_INFINITY..));\n+    assert!(yes!(f64::INFINITY, f64::NEG_INFINITY..));\n+    assert!(!yes!(f64::NEG_INFINITY, 1.0f64..));\n+    assert!(yes!(f64::INFINITY, 1.0f64..));\n+    assert!(!yes!(1.0f64 - f64::EPSILON, 1.0f64..));\n     assert!(yes!(1.0f64, 1.0f64..));\n-    assert!(yes!(core::f64::INFINITY, 1.0f64..));\n-    assert!(yes!(core::f64::INFINITY, core::f64::INFINITY..));\n+    assert!(yes!(f64::INFINITY, 1.0f64..));\n+    assert!(yes!(f64::INFINITY, f64::INFINITY..));\n }\n \n fn main() {"}, {"sha": "2c8e554b229c86181ffa63fa91ce7f1bda0d36f4", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -9,42 +9,42 @@ macro_rules! m {\n }\n \n fn main() {\n-    m!(0, ..core::u8::MIN);\n+    m!(0, ..u8::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::u16::MIN);\n+    m!(0, ..u16::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::u32::MIN);\n+    m!(0, ..u32::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::u64::MIN);\n+    m!(0, ..u64::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::u128::MIN);\n+    m!(0, ..u128::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n \n-    m!(0, ..core::i8::MIN);\n+    m!(0, ..i8::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::i16::MIN);\n+    m!(0, ..i16::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::i32::MIN);\n+    m!(0, ..i32::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::i64::MIN);\n+    m!(0, ..i64::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0, ..core::i128::MIN);\n+    m!(0, ..i128::MIN);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n \n-    m!(0f32, ..core::f32::NEG_INFINITY);\n+    m!(0f32, ..f32::NEG_INFINITY);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n-    m!(0f64, ..core::f64::NEG_INFINITY);\n+    m!(0f64, ..f64::NEG_INFINITY);\n     //~^ ERROR lower range bound must be less than upper\n     //~| ERROR lower range bound must be less than upper\n "}, {"sha": "4931ddfac71c90c273e527ad570c0e2c4844ac24", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,74 +1,74 @@\n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n    |\n-LL |     m!(0, ..core::u8::MIN);\n-   |           ^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u8::MIN);\n+   |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n    |\n-LL |     m!(0, ..core::u16::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u16::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n    |\n-LL |     m!(0, ..core::u32::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u32::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n    |\n-LL |     m!(0, ..core::u64::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u64::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n    |\n-LL |     m!(0, ..core::u128::MIN);\n-   |           ^^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u128::MIN);\n+   |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n    |\n-LL |     m!(0, ..core::i8::MIN);\n-   |           ^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i8::MIN);\n+   |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n    |\n-LL |     m!(0, ..core::i16::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i16::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n    |\n-LL |     m!(0, ..core::i32::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i32::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n    |\n-LL |     m!(0, ..core::i64::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i64::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n    |\n-LL |     m!(0, ..core::i128::MIN);\n-   |           ^^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i128::MIN);\n+   |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n    |\n-LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     m!(0f32, ..f32::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n    |\n-LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     m!(0f64, ..f64::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13\n@@ -79,74 +79,74 @@ LL |     m!('a', ..'\\u{0}');\n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n    |\n-LL |     m!(0, ..core::u8::MIN);\n-   |           ^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u8::MIN);\n+   |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n    |\n-LL |     m!(0, ..core::u16::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u16::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n    |\n-LL |     m!(0, ..core::u32::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u32::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n    |\n-LL |     m!(0, ..core::u64::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u64::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n    |\n-LL |     m!(0, ..core::u128::MIN);\n-   |           ^^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..u128::MIN);\n+   |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n    |\n-LL |     m!(0, ..core::i8::MIN);\n-   |           ^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i8::MIN);\n+   |           ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n    |\n-LL |     m!(0, ..core::i16::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i16::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n    |\n-LL |     m!(0, ..core::i32::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i32::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n    |\n-LL |     m!(0, ..core::i64::MIN);\n-   |           ^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i64::MIN);\n+   |           ^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n    |\n-LL |     m!(0, ..core::i128::MIN);\n-   |           ^^^^^^^^^^^^^^^^^\n+LL |     m!(0, ..i128::MIN);\n+   |           ^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n    |\n-LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     m!(0f32, ..f32::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n    |\n-LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     m!(0f64, ..f64::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n   --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13"}, {"sha": "2988af06556d9bfabe676ba4e54edf314f255271", "filename": "src/test/ui/hashmap/hashmap-capacity-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-capacity-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-capacity-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-capacity-overflow.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,7 +3,6 @@\n // ignore-emscripten no processes\n \n use std::collections::hash_map::HashMap;\n-use std::usize;\n use std::mem::size_of;\n \n fn main() {"}, {"sha": "41922c6229351446d772870c9fad3d381feeef20", "filename": "src/test/ui/issues/issue-20427.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,6 +4,7 @@\n #![allow(unused_imports)]\n #![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n+#![allow(deprecated, deprecated_in_future)]\n \n // aux-build:i8.rs\n // ignore-pretty issue #37201"}, {"sha": "d4128fa54e3daf2059e1cebaffc8465a753243c9", "filename": "src/test/ui/issues/issue-23833.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-23833.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-23833.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23833.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(unused_imports)]\n use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 - 1i8) as usize]"}, {"sha": "ba58e9e9d897663ef44e8a8a70eb4f36ff97f471", "filename": "src/test/ui/issues/issue-37686.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-37686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-37686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37686.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n fn main() {\n     match (0, 0) {\n-        (std::usize::MIN, std::usize::MAX) => {}\n+        (usize::MIN, usize::MAX) => {}\n         _ => {}\n     }\n }"}, {"sha": "977c43b71fb713f8d2dd6c819e45e4242b9ee6ab", "filename": "src/test/ui/issues/issue-41880.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -19,7 +19,7 @@ impl<T: Clone, F> Iterator for Iterate<T, F> where F: Fn(&T) -> T {\n         Some(self.state.clone())\n     }\n     #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) { (std::usize::MAX, None) }\n+    fn size_hint(&self) -> (usize, Option<usize>) { (usize::MAX, None) }\n }\n \n fn main() {"}, {"sha": "cfef270e5a67c9643c39371c3d751afb60d5dfa1", "filename": "src/test/ui/issues/issue-48006.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-48006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-48006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48006.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,10 +6,10 @@ use std::iter::Step;\n \n #[cfg(target_pointer_width = \"16\")]\n fn main() {\n-    assert!(Step::steps_between(&0u32, &::std::u32::MAX).is_none());\n+    assert!(Step::steps_between(&0u32, &u32::MAX).is_none());\n }\n \n #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n fn main() {\n-    assert!(Step::steps_between(&0u32, &::std::u32::MAX).is_some());\n+    assert!(Step::steps_between(&0u32, &u32::MAX).is_some());\n }"}, {"sha": "683c856049fdca09ee6df51305e9824c8f689818", "filename": "src/test/ui/issues/issue-50811.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-50811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-50811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50811.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,7 +3,6 @@\n \n extern crate test;\n \n-use std::f64::{NAN, NEG_INFINITY, INFINITY, MAX};\n use std::mem::size_of;\n use test::black_box;\n \n@@ -12,15 +11,15 @@ use test::black_box;\n macro_rules! compare {\n     ($op:tt) => {\n         compare!(\n-            [NEG_INFINITY, -MAX, -1.0, -0.0, 0.0, 1.0, MAX, INFINITY, NAN],\n+            [f64::NEG_INFINITY, -f64::MAX, -1.0, -0.0, 0.0, 1.0, f64::MAX, f64::INFINITY, f64::NAN],\n             $op\n         );\n     };\n     ([$($lhs:expr),+], $op:tt) => {\n         $(compare!(\n             $lhs,\n             $op,\n-            [NEG_INFINITY, -MAX, -1.0, -0.0, 0.0, 1.0, MAX, INFINITY, NAN]\n+            [f64::NEG_INFINITY, -f64::MAX, -1.0, -0.0, 0.0, 1.0, f64::MAX, f64::INFINITY, f64::NAN]\n         );)+\n     };\n     ($lhs:expr, $op:tt, [$($rhs:expr),+]) => {\n@@ -44,8 +43,8 @@ macro_rules! compare {\n fn main() {\n     assert_eq!(0.0/0.0 < 0.0/0.0, false);\n     assert_eq!(0.0/0.0 > 0.0/0.0, false);\n-    assert_eq!(NAN < NAN, false);\n-    assert_eq!(NAN > NAN, false);\n+    assert_eq!(f64::NAN < f64::NAN, false);\n+    assert_eq!(f64::NAN > f64::NAN, false);\n \n     compare!(==);\n     compare!(!=);"}, {"sha": "3277df69c028521e1dd3d0025db6a653c0993ab9", "filename": "src/test/ui/issues/issue-68010-large-zst-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n \n fn main() {\n-    println!(\"{}\", [(); std::usize::MAX].len());\n+    println!(\"{}\", [(); usize::MAX].len());\n }"}, {"sha": "6d950c424e38178b605ffe099c35f453d7950482", "filename": "src/test/ui/issues/issue-6804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused)]\n #![deny(illegal_floating_point_literal_pattern)]\n \n-use std::f64::NAN;\n+const NAN: f64 = f64::NAN;\n \n fn main() {\n     let x = NAN;"}, {"sha": "d94c7742de301d397257de5e00eda4f5219e5142", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,147 +1,147 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:14:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:18:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:20:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:24:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:30:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:32:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:36:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:44:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:50:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:56:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:60:36\n+  --> $DIR/issue-8460-const.rs:59:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "d94c7742de301d397257de5e00eda4f5219e5142", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,147 +1,147 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:14:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:18:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:20:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:24:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:30:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:32:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:36:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:44:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:50:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:56:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:60:36\n+  --> $DIR/issue-8460-const.rs:59:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "d94c7742de301d397257de5e00eda4f5219e5142", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,147 +1,147 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:14:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:18:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:20:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:24:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute `i128::MIN / -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide `1_i8` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:30:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i16` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:32:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i32` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide `1_i64` by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:36:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:42:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:44:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-8460-const.rs:48:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^ attempt to compute the remainder of `i128::MIN % -1_i128`, which would overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:50:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder of `1_isize` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder of `1_i8` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:53:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i16` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:56:36\n+  --> $DIR/issue-8460-const.rs:55:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i32` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder of `1_i64` with a divisor of zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-8460-const.rs:60:36\n+  --> $DIR/issue-8460-const.rs:59:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to calculate the remainder of `1_i128` with a divisor of zero"}, {"sha": "dc754666c8e1fd1ff9599fceea08ff1f9f66cb61", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -7,7 +7,6 @@\n \n #![deny(const_err)]\n \n-use std::{isize, i8, i16, i32, i64, i128};\n use std::thread;\n \n fn main() {"}, {"sha": "5a0394ae760e9305c179ab6b1758980785a9e8ec", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,13 +4,12 @@\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;\n-use std::usize::MAX;\n \n fn main() {\n-    assert_eq!((0..MAX).by_ref().count(), MAX);\n+    assert_eq!((0..usize::MAX).by_ref().count(), usize::MAX);\n \n     let r = panic::catch_unwind(|| {\n-        (0..=MAX).by_ref().count()\n+        (0..=usize::MAX).by_ref().count()\n     });\n     assert!(r.is_err());\n }"}, {"sha": "dcaaff671b257a27e840a7fcabe0063a299f9375", "filename": "src/test/ui/iterators/iter-count-overflow-ndebug.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-ndebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-ndebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-ndebug.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -2,9 +2,7 @@\n // only-32bit too impatient for 2\u2076\u2074 items\n // compile-flags: -C debug_assertions=no -C opt-level=3\n \n-use std::usize::MAX;\n-\n fn main() {\n-    assert_eq!((0..MAX).by_ref().count(), MAX);\n-    assert_eq!((0..=MAX).by_ref().count(), 0);\n+    assert_eq!((0..usize::MAX).by_ref().count(), usize::MAX);\n+    assert_eq!((0..=usize::MAX).by_ref().count(), 0);\n }"}, {"sha": "733ee0c46cc3d6c5d1621f3a7c918c37be708de1", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,11 +4,10 @@\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;\n-use std::usize::MAX;\n \n fn main() {\n-    let n = MAX as u64;\n-    assert_eq!((0..).by_ref().position(|i| i >= n), Some(MAX));\n+    let n = usize::MAX as u64;\n+    assert_eq!((0..).by_ref().position(|i| i >= n), Some(usize::MAX));\n \n     let r = panic::catch_unwind(|| {\n         (0..).by_ref().position(|i| i > n)"}, {"sha": "e610c35599c4cb61ac1fb9a322cf3820d45d19f5", "filename": "src/test/ui/iterators/iter-position-overflow-ndebug.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-ndebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-ndebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-ndebug.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -2,11 +2,9 @@\n // only-32bit too impatient for 2\u2076\u2074 items\n // compile-flags: -C debug_assertions=no -C opt-level=3\n \n-use std::usize::MAX;\n-\n fn main() {\n-    let n = MAX as u64;\n-    assert_eq!((0..).by_ref().position(|i| i >= n), Some(MAX));\n+    let n = usize::MAX as u64;\n+    assert_eq!((0..).by_ref().position(|i| i >= n), Some(usize::MAX));\n     assert_eq!((0..).by_ref().position(|i| i > n), Some(0));\n     assert_eq!((0..=n + 1).by_ref().position(|_| false), None);\n }"}, {"sha": "f85376dabcb5de995bbfe5fc84fb6fe9f714b15e", "filename": "src/test/ui/macros/macro-first-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-first-set.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -249,7 +249,7 @@ macro_rules! test_path {\n test_path!();\n test_path!(,);\n test_path!(::std);\n-test_path!(std::u8,);\n+test_path!(std::ops,);\n test_path!(any, super, super::super::self::path, X<Y>::Z<'a, T=U>);\n \n macro_rules! test_lifetime {"}, {"sha": "52a5103865123ee44050b604fef98485eb820ef6", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,7 +1,5 @@\n #![feature(box_syntax, unboxed_closures)]\n \n-use std::usize;\n-\n fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n \n fn test(_x: Box<usize>) {}"}, {"sha": "9427ba546a9c10468153db4e4547826cf02713d0", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n-  --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:11:28\n+  --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:9:28\n    |\n LL |     let i = box 3;\n    |         - captured outer variable"}, {"sha": "7691149602bc6948d2f8aca86a5804c2d4520ea9", "filename": "src/test/ui/numbers-arithmetic/float-int-invalid-const-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -2,8 +2,6 @@\n \n #![deny(const_err)]\n \n-use std::{f32, f64};\n-\n // Forces evaluation of constants, triggering hard error\n fn force<T>(_: T) {}\n "}, {"sha": "0cc6473e5c48c440d813c2db388dc5787617145e", "filename": "src/test/ui/numbers-arithmetic/float-nan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-nan.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-use std::f64;\n \n pub fn main() {\n   let nan: f64 = f64::NAN;"}, {"sha": "43b1059f944eedb36abee54c754c52715460f999", "filename": "src/test/ui/numbers-arithmetic/num-wrapping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnum-wrapping.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -21,7 +21,8 @@ macro_rules! int_modules {\n     ($(($name:ident, $size:expr),)*) => ($(\n         mod $name {\n             pub const BITS: usize = $size;\n-            pub use std::$name::*;\n+            pub const MAX: $name = $name::MAX;\n+            pub const MIN: $name = $name::MIN;\n         }\n     )*)\n }"}, {"sha": "df1198053036d7ebd66d0298bf997ff78485d84a", "filename": "src/test/ui/numbers-arithmetic/overflowing-neg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -6,5 +6,5 @@\n #![allow(arithmetic_overflow)]\n \n fn main() {\n-    let _x = -std::i8::MIN;\n+    let _x = -i8::MIN;\n }"}, {"sha": "4c6929d6627a891043410207642932c7366201ac", "filename": "src/test/ui/numbers-arithmetic/saturating-float-casts-impl.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts-impl.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -11,10 +11,6 @@\n extern crate test;\n \n use self::test::black_box;\n-use std::{f32, f64};\n-#[cfg(not(target_os = \"emscripten\"))]\n-use std::{i128, u128};\n-use std::{i16, i32, i64, i8, u16, u32, u64, u8};\n \n macro_rules! test {\n     ($val:expr, $src_ty:ident -> $dest_ty:ident, $expected:expr) => ("}, {"sha": "55006a1134297e2a008c3d035e1af0faf97c2798", "filename": "src/test/ui/numbers-arithmetic/shift-near-oflo.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fshift-near-oflo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fshift-near-oflo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fshift-near-oflo.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -47,21 +47,21 @@ fn test_left_shift() {\n     let x = 1_u8 << id(0);\n     assert_eq!(x, 1);\n     let x = 1_i8 << id(7);\n-    assert_eq!(x, std::i8::MIN);\n+    assert_eq!(x, i8::MIN);\n     let x = 1_u8 << id(7);\n     assert_eq!(x, 0x80);\n     // high-order bits on LHS are silently discarded without panic.\n     let x = 3_i8 << id(7);\n-    assert_eq!(x, std::i8::MIN);\n+    assert_eq!(x, i8::MIN);\n     let x = 3_u8 << id(7);\n     assert_eq!(x, 0x80);\n \n     // above is (approximately) expanded from:\n-    tests!(i8, u8, 7, std::i8::MIN, 0x80_u8);\n+    tests!(i8, u8, 7, i8::MIN, 0x80_u8);\n \n-    tests!(i16, u16, 15, std::i16::MIN, 0x8000_u16);\n-    tests!(i32, u32, 31, std::i32::MIN, 0x8000_0000_u32);\n-    tests!(i64, u64, 63, std::i64::MIN, 0x8000_0000_0000_0000_u64);\n+    tests!(i16, u16, 15, i16::MIN, 0x8000_u16);\n+    tests!(i32, u32, 31, i32::MIN, 0x8000_0000_u32);\n+    tests!(i64, u64, 63, i64::MIN, 0x8000_0000_0000_0000_u64);\n }\n \n fn test_right_shift() {\n@@ -92,9 +92,9 @@ fn test_right_shift() {\n         } }\n     }\n \n-    tests!(i8, u8, 7, std::i8::MIN, 0x40_i8, 0x80_u8);\n-    tests!(i16, u16, 15, std::i16::MIN, 0x4000_u16, 0x8000_u16);\n-    tests!(i32, u32, 31, std::i32::MIN, 0x4000_0000_u32, 0x8000_0000_u32);\n-    tests!(i64, u64, 63, std::i64::MIN,\n+    tests!(i8, u8, 7, i8::MIN, 0x40_i8, 0x80_u8);\n+    tests!(i16, u16, 15, i16::MIN, 0x4000_u16, 0x8000_u16);\n+    tests!(i32, u32, 31, i32::MIN, 0x4000_0000_u32, 0x8000_0000_u32);\n+    tests!(i64, u64, 63, i64::MIN,\n            0x4000_0000_0000_0000_u64, 0x8000_0000_0000_0000_u64);\n }"}, {"sha": "839ce932d9e7695f408bffbf7f5806c78ef8d92d", "filename": "src/test/ui/numbers-arithmetic/u128-as-f32.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,8 +4,6 @@\n #![deny(overflowing_literals)]\n extern crate test;\n \n-use std::f32;\n-use std::u128;\n use test::black_box;\n \n macro_rules! test {"}, {"sha": "4c271a3916a69bac7fe3fa2592cc9f3292692398", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:20\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:20\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n@@ -9,7 +9,7 @@ LL |             let p: &'static mut usize = &mut self.food;\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:20\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n@@ -18,7 +18,7 @@ LL |             let p: &'static mut usize = &mut self.food;\n    |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:46\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:46\n    |\n LL |         let _f = || {\n    |                  -- value captured here"}, {"sha": "6159ab02d3d95161aa697138f24f8ba1832e68a6", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,3 @@\n-use std::usize;\n-\n struct Dog {\n     food: usize,\n }"}, {"sha": "62e9058365f11596cb7cb21bdffc9749ffd4cb0b", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,22 +1,22 @@\n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 9:18...\n-  --> $DIR/regions-addr-of-upvar-self.rs:9:18\n+note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 7:18...\n+  --> $DIR/regions-addr-of-upvar-self.rs:7:18\n    |\n LL |         let _f = || {\n    |                  ^^\n note: ...so that closure can access `self`\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-addr-of-upvar-self.rs:10:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:8:41\n    |\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^"}, {"sha": "fa5630837b9ad66748c0d6066b2ac88aab8715d2", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,5 +1,3 @@\n-use std::f32;\n-\n #[derive(PartialEq)]\n struct Foo {\n     x: u32"}, {"sha": "9a5d57d411832e3b0386207d241685246db548f0", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,11 +1,11 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match-forbidden-without-eq.rs:13:9\n+  --> $DIR/match-forbidden-without-eq.rs:11:9\n    |\n LL |         FOO => { }\n    |         ^^^\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:20:9\n+  --> $DIR/match-forbidden-without-eq.rs:18:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL |         f32::INFINITY => { }\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:20:9\n+  --> $DIR/match-forbidden-without-eq.rs:18:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^"}, {"sha": "d79be61f909955abfbdf1713dbe1c3aa25569d95", "filename": "src/test/ui/simd/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -20,11 +20,11 @@ fn main() {\n     let y = f32x4(2.0, 1.0, 4.0, 3.0);\n \n     #[cfg(not(any(target_arch = \"mips\", target_arch = \"mips64\")))]\n-    let nan = ::std::f32::NAN;\n+    let nan = f32::NAN;\n     // MIPS hardware treats f32::NAN as SNAN. Clear the signaling bit.\n     // See https://github.com/rust-lang/rust/issues/52746.\n     #[cfg(any(target_arch = \"mips\", target_arch = \"mips64\"))]\n-    let nan = f32::from_bits(::std::f32::NAN.to_bits() - 1);\n+    let nan = f32::from_bits(f32::NAN.to_bits() - 1);\n \n     let n = f32x4(nan, nan, nan, nan);\n "}, {"sha": "103132c18ae2f0d30b6a7410dacdef6754cc531d", "filename": "src/test/ui/simd/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-comparison.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,8 +4,6 @@\n #![feature(repr_simd, platform_intrinsics, concat_idents)]\n #![allow(non_camel_case_types)]\n \n-use std::f32::NAN;\n-\n #[repr(simd)]\n #[derive(Copy, Clone)]\n struct i32x4(i32, i32, i32, i32);\n@@ -94,7 +92,7 @@ fn main() {\n     // NAN comparisons are special:\n     // -11 (*)    13\n     // -5        -100 (*)\n-    let f4 = f32x4(NAN, f1.1, NAN, f2.3);\n+    let f4 = f32x4(f32::NAN, f1.1, f32::NAN, f2.3);\n \n     unsafe {\n         tests! {"}, {"sha": "f3f8d7259c44ece7073bbe2ced295bd10a06eb3e", "filename": "src/test/ui/sleep.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsleep.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,7 +4,6 @@\n use std::thread::{self, sleep};\n use std::time::Duration;\n use std::sync::{Arc, Mutex};\n-use std::u64;\n \n fn main() {\n     let finished = Arc::new(Mutex::new(false));"}, {"sha": "af7ab865e3222512cc9b45a3b41831e6daaacd20", "filename": "src/test/ui/structs-enums/discrim-explicit-23030.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fdiscrim-explicit-23030.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -5,8 +5,6 @@\n // See also compile-fail/overflow-discrim.rs, which shows what\n // happens if you leave the OhNo explicit cases out here.\n \n-use std::{i8,u8,i16,u16,i32,u32,i64,u64,isize,usize};\n-\n fn f_i8() {\n     #[repr(i8)]\n     enum A {"}, {"sha": "823995e5be3afb147998943bbe306744aae90bf8", "filename": "src/test/ui/symbol-names/const-generics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -19,11 +19,11 @@\n     // `i8`\n     pub struct I8<const F: i8>;\n \n-    impl I8<{std::i8::MIN}> {\n+    impl I8<{i8::MIN}> {\n         pub fn foo() {}\n     }\n \n-    impl I8<{std::i8::MAX}> {\n+    impl I8<{i8::MAX}> {\n         pub fn foo() {}\n     }\n \n@@ -34,7 +34,7 @@\n     // `i16`\n     pub struct I16<const F: i16>;\n \n-    impl I16<{std::i16::MIN}> {\n+    impl I16<{i16::MIN}> {\n         pub fn foo() {}\n     }\n \n@@ -45,7 +45,7 @@\n     // `i32`\n     pub struct I32<const F: i32>;\n \n-    impl I32<{std::i32::MIN}> {\n+    impl I32<{i32::MIN}> {\n         pub fn foo() {}\n     }\n \n@@ -56,7 +56,7 @@\n     // `i64`\n     pub struct I64<const F: i64>;\n \n-    impl I64<{std::i64::MIN}> {\n+    impl I64<{i64::MIN}> {\n         pub fn foo() {}\n     }\n \n@@ -67,7 +67,7 @@\n     // `i128`\n     pub struct I128<const F: i128>;\n \n-    impl I128<{std::i128::MIN}> {\n+    impl I128<{i128::MIN}> {\n         pub fn foo() {}\n     }\n "}, {"sha": "be8062f6276fd8a90a92e7c9a9410da927c76355", "filename": "src/test/ui/union/union-transmute.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -1,8 +1,5 @@\n // run-pass\n \n-extern crate core;\n-use core::f32;\n-\n union U {\n     a: (u8, u8),\n     b: u16,"}, {"sha": "200f742d771f552a66454fb3f500cab1fc3fd049", "filename": "src/test/ui/use-module-level-int-consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-module-level-int-consts.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -2,6 +2,7 @@\n \n // Make sure the module level constants are still there and accessible even after\n // the corresponding associated constants have been added, and later stabilized.\n+#![allow(deprecated, deprecated_in_future)]\n use std::{u16, f32};\n \n fn main() {"}, {"sha": "6e2fc7f80b9c480404b05b788ee408bba2d9ec56", "filename": "src/test/ui/wrapping-int-api.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fwrapping-int-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftest%2Fui%2Fwrapping-int-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrapping-int-api.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -4,9 +4,6 @@\n // Don't warn about overflowing ops on 32-bit platforms\n #![cfg_attr(target_pointer_width = \"32\", allow(const_err))]\n \n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n-\n fn main() {\n     assert_eq!(   i8::MAX.wrapping_add(1),    i8::MIN);\n     assert_eq!(  i16::MAX.wrapping_add(1),   i16::MIN);"}, {"sha": "263d9a7b92ddb2edb65bacef04ee55ca3870e3ad", "filename": "src/tools/clippy/tests/ui/float_cmp_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a2e5e3fe59a254d4d707aa291517b3791ea5a6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_cmp_const.rs?ref=90a2e5e3fe59a254d4d707aa291517b3791ea5a6", "patch": "@@ -48,7 +48,7 @@ fn main() {\n     v != 1.0;\n \n     const ZERO_ARRAY: [f32; 3] = [0.0, 0.0, 0.0];\n-    const ZERO_INF_ARRAY: [f32; 3] = [0.0, ::std::f32::INFINITY, ::std::f32::NEG_INFINITY];\n+    const ZERO_INF_ARRAY: [f32; 3] = [0.0, f32::INFINITY, f32::NEG_INFINITY];\n     const NON_ZERO_ARRAY: [f32; 3] = [0.0, 0.1, 0.2];\n     const NON_ZERO_ARRAY2: [f32; 3] = [0.2, 0.1, 0.0];\n "}]}