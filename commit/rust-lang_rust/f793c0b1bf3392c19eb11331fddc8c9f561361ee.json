{"sha": "f793c0b1bf3392c19eb11331fddc8c9f561361ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OTNjMGIxYmYzMzkyYzE5ZWIxMTMzMWZkZGM4YzlmNTYxMzYxZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T13:21:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T13:23:45Z"}, "message": "always print MIR Location when validator finds a problem", "tree": {"sha": "1a30f22215a034641b1eaaf404ebe346de9704d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a30f22215a034641b1eaaf404ebe346de9704d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f793c0b1bf3392c19eb11331fddc8c9f561361ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f793c0b1bf3392c19eb11331fddc8c9f561361ee", "html_url": "https://github.com/rust-lang/rust/commit/f793c0b1bf3392c19eb11331fddc8c9f561361ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f793c0b1bf3392c19eb11331fddc8c9f561361ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4bdbff9e52fe2bb2977ea6edddb13064726a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4bdbff9e52fe2bb2977ea6edddb13064726a25", "html_url": "https://github.com/rust-lang/rust/commit/9a4bdbff9e52fe2bb2977ea6edddb13064726a25"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "7d301b2f49648356b92adff8762fd3a1da78e61d", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f793c0b1bf3392c19eb11331fddc8c9f561361ee/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f793c0b1bf3392c19eb11331fddc8c9f561361ee/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=f793c0b1bf3392c19eb11331fddc8c9f561361ee", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::{\n     },\n     ty::{self, ParamEnv, TyCtxt},\n };\n-use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n+use rustc_span::def_id::DefId;\n \n pub struct Validator {\n     /// Describes at which point in the pipeline this validation is happening.\n@@ -33,18 +33,25 @@ struct TypeChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n-    fn fail(&self, span: Span, msg: impl AsRef<str>) {\n+    fn fail(&self, location: Location, msg: impl AsRef<str>) {\n+        let span = self.body.source_info(location).span;\n         // We use `delay_span_bug` as we might see broken MIR when other errors have already\n         // occurred.\n         self.tcx.sess.diagnostic().delay_span_bug(\n             span,\n-            &format!(\"broken MIR in {:?} ({}): {}\", self.def_id, self.when, msg.as_ref()),\n+            &format!(\n+                \"broken MIR in {:?} ({}) at {:?}:\\n{}\",\n+                self.def_id,\n+                self.when,\n+                location,\n+                msg.as_ref()\n+            ),\n         );\n     }\n \n-    fn check_bb(&self, span: Span, bb: BasicBlock) {\n+    fn check_bb(&self, location: Location, bb: BasicBlock) {\n         if self.body.basic_blocks().get(bb).is_none() {\n-            self.fail(span, format!(\"encountered jump to invalid basic block {:?}\", bb))\n+            self.fail(location, format!(\"encountered jump to invalid basic block {:?}\", bb))\n         }\n     }\n }\n@@ -57,7 +64,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             let span = self.body.source_info(location).span;\n \n             if !ty.is_copy_modulo_regions(self.tcx, self.param_env, span) {\n-                self.fail(span, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n+                self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n             }\n         }\n \n@@ -72,11 +79,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n                     if dest == src {\n                         self.fail(\n-                            DUMMY_SP,\n-                            format!(\n-                                \"encountered `Assign` statement with overlapping memory at {:?}\",\n-                                location\n-                            ),\n+                            location,\n+                            \"encountered `Assign` statement with overlapping memory\",\n                         );\n                     }\n                 }\n@@ -85,15 +89,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, _location: Location) {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(terminator.source_info.span, *target);\n+                self.check_bb(location, *target);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n                     self.fail(\n-                        terminator.source_info.span,\n+                        location,\n                         format!(\n                             \"encountered `SwitchInt` terminator with {} values, but {} targets (should be values+1)\",\n                             values.len(),\n@@ -102,72 +106,72 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(terminator.source_info.span, *target);\n+                    self.check_bb(location, *target);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(terminator.source_info.span, *target);\n+                self.check_bb(location, *target);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(terminator.source_info.span, *unwind);\n+                    self.check_bb(location, *unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(terminator.source_info.span, *target);\n+                self.check_bb(location, *target);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(terminator.source_info.span, *unwind);\n+                    self.check_bb(location, *unwind);\n                 }\n             }\n             TerminatorKind::Call { func, destination, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n                     _ => self.fail(\n-                        terminator.source_info.span,\n+                        location,\n                         format!(\"encountered non-callable type {} in `Call` terminator\", func_ty),\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(terminator.source_info.span, *target);\n+                    self.check_bb(location, *target);\n                 }\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(terminator.source_info.span, *cleanup);\n+                    self.check_bb(location, *cleanup);\n                 }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n                 let cond_ty = cond.ty(&self.body.local_decls, self.tcx);\n                 if cond_ty != self.tcx.types.bool {\n                     self.fail(\n-                        terminator.source_info.span,\n+                        location,\n                         format!(\n                             \"encountered non-boolean condition of type {} in `Assert` terminator\",\n                             cond_ty\n                         ),\n                     );\n                 }\n-                self.check_bb(terminator.source_info.span, *target);\n+                self.check_bb(location, *target);\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(terminator.source_info.span, *cleanup);\n+                    self.check_bb(location, *cleanup);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(terminator.source_info.span, *resume);\n+                self.check_bb(location, *resume);\n                 if let Some(drop) = drop {\n-                    self.check_bb(terminator.source_info.span, *drop);\n+                    self.check_bb(location, *drop);\n                 }\n             }\n             TerminatorKind::FalseEdges { real_target, imaginary_target } => {\n-                self.check_bb(terminator.source_info.span, *real_target);\n-                self.check_bb(terminator.source_info.span, *imaginary_target);\n+                self.check_bb(location, *real_target);\n+                self.check_bb(location, *imaginary_target);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(terminator.source_info.span, *real_target);\n+                self.check_bb(location, *real_target);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(terminator.source_info.span, *unwind);\n+                    self.check_bb(location, *unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(terminator.source_info.span, *destination);\n+                    self.check_bb(location, *destination);\n                 }\n             }\n             // Nothing to validate for these."}]}