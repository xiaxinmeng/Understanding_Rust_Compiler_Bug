{"sha": "d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTViMWViZTIyMDRiOTNjOGFiODJjNmMwNDY5OWE5ZTIwOTIxZjU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-15T12:25:29Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-15T12:25:29Z"}, "message": "Cleanup", "tree": {"sha": "3a5f75bfdae54d369424251866c25fb754a4ddf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a5f75bfdae54d369424251866c25fb754a4ddf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "html_url": "https://github.com/rust-lang/rust/commit/d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d755b1ebe2204b93c8ab82c6c04699a9e20921f5/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca59031389ef3ebd029faf889c5eaae2a169438", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca59031389ef3ebd029faf889c5eaae2a169438", "html_url": "https://github.com/rust-lang/rust/commit/1ca59031389ef3ebd029faf889c5eaae2a169438"}], "stats": {"total": 38, "additions": 11, "deletions": 27}, "files": [{"sha": "7110cf71424b35444e2fcdd7242b80553d21c44a", "filename": "src/derive.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d755b1ebe2204b93c8ab82c6c04699a9e20921f5/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d755b1ebe2204b93c8ab82c6c04699a9e20921f5/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "patch": "@@ -71,12 +71,9 @@ impl LintPass for Derive {\n \n impl LateLintPass for Derive {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n-        \n-\n         if_let_chain! {[\n             let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node\n         ], {\n-\n             let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n             if item.attrs.iter().any(is_automatically_derived) {\n                 check_hash_peq(cx, item.span, trait_ref, ty);"}, {"sha": "14b1106add525153685e7f3521848824eccff460", "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d755b1ebe2204b93c8ab82c6c04699a9e20921f5/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d755b1ebe2204b93c8ab82c6c04699a9e20921f5/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=d755b1ebe2204b93c8ab82c6c04699a9e20921f5", "patch": "@@ -35,6 +35,17 @@ impl Clone for Qux {\n     fn clone(&self) -> Self { Qux }\n }\n \n+// See #666\n+#[derive(Copy)]\n+struct Lt<'a> {\n+    a: &'a u8,\n+}\n+\n+impl<'a> Clone for Lt<'a> {\n+//~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+    fn clone(&self) -> Self { unimplemented!() }\n+}\n+\n // Ok, `Clone` cannot be derived because of the big array\n #[derive(Copy)]\n struct BigArray {"}, {"sha": "b681f4b2c5875a1012a754cdb25374fdd1ff925b", "filename": "tests/ice-666.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ca59031389ef3ebd029faf889c5eaae2a169438/tests%2Fice-666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca59031389ef3ebd029faf889c5eaae2a169438/tests%2Fice-666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fice-666.rs?ref=1ca59031389ef3ebd029faf889c5eaae2a169438", "patch": "@@ -1,24 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-pub struct Lt<'a> {\n-    _foo: &'a u8,\n-}\n-\n-impl<'a> Copy for Lt<'a> {}\n-impl<'a> Clone for Lt<'a> {\n-    fn clone(&self) -> Lt<'a> {\n-        unimplemented!();\n-    }\n-}\n-\n-pub struct Ty<A> {\n-    _foo: A,\n-}\n-\n-impl<A: Copy> Copy for Ty<A> {}\n-impl<A> Clone for Ty<A> {\n-    fn clone(&self) -> Ty<A> {\n-        unimplemented!();\n-    }\n-}"}]}