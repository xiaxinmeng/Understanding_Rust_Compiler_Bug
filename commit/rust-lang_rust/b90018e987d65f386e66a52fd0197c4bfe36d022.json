{"sha": "b90018e987d65f386e66a52fd0197c4bfe36d022", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDAxOGU5ODdkNjVmMzg2ZTY2YTUyZmQwMTk3YzRiZmUzNmQwMjI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-15T16:29:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Simplify arena_types macros", "tree": {"sha": "3542bdfb4f4c15fad1e635aac518090125256e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3542bdfb4f4c15fad1e635aac518090125256e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90018e987d65f386e66a52fd0197c4bfe36d022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90018e987d65f386e66a52fd0197c4bfe36d022", "html_url": "https://github.com/rust-lang/rust/commit/b90018e987d65f386e66a52fd0197c4bfe36d022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90018e987d65f386e66a52fd0197c4bfe36d022/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcef3effcf64bd0d89ea2dc8973e18d7fcf94c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcef3effcf64bd0d89ea2dc8973e18d7fcf94c3", "html_url": "https://github.com/rust-lang/rust/commit/cbcef3effcf64bd0d89ea2dc8973e18d7fcf94c3"}], "stats": {"total": 177, "additions": 65, "deletions": 112}, "files": [{"sha": "5e6a0340d12a0f35d12956b32dfc93595b5efe5b", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=b90018e987d65f386e66a52fd0197c4bfe36d022", "patch": "@@ -611,11 +611,7 @@ macro_rules! which_arena_for_type {\n \n #[macro_export]\n macro_rules! declare_arena {\n-    // This macro has to take the same input as\n-    // `impl_arena_allocatable_decoders` which requires a second version of\n-    // each type. We ignore that type until we can fix\n-    // `impl_arena_allocatable_decoders`.\n-    ([], [$($a:tt $name:ident: $ty:ty, $_gen_ty:ty;)*], $tcx:lifetime) => {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n             pub dropless: $crate::DroplessArena,"}, {"sha": "6ba396666070ab4fbca05381ee111235acf3549e", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=b90018e987d65f386e66a52fd0197c4bfe36d022", "patch": "@@ -12,41 +12,41 @@ macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n             // HIR types\n-            [few] hir_krate: rustc_hir::Crate<$tcx>, rustc_hir::Crate<'_x>;\n-            [] arm: rustc_hir::Arm<$tcx>, rustc_hir::Arm<'_x>;\n-            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>, rustc_hir::InlineAsmOperand<'_x>;\n-            [] asm_template: rustc_ast::ast::InlineAsmTemplatePiece, rustc_ast::ast::InlineAsmTemplatePiece;\n-            [] attribute: rustc_ast::ast::Attribute, rustc_ast::ast::Attribute;\n-            [] block: rustc_hir::Block<$tcx>, rustc_hir::Block<'_x>;\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>, rustc_hir::BareFnTy<'_x>;\n-            [few] global_asm: rustc_hir::GlobalAsm, rustc_hir::GlobalAsm;\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>, rustc_hir::GenericArg<'_x>;\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>, rustc_hir::GenericArgs<'_x>;\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>, rustc_hir::GenericBound<'_x>;\n-            [] generic_param: rustc_hir::GenericParam<$tcx>, rustc_hir::GenericParam<'_x>;\n-            [] expr: rustc_hir::Expr<$tcx>, rustc_hir::Expr<'_x>;\n-            [] field: rustc_hir::Field<$tcx>, rustc_hir::Field<'_x>;\n-            [] field_pat: rustc_hir::FieldPat<$tcx>, rustc_hir::FieldPat<'_x>;\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>, rustc_hir::FnDecl<'_x>;\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>, rustc_hir::ForeignItem<'_x>;\n-            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>, rustc_hir::ImplItemRef<'_x>;\n-            [few] inline_asm: rustc_hir::InlineAsm<$tcx>, rustc_hir::InlineAsm<'_x>;\n-            [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>, rustc_hir::LlvmInlineAsm<'_x>;\n-            [] local: rustc_hir::Local<$tcx>, rustc_hir::Local<'_x>;\n-            [few] macro_def: rustc_hir::MacroDef<$tcx>, rustc_hir::MacroDef<'_x>;\n-            [] param: rustc_hir::Param<$tcx>, rustc_hir::Param<'_x>;\n-            [] pat: rustc_hir::Pat<$tcx>, rustc_hir::Pat<'_x>;\n-            [] path: rustc_hir::Path<$tcx>, rustc_hir::Path<'_x>;\n-            [] path_segment: rustc_hir::PathSegment<$tcx>, rustc_hir::PathSegment<'_x>;\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>, rustc_hir::PolyTraitRef<'_x>;\n-            [] qpath: rustc_hir::QPath<$tcx>, rustc_hir::QPath<'_x>;\n-            [] stmt: rustc_hir::Stmt<$tcx>, rustc_hir::Stmt<'_x>;\n-            [] struct_field: rustc_hir::StructField<$tcx>, rustc_hir::StructField<'_x>;\n-            [] trait_item_ref: rustc_hir::TraitItemRef, rustc_hir::TraitItemRef;\n-            [] ty: rustc_hir::Ty<$tcx>, rustc_hir::Ty<'_x>;\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>, rustc_hir::TypeBinding<'_x>;\n-            [] variant: rustc_hir::Variant<$tcx>, rustc_hir::Variant<'_x>;\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>, rustc_hir::WherePredicate<'_x>;\n+            [few] hir_krate: rustc_hir::Crate<$tcx>,\n+            [] arm: rustc_hir::Arm<$tcx>,\n+            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>,\n+            [] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] block: rustc_hir::Block<$tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n+            [few] global_asm: rustc_hir::GlobalAsm,\n+            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n+            [] generic_param: rustc_hir::GenericParam<$tcx>,\n+            [] expr: rustc_hir::Expr<$tcx>,\n+            [] field: rustc_hir::Field<$tcx>,\n+            [] field_pat: rustc_hir::FieldPat<$tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n+            [] local: rustc_hir::Local<$tcx>,\n+            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n+            [] param: rustc_hir::Param<$tcx>,\n+            [] pat: rustc_hir::Pat<$tcx>,\n+            [] path: rustc_hir::Path<$tcx>,\n+            [] path_segment: rustc_hir::PathSegment<$tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n+            [] qpath: rustc_hir::QPath<$tcx>,\n+            [] stmt: rustc_hir::Stmt<$tcx>,\n+            [] struct_field: rustc_hir::StructField<$tcx>,\n+            [] trait_item_ref: rustc_hir::TraitItemRef,\n+            [] ty: rustc_hir::Ty<$tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n+            [] variant: rustc_hir::Variant<$tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "99889c74da0ec1c7187ec733d8c3b3a1594030c2", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 28, "deletions": 71, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=b90018e987d65f386e66a52fd0197c4bfe36d022", "patch": "@@ -11,141 +11,98 @@\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n-            [] layouts: rustc_target::abi::Layout, rustc_target::abi::Layout;\n+            [] layouts: rustc_target::abi::Layout,\n             // AdtDef are interned and compared by address\n-            [] adt_def: rustc_middle::ty::AdtDef, rustc_middle::ty::AdtDef;\n-            [] steal_mir:\n-                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n-                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>;\n-            [decode] mir: rustc_middle::mir::Body<$tcx>, rustc_middle::mir::Body<'_x>;\n+            [] adt_def: rustc_middle::ty::AdtDef,\n+            [] steal_mir: rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n+            [decode] mir: rustc_middle::mir::Body<$tcx>,\n             [] steal_promoted:\n                 rustc_middle::ty::steal::Steal<\n                     rustc_index::vec::IndexVec<\n                         rustc_middle::mir::Promoted,\n                         rustc_middle::mir::Body<$tcx>\n                     >\n                 >,\n-                rustc_middle::ty::steal::Steal<\n-                    rustc_index::vec::IndexVec<\n-                        rustc_middle::mir::Promoted,\n-                        rustc_middle::mir::Body<$tcx>\n-                    >\n-                >;\n             [decode] promoted:\n                 rustc_index::vec::IndexVec<\n                     rustc_middle::mir::Promoted,\n                     rustc_middle::mir::Body<$tcx>\n                 >,\n-                rustc_index::vec::IndexVec<\n-                    rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::Body<'_x>\n-                >;\n-            [decode] typeck_results: rustc_middle::ty::TypeckResults<$tcx>, rustc_middle::ty::TypeckResults<'_x>;\n+            [decode] typeck_results: rustc_middle::ty::TypeckResults<$tcx>,\n             [decode] borrowck_result:\n                 rustc_middle::mir::BorrowCheckResult<$tcx>,\n-                rustc_middle::mir::BorrowCheckResult<'_x>;\n-            [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult, rustc_middle::mir::UnsafetyCheckResult;\n-            [] const_allocs: rustc_middle::mir::interpret::Allocation, rustc_middle::mir::interpret::Allocation;\n+            [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n+            [] const_allocs: rustc_middle::mir::interpret::Allocation,\n             // Required for the incremental on-disk cache\n-            [few] mir_keys: rustc_hir::def_id::DefIdSet, rustc_hir::def_id::DefIdSet;\n-            [] region_scope_tree: rustc_middle::middle::region::ScopeTree, rustc_middle::middle::region::ScopeTree;\n+            [few] mir_keys: rustc_hir::def_id::DefIdSet,\n+            [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n             [] dropck_outlives:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         rustc_middle::traits::query::DropckOutlivesResult<'tcx>\n                     >\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y,\n-                        rustc_middle::traits::query::DropckOutlivesResult<'_z>\n-                    >\n-                >;\n             [] normalize_projection_ty:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         rustc_middle::traits::query::NormalizationResult<'tcx>\n                     >\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y,\n-                        rustc_middle::traits::query::NormalizationResult<'_z>\n-                    >\n-                >;\n             [] implied_outlives_bounds:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         Vec<rustc_middle::traits::query::OutlivesBound<'tcx>>\n                     >\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y,\n-                        Vec<rustc_middle::traits::query::OutlivesBound<'_z>>\n-                    >\n-                >;\n             [] type_op_subtype:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, ()>\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y, ()>\n-                >;\n             [] type_op_normalize_poly_fn_sig:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::PolyFnSig<'tcx>>\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::PolyFnSig<'_z>>\n-                >;\n             [] type_op_normalize_fn_sig:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::FnSig<'tcx>>\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::FnSig<'_z>>\n-                >;\n             [] type_op_normalize_predicate:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Predicate<'tcx>>\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::Predicate<'_z>>\n-                >;\n             [] type_op_normalize_ty:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Ty<'tcx>>\n                 >,\n-                rustc_middle::infer::canonical::Canonical<'_x,\n-                    rustc_middle::infer::canonical::QueryResponse<'_y, &'_z rustc_middle::ty::TyS<'_w>>\n-                >;\n-            [few] all_traits: Vec<rustc_hir::def_id::DefId>, Vec<rustc_hir::def_id::DefId>;\n-            [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels, rustc_middle::middle::privacy::AccessLevels;\n-            [few] foreign_module: rustc_middle::middle::cstore::ForeignModule, rustc_middle::middle::cstore::ForeignModule;\n-            [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>, Vec<rustc_middle::middle::cstore::ForeignModule>;\n-            [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>, rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>;\n-            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation, rustc_middle::traits::ObjectSafetyViolation;\n-            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>, rustc_middle::mir::mono::CodegenUnit<'_x>;\n-            [] attribute: rustc_ast::ast::Attribute, rustc_ast::ast::Attribute;\n-            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>, rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>;\n-            [] hir_id_set: rustc_hir::HirIdSet, rustc_hir::HirIdSet;\n+            [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n+            [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n+            [few] foreign_module: rustc_middle::middle::cstore::ForeignModule,\n+            [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>,\n+            [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n+            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n+            [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<$tcx>, rustc_middle::ty::TyS<'_x>;\n-            [] predicates: rustc_middle::ty::PredicateInner<$tcx>, rustc_middle::ty::PredicateInner<'_x>;\n+            [] tys: rustc_middle::ty::TyS<$tcx>,\n+            [] predicates: rustc_middle::ty::PredicateInner<$tcx>,\n \n             // HIR query types\n-            [few] indexed_hir: rustc_middle::hir::map::IndexedHir<$tcx>, rustc_middle::hir::map::IndexedHir<'_x>;\n-            [few] hir_definitions: rustc_hir::definitions::Definitions, rustc_hir::definitions::Definitions;\n-            [] hir_owner: rustc_middle::hir::Owner<$tcx>, rustc_middle::hir::Owner<'_x>;\n-            [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>, rustc_middle::hir::OwnerNodes<'_x>;\n+            [few] indexed_hir: rustc_middle::hir::map::IndexedHir<$tcx>,\n+            [few] hir_definitions: rustc_hir::definitions::Definitions,\n+            [] hir_owner: rustc_middle::hir::Owner<$tcx>,\n+            [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n-            [decode] asm_template: rustc_ast::ast::InlineAsmTemplatePiece, rustc_ast::ast::InlineAsmTemplatePiece;\n+            [decode] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n \n             // This is used to decode the &'tcx [Span] for InlineAsm's line_spans.\n-            [decode] span: rustc_span::Span, rustc_span::Span;\n-            [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>, rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>;\n+            [decode] span: rustc_span::Span,\n+            [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n         ], $tcx);\n     )\n }"}, {"sha": "270eb42b0c73952fa1d194be565ef5102e728b62", "filename": "src/librustc_middle/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90018e987d65f386e66a52fd0197c4bfe36d022/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcodec.rs?ref=b90018e987d65f386e66a52fd0197c4bfe36d022", "patch": "@@ -390,7 +390,7 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([], [$($a:tt $name:ident: $ty:ty, $_gen_ty:ty;)*], $tcx:lifetime) => {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         $(\n             impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n         )*"}]}