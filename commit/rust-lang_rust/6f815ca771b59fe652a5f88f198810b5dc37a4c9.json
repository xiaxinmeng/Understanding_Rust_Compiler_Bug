{"sha": "6f815ca771b59fe652a5f88f198810b5dc37a4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODE1Y2E3NzFiNTlmZTY1MmE1Zjg4ZjE5ODgxMGI1ZGMzN2E0Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-28T10:25:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-28T10:25:58Z"}, "message": "Auto merge of #43221 - MaulingMonkey:natvis-improvements, r=michaelwoerister\n\nEmbed MSVC .natvis files into .pdbs and mangle debuginfo for &str, *T, and [T].\n\nNo idea if these changes are reasonable - please feel free to suggest changes/rewrites.  And these are some of my first real commits to any rust codebase - *don't* be gentle, and nitpick away, I need to learn! ;)\n\n### Overview\nEmbedding `.natvis` files into `.pdb`s allows MSVC (and potentially other debuggers) to automatically pick up the visualizers without having to do any additional configuration (other than to perhaps add the relevant .pdb paths to symbol search paths.)\n\nThe native debug engine for MSVC parses the type names, making various C++ish assumptions about what they mean and adding various limitations to valid type names.  `&str` cannot be matched against a visualizer, but if we emit `str&` instead, it'll be recognized as a reference to a `str`, solving the problem.  `[T]` is similarly problematic, but emitting `slice<T>` instead works fine as it looks like a template.  I've been unable to get e.g. `slice<u32>&` to match visualizers in VS2015u3, so I've gone with `str*` and `slice<u32>*` instead.\n\n### Possible Issues\n* I'm not sure if `slice<T>` is a great mangling for `[T]` or if I should worry about name collisions.\n* I'm not sure if `linker.rs` is the right place to be enumerating natvis files.\n* I'm not sure if these type name mangling changes should actually be MSVC specific.  I recall seeing gdb visualizer tests that might be broken if made more general?  I'm hesitant to mess with them without a gdb install.  But perhaps I'm just wracking up technical debt.\n  Should I try `pacman -S mingw-w64-x86_64-gdb` and to make things consistent?\n* I haven't touched `const` / `mut` yet, and I'm worried MSVC might trip up on `mut` or their placement.\n* I may like terse oneliners too much.\n* I don't know if there's broader implications for messing with debug type names here.\n* I may have been mistaken about bellow test failures being ignorable / unrelated to this changelist.\n\n### Test Failures on `x86_64-pc-windows-gnu`\n\n```\n---- [debuginfo-gdb] debuginfo-gdb\\associated-types.rs stdout ----\n        thread '[debuginfo-gdb] debuginfo-gdb\\associated-types.rs' panicked at 'gdb not available but debuginfo gdb debuginfo test requested', src\\tools\\compiletest\\src\\runtest.rs:48:16\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n[...identical panic causes omitted...]\n\n---- [debuginfo-gdb] debuginfo-gdb\\vec.rs stdout ----\n        thread '[debuginfo-gdb] debuginfo-gdb\\vec.rs' panicked at 'gdb not available but debuginfo gdb debuginfo test requested', src\\tools\\compiletest\\src\\runtest.rs:48:16\n```\n\n### Relevant Issues\n* https://github.com/rust-lang/rust/issues/40460 Metaissue for Visual Studio debugging Rust\n* https://github.com/rust-lang/rust/issues/36503 Investigate natvis for improved msvc debugging\n* https://github.com/PistonDevelopers/VisualRust/issues/160 Debug visualization of Rust data structures\n\n### Pretty Pictures\n![Collapsed Watch Window](https://user-images.githubusercontent.com/75894/28180998-e44c7516-67bb-11e7-8b48-d4f9605973ae.png)\n![Expanded Watch Window](https://user-images.githubusercontent.com/75894/28181000-e8da252e-67bb-11e7-96b8-d613310c04dc.png)", "tree": {"sha": "4c72ed3dc7ff61a0a3e88ccceecf8c3542c68726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c72ed3dc7ff61a0a3e88ccceecf8c3542c68726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f815ca771b59fe652a5f88f198810b5dc37a4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f815ca771b59fe652a5f88f198810b5dc37a4c9", "html_url": "https://github.com/rust-lang/rust/commit/6f815ca771b59fe652a5f88f198810b5dc37a4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f815ca771b59fe652a5f88f198810b5dc37a4c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7167843748b6b9fe9078bd4b267ae04e911b19b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7167843748b6b9fe9078bd4b267ae04e911b19b9", "html_url": "https://github.com/rust-lang/rust/commit/7167843748b6b9fe9078bd4b267ae04e911b19b9"}, {"sha": "90a7cac8c8b1f4ee55c18e4ea21a8834a586c967", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a7cac8c8b1f4ee55c18e4ea21a8834a586c967", "html_url": "https://github.com/rust-lang/rust/commit/90a7cac8c8b1f4ee55c18e4ea21a8834a586c967"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "1611d8660ef654699b9762b5841b6d49e0dd163a", "filename": "src/etc/natvis/intrinsic.natvis", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=6f815ca771b59fe652a5f88f198810b5dc37a4c9", "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"str\">\n+    <DisplayString>{data_ptr,[length]s8}</DisplayString>\n+    <StringView>data_ptr,[length]s8</StringView>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">length</Item>\n+      <ArrayItems>\n+        <Size>length</Size>\n+        <ValuePointer>data_ptr</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"slice&lt;*&gt;\">\n+    <DisplayString>{{ length={length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">length</Item>\n+      <ArrayItems>\n+        <Size>length</Size>\n+        <ValuePointer>data_ptr</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "e3d99e34b3579c6daca67fa1acbe11d0f6db420b", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=6f815ca771b59fe652a5f88f198810b5dc37a4c9", "patch": "@@ -42,8 +42,8 @@\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::string::String\">\n-    <DisplayString>{*(char**)this,[vec.len]}</DisplayString>\n-    <StringView>*(char**)this,[vec.len]</StringView>\n+    <DisplayString>{*(char**)this,[vec.len]s8}</DisplayString>\n+    <StringView>*(char**)this,[vec.len]s8</StringView>\n     <Expand>\n       <Item Name=\"[size]\" ExcludeView=\"simple\">vec.len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>"}, {"sha": "b364f92f1044d0ea6ba7590946df4027d86f96c3", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=6f815ca771b59fe652a5f88f198810b5dc37a4c9", "patch": "@@ -487,6 +487,27 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // This will cause the Microsoft linker to generate a PDB file\n         // from the CodeView line tables in the object files.\n         self.cmd.arg(\"/DEBUG\");\n+\n+        // This will cause the Microsoft linker to embed .natvis info into the the PDB file\n+        let sysroot = self.sess.sysroot();\n+        let natvis_dir_path = sysroot.join(\"lib\\\\rustlib\\\\etc\");\n+        if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {\n+            for entry in natvis_dir {\n+                match entry {\n+                    Ok(entry) => {\n+                        let path = entry.path();\n+                        if path.extension() == Some(\"natvis\".as_ref()) {\n+                            let mut arg = OsString::from(\"/NATVIS:\");\n+                            arg.push(path);\n+                            self.cmd.arg(arg);\n+                        }\n+                    },\n+                    Err(err) => {\n+                        self.sess.warn(&format!(\"error enumerating natvis directory: {}\", err));\n+                    },\n+                }\n+            }\n+        }\n     }\n \n     // Currently the compiler doesn't use `dllexport` (an LLVM attribute) to"}, {"sha": "6e36073107b561ef60747cf558001443bcf2f860", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f815ca771b59fe652a5f88f198810b5dc37a4c9/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=6f815ca771b59fe652a5f88f198810b5dc37a4c9", "patch": "@@ -36,6 +36,10 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String) {\n+    // When targeting MSVC, emit C++ style type names for compatability with\n+    // .natvis visualizers (and perhaps other existing native debuggers?)\n+    let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n+\n     match t.sty {\n         ty::TyBool => output.push_str(\"bool\"),\n         ty::TyChar => output.push_str(\"char\"),\n@@ -61,21 +65,33 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(')');\n         },\n         ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n-            output.push('*');\n+            if !cpp_like_names {\n+                output.push('*');\n+            }\n             match mutbl {\n                 hir::MutImmutable => output.push_str(\"const \"),\n                 hir::MutMutable => output.push_str(\"mut \"),\n             }\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n+\n+            if cpp_like_names {\n+                output.push('*');\n+            }\n         },\n         ty::TyRef(_, ty::TypeAndMut { ty: inner_type, mutbl }) => {\n-            output.push('&');\n+            if !cpp_like_names {\n+                output.push('&');\n+            }\n             if mutbl == hir::MutMutable {\n                 output.push_str(\"mut \");\n             }\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n+\n+            if cpp_like_names {\n+                output.push('*');\n+            }\n         },\n         ty::TyArray(inner_type, len) => {\n             output.push('[');\n@@ -84,9 +100,19 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(']');\n         },\n         ty::TySlice(inner_type) => {\n-            output.push('[');\n+            if cpp_like_names {\n+                output.push_str(\"slice<\");\n+            } else {\n+                output.push('[');\n+            }\n+\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push(']');\n+\n+            if cpp_like_names {\n+                output.push('>');\n+            } else {\n+                output.push(']');\n+            }\n         },\n         ty::TyDynamic(ref trait_data, ..) => {\n             if let Some(principal) = trait_data.principal() {"}]}