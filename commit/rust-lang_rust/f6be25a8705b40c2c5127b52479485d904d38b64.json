{"sha": "f6be25a8705b40c2c5127b52479485d904d38b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YmUyNWE4NzA1YjQwYzJjNTEyN2I1MjQ3OTQ4NWQ5MDRkMzhiNjQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-18T14:18:55Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-18T14:21:49Z"}, "message": "Update foregoing patches to leave rust_crate alone.\n\nApparently it can't live in the main binary, since on non-Linux\nplatforms, dynamics libs won't find symbols in the binary. This\nremoves the crate_map pointer from rust_crate again, and instead\npasses it as an extra argument to rust_start. Rustboot doesn't pass\nthis argument, but supposedly that's okay as long as we don't actually\nuse it on that platform.", "tree": {"sha": "dc569bf01f47e01e70c8820a7a6341ac229154dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc569bf01f47e01e70c8820a7a6341ac229154dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6be25a8705b40c2c5127b52479485d904d38b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6be25a8705b40c2c5127b52479485d904d38b64", "html_url": "https://github.com/rust-lang/rust/commit/f6be25a8705b40c2c5127b52479485d904d38b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6be25a8705b40c2c5127b52479485d904d38b64/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f12998e5d7a4409d2bf748a671c345a79085213e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f12998e5d7a4409d2bf748a671c345a79085213e", "html_url": "https://github.com/rust-lang/rust/commit/f12998e5d7a4409d2bf748a671c345a79085213e"}], "stats": {"total": 204, "additions": 100, "deletions": 104}, "files": [{"sha": "c7ad35b52fd6e24bcba7e59cd71bf6503296135b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -428,8 +428,7 @@ fn T_crate(type_names tn) -> TypeRef {\n                           T_int(),      // int n_rust_syms\n                           T_int(),      // int n_c_syms\n                           T_int(),      // int n_libs\n-                          T_int(),      // uintptr_t abi_tag\n-                          T_int()       // void* crate_map\n+                          T_int()       // uintptr_t abi_tag\n                           ));\n     tn.associate(s, t);\n     ret t;\n@@ -6624,8 +6623,7 @@ fn create_typedefs(@crate_ctxt cx) {\n     llvm.LLVMAddTypeName(cx.llmod, _str.buf(\"tydesc\"), T_tydesc(cx.tn));\n }\n \n-fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues,\n-                         ValueRef crate_map) {\n+fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n \n     let ValueRef crate_addr = p2i(crate_ptr);\n \n@@ -6653,8 +6651,7 @@ fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues,\n                      C_null(T_int()),     // int n_rust_syms\n                      C_null(T_int()),     // int n_c_syms\n                      C_null(T_int()),     // int n_libs\n-                     C_int(abi.abi_x86_rustc_fastcall), // uintptr_t abi_tag\n-                     p2i(crate_map)       // void* crate_map\n+                     C_int(abi.abi_x86_rustc_fastcall) // uintptr_t abi_tag\n                      ));\n \n     llvm.LLVMSetInitializer(crate_ptr, crate_val);\n@@ -6684,9 +6681,9 @@ fn find_main_fn(@crate_ctxt cx) -> ValueRef {\n     fail;\n }\n \n-fn trans_main_fn(@local_ctxt cx, ValueRef llcrate) {\n+fn trans_main_fn(@local_ctxt cx, ValueRef llcrate, ValueRef crate_map) {\n     auto T_main_args = vec(T_int(), T_int());\n-    auto T_rust_start_args = vec(T_int(), T_int(), T_int(), T_int());\n+    auto T_rust_start_args = vec(T_int(), T_int(), T_int(), T_int(), T_int());\n \n     auto main_name;\n     if (_str.eq(std.os.target_os(), \"win32\")) {\n@@ -6717,7 +6714,8 @@ fn trans_main_fn(@local_ctxt cx, ValueRef llcrate) {\n         llvm.LLVMAppendBasicBlock(llmain, _str.buf(\"\"));\n     auto b = new_builder(llbb);\n \n-    auto start_args = vec(p2i(llrust_main), p2i(llcrate), llargc, llargv);\n+    auto start_args = vec(p2i(llrust_main), p2i(llcrate), llargc, llargv,\n+                          p2i(crate_map));\n \n     b.Ret(b.Call(llrust_start, start_args));\n }\n@@ -7200,12 +7198,15 @@ fn make_common_glue(str output, bool optimize,\n     llvm.LLVMSetTarget(llmod, _str.buf(x86.get_target_triple()));\n     auto td = mk_target_data(x86.get_data_layout());\n     auto tn = mk_type_names();\n+    let ValueRef crate_ptr =\n+        llvm.LLVMAddGlobal(llmod, T_crate(tn), _str.buf(\"rust_crate\"));\n \n     auto intrinsics = declare_intrinsics(llmod);\n \n     llvm.LLVMSetModuleInlineAsm(llmod, _str.buf(x86.get_module_asm()));\n \n     auto glues = make_glues(llmod, tn);\n+    create_crate_constant(crate_ptr, glues);\n     make_memcpy_glue(glues.memcpy_glue);\n     make_bzero_glue(glues.bzero_glue);\n \n@@ -7326,8 +7327,7 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     trans_vec_append_glue(cx);\n     auto crate_map = create_crate_map(ccx);\n     if (!shared) {\n-        trans_main_fn(cx, crate_ptr);\n-        create_crate_constant(crate_ptr, ccx.glues, crate_map);\n+        trans_main_fn(cx, crate_ptr, crate_map);\n     }\n \n     // Translate the metadata."}, {"sha": "6a42173636ebe2569ea47a92efa5264c237f3f70", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -78,9 +78,11 @@ command_line_args : public dom_owned<command_line_args>\n \n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n-           char **argv) {\n+           char **argv, void* crate_map) {\n \n-    crate->update_log_settings(getenv(\"RUST_LOG\"));\n+    // Only when we're on rustc is the last argument passed\n+    if (!crate->get_image_base())\n+        update_log_settings(crate_map, getenv(\"RUST_LOG\"));\n     rust_srv *srv = new rust_srv();\n     rust_kernel *kernel = new rust_kernel(srv);\n     kernel->start();"}, {"sha": "23f01c0747fa7cf9288e702640dae77e8313fb4b", "filename": "src/rt/rust_crate.cpp", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_crate.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_crate.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate.cpp?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -65,92 +65,6 @@ rust_crate::get_debug_abbrev(rust_dom *dom) const {\n         return mem_area(dom, 0, 0);\n }\n \n-struct mod_entry {\n-    const char* name;\n-    int* state;\n-};\n-\n-struct cratemap {\n-    mod_entry* entries;\n-    cratemap* children[1];\n-};\n-\n-struct log_directive {\n-    char* name;\n-    size_t level;\n-};\n-\n-const size_t max_log_directives = 255;\n-\n-size_t parse_logging_spec(char* spec, log_directive* dirs) {\n-    size_t dir = 0;\n-    while (dir < max_log_directives && *spec) {\n-        char* start = spec;\n-        char cur;\n-        while (true) {\n-            cur = *spec;\n-            if (cur == ',' || cur == '=' || cur == '\\0') {\n-                if (start == spec) {spec++; break;}\n-                *spec = '\\0';\n-                spec++;\n-                size_t level = 3;\n-                if (cur == '=') {\n-                    level = *spec - '0';\n-                    if (level > 3) level = 1;\n-                    if (*spec) ++spec;\n-                }\n-                dirs[dir].name = start;\n-                dirs[dir++].level = level;\n-                break;\n-            }\n-            spec++;\n-        }\n-    }\n-    return dir;\n-}\n-\n-void update_crate_map(cratemap* map, log_directive* dirs, size_t n_dirs) {\n-    // First update log levels for this crate\n-    for (mod_entry* cur = map->entries; cur->name; cur++) {\n-        size_t level = 1, longest_match = 0;\n-        for (size_t d = 0; d < n_dirs; d++) {\n-            if (strstr(cur->name, dirs[d].name) == cur->name &&\n-                strlen(dirs[d].name) > longest_match) {\n-                longest_match = strlen(dirs[d].name);\n-                level = dirs[d].level;\n-            }\n-        }\n-        *cur->state = level;\n-    }\n-\n-    // Then recurse on linked crates\n-    for (size_t i = 0; map->children[i]; i++) {\n-        update_crate_map(map->children[i], dirs, n_dirs);\n-    }\n-}\n-\n-void rust_crate::update_log_settings(char* settings) const {\n-    // Only try this if the crate was generated by Rustc, not rustboot\n-    if (image_base_off) return;\n-\n-    // This is a rather ugly parser for strings in the form\n-    // \"crate1,crate2.mod3,crate3.x=2\". Log levels range 0=err, 1=warn,\n-    // 2=info, 3=debug. Default is 1. Words without an '=X' part set the log\n-    // level for that module (and submodules) to 3.\n-    char* buffer = NULL;\n-    log_directive dirs[256];\n-    size_t dir = 0;\n-    if (settings) {\n-        buffer = (char*)malloc(strlen(settings));\n-        strcpy(buffer, settings);\n-        dir = parse_logging_spec(buffer, &dirs[0]);\n-    }\n-\n-    update_crate_map((cratemap*)crate_map, &dirs[0], dir);\n-\n-    free(buffer);\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "4a1f3e458b351f9e8b63e915eefd9b43782af81e", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -248,9 +248,6 @@ class rust_crate {\n     size_t n_libs;\n \n     uintptr_t abi_tag;\n-    // FIXME: not generated by rustboot, should only be accessed in crates\n-    // generated by rustc.\n-    void* crate_map;\n \n     // Crates are immutable, constructed by the compiler.\n \n@@ -262,8 +259,6 @@ class rust_crate {\n     uintptr_t get_gc_glue() const;\n     uintptr_t get_exit_task_glue() const;\n \n-    void update_log_settings(char* settings) const;\n-\n     struct mem_area\n     {\n       rust_dom *dom;"}, {"sha": "8f074cdf3cb3578b312b2b674cc77546ca91cfa5", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -218,3 +218,86 @@ void\n rust_log::reset_indent(uint32_t indent) {\n     _indent = indent;\n }\n+\n+struct mod_entry {\n+    const char* name;\n+    int* state;\n+};\n+\n+struct cratemap {\n+    mod_entry* entries;\n+    cratemap* children[1];\n+};\n+\n+struct log_directive {\n+    char* name;\n+    size_t level;\n+};\n+\n+const size_t max_log_directives = 255;\n+\n+// This is a rather ugly parser for strings in the form\n+// \"crate1,crate2.mod3,crate3.x=2\". Log levels range 0=err, 1=warn, 2=info,\n+// 3=debug. Default is 1. Words without an '=X' part set the log level for\n+// that module (and submodules) to 3.\n+size_t parse_logging_spec(char* spec, log_directive* dirs) {\n+    size_t dir = 0;\n+    while (dir < max_log_directives && *spec) {\n+        char* start = spec;\n+        char cur;\n+        while (true) {\n+            cur = *spec;\n+            if (cur == ',' || cur == '=' || cur == '\\0') {\n+                if (start == spec) {spec++; break;}\n+                *spec = '\\0';\n+                spec++;\n+                size_t level = 3;\n+                if (cur == '=') {\n+                    level = *spec - '0';\n+                    if (level > 3) level = 1;\n+                    if (*spec) ++spec;\n+                }\n+                dirs[dir].name = start;\n+                dirs[dir++].level = level;\n+                break;\n+            }\n+            spec++;\n+        }\n+    }\n+    return dir;\n+}\n+\n+void update_crate_map(cratemap* map, log_directive* dirs, size_t n_dirs) {\n+    // First update log levels for this crate\n+    for (mod_entry* cur = map->entries; cur->name; cur++) {\n+        size_t level = 1, longest_match = 0;\n+        for (size_t d = 0; d < n_dirs; d++) {\n+            if (strstr(cur->name, dirs[d].name) == cur->name &&\n+                strlen(dirs[d].name) > longest_match) {\n+                longest_match = strlen(dirs[d].name);\n+                level = dirs[d].level;\n+            }\n+        }\n+        *cur->state = level;\n+    }\n+\n+    // Then recurse on linked crates\n+    for (size_t i = 0; map->children[i]; i++) {\n+        update_crate_map(map->children[i], dirs, n_dirs);\n+    }\n+}\n+\n+void update_log_settings(void* crate_map, char* settings) {\n+    char* buffer = NULL;\n+    log_directive dirs[256];\n+    size_t dir = 0;\n+    if (settings) {\n+        buffer = (char*)malloc(strlen(settings));\n+        strcpy(buffer, settings);\n+        dir = parse_logging_spec(buffer, &dirs[0]);\n+    }\n+\n+    update_crate_map((cratemap*)crate_map, &dirs[0], dir);\n+\n+    free(buffer);\n+}"}, {"sha": "150d239a74d1317c87451ac4f30170910b9de368", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/f6be25a8705b40c2c5127b52479485d904d38b64/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=f6be25a8705b40c2c5127b52479485d904d38b64", "patch": "@@ -93,4 +93,6 @@ rust_log::is_tracing(uint32_t type_bits) {\n     return type_bits & _type_bit_mask;\n }\n \n+void update_log_settings(void* crate_map, char* settings);\n+\n #endif /* RUST_LOG_H */"}]}