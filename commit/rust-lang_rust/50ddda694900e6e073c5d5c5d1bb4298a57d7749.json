{"sha": "50ddda694900e6e073c5d5c5d1bb4298a57d7749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZGRkYTY5NDkwMGU2ZTA3M2M1ZDVjNWQxYmI0Mjk4YTU3ZDc3NDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T04:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T04:46:54Z"}, "message": "Rollup merge of #69158 - ecstatic-morse:graphviz-diff, r=matthewjasper\n\nDon't print block exit state in dataflow graphviz if unchanged\n\nA small quality-of-life improvement I was using while working on #68528. It's pretty common to have a lot of zero-statement basic blocks, especially before a `SimplifyCfg` pass is run. When the dataflow state was dense, these blocks could take up a lot of vertical space since the full flow state was printed on both entry and exit. After this PR, we only print a block's exit state if it differs from that block's entry state. Take a look at the two basic blocks on the left.\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/29463364/74505395-e2d1dd00-4eab-11ea-8006-ec8f0dc9d1b6.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/29463364/74505277-98506080-4eab-11ea-8d95-5190bc378331.png)", "tree": {"sha": "04c77140dd17b12ceb8d6148fb586ef3032dfd84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c77140dd17b12ceb8d6148fb586ef3032dfd84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ddda694900e6e073c5d5c5d1bb4298a57d7749", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeShq+CRBK7hj4Ov3rIwAAdHIIADuWYfIqbUQcmkxBlzq9cwqX\nV3fQKGLLXLwKGDsnbxnOe4CmTmmWuGtVgwKITOGQqj7jGiDUbkC98uROPaVgKVxL\nXEyY9c0y89ZeuOQ2F6WIqTWgoey4xbmr3738pL6JWnBKus7qkK/epmUjgG9E6E3t\nZ0+zfi+PqZraazBGuDz2/B/6TptJUIYVFNu/jHqUZXanl2GGxDq5U0y70nYSRBGW\n8VUeBWqzkAq96B6N+/s5lEhK6vSs5tREBtYtXZLLBGUVer3lMWyunPS6CCgq14k3\nTlFK1ZVYKUQFON8zPH7yeRfIi/hDN9sB/OU4mXGoisCPXijLyKoJs901HJxO61o=\n=uX5k\n-----END PGP SIGNATURE-----\n", "payload": "tree 04c77140dd17b12ceb8d6148fb586ef3032dfd84\nparent c3fed9fabd182a9479ada08d21313a9ed942436c\nparent 5c473a059e26614b65414cfb8cf75c283cda5a87\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581914814 +0900\ncommitter GitHub <noreply@github.com> 1581914814 +0900\n\nRollup merge of #69158 - ecstatic-morse:graphviz-diff, r=matthewjasper\n\nDon't print block exit state in dataflow graphviz if unchanged\n\nA small quality-of-life improvement I was using while working on #68528. It's pretty common to have a lot of zero-statement basic blocks, especially before a `SimplifyCfg` pass is run. When the dataflow state was dense, these blocks could take up a lot of vertical space since the full flow state was printed on both entry and exit. After this PR, we only print a block's exit state if it differs from that block's entry state. Take a look at the two basic blocks on the left.\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/29463364/74505395-e2d1dd00-4eab-11ea-8006-ec8f0dc9d1b6.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/29463364/74505277-98506080-4eab-11ea-8d95-5190bc378331.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ddda694900e6e073c5d5c5d1bb4298a57d7749", "html_url": "https://github.com/rust-lang/rust/commit/50ddda694900e6e073c5d5c5d1bb4298a57d7749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ddda694900e6e073c5d5c5d1bb4298a57d7749/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fed9fabd182a9479ada08d21313a9ed942436c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fed9fabd182a9479ada08d21313a9ed942436c", "html_url": "https://github.com/rust-lang/rust/commit/c3fed9fabd182a9479ada08d21313a9ed942436c"}, {"sha": "5c473a059e26614b65414cfb8cf75c283cda5a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c473a059e26614b65414cfb8cf75c283cda5a87", "html_url": "https://github.com/rust-lang/rust/commit/5c473a059e26614b65414cfb8cf75c283cda5a87"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "157526d3c51adc6b5f262322f8a032bee13a167f", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/50ddda694900e6e073c5d5c5d1bb4298a57d7749/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ddda694900e6e073c5d5c5d1bb4298a57d7749/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=50ddda694900e6e073c5d5c5d1bb4298a57d7749", "patch": "@@ -195,6 +195,8 @@ where\n         // C: Entry state\n         self.bg = Background::Light;\n         self.results.seek_to_block_start(block);\n+        let block_entry_state = self.results.get().clone();\n+\n         self.write_row_with_full_state(w, \"\", \"(on entry)\")?;\n \n         // D: Statement transfer functions\n@@ -213,29 +215,42 @@ where\n         self.write_row_for_location(w, \"T\", &terminator_str, terminator_loc)?;\n \n         // F: Exit state\n+\n+        // Write the full dataflow state immediately after the terminator if it differs from the\n+        // state at block entry.\n         self.results.seek_after(terminator_loc);\n-        if let mir::TerminatorKind::Call { destination: Some(_), .. } = &terminator.kind {\n-            self.write_row_with_full_state(w, \"\", \"(on unwind)\")?;\n-\n-            let num_state_columns = self.num_state_columns();\n-            self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n-                write!(\n-                    w,\n-                    r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n-                    colspan = num_state_columns,\n-                    fmt = fmt,\n-                )?;\n-\n-                let state_on_unwind = this.results.get().clone();\n-                this.results.seek_after_assume_call_returns(terminator_loc);\n-                write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n-\n-                write!(w, \"</td>\")\n-            })?;\n-        } else {\n-            self.write_row_with_full_state(w, \"\", \"(on exit)\")?;\n+        if self.results.get() != &block_entry_state {\n+            let after_terminator_name = match terminator.kind {\n+                mir::TerminatorKind::Call { destination: Some(_), .. } => \"(on unwind)\",\n+                _ => \"(on exit)\",\n+            };\n+\n+            self.write_row_with_full_state(w, \"\", after_terminator_name)?;\n         }\n \n+        // Write any changes caused by terminator-specific effects\n+        match terminator.kind {\n+            mir::TerminatorKind::Call { destination: Some(_), .. } => {\n+                let num_state_columns = self.num_state_columns();\n+                self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n+                    write!(\n+                        w,\n+                        r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n+                        colspan = num_state_columns,\n+                        fmt = fmt,\n+                    )?;\n+\n+                    let state_on_unwind = this.results.get().clone();\n+                    this.results.seek_after_assume_call_returns(terminator_loc);\n+                    write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n+\n+                    write!(w, \"</td>\")\n+                })?;\n+            }\n+\n+            _ => {}\n+        };\n+\n         write!(w, \"</table>\")\n     }\n "}]}