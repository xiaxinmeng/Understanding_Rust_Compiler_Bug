{"sha": "724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "node_id": "C_kwDOAAsO6NoAKDcyNGM0YmQ5YmIwMTFkMzMxMDc0NjE4ZWJiNzM5ZDZlZDNlM2UwYjQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-25T12:33:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-26T18:59:32Z"}, "message": "Migrate storage.js to ES6", "tree": {"sha": "b4d2956b6c88521f9e8a7a39cfd3ac1f593e7d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d2956b6c88521f9e8a7a39cfd3ac1f593e7d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "html_url": "https://github.com/rust-lang/rust/commit/724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724c4bd9bb011d331074618ebb739d6ed3e3e0b4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6faa40d40626f8301b5f977720b9ed7e5dfbf401", "url": "https://api.github.com/repos/rust-lang/rust/commits/6faa40d40626f8301b5f977720b9ed7e5dfbf401", "html_url": "https://github.com/rust-lang/rust/commit/6faa40d40626f8301b5f977720b9ed7e5dfbf401"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "ae670ed989426ea5ffe146756f5e8d93de75f603", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/724c4bd9bb011d331074618ebb739d6ed3e3e0b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/724c4bd9bb011d331074618ebb739d6ed3e3e0b4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "patch": "@@ -1,38 +1,42 @@\n-var darkThemes = [\"dark\", \"ayu\"];\n+/* eslint-env es6 */\n+/* eslint no-var: \"error\" */\n+/* eslint prefer-const: \"error\" */\n+\n+const darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");\n \n-var settingsDataset = (function () {\n-    var settingsElement = document.getElementById(\"default-settings\");\n+const settingsDataset = (function () {\n+    const settingsElement = document.getElementById(\"default-settings\");\n     if (settingsElement === null) {\n         return null;\n     }\n-    var dataset = settingsElement.dataset;\n+    const dataset = settingsElement.dataset;\n     if (dataset === undefined) {\n         return null;\n     }\n     return dataset;\n })();\n \n function getSettingValue(settingName) {\n-    var current = getCurrentValue(settingName);\n+    const current = getCurrentValue(settingName);\n     if (current !== null) {\n         return current;\n     }\n     if (settingsDataset !== null) {\n         // See the comment for `default_settings.into_iter()` etc. in\n         // `Options::from_matches` in `librustdoc/config.rs`.\n-        var def = settingsDataset[settingName.replace(/-/g,'_')];\n+        const def = settingsDataset[settingName.replace(/-/g,'_')];\n         if (def !== undefined) {\n             return def;\n         }\n     }\n     return null;\n }\n \n-var localStoredTheme = getSettingValue(\"theme\");\n+const localStoredTheme = getSettingValue(\"theme\");\n \n-var savedHref = [];\n+const savedHref = [];\n \n // eslint-disable-next-line no-unused-vars\n function hasClass(elem, className) {\n@@ -63,17 +67,16 @@ function removeClass(elem, className) {\n  */\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n-        var length = arr.length;\n-        var i;\n         if (reversed) {\n-            for (i = length - 1; i >= 0; --i) {\n+            const length = arr.length;\n+            for (let i = length - 1; i >= 0; --i) {\n                 if (func(arr[i])) {\n                     return true;\n                 }\n             }\n         } else {\n-            for (i = 0; i < length; ++i) {\n-                if (func(arr[i])) {\n+            for (const elem of arr) {\n+                if (func(elem)) {\n                     return true;\n                 }\n             }\n@@ -121,7 +124,7 @@ function getCurrentValue(name) {\n }\n \n function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n-    var newHref = mainStyleElem.href.replace(\n+    const newHref = mainStyleElem.href.replace(\n         /\\/rustdoc([^/]*)\\.css/, \"/\" + newTheme + \"$1\" + \".css\");\n \n     // If this new value comes from a system setting or from the previously\n@@ -134,7 +137,7 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n         return;\n     }\n \n-    var found = false;\n+    let found = false;\n     if (savedHref.length === 0) {\n         onEachLazy(document.getElementsByTagName(\"link\"), function(el) {\n             savedHref.push(el.href);\n@@ -161,17 +164,17 @@ function useSystemTheme(value) {\n     updateLocalStorage(\"use-system-theme\", value);\n \n     // update the toggle if we're on the settings page\n-    var toggle = document.getElementById(\"use-system-theme\");\n+    const toggle = document.getElementById(\"use-system-theme\");\n     if (toggle && toggle instanceof HTMLInputElement) {\n         toggle.checked = value;\n     }\n }\n \n-var updateSystemTheme = (function() {\n+const updateSystemTheme = (function() {\n     if (!window.matchMedia) {\n         // fallback to the CSS computed value\n         return function() {\n-            var cssTheme = getComputedStyle(document.documentElement)\n+            const cssTheme = getComputedStyle(document.documentElement)\n                 .getPropertyValue('content');\n \n             switchTheme(\n@@ -184,16 +187,16 @@ var updateSystemTheme = (function() {\n     }\n \n     // only listen to (prefers-color-scheme: dark) because light is the default\n-    var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n+    const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n     function handlePreferenceChange(mql) {\n-        let use = function(theme) {\n+        const use = function(theme) {\n             switchTheme(window.currentTheme, window.mainTheme, theme, true);\n         };\n         // maybe the user has disabled the setting in the meantime!\n         if (getSettingValue(\"use-system-theme\") !== \"false\") {\n-            var lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n-            var darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n+            const lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n+            const darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n             if (mql.matches) {\n                 use(darkTheme);"}]}