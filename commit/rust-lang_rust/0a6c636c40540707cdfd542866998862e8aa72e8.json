{"sha": "0a6c636c40540707cdfd542866998862e8aa72e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNmM2MzZjNDA1NDA3MDdjZGZkNTQyODY2OTk4ODYyZThhYTcyZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-15T14:29:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-15T14:29:07Z"}, "message": "Auto merge of #87156 - JohnTitor:rollup-osuhe53, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85579 (Added Arc::try_pin)\n - #86478 (Add -Zfuture-incompat-test to assist with testing future-incompat reports.)\n - #86947 (Move assert_matches to an inner module)\n - #87081 (Add tracking issue number to `wasi_ext`)\n - #87127 (Add safety comments in private core::slice::rotate::ptr_rotate function)\n - #87134 (Make SelfInTyParamDefault wording not be specific to type defaults)\n - #87147 (Update cargo)\n - #87154 (Fix misuse of rev attribute on <a> tag)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "27eb3f1e0318318f2851443af77cd716a1260f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27eb3f1e0318318f2851443af77cd716a1260f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6c636c40540707cdfd542866998862e8aa72e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6c636c40540707cdfd542866998862e8aa72e8", "html_url": "https://github.com/rust-lang/rust/commit/0a6c636c40540707cdfd542866998862e8aa72e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6c636c40540707cdfd542866998862e8aa72e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9197978a90be6f7570741eabe2da175fec75375", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9197978a90be6f7570741eabe2da175fec75375", "html_url": "https://github.com/rust-lang/rust/commit/b9197978a90be6f7570741eabe2da175fec75375"}, {"sha": "262a4f99c107e5fd9d1a3f73778a72b7fe762cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/262a4f99c107e5fd9d1a3f73778a72b7fe762cd0", "html_url": "https://github.com/rust-lang/rust/commit/262a4f99c107e5fd9d1a3f73778a72b7fe762cd0"}], "stats": {"total": 260, "additions": 197, "deletions": 63}, "files": [{"sha": "5a362a37f2bed3d69396aecbd8cadf5ca0c5f49c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -633,6 +633,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dump_mir_graphviz, true);\n     untracked!(emit_future_incompat_report, true);\n     untracked!(emit_stack_sizes, true);\n+    untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);\n     untracked!(identify_regions, true);\n     untracked!(incremental_ignore_spans, true);"}, {"sha": "1c66f831b5f4b40b705d0b5b8901c6661a6ba4f3", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -6,6 +6,7 @@ use crate::ich::StableHashingContext;\n use rustc_ast as ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_span::{BytePos, NormalizedPos, SourceFile};\n+use std::assert::assert_matches;\n \n use smallvec::SmallVec;\n "}, {"sha": "848e60fe1342ebcd8c1448d5c08eb5a28a2b00c0", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    FutureIncompatibilityReason, FutureIncompatibleInfo, Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -223,12 +223,12 @@ pub fn struct_lint_level<'s, 'd>(\n         let lint_id = LintId::of(lint);\n         let future_incompatible = lint.future_incompatible;\n \n-        let has_future_breakage = matches!(\n-            future_incompatible,\n-            Some(FutureIncompatibleInfo {\n-                reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-                ..\n-            })\n+        let has_future_breakage = future_incompatible.map_or(\n+            // Default allow lints trigger too often for testing.\n+            sess.opts.debugging_opts.future_incompat_test && lint.default_level != Level::Allow,\n+            |incompat| {\n+                matches!(incompat.reason, FutureIncompatibilityReason::FutureReleaseErrorReportNow)\n+            },\n         );\n \n         let mut err = match (level, span) {"}, {"sha": "194c478cc99d75e3c69eea9a8e91a9b3ccbb39bc", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -6,6 +6,7 @@\n //! integer. It is crucial that these operations call `check_align` *before*\n //! short-circuiting the empty case!\n \n+use std::assert::assert_matches;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::convert::{TryFrom, TryInto};"}, {"sha": "7439cd9a0fe3dc50b99b8c4aca5ded24161db04a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -502,14 +502,14 @@ impl<'a> Resolver<'a> {\n \n                 err\n             }\n-            ResolutionError::SelfInTyParamDefault => {\n+            ResolutionError::SelfInGenericParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0735,\n-                    \"type parameters cannot use `Self` in their defaults\"\n+                    \"generic parameters cannot use `Self` in their defaults\"\n                 );\n-                err.span_label(span, \"`Self` in type parameter default\".to_string());\n+                err.span_label(span, \"`Self` in generic parameter default\".to_string());\n                 err\n             }\n             ResolutionError::UnreachableLabel { name, definition_span, suggestion } => {"}, {"sha": "fb2eb749e118f489fc547ae36f07d1923eb26fef", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -249,7 +249,7 @@ enum ResolutionError<'a> {\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n     /// Error E0735: generic parameters with a default cannot use `Self`\n-    SelfInTyParamDefault,\n+    SelfInGenericParamDefault,\n     /// Error E0767: use of unreachable label\n     UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },\n }\n@@ -2643,7 +2643,7 @@ impl<'a> Resolver<'a> {\n         if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n-                    ResolutionError::SelfInTyParamDefault\n+                    ResolutionError::SelfInGenericParamDefault\n                 } else {\n                     ResolutionError::ForwardDeclaredGenericParam\n                 };"}, {"sha": "474cd86f43bea8204b8c860e3b324c5f0cb2bea3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1084,6 +1084,8 @@ options! {\n         \"set the optimization fuel quota for a crate\"),\n     function_sections: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether each function should go in its own section\"),\n+    future_incompat_test: bool = (false, parse_bool, [UNTRACKED],\n+        \"forces all lints to be future incompatible, used for internal testing (default: no)\"),\n     gcc_ld: Option<LdImpl> = (None, parse_gcc_ld, [TRACKED], \"implementation of ld used by cc\"),\n     graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\n         \"use dark-themed colors in graphviz output (default: no)\"),"}, {"sha": "d821e71562212ed86fd7d083331da0b78f4d6909", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -19,7 +19,6 @@ use core::marker::{PhantomData, Unpin, Unsize};\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n-#[cfg(not(no_global_oom_handling))]\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n #[cfg(not(no_global_oom_handling))]\n@@ -494,6 +493,13 @@ impl<T> Arc<T> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n \n+    /// Constructs a new `Pin<Arc<T>>`, return an error if allocation fails.\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_pin(data: T) -> Result<Pin<Arc<T>>, AllocError> {\n+        unsafe { Ok(Pin::new_unchecked(Arc::try_new(data)?)) }\n+    }\n+\n     /// Constructs a new `Arc<T>`, returning an error if allocation fails.\n     ///\n     /// # Examples"}, {"sha": "01d33409a423800c730ea7644a6dd1517056d2fc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -179,6 +179,16 @@ use prelude::v1::*;\n #[macro_use]\n mod macros;\n \n+// We don't export this through #[macro_export] for now, to avoid breakage.\n+// See https://github.com/rust-lang/rust/issues/82913\n+#[cfg(not(test))]\n+#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n+/// Unstable module containing the unstable `assert_matches` macro.\n+pub mod assert {\n+    #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n+    pub use crate::macros::{assert_matches, debug_assert_matches};\n+}\n+\n #[macro_use]\n mod internal_macros;\n "}, {"sha": "8ce441e80bfb7eed4edeed29b7578fea7dfa2dee", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -127,6 +127,8 @@ macro_rules! assert_ne {\n /// ```\n /// #![feature(assert_matches)]\n ///\n+/// use std::assert::assert_matches;\n+///\n /// let a = 1u32.checked_add(2);\n /// let b = 1u32.checked_sub(2);\n /// assert_matches!(a, Some(_));\n@@ -135,10 +137,10 @@ macro_rules! assert_ne {\n /// let c = Ok(\"abc\".to_string());\n /// assert_matches!(c, Ok(x) | Err(x) if x.len() < 100);\n /// ```\n-#[macro_export]\n #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n #[allow_internal_unstable(core_panic)]\n-macro_rules! assert_matches {\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro assert_matches {\n     ($left:expr, $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => ({\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n@@ -150,7 +152,7 @@ macro_rules! assert_matches {\n                 );\n             }\n         }\n-    });\n+    }),\n     ($left:expr, $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) => ({\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n@@ -162,7 +164,7 @@ macro_rules! assert_matches {\n                 );\n             }\n         }\n-    });\n+    }),\n }\n \n /// Asserts that a boolean expression is `true` at runtime.\n@@ -284,6 +286,8 @@ macro_rules! debug_assert_ne {\n /// ```\n /// #![feature(assert_matches)]\n ///\n+/// use std::assert::debug_assert_matches;\n+///\n /// let a = 1u32.checked_add(2);\n /// let b = 1u32.checked_sub(2);\n /// debug_assert_matches!(a, Some(_));\n@@ -295,8 +299,9 @@ macro_rules! debug_assert_ne {\n #[macro_export]\n #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n #[allow_internal_unstable(assert_matches)]\n-macro_rules! debug_assert_matches {\n-    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_matches!($($arg)*); })\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro debug_assert_matches($($arg:tt)*) {\n+    if $crate::cfg!(debug_assertions) { $crate::assert::assert_matches!($($arg)*); }\n }\n \n /// Returns whether the given expression matches any of the given patterns."}, {"sha": "7528927ef33b9a57297f8330e323856cd518a5bb", "filename": "library/core/src/slice/rotate.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-undocumented-unsafe\n-\n use crate::cmp;\n use crate::mem::{self, MaybeUninit};\n use crate::ptr;\n@@ -79,8 +77,10 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             // the way until about `left + right == 32`, but the worst case performance breaks even\n             // around 16. 24 was chosen as middle ground. If the size of `T` is larger than 4\n             // `usize`s, this algorithm also outperforms other algorithms.\n+            // SAFETY: callers must ensure `mid - left` is valid for reading and writing.\n             let x = unsafe { mid.sub(left) };\n             // beginning of first round\n+            // SAFETY: see previous comment.\n             let mut tmp: T = unsafe { x.read() };\n             let mut i = right;\n             // `gcd` can be found before hand by calculating `gcd(left + right, right)`,\n@@ -92,6 +92,21 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             // the very end. This is possibly due to the fact that swapping or replacing temporaries\n             // uses only one memory address in the loop instead of needing to manage two.\n             loop {\n+                // [long-safety-expl]\n+                // SAFETY: callers must ensure `[left, left+mid+right)` are all valid for reading and\n+                // writing.\n+                //\n+                // - `i` start with `right` so `mid-left <= x+i = x+right = mid-left+right < mid+right`\n+                // - `i <= left+right-1` is always true\n+                //   - if `i < left`, `right` is added so `i < left+right` and on the next\n+                //     iteration `left` is removed from `i` so it doesn't go further\n+                //   - if `i >= left`, `left` is removed immediately and so it doesn't go further.\n+                // - overflows cannot happen for `i` since the function's safety contract ask for\n+                //   `mid+right-1 = x+left+right` to be valid for writing\n+                // - underflows cannot happen because `i` must be bigger or equal to `left` for\n+                //   a substraction of `left` to happen.\n+                //\n+                // So `x+i` is valid for reading and writing if the caller respected the contract\n                 tmp = unsafe { x.add(i).replace(tmp) };\n                 // instead of incrementing `i` and then checking if it is outside the bounds, we\n                 // check if `i` will go outside the bounds on the next increment. This prevents\n@@ -100,6 +115,8 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n                     i -= left;\n                     if i == 0 {\n                         // end of first round\n+                        // SAFETY: tmp has been read from a valid source and x is valid for writing\n+                        // according to the caller.\n                         unsafe { x.write(tmp) };\n                         break;\n                     }\n@@ -113,13 +130,24 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             }\n             // finish the chunk with more rounds\n             for start in 1..gcd {\n+                // SAFETY: `gcd` is at most equal to `right` so all values in `1..gcd` are valid for\n+                // reading and writing as per the function's safety contract, see [long-safety-expl]\n+                // above\n                 tmp = unsafe { x.add(start).read() };\n+                // [safety-expl-addition]\n+                //\n+                // Here `start < gcd` so `start < right` so `i < right+right`: `right` being the\n+                // greatest common divisor of `(left+right, right)` means that `left = right` so\n+                // `i < left+right` so `x+i = mid-left+i` is always valid for reading and writing\n+                // according to the function's safety contract.\n                 i = start + right;\n                 loop {\n+                    // SAFETY: see [long-safety-expl] and [safety-expl-addition]\n                     tmp = unsafe { x.add(i).replace(tmp) };\n                     if i >= left {\n                         i -= left;\n                         if i == start {\n+                            // SAFETY: see [long-safety-expl] and [safety-expl-addition]\n                             unsafe { x.add(start).write(tmp) };\n                             break;\n                         }\n@@ -135,14 +163,30 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             // The `[T; 0]` here is to ensure this is appropriately aligned for T\n             let mut rawarray = MaybeUninit::<(BufType, [T; 0])>::uninit();\n             let buf = rawarray.as_mut_ptr() as *mut T;\n+            // SAFETY: `mid-left <= mid-left+right < mid+right`\n             let dim = unsafe { mid.sub(left).add(right) };\n             if left <= right {\n+                // SAFETY:\n+                //\n+                // 1) The `else if` condition about the sizes ensures `[mid-left; left]` will fit in\n+                //    `buf` without overflow and `buf` was created just above and so cannot be\n+                //    overlapped with any value of `[mid-left; left]`\n+                // 2) [mid-left, mid+right) are all valid for reading and writing and we don't care\n+                //    about overlaps here.\n+                // 3) The `if` condition about `left <= right` ensures writing `left` elements to\n+                //    `dim = mid-left+right` is valid because:\n+                //    - `buf` is valid and `left` elements were written in it in 1)\n+                //    - `dim+left = mid-left+right+left = mid+right` and we write `[dim, dim+left)`\n                 unsafe {\n+                    // 1)\n                     ptr::copy_nonoverlapping(mid.sub(left), buf, left);\n+                    // 2)\n                     ptr::copy(mid, mid.sub(left), right);\n+                    // 3)\n                     ptr::copy_nonoverlapping(buf, dim, left);\n                 }\n             } else {\n+                // SAFETY: same reasoning as above but with `left` and `right` reversed\n                 unsafe {\n                     ptr::copy_nonoverlapping(mid, buf, right);\n                     ptr::copy(mid.sub(left), dim, left);\n@@ -156,6 +200,10 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             // of this algorithm would be, and swapping using that last chunk instead of swapping\n             // adjacent chunks like this algorithm is doing, but this way is still faster.\n             loop {\n+                // SAFETY:\n+                // `left >= right` so `[mid-right, mid+right)` is valid for reading and writing\n+                // Substracting `right` from `mid` each turn is counterbalanced by the addition and\n+                // check after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(right), mid, right);\n                     mid = mid.sub(right);\n@@ -168,6 +216,10 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n         } else {\n             // Algorithm 3, `left < right`\n             loop {\n+                // SAFETY: `[mid-left, mid+left)` is valid for reading and writing because\n+                // `left < right` so `mid+left < mid+right`.\n+                // Adding `left` to `mid` each turn is counterbalanced by the substraction and check\n+                // after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(left), mid, left);\n                     mid = mid.add(left);"}, {"sha": "472bca3460f4678d5d404d6b36279b7be5b9250b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -548,8 +548,8 @@ pub use std_detect::{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n-    assert_eq, assert_matches, assert_ne, debug_assert, debug_assert_eq, debug_assert_matches,\n-    debug_assert_ne, matches, r#try, todo, unimplemented, unreachable, write, writeln,\n+    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, r#try, todo,\n+    unimplemented, unreachable, write, writeln,\n };\n \n // Re-export built-in macros defined through libcore."}, {"sha": "bd30d6ae3f333daa87cff4d7270ad7d1a02a0bd9", "filename": "library/std/src/os/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,7 +1,7 @@\n //! WASI-specific extensions to primitives in the `std::fs` module.\n \n #![deny(unsafe_op_in_unsafe_fn)]\n-#![unstable(feature = \"wasi_ext\", issue = \"none\")]\n+#![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n \n use crate::ffi::OsStr;\n use crate::fs::{self, File, Metadata, OpenOptions};"}, {"sha": "cf4501b98cbd42eb43a4e0c1ce098fcc2ecb9cd7", "filename": "library/std/src/os/wasi/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,7 +1,7 @@\n //! WASI-specific extensions to general I/O primitives\n \n #![deny(unsafe_op_in_unsafe_fn)]\n-#![unstable(feature = \"wasi_ext\", issue = \"none\")]\n+#![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n \n use crate::fs;\n use crate::io;"}, {"sha": "e21469dc9c343e84d17f295b3bc9588356cb8a83", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -621,8 +621,7 @@ impl<'a, I: Iterator<Item = SpannedEvent<'a>>> Iterator for Footnotes<'a, I> {\n                                 is_paragraph = true;\n                             }\n                             html::push_html(&mut ret, content.into_iter());\n-                            write!(ret, \"&nbsp;<a href=\\\"#fnref{}\\\" rev=\\\"footnote\\\">\u21a9</a>\", id)\n-                                .unwrap();\n+                            write!(ret, \"&nbsp;<a href=\\\"#fnref{}\\\">\u21a9</a>\", id).unwrap();\n                             if is_paragraph {\n                                 ret.push_str(\"</p>\");\n                             }"}, {"sha": "9af84439252c7e0c3fb80d45510aadd40a8e1f05", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Struct<const N: usize = { Self; 10 }>;\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Enum<const N: usize = { Self; 10 }> { }\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+union Union<const N: usize = { Self; 10 }> { not_empty: () }\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n+\n+fn main() {\n+    let _: Struct;\n+    let _: Enum;\n+    let _: Union;\n+}"}, {"sha": "5dfec2fcb736f5fc3367b675ab5920d2d84a5c2b", "filename": "src/test/ui/const-generics/defaults/default-const-param-cannot-reference-self.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-const-param-cannot-reference-self.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -0,0 +1,21 @@\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:3:34\n+   |\n+LL | struct Struct<const N: usize = { Self; 10 }>;\n+   |                                  ^^^^ `Self` in generic parameter default\n+\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:6:30\n+   |\n+LL | enum Enum<const N: usize = { Self; 10 }> { }\n+   |                              ^^^^ `Self` in generic parameter default\n+\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n+  --> $DIR/default-const-param-cannot-reference-self.rs:9:32\n+   |\n+LL | union Union<const N: usize = { Self; 10 }> { not_empty: () }\n+   |                                ^^^^ `Self` in generic parameter default\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0735`."}, {"sha": "12db143e474492a8e79a72869082feadbc303502", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -11,25 +11,25 @@\n // compatibility concern.\n \n struct Snobound<'a, P = Self> { x: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n // Disallowing `Self` in defaults sidesteps need to check the bounds\n // on the defaults in cases like these.\n \n struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n-//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+//~^ ERROR generic parameters cannot use `Self` in their defaults [E0735]\n \n fn demo_usages() {\n     // An ICE means you only get the error from the first line of the"}, {"sha": "f3a550801b9bd57084de7633e165b38eb6f0d223", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,38 +1,38 @@\n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:13:25\n    |\n LL | struct Snobound<'a, P = Self> { x: Option<&'a P> }\n-   |                         ^^^^ `Self` in type parameter default\n+   |                         ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:16:23\n    |\n LL | enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n-   |                       ^^^^ `Self` in type parameter default\n+   |                       ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:19:24\n    |\n LL | union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n-   |                        ^^^^ `Self` in type parameter default\n+   |                        ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:25:31\n    |\n LL | struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n-   |                               ^^^^ `Self` in type parameter default\n+   |                               ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:28:29\n    |\n LL | enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n-   |                             ^^^^ `Self` in type parameter default\n+   |                             ^^^^ `Self` in generic parameter default\n \n-error[E0735]: type parameters cannot use `Self` in their defaults\n+error[E0735]: generic parameters cannot use `Self` in their defaults\n   --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:31:30\n    |\n LL | union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n-   |                              ^^^^ `Self` in type parameter default\n+   |                              ^^^^ `Self` in generic parameter default\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ce8c118dab2426de9ad8c22488234ad297bbe8e9", "filename": "src/test/ui/lint/future-incompat-test.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zfuture-incompat-test -Zemit-future-incompat-report\n+// check-pass\n+\n+// The `-Zfuture-incompat-test flag causes any normal warning to be included\n+// in the future-incompatible report. The stderr output here should mention\n+// the future incompatible report (as extracted by compiletest).\n+\n+fn main() {\n+    let x = 1;\n+}"}, {"sha": "52674a843847dfb8489b95c0fa269e254226ac00", "filename": "src/test/ui/lint/future-incompat-test.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -0,0 +1,9 @@\n+Future incompatibility report: Future breakage diagnostic:\n+warning: unused variable: `x`\n+  --> $DIR/future-incompat-test.rs:9:9\n+   |\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+   = note: `-A unused-variables` implied by `-A unused`\n+"}, {"sha": "714a6561a6d0990b0bc2255b6b2b0105deb617f2", "filename": "src/test/ui/macros/assert-matches-macro-msg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -6,6 +6,8 @@\n \n #![feature(assert_matches)]\n \n+use std::assert::assert_matches;\n+\n fn main() {\n     assert_matches!(1 + 1, 3, \"1 + 1 definitely should be 3\");\n }"}, {"sha": "a6fa5128d2f862d66136cdc22e98883f9ed56ed1", "filename": "src/test/ui/matches2021.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fmatches2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fmatches2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches2021.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -6,6 +6,8 @@\n \n #![feature(assert_matches)]\n \n+use std::assert::assert_matches;\n+\n fn main() {\n     assert!(matches!((), ()));\n     assert_matches!((), ());"}, {"sha": "070b066721350956fb1c3fa83d6c3add1b43988f", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -81,7 +81,7 @@ LL |     tuple_from_req!(Foo);\n \n warning: 5 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n+Future incompatibility report: Future breakage diagnostic:\n warning: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n@@ -99,7 +99,7 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n@@ -116,7 +116,7 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n@@ -133,7 +133,7 @@ LL |     arrays!(Foo);\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n    = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n@@ -150,7 +150,7 @@ LL |     tuple_from_req!(Foo);\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n    = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |"}, {"sha": "4d6edab08e2cf28b85f668ad55a2549780241bff", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -11,7 +11,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n+Future incompatibility report: Future breakage diagnostic:\n warning: using `procedural-masquerade` crate\n   --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n    |"}, {"sha": "5532c8b90e32685aecd7ff4f252860c585c92567", "filename": "src/test/ui/resolve/resolve-hint-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    assert(true);\n-    //~^ ERROR expected function, found macro `assert`\n+    assert_eq(1, 1);\n+    //~^ ERROR expected function, found macro `assert_eq`\n }"}, {"sha": "efcfc7198ab51291f49e763c4627838e83298457", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1,13 +1,13 @@\n-error[E0423]: expected function, found macro `assert`\n+error[E0423]: expected function, found macro `assert_eq`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n-LL |     assert(true);\n-   |     ^^^^^^ not a function\n+LL |     assert_eq(1, 1);\n+   |     ^^^^^^^^^ not a function\n    |\n help: use `!` to invoke the macro\n    |\n-LL |     assert!(true);\n-   |           ^\n+LL |     assert_eq!(1, 1);\n+   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "66a6737a0c9f3a974af2dd032a65d3e409c77aac", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -1 +1 @@\n-Subproject commit 3ebb5f15a940810f250b68821149387af583a79e\n+Subproject commit 66a6737a0c9f3a974af2dd032a65d3e409c77aac"}, {"sha": "dc6d67983c5d22da7932f17b07ea77f1e386ba0e", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6c636c40540707cdfd542866998862e8aa72e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=0a6c636c40540707cdfd542866998862e8aa72e8", "patch": "@@ -43,7 +43,6 @@ struct FutureIncompatReport {\n \n #[derive(Deserialize)]\n struct FutureBreakageItem {\n-    future_breakage_date: Option<String>,\n     diagnostic: Diagnostic,\n }\n \n@@ -104,9 +103,7 @@ pub fn extract_rendered(output: &str) -> String {\n                                 .into_iter()\n                                 .map(|item| {\n                                     format!(\n-                                        \"Future breakage date: {}, diagnostic:\\n{}\",\n-                                        item.future_breakage_date\n-                                            .unwrap_or_else(|| \"None\".to_string()),\n+                                        \"Future breakage diagnostic:\\n{}\",\n                                         item.diagnostic\n                                             .rendered\n                                             .unwrap_or_else(|| \"Not rendered\".to_string())"}]}