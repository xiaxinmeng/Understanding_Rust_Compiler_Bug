{"sha": "46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTcxOWUyY2NjMDNmMjI1MzdiMWEzY2U5ZTM0NTc3MGNhNGUxYmE=", "commit": {"author": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-30T01:24:34Z"}, "committer": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-30T14:03:06Z"}, "message": "Remove useless //ignore-arch directives on a compile-fail test, and add another test that checks if the sysv64 abi corresponds to the same rules as the C abi on unix platforms", "tree": {"sha": "c150b9ac7faa8acb316ea17e9e8c6835e1069e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c150b9ac7faa8acb316ea17e9e8c6835e1069e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "html_url": "https://github.com/rust-lang/rust/commit/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba/comments", "author": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d282a633fa6f511f087a53976ce71c269d14c861", "url": "https://api.github.com/repos/rust-lang/rust/commits/d282a633fa6f511f087a53976ce71c269d14c861", "html_url": "https://github.com/rust-lang/rust/commit/d282a633fa6f511f087a53976ce71c269d14c861"}], "stats": {"total": 347, "additions": 341, "deletions": 6}, "files": [{"sha": "2a4aae8c06bbadda9c05782135ea9e4805e2d8a4", "filename": "src/test/compile-fail/feature-gate-abi-sysv64.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs?ref=46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "patch": "@@ -11,15 +11,9 @@\n // Test that the sysv64 ABI cannot be used when abi-sysv64 feature\n // gate is not used.\n \n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-\n-#[cfg(target_arch = \"x86_64\")]\n extern \"sysv64\" fn foo() {}\n //~^ ERROR sysv64 ABI is experimental and subject to change\n \n-#[cfg(target_arch = \"x86_64\")]\n fn main() {\n     foo();\n }"}, {"sha": "3f6ae71ffa8e7a2b32b78a442c08e37cfaa0df5f", "filename": "src/test/run-pass/abi-sysv64-arg-passing.rs", "status": "added", "additions": 341, "deletions": 0, "changes": 341, "blob_url": "https://github.com/rust-lang/rust/blob/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a719e2ccc03f22537b1a3ce9e345770ca4e1ba/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs?ref=46a719e2ccc03f22537b1a3ce9e345770ca4e1ba", "patch": "@@ -0,0 +1,341 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the \"sysv64\" calling convention behaves the same as the\n+// \"C\" calling convention on platforms where both should be the same\n+\n+// This file contains versions of the following run-pass tests with\n+// the calling convention changed to \"sysv64\"\n+\n+// cabi-int-widening\n+// extern-pass-char\n+// extern-pass-u32\n+// extern-pass-u64\n+// extern-pass-double\n+// extern-pass-empty\n+// extern-pass-TwoU8s\n+// extern-pass-TwoU16s\n+// extern-pass-TwoU32s\n+// extern-pass-TwoU64s\n+// extern-return-TwoU8s\n+// extern-return-TwoU16s\n+// extern-return-TwoU32s\n+// extern-return-TwoU64s\n+// foreign-fn-with-byval\n+// issue-28676\n+// struct-return\n+\n+// ignore-android\n+// ignore-arm\n+// ignore-aarch64\n+// ignore-msvc\n+\n+// note: msvc is ignored as rust_test_helpers does not have the sysv64 abi on msvc\n+\n+#![feature(abi_sysv64)]\n+#[allow(dead_code)]\n+#[allow(improper_ctypes)]\n+\n+#[cfg(target_arch = \"x86_64\")]\n+mod tests {\n+    #[repr(C)]\n+    #[derive(Copy, Clone, PartialEq, Debug)]\n+    pub struct TwoU8s {\n+        one: u8, two: u8\n+    }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone, PartialEq, Debug)]\n+    pub struct TwoU16s {\n+        one: u16, two: u16\n+    }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone, PartialEq, Debug)]\n+    pub struct TwoU32s {\n+        one: u32, two: u32\n+    }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone, PartialEq, Debug)]\n+    pub struct TwoU64s {\n+        one: u64, two: u64\n+    }\n+\n+    #[repr(C)]\n+    pub struct ManyInts {\n+        arg1: i8,\n+        arg2: i16,\n+        arg3: i32,\n+        arg4: i16,\n+        arg5: i8,\n+        arg6: TwoU8s,\n+    }\n+\n+    #[repr(C)]\n+    pub struct Empty;\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    pub struct S {\n+        x: u64,\n+        y: u64,\n+        z: u64,\n+    }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+\n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    pub struct Floats { a: f64, b: u8, c: f64 }\n+\n+    #[link(name = \"rust_test_helpers\")]\n+    extern \"sysv64\" {\n+        pub fn rust_int8_to_int32(_: i8) -> i32;\n+        pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n+        pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n+        pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n+        pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n+        pub fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n+        pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n+        pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n+        pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n+        pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n+        pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n+        pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n+        pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n+        pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n+        pub fn get_x(x: S) -> u64;\n+        pub fn get_y(x: S) -> u64;\n+        pub fn get_z(x: S) -> u64;\n+        pub fn get_c_many_params(_: *const (), _: *const (),\n+                                 _: *const (), _: *const (), f: Quad) -> u64;\n+        pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n+        pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n+    }\n+\n+    pub fn cabi_int_widening() {\n+        let x = unsafe {\n+            rust_int8_to_int32(-1)\n+        };\n+\n+        assert!(x == -1);\n+    }\n+\n+    pub fn extern_pass_char() {\n+        unsafe {\n+            assert_eq!(22, rust_dbg_extern_identity_u8(22));\n+        }\n+    }\n+\n+    pub fn extern_pass_u32() {\n+        unsafe {\n+            assert_eq!(22, rust_dbg_extern_identity_u32(22));\n+        }\n+    }\n+\n+    pub fn extern_pass_u64() {\n+        unsafe {\n+            assert_eq!(22, rust_dbg_extern_identity_u64(22));\n+        }\n+    }\n+\n+    pub fn extern_pass_double() {\n+        unsafe {\n+            assert_eq!(22.0_f64, rust_dbg_extern_identity_double(22.0_f64));\n+        }\n+    }\n+\n+    pub fn extern_pass_empty() {\n+        unsafe {\n+            let x = ManyInts {\n+                arg1: 2,\n+                arg2: 3,\n+                arg3: 4,\n+                arg4: 5,\n+                arg5: 6,\n+                arg6: TwoU8s { one: 7, two: 8, }\n+            };\n+            let y = ManyInts {\n+                arg1: 1,\n+                arg2: 2,\n+                arg3: 3,\n+                arg4: 4,\n+                arg5: 5,\n+                arg6: TwoU8s { one: 6, two: 7, }\n+            };\n+            let empty = Empty;\n+            rust_dbg_extern_empty_struct(x, empty, y);\n+        }\n+    }\n+\n+    pub fn extern_pass_twou8s() {\n+        unsafe {\n+            let x = TwoU8s {one: 22, two: 23};\n+            let y = rust_dbg_extern_identity_TwoU8s(x);\n+            assert_eq!(x, y);\n+        }\n+    }\n+\n+    pub fn extern_pass_twou16s() {\n+        unsafe {\n+            let x = TwoU16s {one: 22, two: 23};\n+            let y = rust_dbg_extern_identity_TwoU16s(x);\n+            assert_eq!(x, y);\n+        }\n+    }\n+\n+    pub fn extern_pass_twou32s() {\n+        unsafe {\n+            let x = TwoU32s {one: 22, two: 23};\n+            let y = rust_dbg_extern_identity_TwoU32s(x);\n+            assert_eq!(x, y);\n+        }\n+    }\n+\n+    pub fn extern_pass_twou64s() {\n+        unsafe {\n+            let x = TwoU64s {one: 22, two: 23};\n+            let y = rust_dbg_extern_identity_TwoU64s(x);\n+            assert_eq!(x, y);\n+        }\n+    }\n+\n+    pub fn extern_return_twou8s() {\n+        unsafe {\n+            let y = rust_dbg_extern_return_TwoU8s();\n+            assert_eq!(y.one, 10);\n+            assert_eq!(y.two, 20);\n+        }\n+    }\n+\n+    pub fn extern_return_twou16s() {\n+        unsafe {\n+            let y = rust_dbg_extern_return_TwoU16s();\n+            assert_eq!(y.one, 10);\n+            assert_eq!(y.two, 20);\n+        }\n+    }\n+\n+    pub fn extern_return_twou32s() {\n+        unsafe {\n+            let y = rust_dbg_extern_return_TwoU32s();\n+            assert_eq!(y.one, 10);\n+            assert_eq!(y.two, 20);\n+        }\n+    }\n+\n+    pub fn extern_return_twou64s() {\n+        unsafe {\n+            let y = rust_dbg_extern_return_TwoU64s();\n+            assert_eq!(y.one, 10);\n+            assert_eq!(y.two, 20);\n+        }\n+    }\n+\n+    #[inline(never)]\n+    fn indirect_call(func: unsafe extern \"sysv64\" fn(s: S) -> u64, s: S) -> u64 {\n+        unsafe {\n+            func(s)\n+        }\n+    }\n+\n+    pub fn foreign_fn_with_byval() {\n+        let s = S { x: 1, y: 2, z: 3 };\n+        assert_eq!(s.x, indirect_call(get_x, s));\n+        assert_eq!(s.y, indirect_call(get_y, s));\n+        assert_eq!(s.z, indirect_call(get_z, s));\n+    }\n+\n+    fn test() {\n+        use std::ptr;\n+        unsafe {\n+            let null = ptr::null();\n+            let q = Quad {\n+                a: 1,\n+                b: 2,\n+                c: 3,\n+                d: 4\n+            };\n+            assert_eq!(get_c_many_params(null, null, null, null, q), q.c);\n+        }\n+    }\n+\n+    pub fn issue_28676() {\n+        test();\n+    }\n+\n+    fn test1() {\n+        unsafe {\n+            let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa,\n+                     b: 0xbbbb_bbbb_bbbb_bbbb,\n+                     c: 0xcccc_cccc_cccc_cccc,\n+                     d: 0xdddd_dddd_dddd_dddd };\n+            let qq = rust_dbg_abi_1(q);\n+            println!(\"a: {:x}\", qq.a as usize);\n+            println!(\"b: {:x}\", qq.b as usize);\n+            println!(\"c: {:x}\", qq.c as usize);\n+            println!(\"d: {:x}\", qq.d as usize);\n+            assert_eq!(qq.a, q.c + 1);\n+            assert_eq!(qq.b, q.d - 1);\n+            assert_eq!(qq.c, q.a + 1);\n+            assert_eq!(qq.d, q.b - 1);\n+        }\n+    }\n+\n+    fn test2() {\n+        unsafe {\n+            let f = Floats { a: 1.234567890e-15_f64,\n+                     b: 0b_1010_1010,\n+                     c: 1.0987654321e-15_f64 };\n+            let ff = rust_dbg_abi_2(f);\n+            println!(\"a: {}\", ff.a as f64);\n+            println!(\"b: {}\", ff.b as usize);\n+            println!(\"c: {}\", ff.c as f64);\n+            assert_eq!(ff.a, f.c + 1.0f64);\n+            assert_eq!(ff.b, 0xff);\n+            assert_eq!(ff.c, f.a - 1.0f64);\n+        }\n+    }\n+\n+    pub fn struct_return() {\n+        test1();\n+        test2();\n+    }\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn main() {\n+    use tests::*;\n+    cabi_int_widening();\n+    extern_pass_char();\n+    extern_pass_u32();\n+    extern_pass_u64();\n+    extern_pass_double();\n+    extern_pass_empty();\n+    extern_pass_twou8s();\n+    extern_pass_twou16s();\n+    extern_pass_twou32s();\n+    extern_pass_twou64s();\n+    extern_return_twou8s();\n+    extern_return_twou16s();\n+    extern_return_twou32s();\n+    extern_return_twou64s();\n+    foreign_fn_with_byval();\n+    issue_28676();\n+    struct_return();\n+}\n+\n+#[cfg(not(target_arch = \"x86_64\"))]\n+fn main() {\n+\n+}"}]}