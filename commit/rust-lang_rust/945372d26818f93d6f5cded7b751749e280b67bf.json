{"sha": "945372d26818f93d6f5cded7b751749e280b67bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NTM3MmQyNjgxOGY5M2Q2ZjVjZGVkN2I3NTE3NDllMjgwYjY3YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T15:00:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T15:00:24Z"}, "message": "Auto merge of #55012 - kennytm:rollup, r=kennytm\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #54755 (Documents reference equality by address (#54197))\n - #54811 (During rustc bootstrap, make default for `optimize` independent of `debug`)\n - #54825 (NLL says \"borrowed content\" instead of more precise \"dereference of raw pointer\")\n - #54860 (Add doc comments about safest way to initialize a vector of zeros)\n - #54869 (Fix mobile docs)\n - #54891 (Fix tracking issue for Once::is_completed)\n - #54913 (doc fix: it's auto traits that make for automatic implementations)\n - #54920 (Fix handling of #[must_use] on unit and uninhabited types)\n - #54932 (A handful of random string-related improvements)\n - #54936 (impl Eq+Hash for TyLayout)\n - #54950 (std: Synchronize global allocator on wasm32)\n - #54956 (\"(using ...\" doesn't have the matching \")\")\n - #54958 (add a macro for static (compile-time) assertions)\n - #54967 (Remove incorrect span for second label inner macro invocation)\n - #54983 (Fix slice's benchmarks)\n - #54989 (Fix spelling in the documentation to htmldocck.py)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "434e524cba2dee5a76b2aca15ef28c1f3229ff8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/434e524cba2dee5a76b2aca15ef28c1f3229ff8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945372d26818f93d6f5cded7b751749e280b67bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945372d26818f93d6f5cded7b751749e280b67bf", "html_url": "https://github.com/rust-lang/rust/commit/945372d26818f93d6f5cded7b751749e280b67bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945372d26818f93d6f5cded7b751749e280b67bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e27e6a6258b3adf00a5dd35d2676656224880d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e27e6a6258b3adf00a5dd35d2676656224880d", "html_url": "https://github.com/rust-lang/rust/commit/e9e27e6a6258b3adf00a5dd35d2676656224880d"}, {"sha": "d64c77a671390a7ce9072e550ffa57837892a4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64c77a671390a7ce9072e550ffa57837892a4fe", "html_url": "https://github.com/rust-lang/rust/commit/d64c77a671390a7ce9072e550ffa57837892a4fe"}], "stats": {"total": 422, "additions": 293, "deletions": 129}, "files": [{"sha": "1c851999130a0213ae5daded08d1e8eda4f637ae", "filename": "config.toml.example", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -243,19 +243,36 @@\n # =============================================================================\n [rust]\n \n-# Indicates that the build should be optimized for debugging Rust. Note that\n-# this is typically not what you want as it takes an incredibly large amount of\n-# time to have a debug-mode rustc compile any code (notably libstd). If this\n-# value is set to `true` it will affect a number of configuration options below\n-# as well, if unconfigured.\n-#debug = false\n-\n-# Whether or not to optimize the compiler and standard library\n+# Whether or not to optimize the compiler and standard library.\n+#\n # Note: the slowness of the non optimized compiler compiling itself usually\n #       outweighs the time gains in not doing optimizations, therefore a\n-#       full bootstrap takes much more time with optimize set to false.\n+#       full bootstrap takes much more time with `optimize` set to false.\n #optimize = true\n \n+# Indicates that the build should be configured for debugging Rust. A\n+# `debug`-enabled compiler and standard library will be somewhat\n+# slower (due to e.g. checking of debug assertions) but should remain\n+# usable.\n+#\n+# Note: If this value is set to `true`, it will affect a number of\n+#       configuration options below as well, if they have been left\n+#       unconfigured in this file.\n+#\n+# Note: changes to the `debug` setting do *not* affect `optimize`\n+#       above. In theory, a \"maximally debuggable\" environment would\n+#       set `optimize` to `false` above to assist the introspection\n+#       facilities of debuggers like lldb and gdb. To recreate such an\n+#       environment, explicitly set `optimize` to `false` and `debug`\n+#       to `true`. In practice, everyone leaves `optimize` set to\n+#       `true`, because an unoptimized rustc with debugging\n+#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840\n+#       reported a 25x slowdown) and bootstrapping the supposed\n+#       \"maximally debuggable\" environment (notably libstd) takes\n+#       hours to build.\n+#\n+#debug = false\n+\n # Number of codegen units to use for each compiler invocation. A value of 0\n # means \"the number of cores on this machine\", and 1+ is passed through to the\n # compiler."}, {"sha": "c01086b3f6f2b42cc809401afbf94fbfdd979f82", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -1269,7 +1269,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.19\"\n+version = \"0.0.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2484,7 +2484,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3289,7 +3289,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum memchr 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a3b4142ab8738a78c51896f704f83c11df047ff1bda9a92a661aa6361552d93d\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9908ed7c62f990c21ab41fdca53a864a3ada0da69d8729c4de727b397e27bc11\"\n+\"checksum minifier 0.0.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96c269bb45c39b333392b2b18ad71760b34ac65666591386b0e959ed58b3f474\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"396aa0f2003d7df8395cb93e09871561ccc3e785f0acb369170e8cc74ddf9226\"\n \"checksum new_debug_unreachable 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0cdc457076c78ab54d5e0d6fa7c47981757f1e34dc39ff92787f217dede586c4\""}, {"sha": "a5ed096a735810b09a0304faa53686c3aa1bac33", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -628,6 +628,9 @@ impl Config {\n         let default = false;\n         config.llvm_assertions = llvm_assertions.unwrap_or(default);\n \n+        let default = true;\n+        config.rust_optimize = optimize.unwrap_or(default);\n+\n         let default = match &config.channel[..] {\n             \"stable\" | \"beta\" | \"nightly\" => true,\n             _ => false,\n@@ -640,7 +643,6 @@ impl Config {\n         config.debug_jemalloc = debug_jemalloc.unwrap_or(default);\n         config.rust_debuginfo = debuginfo.unwrap_or(default);\n         config.rust_debug_assertions = debug_assertions.unwrap_or(default);\n-        config.rust_optimize = optimize.unwrap_or(!default);\n \n         let default = config.channel == \"dev\";\n         config.ignore_git = ignore_git.unwrap_or(default);"}, {"sha": "5d174719ab23e4d60ac48b14bd4f0f814b67322c", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -91,13 +91,13 @@ pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     output.status.success()\n }\n \n-pub fn gnu_target(target: &str) -> String {\n+pub fn gnu_target(target: &str) -> &str {\n     match target {\n-        \"i686-pc-windows-msvc\" => \"i686-pc-win32\".to_string(),\n-        \"x86_64-pc-windows-msvc\" => \"x86_64-pc-win32\".to_string(),\n-        \"i686-pc-windows-gnu\" => \"i686-w64-mingw32\".to_string(),\n-        \"x86_64-pc-windows-gnu\" => \"x86_64-w64-mingw32\".to_string(),\n-        s => s.to_string(),\n+        \"i686-pc-windows-msvc\" => \"i686-pc-win32\",\n+        \"x86_64-pc-windows-msvc\" => \"x86_64-pc-win32\",\n+        \"i686-pc-windows-gnu\" => \"i686-w64-mingw32\",\n+        \"x86_64-pc-windows-gnu\" => \"x86_64-w64-mingw32\",\n+        s => s,\n     }\n }\n "}, {"sha": "91010262981e884981a46110a6acc659bc1d7e99", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -15,65 +15,66 @@\n \n The principle is simple: This script receives a path to generated HTML\n documentation and a \"template\" script, which has a series of check\n-commands like `@has` or `@matches`. Each command can be used to check if\n+commands like `@has` or `@matches`. Each command is used to check if\n some pattern is present or not present in the particular file or in\n-the particular node of HTML tree. In many cases, the template script\n-happens to be a source code given to rustdoc.\n+a particular node of the HTML tree. In many cases, the template script\n+happens to be the source code given to rustdoc.\n \n While it indeed is possible to test in smaller portions, it has been\n hard to construct tests in this fashion and major rendering errors were\n-discovered much later. This script is designed for making the black-box\n-and regression testing of Rustdoc easy. This does not preclude the needs\n-for unit testing, but can be used to complement related tests by quickly\n+discovered much later. This script is designed to make black-box and\n+regression testing of Rustdoc easy. This does not preclude the needs for\n+unit testing, but can be used to complement related tests by quickly\n showing the expected renderings.\n \n In order to avoid one-off dependencies for this task, this script uses\n a reasonably working HTML parser and the existing XPath implementation\n-from Python's standard library. Hopefully we won't render\n+from Python's standard library. Hopefully, we won't render\n non-well-formed HTML.\n \n # Commands\n \n Commands start with an `@` followed by a command name (letters and\n hyphens), and zero or more arguments separated by one or more whitespace\n-and optionally delimited with single or double quotes. The `@` mark\n-cannot be preceded by a non-whitespace character. Other lines (including\n-every text up to the first `@`) are ignored, but it is recommended to\n-avoid the use of `@` in the template file.\n+characters and optionally delimited with single or double quotes. The `@`\n+mark cannot be preceded by a non-whitespace character. Other lines\n+(including every text up to the first `@`) are ignored, but it is\n+recommended to avoid the use of `@` in the template file.\n \n There are a number of supported commands:\n \n-* `@has PATH` checks for the existence of given file.\n+* `@has PATH` checks for the existence of the given file.\n \n   `PATH` is relative to the output directory. It can be given as `-`\n   which repeats the most recently used `PATH`.\n \n * `@has PATH PATTERN` and `@matches PATH PATTERN` checks for\n-  the occurrence of given `PATTERN` in the given file. Only one\n-  occurrence of given pattern is enough.\n+  the occurrence of the given pattern `PATTERN` in the specified file.\n+  Only one occurrence of the pattern is enough.\n \n   For `@has`, `PATTERN` is a whitespace-normalized (every consecutive\n   whitespace being replaced by one single space character) string.\n   The entire file is also whitespace-normalized including newlines.\n \n   For `@matches`, `PATTERN` is a Python-supported regular expression.\n-  The file remains intact but the regexp is matched with no `MULTILINE`\n-  and `IGNORECASE` option. You can still use a prefix `(?m)` or `(?i)`\n+  The file remains intact but the regexp is matched without the `MULTILINE`\n+  and `IGNORECASE` options. You can still use a prefix `(?m)` or `(?i)`\n   to override them, and `\\A` and `\\Z` for definitely matching\n   the beginning and end of the file.\n \n   (The same distinction goes to other variants of these commands.)\n \n * `@has PATH XPATH PATTERN` and `@matches PATH XPATH PATTERN` checks for\n-  the presence of given `XPATH` in the given HTML file, and also\n-  the occurrence of given `PATTERN` in the matching node or attribute.\n-  Only one occurrence of given pattern in the match is enough.\n+  the presence of the given XPath `XPATH` in the specified HTML file,\n+  and also the occurrence of the given pattern `PATTERN` in the matching\n+  node or attribute. Only one occurrence of the pattern in the match\n+  is enough.\n \n   `PATH` should be a valid and well-formed HTML file. It does *not*\n   accept arbitrary HTML5; it should have matching open and close tags\n   and correct entity references at least.\n \n-  `XPATH` is an XPath expression to match. This is fairly limited:\n+  `XPATH` is an XPath expression to match. The XPath is fairly limited:\n   `tag`, `*`, `.`, `//`, `..`, `[@attr]`, `[@attr='value']`, `[tag]`,\n   `[POS]` (element located in given `POS`), `[last()-POS]`, `text()`\n   and `@attr` (both as the last segment) are supported. Some examples:\n@@ -85,19 +86,20 @@\n   - `//h1[@class=\"fqn\"]/span[1]/a[last()]/@class` matches a value of\n     `class` attribute in the last `a` element (can be followed by more\n     elements that are not `a`) inside the first `span` in the `h1` with\n-    a class of `fqn`. Note that there cannot be no additional elements\n+    a class of `fqn`. Note that there cannot be any additional elements\n     between them due to the use of `/` instead of `//`.\n \n   Do not try to use non-absolute paths, it won't work due to the flawed\n   ElementTree implementation. The script rejects them.\n \n   For the text matches (i.e. paths not ending with `@attr`), any\n   subelements are flattened into one string; this is handy for ignoring\n-  highlights for example. If you want to simply check the presence of\n-  given node or attribute, use an empty string (`\"\"`) as a `PATTERN`.\n+  highlights for example. If you want to simply check for the presence of\n+  a given node or attribute, use an empty string (`\"\"`) as a `PATTERN`.\n \n-* `@count PATH XPATH COUNT' checks for the occurrence of given XPath\n-  in the given file. The number of occurrences must match the given count.\n+* `@count PATH XPATH COUNT' checks for the occurrence of the given XPath\n+  in the specified file. The number of occurrences must match the given\n+  count.\n \n * `@has-dir PATH` checks for the existence of the given directory.\n "}, {"sha": "490320f57cbf79bd9ca681285f9f504764679095", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -13,6 +13,7 @@ use std::mem;\n use std::ptr;\n \n use rand::{Rng, SeedableRng, XorShiftRng};\n+use rand::distributions::{Standard, Alphanumeric};\n use test::{Bencher, black_box};\n \n #[bench]\n@@ -192,18 +193,20 @@ fn gen_descending(len: usize) -> Vec<u64> {\n     (0..len as u64).rev().collect()\n }\n \n+const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+\n fn gen_random(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter::<u64>().take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_random_bytes(len: usize) -> Vec<u8> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter::<u8>().take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = gen_ascending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -214,7 +217,7 @@ fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n }\n \n fn gen_mostly_descending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = gen_descending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -225,18 +228,18 @@ fn gen_mostly_descending(len: usize) -> Vec<u64> {\n }\n \n fn gen_strings(len: usize) -> Vec<String> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n+    let mut rng = XorShiftRng::from_seed(SEED);\n     let mut v = vec![];\n     for _ in 0..len {\n         let n = rng.gen::<usize>() % 20 + 1;\n-        v.push(rng.gen_ascii_chars().take(n).collect());\n+        v.push(rng.sample_iter(&Alphanumeric).take(n).collect());\n     }\n     v\n }\n \n fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n-    let mut rng = XorShiftRng::from_seed([0, 1, 2, 3]);\n-    rng.gen_iter().map(|x| [x; 16]).take(len).collect()\n+    let mut rng = XorShiftRng::from_seed(SEED);\n+    rng.sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n }\n \n macro_rules! sort {"}, {"sha": "f7a0bbdceafc93325359fbb83a51b413548db0da", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -120,11 +120,17 @@ use raw_vec::RawVec;\n /// assert_eq!(vec, [1, 2, 3, 4]);\n /// ```\n ///\n-/// It can also initialize each element of a `Vec<T>` with a given value:\n+/// It can also initialize each element of a `Vec<T>` with a given value.\n+/// This may be more efficient than performing allocation and initialization\n+/// in separate steps, especially when initializing a vector of zeros:\n ///\n /// ```\n /// let vec = vec![0; 5];\n /// assert_eq!(vec, [0, 0, 0, 0, 0]);\n+///\n+/// // The following is equivalent, but potentially slower:\n+/// let mut vec1 = Vec::with_capacity(5);\n+/// vec1.resize(5, 0);\n /// ```\n ///\n /// Use a `Vec<T>` as an efficient stack:"}, {"sha": "15283036bb49522d35aec181804831dba3fb4dce", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -20,6 +20,10 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n+#![cfg_attr(\n+    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+    feature(integer_atomics, stdsimd)\n+)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n #![rustc_alloc_kind = \"lib\"]\n \n@@ -331,29 +335,76 @@ mod platform {\n     use core::alloc::{GlobalAlloc, Layout};\n     use System;\n \n-    // No need for synchronization here as wasm is currently single-threaded\n     static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n \n     #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n     unsafe impl GlobalAlloc for System {\n         #[inline]\n         unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.malloc(layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.calloc(layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+            let _lock = lock::lock();\n             DLMALLOC.free(ptr, layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+            let _lock = lock::lock();\n             DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size)\n         }\n     }\n+\n+    #[cfg(target_feature = \"atomics\")]\n+    mod lock {\n+        use core::arch::wasm32;\n+        use core::sync::atomic::{AtomicI32, Ordering::SeqCst};\n+\n+        static LOCKED: AtomicI32 = AtomicI32::new(0);\n+\n+        pub struct DropLock;\n+\n+        pub fn lock() -> DropLock {\n+            loop {\n+                if LOCKED.swap(1, SeqCst) == 0 {\n+                    return DropLock\n+                }\n+                unsafe {\n+                    let r = wasm32::atomic::wait_i32(\n+                        &LOCKED as *const AtomicI32 as *mut i32,\n+                        1,  // expected value\n+                        -1, // timeout\n+                    );\n+                    debug_assert!(r == 0 || r == 1);\n+                }\n+            }\n+        }\n+\n+        impl Drop for DropLock {\n+            fn drop(&mut self) {\n+                let r = LOCKED.swap(0, SeqCst);\n+                debug_assert_eq!(r, 1);\n+                unsafe {\n+                    wasm32::atomic::wake(\n+                        &LOCKED as *const AtomicI32 as *mut i32,\n+                        1, // only one thread\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    #[cfg(not(target_feature = \"atomics\"))]\n+    mod lock {\n+        pub fn lock() {} // no atomics, no threads, that's easy!\n+    }\n }"}, {"sha": "897e9cc2a381f2305c96a59bc15b3508833637d6", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -62,6 +62,16 @@ macro_rules! span_bug {\n     })\n }\n \n+#[macro_export]\n+macro_rules! static_assert {\n+    ($name:ident: $test:expr) => {\n+        // Use the bool to access an array such that if the bool is false, the access\n+        // is out-of-bounds.\n+        #[allow(dead_code)]\n+        static $name: () = [()][!$test as usize];\n+    }\n+}\n+\n #[macro_export]\n macro_rules! __impl_stable_hash_field {\n     ($field:ident, $ctx:expr, $hasher:expr) => ($field.hash_stable($ctx, $hasher));"}, {"sha": "a90f03f536ad52d62cb4d7d419a92f14c997e4d7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -167,8 +167,7 @@ newtype_index! {\n impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n-#[allow(dead_code)]\n-static ASSERT: () = [()][!(mem::size_of::<ScopeData>() == 4) as usize];\n+static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);\n \n impl Scope {\n     /// Returns a item-local id associated with this scope."}, {"sha": "ab1df2d4c3bb9f3eaece7df32fef18c18ff1da4b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -829,12 +829,9 @@ impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n         #[cfg(target_pointer_width = \"64\")]\n-        #[allow(dead_code)]\n-        static ASSERT_TY_KIND: () =\n-            [()][!(::std::mem::size_of::<ty::TyKind<'_>>() <= 24) as usize];\n+        static_assert!(ASSERT_TY_KIND: ::std::mem::size_of::<ty::TyKind<'_>>() <= 24);\n         #[cfg(target_pointer_width = \"64\")]\n-        #[allow(dead_code)]\n-        static ASSERT_TYS: () = [()][!(::std::mem::size_of::<ty::TyS<'_>>() <= 32) as usize];\n+        static_assert!(ASSERT_TYS: ::std::mem::size_of::<ty::TyS<'_>>() <= 32);\n \n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);\n         let mk_region = |r| {"}, {"sha": "870eeadc081e76b856087c8d2b84c638eaaed545", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -76,9 +76,9 @@ pub enum StringPart {\n }\n \n impl StringPart {\n-    pub fn content(&self) -> String {\n+    pub fn content(&self) -> &str {\n         match self {\n-            &StringPart::Normal(ref s) | & StringPart::Highlighted(ref s) => s.to_owned()\n+            &StringPart::Normal(ref s) | & StringPart::Highlighted(ref s) => s\n         }\n     }\n }\n@@ -398,7 +398,7 @@ impl Diagnostic {\n     }\n \n     pub fn message(&self) -> String {\n-        self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n+        self.message.iter().map(|i| i.0.as_str()).collect::<String>()\n     }\n \n     pub fn styled_message(&self) -> &Vec<(String, Style)> {\n@@ -448,7 +448,7 @@ impl Diagnostic {\n \n impl SubDiagnostic {\n     pub fn message(&self) -> String {\n-        self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n+        self.message.iter().map(|i| i.0.as_str()).collect::<String>()\n     }\n \n     pub fn styled_message(&self) -> &Vec<(String, Style)> {"}, {"sha": "ec3c310c63c4f80c42ec88d65cfed1f1efcd2137", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -59,15 +59,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let t = cx.tables.expr_ty(&expr);\n-        let ty_warned = match t.sty {\n-            ty::Tuple(ref tys) if tys.is_empty() => return,\n-            ty::Never => return,\n+        // FIXME(varkor): replace with `t.is_unit() || t.conservative_is_uninhabited()`.\n+        let type_permits_no_use = match t.sty {\n+            ty::Tuple(ref tys) if tys.is_empty() => true,\n+            ty::Never => true,\n             ty::Adt(def, _) => {\n                 if def.variants.is_empty() {\n-                    return;\n+                    true\n+                } else {\n+                    check_must_use(cx, def.did, s.span, \"\")\n                 }\n-                check_must_use(cx, def.did, s.span, \"\")\n-            },\n+            }\n             _ => false,\n         };\n \n@@ -95,7 +97,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         if let Some(def) = maybe_def {\n             let def_id = def.def_id();\n             fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+        } else if type_permits_no_use {\n+            // We don't warn about unused unit or uninhabited types.\n+            // (See https://github.com/rust-lang/rust/issues/43806 for details.)\n+            return;\n         }\n+\n         let must_use_op = match expr.node {\n             // Hardcoding operators here seemed more expedient than the\n             // refactoring that would be needed to look up the `#[must_use]`\n@@ -139,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             op_warned = true;\n         }\n \n-        if !(ty_warned || fn_warned || op_warned) {\n+        if !(type_permits_no_use || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n \n@@ -233,7 +240,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n                 .find(|&&(builtin, ty, _)| name == builtin && ty == AttributeType::CrateLevel)\n                 .is_some();\n \n-            // Has a plugin registered this attribute as one which must be used at\n+            // Has a plugin registered this attribute as one that must be used at\n             // the crate level?\n             let plugin_crate = plugin_attributes.iter()\n                 .find(|&&(ref x, t)| name == &**x && AttributeType::CrateLevel == t)"}, {"sha": "ea62694f8be753c7c52e6b1c71fd8127b0af5282", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -68,6 +68,7 @@ enum GroupedMoveError<'tcx> {\n enum BorrowedContentSource {\n     Arc,\n     Rc,\n+    DerefRawPointer,\n     Other,\n }\n \n@@ -76,6 +77,7 @@ impl Display for BorrowedContentSource {\n         match *self {\n             BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n             BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n+            BorrowedContentSource::DerefRawPointer => write!(f, \"dereference of raw pointer\"),\n             BorrowedContentSource::Other => write!(f, \"borrowed content\"),\n         }\n     }\n@@ -279,6 +281,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             self.prefixes(&original_path, PrefixSet::All)\n                             .any(|p| p.is_upvar_field_projection(self.mir, &self.infcx.tcx)\n                                  .is_some());\n+                        debug!(\"report: ty={:?}\", ty);\n                         match ty.sty {\n                             ty::Array(..) | ty::Slice(..) =>\n                                 self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n@@ -582,6 +585,18 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        // If we didn't find an `Arc` or an `Rc`, then check specifically for\n+        // a dereference of a place that has the type of a raw pointer.\n+        // We can't use `place.ty(..).to_ty(..)` here as that strips away the raw pointer.\n+        if let Place::Projection(box Projection {\n+            base,\n+            elem: ProjectionElem::Deref,\n+        }) = place {\n+            if base.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx).is_unsafe_ptr() {\n+                return BorrowedContentSource::DerefRawPointer;\n+            }\n+        }\n+\n         BorrowedContentSource::Other\n     }\n }"}, {"sha": "c72a5894b6ac7f54f0b83bf1f9ed7bcf70e78479", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -11,7 +11,6 @@\n //! Functions concerning immediate values and operands, and reading from operands.\n //! All high-level functions to read from memory work on operands as sources.\n \n-use std::hash::{Hash, Hasher};\n use std::convert::TryInto;\n \n use rustc::{mir, ty};\n@@ -290,7 +289,7 @@ impl<Tag> Operand<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct OpTy<'tcx, Tag=()> {\n     crate op: Operand<Tag>, // ideally we'd make this private, but const_prop needs this\n     pub layout: TyLayout<'tcx>,\n@@ -324,26 +323,6 @@ impl<'tcx, Tag> From<ValTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n-// Validation needs to hash OpTy, but we cannot hash Layout -- so we just hash the type\n-impl<'tcx, Tag> Hash for OpTy<'tcx, Tag>\n-    where Tag: Hash\n-{\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.op.hash(state);\n-        self.layout.ty.hash(state);\n-    }\n-}\n-impl<'tcx, Tag> PartialEq for OpTy<'tcx, Tag>\n-    where Tag: PartialEq\n-{\n-    fn eq(&self, other: &Self) -> bool {\n-        self.op == other.op && self.layout.ty == other.layout.ty\n-    }\n-}\n-impl<'tcx, Tag> Eq for OpTy<'tcx, Tag>\n-    where Tag: Eq\n-{}\n-\n impl<'tcx, Tag> OpTy<'tcx, Tag>\n {\n     #[inline]"}, {"sha": "6b28fd091748f14114b21d7224e82620b5a65d55", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -874,7 +874,7 @@ impl LayoutDetails {\n /// to those obtained from `layout_of(ty)`, as we need to produce\n /// layouts for which Rust types do not exist, such as enum variants\n /// or synthetic fields of enums (i.e. discriminants) and fat pointers.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct TyLayout<'a, Ty> {\n     pub ty: Ty,\n     pub details: &'a LayoutDetails"}, {"sha": "8bac007b748ac20a6376f2ceb58f0e41f5d04922", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -9,6 +9,6 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.19\"\n+minifier = \"0.0.20\"\n tempfile = \"3\"\n parking_lot = \"0.6.4\""}, {"sha": "23f1e15de3c925c7c8acb3bebf9a68c2d840f875", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -4098,12 +4098,13 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                         </div>\",\n                        version)?;\n             }\n+        }\n \n+        write!(fmt, \"<div class=\\\"sidebar-elems\\\">\")?;\n+        if it.is_crate() {\n             write!(fmt, \"<a id='all-types' href='all.html'><p>See all {}'s items</p></a>\",\n                    it.name.as_ref().expect(\"crates always have a name\"))?;\n         }\n-\n-        write!(fmt, \"<div class=\\\"sidebar-elems\\\">\")?;\n         match it.inner {\n             clean::StructItem(ref s) => sidebar_struct(fmt, it, s)?,\n             clean::TraitItem(ref t) => sidebar_trait(fmt, it, t)?,"}, {"sha": "91ff03a327df4b1c78d4f866eaf4c228dfae99dc", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -908,10 +908,9 @@ span.since {\n \t\tpadding-top: 0px;\n \t}\n \n-\t.sidebar {\n+\tbody > .sidebar {\n \t\theight: 45px;\n \t\tmin-height: 40px;\n-\t\twidth: calc(100% + 30px);\n \t\tmargin: 0;\n \t\tmargin-left: -15px;\n \t\tpadding: 0 15px;\n@@ -1013,6 +1012,10 @@ span.since {\n \t.anchor {\n \t\tdisplay: none !important;\n \t}\n+\n+\th1.fqn {\n+\t\toverflow: initial;\n+\t}\n }\n \n @media print {\n@@ -1112,6 +1115,18 @@ h4 > .important-traits {\n \ttop: 2px;\n }\n \n+#all-types {\n+\ttext-align: center;\n+\tborder: 1px solid;\n+\tmargin: 0 10px;\n+\tmargin-bottom: 10px;\n+\tdisplay: block;\n+\tborder-radius: 7px;\n+}\n+#all-types > p {\n+\tmargin: 5px 0;\n+}\n+\n @media (max-width: 700px) {\n \th4 > .important-traits {\n \t\tposition: absolute;\n@@ -1135,6 +1150,9 @@ h4 > .important-traits {\n \t\tbackground-color: rgba(0,0,0,0);\n \t\theight: 100%;\n \t}\n+\t.sidebar {\n+\t\twidth: calc(100% + 30px);\n+\t}\n \n \t.show-it {\n \t\tdisplay: block;\n@@ -1180,6 +1198,10 @@ h4 > .important-traits {\n \t.impl > .collapse-toggle {\n \t\tleft: -10px;\n \t}\n+\n+\t#all-types {\n+\t\tmargin: 10px;\n+\t}\n }\n \n \n@@ -1383,17 +1405,6 @@ kbd {\n #main > ul > li {\n \tlist-style: none;\n }\n-#all-types {\n-\ttext-align: center;\n-\tborder: 1px solid;\n-\tmargin: 0 10px;\n-\tmargin-bottom: 10px;\n-\tdisplay: block;\n-\tborder-radius: 7px;\n-}\n-#all-types > p {\n-\tmargin: 5px 0;\n-}\n \n .non-exhaustive {\n \tmargin-bottom: 1em;"}, {"sha": "017949291bcf16e37f200141b9254d9fdbaad544", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -726,7 +726,7 @@ impl OpenOptions {\n     /// If a file is opened with both read and append access, beware that after\n     /// opening, and after every write, the position for reading may be set at the\n     /// end of the file. So, before writing, save the current position (using\n-    /// [`seek`]`(`[`SeekFrom`]`::`[`Current`]`(0))`, and restore it before the next read.\n+    /// [`seek`]`(`[`SeekFrom`]`::`[`Current`]`(0))`), and restore it before the next read.\n     ///\n     /// ## Note\n     ///"}, {"sha": "5c87035d8e929214e11ced115b76469307e2923a", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -79,7 +79,7 @@ pub use core::panic::{PanicInfo, Location};\n ///\n /// Simply put, a type `T` implements `UnwindSafe` if it cannot easily allow\n /// witnessing a broken invariant through the use of `catch_unwind` (catching a\n-/// panic). This trait is a marker trait, so it is automatically implemented for\n+/// panic). This trait is an auto trait, so it is automatically implemented for\n /// many types, and it is also structurally composed (e.g. a struct is unwind\n /// safe if all of its components are unwind safe).\n ///"}, {"sha": "3b432d05132095adc8206d36e022275c51ebb321", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -908,11 +908,36 @@ mod prim_usize { }\n /// `&mut T` references can be freely coerced into `&T` references with the same referent type, and\n /// references with longer lifetimes can be freely coerced into references with shorter ones.\n ///\n+/// Reference equality by address, instead of comparing the values pointed to, is accomplished via\n+/// implicit reference-pointer coercion and raw pointer equality via [`ptr::eq`], while\n+/// [`PartialEq`] compares values.\n+///\n+/// [`ptr::eq`]: ptr/fn.eq.html\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let five = 5;\n+/// let other_five = 5;\n+/// let five_ref = &five;\n+/// let same_five_ref = &five;\n+/// let other_five_ref = &other_five;\n+///\n+/// assert!(five_ref == same_five_ref);\n+/// assert!(five_ref == other_five_ref);\n+///\n+/// assert!(ptr::eq(five_ref, same_five_ref));\n+/// assert!(!ptr::eq(five_ref, other_five_ref));\n+/// ```\n+///\n /// For more information on how to use references, see [the book's section on \"References and\n /// Borrowing\"][book-refs].\n ///\n /// [book-refs]: ../book/second-edition/ch04-02-references-and-borrowing.html\n ///\n+/// # Trait implementations\n+///\n /// The following traits are implemented for all `&T`, regardless of the type of its referent:\n ///\n /// * [`Copy`]"}, {"sha": "98845e457b25c8a25dd1ee5b9554cafbfa5269a8", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -329,7 +329,7 @@ impl Once {\n     /// assert!(handle.join().is_err());\n     /// assert_eq!(INIT.is_completed(), false);\n     /// ```\n-    #[unstable(feature = \"once_is_completed\", issue = \"42\")]\n+    #[unstable(feature = \"once_is_completed\", issue = \"54890\")]\n     #[inline]\n     pub fn is_completed(&self) -> bool {\n         // An `Acquire` load is enough because that makes all the initialization"}, {"sha": "b5896f37c00b8b11eba35ac4798c7440e8bc5f2a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -772,6 +772,11 @@ impl<'a> Parser<'a> {\n                     //   |                   expected one of 8 possible tokens here\n                     err.span_label(self.span, label_exp);\n                 }\n+                _ if self.prev_span == syntax_pos::DUMMY_SP => {\n+                    // Account for macro context where the previous span might not be\n+                    // available to avoid incorrect output (#54841).\n+                    err.span_label(self.span, \"unexpected token\");\n+                }\n                 _ => {\n                     err.span_label(sp, label_exp);\n                     err.span_label(self.span, \"unexpected token\");"}, {"sha": "677aa529f9f349b0823c7744edf64d3cd5f37db5", "filename": "src/test/rustdoc/inline_cross/issue-31948-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -22,13 +22,13 @@ extern crate rustdoc_nonreachable_impls;\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_1/trait.Bark.html\n-// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Foo'\n // @has - '//code' 'for Wobble'\n // @!has - '//code' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Bark;\n \n // @has issue_31948_1/trait.Woof.html\n-// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Foo'\n // @has - '//code' 'for Wobble'\n // @!has - '//code' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Woof;"}, {"sha": "7b42ed378ef5cbaf3feecf895f897021b2f33f59", "filename": "src/test/rustdoc/inline_cross/issue-31948-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -22,7 +22,7 @@ extern crate rustdoc_nonreachable_impls;\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_2/trait.Qux.html\n-// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Foo'\n // @has - '//code' 'for Wobble'\n pub use rustdoc_nonreachable_impls::hidden::Qux;\n "}, {"sha": "c3a2180b9f082e062f9afab0ede465a7511ac8f3", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:13:13\n    |\n LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n    |             ^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             cannot move out of dereference of raw pointer\n    |             help: consider removing the `*`: `x`\n \n error: aborting due to previous error"}, {"sha": "362778b26c861911d2624046c87cd15c65d575ea", "filename": "src/test/ui/issues/issue-20801.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -16,22 +16,22 @@ LL |     let b = unsafe { *imm_ref() };\n    |                      cannot move out of borrowed content\n    |                      help: consider removing the `*`: `imm_ref()`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/issue-20801.rs:42:22\n    |\n LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of borrowed content\n+   |                      cannot move out of dereference of raw pointer\n    |                      help: consider removing the `*`: `mut_ptr()`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/issue-20801.rs:45:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of borrowed content\n+   |                      cannot move out of dereference of raw pointer\n    |                      help: consider removing the `*`: `const_ptr()`\n \n error: aborting due to 4 previous errors"}, {"sha": "92568252164f683d0b7e57ee78c564143553dffd", "filename": "src/test/ui/lint/must_use-unit.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -0,0 +1,17 @@\n+#![feature(never_type)]\n+\n+#![deny(unused_must_use)]\n+\n+#[must_use]\n+fn foo() {}\n+\n+#[must_use]\n+fn bar() -> ! {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    foo(); //~ unused return value of `foo`\n+\n+    bar(); //~ unused return value of `bar`\n+}"}, {"sha": "0a956f74611b53839bf9b052eeecca967ae33696", "filename": "src/test/ui/lint/must_use-unit.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -0,0 +1,20 @@\n+error: unused return value of `foo` which must be used\n+  --> $DIR/must_use-unit.rs:14:5\n+   |\n+LL |     foo(); //~ unused return value of `foo`\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must_use-unit.rs:3:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused return value of `bar` which must be used\n+  --> $DIR/must_use-unit.rs:16:5\n+   |\n+LL |     bar(); //~ unused return value of `bar`\n+   |     ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e27056b412a0fb5383b93ba47d5642133f8d5011", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945372d26818f93d6f5cded7b751749e280b67bf/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=945372d26818f93d6f5cded7b751749e280b67bf", "patch": "@@ -1,9 +1,6 @@\n error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found `let`\n   --> $DIR/issue-54441.rs:5:9\n    |\n-LL | #![feature(macros_in_extern)]\n-   | - expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n-...\n LL |         let //~ ERROR expected\n    |         ^^^ unexpected token\n ..."}]}