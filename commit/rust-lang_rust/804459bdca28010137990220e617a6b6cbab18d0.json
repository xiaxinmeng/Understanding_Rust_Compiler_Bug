{"sha": "804459bdca28010137990220e617a6b6cbab18d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDQ1OWJkY2EyODAxMDEzNzk5MDIyMGU2MTdhNmI2Y2JhYjE4ZDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-10T23:30:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-10T23:47:22Z"}, "message": "Issue warnings for unnecessary path disambiguators", "tree": {"sha": "7abd046c5a1bf602ba5f384c6c25b4ace3f9dc9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abd046c5a1bf602ba5f384c6c25b4ace3f9dc9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804459bdca28010137990220e617a6b6cbab18d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804459bdca28010137990220e617a6b6cbab18d0", "html_url": "https://github.com/rust-lang/rust/commit/804459bdca28010137990220e617a6b6cbab18d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804459bdca28010137990220e617a6b6cbab18d0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d21f21f71b9b4a8a0662a223c20db7a789f5637", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d21f21f71b9b4a8a0662a223c20db7a789f5637", "html_url": "https://github.com/rust-lang/rust/commit/7d21f21f71b9b4a8a0662a223c20db7a789f5637"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "16a6a0717e0bec432d5e6c67d6fdff917fbcde9f", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/804459bdca28010137990220e617a6b6cbab18d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804459bdca28010137990220e617a6b6cbab18d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=804459bdca28010137990220e617a6b6cbab18d0", "patch": "@@ -599,9 +599,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n                 panic!(FatalError)\n             }\n         },\n-        \"path\" => {\n-            token::NtPath(panictry!(p.parse_path(PathStyle::Type)))\n-        },\n+        \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n         // this is not supposed to happen, since it has been checked"}, {"sha": "fbf7c4adf371a38e8e981d3e76022e8f4e344d24", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/804459bdca28010137990220e617a6b6cbab18d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804459bdca28010137990220e617a6b6cbab18d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=804459bdca28010137990220e617a6b6cbab18d0", "patch": "@@ -1755,7 +1755,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::ModSep)?;\n \n         let qself = QSelf { ty, position: path.segments.len() };\n-        self.parse_path_segments(&mut path.segments, style)?;\n+        self.parse_path_segments(&mut path.segments, style, true)?;\n \n         Ok((qself, ast::Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n@@ -1770,16 +1770,20 @@ impl<'a> Parser<'a> {\n     /// `a::b::C::<D>` (with disambiguator)\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n-    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path>\n-    {\n+    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n+        self.parse_path_common(style, true)\n+    }\n+\n+    pub fn parse_path_common(&mut self, style: PathStyle, enable_warning: bool)\n+                             -> PResult<'a, ast::Path> {\n         maybe_whole!(self, NtPath, |x| x);\n \n         let lo = self.meta_var_span.unwrap_or(self.span);\n         let mut segments = Vec::new();\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::crate_root(lo));\n         }\n-        self.parse_path_segments(&mut segments, style)?;\n+        self.parse_path_segments(&mut segments, style, enable_warning)?;\n \n         Ok(ast::Path { segments, span: lo.to(self.prev_span) })\n     }\n@@ -1804,18 +1808,19 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n-    fn parse_path_segments(&mut self, segments: &mut Vec<PathSegment>, style: PathStyle)\n-                           -> PResult<'a, ()> {\n+    fn parse_path_segments(&mut self, segments: &mut Vec<PathSegment>, style: PathStyle,\n+                           enable_warning: bool) -> PResult<'a, ()> {\n         loop {\n-            segments.push(self.parse_path_segment(style)?);\n+            segments.push(self.parse_path_segment(style, enable_warning)?);\n \n             if self.is_import_coupler() || !self.eat(&token::ModSep) {\n                 return Ok(());\n             }\n         }\n     }\n \n-    fn parse_path_segment(&mut self, style: PathStyle) -> PResult<'a, PathSegment> {\n+    fn parse_path_segment(&mut self, style: PathStyle, enable_warning: bool)\n+                          -> PResult<'a, PathSegment> {\n         let ident_span = self.span;\n         let ident = self.parse_path_segment_ident()?;\n \n@@ -1835,7 +1840,10 @@ impl<'a> Parser<'a> {\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n             // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n             let lo = self.span;\n-            self.eat(&token::ModSep);\n+            if self.eat(&token::ModSep) && style == PathStyle::Type && enable_warning {\n+                self.diagnostic().struct_span_warn(self.prev_span, \"unnecessary path disambiguator\")\n+                                 .span_label(self.prev_span, \"try removing `::`\").emit();\n+            }\n \n             let parameters = if self.eat_lt() {\n                 // `<'a, T, A = U>`\n@@ -2371,7 +2379,7 @@ impl<'a> Parser<'a> {\n \n     // Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n-        let segment = self.parse_path_segment(PathStyle::Expr)?;\n+        let segment = self.parse_path_segment(PathStyle::Expr, true)?;\n         Ok(match self.token {\n             token::OpenDelim(token::Paren) => {\n                 // Method call `expr.f()`"}, {"sha": "3afbfa61984b566456317591534df18c0a5571ef", "filename": "src/test/compile-fail/issue-36116.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/804459bdca28010137990220e617a6b6cbab18d0/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804459bdca28010137990220e617a6b6cbab18d0/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs?ref=804459bdca28010137990220e617a6b6cbab18d0", "patch": "@@ -13,13 +13,24 @@\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n+macro_rules! m {\n+    ($p: path) => {\n+        let _ = $p(0);\n+        let _: $p;\n+    }\n+}\n+\n struct Foo<T> {\n     _a: T,\n }\n \n+struct S<T>(T);\n+\n fn f() {\n-    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n-    let g: Foo::<i32> = Foo { _a: 42 };\n+    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>); //~ WARN unnecessary path disambiguator\n+    let g: Foo::<i32> = Foo { _a: 42 }; //~ WARN unnecessary path disambiguator\n+\n+    m!(S::<u8>); // OK, no warning\n }\n \n #[rustc_error]"}]}