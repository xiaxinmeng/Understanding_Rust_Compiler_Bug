{"sha": "38aca17c474321e4c260e36f173275a90d753397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YWNhMTdjNDc0MzIxZTRjMjYwZTM2ZjE3MzI3NWE5MGQ3NTMzOTc=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T01:07:11Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:34Z"}, "message": "Remove libdebug and update tests.", "tree": {"sha": "511685ac0b7fcf16abbb7c2ba790f8f81c59d54e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511685ac0b7fcf16abbb7c2ba790f8f81c59d54e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38aca17c474321e4c260e36f173275a90d753397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38aca17c474321e4c260e36f173275a90d753397", "html_url": "https://github.com/rust-lang/rust/commit/38aca17c474321e4c260e36f173275a90d753397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38aca17c474321e4c260e36f173275a90d753397/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e0d3a5bf4c88650a22f605f822e02c6b163580", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e0d3a5bf4c88650a22f605f822e02c6b163580", "html_url": "https://github.com/rust-lang/rust/commit/b6e0d3a5bf4c88650a22f605f822e02c6b163580"}], "stats": {"total": 1952, "additions": 236, "deletions": 1716}, "files": [{"sha": "6536172e2dabe6e6a91595988393afbbd2323a4d", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -1177,7 +1177,7 @@ This is a list of behaviour not considered *unsafe* in Rust terms, but that may\n be undesired.\n \n * Deadlocks\n-* Reading data from private fields (`std::repr`, `format!(\"{:?}\", x)`)\n+* Reading data from private fields (`std::repr`)\n * Leaks due to reference count cycles, even in the global heap\n * Exiting without calling destructors\n * Sending signals"}, {"sha": "2df9a585fec994ff01a178163f4244e6632f15a1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -77,7 +77,6 @@ extern crate libc;\n \n // Allow testing this library\n \n-#[cfg(test)] extern crate debug;\n #[cfg(test)] extern crate native;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;"}, {"sha": "9f9894348203b0cd3bd743572ad6eff21a843e79", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -33,7 +33,6 @@ extern crate alloc;\n \n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate test;\n-#[cfg(test)] extern crate debug;\n \n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;"}, {"sha": "0b04a07ea888af5a667fa1ad61015c0382141c5d", "filename": "src/libdebug/fmt.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Ffmt.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,53 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `{:?}` format qualifier\n-//!\n-//! This module contains the `Poly` trait which is used to implement the `{:?}`\n-//! format expression in formatting macros. This trait is defined for all types\n-//! automatically, so it is likely not necessary to use this module manually\n-\n-use std::fmt;\n-\n-use repr;\n-\n-/// Format trait for the `?` character\n-pub trait Poly {\n-    /// Formats the value using the given formatter.\n-    #[experimental]\n-    fn fmt(&self, &mut fmt::Formatter) -> fmt::Result;\n-}\n-\n-#[doc(hidden)]\n-pub fn secret_poly<T: Poly>(x: &T, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    // FIXME #11938 - UFCS would make us able call the this method\n-    //                directly Poly::fmt(x, fmt).\n-    x.fmt(fmt)\n-}\n-\n-impl<T> Poly for T {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match (f.width, f.precision) {\n-            (None, None) => {\n-                match repr::write_repr(f, self) {\n-                    Ok(()) => Ok(()),\n-                    Err(..) => Err(fmt::WriteError),\n-                }\n-            }\n-\n-            // If we have a specified width for formatting, then we have to make\n-            // this allocation of a new string\n-            _ => {\n-                let s = repr::repr_to_string(self);\n-                f.pad(s.as_slice())\n-            }\n-        }\n-    }\n-}"}, {"sha": "459e1592f673417b4437a7abd583bd5bc4a42c56", "filename": "src/libdebug/lib.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Debugging utilities for Rust programs\n-//!\n-//! This crate is intended to provide useful functionality when debugging\n-//! programs, such as reflection for printing values. This crate is currently\n-//! entirely experimental as its makeup will likely change over time.\n-//! Additionally, it is not guaranteed that functionality such as reflection\n-//! will persist into the future.\n-\n-#![crate_name = \"debug\"]\n-#![experimental]\n-#![license = \"MIT/ASL2\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![experimental]\n-#![feature(macro_rules)]\n-#![allow(experimental)]\n-\n-pub mod fmt;\n-pub mod reflect;\n-pub mod repr;"}, {"sha": "1e771a2b40a2354caa9d4c1d0cac12b3676b4235", "filename": "src/libdebug/reflect.rs", "status": "removed", "additions": 0, "deletions": 404, "changes": 404, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,404 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-Runtime type reflection\n-\n-*/\n-\n-#![allow(missing_doc)]\n-\n-use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n-use std::mem;\n-\n-/**\n- * Trait for visitor that wishes to reflect on data.\n- *\n- * To use this, create a struct that encapsulates the set of pointers you wish\n- * to walk through a data structure, and implement both `MovePtr` for it as well\n- * as `TyVisitor`; then build a MovePtrAdaptor wrapped around your struct.\n- */\n-pub trait MovePtr {\n-    fn move_ptr(&mut self, adjustment: |*const u8| -> *const u8);\n-    fn push_ptr(&mut self);\n-    fn pop_ptr(&mut self);\n-}\n-\n-/// Helper function for alignment calculation.\n-#[inline]\n-pub fn align(size: uint, align: uint) -> uint {\n-    ((size + align) - 1u) & !(align - 1u)\n-}\n-\n-/// Adaptor to wrap around visitors implementing MovePtr.\n-pub struct MovePtrAdaptor<V> {\n-    inner: V\n-}\n-\n-impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n-    pub fn new(v: V) -> MovePtrAdaptor<V> {\n-        MovePtrAdaptor { inner: v }\n-    }\n-\n-    #[inline]\n-    pub fn bump(&mut self, sz: uint) {\n-        self.inner.move_ptr(|p| ((p as uint) + sz) as *const u8)\n-    }\n-\n-    #[inline]\n-    pub fn align(&mut self, a: uint) {\n-        self.inner.move_ptr(|p| align(p as uint, a) as *const u8)\n-    }\n-\n-    #[inline]\n-    pub fn align_to<T>(&mut self) {\n-        self.align(mem::min_align_of::<T>());\n-    }\n-\n-    #[inline]\n-    pub fn bump_past<T>(&mut self) {\n-        self.bump(mem::size_of::<T>());\n-    }\n-\n-    pub fn unwrap(self) -> V { self.inner }\n-}\n-\n-/// Abstract type-directed pointer-movement using the MovePtr trait\n-impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n-    fn visit_bot(&mut self) -> bool {\n-        self.align_to::<()>();\n-        if ! self.inner.visit_bot() { return false; }\n-        self.bump_past::<()>();\n-        true\n-    }\n-\n-    fn visit_nil(&mut self) -> bool {\n-        self.align_to::<()>();\n-        if ! self.inner.visit_nil() { return false; }\n-        self.bump_past::<()>();\n-        true\n-    }\n-\n-    fn visit_bool(&mut self) -> bool {\n-        self.align_to::<bool>();\n-        if ! self.inner.visit_bool() { return false; }\n-        self.bump_past::<bool>();\n-        true\n-    }\n-\n-    fn visit_int(&mut self) -> bool {\n-        self.align_to::<int>();\n-        if ! self.inner.visit_int() { return false; }\n-        self.bump_past::<int>();\n-        true\n-    }\n-\n-    fn visit_i8(&mut self) -> bool {\n-        self.align_to::<i8>();\n-        if ! self.inner.visit_i8() { return false; }\n-        self.bump_past::<i8>();\n-        true\n-    }\n-\n-    fn visit_i16(&mut self) -> bool {\n-        self.align_to::<i16>();\n-        if ! self.inner.visit_i16() { return false; }\n-        self.bump_past::<i16>();\n-        true\n-    }\n-\n-    fn visit_i32(&mut self) -> bool {\n-        self.align_to::<i32>();\n-        if ! self.inner.visit_i32() { return false; }\n-        self.bump_past::<i32>();\n-        true\n-    }\n-\n-    fn visit_i64(&mut self) -> bool {\n-        self.align_to::<i64>();\n-        if ! self.inner.visit_i64() { return false; }\n-        self.bump_past::<i64>();\n-        true\n-    }\n-\n-    fn visit_uint(&mut self) -> bool {\n-        self.align_to::<uint>();\n-        if ! self.inner.visit_uint() { return false; }\n-        self.bump_past::<uint>();\n-        true\n-    }\n-\n-    fn visit_u8(&mut self) -> bool {\n-        self.align_to::<u8>();\n-        if ! self.inner.visit_u8() { return false; }\n-        self.bump_past::<u8>();\n-        true\n-    }\n-\n-    fn visit_u16(&mut self) -> bool {\n-        self.align_to::<u16>();\n-        if ! self.inner.visit_u16() { return false; }\n-        self.bump_past::<u16>();\n-        true\n-    }\n-\n-    fn visit_u32(&mut self) -> bool {\n-        self.align_to::<u32>();\n-        if ! self.inner.visit_u32() { return false; }\n-        self.bump_past::<u32>();\n-        true\n-    }\n-\n-    fn visit_u64(&mut self) -> bool {\n-        self.align_to::<u64>();\n-        if ! self.inner.visit_u64() { return false; }\n-        self.bump_past::<u64>();\n-        true\n-    }\n-\n-    fn visit_f32(&mut self) -> bool {\n-        self.align_to::<f32>();\n-        if ! self.inner.visit_f32() { return false; }\n-        self.bump_past::<f32>();\n-        true\n-    }\n-\n-    fn visit_f64(&mut self) -> bool {\n-        self.align_to::<f64>();\n-        if ! self.inner.visit_f64() { return false; }\n-        self.bump_past::<f64>();\n-        true\n-    }\n-\n-    fn visit_char(&mut self) -> bool {\n-        self.align_to::<char>();\n-        if ! self.inner.visit_char() { return false; }\n-        self.bump_past::<char>();\n-        true\n-    }\n-\n-    fn visit_estr_slice(&mut self) -> bool {\n-        self.align_to::<&'static str>();\n-        if ! self.inner.visit_estr_slice() { return false; }\n-        self.bump_past::<&'static str>();\n-        true\n-    }\n-\n-    fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<Box<u8>>();\n-        if ! self.inner.visit_box(mtbl, inner) { return false; }\n-        self.bump_past::<Box<u8>>();\n-        true\n-    }\n-\n-    fn visit_uniq(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<Box<u8>>();\n-        if ! self.inner.visit_uniq(mtbl, inner) { return false; }\n-        self.bump_past::<Box<u8>>();\n-        true\n-    }\n-\n-    fn visit_ptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<*const u8>();\n-        if ! self.inner.visit_ptr(mtbl, inner) { return false; }\n-        self.bump_past::<*const u8>();\n-        true\n-    }\n-\n-    fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<&'static u8>();\n-        if ! self.inner.visit_rptr(mtbl, inner) { return false; }\n-        self.bump_past::<&'static u8>();\n-        true\n-    }\n-\n-    fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.align_to::<&'static [u8]>();\n-        if ! self.inner.visit_evec_slice(mtbl, inner) { return false; }\n-        self.bump_past::<&'static [u8]>();\n-        true\n-    }\n-\n-    fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n-                        inner: *const TyDesc) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_evec_fixed(n, sz, align, inner) {\n-            return false;\n-        }\n-        self.bump(sz);\n-        true\n-    }\n-\n-    fn visit_enter_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_enter_rec(n_fields, sz, align) { return false; }\n-        true\n-    }\n-\n-    fn visit_rec_field(&mut self, i: uint, name: &str,\n-                       mtbl: uint, inner: *const TyDesc) -> bool {\n-        unsafe { self.align((*inner).align); }\n-        if ! self.inner.visit_rec_field(i, name, mtbl, inner) {\n-            return false;\n-        }\n-        unsafe { self.bump((*inner).size); }\n-        true\n-    }\n-\n-    fn visit_leave_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n-        if ! self.inner.visit_leave_rec(n_fields, sz, align) { return false; }\n-        true\n-    }\n-\n-    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n-                         align: uint) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_class_field(&mut self, i: uint, name: &str, named: bool, mtbl: uint,\n-                         inner: *const TyDesc) -> bool {\n-        unsafe { self.align((*inner).align); }\n-        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n-            return false;\n-        }\n-        unsafe { self.bump((*inner).size); }\n-        true\n-    }\n-\n-    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n-                         align: uint) -> bool {\n-        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_enter_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_enter_tup(n_fields, sz, align) { return false; }\n-        true\n-    }\n-\n-    fn visit_tup_field(&mut self, i: uint, inner: *const TyDesc) -> bool {\n-        unsafe { self.align((*inner).align); }\n-        if ! self.inner.visit_tup_field(i, inner) { return false; }\n-        unsafe { self.bump((*inner).size); }\n-        true\n-    }\n-\n-    fn visit_leave_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n-        if ! self.inner.visit_leave_tup(n_fields, sz, align) { return false; }\n-        true\n-    }\n-\n-    fn visit_enter_fn(&mut self, purity: uint, proto: uint,\n-                      n_inputs: uint, retstyle: uint) -> bool {\n-        if ! self.inner.visit_enter_fn(purity, proto, n_inputs, retstyle) {\n-            return false\n-        }\n-        true\n-    }\n-\n-    fn visit_fn_input(&mut self, i: uint, mode: uint,\n-                      inner: *const TyDesc) -> bool {\n-        if ! self.inner.visit_fn_input(i, mode, inner) { return false; }\n-        true\n-    }\n-\n-    fn visit_fn_output(&mut self, retstyle: uint, variadic: bool,\n-                       inner: *const TyDesc) -> bool {\n-        if ! self.inner.visit_fn_output(retstyle, variadic, inner) { return false; }\n-        true\n-    }\n-\n-    fn visit_leave_fn(&mut self, purity: uint, proto: uint,\n-                      n_inputs: uint, retstyle: uint) -> bool {\n-        if ! self.inner.visit_leave_fn(purity, proto, n_inputs, retstyle) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        sz: uint, align: uint)\n-                     -> bool {\n-        self.align(align);\n-        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_enter_enum_variant(&mut self, variant: uint,\n-                                disr_val: Disr,\n-                                n_fields: uint,\n-                                name: &str) -> bool {\n-        if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n-                                                 n_fields, name) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_enum_variant_field(&mut self, i: uint, offset: uint,\n-                                inner: *const TyDesc) -> bool {\n-        self.inner.push_ptr();\n-        self.bump(offset);\n-        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n-        self.inner.pop_ptr();\n-        true\n-    }\n-\n-    fn visit_leave_enum_variant(&mut self, variant: uint,\n-                                disr_val: Disr,\n-                                n_fields: uint,\n-                                name: &str) -> bool {\n-        if ! self.inner.visit_leave_enum_variant(variant, disr_val,\n-                                                 n_fields, name) {\n-            return false;\n-        }\n-        true\n-    }\n-\n-    fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        sz: uint, align: uint) -> bool {\n-        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n-            return false;\n-        }\n-        self.bump(sz);\n-        true\n-    }\n-\n-    fn visit_trait(&mut self, name: &str) -> bool {\n-        self.align_to::<Box<TyVisitor>>();\n-        if ! self.inner.visit_trait(name) { return false; }\n-        self.bump_past::<Box<TyVisitor>>();\n-        true\n-    }\n-\n-    fn visit_param(&mut self, i: uint) -> bool {\n-        if ! self.inner.visit_param(i) { return false; }\n-        true\n-    }\n-\n-    fn visit_self(&mut self) -> bool {\n-        self.align_to::<&'static u8>();\n-        if ! self.inner.visit_self() { return false; }\n-        self.align_to::<&'static u8>();\n-        true\n-    }\n-}"}, {"sha": "e27816c81653972aec579f2c68c438e20089cf26", "filename": "src/libdebug/repr.rs", "status": "removed", "additions": 0, "deletions": 619, "changes": 619, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,619 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-More runtime type reflection\n-\n-*/\n-\n-use std::char;\n-use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n-use std::io;\n-use std::mem;\n-use std::raw;\n-\n-use reflect;\n-use reflect::{MovePtr, align};\n-\n-macro_rules! try( ($me:expr, $e:expr) => (\n-    match $e {\n-        Ok(()) => {},\n-        Err(e) => { $me.last_err = Some(e); return false; }\n-    }\n-) )\n-\n-/// Representations\n-\n-pub trait Repr {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()>;\n-}\n-\n-impl Repr for () {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        writer.write(\"()\".as_bytes())\n-    }\n-}\n-\n-impl Repr for bool {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        let s = if *self { \"true\" } else { \"false\" };\n-        writer.write(s.as_bytes())\n-    }\n-}\n-\n-impl Repr for int {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        write!(writer, \"{}\", *self)\n-    }\n-}\n-\n-macro_rules! int_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        write!(writer, \"{}{}\", *self, $suffix)\n-    }\n-}))\n-\n-int_repr!(i8, \"i8\")\n-int_repr!(i16, \"i16\")\n-int_repr!(i32, \"i32\")\n-int_repr!(i64, \"i64\")\n-int_repr!(uint, \"u\")\n-int_repr!(u8, \"u8\")\n-int_repr!(u16, \"u16\")\n-int_repr!(u32, \"u32\")\n-int_repr!(u64, \"u64\")\n-\n-macro_rules! num_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n-    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n-        let s = self.to_string();\n-        writer.write(s.as_bytes()).and_then(|()| {\n-            writer.write($suffix)\n-        })\n-    }\n-}))\n-\n-num_repr!(f32, b\"f32\")\n-num_repr!(f64, b\"f64\")\n-\n-// New implementation using reflect::MovePtr\n-\n-enum VariantState {\n-    SearchingFor(Disr),\n-    Matched,\n-    AlreadyFound\n-}\n-\n-pub struct ReprVisitor<'a> {\n-    ptr: *const u8,\n-    ptr_stk: Vec<*const u8>,\n-    var_stk: Vec<VariantState>,\n-    writer: &'a mut io::Writer+'a,\n-    last_err: Option<io::IoError>,\n-}\n-\n-impl<'a> MovePtr for ReprVisitor<'a> {\n-    #[inline]\n-    fn move_ptr(&mut self, adjustment: |*const u8| -> *const u8) {\n-        self.ptr = adjustment(self.ptr);\n-    }\n-    fn push_ptr(&mut self) {\n-        self.ptr_stk.push(self.ptr);\n-    }\n-    fn pop_ptr(&mut self) {\n-        self.ptr = self.ptr_stk.pop().unwrap();\n-    }\n-}\n-\n-impl<'a> ReprVisitor<'a> {\n-    // Various helpers for the TyVisitor impl\n-    pub fn new(ptr: *const u8, writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n-        ReprVisitor {\n-            ptr: ptr,\n-            ptr_stk: vec!(),\n-            var_stk: vec!(),\n-            writer: writer,\n-            last_err: None,\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn get<T>(&mut self, f: |&mut ReprVisitor, &T| -> bool) -> bool {\n-        unsafe {\n-            let ptr = self.ptr;\n-            f(self, mem::transmute::<*const u8,&T>(ptr))\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn visit_inner(&mut self, inner: *const TyDesc) -> bool {\n-        let ptr = self.ptr;\n-        self.visit_ptr_inner(ptr, inner)\n-    }\n-\n-    #[inline]\n-    pub fn visit_ptr_inner(&mut self, ptr: *const u8,\n-                           inner: *const TyDesc) -> bool {\n-        unsafe {\n-            let u = ReprVisitor::new(ptr, mem::transmute_copy(&self.writer));\n-            let mut v = reflect::MovePtrAdaptor::new(u);\n-            // Obviously this should not be a thing, but blame #8401 for now\n-            visit_tydesc(inner, &mut v as &mut TyVisitor);\n-            match v.unwrap().last_err {\n-                Some(e) => {\n-                    self.last_err = Some(e);\n-                    false\n-                }\n-                None => true,\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn write<T:Repr>(&mut self) -> bool {\n-        self.get(|this, v:&T| {\n-            try!(this, v.write_repr(this.writer));\n-            true\n-        })\n-    }\n-\n-    pub fn write_escaped_slice(&mut self, slice: &str) -> bool {\n-        try!(self, self.writer.write([b'\"']));\n-        for ch in slice.chars() {\n-            if !self.write_escaped_char(ch, true) { return false }\n-        }\n-        try!(self, self.writer.write([b'\"']));\n-        true\n-    }\n-\n-    pub fn write_mut_qualifier(&mut self, mtbl: uint) -> bool {\n-        if mtbl == 0 {\n-            try!(self, self.writer.write(\"mut \".as_bytes()));\n-        } else if mtbl == 1 {\n-            // skip, this is ast::m_imm\n-        } else {\n-            fail!(\"invalid mutability value\");\n-        }\n-        true\n-    }\n-\n-    pub fn write_vec_range(&mut self, ptr: *const (), len: uint,\n-                           inner: *const TyDesc) -> bool {\n-        let mut p = ptr as *const u8;\n-        let (sz, al) = unsafe { ((*inner).size, (*inner).align) };\n-        try!(self, self.writer.write([b'[']));\n-        let mut first = true;\n-        let mut left = len;\n-        // unit structs have 0 size, and don't loop forever.\n-        let dec = if sz == 0 {1} else {sz};\n-        while left > 0 {\n-            if first {\n-                first = false;\n-            } else {\n-                try!(self, self.writer.write(\", \".as_bytes()));\n-            }\n-            self.visit_ptr_inner(p as *const u8, inner);\n-            p = align(unsafe { p.offset(sz as int) as uint }, al) as *const u8;\n-            left -= dec;\n-        }\n-        try!(self, self.writer.write([b']']));\n-        true\n-    }\n-\n-    fn write_escaped_char(&mut self, ch: char, is_str: bool) -> bool {\n-        try!(self, match ch {\n-            '\\t' => self.writer.write(\"\\\\t\".as_bytes()),\n-            '\\r' => self.writer.write(\"\\\\r\".as_bytes()),\n-            '\\n' => self.writer.write(\"\\\\n\".as_bytes()),\n-            '\\\\' => self.writer.write(\"\\\\\\\\\".as_bytes()),\n-            '\\'' => {\n-                if is_str {\n-                    self.writer.write(\"'\".as_bytes())\n-                } else {\n-                    self.writer.write(\"\\\\'\".as_bytes())\n-                }\n-            }\n-            '\"' => {\n-                if is_str {\n-                    self.writer.write(\"\\\\\\\"\".as_bytes())\n-                } else {\n-                    self.writer.write(\"\\\"\".as_bytes())\n-                }\n-            }\n-            '\\x20'...'\\x7e' => self.writer.write([ch as u8]),\n-            _ => {\n-                char::escape_unicode(ch, |c| {\n-                    let _ = self.writer.write([c as u8]);\n-                });\n-                Ok(())\n-            }\n-        });\n-        return true;\n-    }\n-}\n-\n-impl<'a> TyVisitor for ReprVisitor<'a> {\n-    fn visit_bot(&mut self) -> bool {\n-        try!(self, self.writer.write(\"!\".as_bytes()));\n-        true\n-    }\n-    fn visit_nil(&mut self) -> bool { self.write::<()>() }\n-    fn visit_bool(&mut self) -> bool { self.write::<bool>() }\n-    fn visit_int(&mut self) -> bool { self.write::<int>() }\n-    fn visit_i8(&mut self) -> bool { self.write::<i8>() }\n-    fn visit_i16(&mut self) -> bool { self.write::<i16>() }\n-    fn visit_i32(&mut self) -> bool { self.write::<i32>()  }\n-    fn visit_i64(&mut self) -> bool { self.write::<i64>() }\n-\n-    fn visit_uint(&mut self) -> bool { self.write::<uint>() }\n-    fn visit_u8(&mut self) -> bool { self.write::<u8>() }\n-    fn visit_u16(&mut self) -> bool { self.write::<u16>() }\n-    fn visit_u32(&mut self) -> bool { self.write::<u32>() }\n-    fn visit_u64(&mut self) -> bool { self.write::<u64>() }\n-\n-    fn visit_f32(&mut self) -> bool { self.write::<f32>() }\n-    fn visit_f64(&mut self) -> bool { self.write::<f64>() }\n-\n-    fn visit_char(&mut self) -> bool {\n-        self.get::<char>(|this, &ch| {\n-            try!(this, this.writer.write([b'\\'']));\n-            if !this.write_escaped_char(ch, false) { return false }\n-            try!(this, this.writer.write([b'\\'']));\n-            true\n-        })\n-    }\n-\n-    fn visit_estr_slice(&mut self) -> bool {\n-        self.get::<&str>(|this, s| this.write_escaped_slice(*s))\n-    }\n-\n-    fn visit_box(&mut self, _mtbl: uint, _inner: *const TyDesc) -> bool {\n-        try!(self, self.writer.write(\"box(GC) ???\".as_bytes()));\n-        true\n-    }\n-\n-    fn visit_uniq(&mut self, _mtbl: uint, inner: *const TyDesc) -> bool {\n-        try!(self, self.writer.write(\"box \".as_bytes()));\n-        self.get::<*const u8>(|this, b| {\n-            this.visit_ptr_inner(*b, inner)\n-        })\n-    }\n-\n-    fn visit_ptr(&mut self, mtbl: uint, _inner: *const TyDesc) -> bool {\n-        self.get::<*const u8>(|this, p| {\n-            try!(this, write!(this.writer, \"({} as *\", *p));\n-            if mtbl == 0 {\n-                try!(this, this.writer.write(\"mut \".as_bytes()));\n-            } else if mtbl == 1 {\n-                try!(this, this.writer.write(\"const \".as_bytes()));\n-            } else {\n-                fail!(\"invalid mutability value\");\n-            }\n-            try!(this, this.writer.write(\"())\".as_bytes()));\n-            true\n-        })\n-    }\n-\n-    fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        try!(self, self.writer.write([b'&']));\n-        self.write_mut_qualifier(mtbl);\n-        self.get::<*const u8>(|this, p| {\n-            this.visit_ptr_inner(*p, inner)\n-        })\n-    }\n-\n-    fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool {\n-        self.get::<raw::Slice<()>>(|this, s| {\n-            try!(this, this.writer.write([b'&']));\n-            this.write_mut_qualifier(mtbl);\n-            let size = unsafe {\n-                if (*inner).size == 0 { 1 } else { (*inner).size }\n-            };\n-            this.write_vec_range(s.data, s.len * size, inner)\n-        })\n-    }\n-\n-    fn visit_evec_fixed(&mut self, n: uint, sz: uint, _align: uint,\n-                        inner: *const TyDesc) -> bool {\n-        let assumed_size = if sz == 0 { n } else { sz };\n-        self.get::<()>(|this, b| {\n-            this.write_vec_range(b, assumed_size, inner)\n-        })\n-    }\n-\n-\n-    fn visit_enter_rec(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write([b'{']));\n-        true\n-    }\n-\n-    fn visit_rec_field(&mut self, i: uint, name: &str,\n-                       mtbl: uint, inner: *const TyDesc) -> bool {\n-        if i != 0 {\n-            try!(self, self.writer.write(\", \".as_bytes()));\n-        }\n-        self.write_mut_qualifier(mtbl);\n-        try!(self, self.writer.write(name.as_bytes()));\n-        try!(self, self.writer.write(\": \".as_bytes()));\n-        self.visit_inner(inner);\n-        true\n-    }\n-\n-    fn visit_leave_rec(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write([b'}']));\n-        true\n-    }\n-\n-    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n-                         _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write(name.as_bytes()));\n-        if n_fields != 0 {\n-            if named_fields {\n-                try!(self, self.writer.write([b'{']));\n-            } else {\n-                try!(self, self.writer.write([b'(']));\n-            }\n-        }\n-        true\n-    }\n-\n-    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n-                         _mtbl: uint, inner: *const TyDesc) -> bool {\n-        if i != 0 {\n-            try!(self, self.writer.write(\", \".as_bytes()));\n-        }\n-        if named {\n-            try!(self, self.writer.write(name.as_bytes()));\n-            try!(self, self.writer.write(\": \".as_bytes()));\n-        }\n-        self.visit_inner(inner);\n-        true\n-    }\n-\n-    fn visit_leave_class(&mut self, _name: &str, named_fields: bool, n_fields: uint,\n-                         _sz: uint, _align: uint) -> bool {\n-        if n_fields != 0 {\n-            if named_fields {\n-                try!(self, self.writer.write([b'}']));\n-            } else {\n-                try!(self, self.writer.write([b')']));\n-            }\n-        }\n-        true\n-    }\n-\n-    fn visit_enter_tup(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool {\n-        try!(self, self.writer.write([b'(']));\n-        true\n-    }\n-\n-    fn visit_tup_field(&mut self, i: uint, inner: *const TyDesc) -> bool {\n-        if i != 0 {\n-            try!(self, self.writer.write(\", \".as_bytes()));\n-        }\n-        self.visit_inner(inner);\n-        true\n-    }\n-\n-    fn visit_leave_tup(&mut self, _n_fields: uint,\n-                       _sz: uint, _align: uint) -> bool {\n-        if _n_fields == 1 {\n-            try!(self, self.writer.write([b',']));\n-        }\n-        try!(self, self.writer.write([b')']));\n-        true\n-    }\n-\n-    fn visit_enter_enum(&mut self,\n-                        _n_variants: uint,\n-                        get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        _sz: uint,\n-                        _align: uint) -> bool {\n-        let disr = unsafe {\n-            get_disr(mem::transmute(self.ptr))\n-        };\n-        self.var_stk.push(SearchingFor(disr));\n-        true\n-    }\n-\n-    fn visit_enter_enum_variant(&mut self, _variant: uint,\n-                                disr_val: Disr,\n-                                n_fields: uint,\n-                                name: &str) -> bool {\n-        let mut write = false;\n-        match self.var_stk.pop().unwrap() {\n-            SearchingFor(sought) => {\n-                if disr_val == sought {\n-                    self.var_stk.push(Matched);\n-                    write = true;\n-                } else {\n-                    self.var_stk.push(SearchingFor(sought));\n-                }\n-            }\n-            Matched | AlreadyFound => {\n-                self.var_stk.push(AlreadyFound);\n-            }\n-        }\n-\n-        if write {\n-            try!(self, self.writer.write(name.as_bytes()));\n-            if n_fields > 0 {\n-                try!(self, self.writer.write([b'(']));\n-            }\n-        }\n-        true\n-    }\n-\n-    fn visit_enum_variant_field(&mut self,\n-                                i: uint,\n-                                _offset: uint,\n-                                inner: *const TyDesc)\n-                                -> bool {\n-        match self.var_stk[self.var_stk.len() - 1] {\n-            Matched => {\n-                if i != 0 {\n-                    try!(self, self.writer.write(\", \".as_bytes()));\n-                }\n-                if ! self.visit_inner(inner) {\n-                    return false;\n-                }\n-            }\n-            _ => ()\n-        }\n-        true\n-    }\n-\n-    fn visit_leave_enum_variant(&mut self, _variant: uint,\n-                                _disr_val: Disr,\n-                                n_fields: uint,\n-                                _name: &str) -> bool {\n-        match self.var_stk[self.var_stk.len() - 1] {\n-            Matched => {\n-                if n_fields > 0 {\n-                    try!(self, self.writer.write([b')']));\n-                }\n-            }\n-            _ => ()\n-        }\n-        true\n-    }\n-\n-    fn visit_leave_enum(&mut self,\n-                        _n_variants: uint,\n-                        _get_disr: unsafe extern fn(ptr: *const Opaque) -> Disr,\n-                        _sz: uint,\n-                        _align: uint)\n-                        -> bool {\n-        match self.var_stk.pop().unwrap() {\n-            SearchingFor(..) => fail!(\"enum value matched no variant\"),\n-            _ => true\n-        }\n-    }\n-\n-    fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,\n-                      _n_inputs: uint, _retstyle: uint) -> bool {\n-        try!(self, self.writer.write(\"fn(\".as_bytes()));\n-        true\n-    }\n-\n-    fn visit_fn_input(&mut self, i: uint, _mode: uint,\n-                      inner: *const TyDesc) -> bool {\n-        if i != 0 {\n-            try!(self, self.writer.write(\", \".as_bytes()));\n-        }\n-        let name = unsafe { (*inner).name };\n-        try!(self, self.writer.write(name.as_bytes()));\n-        true\n-    }\n-\n-    fn visit_fn_output(&mut self, _retstyle: uint, variadic: bool,\n-                       inner: *const TyDesc) -> bool {\n-        if variadic {\n-            try!(self, self.writer.write(\", ...\".as_bytes()));\n-        }\n-        try!(self, self.writer.write(\")\".as_bytes()));\n-        let name = unsafe { (*inner).name };\n-        if name != \"()\" {\n-            try!(self, self.writer.write(\" -> \".as_bytes()));\n-            try!(self, self.writer.write(name.as_bytes()));\n-        }\n-        true\n-    }\n-\n-    fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,\n-                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n-\n-\n-    fn visit_trait(&mut self, name: &str) -> bool {\n-        try!(self, self.writer.write(name.as_bytes()));\n-        true\n-    }\n-\n-    fn visit_param(&mut self, _i: uint) -> bool { true }\n-    fn visit_self(&mut self) -> bool { true }\n-}\n-\n-pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {\n-    unsafe {\n-        let ptr = object as *const T as *const u8;\n-        let tydesc = get_tydesc::<T>();\n-        let u = ReprVisitor::new(ptr, writer);\n-        let mut v = reflect::MovePtrAdaptor::new(u);\n-        visit_tydesc(tydesc, &mut v as &mut TyVisitor);\n-        match v.unwrap().last_err {\n-            Some(e) => Err(e),\n-            None => Ok(()),\n-        }\n-    }\n-}\n-\n-pub fn repr_to_string<T>(t: &T) -> String {\n-    let mut result = io::MemWriter::new();\n-    write_repr(&mut result as &mut io::Writer, t).unwrap();\n-    String::from_utf8(result.unwrap()).unwrap()\n-}\n-\n-#[cfg(test)]\n-#[allow(dead_code)]\n-struct P {a: int, b: f64}\n-\n-#[test]\n-fn test_repr() {\n-    use std::io::stdio::println;\n-    use std::char::is_alphabetic;\n-    use std::mem::swap;\n-\n-    fn exact_test<T>(t: &T, e:&str) {\n-        let mut m = io::MemWriter::new();\n-        write_repr(&mut m as &mut io::Writer, t).unwrap();\n-        let s = String::from_utf8(m.unwrap()).unwrap();\n-        assert_eq!(s.as_slice(), e);\n-    }\n-\n-    exact_test(&10i, \"10\");\n-    exact_test(&true, \"true\");\n-    exact_test(&false, \"false\");\n-    exact_test(&1.234f64, \"1.234f64\");\n-    exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n-\n-    exact_test(&(box 10i), \"box 10\");\n-    exact_test(&(&10i), \"&10\");\n-    let mut x = 10i;\n-    exact_test(&(&mut x), \"&mut 10\");\n-\n-    exact_test(&(0i as *const()), \"(0x0 as *const ())\");\n-    exact_test(&(0i as *mut ()), \"(0x0 as *mut ())\");\n-\n-    exact_test(&(1i,), \"(1,)\");\n-    exact_test(&(&[\"hi\", \"there\"]),\n-               \"&[\\\"hi\\\", \\\"there\\\"]\");\n-    exact_test(&(P{a:10, b:1.234}),\n-               \"repr::P{a: 10, b: 1.234f64}\");\n-    exact_test(&(box P{a:10, b:1.234}),\n-               \"box repr::P{a: 10, b: 1.234f64}\");\n-\n-    exact_test(&(&[1i, 2i]), \"&[1, 2]\");\n-    exact_test(&(&mut [1i, 2i]), \"&mut [1, 2]\");\n-\n-    exact_test(&'\\'', \"'\\\\''\");\n-    exact_test(&'\"', \"'\\\"'\");\n-    exact_test(&(\"'\"), \"\\\"'\\\"\");\n-    exact_test(&(\"\\\"\"), \"\\\"\\\\\\\"\\\"\");\n-\n-    exact_test(&println, \"fn(&str)\");\n-    exact_test(&swap::<int>, \"fn(&mut int, &mut int)\");\n-    exact_test(&is_alphabetic, \"fn(char) -> bool\");\n-\n-    struct Bar(int, int);\n-    exact_test(&(Bar(2, 2)), \"repr::test_repr::Bar(2, 2)\");\n-}"}, {"sha": "37b3458b555123a4fbf33226cd26c0b9c84440ec", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -91,7 +91,6 @@\n #![feature(import_shadowing)]\n #![deny(missing_doc)]\n \n-#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n use std::cmp::PartialEq;"}, {"sha": "71a1645f9ff1512f12a18b857e3f7e21bda4ee54", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -67,7 +67,6 @@\n \n extern crate alloc;\n extern crate libc;\n-#[cfg(test)] extern crate debug;\n \n use std::os;\n use std::rt;"}, {"sha": "ff7d3c296203ee52d938214e40c5f100778890d9", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -34,7 +34,6 @@ extern crate core;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate native;\n-#[cfg(test)] extern crate debug;\n \n use core::prelude::*;\n "}, {"sha": "ca7ce2a8b7153ec0d8bbb142915fb505f0a9c221", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -39,7 +39,6 @@\n \n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate test;\n-#[cfg(test)] extern crate debug;\n \n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n "}, {"sha": "eb78762906e24e68083f2c6f77ed3893f5402281", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -34,7 +34,6 @@ This API is completely unstable and subject to change.\n #![feature(rustc_diagnostic_macros)]\n \n extern crate arena;\n-extern crate debug;\n extern crate flate;\n extern crate getopts;\n extern crate graphviz;"}, {"sha": "44827a7b02cfbfe33015028e940be88b0b7476dd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -19,7 +19,6 @@\n #![feature(globs, struct_variant, macro_rules, phase, slicing_syntax)]\n \n extern crate arena;\n-extern crate debug;\n extern crate getopts;\n extern crate libc;\n extern crate rustc;"}, {"sha": "27451c91f3f5e18f93378f20e4f2165b9dd0af2a", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -36,12 +36,11 @@ format arguments directly while performing minimal allocations.\n Some examples of the `format!` extension are:\n \n ```rust\n-# extern crate debug;\n # fn main() {\n format!(\"Hello\");                  // => \"Hello\"\n format!(\"Hello, {:s}!\", \"world\");  // => \"Hello, world!\"\n format!(\"The number is {:d}\", 1i); // => \"The number is 1\"\n-format!(\"{:?}\", (3i, 4i));         // => \"(3, 4)\"\n+format!(\"{}\", (3i, 4i));           // => \"(3, 4)\"\n format!(\"{value}\", value=4i);      // => \"4\"\n format!(\"{} {}\", 1i, 2i);          // => \"1 2\"\n # }\n@@ -94,11 +93,10 @@ identifier '=' expression\n For example, the following `format!` expressions all use named argument:\n \n ```rust\n-# extern crate debug;\n # fn main() {\n format!(\"{argument}\", argument = \"test\");        // => \"test\"\n format!(\"{name} {}\", 1i, name = 2i);             // => \"2 1\"\n-format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3i); // => \"a 3 ()\"\n+format!(\"{a:s} {c:d} {b}\", a=\"a\", b=(), c=3i); // => \"a 3 ()\"\n # }\n ```\n \n@@ -154,11 +152,6 @@ The current mapping of types to traits is:\n * `f` \u21d2 `Float`\n * `e` \u21d2 `LowerExp`\n * `E` \u21d2 `UpperExp`\n-* `?` \u21d2 `Poly`\n-\n-> **Note**: The `Poly` formatting trait is provided by [libdebug](../../debug/)\n-> and is an experimental implementation that should not be relied upon. In order\n-> to use the `?` modifier, the libdebug crate must be linked against.\n \n What this means is that any type of argument which implements the\n `std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are"}, {"sha": "82c8d8071b34bbaf009f68dd58e448035f6e8dae", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -118,7 +118,6 @@\n #![reexport_test_harness_main = \"test_main\"]\n \n #[cfg(test)] extern crate green;\n-#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n extern crate alloc;"}, {"sha": "8c2652e5699ff81102b35a1db26d4033e2cff628", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -30,7 +30,6 @@\n \n extern crate arena;\n extern crate fmt_macros;\n-extern crate debug;\n #[phase(plugin, link)] extern crate log;\n extern crate serialize;\n extern crate term;"}, {"sha": "ee06c3f6caa347d0844529cfd9f0f8a6114d0d8f", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -22,7 +22,6 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(phase)]\n \n-#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n extern crate serialize;\n@@ -1184,13 +1183,13 @@ mod tests {\n         static SOME_FUTURE_DATE: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n-        debug!(\"tv1={:?} sec + {:?} nsec\", tv1.sec as uint, tv1.nsec as uint);\n+        debug!(\"tv1={} sec + {} nsec\", tv1.sec as uint, tv1.nsec as uint);\n \n         assert!(tv1.sec > SOME_RECENT_DATE);\n         assert!(tv1.nsec < 1000000000i32);\n \n         let tv2 = get_time();\n-        debug!(\"tv2={:?} sec + {:?} nsec\", tv2.sec as uint, tv2.nsec as uint);\n+        debug!(\"tv2={} sec + {} nsec\", tv2.sec as uint, tv2.nsec as uint);\n \n         assert!(tv2.sec >= tv1.sec);\n         assert!(tv2.sec < SOME_FUTURE_DATE);\n@@ -1207,12 +1206,12 @@ mod tests {\n \n         let ns0 = precise_time_ns();\n         let ns1 = precise_time_ns();\n-        debug!(\"ns0={:?} ns\", ns0);\n-        debug!(\"ns1={:?} ns\", ns1);\n+        debug!(\"ns0={} ns\", ns0);\n+        debug!(\"ns1={} ns\", ns1);\n         assert!(ns1 >= ns0);\n \n         let ns2 = precise_time_ns();\n-        debug!(\"ns2={:?} ns\", ns2);\n+        debug!(\"ns2={} ns\", ns2);\n         assert!(ns2 >= ns1);\n     }\n \n@@ -1241,7 +1240,7 @@ mod tests {\n         let time = Timespec::new(1234567890, 54321);\n         let local = at(time);\n \n-        debug!(\"time_at: {:?}\", local);\n+        debug!(\"time_at: {}\", local);\n \n         assert_eq!(local.tm_sec, 30_i32);\n         assert_eq!(local.tm_min, 31_i32);\n@@ -1446,7 +1445,7 @@ mod tests {\n         let utc   = at_utc(time);\n         let local = at(time);\n \n-        debug!(\"test_ctime: {:?} {:?}\", utc.asctime(), local.asctime());\n+        debug!(\"test_ctime: {} {}\", utc.asctime(), local.asctime());\n \n         assert_eq!(utc.asctime(), \"Fri Feb 13 23:31:30 2009\".to_string());\n         assert_eq!(local.asctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n@@ -1459,7 +1458,7 @@ mod tests {\n         let utc   = at_utc(time);\n         let local = at(time);\n \n-        debug!(\"test_ctime: {:?} {:?}\", utc.ctime(), local.ctime());\n+        debug!(\"test_ctime: {} {}\", utc.ctime(), local.ctime());\n \n         assert_eq!(utc.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n         assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());"}, {"sha": "1a579dd1b0e2d0924f6bbc6e8d53104dfdf03c12", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,8 +11,6 @@\n // Make sure Rust generates the correct calling convention for extern\n // functions.\n \n-extern crate debug;\n-\n #[inline(never)]\n #[cfg(target_arch = \"x86_64\")]\n pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {\n@@ -21,7 +19,7 @@ pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {\n     assert!(c == 3);\n     assert!(d == 4);\n \n-    println!(\"a: {:?}, b: {:?}, c: {:?}, d: {:?}\",\n+    println!(\"a: {}, b: {}, c: {}, d: {}\",\n              a, b, c, d)\n }\n \n@@ -33,6 +31,6 @@ pub extern fn foo(a: int, b: int, c: int, d: int) {\n     assert!(c == 3);\n     assert!(d == 4);\n \n-    println!(\"a: {:?}, b: {:?}, c: {:?}, d: {:?}\",\n+    println!(\"a: {}, b: {}, c: {}, d: {}\",\n              a, b, c, d)\n }"}, {"sha": "6bc5b677a2730ac62c650641affe6ce3ba01403a", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,9 +10,8 @@\n \n #![feature(phase)]\n #[phase(plugin, link)] extern crate log;\n-extern crate debug;\n \n pub fn foo<T>() {\n     fn death() -> int { fail!() }\n-    debug!(\"{:?}\", (||{ death() })());\n+    debug!(\"{}\", (||{ death() })());\n }"}, {"sha": "34479f296bb8723ffe8322f63cd286ef9cd1f303", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -19,7 +19,6 @@\n // version.\n \n extern crate time;\n-extern crate debug;\n \n use std::comm;\n use std::os;\n@@ -41,7 +40,7 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n         match requests.recv_opt() {\n           Ok(get_count) => { responses.send(count.clone()); }\n           Ok(bytes(b)) => {\n-            //println!(\"server: received {:?} bytes\", b);\n+            //println!(\"server: received {} bytes\", b);\n             count += b;\n           }\n           Err(..) => { done = true; }\n@@ -65,10 +64,10 @@ fn run(args: &[String]) {\n         let to_child = to_child.clone();\n         worker_results.push(task::try_future(proc() {\n             for _ in range(0u, size / workers) {\n-                //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //println!(\"worker {:?} exiting\", i);\n+            //println!(\"worker {} exiting\", i);\n         }));\n     }\n     task::spawn(proc() {\n@@ -85,8 +84,8 @@ fn run(args: &[String]) {\n     let result = from_child.recv();\n     let end = time::precise_time_s();\n     let elapsed = end - start;\n-    print!(\"Count is {:?}\\n\", result);\n-    print!(\"Test took {:?} seconds\\n\", elapsed);\n+    print!(\"Count is {}\\n\", result);\n+    print!(\"Test took {} seconds\\n\", elapsed);\n     let thruput = ((size / workers * workers) as f64) / (elapsed as f64);\n     print!(\"Throughput={} per sec\\n\", thruput);\n     assert_eq!(result, num_bytes * size);"}, {"sha": "7a06b43ba2d63f5afd17c0aa9335d7d64a6c9916", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -15,7 +15,6 @@\n // I *think* it's the same, more or less.\n \n extern crate time;\n-extern crate debug;\n \n use std::os;\n use std::task;\n@@ -36,7 +35,7 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n         match requests.recv_opt() {\n           Ok(get_count) => { responses.send(count.clone()); }\n           Ok(bytes(b)) => {\n-            //println!(\"server: received {:?} bytes\", b);\n+            //println!(\"server: received {} bytes\", b);\n             count += b;\n           }\n           Err(..) => { done = true; }\n@@ -59,10 +58,10 @@ fn run(args: &[String]) {\n         let (to_child, from_parent) = channel();\n         worker_results.push(task::try_future(proc() {\n             for _ in range(0u, size / workers) {\n-                //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n-            //println!(\"worker {:?} exiting\", i);\n+            //println!(\"worker {} exiting\", i);\n         }));\n         from_parent\n     } else {\n@@ -71,10 +70,10 @@ fn run(args: &[String]) {\n             let to_child = to_child.clone();\n             worker_results.push(task::try_future(proc() {\n                 for _ in range(0u, size / workers) {\n-                    //println!(\"worker {:?}: sending {:?} bytes\", i, num_bytes);\n+                    //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(bytes(num_bytes));\n                 }\n-                //println!(\"worker {:?} exiting\", i);\n+                //println!(\"worker {} exiting\", i);\n             }));\n         }\n         from_parent\n@@ -93,8 +92,8 @@ fn run(args: &[String]) {\n     let result = from_child.recv();\n     let end = time::precise_time_s();\n     let elapsed = end - start;\n-    print!(\"Count is {:?}\\n\", result);\n-    print!(\"Test took {:?} seconds\\n\", elapsed);\n+    print!(\"Count is {}\\n\", result);\n+    print!(\"Test took {} seconds\\n\", elapsed);\n     let thruput = ((size / workers * workers) as f64) / (elapsed as f64);\n     print!(\"Throughput={} per sec\\n\", thruput);\n     assert_eq!(result, num_bytes * size);\n@@ -110,6 +109,6 @@ fn main() {\n         args.clone().into_iter().map(|x| x.to_string()).collect()\n     };\n \n-    println!(\"{:?}\", args);\n+    println!(\"{}\", args);\n     run(args.as_slice());\n }"}, {"sha": "c495e597ca6d034a2e26f48511e2fc5ef4b74408", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,7 +12,6 @@\n \n extern crate collections;\n extern crate time;\n-extern crate debug;\n \n use std::collections::SmallIntMap;\n use std::os;\n@@ -59,8 +58,8 @@ fn main() {\n \n     let maxf = max as f64;\n \n-    println!(\"insert(): {:?} seconds\\n\", checkf);\n+    println!(\"insert(): {} seconds\\n\", checkf);\n     println!(\"        : {} op/sec\\n\", maxf/checkf);\n-    println!(\"get()   : {:?} seconds\\n\", appendf);\n+    println!(\"get()   : {} seconds\\n\", appendf);\n     println!(\"        : {} op/sec\\n\", maxf/appendf);\n }"}, {"sha": "76af956a26fff7a9a908163d5c578fa49b8fc908", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,8 +11,6 @@\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n-extern crate debug;\n-\n fn coerce(b: ||) -> extern fn() {\n     fn lol(f: extern fn(v: ||) -> extern fn(),\n            g: ||) -> extern fn() { return f(g); }\n@@ -23,6 +21,6 @@ fn coerce(b: ||) -> extern fn() {\n \n fn main() {\n     let i = 8i;\n-    let f = coerce(|| println!(\"{:?}\", i) );\n+    let f = coerce(|| println!(\"{}\", i) );\n     f();\n }"}, {"sha": "10c63965a7bbb78c04d642b6403f99a8376978d4", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n struct defer<'a> {\n     x: &'a [&'a str],\n }\n@@ -20,7 +18,7 @@ struct defer<'a> {\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            println!(\"{:?}\", self.x);\n+            println!(\"{}\", self.x);\n         }\n     }\n }"}, {"sha": "e6d59062af2077251473c0809745b9d3ce2fc184", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n-fn foo(x: int) { println!(\"{:?}\", x); }\n+fn foo(x: int) { println!(\"{}\", x); }\n \n fn main() {\n     let x: int;"}, {"sha": "07e2ff084664dcfc11d8a8abc97baf0341e165ca", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let f: || -> int = || {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n-    println!(\"{:?}\", f());\n+    println!(\"{}\", f());\n }"}, {"sha": "8d94b553f11e403c2eca02db278ad7991eecc134", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,9 +10,7 @@\n \n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n-extern crate debug;\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n struct Foo {\n     string: String\n }\n@@ -37,7 +35,7 @@ pub fn main() {\n                 }\n             }\n             let z = tail[0].clone();\n-            println!(\"{:?}\", z);\n+            println!(\"{}\", z);\n         }\n         _ => {\n             unreachable!();"}, {"sha": "0c0377e74112c6c26eb294881b112c9cf54b7b35", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n-    println!(\"{:?}\", *y);\n+    println!(\"{}\", *y);\n }"}, {"sha": "67537464a3348d3b15c8a21b9f3f2322c69a7a81", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct foo {\n   i: int,\n }\n@@ -28,5 +27,5 @@ fn main() {\n     let x = foo(10);\n     let _y = x.clone();\n     //~^ ERROR does not implement any method in scope\n-    println!(\"{:?}\", x);\n+    println!(\"{}\", x);\n }"}, {"sha": "89beb9a31601b510e3a8e7123cf32bce64a1d12a", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let a = if true { true };\n //~^ ERROR if may be missing an else clause: expected `()`, found `bool` (expected (), found bool)\n-    println!(\"{:?}\", a);\n+    println!(\"{}\", a);\n }"}, {"sha": "01683d001ac1651b387315c1e5bf4dcc7f32752c", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n-    println!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{}\", x); //~ ERROR unresolved name `x`.\n }"}, {"sha": "14096ca7bca18e275a8ec47ba9e13e38ba818e1b", "filename": "src/test/compile-fail/issue-2281-part1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2281-part1.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern: unresolved name `foobar`.\n \n-fn main() { println!(\"{:?}\", foobar); }\n+fn main() { println!(\"{}\", foobar); }"}, {"sha": "b6820a1d8e4240d7a15bcffab9e61f3d09282c03", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n struct C {\n     x: int,\n }\n \n impl Drop for C {\n     fn drop(&mut self) {\n-        println!(\"dropping: {:?}\", self.x);\n+        println!(\"dropping: {}\", self.x);\n     }\n }\n "}, {"sha": "049c6130d2d8af9d62dd07e2512157cfe852c20a", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n enum f { g(int, int) }\n \n enum h { i(j, k) }\n@@ -21,13 +19,13 @@ fn main()\n {\n \n     let _z = match g(1, 2) {\n-      g(x, x) => { println!(\"{:?}\", x + x); }\n+      g(x, x) => { println!(\"{}\", x + x); }\n       //~^ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n       i(l(x, _), m(_, x))  //~ ERROR identifier `x` is bound more than once in the same pattern\n-        => { println!(\"{:?}\", x + x); }\n+        => { println!(\"{}\", x + x); }\n     };\n \n     let _z = match (1, 2) {"}, {"sha": "2e0006bb1fe64d50c10b4fecff183478281df127", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let foo = 100;\n \n+    #[deriving(Show)]\n     enum Stuff {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }\n \n-    println!(\"{:?}\", Bar);\n+    println!(\"{}\", Bar);\n }"}, {"sha": "5082c3102dd81451e94f7c01759c218591628d83", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,7 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n-fn main() { format!(\"{:?}\", None); }\n+fn main() { format!(\"{}\", None); }\n     //~^ ERROR type annotations required"}, {"sha": "07c1686a7acd2409c2b8bfea5d79aa61563e3355", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     // Unconstrained type:\n-    format!(\"{:?}\", None);\n+    format!(\"{}\", None);\n     //~^ ERROR type annotations required\n }"}, {"sha": "6466310eb4d2e133b681961478cc29941c38cd6e", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,7 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn force(f: || -> int) -> int { f() }\n-fn main() { println!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types\n+fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "127a68bd339e69f2c3c33a6f3fb5258f2ab9701c", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let y: Box<int> = box 42;\n     let mut x: Box<int>;\n     loop {\n-        println!(\"{:?}\", y);\n+        println!(\"{}\", y);\n         loop {\n             loop {\n                 loop {"}, {"sha": "2cebe3f573bd9b8b68c817a615d5fb9b6c70832a", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let y: Box<int> = box 42;\n     let mut x: Box<int>;\n     loop {\n-        println!(\"{:?}\", y); //~ ERROR use of moved value: `y`\n+        println!(\"{}\", y); //~ ERROR use of moved value: `y`\n         while true { while true { while true { x = y; x.clone(); } } }\n         //~^ ERROR use of moved value: `y`\n     }"}, {"sha": "a988254141a757cfae0ba6eaf12f91633d23474c", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn main() {\n     let x = box 5i;\n     let y = x;\n-    println!(\"{:?}\", *x); //~ ERROR use of moved value: `*x`\n+    println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();\n }"}, {"sha": "54d0b2d00c776c8f308585a8f3b407477afcccdb", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n-fn send<T:Send>(ch: _chan<T>, data: T) {\n-    println!(\"{:?}\", ch);\n-    println!(\"{:?}\", data);\n+fn send<T:Send + std::fmt::Show>(ch: _chan<T>, data: T) {\n+    println!(\"{}\", ch);\n+    println!(\"{}\", data);\n     fail!();\n }\n \n+#[deriving(Show)]\n struct _chan<T>(int);\n \n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it\n fn test00_start(ch: _chan<Box<int>>, message: Box<int>, _count: Box<int>) {\n     send(ch, message);\n-    println!(\"{:?}\", message); //~ ERROR use of moved value: `message`\n+    println!(\"{}\", message); //~ ERROR use of moved value: `message`\n }\n \n fn main() { fail!(); }"}, {"sha": "de44a005fc33ad599c66f92421b86a550a23a0e5", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,13 +11,11 @@\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n-extern crate debug;\n-\n fn my_fail() -> ! { fail!(); }\n \n fn main() {\n     match true { false => { my_fail(); } true => { } }\n \n-    println!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n+    println!(\"{}\", x); //~ ERROR unresolved name `x`.\n     let x: int;\n }"}, {"sha": "85723936997195388780ca2b80b02e78989f27cb", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,8 +11,6 @@\n // Tests that if you move from `x.f` or `x[0]`, `x` is inaccessible.\n // Also tests that we give a more specific error message.\n \n-extern crate debug;\n-\n struct Foo { f: String, y: int }\n fn consume(_s: String) {}\n fn touch<A>(_a: &A) {}"}, {"sha": "ff5ad2c5e193604a0cc2ecdfef7ebb503c673cbd", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,8 +12,6 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n-extern crate debug;\n-\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that\n@@ -31,7 +29,7 @@ fn innocent_looking_victim() {\n                 Some(ref msg) => {\n                     (f.c)(f, true);\n                     //~^ ERROR: cannot borrow `*f` as mutable because\n-                    println!(\"{:?}\", msg);\n+                    println!(\"{}\", msg);\n                 },\n                 None => fail!(\"oops\"),\n             }"}, {"sha": "bf762eaa80f5a7a13a904b53b6499761dfb15e64", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,8 +11,7 @@\n // Test that a class with a non-copyable field can't be\n // copied\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct bar {\n   x: int,\n }\n@@ -27,6 +26,7 @@ fn bar(x:int) -> bar {\n     }\n }\n \n+#[deriving(Show)]\n struct foo {\n   i: int,\n   j: bar,\n@@ -42,5 +42,5 @@ fn foo(i:int) -> foo {\n fn main() {\n     let x = foo(10);\n     let _y = x.clone(); //~ ERROR does not implement any method in scope\n-    println!(\"{:?}\", x);\n+    println!(\"{}\", x);\n }"}, {"sha": "346661e3c1f52818b27eff8597dfb19c4d218950", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,12 +10,11 @@\n \n // error-pattern:non-scalar cast\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct foo {\n-    x:int\n+    x: int\n }\n \n fn main() {\n-    println!(\"{:?}\", foo{ x: 1 } as int);\n+    println!(\"{}\", foo{ x: 1 } as int);\n }"}, {"sha": "d699f69864e38474df7ca2373f5a03e976536f4a", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -15,7 +15,7 @@\n \n // error-pattern: transmute called on types with different size\n \n-extern crate debug;\n+#![feature(slicing_syntax)]\n \n use std::mem;\n \n@@ -34,6 +34,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8, .. 5], i32> = mem::transmute(foo);\n-        println!(\"{:?}\", oof);\n+        println!(\"{} {}\", oof.rab[], oof.zab);\n     }\n }"}, {"sha": "9c8e8193319de2259564a17052956614a5fbecb8", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -15,8 +15,6 @@\n \n // error-pattern: transmute called on types with different size\n \n-extern crate debug;\n-\n use std::mem;\n \n #[repr(packed)]\n@@ -25,6 +23,7 @@ struct Foo {\n     baz: uint\n }\n \n+#[deriving(Show)]\n struct Oof {\n     rab: u8,\n     zab: uint\n@@ -34,6 +33,6 @@ fn main() {\n     let foo = Foo { bar: 1, baz: 10 };\n     unsafe {\n         let oof: Oof = mem::transmute(foo);\n-        println!(\"{:?}\", oof);\n+        println!(\"{}\", oof);\n     }\n }"}, {"sha": "efb98a74538f2e6a3409f19db909d55f56100387", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,14 +10,12 @@\n \n // error-pattern: mismatched types\n \n-extern crate debug;\n-\n enum bar { t1((), Option<Vec<int> >), t2, }\n \n fn foo(t: bar) {\n     match t {\n       t1(_, Some::<int>(x)) => {\n-        println!(\"{:?}\", x);\n+        println!(\"{}\", x);\n       }\n       _ => { fail!(); }\n     }"}, {"sha": "424ffed989b3ce6b9aaccf7d98db5ebcdc5280bf", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let s: &str = \"hello\";\n     let c: u8 = s[4]; //~ ERROR cannot index a value of type `&str`"}, {"sha": "c812b0d96a23ddb459f48bb5cc70e6012e0e8ff0", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct r {\n   b: bool,\n }\n@@ -21,5 +20,5 @@ impl Drop for r {\n fn main() {\n     let i = box r { b: true };\n     let _j = i.clone(); //~ ERROR not implemented\n-    println!(\"{:?}\", i);\n+    println!(\"{}\", i);\n }"}, {"sha": "205c912f5a098cf449992bb189c623db3e328864", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -14,5 +14,5 @@\n extern crate libc;\n \n fn main() {\n-  println!(\"{:?}\", 1.0 as *libc::FILE); // Can't cast float to foreign.\n+  println!(\"{}\", 1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "6098b97c79a947a8f2e9a01a5de8623bdeceb30a", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,10 +10,8 @@\n \n // error-pattern:called `Result::unwrap()` on an `Err` value\n \n-extern crate debug;\n-\n use std::result;\n \n fn main() {\n-    println!(\"{:?}\", result::Err::<int,String>(\"kitty\".to_string()).unwrap());\n+    println!(\"{}\", result::Err::<int,String>(\"kitty\".to_string()).unwrap());\n }"}, {"sha": "ecc1a6a495c1114122af126a0d76d0795ce17816", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n struct pair<A,B> {\n     a: A, b: B\n }\n@@ -38,7 +36,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    println!(\"a={:?} b={:?}\", a, b);\n+    println!(\"a={} b={}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "6195c259414b50a2bcbf55327728b5a987fb11e9", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct Pair<T, U> { a: T, b: U }\n struct Triple { x: int, y: int, z: int }\n \n fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    println!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4i).a.x);\n-    println!(\"{:?}\", f(5i, 6i).a);\n+    println!(\"{}\", f(Triple {x: 3, y: 4, z: 5}, 4i).a.x);\n+    println!(\"{}\", f(5i, 6i).a);\n }"}, {"sha": "4b81654a1d0a2195f54e43b12161ce2cbb0d07e2", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn inty(fun: proc(int) -> int) -> int {\n     fun(100)\n }\n@@ -24,7 +22,7 @@ pub fn main() {\n \n     // Statement form does not require parentheses:\n     for i in v.iter() {\n-        println!(\"{:?}\", *i);\n+        println!(\"{}\", *i);\n     }\n \n }"}, {"sha": "ce20c3024d6fb7e2d186fdf4197fc6a094cda62d", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n@@ -20,6 +18,6 @@ pub fn main() {\n             odds += 1;\n         }\n     });\n-    println!(\"{:?}\", odds);\n+    println!(\"{}\", odds);\n     assert_eq!(odds, 4);\n }"}, {"sha": "7bb9d0ddf99af1aa93237eb1296f04fa36d612b5", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n@@ -20,6 +18,6 @@ pub fn main() {\n             sum += *i * *j;\n         });\n     });\n-    println!(\"{:?}\", sum);\n+    println!(\"{}\", sum);\n     assert_eq!(sum, 225);\n }"}, {"sha": "867fdd531e95f6f683a6a2beae3fc159ccc52e6f", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n use std::mem::swap;\n \n+#[deriving(Show)]\n struct Ints {sum: Box<int>, values: Vec<int> }\n \n fn add_int(x: &mut Ints, v: int) {\n@@ -37,5 +36,5 @@ pub fn main() {\n         true\n     });\n \n-    println!(\"ints={:?}\", ints);\n+    println!(\"ints={}\", ints);\n }"}, {"sha": "375767c8f5157c820312cf0fb811b8449eeabb5e", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,8 +12,6 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n-extern crate debug;\n-\n struct Pair<A,B> {\n     a: A, b: B\n }\n@@ -42,7 +40,7 @@ fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n \n pub fn main() {\n     let (a, b) = f(22_u64, 44u16).f();\n-    println!(\"a={:?} b={:?}\", a, b);\n+    println!(\"a={} b={}\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);\n }"}, {"sha": "18cc92f335dff8099b57f996915cd2e86e7a72c2", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n use std::task;\n \n pub fn main() {\n     let (tx, rx) = channel();\n     let _t = task::spawn(proc() { child(&tx) });\n     let y = rx.recv();\n     println!(\"received\");\n-    println!(\"{:?}\", y);\n+    println!(\"{}\", y);\n     assert_eq!(y, 10);\n }\n "}, {"sha": "29d329d46a05a748a664c5c1e4241d0c6753af29", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -14,9 +14,8 @@\n #![feature(phase)]\n #[phase(plugin, link)]\n extern crate log;\n-extern crate debug;\n \n pub fn main() {\n     // only fails if println! evaluates its argument.\n-    debug!(\"{:?}\", { if true { fail!() } });\n+    debug!(\"{}\", { if true { fail!() } });\n }"}, {"sha": "9d09740f3b45e85620b78d9c5b84e2b4c1ad1c8e", "filename": "src/test/run-pass/conditional-debug-macro-on.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,12 +10,10 @@\n \n // exec-env:RUST_LOG=conditional-debug-macro-on=4\n \n-extern crate debug;\n-\n pub fn main() {\n     // exits early if println! evaluates its arguments, otherwise it\n     // will hit the fail.\n-    println!(\"{:?}\", { if true { return; } });\n+    println!(\"{}\", { if true { return; } });\n \n     fail!();\n }"}, {"sha": "49b244a162b0c28bee40c28a77ba2c57939a1bf3", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n const x : [int, ..4] = [1,2,3,4];\n static p : int = x[2];\n const y : &'static [int] = &[1,2,3,4];\n@@ -27,9 +25,9 @@ const k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n static m : int = k.c.e;\n \n pub fn main() {\n-    println!(\"{:?}\", p);\n-    println!(\"{:?}\", q);\n-    println!(\"{:?}\", t);\n+    println!(\"{}\", p);\n+    println!(\"{}\", q);\n+    println!(\"{}\", t);\n     assert_eq!(p, 3);\n     assert_eq!(q, 3);\n     assert_eq!(t, 20);"}, {"sha": "c61f26e0bb6b337a6d1ea71453d460dda48981fe", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,18 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n static z : &'static [int, ..4] = &[1,2,3,4];\n static zz : &'static [int] = [1,2,3,4];\n \n pub fn main() {\n-    println!(\"{:?}\", x[1]);\n-    println!(\"{:?}\", y[1]);\n-    println!(\"{:?}\", z[1]);\n-    println!(\"{:?}\", zz[1]);\n+    println!(\"{}\", x[1]);\n+    println!(\"{}\", y[1]);\n+    println!(\"{}\", z[1]);\n+    println!(\"{}\", zz[1]);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[3], 4);\n     assert_eq!(x[3], y[3]);"}, {"sha": "2028ebf64c217afd68e71edeaa0a015d23183188", "filename": "src/test/run-pass/dst-struct-reflect.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Fdst-struct-reflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Fdst-struct-reflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-reflect.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// FIXME(15049) Re-enable this test.\n-// ignore-test\n-// Test that structs with unsized fields work with {:?} reflection.\n-\n-extern crate debug;\n-\n-struct Fat<Sized? T> {\n-    f1: int,\n-    f2: &'static str,\n-    ptr: T\n-}\n-\n-// x is a fat pointer\n-fn reflect(x: &Fat<[int]>, cmp: &str) {\n-    // Don't test this result because reflecting unsized fields is undefined for now.\n-    let _s = format!(\"{:?}\", x);\n-    let s = format!(\"{:?}\", &x.ptr);\n-    assert!(s == cmp.to_string())\n-\n-    println!(\"{:?}\", x);\n-    println!(\"{:?}\", &x.ptr);\n-}\n-\n-fn reflect_0(x: &Fat<[int]>) {\n-    let _s = format!(\"{:?}\", x.ptr[0]);\n-    println!(\"{:?}\", x.ptr[0]);\n-}\n-\n-pub fn main() {\n-    // With a vec of ints.\n-    let f1 = Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n-    reflect(&f1, \"&[1, 2, 3]\");\n-    reflect_0(&f1);\n-    let f2 = &f1;\n-    reflect(f2, \"&[1, 2, 3]\");\n-    reflect_0(f2);\n-    let f3: &Fat<[int]> = f2;\n-    reflect(f3, \"&[1, 2, 3]\");\n-    reflect_0(f3);\n-    let f4: &Fat<[int]> = &f1;\n-    reflect(f4, \"&[1, 2, 3]\");\n-    reflect_0(f4);\n-    let f5: &Fat<[int]> = &Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n-    reflect(f5, \"&[1, 2, 3]\");\n-    reflect_0(f5);\n-\n-    // Zero size vec.\n-    let f5: &Fat<[int]> = &Fat { f1: 5, f2: \"some str\", ptr: [] };\n-    reflect(f5, \"&[]\");\n-}\n-"}, {"sha": "e079916814082918f7cefb4a56e407c1540ee24a", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,12 +10,11 @@\n \n #![feature(macro_rules)]\n \n-extern crate debug;\n-\n macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n+            #[deriving(Show)]\n             enum E {\n                 V = $v,\n                 A = 0\n@@ -25,8 +24,8 @@ macro_rules! check {\n                 assert_eq!(size_of::<E>(), size_of::<$t>());\n                 assert_eq!(V as $t, $v as $t);\n                 assert_eq!(C as $t, $v as $t);\n-                assert_eq!(format!(\"{:?}\", V), \"V\".to_string());\n-                assert_eq!(format!(\"{:?}\", C), \"V\".to_string());\n+                assert_eq!(format!(\"{}\", V), \"V\".to_string());\n+                assert_eq!(format!(\"{}\", C), \"V\".to_string());\n             }\n         }\n         $m::check();"}, {"sha": "ab6576b9b427d9921c25a5d1dabcc2f05c66865a", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n \n #![allow(dead_assignment)]\n \n-extern crate debug;\n-\n pub fn main() {\n     let x : &[int] = &[1,2,3,4,5];\n     let mut z : &[int] = &[1,2,3,4,5];\n@@ -24,15 +22,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    println!(\"{:?}\", a);\n+    println!(\"{}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    println!(\"{:?}\", b);\n+    println!(\"{}\", b);\n \n     assert!(b < c);\n     assert!(b <= c);\n@@ -46,13 +44,13 @@ pub fn main() {\n     assert!(c >= a);\n     assert!(c > a);\n \n-    println!(\"{:?}\", c);\n+    println!(\"{}\", c);\n \n     assert!(a < cc);\n     assert!(a <= cc);\n     assert!(a != cc);\n     assert!(cc >= a);\n     assert!(cc > a);\n \n-    println!(\"{:?}\", cc);\n+    println!(\"{}\", cc);\n }"}, {"sha": "3b7c5083bb48ef1a42e820d111b6db91882f2288", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate debug;\n-\n-use debug::repr;\n-\n-struct Struc { a: u8, b: [int, ..3], c: int }\n-\n-pub fn main() {\n-    let arr = [1,2,3];\n-    let struc = Struc {a: 13u8, b: arr, c: 42};\n-    let s = repr::repr_to_string(&struc);\n-    assert_eq!(s, \"Struc{a: 13u8, b: [1, 2, 3], c: 42}\".to_string());\n-}"}, {"sha": "22d54162c430c9a17422a8b07d8150745f53ce4a", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let pi = 3.1415927f64;\n-    println!(\"{:?}\", -pi * (pi + 2.0 / pi) - pi * 5.0);\n+    println!(\"{}\", -pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n         println!(\"yes\");"}, {"sha": "2122759b3d3ee963224146f00e00c264e0745fed", "filename": "src/test/run-pass/format-ref-cell.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n use std::cell::RefCell;\n \n pub fn main() {\n     let name = RefCell::new(\"rust\");\n     let what = RefCell::new(\"rocks\");\n-    let msg = format!(\"{name:?} {:?}\", &*what.borrow(), name=&*name.borrow());\n-    assert_eq!(msg, \"&\\\"rust\\\" &\\\"rocks\\\"\".to_string());\n+    let msg = format!(\"{name} {}\", &*what.borrow(), name=&*name.borrow());\n+    assert_eq!(msg, \"rust rocks\".to_string());\n }"}, {"sha": "a8d0c7d44fd2b2ebab636e9f1a903049c22cc038", "filename": "src/test/run-pass/functional-struct-upd.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct Foo {\n     x: int,\n     y: int\n@@ -18,5 +17,5 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     let c = Foo { x: 4, .. a};\n-    println!(\"{:?}\", c);\n+    println!(\"{}\", c);\n }"}, {"sha": "8b5dfb6cf75a0223ec9e2de66f9821fe45199e23", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n     let expected = box 100i;\n     let actual = id::<Box<int>>(expected.clone());\n-    println!(\"{:?}\", *actual);\n+    println!(\"{}\", *actual);\n     assert_eq!(*expected, *actual);\n }"}, {"sha": "177455515dd71a6cccb5cadc388d473940f1ffbe", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn g<X>(x: X) -> X { return x; }\n \n #[deriving(Clone)]\n@@ -25,8 +23,8 @@ fn f<T:Clone>(t: T) -> Pair<T> {\n \n pub fn main() {\n     let b = f::<int>(10);\n-    println!(\"{:?}\" ,b.a);\n-    println!(\"{:?}\", b.b);\n+    println!(\"{}\" ,b.a);\n+    println!(\"{}\", b.b);\n     assert_eq!(b.a, 10);\n     assert_eq!(b.b, 10);\n }"}, {"sha": "e1a8ad7c20ab0acc923271486a1a6c255b464f21", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn f<T>(x: Box<T>) -> Box<T> { return x; }\n \n-pub fn main() { let x = f(box 3i); println!(\"{:?}\", *x); }\n+pub fn main() { let x = f(box 3i); println!(\"{}\", *x); }"}, {"sha": "26b9afcea8f3e9aa67c441c13686a2d59cec622a", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,20 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n enum noption<T> { some(T), }\n \n struct Pair { x: int, y: int }\n \n pub fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    match nop { some::<int>(n) => { println!(\"{:?}\", n); assert!((n == 5)); } }\n+    match nop { some::<int>(n) => { println!(\"{}\", n); assert!((n == 5)); } }\n     let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n-        println!(\"{:?}\", t.x);\n-        println!(\"{:?}\", t.y);\n+        println!(\"{}\", t.x);\n+        println!(\"{}\", t.y);\n         assert_eq!(t.x, 17);\n         assert_eq!(t.y, 42);\n       }"}, {"sha": "dc9a90f7025e3405f91993dfc2b9f7724300b40c", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {\n-    println!(\"{:?}\", get_third((1i, 2i, 3i)));\n+    println!(\"{}\", get_third((1i, 2i, 3i)));\n     assert_eq!(get_third((1i, 2i, 3i)), 3);\n     assert_eq!(get_third((5u8, 6u8, 7u8)), 7u8);\n }"}, {"sha": "afa4b7a1ad0be5a747de69a0ee2e6076f843fb86", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n extern crate getopts;\n-extern crate debug;\n \n use getopts::{optopt, getopts};\n "}, {"sha": "8ff89ae2cde2667f14d0ca9db17be555430b191c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,7 +11,6 @@\n \n \n extern crate collections;\n-extern crate debug;\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n@@ -56,7 +55,7 @@ mod map_reduce {\n             ctrl.send(find_reducer(Vec::from_slice(key.as_bytes()), tx));\n             println!(\"receiving\");\n             let c = rx.recv();\n-            println!(\"{:?}\", c);\n+            println!(\"{}\", c);\n             im.insert(key, c);\n         }\n "}, {"sha": "bfe3e9beddc54c4a33718376c9a7d447a0a9f1dc", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let i: int = if false { fail!() } else { 5 };\n-    println!(\"{:?}\", i);\n+    println!(\"{}\", i);\n }"}, {"sha": "b384d7c55835234d5bf587b647a315a5f29cb20d", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -15,8 +15,6 @@\n #![deny(warnings)]\n #![allow(unused_must_use)]\n \n-extern crate debug;\n-\n use std::fmt;\n use std::io::MemWriter;\n use std::io;\n@@ -45,11 +43,6 @@ impl fmt::Show for C {\n macro_rules! t(($a:expr, $b:expr) => { assert_eq!($a.as_slice(), $b) })\n \n pub fn main() {\n-    // Make sure there's a poly formatter that takes anything\n-    t!(format!(\"{:?}\", 1i), \"1\");\n-    t!(format!(\"{:?}\", A), \"A\");\n-    t!(format!(\"{:?}\", ()), \"()\");\n-\n     // Various edge cases without formats\n     t!(format!(\"\"), \"\");\n     t!(format!(\"hello\"), \"hello\");\n@@ -148,8 +141,8 @@ pub fn main() {\n \n     // make sure that format! doesn't move out of local variables\n     let a = box 3i;\n-    format!(\"{:?}\", a);\n-    format!(\"{:?}\", a);\n+    format!(\"{}\", a);\n+    format!(\"{}\", a);\n \n     // make sure that format! doesn't cause spurious unused-unsafe warnings when\n     // it's inside of an outer unsafe block\n@@ -186,7 +179,7 @@ fn test_write() {\n // can do with them just yet (to test the output)\n fn test_print() {\n     print!(\"hi\");\n-    print!(\"{:?}\", vec!(0u8));\n+    print!(\"{}\", vec!(0u8));\n     println!(\"hello\");\n     println!(\"this is a {}\", \"test\");\n     println!(\"{foo}\", foo=\"bar\");"}, {"sha": "3470b54ccbbbc333d31ba6d34cedd855bd40a95f", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n mod foo {\n-    pub fn x(y: int) { println!(\"{:?}\", y); }\n+    pub fn x(y: int) { println!(\"{}\", y); }\n }\n \n mod bar {"}, {"sha": "ac7a55ee405882a28f187369e362a24db5832736", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct MyStruct;\n \n trait Repro {\n@@ -27,5 +26,5 @@ fn do_stuff<R: Repro>(r: R) -> String {\n }\n \n pub fn main() {\n-  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{:?}\", s)));\n+  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{}\", s)));\n }"}, {"sha": "e69738d4caab979fea1ba4954cd0c0b7f92b2243", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n extern crate collections;\n-extern crate debug;\n \n use std::collections::HashMap;\n \n pub fn main() {\n     let mut m = HashMap::new();\n     m.insert(b\"foo\".to_vec(), b\"bar\".to_vec());\n-    println!(\"{:?}\", m);\n+    println!(\"{}\", m);\n }"}, {"sha": "ec0cb488c685bf517876437c2e0f78e2754fa35e", "filename": "src/test/run-pass/issue-17737.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Fissue-17737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e0d3a5bf4c88650a22f605f822e02c6b163580/src%2Ftest%2Frun-pass%2Fissue-17737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17737.rs?ref=b6e0d3a5bf4c88650a22f605f822e02c6b163580", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unboxed_closures)]\n-\n-// Test generating type visitor glue for unboxed closures\n-\n-extern crate debug;\n-\n-fn main() {\n-    let expected = \"fn(); fn(uint, uint) -> uint; fn() -> !\";\n-    let result = format!(\"{:?}; {:?}; {:?}\",\n-                         |:| {},\n-                         |&: x: uint, y: uint| { x + y },\n-                         |&mut:| -> ! { fail!() });\n-    assert_eq!(expected, result.as_slice());\n-}"}, {"sha": "98e6e05134320e63f0173dda197867c45690f8ed", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let mut x = 0i;\n \n@@ -29,6 +27,6 @@ pub fn main() {\n         break;\n     }\n \n-    println!(\"{:?}\", x);\n+    println!(\"{}\", x);\n     assert_eq!(x, 42);\n }"}, {"sha": "32fefac52ebeb978a5ffd2631978bf92c7cb8195", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -13,12 +13,11 @@\n // clobber the previous node ID in a macro expr\n \n extern crate collections;\n-extern crate debug;\n \n use std::collections::HashMap;\n \n fn add_interfaces(managed_ip: String, device: HashMap<String, int>)  {\n-     println!(\"{}, {:?}\", managed_ip, device.get(&\"interfaces\".to_string()));\n+     println!(\"{}, {}\", managed_ip, device.get(&\"interfaces\".to_string()));\n }\n \n pub fn main() {}"}, {"sha": "7228f12c030a121637f87cc9a4e0643006f471a5", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,7 +11,6 @@\n \n extern crate collections;\n extern crate serialize;\n-extern crate debug;\n \n use std::collections::HashMap;\n use serialize::json;\n@@ -29,7 +28,7 @@ fn lookup(table: json::JsonObject, key: String, default: String) -> String\n             s.to_string()\n         }\n         option::Some(value) => {\n-            println!(\"{} was expected to be a string but is a {:?}\", key, value);\n+            println!(\"{} was expected to be a string but is a {}\", key, value);\n             default\n         }\n         option::None => {\n@@ -50,7 +49,7 @@ fn add_interface(_store: int, managed_ip: String, data: json::Json) -> (String,\n             (label, bool_value(false))\n         }\n         _ => {\n-            println!(\"Expected dict for {} interfaces, found {:?}\", managed_ip, data);\n+            println!(\"Expected dict for {} interfaces, found {}\", managed_ip, data);\n             (\"gnos:missing-interface\".to_string(), bool_value(true))\n         }\n     }\n@@ -68,7 +67,7 @@ fn add_interfaces(store: int, managed_ip: String, device: HashMap<String, json::\n         }\n         _ =>\n         {\n-            println!(\"Expected list for {} interfaces, found {:?}\", managed_ip,\n+            println!(\"Expected list for {} interfaces, found {}\", managed_ip,\n                    device.get(&\"interfaces\".to_string()));\n             Vec::new()\n         }"}, {"sha": "01bfdddd285704acaee60f69c38793296588a0bc", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n // except according to those terms.\n \n \n-extern crate debug;\n-\n /// Map representation\n \n use std::io;\n@@ -54,7 +52,7 @@ fn square_from_char(c: char) -> square {\n       '.'  => { earth }\n       ' '  => { empty }\n       _ => {\n-        println!(\"invalid square: {:?}\", c);\n+        println!(\"invalid square: {}\", c);\n         fail!()\n       }\n     }"}, {"sha": "86913c0e8d4fd4b3938bf8f54d8ec7f52530dbe9", "filename": "src/test/run-pass/issue-3109.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3109.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n-    println!(\"{:?}\", (\"hi there!\", \"you\"));\n+    println!(\"{}\", (\"hi there!\", \"you\"));\n }"}, {"sha": "f32564e8b750365e30a0a2a33888385df5dd35d6", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,19 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n trait T {\n     fn print(&self);\n }\n \n+#[deriving(Show)]\n struct S {\n     s: int,\n }\n \n impl T for S {\n     fn print(&self) {\n-        println!(\"{:?}\", self);\n+        println!(\"{}\", self);\n     }\n }\n "}, {"sha": "d8c08f8ac321487967b097190bd5d245921e356f", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -119,7 +119,7 @@ fn query2(cmd: ~[String]) -> Result {\n   let _cmd = cmd_to_string(cmd);\n     io::with_str_reader(\"$3\\r\\nXXX\\r\\n\".to_string())(|sb| {\n     let res = parse_response(@sb as @io::Reader);\n-    println!(\"{:?}\", res);\n+    println!(\"{}\", res);\n     res\n     });\n }"}, {"sha": "04b1cbf577db95a1776c1d6f9aef73e5c7196844", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,29 +10,29 @@\n \n #![feature(unsafe_destructor)]\n \n-extern crate debug;\n-\n trait X {\n-    fn call<T>(&self, x: &T);\n-    fn default_method<T>(&self, x: &T) {\n-        println!(\"X::default_method {:?} {:?}\", self, x);\n+    fn call<T: std::fmt::Show>(&self, x: &T);\n+    fn default_method<T: std::fmt::Show>(&self, x: &T) {\n+        println!(\"X::default_method {}\", x);\n     }\n }\n \n+#[deriving(Show)]\n struct Y(int);\n \n+#[deriving(Show)]\n struct Z<T> {\n     x: T\n }\n \n impl X for Y {\n-    fn call<T>(&self, x: &T) {\n-        println!(\"X::call {:?} {:?}\", self, x);\n+    fn call<T: std::fmt::Show>(&self, x: &T) {\n+        println!(\"X::call {} {}\", self, x);\n     }\n }\n \n #[unsafe_destructor]\n-impl<T: X> Drop for Z<T> {\n+impl<T: X + std::fmt::Show> Drop for Z<T> {\n     fn drop(&mut self) {\n         // These statements used to cause an ICE.\n         self.x.call(self);"}, {"sha": "73bf375923a74061175250eb79d5cb2ce76cc593", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -17,12 +17,10 @@ with the representation of [int, ..n] and [int] somehow, or at least\n failed to typecheck correctly.\n */\n \n-extern crate debug;\n-\n struct X { vec: &'static [int] }\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n pub fn main() {\n     for &v in V.iter() {\n-        println!(\"{:?}\", v.vec);\n+        println!(\"{}\", v.vec);\n     }\n }"}, {"sha": "65ee062a0396078f4b38fecaedb89138bb9c94bd", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n struct A { x: uint }\n \n impl Drop for A {\n@@ -20,5 +18,5 @@ pub fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;\n-    println!(\"{:?}\", x)\n+    println!(\"{}\", x)\n }"}, {"sha": "ee99ec957b5a6c4a62632a4112e82aec23411b22", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n struct A { x: uint }\n \n impl Drop for A {\n@@ -21,7 +19,7 @@ pub fn main() {\n \n     match a {\n         A { x : ref x } => {\n-            println!(\"{:?}\", x)\n+            println!(\"{}\", x)\n         }\n     }\n }"}, {"sha": "73697b2bdb88927d6d16af90f533cad220159b26", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n trait IDummy {\n     fn do_nothing(&self);\n }\n \n+#[deriving(Show)]\n struct A { a: int }\n+#[deriving(Show)]\n struct B<'a> { b: int, pa: &'a A }\n \n     impl IDummy for A {\n@@ -31,7 +31,6 @@ pub fn main() {\n     let sa = A { a: 100 };\n     let sb = B { b: 200, pa: &sa };\n \n-    println!(\"sa is {:?}\", sa);\n-    println!(\"sb is {:?}\", sb);\n-    println!(\"sb.pa is {:?}\", sb.get_pa());\n+    println!(\"sa is {}\", sa);\n+    println!(\"sb is {}\", sb);\n }"}, {"sha": "305f984f98efbffac47982b6bbeb15052de1754d", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,10 +10,8 @@\n \n #![feature(slicing_syntax)]\n \n-extern crate debug;\n-\n-fn assert_repr_eq<T>(obj : T, expected : String) {\n-    assert_eq!(expected, format!(\"{:?}\", obj));\n+fn assert_repr_eq<T: std::fmt::Show>(obj : T, expected : String) {\n+    assert_eq!(expected, format!(\"{}\", obj));\n }\n \n pub fn main() {\n@@ -22,9 +20,9 @@ pub fn main() {\n     let x  = [(), ()];\n     let slice = x[0..1];\n \n-    assert_repr_eq(abc, \"[1, 2, 3]\".to_string());\n-    assert_repr_eq(tf, \"[true, false]\".to_string());\n-    assert_repr_eq(x, \"[(), ()]\".to_string());\n-    assert_repr_eq(slice, \"&[()]\".to_string());\n-    assert_repr_eq(&x, \"&[(), ()]\".to_string());\n+    assert_repr_eq(abc[], \"[1, 2, 3]\".to_string());\n+    assert_repr_eq(tf[], \"[true, false]\".to_string());\n+    assert_repr_eq(x[], \"[(), ()]\".to_string());\n+    assert_repr_eq(slice, \"[()]\".to_string());\n+    assert_repr_eq(x[], \"[(), ()]\".to_string());\n }"}, {"sha": "1f385b2fb1589861a030333a97a6887bdb6768d9", "filename": "src/test/run-pass/issue-9737.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-9737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fissue-9737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9737.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(macro_rules)]\n \n-macro_rules! f((v: $x:expr) => ( println!(\"{:?}\", $x) ))\n+macro_rules! f((v: $x:expr) => ( println!(\"{}\", $x) ))\n \n fn main () {\n     let v = 5;"}, {"sha": "6d5624e2b588004a379797216a33e1a92dbc18fc", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,13 +10,11 @@\n \n // Make sure #1399 stays fixed\n \n-extern crate debug;\n-\n struct A { a: Box<int> }\n \n pub fn main() {\n     fn invoke(f: ||) { f(); }\n     let k = box 22i;\n     let _u = A {a: k.clone()};\n-    invoke(|| println!(\"{:?}\", k.clone()) )\n+    invoke(|| println!(\"{}\", k.clone()) )\n }"}, {"sha": "043961ce59969b27cbad34a31d80116d237b7d02", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn incr(x: &mut int) -> bool { *x += 1; assert!((false)); return false; }\n \n pub fn main() {\n     let x = 1i == 2 || 3i == 3;\n     assert!((x));\n     let mut y: int = 10;\n-    println!(\"{:?}\", x || incr(&mut y));\n+    println!(\"{}\", x || incr(&mut y));\n     assert_eq!(y, 10);\n     if true && x { assert!((true)); } else { assert!((false)); }\n }"}, {"sha": "f527ad77a9273d3112e43e76557b3950752a8a63", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,13 +10,11 @@\n \n // no-pretty-expanded FIXME #15189\n \n-extern crate debug;\n-\n pub fn main() {\n     let x = vec!(1i, 2i, 3i);\n     let mut y = 0i;\n-    for i in x.iter() { println!(\"{:?}\", *i); y += *i; }\n-    println!(\"{:?}\", y);\n+    for i in x.iter() { println!(\"{}\", *i); y += *i; }\n+    println!(\"{}\", y);\n     assert_eq!(y, 6);\n     let s = \"hello there\".to_string();\n     let mut i: int = 0;\n@@ -29,8 +27,8 @@ pub fn main() {\n         // ...\n \n         i += 1;\n-        println!(\"{:?}\", i);\n-        println!(\"{:?}\", c);\n+        println!(\"{}\", i);\n+        println!(\"{}\", c);\n     }\n     assert_eq!(i, 11);\n }"}, {"sha": "3d8eaeea618d02f10d35e595d6fa80a47e4e9421", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,28 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n enum foo {\n   a(uint),\n   b(String),\n }\n \n-fn check_log<T>(exp: String, v: T) {\n-    assert_eq!(exp, format!(\"{:?}\", v));\n+fn check_log<T: std::fmt::Show>(exp: String, v: T) {\n+    assert_eq!(exp, format!(\"{}\", v));\n }\n \n pub fn main() {\n     let mut x = Some(a(22u));\n-    let exp = \"Some(a(22u))\".to_string();\n-    let act = format!(\"{:?}\", x);\n+    let exp = \"Some(a(22))\".to_string();\n+    let act = format!(\"{}\", x);\n     assert_eq!(act, exp);\n     check_log(exp, x);\n \n     x = None;\n     let exp = \"None\".to_string();\n-    let act = format!(\"{:?}\", x);\n+    let act = format!(\"{}\", x);\n     assert_eq!(act, exp);\n     check_log(exp, x);\n }"}, {"sha": "8445f3e3160034c69d837bb69d8fe766c8f43eda", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n enum foo {\n   a(uint),\n   b(String),\n   c,\n }\n \n+#[deriving(Show)]\n enum bar {\n   d, e, f\n }\n \n pub fn main() {\n-    assert_eq!(\"a(22u)\".to_string(), format!(\"{:?}\", a(22u)));\n-    assert_eq!(\"c\".to_string(), format!(\"{:?}\", c));\n-    assert_eq!(\"d\".to_string(), format!(\"{:?}\", d));\n+    assert_eq!(\"a(22)\".to_string(), format!(\"{}\", a(22u)));\n+    assert_eq!(\"c\".to_string(), format!(\"{}\", c));\n+    assert_eq!(\"d\".to_string(), format!(\"{}\", d));\n }"}, {"sha": "cf733fe48932a5377418b3206232b65fb91770f5", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n enum Numbers {\n     Three\n }\n \n pub fn main() {\n     println!(\"{}\", 1i);\n     println!(\"{}\", 2.0f64);\n-    println!(\"{:?}\", Three);\n-    println!(\"{:?}\", vec!(4i));\n+    println!(\"{}\", Three);\n+    println!(\"{}\", vec!(4i));\n }"}, {"sha": "5c834a06a74dbf4cfbca3c7ceb20549303527767", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     match box 100i {\n       box x => {\n-        println!(\"{:?}\", x);\n+        println!(\"{}\", x);\n         assert_eq!(x, 100);\n       }\n     }"}, {"sha": "fa28025afa077b3b0fa6cf9a80bff8b76dfde34e", "filename": "src/test/run-pass/nested-matchs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-matchs.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn baz() -> ! { fail!(); }\n \n fn foo() {\n     match Some::<int>(5) {\n       Some::<int>(_x) => {\n         let mut bar;\n         match None::<int> { None::<int> => { bar = 5i; } _ => { baz(); } }\n-        println!(\"{:?}\", bar);\n+        println!(\"{}\", bar);\n       }\n       None::<int> => { println!(\"hello\"); }\n     }"}, {"sha": "4cd8e65e5002de19edf4a5750766f17e39fca22d", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n // Regression test for issue #152.\n pub fn main() {\n     let mut b: uint = 1u;\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;\n-        println!(\"{:?}\", b);\n+        println!(\"{}\", b);\n     }\n }"}, {"sha": "d047f02fe2f6585c5d96c134d09c60a0ec463953", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -11,8 +11,6 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-extern crate debug;\n-\n use std::ops::Index;\n \n struct AssociationList<K,V> {\n@@ -30,14 +28,14 @@ impl<K,V> AssociationList<K,V> {\n     }\n }\n \n-impl<K:PartialEq,V:Clone> Index<K,V> for AssociationList<K,V> {\n+impl<K: PartialEq + std::fmt::Show, V:Clone> Index<K,V> for AssociationList<K,V> {\n     fn index<'a>(&'a self, index: &K) -> &'a V {\n         for pair in self.pairs.iter() {\n             if pair.key == *index {\n                 return &pair.value\n             }\n         }\n-        fail!(\"No value found for key: {:?}\", index);\n+        fail!(\"No value found for key: {}\", index);\n     }\n }\n "}, {"sha": "ce8c5df07401214b01f950c9890fed5d21be28b6", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(intrinsics)]\n \n-extern crate debug;\n-\n use std::mem;\n \n mod rusti {\n@@ -24,12 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n+#[deriving(Show)]\n struct Inner {\n     c64: u32\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n+#[deriving(Show)]\n struct Outer {\n     c8: u8,\n     t: Inner\n@@ -53,10 +53,10 @@ pub fn main() {\n         let x = Outer {c8: 22u8, t: Inner {c64: 44u32}};\n \n         // Send it through the shape code\n-        let y = format!(\"{:?}\", x);\n+        let y = format!(\"{}\", x);\n \n-        println!(\"align inner = {:?}\", rusti::min_align_of::<Inner>());\n-        println!(\"size outer = {:?}\", mem::size_of::<Outer>());\n+        println!(\"align inner = {}\", rusti::min_align_of::<Inner>());\n+        println!(\"size outer = {}\", mem::size_of::<Outer>());\n         println!(\"y = {}\", y);\n \n         // per clang/gcc the alignment of `inner` is 4 on x86.\n@@ -66,6 +66,6 @@ pub fn main() {\n         // because `inner`s alignment was 4.\n         assert_eq!(mem::size_of::<Outer>(), m::size());\n \n-        assert_eq!(y, \"Outer{c8: 22u8, t: Inner{c64: 44u32}}\".to_string());\n+        assert_eq!(y, \"Outer { c8: 22, t: Inner { c64: 44 } }\".to_string());\n     }\n }"}, {"sha": "c0c7f4c99be7358ec4ac94ee823b5cd330088feb", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(intrinsics)]\n \n-extern crate debug;\n-\n use std::mem;\n \n mod rusti {\n@@ -24,12 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n+#[deriving(Show)]\n struct Inner {\n     c64: u64\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n+#[deriving(Show)]\n struct Outer {\n     c8: u8,\n     t: Inner\n@@ -82,8 +82,7 @@ pub fn main() {\n     unsafe {\n         let x = Outer {c8: 22u8, t: Inner {c64: 44u64}};\n \n-        // Send it through the shape code\n-        let y = format!(\"{:?}\", x);\n+        let y = format!(\"{}\", x);\n \n         println!(\"align inner = {}\", rusti::min_align_of::<Inner>());\n         println!(\"size outer = {}\", mem::size_of::<Outer>());\n@@ -96,6 +95,6 @@ pub fn main() {\n         // because `Inner`s alignment was 4.\n         assert_eq!(mem::size_of::<Outer>(), m::m::size());\n \n-        assert_eq!(y, \"Outer{c8: 22u8, t: Inner{c64: 44u64}}\".to_string());\n+        assert_eq!(y, \"Outer { c8: 22, t: Inner { c64: 44 } }\".to_string());\n     }\n }"}, {"sha": "b30b3cfa47695f6049ce054486881086d3919a66", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n struct Clam<'a> {\n     chowder: &'a int\n }\n@@ -24,6 +22,6 @@ impl<'a> get_chowder<'a> for Clam<'a> {\n \n pub fn main() {\n     let clam = Clam { chowder: &3 };\n-    println!(\"{:?}\", *clam.get_chowder());\n+    println!(\"{}\", *clam.get_chowder());\n     clam.get_chowder();\n }"}, {"sha": "987392c70e3cb062e5970cf8e054b88640386bdf", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n enum int_wrapper<'a> {\n     int_wrapper_ctor(&'a int)\n }\n@@ -21,5 +19,5 @@ pub fn main() {\n     match y {\n         int_wrapper_ctor(zz) => { z = zz; }\n     }\n-    println!(\"{:?}\", *z);\n+    println!(\"{}\", *z);\n }"}, {"sha": "d540605180a4eea87041576a2ee7ff6659b8e66f", "filename": "src/test/run-pass/regions-simple.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-simple.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let mut x: int = 3;\n     let y: &mut int = &mut x;\n     *y = 5;\n-    println!(\"{:?}\", *y);\n+    println!(\"{}\", *y);\n }"}, {"sha": "9c369c0d770c6a5a3142db4d6ee43f1ae9feebcc", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate debug;\n+#![feature(slicing_syntax)]\n \n pub fn main() {\n     let x = [ [true], ..512 ];\n     let y = [ 0i, ..1 ];\n \n-    println!(\"{:?}\", x);\n-    println!(\"{:?}\", y);\n+    print!(\"[\");\n+    for xi in x.iter() {\n+        print!(\"{}, \", (*xi)[]);\n+    }\n+    println!(\"]\");\n+    println!(\"{}\", y[]);\n }"}, {"sha": "9f553cd2a0061f5917342f8f3fcade808fc46ad7", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn foo(c: Vec<int> ) {\n     let a: int = 5;\n     let mut b: Vec<int> = Vec::new();\n@@ -18,7 +16,7 @@ fn foo(c: Vec<int> ) {\n     match none::<int> {\n         some::<int>(_) => {\n             for _i in c.iter() {\n-                println!(\"{:?}\", a);\n+                println!(\"{}\", a);\n                 let a = 17i;\n                 b.push(a);\n             }"}, {"sha": "52fa8e1132e2fec927ad732a52c3ae37a0f1fe94", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-windows\n \n-extern crate debug;\n-\n use std::os;\n use std::io::process::{Command, ExitSignal, ExitStatus};\n \n@@ -27,7 +25,7 @@ pub fn main() {\n         match status {\n             ExitSignal(_) if cfg!(unix) => {},\n             ExitStatus(0xC0000028) if cfg!(windows) => {},\n-            _ => fail!(\"invalid termination (was not signalled): {:?}\", status)\n+            _ => fail!(\"invalid termination (was not signalled): {}\", status)\n         }\n     }\n }"}, {"sha": "1078359dc145e18d32f7ead14a4df7fa26a557b0", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: Vec<clam<T>> ) {\n     match *v.get(1) {\n       a::<T>(ref _t, ref u) => {\n           println!(\"incorrect\");\n-          println!(\"{:?}\", u);\n+          println!(\"{}\", u);\n           fail!();\n       }\n       b::<T> => { println!(\"correct\"); }"}, {"sha": "69d574152fae5f490012a79753ff109265969e90", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(macro_rules)]\n \n-extern crate debug;\n-\n use std::mem::size_of;\n \n #[deriving(PartialEq, Show)]\n@@ -24,23 +22,23 @@ macro_rules! check {\n             static S: $t = $e;\n             let v: $t = $e;\n             assert_eq!(S, v);\n-            assert_eq!(format!(\"{:?}\", v).as_slice(), $s);\n-            assert_eq!(format!(\"{:?}\", S).as_slice(), $s);\n+            assert_eq!(format!(\"{}\", v).as_slice(), $s);\n+            assert_eq!(format!(\"{}\", S).as_slice(), $s);\n         });*\n     }}\n }\n \n pub fn main() {\n     check!(Option<u8>, 2,\n            None, \"None\",\n-           Some(129u8), \"Some(129u8)\");\n+           Some(129u8), \"Some(129)\");\n     check!(Option<i16>, 4,\n            None, \"None\",\n-           Some(-20000i16), \"Some(-20000i16)\");\n+           Some(-20000i16), \"Some(-20000)\");\n     check!(Either<u8, i8>, 2,\n-           Left(132u8), \"Left(132u8)\",\n-           Right(-32i8), \"Right(-32i8)\");\n+           Left(132u8), \"Left(132)\",\n+           Right(-32i8), \"Right(-32)\");\n     check!(Either<u8, i16>, 4,\n-           Left(132u8), \"Left(132u8)\",\n-           Right(-20000i16), \"Right(-20000i16)\");\n+           Left(132u8), \"Left(132)\",\n+           Right(-20000i16), \"Right(-20000)\");\n }"}, {"sha": "dba3fe325fa7d3aece802ea0eafe1ee8d742b828", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n use std::task;\n \n fn x(s: String, n: int) {\n-    println!(\"{:?}\", s);\n-    println!(\"{:?}\", n);\n+    println!(\"{}\", s);\n+    println!(\"{}\", n);\n }\n \n pub fn main() {"}, {"sha": "10317c1dd022329dda1703be46546c82416855e6", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n enum a_tag {\n     a_tag_var(u64)\n }\n \n+#[deriving(Show)]\n struct t_rec {\n     c8: u8,\n     t: a_tag\n }\n \n pub fn main() {\n     let x = t_rec {c8: 22u8, t: a_tag_var(44u64)};\n-    let y = format!(\"{:?}\", x);\n+    let y = format!(\"{}\", x);\n     println!(\"y = {}\", y);\n-    assert_eq!(y, \"t_rec{c8: 22u8, t: a_tag_var(44u64)}\".to_string());\n+    assert_eq!(y, \"t_rec { c8: 22, t: a_tag_var(44) }\".to_string());\n }"}, {"sha": "75345555554c67e053df77ad38175224186c5a14", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,\n@@ -19,9 +18,9 @@ enum color {\n }\n \n pub fn main() {\n-    let act = format!(\"{:?}\", red);\n+    let act = format!(\"{}\", red);\n     println!(\"{}\", act);\n     assert_eq!(\"red\".to_string(), act);\n-    assert_eq!(\"green\".to_string(), format!(\"{:?}\", green));\n-    assert_eq!(\"white\".to_string(), format!(\"{:?}\", white));\n+    assert_eq!(\"green\".to_string(), format!(\"{}\", green));\n+    assert_eq!(\"white\".to_string(), format!(\"{}\", white));\n }"}, {"sha": "6f03f385a83e4a638db87806b3a33355ace5f9ae", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,20 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn checktrue(rs: bool) -> bool { assert!((rs)); return true; }\n \n pub fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: fn(bool) -> bool) -> bool {\n     println!(\"evenk\");\n-    println!(\"{:?}\", n);\n+    println!(\"{}\", n);\n     if n == 0 { return k(true); } else { return oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: fn(bool) -> bool) -> bool {\n     println!(\"oddk\");\n-    println!(\"{:?}\", n);\n+    println!(\"{}\", n);\n     if n == 0 { return k(false); } else { return evenk(n - 1, k); }\n }"}, {"sha": "583840ede5f3e4281f26412da91fc1f8bebba39c", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -10,8 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-extern crate debug;\n-\n use std::task;\n \n pub fn main() { println!(\"===== WITHOUT THREADS =====\"); test00(); }\n@@ -65,7 +63,7 @@ fn test00() {\n     for r in results.iter_mut() { r.get_ref(); }\n \n     println!(\"Completed: Final number is: \");\n-    println!(\"{:?}\", sum);\n+    println!(\"{}\", sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert_eq!(sum, 480);"}, {"sha": "cc71ccdfa1960762e295e19bd7ca7f911643a140", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n use std::task;\n \n pub fn main() { test00(); }\n@@ -32,7 +30,7 @@ fn test00() {\n     let mut i: int = 0;\n     while i < number_of_messages {\n         sum += rx.recv();\n-        println!(\"{:?}\", r);\n+        println!(\"{}\", r);\n         i += 1;\n     }\n "}, {"sha": "91c07c259a2d8b60d8f0da09267053192f84da47", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -16,7 +16,6 @@\n #[phase(plugin, link)]\n extern crate log;\n extern crate libc;\n-extern crate debug;\n \n use std::io::net::tcp::{TcpListener, TcpStream};\n use std::io::{Acceptor, Listener};\n@@ -41,7 +40,7 @@ fn main() {\n             let mut stream = match acceptor.accept() {\n                 Ok(stream) => stream,\n                 Err(error) => {\n-                    debug!(\"accept failed: {:?}\", error);\n+                    debug!(\"accept failed: {}\", error);\n                     continue;\n                 }\n             };\n@@ -64,7 +63,7 @@ fn main() {\n                     let mut buf = [0];\n                     stream.read(buf);\n                 },\n-                Err(e) => debug!(\"{:?}\", e)\n+                Err(e) => debug!(\"{}\", e)\n             }\n             tx.send(());\n         });"}, {"sha": "eceafa40265f92828865b3d98ae9973841c0f9e0", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -18,8 +18,6 @@\n // they're in a different location than before. Hence, these tests are all run\n // serially here.\n \n-extern crate debug;\n-\n use std::io::fs::PathExtensions;\n use std::io::{fs, TempDir};\n use std::io;\n@@ -126,7 +124,7 @@ fn test_rm_tempdir_close() {\n fn recursive_mkdir_rel() {\n     let path = Path::new(\"frob\");\n     let cwd = os::getcwd();\n-    println!(\"recursive_mkdir_rel: Making: {} in cwd {} [{:?}]\", path.display(),\n+    println!(\"recursive_mkdir_rel: Making: {} in cwd {} [{}]\", path.display(),\n            cwd.display(), path.exists());\n     fs::mkdir_recursive(&path, io::USER_RWX);\n     assert!(path.is_dir());\n@@ -144,7 +142,7 @@ fn recursive_mkdir_dot() {\n fn recursive_mkdir_rel_2() {\n     let path = Path::new(\"./frob/baz\");\n     let cwd = os::getcwd();\n-    println!(\"recursive_mkdir_rel_2: Making: {} in cwd {} [{:?}]\", path.display(),\n+    println!(\"recursive_mkdir_rel_2: Making: {} in cwd {} [{}]\", path.display(),\n            cwd.display(), path.exists());\n     fs::mkdir_recursive(&path, io::USER_RWX);\n     assert!(path.is_dir());"}, {"sha": "464ab1352281e566726107214a856a1322911046", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n /*\n   This is about the simplest program that can successfully send a\n   message.\n@@ -19,5 +17,5 @@ pub fn main() {\n     let (tx, rx) = channel();\n     tx.send(42i);\n     let r = rx.recv();\n-    println!(\"{:?}\", r);\n+    println!(\"{}\", r);\n }"}, {"sha": "af8b203d9518e147ee6def9d016004f9448c4484", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n+#[deriving(Show)]\n struct Foo(int, int);\n \n pub fn main() {\n     let x = Foo(1, 2);\n-    println!(\"{:?}\", x);\n+    println!(\"{}\", x);\n }"}, {"sha": "b1d351ef7b4318743bfcfab88fda6171e0bcbeb8", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n fn test1() {\n     enum bar { u(Box<int>), w(int), }\n \n     let x = u(box 10);\n     assert!(match x {\n       u(a) => {\n-        println!(\"{:?}\", a);\n+        println!(\"{}\", a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "bae87230ba052f5c6b6c9c5998bd28b03659e23e", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n pub fn main() {\n     let i = box 100i;\n-    println!(\"{:?}\", i);\n+    println!(\"{}\", i);\n }"}, {"sha": "f031f7790852278ccb2886baf872c0c37bf84817", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n enum bar { u(Box<int>), w(int), }\n \n pub fn main() {\n     assert!(match u(box 10) {\n       u(a) => {\n-        println!(\"{:?}\", a);\n+        println!(\"{}\", a);\n         *a\n       }\n       _ => { 66 }"}, {"sha": "2fe8f4bdf011ae70aab7a2890c8b2a997faa3b0f", "filename": "src/test/run-pass/vec-dst.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38aca17c474321e4c260e36f173275a90d753397/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-dst.rs?ref=38aca17c474321e4c260e36f173275a90d753397", "patch": "@@ -8,73 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate debug;\n-\n-fn reflect() {\n-    // Tests for reflective printing.\n-    // Also tests drop glue.\n-    let x = [1, 2, 3, 4];\n-    let x2 = [(), (), ()];\n-    let e1: [uint, ..0] = [];\n-    let e2: [&'static str, ..0] = [];\n-    let e3: [(), ..0] = [];\n-    assert!(format!(\"{:?}\", x) == \"[1u, 2u, 3u, 4u]\".to_string());\n-    assert!(format!(\"{:?}\", x2) == \"[(), (), ()]\".to_string());\n-    assert!(format!(\"{:?}\", e1) == \"[]\".to_string());\n-    assert!(format!(\"{:?}\", e2) == \"[]\".to_string());\n-    assert!(format!(\"{:?}\", e3) == \"[]\".to_string());\n-\n-    let rx: &[uint, ..4] = &x;\n-    let rx2: &[(), ..3] = &x2;\n-    let re1: &[uint, ..0] = &e1;\n-    let re2: &[&'static str, ..0] = &e2;\n-    let re3: &[(), ..0] = &e3;\n-    assert!(format!(\"{:?}\", rx) == \"&[1u, 2u, 3u, 4u]\".to_string());\n-    assert!(format!(\"{:?}\", rx2) == \"&[(), (), ()]\".to_string());\n-    assert!(format!(\"{:?}\", re1) == \"&[]\".to_string());\n-    assert!(format!(\"{:?}\", re2) == \"&[]\".to_string());\n-    assert!(format!(\"{:?}\", re3) == \"&[]\".to_string());\n-\n-    let rx: &[uint] = &x;\n-    let rx2: &[()] = &x2;\n-    let re1: &[uint] = &e1;\n-    let re2: &[&'static str] = &e2;\n-    let re3: &[()] = &e3;\n-    assert!(format!(\"{:?}\", rx) == \"&[1u, 2u, 3u, 4u]\".to_string());\n-    assert!(format!(\"{:?}\", rx2) == \"&[(), (), ()]\".to_string());\n-    assert!(format!(\"{:?}\", re1) == \"&[]\".to_string());\n-    assert!(format!(\"{:?}\", re2) == \"&[]\".to_string());\n-    assert!(format!(\"{:?}\", re3) == \"&[]\".to_string());\n-\n-    // FIXME(15049) These should all work some day.\n-    /*let rx: Box<[uint, ..4]> = box x;\n-    let rx2: Box<[(), ..3]> = box x2;\n-    let re1: Box<[uint, ..0]> = box e1;\n-    let re2: Box<[&'static str, ..0]> = box e2;\n-    let re3: Box<[(), ..0]> = box e3;\n-    assert!(format!(\"{:?}\", rx) == \"box [1u, 2u, 3u, 4u]\".to_string());\n-    assert!(format!(\"{:?}\", rx2) == \"box [(), (), ()]\".to_string());\n-    assert!(format!(\"{:?}\", re1) == \"box []\".to_string());\n-    assert!(format!(\"{:?}\", re2) == \"box []\".to_string());\n-    assert!(format!(\"{:?}\", re3) == \"box []\".to_string());\n-\n-    let x = [1, 2, 3, 4];\n-    let x2 = [(), (), ()];\n-    let e1: [uint, ..0] = [];\n-    let e2: [&'static str, ..0] = [];\n-    let e3: [(), ..0] = [];\n-    let rx: Box<[uint]> = box x;\n-    let rx2: Box<[()]> = box x2;\n-    let re1: Box<[uint]> = box e1;\n-    let re2: Box<[&'static str]> = box e2;\n-    let re3: Box<[()]> = box e3;\n-    assert!(format!(\"{:?}\", rx) == \"box [1u, 2u, 3u, 4u]\".to_string());\n-    assert!(format!(\"{:?}\", rx2) == \"box [(), (), ()]\".to_string());\n-    assert!(format!(\"{:?}\", re1) == \"box []\".to_string());\n-    assert!(format!(\"{:?}\", re2) == \"box []\".to_string());\n-    assert!(format!(\"{:?}\", re3) == \"box []\".to_string());*/\n-}\n-\n fn sub_expr() {\n     // Test for a &[T] => &&[T] coercion in sub-expression position\n     // (surpisingly, this can cause errors which are not caused by either of:\n@@ -109,7 +42,6 @@ fn index() {\n }\n \n pub fn main() {\n-    reflect();\n     sub_expr();\n     index();\n }"}]}