{"sha": "81cc4822653b1f80729e8d50f9527c1fd0e5394f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxY2M0ODIyNjUzYjFmODA3MjllOGQ1MGY5NTI3YzFmZDBlNTM5NGY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-08T20:26:15Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-07-08T20:27:02Z"}, "message": "Avoid infinite looping in `print_def_path`.", "tree": {"sha": "26cceff25fc8741dfcd7b176600c20416f6cc712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26cceff25fc8741dfcd7b176600c20416f6cc712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81cc4822653b1f80729e8d50f9527c1fd0e5394f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81cc4822653b1f80729e8d50f9527c1fd0e5394f", "html_url": "https://github.com/rust-lang/rust/commit/81cc4822653b1f80729e8d50f9527c1fd0e5394f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81cc4822653b1f80729e8d50f9527c1fd0e5394f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db592f4627251cfd8571a05cf8e06a56be9470c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db592f4627251cfd8571a05cf8e06a56be9470c2", "html_url": "https://github.com/rust-lang/rust/commit/db592f4627251cfd8571a05cf8e06a56be9470c2"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "e889f2edef2bbbd40455690c530e7cfd1aad5a28", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81cc4822653b1f80729e8d50f9527c1fd0e5394f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cc4822653b1f80729e8d50f9527c1fd0e5394f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=81cc4822653b1f80729e8d50f9527c1fd0e5394f", "patch": "@@ -228,8 +228,27 @@ pub trait PrettyPrinter<'tcx>:\n     /// from at least one local module and returns true. If the crate defining `def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n     fn try_print_visible_def_path(\n+        self,\n+        def_id: DefId,\n+    ) -> Result<(Self, bool), Self::Error> {\n+        let mut callers = Vec::new();\n+        self.try_print_visible_def_path_recur(def_id, &mut callers)\n+    }\n+\n+    /// Does the work of `try_print_visible_def_path`, building the\n+    /// full definition path recursively before attempting to\n+    /// post-process it into the valid and visible version that\n+    /// accounts for re-exports.\n+    ///\n+    /// This method should only be callled by itself or\n+    /// `try_print_visible_def_path`.\n+    ///\n+    /// `callers` is a chain of visible_parent's leading to `def_id`,\n+    /// to support cycle detection during recursion.\n+    fn try_print_visible_def_path_recur(\n         mut self,\n         def_id: DefId,\n+        callers: &mut Vec<DefId>,\n     ) -> Result<(Self, bool), Self::Error> {\n         define_scoped_cx!(self);\n \n@@ -302,14 +321,19 @@ pub trait PrettyPrinter<'tcx>:\n             Some(parent) => parent,\n             None => return Ok((self, false)),\n         };\n+        if callers.contains(&visible_parent) {\n+            return Ok((self, false));\n+        }\n+        callers.push(visible_parent);\n         // HACK(eddyb) this bypasses `path_append`'s prefix printing to avoid\n         // knowing ahead of time whether the entire path will succeed or not.\n         // To support printers that do not implement `PrettyPrinter`, a `Vec` or\n         // linked list on the stack would need to be built, before any printing.\n-        match self.try_print_visible_def_path(visible_parent)? {\n+        match self.try_print_visible_def_path_recur(visible_parent, callers)? {\n             (cx, false) => return Ok((cx, false)),\n             (cx, true) => self = cx,\n         }\n+        callers.pop();\n         let actual_parent = self.tcx().parent(def_id);\n         debug!(\n             \"try_print_visible_def_path: visible_parent={:?} actual_parent={:?}\","}]}