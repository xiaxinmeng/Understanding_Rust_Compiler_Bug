{"sha": "7f0e35106e3cce054551de8305f8bcbc25ef59f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGUzNTEwNmUzY2NlMDU0NTUxZGU4MzA1ZjhiY2JjMjVlZjU5Zjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-16T12:36:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-16T12:36:07Z"}, "message": "Fix overflow checking when multiplying two i64\n\nFixes #1162", "tree": {"sha": "5678930a67bcbb3a8c99840890389b4f141c80c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5678930a67bcbb3a8c99840890389b4f141c80c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0e35106e3cce054551de8305f8bcbc25ef59f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e35106e3cce054551de8305f8bcbc25ef59f8", "html_url": "https://github.com/rust-lang/rust/commit/7f0e35106e3cce054551de8305f8bcbc25ef59f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e35106e3cce054551de8305f8bcbc25ef59f8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6c5742896fab93788b4dabb6ba2fcf1881f5e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c5742896fab93788b4dabb6ba2fcf1881f5e2", "html_url": "https://github.com/rust-lang/rust/commit/6d6c5742896fab93788b4dabb6ba2fcf1881f5e2"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "77ba72df8ef371ddbc1163c7b0f6f0aca38b0d7e", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e35106e3cce054551de8305f8bcbc25ef59f8/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e35106e3cce054551de8305f8bcbc25ef59f8/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=7f0e35106e3cce054551de8305f8bcbc25ef59f8", "patch": "@@ -48,6 +48,8 @@ fn main() {\n     assert_eq!(2.3f32.copysign(-1.0), -2.3f32);\n     println!(\"{}\", 2.3f32.powf(2.0));\n \n+    assert_eq!(i64::MAX.checked_mul(2), None);\n+\n     assert_eq!(-128i8, (-128i8).saturating_sub(1));\n     assert_eq!(127i8, 127i8.saturating_sub(-128));\n     assert_eq!(-128i8, (-128i8).saturating_add(-128));"}, {"sha": "b6d378a5fe10ae59b53ca8c4656923902250fc05", "filename": "src/num.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e35106e3cce054551de8305f8bcbc25ef59f8/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e35106e3cce054551de8305f8bcbc25ef59f8/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=7f0e35106e3cce054551de8305f8bcbc25ef59f8", "patch": "@@ -271,14 +271,17 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n                         let val_hi = fx.bcx.ins().umulhi(lhs, rhs);\n                         fx.bcx.ins().icmp_imm(IntCC::NotEqual, val_hi, 0)\n                     } else {\n+                        // Based on LLVM's instruction sequence for compiling\n+                        // a.checked_mul(b).is_some() to riscv64gc:\n+                        // mulh    a2, a0, a1\n+                        // mul     a0, a0, a1\n+                        // srai    a0, a0, 63\n+                        // xor     a0, a0, a2\n+                        // snez    a0, a0\n                         let val_hi = fx.bcx.ins().smulhi(lhs, rhs);\n-                        let not_all_zero = fx.bcx.ins().icmp_imm(IntCC::NotEqual, val_hi, 0);\n-                        let not_all_ones = fx.bcx.ins().icmp_imm(\n-                            IntCC::NotEqual,\n-                            val_hi,\n-                            u64::try_from((1u128 << ty.bits()) - 1).unwrap() as i64,\n-                        );\n-                        fx.bcx.ins().band(not_all_zero, not_all_ones)\n+                        let val_sign = fx.bcx.ins().sshr_imm(val, i64::from(ty.bits() - 1));\n+                        let xor = fx.bcx.ins().bxor(val_hi, val_sign);\n+                        fx.bcx.ins().icmp_imm(IntCC::NotEqual, xor, 0)\n                     };\n                     (val, has_overflow)\n                 }"}]}