{"sha": "67a6059aa5dab924a09194d5490d43da518a40a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTYwNTlhYTVkYWI5MjRhMDkxOTRkNTQ5MGQ0M2RhNTE4YTQwYTU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-01T21:25:31Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-11-13T18:45:38Z"}, "message": "move tests module into separate file", "tree": {"sha": "4e3270fadf5ef0b9ec79380a98fb33285a35d3f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e3270fadf5ef0b9ec79380a98fb33285a35d3f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a6059aa5dab924a09194d5490d43da518a40a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a6059aa5dab924a09194d5490d43da518a40a5", "html_url": "https://github.com/rust-lang/rust/commit/67a6059aa5dab924a09194d5490d43da518a40a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a6059aa5dab924a09194d5490d43da518a40a5/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "html_url": "https://github.com/rust-lang/rust/commit/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "4604f2ab002d98e5b5edd6326c055055f9abd328", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67a6059aa5dab924a09194d5490d43da518a40a5/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a6059aa5dab924a09194d5490d43da518a40a5/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=67a6059aa5dab924a09194d5490d43da518a40a5", "patch": "@@ -397,60 +397,4 @@ mod kernel_copy {\n     unsafe fn fd_as_file(fd: RawFd) -> ManuallyDrop<File> {\n         ManuallyDrop::new(File::from_raw_fd(fd))\n     }\n-\n-    #[cfg(test)]\n-    mod tests {\n-\n-        use crate::io::{BufRead, BufReader, BufWriter, Read, Result, Seek, SeekFrom, Write};\n-\n-        #[test]\n-        fn copy_specialization() -> Result<()> {\n-            let path = crate::env::temp_dir();\n-            let source_path = path.join(\"copy-spec.source\");\n-            let sink_path = path.join(\"copy-spec.sink\");\n-\n-            let result: Result<()> = try {\n-                let mut source = crate::fs::OpenOptions::new()\n-                    .read(true)\n-                    .write(true)\n-                    .create(true)\n-                    .truncate(true)\n-                    .open(&source_path)?;\n-                source.write_all(b\"abcdefghiklmnopqr\")?;\n-                source.seek(SeekFrom::Start(8))?;\n-                let mut source = BufReader::with_capacity(8, source.take(5));\n-                source.fill_buf()?;\n-                assert_eq!(source.buffer(), b\"iklmn\");\n-                source.get_mut().set_limit(6);\n-                source.get_mut().get_mut().seek(SeekFrom::Start(1))?; // \"bcdefg\"\n-                let mut source = source.take(10); // \"iklmnbcdef\"\n-\n-                let mut sink = crate::fs::OpenOptions::new()\n-                    .read(true)\n-                    .write(true)\n-                    .create(true)\n-                    .truncate(true)\n-                    .open(&sink_path)?;\n-                sink.write_all(b\"000000\")?;\n-                let mut sink = BufWriter::with_capacity(5, sink);\n-                sink.write_all(b\"wxyz\")?;\n-                assert_eq!(sink.buffer(), b\"wxyz\");\n-\n-                let copied = crate::io::copy(&mut source, &mut sink)?;\n-                assert_eq!(copied, 10);\n-                assert_eq!(sink.buffer().len(), 0);\n-\n-                let mut sink = sink.into_inner()?;\n-                sink.seek(SeekFrom::Start(0))?;\n-                let mut copied = Vec::new();\n-                sink.read_to_end(&mut copied)?;\n-                assert_eq!(&copied, b\"000000wxyziklmnbcdef\");\n-            };\n-\n-            let rm1 = crate::fs::remove_file(source_path);\n-            let rm2 = crate::fs::remove_file(sink_path);\n-\n-            result.and(rm1).and(rm2)\n-        }\n-    }\n }"}, {"sha": "3a983bc176e487e35a78b1b1828a957cc69c047f", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/67a6059aa5dab924a09194d5490d43da518a40a5/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a6059aa5dab924a09194d5490d43da518a40a5/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=67a6059aa5dab924a09194d5490d43da518a40a5", "patch": "@@ -1,7 +1,7 @@\n use super::{repeat, Cursor, SeekFrom};\n use crate::cmp::{self, min};\n-use crate::io::prelude::*;\n use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{BufRead, BufReader, BufWriter, Read, Result, Seek, Write};\n use crate::ops::Deref;\n \n #[test]\n@@ -492,3 +492,54 @@ fn test_write_all_vectored() {\n         }\n     }\n }\n+\n+#[test]\n+#[cfg(unix)]\n+fn copy_specialization() -> Result<()> {\n+    let path = crate::env::temp_dir();\n+    let source_path = path.join(\"copy-spec.source\");\n+    let sink_path = path.join(\"copy-spec.sink\");\n+\n+    let result: Result<()> = try {\n+        let mut source = crate::fs::OpenOptions::new()\n+            .read(true)\n+            .write(true)\n+            .create(true)\n+            .truncate(true)\n+            .open(&source_path)?;\n+        source.write_all(b\"abcdefghiklmnopqr\")?;\n+        source.seek(SeekFrom::Start(8))?;\n+        let mut source = BufReader::with_capacity(8, source.take(5));\n+        source.fill_buf()?;\n+        assert_eq!(source.buffer(), b\"iklmn\");\n+        source.get_mut().set_limit(6);\n+        source.get_mut().get_mut().seek(SeekFrom::Start(1))?; // \"bcdefg\"\n+        let mut source = source.take(10); // \"iklmnbcdef\"\n+\n+        let mut sink = crate::fs::OpenOptions::new()\n+            .read(true)\n+            .write(true)\n+            .create(true)\n+            .truncate(true)\n+            .open(&sink_path)?;\n+        sink.write_all(b\"000000\")?;\n+        let mut sink = BufWriter::with_capacity(5, sink);\n+        sink.write_all(b\"wxyz\")?;\n+        assert_eq!(sink.buffer(), b\"wxyz\");\n+\n+        let copied = crate::io::copy(&mut source, &mut sink)?;\n+        assert_eq!(copied, 10);\n+        assert_eq!(sink.buffer().len(), 0);\n+\n+        let mut sink = sink.into_inner()?;\n+        sink.seek(SeekFrom::Start(0))?;\n+        let mut copied = Vec::new();\n+        sink.read_to_end(&mut copied)?;\n+        assert_eq!(&copied, b\"000000wxyziklmnbcdef\");\n+    };\n+\n+    let rm1 = crate::fs::remove_file(source_path);\n+    let rm2 = crate::fs::remove_file(sink_path);\n+\n+    result.and(rm1).and(rm2)\n+}"}]}