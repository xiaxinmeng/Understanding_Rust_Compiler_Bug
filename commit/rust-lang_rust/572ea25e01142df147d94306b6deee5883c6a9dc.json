{"sha": "572ea25e01142df147d94306b6deee5883c6a9dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MmVhMjVlMDExNDJkZjE0N2Q5NDMwNmI2ZGVlZTU4ODNjNmE5ZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-29T03:08:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T03:08:56Z"}, "message": "Rollup merge of #78478 - hameerabbasi:const-generics-supertraits, r=lcnr\n\nAdd const generics tests for supertraits + dyn traits.\n\nPartially addresses #78433", "tree": {"sha": "446b8cbdc7cb7281901e67ae712f9938031d1f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446b8cbdc7cb7281901e67ae712f9938031d1f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572ea25e01142df147d94306b6deee5883c6a9dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmjJJCRBK7hj4Ov3rIwAAdHIIAGcHBjTMA7L1yE6bt7IslYR+\nofr6oPtTTx0J+hYjfI2L7B596prpYBZT4MxxYL9y1aVNWHYZc1614VZcrPJ/FmNI\nb2lN8N8mPvq0TFXn4rJi2lu0OuX9ZOy918Y+vtV1G7kBLihjQVhpEY72ea7Gg1BO\ntmlnzOPkJNYoJKYjAvW18WKJax7pjivAsQ1l3FFz7xr3MEIwHMGh1iOloxYZpRfV\nlPgCDZt9kLDRz8PGqgZ7k0MJLY81g61m7jLWx5+m2Oyxgs6Av7cPmOZyr9qx14HV\n2kP9Pz5kjD4KRFOXIhXaZVM6wObYQe4WzhDiV0m20/FrYVo1vXJ7nAzxmp5b/14=\n=o7X2\n-----END PGP SIGNATURE-----\n", "payload": "tree 446b8cbdc7cb7281901e67ae712f9938031d1f0c\nparent 5e3cc6e913e5a0335c455179dd6be54fe84bb0c4\nparent 22060fa0dc0f40652da875fd525e2a898c8584c5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603940936 +0900\ncommitter GitHub <noreply@github.com> 1603940936 +0900\n\nRollup merge of #78478 - hameerabbasi:const-generics-supertraits, r=lcnr\n\nAdd const generics tests for supertraits + dyn traits.\n\nPartially addresses #78433\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572ea25e01142df147d94306b6deee5883c6a9dc", "html_url": "https://github.com/rust-lang/rust/commit/572ea25e01142df147d94306b6deee5883c6a9dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572ea25e01142df147d94306b6deee5883c6a9dc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3cc6e913e5a0335c455179dd6be54fe84bb0c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3cc6e913e5a0335c455179dd6be54fe84bb0c4", "html_url": "https://github.com/rust-lang/rust/commit/5e3cc6e913e5a0335c455179dd6be54fe84bb0c4"}, {"sha": "22060fa0dc0f40652da875fd525e2a898c8584c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/22060fa0dc0f40652da875fd525e2a898c8584c5", "html_url": "https://github.com/rust-lang/rust/commit/22060fa0dc0f40652da875fd525e2a898c8584c5"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "0295255d8099cd63b70b210be853f637fe0c18cd", "filename": "src/test/ui/const-generics/dyn-supertraits.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/572ea25e01142df147d94306b6deee5883c6a9dc/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572ea25e01142df147d94306b6deee5883c6a9dc/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs?ref=572ea25e01142df147d94306b6deee5883c6a9dc", "patch": "@@ -0,0 +1,85 @@\n+// run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Foo<const N: usize> {\n+    fn myfun(&self) -> usize;\n+}\n+trait Bar<const N: usize> : Foo<N> {}\n+trait Baz: Foo<3> {}\n+\n+struct FooType<const N: usize>;\n+struct BarType<const N: usize>;\n+struct BazType;\n+\n+impl<const N: usize> Foo<N> for FooType<N> {\n+    fn myfun(&self) -> usize { N }\n+}\n+impl<const N: usize> Foo<N> for BarType<N> {\n+    fn myfun(&self) -> usize { N + 1 }\n+}\n+impl<const N: usize> Bar<N> for BarType<N> {}\n+impl Foo<3> for BazType {\n+    fn myfun(&self) -> usize { 999 }\n+}\n+impl Baz for BazType {}\n+\n+trait Foz {}\n+trait Boz: Foo<3> + Foz {}\n+trait Bok<const N: usize>: Foo<N> + Foz {}\n+\n+struct FozType;\n+struct BozType;\n+struct BokType<const N: usize>;\n+\n+impl Foz for FozType {}\n+\n+impl Foz for BozType {}\n+impl Foo<3> for BozType {\n+    fn myfun(&self) -> usize { 9999 }\n+}\n+impl Boz for BozType {}\n+\n+impl<const N: usize> Foz for BokType<N> {}\n+impl<const N: usize> Foo<N> for BokType<N> {\n+    fn myfun(&self) -> usize { N + 2 }\n+}\n+impl<const N: usize> Bok<N> for BokType<N> {}\n+\n+fn a<const N: usize>(x: &dyn Foo<N>) -> usize { x.myfun() }\n+fn b(x: &dyn Foo<3>) -> usize { x.myfun() }\n+fn c<T: Bok<N>, const N: usize>(x: T) -> usize { a::<N>(&x) }\n+fn d<T: ?Sized + Foo<3>>(x: &T) -> usize { x.myfun() }\n+fn e(x: &dyn Bar<3>) -> usize { d(x) }\n+\n+fn main() {\n+    let foo = FooType::<3> {};\n+    assert!(a(&foo) == 3);\n+    assert!(b(&foo) == 3);\n+    assert!(d(&foo) == 3);\n+\n+    let bar = BarType::<3> {};\n+    assert!(a(&bar) == 4);\n+    assert!(b(&bar) == 4);\n+    assert!(d(&bar) == 4);\n+    assert!(e(&bar) == 4);\n+\n+    let baz = BazType {};\n+    assert!(a(&baz) == 999);\n+    assert!(b(&baz) == 999);\n+    assert!(d(&baz) == 999);\n+\n+    let boz = BozType {};\n+    assert!(a(&boz) == 9999);\n+    assert!(b(&boz) == 9999);\n+    assert!(d(&boz) == 9999);\n+\n+    let bok = BokType::<3> {};\n+    assert!(a(&bok) == 5);\n+    assert!(b(&bok) == 5);\n+    assert!(d(&bok) == 5);\n+    assert!(c(BokType::<3> {}) == 5);\n+}"}]}