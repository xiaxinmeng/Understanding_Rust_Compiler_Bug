{"sha": "e55d82c8a3a05e433897de4a991366bb2963470d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWQ4MmM4YTNhMDVlNDMzODk3ZGU0YTk5MTM2NmJiMjk2MzQ3MGQ=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-28T08:53:43Z"}, "committer": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-04-04T18:26:59Z"}, "message": "Fix expectations on some ui tests involving FnOnce.", "tree": {"sha": "d22da32fb000b9548f580b6d25b1f08ab940e33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22da32fb000b9548f580b6d25b1f08ab940e33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55d82c8a3a05e433897de4a991366bb2963470d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d82c8a3a05e433897de4a991366bb2963470d", "html_url": "https://github.com/rust-lang/rust/commit/e55d82c8a3a05e433897de4a991366bb2963470d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55d82c8a3a05e433897de4a991366bb2963470d/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219097ecf6026954db100fb00089a2188915615d", "url": "https://api.github.com/repos/rust-lang/rust/commits/219097ecf6026954db100fb00089a2188915615d", "html_url": "https://github.com/rust-lang/rust/commit/219097ecf6026954db100fb00089a2188915615d"}], "stats": {"total": 114, "additions": 42, "deletions": 72}, "files": [{"sha": "df74feb4f0564ec5f77e5c30f0ac546516f9cf3c", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.nll.stderr", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -7,7 +7,7 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n@@ -17,7 +17,7 @@ LL |         f(f(10));\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -28,30 +28,18 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:9\n-   |\n-LL |         f(f(10));\n-   |         ^\n-\n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n-   |\n-LL |         f(f(10));\n-   |           ^\n-\n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -60,7 +48,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -70,7 +58,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -79,7 +67,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0161, E0382, E0499, E0502.\n-For more information about an error, try `rustc --explain E0161`.\n+Some errors occurred: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "d98b272944fdc0ff64e1138d3f0ae83f2983f4cf", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.stderr?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -15,15 +15,15 @@ LL |         f(f(10));\n    |         | second mutable borrow occurs here\n    |         first mutable borrow occurs here\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -34,18 +34,18 @@ LL |         f(f(10));\n    |         | second mutable borrow occurs here\n    |         first mutable borrow occurs here\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n    |\n-   = note: move occurs because `*f` has type `(dyn std::ops::FnOnce(i32) -> i32 + 'static)`, which does not implement the `Copy` trait\n+   = note: move occurs because `f` has type `std::boxed::Box<(dyn std::ops::FnOnce(i32) -> i32 + 'static)>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:28\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:28\n    |\n LL |     double_access(&mut a, &a);\n    |                        -   ^- mutable borrow ends here\n@@ -54,7 +54,7 @@ LL |     double_access(&mut a, &a);\n    |                        mutable borrow occurs here\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:135:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:131:9\n    |\n LL |     a.m(a.i(10));\n    |     -   ^      - mutable borrow ends here\n@@ -63,7 +63,7 @@ LL |     a.m(a.i(10));\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     - ^   - mutable borrow ends here\n@@ -72,7 +72,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     - ^   - mutable borrow ends here\n@@ -81,7 +81,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:172:12\n+  --> $DIR/two-phase-nonrecv-autoref.rs:168:12\n    |\n LL |     v.push(v.len());\n    |     -      ^      - mutable borrow ends here\n@@ -90,7 +90,7 @@ LL |     v.push(v.len());\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:183:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:179:9\n    |\n LL |     s.m(s.i(10));\n    |     -   ^      - mutable borrow ends here\n@@ -99,7 +99,7 @@ LL |     s.m(s.i(10));\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `t` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:188:9\n+  --> $DIR/two-phase-nonrecv-autoref.rs:184:9\n    |\n LL |     t.m(t.i(10));\n    |     -   ^      - mutable borrow ends here"}, {"sha": "223de36f0df312370409b21af17a41250ddbc88b", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -7,17 +7,15 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n-   |                     - consider adding a `Copy` constraint to this type argument\n+   |                                            - move occurs because `f` has type `std::boxed::Box<F>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -28,30 +26,18 @@ LL |         f(f(10));\n    |         first mutable borrow occurs here\n    |         first borrow later used by call\n \n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:9\n-   |\n-LL |         f(f(10));\n-   |         ^\n-\n-error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n-  --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n-   |\n-LL |         f(f(10));\n-   |           ^\n-\n-error[E0382]: use of moved value: `*f`\n+error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:85:11\n    |\n+LL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+   |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n-   |\n-   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:129:27\n+  --> $DIR/two-phase-nonrecv-autoref.rs:125:27\n    |\n LL |     double_access(&mut a, &a);\n    |     ------------- ------  ^^ immutable borrow occurs here\n@@ -60,7 +46,7 @@ LL |     double_access(&mut a, &a);\n    |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:157:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:153:7\n    |\n LL |     i[i[3]] = 4;\n    |     --^----\n@@ -70,7 +56,7 @@ LL |     i[i[3]] = 4;\n    |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-nonrecv-autoref.rs:163:7\n+  --> $DIR/two-phase-nonrecv-autoref.rs:159:7\n    |\n LL |     i[i[3]] = i[4];\n    |     --^----\n@@ -79,7 +65,7 @@ LL |     i[i[3]] = i[4];\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0161, E0382, E0499, E0502.\n-For more information about an error, try `rustc --explain E0161`.\n+Some errors occurred: E0382, E0499, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "1005da052970bf35e6bcccd243a3fd0a7bc7028a", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -67,9 +67,9 @@ fn overloaded_call_traits() {\n     }\n     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n         f(f(10));\n-        //[nll]~^   ERROR use of moved value: `*f`\n-        //[g2p]~^^  ERROR use of moved value: `*f`\n-        //[ast]~^^^ ERROR use of moved value: `*f`\n+        //[nll]~^   ERROR use of moved value: `f`\n+        //[g2p]~^^  ERROR use of moved value: `f`\n+        //[ast]~^^^ ERROR use of moved value: `f`\n     }\n \n     fn twice_ten_om(f: &mut FnMut(i32) -> i32) {\n@@ -83,13 +83,9 @@ fn overloaded_call_traits() {\n     }\n     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n         f(f(10));\n-        //[nll]~^          ERROR cannot move a value of type\n-        //[nll]~^^         ERROR cannot move a value of type\n-        //[nll]~^^^        ERROR use of moved value: `*f`\n-        //[g2p]~^^^^       ERROR cannot move a value of type\n-        //[g2p]~^^^^^      ERROR cannot move a value of type\n-        //[g2p]~^^^^^^     ERROR use of moved value: `*f`\n-        //[ast]~^^^^^^^    ERROR use of moved value: `*f`\n+        //[nll]~^   ERROR use of moved value: `f`\n+        //[g2p]~^^  ERROR use of moved value: `f`\n+        //[ast]~^^^ ERROR use of moved value: `f`\n     }\n \n     twice_ten_sm(&mut |x| x + 1);"}, {"sha": "4e2ab59f8224520d82e9f830a22852423e086741", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -18,7 +18,7 @@ LL | fn test2<F>(f: &F) where F: FnMut() {\n LL |     (*f)();\n    |     ^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow `*f.f` as mutable, as it is behind a `&` reference\n+error[E0596]: cannot borrow `f.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n    |\n LL | fn test4(f: &Test) {"}, {"sha": "f246f1118bf4e6584ff40b6e8cd5d3b02b890d65", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -32,7 +32,7 @@ fn test3<F>(f: &mut F) where F: FnMut() {\n \n fn test4(f: &Test) {\n     f.f.call_mut(())\n-    //~^ ERROR: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n+    //~^ ERROR: cannot borrow field `f.f` of immutable binding as mutable\n }\n \n fn test5(f: &mut Test) {"}, {"sha": "a61ee8334afff1da6aad1e3815c22fb1d9a4ef7e", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55d82c8a3a05e433897de4a991366bb2963470d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=e55d82c8a3a05e433897de4a991366bb2963470d", "patch": "@@ -19,13 +19,13 @@ LL | fn test2<F>(f: &F) where F: FnMut() {\n LL |     (*f)();\n    |     ^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow `Box` content `*f.f` of immutable binding as mutable\n+error[E0596]: cannot borrow field `f.f` of immutable binding as mutable\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n    |\n LL | fn test4(f: &Test) {\n    |             ----- use `&mut Test` here to make mutable\n LL |     f.f.call_mut(())\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^ cannot mutably borrow field of immutable binding\n \n error[E0504]: cannot move `f` into closure because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:56:13"}]}