{"sha": "84861101eca12942b42f36f8adb18cfc74515431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODYxMTAxZWNhMTI5NDJiNDJmMzZmOGFkYjE4Y2ZjNzQ1MTU0MzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-01T13:14:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-01T13:14:47Z"}, "message": "rustc: print out filename/line-number when a borrow fails", "tree": {"sha": "b62be1804f0f6fbc4a8015dba02987e8f2f23781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62be1804f0f6fbc4a8015dba02987e8f2f23781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84861101eca12942b42f36f8adb18cfc74515431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84861101eca12942b42f36f8adb18cfc74515431", "html_url": "https://github.com/rust-lang/rust/commit/84861101eca12942b42f36f8adb18cfc74515431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84861101eca12942b42f36f8adb18cfc74515431/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96c65afc88b159b9ae76136f8d2695574e273f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96c65afc88b159b9ae76136f8d2695574e273f0", "html_url": "https://github.com/rust-lang/rust/commit/d96c65afc88b159b9ae76136f8d2695574e273f0"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "c5062f25ea540eac852f3d73f8f343f3eb8f7532", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=84861101eca12942b42f36f8adb18cfc74515431", "patch": "@@ -53,20 +53,18 @@ pub fn fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n \n #[lang=\"fail_bounds_check\"]\n pub fn fail_bounds_check(file: *c_char, line: size_t,\n-                                index: size_t, len: size_t) {\n+                         index: size_t, len: size_t) {\n     let msg = fmt!(\"index out of bounds: the len is %d but the index is %d\",\n                     len as int, index as int);\n     do str::as_buf(msg) |p, _len| {\n         fail_(p as *c_char, file, line);\n     }\n }\n \n-pub fn fail_borrowed() {\n+pub fn fail_borrowed(file: *c_char, line: size_t) {\n     let msg = \"borrowed\";\n     do str::as_buf(msg) |msg_p, _| {\n-        do str::as_buf(\"???\") |file_p, _| {\n-            fail_(msg_p as *c_char, file_p as *c_char, 0);\n-        }\n+        fail_(msg_p as *c_char, file, line);\n     }\n }\n \n@@ -160,12 +158,27 @@ pub unsafe fn return_to_mut(a: *u8) {\n     }\n }\n \n+#[cfg(stage0)]\n #[lang=\"check_not_borrowed\"]\n #[inline(always)]\n pub unsafe fn check_not_borrowed(a: *u8) {\n     let a: *mut BoxRepr = transmute(a);\n     if ((*a).header.ref_count & FROZEN_BIT) != 0 {\n-        fail_borrowed();\n+        do str::as_buf(\"XXX\") |file_p, _| {\n+            fail_borrowed(file_p as *c_char, 0);\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+#[lang=\"check_not_borrowed\"]\n+#[inline(always)]\n+pub unsafe fn check_not_borrowed(a: *u8,\n+                                 file: *c_char,\n+                                 line: size_t) {\n+    let a: *mut BoxRepr = transmute(a);\n+    if ((*a).header.ref_count & FROZEN_BIT) != 0 {\n+        fail_borrowed(file, line);\n     }\n }\n "}, {"sha": "7ac6dfd3ec3859e4a76d4ca6fbf9b9e0ac37ff08", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=84861101eca12942b42f36f8adb18cfc74515431", "patch": "@@ -26,7 +26,6 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr};\n \n-use core::hashmap::HashSet;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util::id_range;"}, {"sha": "03c81cad50e11e45b4557d519191d0e4d8d03429", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=84861101eca12942b42f36f8adb18cfc74515431", "patch": "@@ -105,6 +105,7 @@ use util::ppaux::ty_to_str;\n use core::container::Set; // XXX: this should not be necessary\n use core::to_bytes;\n use syntax::ast;\n+use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n \n #[deriving(Eq)]\n@@ -556,17 +557,24 @@ pub impl Datum {\n         }\n     }\n \n-    fn perform_write_guard(&self, bcx: block) -> block {\n+    fn perform_write_guard(&self, bcx: block, span: span) -> block {\n         // Create scratch space, but do not root it.\n         let llval = match self.mode {\n             ByValue => self.val,\n             ByRef => Load(bcx, self.val),\n         };\n \n+        let loc = bcx.sess().parse_sess.cm.lookup_char_pos(span.lo);\n+        let line = C_int(bcx.ccx(), loc.line as int);\n+        let filename_cstr = C_cstr(bcx.ccx(), @/*bad*/copy loc.file.name);\n+        let filename = PointerCast(bcx, filename_cstr, T_ptr(T_i8()));\n+\n         callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.check_not_borrowed_fn(),\n-            ~[ PointerCast(bcx, llval, T_ptr(T_i8())) ],\n+            ~[PointerCast(bcx, llval, T_ptr(T_i8())),\n+              filename,\n+              line],\n             expr::Ignore)\n     }\n \n@@ -621,6 +629,7 @@ pub impl Datum {\n \n     fn try_deref(&self,\n         bcx: block,            // block wherein to generate insn's\n+        span: span,            // location where deref occurs\n         expr_id: ast::node_id, // id of expr being deref'd\n         derefs: uint,          // number of times deref'd already\n         is_auto: bool)         // if true, only deref if auto-derefable\n@@ -645,7 +654,7 @@ pub impl Datum {\n         //\n         // (Note: write-guarded values are always boxes)\n         let bcx = if ccx.maps.write_guard_map.contains(&key) {\n-            self.perform_write_guard(bcx)\n+            self.perform_write_guard(bcx, span)\n         } else { bcx };\n \n         match ty::get(self.ty).sty {\n@@ -759,7 +768,7 @@ pub impl Datum {\n              expr: @ast::expr,  // the expression whose value is being deref'd\n              derefs: uint)\n           -> DatumBlock {\n-        match self.try_deref(bcx, expr.id, derefs, false) {\n+        match self.try_deref(bcx, expr.span, expr.id, derefs, false) {\n             (Some(lvres), bcx) => DatumBlock { bcx: bcx, datum: lvres },\n             (None, _) => {\n                 bcx.ccx().sess.span_bug(\n@@ -769,6 +778,7 @@ pub impl Datum {\n     }\n \n     fn autoderef(&self, bcx: block,\n+                 span: span,\n                  expr_id: ast::node_id,\n                  max: uint)\n               -> DatumBlock {\n@@ -783,7 +793,7 @@ pub impl Datum {\n         let mut bcx = bcx;\n         while derefs < max {\n             derefs += 1u;\n-            match datum.try_deref(bcx, expr_id, derefs, true) {\n+            match datum.try_deref(bcx, span, expr_id, derefs, true) {\n                 (None, new_bcx) => { bcx = new_bcx; break }\n                 (Some(datum_deref), new_bcx) => {\n                     datum = datum_deref;"}, {"sha": "bc44d7de983421c227fbfe33dfacf3813dfbef12", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=84861101eca12942b42f36f8adb18cfc74515431", "patch": "@@ -205,7 +205,7 @@ pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n \n             if adj.autoderefs > 0 {\n                 let DatumBlock { bcx: new_bcx, datum: new_datum } =\n-                    datum.autoderef(bcx, expr.id, adj.autoderefs);\n+                    datum.autoderef(bcx, expr.span, expr.id, adj.autoderefs);\n                 datum = new_datum;\n                 bcx = new_bcx;\n             }"}, {"sha": "1ee651ede7510650a49b7db6a886ca7b9b1b2c9e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84861101eca12942b42f36f8adb18cfc74515431/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=84861101eca12942b42f36f8adb18cfc74515431", "patch": "@@ -3723,7 +3723,7 @@ pub impl Parser {\n                                first_item_attrs: ~[attribute])\n                             -> foreign_mod {\n         let ParsedItemsAndViewItems {\n-            attrs_remaining: attrs_remaining,\n+            attrs_remaining: _,\n             view_items: view_items,\n             items: _,\n             foreign_items: foreign_items"}]}