{"sha": "8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "node_id": "C_kwDOAAsO6NoAKDhlNDljODQ3NDAwYjBlYzQ3ZDUwMWE3MmUzYzBhZDk1ZjgxYjVmZTk", "commit": {"author": {"name": "Oleksii Lozovskyi", "email": "me@ilammy.net", "date": "2022-10-02T01:45:54Z"}, "committer": {"name": "Oleksii Lozovskyi", "email": "me@ilammy.net", "date": "2023-02-09T03:28:01Z"}, "message": "XRay support flag in TargetOptions\n\nSpecify where XRay is supported. I only test ARM64 and x86_64, but hey\nthose others should work too, right? LLVM documentation says that MIPS\nand PPC are also supported, but I don't have the hardware, so I won't\npretend. Naturally, more targets can be added later with more testing.", "tree": {"sha": "b99a0578e80592ebc905436734a7b6d32bb3ffda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99a0578e80592ebc905436734a7b6d32bb3ffda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "html_url": "https://github.com/rust-lang/rust/commit/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/comments", "author": {"login": "ilammy", "id": 1256587, "node_id": "MDQ6VXNlcjEyNTY1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1256587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilammy", "html_url": "https://github.com/ilammy", "followers_url": "https://api.github.com/users/ilammy/followers", "following_url": "https://api.github.com/users/ilammy/following{/other_user}", "gists_url": "https://api.github.com/users/ilammy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilammy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilammy/subscriptions", "organizations_url": "https://api.github.com/users/ilammy/orgs", "repos_url": "https://api.github.com/users/ilammy/repos", "events_url": "https://api.github.com/users/ilammy/events{/privacy}", "received_events_url": "https://api.github.com/users/ilammy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ilammy", "id": 1256587, "node_id": "MDQ6VXNlcjEyNTY1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1256587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilammy", "html_url": "https://github.com/ilammy", "followers_url": "https://api.github.com/users/ilammy/followers", "following_url": "https://api.github.com/users/ilammy/following{/other_user}", "gists_url": "https://api.github.com/users/ilammy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilammy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilammy/subscriptions", "organizations_url": "https://api.github.com/users/ilammy/orgs", "repos_url": "https://api.github.com/users/ilammy/repos", "events_url": "https://api.github.com/users/ilammy/events{/privacy}", "received_events_url": "https://api.github.com/users/ilammy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fef658ffeb0fdc858d6c111a992b570ed73c951", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fef658ffeb0fdc858d6c111a992b570ed73c951", "html_url": "https://github.com/rust-lang/rust/commit/0fef658ffeb0fdc858d6c111a992b570ed73c951"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "daa946ccd519cc1a3bf9eb9cd430092558b1c1c7", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::MEMTAG\n                 | SanitizerSet::SHADOWCALLSTACK\n                 | SanitizerSet::ADDRESS,\n+            supports_xray: true,\n             ..super::android_base::opts()\n         },\n     }"}, {"sha": "36d54f1d7cc5c681a0fba9a0077f9509064556de", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::MEMTAG\n                 | SanitizerSet::THREAD\n                 | SanitizerSet::HWADDRESS,\n+            supports_xray: true,\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "9c299fed6be16c573a0039b9fc355aa12765968c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".into(),"}, {"sha": "bc1920e34249a25ee97a242cb9b2d51079738e57", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -1718,6 +1718,9 @@ pub struct TargetOptions {\n     /// The ABI of entry function.\n     /// Default value is `Conv::C`, i.e. C call convention\n     pub entry_abi: Conv,\n+\n+    /// Whether the target supports XRay instrumentation.\n+    pub supports_xray: bool,\n }\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n@@ -1937,6 +1940,7 @@ impl Default for TargetOptions {\n             supports_stack_protector: true,\n             entry_name: \"main\".into(),\n             entry_abi: Conv::C,\n+            supports_xray: false,\n         }\n     }\n }\n@@ -2592,6 +2596,7 @@ impl Target {\n         key!(supports_stack_protector, bool);\n         key!(entry_name);\n         key!(entry_abi, Conv)?;\n+        key!(supports_xray, bool);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2845,6 +2850,7 @@ impl ToJson for Target {\n         target_option_val!(supports_stack_protector);\n         target_option_val!(entry_name);\n         target_option_val!(entry_abi);\n+        target_option_val!(supports_xray);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());"}, {"sha": "a3bdb5f5465b07a93f9fc2823e9473a67b437894", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".into(),"}, {"sha": "b41e5842aad1303f81b995a9f6aa2e86b1094964", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".into(),"}, {"sha": "9af1049b870269b161b8804841df6e938f3adde1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -12,6 +12,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".into(),"}, {"sha": "bf4cf7d7becadb9891d3581e710df3f4147eb371", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -12,6 +12,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".into(),"}, {"sha": "74c434935ba88078747ac851dc336cc0b2434493", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-netbsd\".into(),"}, {"sha": "8e4d42a0acaf35660cd5259d3059d56ccf86f47f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e49c847400b0ec47d501a72e3c0ad95f81b5fe9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=8e49c847400b0ec47d501a72e3c0ad95f81b5fe9", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".into(),"}]}