{"sha": "a9a1392b2c1fece9447a2b834896b4316c5dbfff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTEzOTJiMmMxZmVjZTk0NDdhMmI4MzQ4OTZiNDMxNmM1ZGJmZmY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-21T23:03:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-21T23:11:34Z"}, "message": "Instantiate function preconditions inside the function body\n\nso that if we have a function like:\nf(...) : p(x) {\n  ...\n}\n\np(x) is true inside the body of f.\n\nCloses #694.", "tree": {"sha": "e6f912fef11732b31e86b685c48938c0d9b8a895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f912fef11732b31e86b685c48938c0d9b8a895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a1392b2c1fece9447a2b834896b4316c5dbfff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a1392b2c1fece9447a2b834896b4316c5dbfff", "html_url": "https://github.com/rust-lang/rust/commit/a9a1392b2c1fece9447a2b834896b4316c5dbfff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a1392b2c1fece9447a2b834896b4316c5dbfff/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2261ddc717485dc06e4dbd255947549816f37e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2261ddc717485dc06e4dbd255947549816f37e4b", "html_url": "https://github.com/rust-lang/rust/commit/2261ddc717485dc06e4dbd255947549816f37e4b"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "c2a69c4426c0995263393f328973508e6df101d1", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=a9a1392b2c1fece9447a2b834896b4316c5dbfff", "patch": "@@ -1053,6 +1053,29 @@ fn op_to_oper_ty(init_op io) -> oper_type {\n fn do_nothing[T](&_fn f, &ty_param[] tp, &span sp, &fn_ident i,\n               node_id iid, &T cx, &visit::vt[T] v) {\n }\n+\n+\n+fn args_to_constr_args(&span sp, &arg[] args) -> (@constr_arg_use)[] {\n+    let (@constr_arg_use)[] actuals = ~[];\n+    for (arg a in args) {\n+        actuals += ~[@respan(sp, carg_ident(tup(a.ident, a.id)))];\n+    }\n+    ret actuals;\n+}\n+\n+fn ast_constr_to_ts_constr(&ty::ctxt tcx, &arg[] args, &@constr c)\n+    -> tsconstr {\n+    auto tconstr = ty::ast_constr_to_constr(tcx, c);\n+    ret npred(tconstr.node.path, tconstr.node.id,\n+               args_to_constr_args(tconstr.span, args));\n+}\n+\n+fn ast_constr_to_sp_constr(&ty::ctxt tcx, &arg[] args, &@constr c)\n+    -> sp_constr {\n+    auto tconstr = ast_constr_to_ts_constr(tcx, args, c);\n+    ret respan(c.span, tconstr);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "e3538d1527c6c10ccd85fd4b9ab3fb60304a9b83", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=a9a1392b2c1fece9447a2b834896b4316c5dbfff", "patch": "@@ -233,6 +233,10 @@ fn set_in_poststate_ident(&fn_ctxt fcx, &node_id id, &ident ident,\n     ret set_in_poststate_(bit_num(fcx, ninit(id, ident)), t);\n }\n \n+fn set_in_prestate_constr(&fn_ctxt fcx, &tsconstr c, &prestate t) -> bool {\n+    ret set_in_poststate_(bit_num(fcx, c), t);\n+}\n+\n fn clear_in_poststate_ident(&fn_ctxt fcx, &node_id id, &ident ident,\n                             &node_id parent) -> bool {\n     ret kill_poststate(fcx, parent, ninit(id, ident));"}, {"sha": "8d4fc6cc1199d82ce14ae2a8e048a86faa40e10d", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=a9a1392b2c1fece9447a2b834896b4316c5dbfff", "patch": "@@ -1,4 +1,5 @@\n-\n+import std::uint;\n+import std::int;\n import std::ivec;\n import syntax::ast::*;\n import util::ppaux::fn_ident_to_string;\n@@ -96,6 +97,7 @@ fn add_constraint(&ty::ctxt tcx, sp_constr c, uint next, constr_map tbl) ->\n    to a bit number in the precondition/postcondition vectors */\n fn mk_fn_info(&crate_ctxt ccx, &_fn f, &ty_param[] tp,\n               &span f_sp, &fn_ident f_name, node_id id) {\n+    auto name = fn_ident_to_string(id, f_name);\n     auto res_map = @new_def_hash[constraint]();\n     let uint next = 0u;\n \n@@ -106,15 +108,23 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &ty_param[] tp,\n     for (sp_constr c in { *cx.cs }) {\n         next = add_constraint(cx.tcx, c, next, res_map);\n     }\n+    /* if this function has any constraints, instantiate them to the\n+       argument names and add them */\n+    auto sc;\n+    for (@constr c in f.decl.constraints) {\n+        sc = ast_constr_to_sp_constr(cx.tcx, f.decl.inputs, c);\n+        next = add_constraint(cx.tcx, sc, next, res_map);\n+    }\n+\n     /* add a pseudo-entry for the function's return value\n        we can safely use the function's name itself for this purpose */\n \n-    auto name = fn_ident_to_string(id, f_name);\n     add_constraint(cx.tcx, respan(f_sp, ninit(id, name)), next, res_map);\n     let @mutable node_id[] v = @mutable ~[];\n     auto rslt =\n         rec(constrs=res_map,\n-            num_constraints=ivec::len(*cx.cs) + 1u,\n+            num_constraints=ivec::len(*cx.cs) + ivec::len(f.decl.constraints)\n+                            + 1u,\n             cf=f.decl.cf,\n             used_vars=v);\n     ccx.fm.insert(id, rslt);"}, {"sha": "c91687be0f8b991b34394086e0ccceb4e91baffe", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=a9a1392b2c1fece9447a2b834896b4316c5dbfff", "patch": "@@ -1,3 +1,4 @@\n+import syntax::print::pprust::path_to_str;\n import std::ivec;\n import std::option;\n import std::option::get;\n@@ -25,6 +26,8 @@ import tritv::tritv_clone;\n import tritv::tritv_set;\n import tritv::ttrue;\n \n+import bitvectors::*;\n+/*\n import bitvectors::set_in_poststate_ident;\n import bitvectors::clear_in_poststate_expr;\n import bitvectors::clear_in_prestate_ident;\n@@ -33,6 +36,7 @@ import bitvectors::gen_poststate;\n import bitvectors::kill_poststate;\n import bitvectors::clear_in_poststate_ident;\n import bitvectors::intersect_states;\n+*/\n import syntax::ast::*;\n import middle::ty::expr_ty;\n import middle::ty::type_is_nil;\n@@ -731,9 +735,15 @@ fn find_pre_post_state_fn(&fn_ctxt fcx, &_fn f) -> bool {\n     auto num_local_vars = num_constraints(fcx.enclosing);\n     // make sure the return bit starts out False\n     clear_in_prestate_ident(fcx, fcx.id, fcx.name, f.body.node.id);\n-    auto changed =\n-        find_pre_post_state_block(fcx, block_prestate(fcx.ccx, f.body),\n-                                  f.body);\n+    // Instantiate any constraints on the arguments so we can use them\n+    auto block_pre = block_prestate(fcx.ccx, f.body);\n+    auto tsc;\n+    for (@constr c in f.decl.constraints) {\n+        tsc = ast_constr_to_ts_constr(fcx.ccx.tcx, f.decl.inputs, c);\n+        set_in_prestate_constr(fcx, tsc, block_pre);\n+    }\n+\n+    auto changed = find_pre_post_state_block(fcx, block_pre, f.body);\n     // Treat the tail expression as a return statement\n \n     alt (f.body.node.expr) {"}, {"sha": "86dacb2f8e0f184a03371b3f7fcc5d2478c8bd80", "filename": "src/test/run-pass/typestate-transitive.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1392b2c1fece9447a2b834896b4316c5dbfff/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypestate-transitive.rs?ref=a9a1392b2c1fece9447a2b834896b4316c5dbfff", "patch": "@@ -0,0 +1,8 @@\n+pred p(int i) -> bool { true }\n+\n+fn f(int i) : p(i) -> int { i }\n+\n+fn g(int i) : p(i) -> int { f(i) }\n+\n+fn main() {\n+}"}]}