{"sha": "d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTkxNDhjMmUwN2JlOGMyZDY1ZDg3ZDg0YTg4ZTlmZDVhNjNjMzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T20:13:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Rustfmt debuginfo", "tree": {"sha": "4ffe41c795dc86818ac316a7354c4dec23661f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ffe41c795dc86818ac316a7354c4dec23661f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "html_url": "https://github.com/rust-lang/rust/commit/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c6ce87d239c0599c87e73481983b9ec6680cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c6ce87d239c0599c87e73481983b9ec6680cb1", "html_url": "https://github.com/rust-lang/rust/commit/c5c6ce87d239c0599c87e73481983b9ec6680cb1"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "174cf0b93fe4fcf3286ebb5e81ab3c1df86c0a36", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "patch": "@@ -5,8 +5,7 @@ use syntax::source_map::FileName;\n use cranelift::codegen::binemit::CodeOffset;\n \n use gimli::write::{\n-    Address, AttributeValue, FileId, LineProgram, LineString,\n-    LineStringTable, Range, UnitEntryId,\n+    Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, Range, UnitEntryId,\n };\n \n fn line_program_add_file(\n@@ -131,11 +130,15 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n         entry.set(\n             gimli::DW_AT_low_pc,\n-            AttributeValue::Address(Address::Symbol { symbol: self.symbol, addend: 0 }),\n+            AttributeValue::Address(Address::Symbol {\n+                symbol: self.symbol,\n+                addend: 0,\n+            }),\n         );\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(end as u64));\n \n-        self.debug_context.emit_location(self.entry_id, self.mir.span);\n+        self.debug_context\n+            .emit_location(self.entry_id, self.mir.span);\n \n         end\n     }"}, {"sha": "e8b3cbe36eb4d849059fc626ae95aa5d54b448f1", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 44, "deletions": 47, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "patch": "@@ -7,8 +7,8 @@ use cranelift::codegen::ir::{StackSlots, ValueLoc};\n use cranelift::codegen::isa::RegUnit;\n \n use gimli::write::{\n-    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString,\n-    Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n+    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString, Location,\n+    LocationList, Range, RangeList, UnitEntryId, Writer,\n };\n use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, X86_64};\n \n@@ -105,9 +105,7 @@ impl<'tcx> DebugContext<'tcx> {\n             return *type_id;\n         }\n \n-        let new_entry = |dwarf: &mut DwarfUnit, tag| {\n-            dwarf.unit.add(dwarf.unit.root(), tag)\n-        };\n+        let new_entry = |dwarf: &mut DwarfUnit, tag| dwarf.unit.add(dwarf.unit.root(), tag);\n \n         let primtive = |dwarf: &mut DwarfUnit, ate| {\n             let type_id = new_entry(dwarf, gimli::DW_TAG_base_type);\n@@ -122,7 +120,11 @@ impl<'tcx> DebugContext<'tcx> {\n             ty::Uint(_) => primtive(&mut self.dwarf, gimli::DW_ATE_unsigned),\n             ty::Int(_) => primtive(&mut self.dwarf, gimli::DW_ATE_signed),\n             ty::Float(_) => primtive(&mut self.dwarf, gimli::DW_ATE_float),\n-            ty::Ref(_, pointee_ty, mutbl) | ty::RawPtr(ty::TypeAndMut { ty: pointee_ty, mutbl }) => {\n+            ty::Ref(_, pointee_ty, mutbl)\n+            | ty::RawPtr(ty::TypeAndMut {\n+                ty: pointee_ty,\n+                mutbl,\n+            }) => {\n                 let type_id = new_entry(&mut self.dwarf, gimli::DW_TAG_pointer_type);\n \n                 // Ensure that type is inserted before recursing to avoid duplicates\n@@ -145,7 +147,10 @@ impl<'tcx> DebugContext<'tcx> {\n         let type_entry = self.dwarf.unit.get_mut(type_id);\n \n         type_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n-        type_entry.set(gimli::DW_AT_byte_size, AttributeValue::Udata(layout.size.bytes()));\n+        type_entry.set(\n+            gimli::DW_AT_byte_size,\n+            AttributeValue::Udata(layout.size.bytes()),\n+        );\n \n         self.types.insert(ty, type_id);\n \n@@ -219,14 +224,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             .add(self.entry_id, gimli::DW_TAG_variable);\n         let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n \n-        var_entry.set(\n-            gimli::DW_AT_name,\n-            AttributeValue::String(name.into_bytes()),\n-        );\n-        var_entry.set(\n-            gimli::DW_AT_type,\n-            AttributeValue::ThisUnitEntryRef(dw_ty),\n-        );\n+        var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n+        var_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(dw_ty));\n \n         var_id\n     }\n@@ -250,38 +249,36 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 length: end as u64,\n             });\n \n-        {\n-            let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n-\n-            for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n-                let var_id = self.define_local(mir::Local::from_u32(value_label.as_u32()));\n-\n-                let loc_list = LocationList(\n-                    value_loc_ranges\n-                        .iter()\n-                        .map(|value_loc_range| {\n-                            Location::StartEnd {\n-                                begin: Address::Symbol {\n-                                    symbol: self.symbol,\n-                                    addend: i64::from(value_loc_range.start),\n-                                },\n-                                end: Address::Symbol {\n-                                    symbol: self.symbol,\n-                                    addend: i64::from(value_loc_range.end),\n-                                },\n-                                data: Expression(translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap()),\n-                            }\n-                        })\n-                        .collect(),\n-                );\n-                let loc_list_id = self.debug_context.dwarf.unit.locations.add(loc_list);\n-\n-                let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n-                var_entry.set(\n-                    gimli::DW_AT_location,\n-                    AttributeValue::LocationListRef(loc_list_id),\n-                );\n-            }\n+        let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n+\n+        for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n+            let var_id = self.define_local(mir::Local::from_u32(value_label.as_u32()));\n+\n+            let loc_list = LocationList(\n+                value_loc_ranges\n+                    .iter()\n+                    .map(|value_loc_range| Location::StartEnd {\n+                        begin: Address::Symbol {\n+                            symbol: self.symbol,\n+                            addend: i64::from(value_loc_range.start),\n+                        },\n+                        end: Address::Symbol {\n+                            symbol: self.symbol,\n+                            addend: i64::from(value_loc_range.end),\n+                        },\n+                        data: Expression(\n+                            translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap(),\n+                        ),\n+                    })\n+                    .collect(),\n+            );\n+            let loc_list_id = self.debug_context.dwarf.unit.locations.add(loc_list);\n+\n+            let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n+            var_entry.set(\n+                gimli::DW_AT_location,\n+                AttributeValue::LocationListRef(loc_list_id),\n+            );\n         }\n     }\n }"}]}