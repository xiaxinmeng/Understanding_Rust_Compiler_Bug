{"sha": "eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "node_id": "C_kwDOAAsO6NoAKGViMzk2M2IyMmVjOGVjN2U5OWFlYjFhMmM3YWNiNTY4OWEyZjc2YzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T09:37:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T09:37:00Z"}, "message": "Auto merge of #13817 - WaffleLapkin:hide_adjustment_hints_outside_of_unsafe, r=Veykril\n\nfeat: Add an option to hide adjustment hints outside of `unsafe` blocks and functions\n\nAs the title suggests: this PR adds an option (namely `rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe`) that allows to hide adjustment hints outside of `unsafe` blocks and functions:\n\n![2022-12-21_23-11](https://user-images.githubusercontent.com/38225716/208986376-d607de62-8290-4e16-b7fe-15b762dc5f60.png)\n\nRequested by `@BoxyUwU` <3", "tree": {"sha": "00b5b12b410e0ee25ca156a5018c393765e41916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b5b12b410e0ee25ca156a5018c393765e41916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "html_url": "https://github.com/rust-lang/rust/commit/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49", "html_url": "https://github.com/rust-lang/rust/commit/271f7b44d3d71db2ec2d0cd1a8a59aa16f902d49"}, {"sha": "1038db5f1d79155860bd9e1487c0df34ec542b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/1038db5f1d79155860bd9e1487c0df34ec542b39", "html_url": "https://github.com/rust-lang/rust/commit/1038db5f1d79155860bd9e1487c0df34ec542b39"}], "stats": {"total": 189, "additions": 182, "deletions": 7}, "files": [{"sha": "aabfd170487ecefed7bbe98e50e900fd9871208f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -74,7 +74,7 @@ use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{impl_from, never};\n use syntax::{\n-    ast::{self, Expr, HasAttrs as _, HasDocComments, HasName},\n+    ast::{self, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxNodePtr, TextRange, T,\n };\n \n@@ -1082,7 +1082,7 @@ impl Variant {\n         db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n     }\n \n-    pub fn value(self, db: &dyn HirDatabase) -> Option<Expr> {\n+    pub fn value(self, db: &dyn HirDatabase) -> Option<ast::Expr> {\n         self.source(db)?.value.expr()\n     }\n "}, {"sha": "569c2bfb9e6a6e4cf84148049b02ef4ca3f64d0d", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -5,11 +5,14 @@ mod source_to_def;\n use std::{cell::RefCell, fmt, iter, mem, ops};\n \n use base_db::{FileId, FileRange};\n+use either::Either;\n use hir_def::{\n-    body, macro_id_to_def_id,\n+    body,\n+    expr::Expr,\n+    macro_id_to_def_id,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     type_ref::Mutability,\n-    AsMacroCall, FunctionId, MacroId, TraitId, VariantId,\n+    AsMacroCall, DefWithBodyId, FunctionId, MacroId, TraitId, VariantId,\n };\n use hir_expand::{\n     db::AstDatabase,\n@@ -438,8 +441,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn to_def<T: ToDef>(&self, src: &T) -> Option<T::Def> {\n-        let src = self.imp.find_file(src.syntax()).with_value(src).cloned();\n-        T::to_def(&self.imp, src)\n+        self.imp.to_def(src)\n     }\n \n     pub fn to_module_def(&self, file: FileId) -> Option<Module> {\n@@ -481,6 +483,11 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n         self.imp.is_unsafe_ident_pat(ident_pat)\n     }\n+\n+    /// Returns `true` if the `node` is inside an `unsafe` context.\n+    pub fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n+        self.imp.is_inside_unsafe(expr)\n+    }\n }\n \n impl<'db> SemanticsImpl<'db> {\n@@ -1243,6 +1250,11 @@ impl<'db> SemanticsImpl<'db> {\n         f(&mut ctx)\n     }\n \n+    fn to_def<T: ToDef>(&self, src: &T) -> Option<T::Def> {\n+        let src = self.find_file(src.syntax()).with_value(src).cloned();\n+        T::to_def(&self, src)\n+    }\n+\n     fn to_module_def(&self, file: FileId) -> impl Iterator<Item = Module> {\n         self.with_ctx(|ctx| ctx.file_to_def(file)).into_iter().map(Module::from)\n     }\n@@ -1458,6 +1470,56 @@ impl<'db> SemanticsImpl<'db> {\n             .map(|ty| ty.original.is_packed(self.db))\n             .unwrap_or(false)\n     }\n+\n+    fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n+        let item_or_variant = |ancestor: SyntaxNode| {\n+            if ast::Item::can_cast(ancestor.kind()) {\n+                ast::Item::cast(ancestor).map(Either::Left)\n+            } else {\n+                ast::Variant::cast(ancestor).map(Either::Right)\n+            }\n+        };\n+        let Some(enclosing_item) = expr.syntax().ancestors().find_map(item_or_variant) else { return false };\n+\n+        let def = match &enclosing_item {\n+            Either::Left(ast::Item::Fn(it)) if it.unsafe_token().is_some() => return true,\n+            Either::Left(ast::Item::Fn(it)) => {\n+                self.to_def(it).map(<_>::into).map(DefWithBodyId::FunctionId)\n+            }\n+            Either::Left(ast::Item::Const(it)) => {\n+                self.to_def(it).map(<_>::into).map(DefWithBodyId::ConstId)\n+            }\n+            Either::Left(ast::Item::Static(it)) => {\n+                self.to_def(it).map(<_>::into).map(DefWithBodyId::StaticId)\n+            }\n+            Either::Left(_) => None,\n+            Either::Right(it) => self.to_def(it).map(<_>::into).map(DefWithBodyId::VariantId),\n+        };\n+        let Some(def) = def else { return false };\n+        let enclosing_node = enclosing_item.as_ref().either(|i| i.syntax(), |v| v.syntax());\n+\n+        let (body, source_map) = self.db.body_with_source_map(def);\n+\n+        let file_id = self.find_file(expr.syntax()).file_id;\n+\n+        let Some(mut parent) = expr.syntax().parent() else { return false };\n+        loop {\n+            if &parent == enclosing_node {\n+                break false;\n+            }\n+\n+            if let Some(parent) = ast::Expr::cast(parent.clone()) {\n+                if let Some(expr_id) = source_map.node_expr(InFile { file_id, value: &parent }) {\n+                    if let Expr::Unsafe { .. } = body[expr_id] {\n+                        break true;\n+                    }\n+                }\n+            }\n+\n+            let Some(parent_) = parent.parent() else { break false };\n+            parent = parent_;\n+        }\n+    }\n }\n \n fn macro_call_to_macro_id("}, {"sha": "eb91d5cec1ecbe02924652631fe93d057ab98a71", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -33,6 +33,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n+    pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n@@ -433,6 +434,7 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n         adjustment_hints: AdjustmentHints::Never,\n+        adjustment_hints_hide_outside_unsafe: false,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n         hide_closure_initialization_hints: false,"}, {"sha": "1c13f31cf24f41294379eef41f348aa760a94669", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -5,7 +5,6 @@\n //! ```\n use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n use ide_db::RootDatabase;\n-\n use syntax::ast::{self, AstNode};\n \n use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n@@ -16,6 +15,10 @@ pub(super) fn hints(\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n+    if config.adjustment_hints_hide_outside_unsafe && !sema.is_inside_unsafe(expr) {\n+        return None;\n+    }\n+\n     if config.adjustment_hints == AdjustmentHints::Never {\n         return None;\n     }\n@@ -233,4 +236,96 @@ fn or_else() {\n             \"#,\n         )\n     }\n+\n+    #[test]\n+    fn adjustment_hints_unsafe_only() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_hide_outside_unsafe: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+unsafe fn enabled() {\n+    f(&&());\n+    //^^^^&\n+    //^^^^*\n+    //^^^^*\n+}\n+\n+fn disabled() {\n+    f(&&());\n+}\n+\n+fn mixed() {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+}\n+\n+const _: () = {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+};\n+\n+static STATIC: () = {\n+    f(&&());\n+\n+    unsafe {\n+        f(&&());\n+        //^^^^&\n+        //^^^^*\n+        //^^^^*\n+    }\n+};\n+\n+enum E {\n+    Disable = { f(&&()); 0 },\n+    Enable = unsafe { f(&&()); 1 },\n+                      //^^^^&\n+                      //^^^^*\n+                      //^^^^*\n+}\n+\n+const fn f(_: &()) {}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn adjustment_hints_unsafe_only_with_item() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_hide_outside_unsafe: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn a() {\n+    struct Struct;\n+    impl Struct {\n+        fn by_ref(&self) {}\n+    }\n+\n+    _ = Struct.by_ref();\n+\n+    _ = unsafe { Struct.by_ref() };\n+               //^^^^^^(\n+               //^^^^^^&\n+               //^^^^^^)\n+}\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "a8ffc387080d1bba849d6e0f18b48384a66dd0f3", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -114,6 +114,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     adjustment_hints: crate::AdjustmentHints::Never,\n+                    adjustment_hints_hide_outside_unsafe: false,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,"}, {"sha": "cba04b00c3dd3d0a09a8e652f4347c568b6339b2", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -329,6 +329,8 @@ config_data! {\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n         /// Whether to show inlay hints for type adjustments.\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n+        /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n+        inlayHints_expressionAdjustmentHints_hideOutsideUnsafe: bool = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1240,6 +1242,9 @@ impl Config {\n                 },\n                 AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n+            adjustment_hints_hide_outside_unsafe: self\n+                .data\n+                .inlayHints_expressionAdjustmentHints_hideOutsideUnsafe,\n             binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self\n                 .data"}, {"sha": "867fd5620fd1702d74e840c7b487857d1a6d0675", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -459,6 +459,11 @@ Whether to show inlay type hints for return types of closures.\n --\n Whether to show inlay hints for type adjustments.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe]]rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe (default: `false`)::\n++\n+--\n+Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "fad67ce80310fe94abb86c05bc9f593d8712aafb", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=eb3963b22ec8ec7e99aeb1a2c7acb5689a2f76c5", "patch": "@@ -975,6 +975,11 @@\n                         \"Only show auto borrow and dereference adjustment hints.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe\": {\n+                    \"markdownDescription\": \"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\","}]}