{"sha": "6dba4ed215e7a60f0a2a19c04f3f73691f89c509", "node_id": "C_kwDOAAsO6NoAKDZkYmE0ZWQyMTVlN2E2MGYwYTJhMTljMDRmM2Y3MzY5MWY4OWM1MDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T19:57:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T19:57:13Z"}, "message": "Auto merge of #99056 - lcnr:higher_ranked_sub, r=oli-obk\n\ndon't use `commit_if_ok` during `higher_ranked_sub`\n\nThis snapshot doesn't really do anything useful for us, especially once we deal with placeholder outlive bounds during trait solving.\n\nI guess that currently the idea is that `higher_ranked_sub` could cause a later `leak_check` to fail even if the combine operation isn't actually relevant. But really, using combine outside of snapshot and ignoring its result is wrong anyways, as it can constrain inference variables.\n\nr? rust-lang/types", "tree": {"sha": "0b2d4545d689d46d9a4313a2ded3b85f75aa412f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2d4545d689d46d9a4313a2ded3b85f75aa412f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dba4ed215e7a60f0a2a19c04f3f73691f89c509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dba4ed215e7a60f0a2a19c04f3f73691f89c509", "html_url": "https://github.com/rust-lang/rust/commit/6dba4ed215e7a60f0a2a19c04f3f73691f89c509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dba4ed215e7a60f0a2a19c04f3f73691f89c509/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f893495e3da91dc319d37861b803eed9d6c8c7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f893495e3da91dc319d37861b803eed9d6c8c7c7", "html_url": "https://github.com/rust-lang/rust/commit/f893495e3da91dc319d37861b803eed9d6c8c7c7"}, {"sha": "aea2d7e20a259cf6ee553a77a2683b63cd7f1fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea2d7e20a259cf6ee553a77a2683b63cd7f1fd3", "html_url": "https://github.com/rust-lang/rust/commit/aea2d7e20a259cf6ee553a77a2683b63cd7f1fd3"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "12c44b4baaac12036efe6b7560b61d8352c8f5b1", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6dba4ed215e7a60f0a2a19c04f3f73691f89c509/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dba4ed215e7a60f0a2a19c04f3f73691f89c509/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=6dba4ed215e7a60f0a2a19c04f3f73691f89c509", "patch": "@@ -34,31 +34,27 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         let span = self.trace.cause.span;\n+        // First, we instantiate each bound region in the supertype with a\n+        // fresh placeholder region. Note that this automatically creates\n+        // a new universe if needed.\n+        let sup_prime = self.infcx.replace_bound_vars_with_placeholders(sup);\n \n-        self.infcx.commit_if_ok(|_| {\n-            // First, we instantiate each bound region in the supertype with a\n-            // fresh placeholder region. Note that this automatically creates\n-            // a new universe if needed.\n-            let sup_prime = self.infcx.replace_bound_vars_with_placeholders(sup);\n+        // Next, we instantiate each bound region in the subtype\n+        // with a fresh region variable. These region variables --\n+        // but no other pre-existing region variables -- can name\n+        // the placeholders.\n+        let sub_prime = self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, sub);\n \n-            // Next, we instantiate each bound region in the subtype\n-            // with a fresh region variable. These region variables --\n-            // but no other pre-existing region variables -- can name\n-            // the placeholders.\n-            let sub_prime =\n-                self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, sub);\n+        debug!(\"a_prime={:?}\", sub_prime);\n+        debug!(\"b_prime={:?}\", sup_prime);\n \n-            debug!(\"a_prime={:?}\", sub_prime);\n-            debug!(\"b_prime={:?}\", sup_prime);\n+        // Compare types now that bound regions have been replaced.\n+        let result = self.sub(sub_is_expected).relate(sub_prime, sup_prime)?;\n \n-            // Compare types now that bound regions have been replaced.\n-            let result = self.sub(sub_is_expected).relate(sub_prime, sup_prime)?;\n-\n-            debug!(\"higher_ranked_sub: OK result={result:?}\");\n-            // NOTE: returning the result here would be dangerous as it contains\n-            // placeholders which **must not** be named afterwards.\n-            Ok(())\n-        })\n+        debug!(\"OK result={result:?}\");\n+        // NOTE: returning the result here would be dangerous as it contains\n+        // placeholders which **must not** be named afterwards.\n+        Ok(())\n     }\n }\n "}]}