{"sha": "d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YTFiYzczZjc0MmQ1YzFlNzQ3MjcwYmRjOGI1YTZlOTdiYTNiYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T04:17:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T04:17:05Z"}, "message": "Auto merge of #49489 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #49443, #49445, #49446, #49463, #49464, #49466, #49468, #49473, #49484, #49486\n- Failed merges:", "tree": {"sha": "59ac1ead4709d7b31c16dcab52e9511f905ae761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ac1ead4709d7b31c16dcab52e9511f905ae761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "html_url": "https://github.com/rust-lang/rust/commit/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e8c5d8466ae40c1ef9b2a1d96f9cd2c4dcccf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e8c5d8466ae40c1ef9b2a1d96f9cd2c4dcccf0", "html_url": "https://github.com/rust-lang/rust/commit/15e8c5d8466ae40c1ef9b2a1d96f9cd2c4dcccf0"}, {"sha": "67e0c2b52939de562fb06910295a6247750c11bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e0c2b52939de562fb06910295a6247750c11bc", "html_url": "https://github.com/rust-lang/rust/commit/67e0c2b52939de562fb06910295a6247750c11bc"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "39cef1e2a57703a9a2b95cf70f9909a4d7dc9699", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -34,7 +34,7 @@ Libraries\n - [Implement libstd for CloudABI.][47268]\n - [`Float::{from_bits, to_bits}` is now available in libcore.][46931]\n - [Implement `AsRef<Path>` for Component][46985]\n-- [Implemented `Write` for `Cursor<&mut Vec<T>>`][46830]\n+- [Implemented `Write` for `Cursor<&mut Vec<u8>>`][46830]\n - [Moved `Duration` to libcore.][46666]\n \n Stabilized APIs\n@@ -47,8 +47,6 @@ eg. `static MINUTE: Duration = Duration::from_secs(60);`\n - [`Duration::new`][47300]\n - [`Duration::from_secs`][47300]\n - [`Duration::from_millis`][47300]\n-- [`Duration::from_micros`][47300]\n-- [`Duration::from_nanos`][47300]\n \n Cargo\n -----"}, {"sha": "492eceef05c75045e711b4309565b214592422ff", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -288,6 +288,7 @@ pub fn symlink_dir(src: &Path, dest: &Path) -> io::Result<()> {\n                                nOutBufferSize: DWORD,\n                                lpBytesReturned: LPDWORD,\n                                lpOverlapped: LPOVERLAPPED) -> BOOL;\n+            fn CloseHandle(hObject: HANDLE) -> BOOL;\n         }\n \n         fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n@@ -341,11 +342,13 @@ pub fn symlink_dir(src: &Path, dest: &Path) -> io::Result<()> {\n                                       &mut ret,\n                                       ptr::null_mut());\n \n-            if res == 0 {\n+            let out = if res == 0 {\n                 Err(io::Error::last_os_error())\n             } else {\n                 Ok(())\n-            }\n+            };\n+            CloseHandle(h);\n+            out\n         }\n     }\n }"}, {"sha": "44b9145a8c2e58314913355e800b102816c02194", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -305,7 +305,7 @@ $ rustdoc src/lib.rs -Z unstable-options --themes theme.css\n \n Giving this flag to `rustdoc` will make it copy your theme into the generated crate docs and enable\n it in the theme selector. Note that `rustdoc` will reject your theme file if it doesn't style\n-everything the \"main\" theme does. See `--theme-checker` below for details.\n+everything the \"light\" theme does. See `--theme-checker` below for details.\n \n ### `--theme-checker`: verify theme CSS for validity\n \n@@ -316,7 +316,7 @@ $ rustdoc -Z unstable-options --theme-checker theme.css\n ```\n \n Before including your theme in crate docs, `rustdoc` will compare all the CSS rules it contains\n-against the \"main\" theme included by default. Using this flag will allow you to see which rules are\n+against the \"light\" theme included by default. Using this flag will allow you to see which rules are\n missing if `rustdoc` rejects your theme.\n \n ### `--resource-suffix`: modifying the name of CSS/JavaScript in crate docs\n@@ -330,7 +330,7 @@ $ rustdoc src/lib.rs -Z unstable-options --resource-suffix suf\n When rendering docs, `rustdoc` creates several CSS and JavaScript files as part of the output. Since\n all these files are linked from every page, changing where they are can be cumbersome if you need to\n specially cache them. This flag will rename all these files in the output to include the suffix in\n-the filename. For example, `main.css` would become `main-suf.css` with the above command.\n+the filename. For example, `light.css` would become `light-suf.css` with the above command.\n \n ### `--display-warnings`: display warnings when documenting or running documentation tests\n "}, {"sha": "fdc3ef4efb866b67c47673675a028fda03f871e5", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -62,7 +62,7 @@ use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n use core::fmt;\n-use core::hash::{self, Hash, Hasher};\n+use core::hash::{Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{self, Unpin, Unsize};\n use core::mem::{self, Pin};\n@@ -508,7 +508,7 @@ impl<T: ?Sized + Eq> Eq for Box<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Hash> Hash for Box<T> {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n         (**self).hash(state);\n     }\n }"}, {"sha": "2eedb964f88ba4f4792b45c45b87935467d8a02b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -1599,8 +1599,8 @@ impl_spec_from_elem!(u64, |x| x == 0);\n impl_spec_from_elem!(u128, |x| x == 0);\n impl_spec_from_elem!(usize, |x| x == 0);\n \n-impl_spec_from_elem!(f32, |x: f32| x == 0. && x.is_sign_positive());\n-impl_spec_from_elem!(f64, |x: f64| x == 0. && x.is_sign_positive());\n+impl_spec_from_elem!(f32, |x: f32| x.to_bits() == 0);\n+impl_spec_from_elem!(f64, |x: f64| x.to_bits() == 0);\n \n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec"}, {"sha": "ef6a8fb6a61c105686f26cef42068178ab4e46b1", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -20,7 +20,7 @@\n        any(from_method=\"from_error\", from_method=\"from_ok\"),\n        from_desugaring=\"?\"),\n       message=\"the `?` operator can only be used in a \\\n-               function that returns `Result` \\\n+               function that returns `Result` or `Option` \\\n                (or another type that implements `{Try}`)\",\n       label=\"cannot use the `?` operator in a function that returns `{Self}`\"),\n    on(all(from_method=\"into_result\", from_desugaring=\"?\"),"}, {"sha": "5a54de06b5ef2bf55cd99509d1233582a5996db4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -2653,7 +2653,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n ///\n /// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n /// is never dereferenced. This is so that enums may use this forbidden value\n-/// as a discriminant -- `Option<NonNull<T>>` has the same size as `NonNull<T>`.\n+/// as a discriminant -- `Option<NonNull<T>>` has the same size as `*mut T`.\n /// However the pointer may still dangle if it isn't dereferenced.\n ///\n /// Unlike `*mut T`, `NonNull<T>` is covariant over `T`. If this is incorrect"}, {"sha": "aac5d0d2601deca63ff43b781d06086a83a63a13", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -53,7 +53,7 @@ r##\"<!DOCTYPE html>\n           id=\"mainThemeStyle\">\n     {themes}\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}dark{suffix}.css\">\n-    <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}main{suffix}.css\" id=\"themeStyle\">\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"{root_path}light{suffix}.css\" id=\"themeStyle\">\n     <script src=\"{root_path}storage{suffix}.js\"></script>\n     {css_extension}\n "}, {"sha": "ff6cc56e5b4f5c5ff2fc67ded3c4be1d62517472", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -129,8 +129,8 @@ pub struct SharedContext {\n     pub sort_modules_alphabetically: bool,\n     /// Additional themes to be added to the generated docs.\n     pub themes: Vec<PathBuf>,\n-    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"main.css\" becomes\n-    /// \"main-v2.css\").\n+    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n+    /// \"light-v2.css\").\n     pub resource_suffix: String,\n }\n \n@@ -743,7 +743,7 @@ fn write_shared(cx: &Context,\n     write(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n           include_bytes!(\"static/rustdoc.css\"))?;\n \n-    // To avoid \"main.css\" to be overwritten, we'll first run over the received themes and only\n+    // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n     let mut themes: HashSet<String> = HashSet::new();\n \n@@ -761,9 +761,9 @@ fn write_shared(cx: &Context,\n \n     write(cx.dst.join(&format!(\"brush{}.svg\", cx.shared.resource_suffix)),\n           include_bytes!(\"static/brush.svg\"))?;\n-    write(cx.dst.join(&format!(\"main{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/themes/main.css\"))?;\n-    themes.insert(\"main\".to_owned());\n+    write(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n+          include_bytes!(\"static/themes/light.css\"))?;\n+    themes.insert(\"light\".to_owned());\n     write(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n           include_bytes!(\"static/themes/dark.css\"))?;\n     themes.insert(\"dark\".to_owned());"}, {"sha": "31a501d24e7dbb728a53f6b453be59dd3d19ab86", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -109,7 +109,6 @@ h3.impl, h3.method, h4.method, h3.type, h4.type, h4.associatedconstant {\n \tposition: relative;\n }\n h3.impl, h3.method, h3.type {\n-\tmargin-top: 15px;\n \tpadding-left: 15px;\n }\n \n@@ -470,7 +469,10 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div:not(.important-traits) { margin-left: 40px; }\n+.content .methods > div:not(.important-traits) {\n+\tmargin-left: 40px;\n+\tmargin-bottom: 15px;\n+}\n \n .content .impl-items .docblock, .content .impl-items .stability {\n \tmargin-bottom: .6em;"}, {"sha": "2f4e203ebc5c2447e19f33ccf82adec4617dd823", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -67,4 +67,4 @@ function switchTheme(styleElem, mainStyleElem, newTheme) {\n     }\n }\n \n-switchTheme(currentTheme, mainTheme, getCurrentValue('rustdoc-theme') || 'main');\n+switchTheme(currentTheme, mainTheme, getCurrentValue('rustdoc-theme') || 'light');"}, {"sha": "2334a2728554ea66dd8d345264a59e1e03ce843e", "filename": "src/librustdoc/html/static/themes/light.css", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "previous_filename": "src/librustdoc/html/static/themes/main.css"}, {"sha": "66369e860066df94db90e389563db72748401392", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -267,8 +267,8 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"resource-suffix\", |o| {\n             o.optopt(\"\",\n                      \"resource-suffix\",\n-                     \"suffix to add to CSS and JavaScript files, e.g. \\\"main.css\\\" will become \\\n-                      \\\"main-suffix.css\\\"\",\n+                     \"suffix to add to CSS and JavaScript files, e.g. \\\"light.css\\\" will become \\\n+                      \\\"light-suffix.css\\\"\",\n                      \"PATH\")\n         }),\n     ]\n@@ -322,7 +322,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let to_check = matches.opt_strs(\"theme-checker\");\n     if !to_check.is_empty() {\n-        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/main.css\"));\n+        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/light.css\"));\n         let mut errors = 0;\n \n         println!(\"rustdoc: [theme-checker] Starting tests!\");\n@@ -393,7 +393,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let mut themes = Vec::new();\n     if matches.opt_present(\"themes\") {\n-        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/main.css\"));\n+        let paths = theme::load_css_paths(include_bytes!(\"html/static/themes/light.css\"));\n \n         for (theme_file, theme_s) in matches.opt_strs(\"themes\")\n                                             .iter()"}, {"sha": "51ebc42a0dd6f53b241abaf20188c62c75e1a6b5", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -13,6 +13,7 @@\n // ignore-mips\n // ignore-mips64\n // ignore-powerpc\n+// ignore-s390x\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows"}, {"sha": "d1cb75909c155c81ef2f1fe0b16f6ca934de85e1", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -12,6 +12,8 @@\n // ignore-aarch64\n // ignore-mips\n // ignore-mips64\n+// ignore-powerpc\n+// ignore-s390x\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "78c5782be383368b2116a9d5323826a5fd8cee53", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -12,6 +12,8 @@\n // ignore-aarch64\n // ignore-mips\n // ignore-mips64\n+// ignore-powerpc\n+// ignore-s390x\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "265ee593bb7090a61759a2690d0d3a1b746df95d", "filename": "src/test/ui/suggestions/try-on-option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -6,7 +6,7 @@ LL |     x?; //~ the trait bound\n    |\n    = note: required by `std::convert::From::from`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option.rs:23:5\n    |\n LL |     x?; //~ the `?` operator"}, {"sha": "121ae14f999c19d4090eceb10cad5788abbc0754", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-operator-on-main.rs:19:5\n    |\n LL |     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only"}, {"sha": "ade7ae0a4aee768e2b731c7aa8487c1766690301", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -61,8 +61,8 @@ impl Formatter for HTMLFormatter {\n <head>\n <title>Rust Compiler Error Index</title>\n <meta charset=\"utf-8\">\n-<!-- Include rust.css after main.css so its rules take priority. -->\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"/>\n+<!-- Include rust.css after light.css so its rules take priority. -->\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"light.css\"/>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"rust.css\"/>\n <style>\n .error-undescribed {{"}, {"sha": "c8fb65e9a2aec97889cc3559d6b86cb34ae941e9", "filename": "src/tools/rustdoc-themes/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Fmain.rs?ref=d8a1bc73f742d5c1e747270bdc8b5a6e97ba3bb1", "patch": "@@ -13,7 +13,7 @@ use std::fs::read_dir;\n use std::path::Path;\n use std::process::{Command, exit};\n \n-const FILES_TO_IGNORE: &[&str] = &[\"main.css\"];\n+const FILES_TO_IGNORE: &[&str] = &[\"light.css\"];\n \n fn get_folders<P: AsRef<Path>>(folder_path: P) -> Vec<String> {\n     let mut ret = Vec::with_capacity(10);"}]}