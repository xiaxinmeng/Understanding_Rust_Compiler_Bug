{"sha": "df15b289f39c497d16fac694c6982fbdfa2e6fe2", "node_id": "C_kwDOAAsO6NoAKGRmMTViMjg5ZjM5YzQ5N2QxNmZhYzY5NGM2OTgyZmJkZmEyZTZmZTI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-10-12T13:02:52Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-10-12T13:02:52Z"}, "message": "Remove potentially unsound note on reconstructing a leaked Vec.", "tree": {"sha": "590b055cf45bed771e914042271088889fe5b4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590b055cf45bed771e914042271088889fe5b4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df15b289f39c497d16fac694c6982fbdfa2e6fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df15b289f39c497d16fac694c6982fbdfa2e6fe2", "html_url": "https://github.com/rust-lang/rust/commit/df15b289f39c497d16fac694c6982fbdfa2e6fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df15b289f39c497d16fac694c6982fbdfa2e6fe2/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129af049fef9a9de3ffba1f6b26246b02a360de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/129af049fef9a9de3ffba1f6b26246b02a360de3", "html_url": "https://github.com/rust-lang/rust/commit/129af049fef9a9de3ffba1f6b26246b02a360de3"}], "stats": {"total": 3, "additions": 0, "deletions": 3}, "files": [{"sha": "632297196caf5c63cf2cdb73e60c6a9e70d33e48", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df15b289f39c497d16fac694c6982fbdfa2e6fe2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df15b289f39c497d16fac694c6982fbdfa2e6fe2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=df15b289f39c497d16fac694c6982fbdfa2e6fe2", "patch": "@@ -1955,9 +1955,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,\n     /// so the leaked allocation may include unused capacity that is not part\n     /// of the returned slice.\n-    /// Unsafe code that later reconstructs or deallocates the `Vec` (for\n-    /// example, by calling [`Vec::from_raw_parts`]) must keep track of the\n-    /// original capacity.\n     ///\n     /// This function is mainly useful for data that lives for the remainder of\n     /// the program's life. Dropping the returned reference will cause a memory"}]}