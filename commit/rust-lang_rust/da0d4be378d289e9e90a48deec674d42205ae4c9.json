{"sha": "da0d4be378d289e9e90a48deec674d42205ae4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMGQ0YmUzNzhkMjg5ZTllOTBhNDhkZWVjNjc0ZDQyMjA1YWU0Yzk=", "commit": {"author": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-06-30T14:25:58Z"}, "committer": {"name": "Andrew Poelstra", "email": "apoelstra@wpsoftware.net", "date": "2014-07-02T19:36:02Z"}, "message": "collections::bitv: remove some ancient interfaces\n\nRemoves the following methods from `Bitv`:\n\n  - `to_vec`: translates a `Bitv` into a bulky `Vec<uint>` of 0's and 1's\n    replace with:  `bitv.iter().map(|b| if b {1} else {0}).collect()`\n\n  - `to_bools`: translates a `Bitv` into a `Vec<bool>`\n    replace with: `bitv.iter().collect()`\n\n  - `ones`: internal iterator over all 1 bits in a `Bitv`\n    replace with: `BitvSet::from_bitv(bitv).iter().advance(fn)`\n\nThese methods had specific functionality which can be replicated more\ngenerally by the modern iterator system. (Also `to_vec` was not even\nunit tested!)", "tree": {"sha": "628be29241bcda5c23965df212063b8e8bc5da21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/628be29241bcda5c23965df212063b8e8bc5da21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0d4be378d289e9e90a48deec674d42205ae4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0d4be378d289e9e90a48deec674d42205ae4c9", "html_url": "https://github.com/rust-lang/rust/commit/da0d4be378d289e9e90a48deec674d42205ae4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0d4be378d289e9e90a48deec674d42205ae4c9/comments", "author": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apoelstra", "id": 1351933, "node_id": "MDQ6VXNlcjEzNTE5MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apoelstra", "html_url": "https://github.com/apoelstra", "followers_url": "https://api.github.com/users/apoelstra/followers", "following_url": "https://api.github.com/users/apoelstra/following{/other_user}", "gists_url": "https://api.github.com/users/apoelstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/apoelstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions", "organizations_url": "https://api.github.com/users/apoelstra/orgs", "repos_url": "https://api.github.com/users/apoelstra/repos", "events_url": "https://api.github.com/users/apoelstra/events{/privacy}", "received_events_url": "https://api.github.com/users/apoelstra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7ae993ce694bf75a11632b394916e055a4d8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7ae993ce694bf75a11632b394916e055a4d8ec", "html_url": "https://github.com/rust-lang/rust/commit/7a7ae993ce694bf75a11632b394916e055a4d8ec"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "3aeb15eef6f00e4e55e2c4f243fac7ca95fc48a3", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da0d4be378d289e9e90a48deec674d42205ae4c9/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0d4be378d289e9e90a48deec674d42205ae4c9/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=da0d4be378d289e9e90a48deec674d42205ae4c9", "patch": "@@ -268,15 +268,6 @@ impl Bitv {\n         !self.none()\n     }\n \n-    /**\n-     * Converts `self` to a vector of `uint` with the same length.\n-     *\n-     * Each `uint` in the resulting vector has either value `0u` or `1u`.\n-     */\n-    pub fn to_vec(&self) -> Vec<uint> {\n-        Vec::from_fn(self.nbits, |i| if self.get(i) { 1 } else { 0 })\n-    }\n-\n     /**\n      * Organise the bits into bytes, such that the first bit in the\n      * `Bitv` becomes the high-order bit of the first byte. If the\n@@ -307,13 +298,6 @@ impl Bitv {\n         )\n     }\n \n-    /**\n-     * Transform `self` into a `Vec<bool>` by turning each bit into a `bool`.\n-     */\n-    pub fn to_bools(&self) -> Vec<bool> {\n-        Vec::from_fn(self.nbits, |i| self[i])\n-    }\n-\n     /**\n      * Compare a bitvector to a vector of `bool`.\n      *\n@@ -328,11 +312,6 @@ impl Bitv {\n         }\n         true\n     }\n-\n-    pub fn ones(&self, f: |uint| -> bool) -> bool {\n-        range(0u, self.nbits).advance(|i| !self.get(i) || f(i))\n-    }\n-\n }\n \n /**\n@@ -1157,7 +1136,7 @@ mod tests {\n     #[test]\n     fn test_to_bools() {\n         let bools = vec!(false, false, true, false, false, true, true, false);\n-        assert_eq!(from_bytes([0b00100110]).to_bools(), bools);\n+        assert_eq!(from_bytes([0b00100110]).iter().collect::<Vec<bool>>(), bools);\n     }\n \n     #[test]\n@@ -1225,7 +1204,7 @@ mod tests {\n     fn test_small_clear() {\n         let mut b = Bitv::new(14, true);\n         b.clear();\n-        b.ones(|i| {\n+        BitvSet::from_bitv(b).iter().advance(|i| {\n             fail!(\"found 1 at {:?}\", i)\n         });\n     }\n@@ -1234,7 +1213,7 @@ mod tests {\n     fn test_big_clear() {\n         let mut b = Bitv::new(140, true);\n         b.clear();\n-        b.ones(|i| {\n+        BitvSet::from_bitv(b).iter().advance(|i| {\n             fail!(\"found 1 at {:?}\", i)\n         });\n     }"}]}