{"sha": "70cd5ffbf5f2283fc4986c581d225987620b5335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwY2Q1ZmZiZjVmMjI4M2ZjNDk4NmM1ODFkMjI1OTg3NjIwYjUzMzU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-07T17:37:47Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-07T17:37:47Z"}, "message": "Merge #1251\n\n1251: Chalk integration improvements r=matklad a=flodiebold\n\nA few improvements that came up while working on where clause support:\r\n - turn `implements` into a query again to improve performance\r\n - allow skipping to a specific function with `analysis-stats`, e.g. `ra_cli analysis-stats --only world_symbols`\r\n - deduplicate impls in impls_for_trait -- previously many impls e.g. from std where repeated many times, this should help performance as well...\r\n - add a `HirDisplay` implementation for TraitRef (not used here anywhere, but useful for debugging)\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "10d66df8729d3bd823ace808f3a05146a32d4ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d66df8729d3bd823ace808f3a05146a32d4ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70cd5ffbf5f2283fc4986c581d225987620b5335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70cd5ffbf5f2283fc4986c581d225987620b5335", "html_url": "https://github.com/rust-lang/rust/commit/70cd5ffbf5f2283fc4986c581d225987620b5335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70cd5ffbf5f2283fc4986c581d225987620b5335/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d3efedb752bb2198796603d8a479a5e3ee472a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3efedb752bb2198796603d8a479a5e3ee472a97", "html_url": "https://github.com/rust-lang/rust/commit/d3efedb752bb2198796603d8a479a5e3ee472a97"}, {"sha": "530b3047ed19a6468fc75e5a5ec14763093a069d", "url": "https://api.github.com/repos/rust-lang/rust/commits/530b3047ed19a6468fc75e5a5ec14763093a069d", "html_url": "https://github.com/rust-lang/rust/commit/530b3047ed19a6468fc75e5a5ec14763093a069d"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "86ee0cb6311f319b7f62a1ae390c634513d5c9c9", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::AstNode;\n \n use crate::Result;\n \n-pub fn run(verbose: bool) -> Result<()> {\n+pub fn run(verbose: bool, only: Option<&str>) -> Result<()> {\n     let db_load_time = Instant::now();\n     let (db, roots) = BatchDatabase::load_cargo(\".\")?;\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n@@ -57,14 +57,19 @@ pub fn run(verbose: bool) -> Result<()> {\n     let mut num_exprs_unknown = 0;\n     let mut num_exprs_partially_unknown = 0;\n     for f in funcs {\n+        let name = f.name(&db);\n         if verbose {\n             let (file_id, source) = f.source(&db);\n             let original_file = file_id.original_file(&db);\n             let path = db.file_relative_path(original_file);\n             let syntax_range = source.syntax().range();\n-            let name = f.name(&db);\n             println!(\"{} ({:?} {})\", name, path, syntax_range);\n         }\n+        if let Some(only_name) = only {\n+            if name.to_string() != only_name {\n+                continue;\n+            }\n+        }\n         let body = f.body(&db);\n         let inference_result = f.infer(&db);\n         for (expr_id, _) in body.exprs() {"}, {"sha": "11790d2e71f36b5031f443a7d470298cdac8e852", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -23,7 +23,9 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n         .subcommand(\n-            SubCommand::with_name(\"analysis-stats\").arg(Arg::with_name(\"verbose\").short(\"v\")),\n+            SubCommand::with_name(\"analysis-stats\")\n+                .arg(Arg::with_name(\"verbose\").short(\"v\"))\n+                .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true)),\n         )\n         .get_matches();\n     match matches.subcommand() {\n@@ -51,7 +53,8 @@ fn main() -> Result<()> {\n         }\n         (\"analysis-stats\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");\n-            analysis_stats::run(verbose)?;\n+            let only = matches.value_of(\"only\");\n+            analysis_stats::run(verbose, only)?;\n         }\n         _ => unreachable!(),\n     }"}, {"sha": "689dd6225cd7ccf86a75501627d30481b2a6af37", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -161,6 +161,13 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::traits::solver)]\n     #[salsa::volatile]\n     fn solver(&self, krate: Crate) -> Arc<Mutex<crate::ty::traits::Solver>>;\n+\n+    #[salsa::invoke(crate::ty::traits::implements)]\n+    fn implements(\n+        &self,\n+        krate: Crate,\n+        goal: crate::ty::Canonical<crate::ty::TraitRef>,\n+    ) -> Option<crate::ty::traits::Solution>;\n }\n \n #[test]"}, {"sha": "12429a668b12e4fd7c5c3650dcb3d4caa4968b91", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -240,7 +240,7 @@ impl TraitRef {\n /// many there are. This is used to erase irrelevant differences between types\n /// before using them in queries.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) struct Canonical<T> {\n+pub struct Canonical<T> {\n     pub value: T,\n     pub num_vars: usize,\n }\n@@ -534,3 +534,20 @@ impl HirDisplay for Ty {\n         Ok(())\n     }\n }\n+\n+impl HirDisplay for TraitRef {\n+    fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}: {}\",\n+            self.substs[0].display(f.db),\n+            self.trait_.name(f.db).unwrap_or_else(Name::missing)\n+        )?;\n+        if self.substs.len() > 1 {\n+            write!(f, \"<\")?;\n+            f.write_joined(&self.substs[1..], \", \")?;\n+            write!(f, \">\")?;\n+        }\n+        Ok(())\n+    }\n+}"}, {"sha": "1e7d97f51cc6dc4b74601203893b80ccb953698d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -328,8 +328,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Obligation::Trait(tr) => {\n                     let canonicalized = self.canonicalizer().canonicalize_trait_ref(tr.clone());\n                     (\n-                        super::traits::implements(\n-                            self.db,\n+                        self.db.implements(\n                             self.resolver.krate().unwrap(),\n                             canonicalized.value.clone(),\n                         ),"}, {"sha": "d8b8c836c85166e8f51a8a719adb7bfc58a3c265", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -196,8 +196,7 @@ fn iterate_trait_method_candidates<T>(\n                     if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n                         if !known_implemented {\n                             let trait_ref = canonical_trait_ref(db, t, ty.clone());\n-                            // FIXME cache this implements check (without solution) in a query?\n-                            if super::traits::implements(db, krate, trait_ref).is_none() {\n+                            if db.implements(krate, trait_ref).is_none() {\n                                 continue 'traits;\n                             }\n                         }"}, {"sha": "4bbc99f0ef16494f4e7181fef5d041a945445ed0", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd5ffbf5f2283fc4986c581d225987620b5335/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=70cd5ffbf5f2283fc4986c581d225987620b5335", "patch": "@@ -1,6 +1,7 @@\n //! Trait solving using Chalk.\n use std::sync::{Arc, Mutex};\n \n+use rustc_hash::FxHashSet;\n use log::debug;\n use chalk_ir::cast::Cast;\n \n@@ -31,7 +32,7 @@ pub(crate) fn impls_for_trait(\n     krate: Crate,\n     trait_: Trait,\n ) -> Arc<[ImplBlock]> {\n-    let mut impls = Vec::new();\n+    let mut impls = FxHashSet::default();\n     // We call the query recursively here. On the one hand, this means we can\n     // reuse results from queries for different crates; on the other hand, this\n     // will only ever get called for a few crates near the root of the tree (the\n@@ -42,7 +43,7 @@ pub(crate) fn impls_for_trait(\n     }\n     let crate_impl_blocks = db.impls_in_crate(krate);\n     impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(&trait_));\n-    impls.into()\n+    impls.into_iter().collect::<Vec<_>>().into()\n }\n \n fn solve(\n@@ -125,11 +126,11 @@ fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub(crate) struct SolutionVariables(pub Canonical<Vec<Ty>>);\n+pub struct SolutionVariables(pub Canonical<Vec<Ty>>);\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n /// A (possible) solution for a proposed goal.\n-pub(crate) enum Solution {\n+pub enum Solution {\n     /// The goal indeed holds, and there is a unique value for all existential\n     /// variables.\n     Unique(SolutionVariables),\n@@ -144,7 +145,7 @@ pub(crate) enum Solution {\n #[derive(Clone, Debug, PartialEq, Eq)]\n /// When a goal holds ambiguously (e.g., because there are multiple possible\n /// solutions), we issue a set of *guidance* back to type inference.\n-pub(crate) enum Guidance {\n+pub enum Guidance {\n     /// The existential variables *must* have the given values if the goal is\n     /// ever to hold, but that alone isn't enough to guarantee the goal will\n     /// actually hold."}]}