{"sha": "3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmU5Zjg0M2MxNzA5YmNlMjU0Zjk4ZGNiMGEwOGEwNGFjM2ZlOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T21:29:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-07T21:29:43Z"}, "message": "Auto merge of #76044 - ecstatic-morse:dataflow-lattice, r=oli-obk\n\nSupport dataflow problems on arbitrary lattices\n\nThis PR implements last of the proposed extensions I mentioned in the design meeting for the original dataflow refactor. It extends the current dataflow framework to work with arbitrary lattices, not just `BitSet`s. This is a prerequisite for dataflow-enabled MIR const-propagation. Personally, I am skeptical of the usefulness of doing const-propagation pre-monomorphization, since many useful constants only become known after monomorphization (e.g. `size_of::<T>()`) and users have a natural tendency to hand-optimize the rest. It's probably worth exprimenting with, however, and others have shown interest cc `@rust-lang/wg-mir-opt.`\n\nThe `Idx` associated type is moved from `AnalysisDomain` to `GenKillAnalysis` and replaced with an associated `Domain` type that must implement `JoinSemiLattice`. Like before, each `Analysis` defines the \"bottom value\" for its domain, but can no longer override the dataflow join operator. Analyses that want to use set intersection must now use the `lattice::Dual` newtype. `GenKillAnalysis` impls have an additional requirement that `Self::Domain: BorrowMut<BitSet<Self::Idx>>`, which effectively means that they must use `BitSet<Self::Idx>` or `lattice::Dual<BitSet<Self::Idx>>` as their domain.\n\nMost of these changes were mechanical. However, because a `Domain` is no longer always a powerset of some index type, we can no longer use an `IndexVec<BasicBlock, GenKillSet<A::Idx>>>` to store cached block transfer functions. Instead, we use a boxed `dyn Fn` trait object. I discuss a few alternatives to the current approach in a commit message.\n\nThe majority of new lines of code are to preserve existing Graphviz diagrams for those unlucky enough to have to debug dataflow analyses. I find these diagrams incredibly useful when things are going wrong and considered regressing them unacceptable, especially the pretty-printing of `MovePathIndex`s, which are used in many dataflow analyses. This required a parallel `fmt` trait used only for printing dataflow domains, as well as a refactoring of the `graphviz` module now that we cannot expect the domain to be a `BitSet`. Some features did have to be removed, such as the gen/kill display mode (which I didn't use but existed to mirror the output of the old dataflow framework) and line wrapping. Since I had to rewrite much of it anyway, I took the opportunity to switch to a `Visitor` for printing dataflow state diffs instead of using cursors, which are error prone for code that must be generic over both forward and backward analyses. As a side-effect of this change, we no longer have quadratic behavior when writing graphviz diagrams for backward dataflow analyses.\n\nr? `@pnkfelix`", "tree": {"sha": "fec65f11babc8f166af63f1bebc6e7b20237b841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec65f11babc8f166af63f1bebc6e7b20237b841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "html_url": "https://github.com/rust-lang/rust/commit/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4286d9c87af269e46203fc1ca8108669d00e7c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/4286d9c87af269e46203fc1ca8108669d00e7c63", "html_url": "https://github.com/rust-lang/rust/commit/4286d9c87af269e46203fc1ca8108669d00e7c63"}, {"sha": "1c5b0fbe53f842cd5871ea02e4e48571615d5679", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5b0fbe53f842cd5871ea02e4e48571615d5679", "html_url": "https://github.com/rust-lang/rust/commit/1c5b0fbe53f842cd5871ea02e4e48571615d5679"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "57a45e628db61497c3f605838e75f2e220a8a003", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n-use rustc_mir::dataflow::BottomValue;\n use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -411,21 +410,24 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n struct MaybeStorageLive;\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Idx = mir::Local;\n+    type Domain = BitSet<mir::Local>;\n     const NAME: &'static str = \"maybe_storage_live\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = dead\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         for arg in body.args_iter() {\n             state.insert(arg);\n         }\n     }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n+    type Idx = mir::Local;\n+\n     fn statement_effect(&self, trans: &mut impl GenKill<Self::Idx>, stmt: &mir::Statement<'tcx>, _: mir::Location) {\n         match stmt.kind {\n             mir::StatementKind::StorageLive(l) => trans.gen(l),\n@@ -454,11 +456,6 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl BottomValue for MaybeStorageLive {\n-    /// bottom = dead\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n /// Collects the possible borrowers of each local.\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`."}]}