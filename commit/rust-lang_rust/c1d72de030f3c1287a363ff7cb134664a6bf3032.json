{"sha": "c1d72de030f3c1287a363ff7cb134664a6bf3032", "node_id": "C_kwDOAAsO6NoAKGMxZDcyZGUwMzBmM2MxMjg3YTM2M2ZmN2NiMTM0NjY0YTZiZjMwMzI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-23T22:29:43Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-23T22:56:40Z"}, "message": "rustdoc: add interaction delays for tooltip popovers\n\nDesigning a good hover microinteraction is a matter of guessing\nuser intent from what are, literally, vague gestures. In this case,\nguessing if hovering in our out of the tooltip base is intentional\nor not.\n\nTo figure this out, a few different techniques are used:\n\n* When the mouse pointer enters a tooltip anchor point, its hitbox\n  is grown on the bottom, where the popover is/will appear. This was\n  already there before this commit: search \"hover tunnel\" in\n  rustdoc.css for the implementation.\n\n* This commit adds a delay when the mouse pointer enters the base\n  anchor, in case the mouse pointer was just passing through and the\n  user didn't want to open it.\n\n* This commit also adds a delay when the mouse pointer exits the\n  tooltip's base anchor or its popover, before hiding it.\n\n* A fade-out animation is layered onto the pointer exit delay to\n  immediately inform the user that they successfully dismissed the\n  popover, while still providing a way for them to cancel it if\n  it was a mistake and they still wanted to interact with it.\n\n* No animation is used for revealing it, because we don't want\n  people to try to interact with an element while it's in the\n  middle of fading in: either they're allowed to interact with\n  it while it's fading in, meaning it can't serve as mistake-\n  proofing for opening the popover, or they can't, but they\n  might try and be frustrated.\n\nSee also:\n\n* https://www.nngroup.com/articles/timing-exposing-content/\n* https://www.nngroup.com/articles/tooltip-guidelines/\n* https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown", "tree": {"sha": "b21929c6f9c1b0e34825d471c91f8bc1c918bfce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21929c6f9c1b0e34825d471c91f8bc1c918bfce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d72de030f3c1287a363ff7cb134664a6bf3032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d72de030f3c1287a363ff7cb134664a6bf3032", "html_url": "https://github.com/rust-lang/rust/commit/c1d72de030f3c1287a363ff7cb134664a6bf3032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d72de030f3c1287a363ff7cb134664a6bf3032/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dd1cde59ee86e5d61469ee1befe09c132c777d", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd1cde59ee86e5d61469ee1befe09c132c777d", "html_url": "https://github.com/rust-lang/rust/commit/52dd1cde59ee86e5d61469ee1befe09c132c777d"}], "stats": {"total": 125, "additions": 115, "deletions": 10}, "files": [{"sha": "cd5ff48c9799199236757eb3f93cf4495b296de1", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1d72de030f3c1287a363ff7cb134664a6bf3032/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c1d72de030f3c1287a363ff7cb134664a6bf3032/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c1d72de030f3c1287a363ff7cb134664a6bf3032", "patch": "@@ -1191,6 +1191,14 @@ a.tooltip:hover::after {\n \tcontent: \"\\00a0\";\n }\n \n+/* This animation is layered onto the mistake-proofing delay for dismissing\n+\ta hovered tooltip, to ensure it feels responsive even with the delay.\n+\t*/\n+.fade-out {\n+\topacity: 0;\n+\ttransition: opacity 0.45s cubic-bezier(0, 0, 0.1, 1.0);\n+}\n+\n .popover.tooltip .content {\n \tmargin: 0.25em 0.5em;\n }"}, {"sha": "11ed2f5f9017cab57cf48f7efd4ebe16df896afb", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 104, "deletions": 9, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/c1d72de030f3c1287a363ff7cb134664a6bf3032/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c1d72de030f3c1287a363ff7cb134664a6bf3032/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=c1d72de030f3c1287a363ff7cb134664a6bf3032", "patch": "@@ -4,6 +4,13 @@\n \n \"use strict\";\n \n+// The amount of time that the cursor must remain still over a hover target before\n+// revealing a tooltip.\n+//\n+// https://www.nngroup.com/articles/timing-exposing-content/\n+window.RUSTDOC_TOOLTIP_HOVER_MS = 300;\n+window.RUSTDOC_TOOLTIP_HOVER_EXIT_MS = 450;\n+\n // Given a basename (e.g. \"storage\") and an extension (e.g. \".js\"), return a URL\n // for a resource under the root-path, with the resource-suffix.\n function resourcePath(basename, extension) {\n@@ -784,18 +791,25 @@ function preLoadCss(cssUrl) {\n         }\n         if (window.CURRENT_TOOLTIP_ELEMENT && window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE === e) {\n             // Make this function idempotent.\n+            clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n             return;\n         }\n         window.hideAllModals(false);\n         const wrapper = document.createElement(\"div\");\n         if (notable_ty) {\n             wrapper.innerHTML = \"<div class=\\\"content\\\">\" +\n                 window.NOTABLE_TRAITS[notable_ty] + \"</div>\";\n-        } else if (e.getAttribute(\"title\") !== undefined) {\n-            const titleContent = document.createElement(\"div\");\n-            titleContent.className = \"content\";\n-            titleContent.appendChild(document.createTextNode(e.getAttribute(\"title\")));\n-            wrapper.appendChild(titleContent);\n+        } else {\n+            if (e.getAttribute(\"title\") !== null) {\n+                e.setAttribute(\"data-title\", e.getAttribute(\"title\"));\n+                e.removeAttribute(\"title\");\n+            }\n+            if (e.getAttribute(\"data-title\") !== null) {\n+                const titleContent = document.createElement(\"div\");\n+                titleContent.className = \"content\";\n+                titleContent.appendChild(document.createTextNode(e.getAttribute(\"data-title\")));\n+                wrapper.appendChild(titleContent);\n+            }\n         }\n         wrapper.className = \"tooltip popover\";\n         const focusCatcher = document.createElement(\"div\");\n@@ -824,17 +838,59 @@ function preLoadCss(cssUrl) {\n         wrapper.style.visibility = \"\";\n         window.CURRENT_TOOLTIP_ELEMENT = wrapper;\n         window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE = e;\n+        clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n+        wrapper.onpointerenter = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            clearTooltipHoverTimeout(e);\n+        };\n         wrapper.onpointerleave = function(ev) {\n             // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n             if (ev.pointerType !== \"mouse\") {\n                 return;\n             }\n-            if (!e.TOOLTIP_FORCE_VISIBLE && !elemIsInParent(event.relatedTarget, e)) {\n-                hideTooltip(true);\n+            if (!e.TOOLTIP_FORCE_VISIBLE && !elemIsInParent(ev.relatedTarget, e)) {\n+                // See \"Tooltip pointer leave gesture\" below.\n+                setTooltipHoverTimeout(e, false);\n+                addClass(wrapper, \"fade-out\");\n             }\n         };\n     }\n \n+    function setTooltipHoverTimeout(element, show) {\n+        clearTooltipHoverTimeout(element);\n+        if (!show && !window.CURRENT_TOOLTIP_ELEMENT) {\n+            // To \"hide\" an already hidden element, just cancel its timeout.\n+            return;\n+        }\n+        if (show && window.CURRENT_TOOLTIP_ELEMENT) {\n+            // To \"show\" an already visible element, just cancel its timeout.\n+            return;\n+        }\n+        if (window.CURRENT_TOOLTIP_ELEMENT &&\n+            window.CURRENT_TOOLTIP_ELEMENT.TOOLTIP_BASE !== element) {\n+            // Don't do anything if another tooltip is already visible.\n+            return;\n+        }\n+        element.TOOLTIP_HOVER_TIMEOUT = setTimeout(() => {\n+            if (show) {\n+                showTooltip(element);\n+            } else if (!element.TOOLTIP_FORCE_VISIBLE) {\n+                hideTooltip(false);\n+            }\n+        }, show ? window.RUSTDOC_TOOLTIP_HOVER_MS : window.RUSTDOC_TOOLTIP_HOVER_EXIT_MS);\n+    }\n+\n+    function clearTooltipHoverTimeout(element) {\n+        if (element.TOOLTIP_HOVER_TIMEOUT !== undefined) {\n+            removeClass(window.CURRENT_TOOLTIP_ELEMENT, \"fade-out\");\n+            clearTimeout(element.TOOLTIP_HOVER_TIMEOUT);\n+            delete element.TOOLTIP_HOVER_TIMEOUT;\n+        }\n+    }\n+\n     function tooltipBlurHandler(event) {\n         if (window.CURRENT_TOOLTIP_ELEMENT &&\n             !elemIsInParent(document.activeElement, window.CURRENT_TOOLTIP_ELEMENT) &&\n@@ -864,6 +920,7 @@ function preLoadCss(cssUrl) {\n             }\n             const body = document.getElementsByTagName(\"body\")[0];\n             body.removeChild(window.CURRENT_TOOLTIP_ELEMENT);\n+            clearTooltipHoverTimeout(window.CURRENT_TOOLTIP_ELEMENT);\n             window.CURRENT_TOOLTIP_ELEMENT = null;\n         }\n     }\n@@ -886,7 +943,14 @@ function preLoadCss(cssUrl) {\n             if (ev.pointerType !== \"mouse\") {\n                 return;\n             }\n-            showTooltip(this);\n+            setTooltipHoverTimeout(this, true);\n+        };\n+        e.onpointermove = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            setTooltipHoverTimeout(this, true);\n         };\n         e.onpointerleave = function(ev) {\n             // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n@@ -895,7 +959,38 @@ function preLoadCss(cssUrl) {\n             }\n             if (!this.TOOLTIP_FORCE_VISIBLE &&\n                 !elemIsInParent(ev.relatedTarget, window.CURRENT_TOOLTIP_ELEMENT)) {\n-                hideTooltip(true);\n+                // Tooltip pointer leave gesture:\n+                //\n+                // Designing a good hover microinteraction is a matter of guessing user\n+                // intent from what are, literally, vague gestures. In this case, guessing if\n+                // hovering in or out of the tooltip base is intentional or not.\n+                //\n+                // To figure this out, a few different techniques are used:\n+                //\n+                // * When the mouse pointer enters a tooltip anchor point, its hitbox is grown\n+                //   on the bottom, where the popover is/will appear. Search \"hover tunnel\" in\n+                //   rustdoc.css for the implementation.\n+                // * There's a delay when the mouse pointer enters the popover base anchor, in\n+                //   case the mouse pointer was just passing through and the user didn't want\n+                //   to open it.\n+                // * Similarly, a delay is added when exiting the anchor, or the popover\n+                //   itself, before hiding it.\n+                // * A fade-out animation is layered onto the pointer exit delay to immediately\n+                //   inform the user that they successfully dismissed the popover, while still\n+                //   providing a way for them to cancel it if it was a mistake and they still\n+                //   wanted to interact with it.\n+                // * No animation is used for revealing it, because we don't want people to try\n+                //   to interact with an element while it's in the middle of fading in: either\n+                //   they're allowed to interact with it while it's fading in, meaning it can't\n+                //   serve as mistake-proofing for the popover, or they can't, but\n+                //   they might try and be frustrated.\n+                //\n+                // See also:\n+                // * https://www.nngroup.com/articles/timing-exposing-content/\n+                // * https://www.nngroup.com/articles/tooltip-guidelines/\n+                // * https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown\n+                setTooltipHoverTimeout(e, false);\n+                addClass(window.CURRENT_TOOLTIP_ELEMENT, \"fade-out\");\n             }\n         };\n     });"}, {"sha": "7be5e39ba4727f87ee42622bcb84482078794cea", "filename": "tests/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d72de030f3c1287a363ff7cb134664a6bf3032/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d72de030f3c1287a363ff7cb134664a6bf3032/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=c1d72de030f3c1287a363ff7cb134664a6bf3032", "patch": "@@ -40,6 +40,7 @@ define-function: (\n             \"background-color\": |background|,\n             \"border-color\": |border|,\n         })\n+        click: \".docblock .example-wrap.compile_fail .tooltip\"\n \n         // should_panic block\n         assert-css: (\n@@ -71,6 +72,7 @@ define-function: (\n             \"background-color\": |background|,\n             \"border-color\": |border|,\n         })\n+        click: \".docblock .example-wrap.should_panic .tooltip\"\n \n         // ignore block\n         assert-css: ("}, {"sha": "09b3dfe282516f10b169e49e38b37d04a914c009", "filename": "tests/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d72de030f3c1287a363ff7cb134664a6bf3032/tests%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c1d72de030f3c1287a363ff7cb134664a6bf3032/tests%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fnotable-trait.goml?ref=c1d72de030f3c1287a363ff7cb134664a6bf3032", "patch": "@@ -134,7 +134,7 @@ define-function: (\n         reload:\n \n         move-cursor-to: \"//*[@id='method.create_an_iterator_from_read']//*[@class='tooltip']\"\n-        assert-count: (\".tooltip.popover\", 1)\n+        wait-for-count: (\".tooltip.popover\", 1)\n \n         assert-css: (\n              \".tooltip.popover h3\","}]}