{"sha": "7cfde9cfa95b0c466efe867e064d05fd8adea568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmRlOWNmYTk1YjBjNDY2ZWZlODY3ZTA2NGQwNWZkOGFkZWE1Njg=", "commit": {"author": {"name": "Giorgio Gambino", "email": "gambnio.giorgio@gmail.com", "date": "2018-10-28T14:37:39Z"}, "committer": {"name": "Giorgio Gambino", "email": "gambnio.giorgio@gmail.com", "date": "2018-10-28T14:37:39Z"}, "message": "Fix #3335: bool_comparison triggers 3 times on same code", "tree": {"sha": "df23ada99eb5db63a311caa564c9695b22e2d84a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df23ada99eb5db63a311caa564c9695b22e2d84a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfde9cfa95b0c466efe867e064d05fd8adea568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfde9cfa95b0c466efe867e064d05fd8adea568", "html_url": "https://github.com/rust-lang/rust/commit/7cfde9cfa95b0c466efe867e064d05fd8adea568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfde9cfa95b0c466efe867e064d05fd8adea568/comments", "author": null, "committer": null, "parents": [{"sha": "457e7f12e9fc028eae182f23b279194e5344b676", "url": "https://api.github.com/repos/rust-lang/rust/commits/457e7f12e9fc028eae182f23b279194e5344b676", "html_url": "https://github.com/rust-lang/rust/commit/457e7f12e9fc028eae182f23b279194e5344b676"}], "stats": {"total": 219, "additions": 146, "deletions": 73}, "files": [{"sha": "3afccf9f984d92763b8567b632ac6f0fe639ded6", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 51, "deletions": 49, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7cfde9cfa95b0c466efe867e064d05fd8adea568/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfde9cfa95b0c466efe867e064d05fd8adea568/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=7cfde9cfa95b0c466efe867e064d05fd8adea568", "patch": "@@ -17,7 +17,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::syntax::ast::LitKind;\n use crate::syntax::source_map::Spanned;\n-use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, span_lint, span_lint_and_sugg};\n use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n@@ -133,54 +133,56 @@ impl LintPass for BoolComparison {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use self::Expression::*;\n-        if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n-            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-                (Bool(true), Other) => {\n-                    let hint = snippet(cx, right_side.span, \"..\").into_owned();\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against true are unnecessary\",\n-                        \"try simplifying it as shown\",\n-                        hint,\n-                    );\n-                },\n-                (Other, Bool(true)) => {\n-                    let hint = snippet(cx, left_side.span, \"..\").into_owned();\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against true are unnecessary\",\n-                        \"try simplifying it as shown\",\n-                        hint,\n-                    );\n-                },\n-                (Bool(false), Other) => {\n-                    let hint = Sugg::hir(cx, right_side, \"..\");\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against false can be replaced by a negation\",\n-                        \"try simplifying it as shown\",\n-                        (!hint).to_string(),\n-                    );\n-                },\n-                (Other, Bool(false)) => {\n-                    let hint = Sugg::hir(cx, left_side, \"..\");\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against false can be replaced by a negation\",\n-                        \"try simplifying it as shown\",\n-                        (!hint).to_string(),\n-                    );\n-                },\n-                _ => (),\n+        if !in_macro(e.span) {\n+            use self::Expression::*;\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n+                match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+                    (Bool(true), Other) => {\n+                        let hint = snippet(cx, right_side.span, \"..\").into_owned();\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_COMPARISON,\n+                            e.span,\n+                            \"equality checks against true are unnecessary\",\n+                            \"try simplifying it as shown\",\n+                            hint,\n+                        );\n+                    },\n+                    (Other, Bool(true)) => {\n+                        let hint = snippet(cx, left_side.span, \"..\").into_owned();\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_COMPARISON,\n+                            e.span,\n+                            \"equality checks against true are unnecessary\",\n+                            \"try simplifying it as shown\",\n+                            hint,\n+                        );\n+                    },\n+                    (Bool(false), Other) => {\n+                        let hint = Sugg::hir(cx, right_side, \"..\");\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_COMPARISON,\n+                            e.span,\n+                            \"equality checks against false can be replaced by a negation\",\n+                            \"try simplifying it as shown\",\n+                            (!hint).to_string(),\n+                        );\n+                    },\n+                    (Other, Bool(false)) => {\n+                        let hint = Sugg::hir(cx, left_side, \"..\");\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_COMPARISON,\n+                            e.span,\n+                            \"equality checks against false can be replaced by a negation\",\n+                            \"try simplifying it as shown\",\n+                            (!hint).to_string(),\n+                        );\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }"}, {"sha": "aca4ccabf0ee1ca74ae65c24647bbf8e9d30e034", "filename": "tests/ui/needless_bool.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7cfde9cfa95b0c466efe867e064d05fd8adea568/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfde9cfa95b0c466efe867e064d05fd8adea568/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=7cfde9cfa95b0c466efe867e064d05fd8adea568", "patch": "@@ -8,9 +8,31 @@\n // except according to those terms.\n \n \n+#![warn(clippy::needless_bool)]\n \n+use std::cell::Cell;\n \n-#![warn(clippy::needless_bool)]\n+macro_rules! bool_comparison_trigger {\n+    ($($i:ident: $def:expr, $stb:expr );+  $(;)*) => (\n+\n+        #[derive(Clone)]\n+        pub struct Trigger {\n+            $($i: (Cell<bool>, bool, bool)),+\n+        }\n+\n+        #[allow(dead_code)]\n+        impl Trigger {\n+            pub fn trigger(&self, key: &str) -> bool {\n+                $(\n+                    if let stringify!($i) = key {\n+                        return self.$i.1 && self.$i.2 == $def;\n+                    }\n+                 )+\n+                false\n+            }\n+        }\n+    )\n+}\n \n #[allow(clippy::if_same_then_else)]\n fn main() {\n@@ -28,6 +50,9 @@ fn main() {\n     bool_ret5(x, x);\n     bool_ret4(x);\n     bool_ret6(x, x);\n+    needless_bool(x);\n+    needless_bool2(x);\n+    needless_bool3(x);\n }\n \n #[allow(clippy::if_same_then_else, clippy::needless_return)]\n@@ -59,3 +84,23 @@ fn bool_ret4(x: bool) -> bool {\n fn bool_ret6(x: bool, y: bool) -> bool {\n     if x && y { return false } else { return true };\n }\n+\n+fn needless_bool(x: bool) {\n+   if x  == true { };\n+}\n+\n+fn needless_bool2(x: bool) {\n+   if x  == false { };\n+}\n+\n+fn needless_bool3(x: bool) {\n+    \n+    bool_comparison_trigger! {\n+        test_one:   false, false;\n+        test_three: false, false;\n+        test_two:   true, true;\n+    }\n+    \n+    if x == true { };\n+    if x == false { };\n+}\n\\ No newline at end of file"}, {"sha": "638a3f56f0f288b425d83eaaa1766f981dde71ea", "filename": "tests/ui/needless_bool.stderr", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7cfde9cfa95b0c466efe867e064d05fd8adea568/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cfde9cfa95b0c466efe867e064d05fd8adea568/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=7cfde9cfa95b0c466efe867e064d05fd8adea568", "patch": "@@ -1,70 +1,96 @@\n error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:19:5\n+  --> $DIR/needless_bool.rs:41:5\n    |\n-19 |     if x { true } else { true };\n+41 |     if x { true } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:20:5\n+  --> $DIR/needless_bool.rs:42:5\n    |\n-20 |     if x { false } else { false };\n+42 |     if x { false } else { false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:21:5\n+  --> $DIR/needless_bool.rs:43:5\n    |\n-21 |     if x { true } else { false };\n+43 |     if x { true } else { false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:22:5\n+  --> $DIR/needless_bool.rs:44:5\n    |\n-22 |     if x { false } else { true };\n+44 |     if x { false } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:23:5\n+  --> $DIR/needless_bool.rs:45:5\n    |\n-23 |     if x && y { false } else { true };\n+45 |     if x && y { false } else { true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:35:5\n+  --> $DIR/needless_bool.rs:60:5\n    |\n-35 |     if x { return true } else { return true };\n+60 |     if x { return true } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:40:5\n+  --> $DIR/needless_bool.rs:65:5\n    |\n-40 |     if x { return false } else { return false };\n+65 |     if x { return false } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:45:5\n+  --> $DIR/needless_bool.rs:70:5\n    |\n-45 |     if x { return true } else { return false };\n+70 |     if x { return true } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:50:5\n+  --> $DIR/needless_bool.rs:75:5\n    |\n-50 |     if x && y { return true } else { return false };\n+75 |     if x && y { return true } else { return false };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:55:5\n+  --> $DIR/needless_bool.rs:80:5\n    |\n-55 |     if x { return false } else { return true };\n+80 |     if x { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:60:5\n+  --> $DIR/needless_bool.rs:85:5\n    |\n-60 |     if x && y { return false } else { return true };\n+85 |     if x && y { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !(x && y)`\n \n-error: aborting due to 11 previous errors\n+error: equality checks against true are unnecessary\n+  --> $DIR/needless_bool.rs:89:7\n+   |\n+89 |    if x  == true { };\n+   |       ^^^^^^^^^^ help: try simplifying it as shown: `x`\n+   |\n+   = note: `-D clippy::bool-comparison` implied by `-D warnings`\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/needless_bool.rs:93:7\n+   |\n+93 |    if x  == false { };\n+   |       ^^^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: equality checks against true are unnecessary\n+   --> $DIR/needless_bool.rs:104:8\n+    |\n+104 |     if x == true { };\n+    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: equality checks against false can be replaced by a negation\n+   --> $DIR/needless_bool.rs:105:8\n+    |\n+105 |     if x == false { };\n+    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: aborting due to 15 previous errors\n "}]}