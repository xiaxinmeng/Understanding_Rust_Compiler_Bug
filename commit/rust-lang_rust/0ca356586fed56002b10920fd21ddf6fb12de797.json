{"sha": "0ca356586fed56002b10920fd21ddf6fb12de797", "node_id": "C_kwDOAAsO6NoAKDBjYTM1NjU4NmZlZDU2MDAyYjEwOTIwZmQyMWRkZjZmYjEyZGU3OTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T19:55:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T19:55:48Z"}, "message": "Auto merge of #102741 - matthiaskrgr:rollup-63no5tz, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #98496 (make `compare_const_impl` a query and use it in `instance.rs`)\n - #102680 (Fix overconstrained Send impls in btree internals)\n - #102718 (Fix `opaque_hidden_inferred_bound` lint ICE)\n - #102725 (Remove `-Ztime`)\n - #102736 (Migrate search input color to CSS variable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a4f5d6f9698df459b090574a55c03ce6fc6b003d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f5d6f9698df459b090574a55c03ce6fc6b003d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ca356586fed56002b10920fd21ddf6fb12de797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca356586fed56002b10920fd21ddf6fb12de797", "html_url": "https://github.com/rust-lang/rust/commit/0ca356586fed56002b10920fd21ddf6fb12de797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ca356586fed56002b10920fd21ddf6fb12de797/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d46584fae1acc74566bf49fce976fe509a38f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d46584fae1acc74566bf49fce976fe509a38f5f", "html_url": "https://github.com/rust-lang/rust/commit/2d46584fae1acc74566bf49fce976fe509a38f5f"}, {"sha": "48964bdb872d08ed80f669afeaed52d9ac01e132", "url": "https://api.github.com/repos/rust-lang/rust/commits/48964bdb872d08ed80f669afeaed52d9ac01e132", "html_url": "https://github.com/rust-lang/rust/commit/48964bdb872d08ed80f669afeaed52d9ac01e132"}], "stats": {"total": 669, "additions": 500, "deletions": 169}, "files": [{"sha": "cef7bf1e8034d2ea09d9bd4d6c61edd20c7ab13d", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -573,7 +573,7 @@ pub(crate) fn run_pass_manager(\n     module: &mut ModuleCodegen<ModuleLlvm>,\n     thin: bool,\n ) -> Result<(), FatalError> {\n-    let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &*module.name);\n+    let _timer = cgcx.prof.verbose_generic_activity_with_arg(\"LLVM_lto_optimize\", &*module.name);\n     let config = cgcx.config(module.kind);\n \n     // Now we have one massive module inside of llmod. Time to run the"}, {"sha": "6188094bbbdd42a3d0011c9f66f62574163971da", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -1637,7 +1637,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         llvm_start_time: &mut Option<VerboseTimingGuard<'a>>,\n     ) {\n         if config.time_module && llvm_start_time.is_none() {\n-            *llvm_start_time = Some(prof.extra_verbose_generic_activity(\"LLVM_passes\", \"crate\"));\n+            *llvm_start_time = Some(prof.verbose_generic_activity(\"LLVM_passes\"));\n         }\n     }\n }"}, {"sha": "ba1960805d84bf0301539f5e50363a8859db4c9d", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -158,30 +158,21 @@ pub struct SelfProfilerRef {\n     // actually enabled.\n     event_filter_mask: EventFilter,\n \n-    // Print verbose generic activities to stdout\n+    // Print verbose generic activities to stderr?\n     print_verbose_generic_activities: bool,\n-\n-    // Print extra verbose generic activities to stdout\n-    print_extra_verbose_generic_activities: bool,\n }\n \n impl SelfProfilerRef {\n     pub fn new(\n         profiler: Option<Arc<SelfProfiler>>,\n         print_verbose_generic_activities: bool,\n-        print_extra_verbose_generic_activities: bool,\n     ) -> SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n         let event_filter_mask =\n             profiler.as_ref().map_or(EventFilter::empty(), |p| p.event_filter_mask);\n \n-        SelfProfilerRef {\n-            profiler,\n-            event_filter_mask,\n-            print_verbose_generic_activities,\n-            print_extra_verbose_generic_activities,\n-        }\n+        SelfProfilerRef { profiler, event_filter_mask, print_verbose_generic_activities }\n     }\n \n     /// This shim makes sure that calls only get executed if the filter mask\n@@ -214,7 +205,7 @@ impl SelfProfilerRef {\n     /// Start profiling a verbose generic activity. Profiling continues until the\n     /// VerboseTimingGuard returned from this call is dropped. In addition to recording\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n-    /// stdout if the compiler is invoked with -Ztime or -Ztime-passes.\n+    /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity<'a>(\n         &'a self,\n         event_label: &'static str,\n@@ -225,19 +216,16 @@ impl SelfProfilerRef {\n         VerboseTimingGuard::start(message, self.generic_activity(event_label))\n     }\n \n-    /// Start profiling an extra verbose generic activity. Profiling continues until the\n-    /// VerboseTimingGuard returned from this call is dropped. In addition to recording\n-    /// a measureme event, \"extra verbose\" generic activities also print a timing entry to\n-    /// stdout if the compiler is invoked with -Ztime-passes.\n-    pub fn extra_verbose_generic_activity<'a, A>(\n+    /// Like `verbose_generic_activity`, but with an extra arg.\n+    pub fn verbose_generic_activity_with_arg<'a, A>(\n         &'a self,\n         event_label: &'static str,\n         event_arg: A,\n     ) -> VerboseTimingGuard<'a>\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = if self.print_extra_verbose_generic_activities {\n+        let message = if self.print_verbose_generic_activities {\n             Some(format!(\"{}({})\", event_label, event_arg.borrow()))\n         } else {\n             None\n@@ -745,27 +733,9 @@ impl Drop for VerboseTimingGuard<'_> {\n         if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n             let end_rss = get_resident_set_size();\n             let dur = start_time.elapsed();\n-\n-            if should_print_passes(dur, start_rss, end_rss) {\n-                print_time_passes_entry(&message, dur, start_rss, end_rss);\n-            }\n-        }\n-    }\n-}\n-\n-fn should_print_passes(dur: Duration, start_rss: Option<usize>, end_rss: Option<usize>) -> bool {\n-    if dur.as_millis() > 5 {\n-        return true;\n-    }\n-\n-    if let (Some(start_rss), Some(end_rss)) = (start_rss, end_rss) {\n-        let change_rss = end_rss.abs_diff(start_rss);\n-        if change_rss > 0 {\n-            return true;\n+            print_time_passes_entry(&message, dur, start_rss, end_rss);\n         }\n     }\n-\n-    false\n }\n \n pub fn print_time_passes_entry(\n@@ -774,6 +744,26 @@ pub fn print_time_passes_entry(\n     start_rss: Option<usize>,\n     end_rss: Option<usize>,\n ) {\n+    // Print the pass if its duration is greater than 5 ms, or it changed the\n+    // measured RSS.\n+    let is_notable = || {\n+        if dur.as_millis() > 5 {\n+            return true;\n+        }\n+\n+        if let (Some(start_rss), Some(end_rss)) = (start_rss, end_rss) {\n+            let change_rss = end_rss.abs_diff(start_rss);\n+            if change_rss > 0 {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    };\n+    if !is_notable() {\n+        return;\n+    }\n+\n     let rss_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as usize;\n     let rss_change_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as i128;\n "}, {"sha": "7d5604fcabcc949107c98779194aa7014b7d1079", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -127,10 +127,13 @@ pub struct TimePassesCallbacks {\n }\n \n impl Callbacks for TimePassesCallbacks {\n+    // JUSTIFICATION: the session doesn't exist at this point.\n+    #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n-        // If a --prints=... option has been given, we don't print the \"total\"\n-        // time because it will mess up the --prints output. See #64339.\n-        self.time_passes = config.opts.prints.is_empty() && config.opts.time_passes();\n+        // If a --print=... option has been given, we don't print the \"total\"\n+        // time because it will mess up the --print output. See #64339.\n+        //\n+        self.time_passes = config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes;\n         config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }"}, {"sha": "7e28f22c0ba8b532d0a7e468c56a31446b9d7d0f", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -436,4 +436,5 @@ lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not\n \n lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its associated type bounds\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n-    .suggestion = add this bound\n+\n+lint_opaque_hidden_inferred_bound_sugg = add this bound"}, {"sha": "a2636f23a4f259672d776c8bb16bdde4f38b27a5", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -2,7 +2,7 @@ use crate::check::intrinsicck::InlineAsmCtxt;\n \n use super::coercion::CoerceMany;\n use super::compare_method::check_type_bounds;\n-use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n+use super::compare_method::{compare_impl_method, compare_ty_impl};\n use super::*;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n@@ -1048,14 +1048,10 @@ fn check_impl_items_against_trait<'tcx>(\n         let impl_item_full = tcx.hir().impl_item(impl_item.id);\n         match impl_item_full.kind {\n             hir::ImplItemKind::Const(..) => {\n-                // Find associated const definition.\n-                compare_const_impl(\n-                    tcx,\n-                    &ty_impl_item,\n-                    impl_item.span,\n-                    &ty_trait_item,\n-                    impl_trait_ref,\n-                );\n+                let _ = tcx.compare_assoc_const_impl_item_with_trait_item((\n+                    impl_item.id.def_id.def_id,\n+                    ty_impl_item.trait_item_def_id.unwrap(),\n+                ));\n             }\n             hir::ImplItemKind::Fn(..) => {\n                 let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);"}, {"sha": "d006948c587939eb201b9f74f22f447e51195747", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -1,6 +1,6 @@\n use super::potentially_plural_count;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, LocalDefId};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -1300,17 +1300,20 @@ fn compare_generic_param_kinds<'tcx>(\n     Ok(())\n }\n \n-pub(crate) fn compare_const_impl<'tcx>(\n+/// Use `tcx.compare_assoc_const_impl_item_with_trait_item` instead\n+pub(crate) fn raw_compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_c: &ty::AssocItem,\n-    impl_c_span: Span,\n-    trait_c: &ty::AssocItem,\n-    impl_trait_ref: ty::TraitRef<'tcx>,\n-) {\n+    (impl_const_item_def, trait_const_item_def): (LocalDefId, DefId),\n+) -> Result<(), ErrorGuaranteed> {\n+    let impl_const_item = tcx.associated_item(impl_const_item_def);\n+    let trait_const_item = tcx.associated_item(trait_const_item_def);\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_const_item.container_id(tcx)).unwrap();\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n+    let impl_c_span = tcx.def_span(impl_const_item_def.to_def_id());\n+\n     tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = tcx.param_env(impl_c.def_id);\n+        let param_env = tcx.param_env(impl_const_item_def.to_def_id());\n         let ocx = ObligationCtxt::new(&infcx);\n \n         // The below is for the most part highly similar to the procedure\n@@ -1322,18 +1325,18 @@ pub(crate) fn compare_const_impl<'tcx>(\n \n         // Create a parameter environment that represents the implementation's\n         // method.\n-        let impl_c_hir_id = tcx.hir().local_def_id_to_hir_id(impl_c.def_id.expect_local());\n+        let impl_c_hir_id = tcx.hir().local_def_id_to_hir_id(impl_const_item_def);\n \n         // Compute placeholder form of impl and trait const tys.\n-        let impl_ty = tcx.type_of(impl_c.def_id);\n-        let trait_ty = tcx.bound_type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n+        let impl_ty = tcx.type_of(impl_const_item_def.to_def_id());\n+        let trait_ty = tcx.bound_type_of(trait_const_item_def).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::new(\n             impl_c_span,\n             impl_c_hir_id,\n             ObligationCauseCode::CompareImplItemObligation {\n-                impl_item_def_id: impl_c.def_id.expect_local(),\n-                trait_item_def_id: trait_c.def_id,\n-                kind: impl_c.kind,\n+                impl_item_def_id: impl_const_item_def,\n+                trait_item_def_id: trait_const_item_def,\n+                kind: impl_const_item.kind,\n             },\n         );\n \n@@ -1358,24 +1361,24 @@ pub(crate) fn compare_const_impl<'tcx>(\n             );\n \n             // Locate the Span containing just the type of the offending impl\n-            match tcx.hir().expect_impl_item(impl_c.def_id.expect_local()).kind {\n+            match tcx.hir().expect_impl_item(impl_const_item_def).kind {\n                 ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n-                _ => bug!(\"{:?} is not a impl const\", impl_c),\n+                _ => bug!(\"{:?} is not a impl const\", impl_const_item),\n             }\n \n             let mut diag = struct_span_err!(\n                 tcx.sess,\n                 cause.span,\n                 E0326,\n                 \"implemented const `{}` has an incompatible type for trait\",\n-                trait_c.name\n+                trait_const_item.name\n             );\n \n-            let trait_c_span = trait_c.def_id.as_local().map(|trait_c_def_id| {\n+            let trait_c_span = trait_const_item_def.as_local().map(|trait_c_def_id| {\n                 // Add a label to the Span containing just the type of the const\n                 match tcx.hir().expect_trait_item(trait_c_def_id).kind {\n                     TraitItemKind::Const(ref ty, _) => ty.span,\n-                    _ => bug!(\"{:?} is not a trait const\", trait_c),\n+                    _ => bug!(\"{:?} is not a trait const\", trait_const_item),\n                 }\n             });\n \n@@ -1391,23 +1394,22 @@ pub(crate) fn compare_const_impl<'tcx>(\n                 false,\n                 false,\n             );\n-            diag.emit();\n-        }\n+            return Err(diag.emit());\n+        };\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return;\n+            return Err(infcx.report_fulfillment_errors(&errors, None, false));\n         }\n \n+        // FIXME return `ErrorReported` if region obligations error?\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        infcx.check_region_obligations_and_report_errors(\n-            impl_c.def_id.expect_local(),\n-            &outlives_environment,\n-        );\n-    });\n+        infcx\n+            .check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment);\n+        Ok(())\n+    })\n }\n \n pub(crate) fn compare_ty_impl<'tcx>("}, {"sha": "04e8c9c22d15930cb4b2902abfd4762cc0be02cf", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -251,6 +251,7 @@ pub fn provide(providers: &mut Providers) {\n         check_mod_item_types,\n         region_scope_tree,\n         collect_trait_impl_trait_tys,\n+        compare_assoc_const_impl_item_with_trait_item: compare_method::raw_compare_const_impl,\n         ..*providers\n     };\n }"}, {"sha": "98eeaad976fe18316a05fa085b89bcf0eafe6513", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -692,7 +692,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(span_free_formats, true);\n     untracked!(temps_dir, Some(String::from(\"abc\")));\n     untracked!(threads, 99);\n-    untracked!(time, true);\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n     untracked!(trace_macros, true);"}, {"sha": "aee870dd29d652bb533ae8f3f231a655c293b664", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -409,7 +409,7 @@ pub fn check_ast_node<'a>(\n     if sess.opts.unstable_opts.no_interleave_lints {\n         for (i, pass) in passes.iter_mut().enumerate() {\n             buffered =\n-                sess.prof.extra_verbose_generic_activity(\"run_lint\", pass.name()).run(|| {\n+                sess.prof.verbose_generic_activity_with_arg(\"run_lint\", pass.name()).run(|| {\n                     early_lint_node(\n                         sess,\n                         !pre_expansion && i == 0,"}, {"sha": "d4e19ef6b223f8d0f61d1c57f3dd97bd5739843f", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -425,20 +425,23 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints\n         late_lint_pass_crate(tcx, builtin_lints);\n     } else {\n         for pass in &mut passes {\n-            tcx.sess.prof.extra_verbose_generic_activity(\"run_late_lint\", pass.name()).run(|| {\n-                late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-            });\n+            tcx.sess.prof.verbose_generic_activity_with_arg(\"run_late_lint\", pass.name()).run(\n+                || {\n+                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n+                },\n+            );\n         }\n \n         let mut passes: Vec<_> =\n             unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n \n         for pass in &mut passes {\n-            tcx.sess.prof.extra_verbose_generic_activity(\"run_late_module_lint\", pass.name()).run(\n-                || {\n+            tcx.sess\n+                .prof\n+                .verbose_generic_activity_with_arg(\"run_late_module_lint\", pass.name())\n+                .run(|| {\n                     late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                },\n-            );\n+                });\n         }\n     }\n }"}, {"sha": "31705624a7fef9110f192c6df88ba502f2d8b564", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -1,7 +1,9 @@\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_macros::LintDiagnostic;\n-use rustc_middle::ty::{self, fold::BottomUpFolder, Ty, TypeFoldable};\n+use rustc_macros::{LintDiagnostic, Subdiagnostic};\n+use rustc_middle::ty::{\n+    self, fold::BottomUpFolder, print::TraitPredPrintModifiersAndPath, Ty, TypeFoldable,\n+};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -117,13 +119,13 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     )) {\n                         // If it's a trait bound and an opaque that doesn't satisfy it,\n                         // then we can emit a suggestion to add the bound.\n-                        let (suggestion, suggest_span) =\n+                        let add_bound =\n                             match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n-                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => (\n-                                    format!(\" + {}\", trait_pred.print_modifiers_and_trait_path()),\n-                                    Some(cx.tcx.def_span(def_id).shrink_to_hi()),\n-                                ),\n-                                _ => (String::new(), None),\n+                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => Some(AddBound {\n+                                    suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),\n+                                    trait_ref: trait_pred.print_modifiers_and_trait_path(),\n+                                }),\n+                                _ => None,\n                             };\n                         cx.emit_spanned_lint(\n                             OPAQUE_HIDDEN_INFERRED_BOUND,\n@@ -132,8 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                                 ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n                                 proj_ty: proj_term,\n                                 assoc_pred_span,\n-                                suggestion,\n-                                suggest_span,\n+                                add_bound,\n                             },\n                         );\n                     }\n@@ -150,7 +151,19 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n     proj_ty: Ty<'tcx>,\n     #[label(lint::specifically)]\n     assoc_pred_span: Span,\n-    #[suggestion_verbose(applicability = \"machine-applicable\", code = \"{suggestion}\")]\n-    suggest_span: Option<Span>,\n-    suggestion: String,\n+    #[subdiagnostic]\n+    add_bound: Option<AddBound<'tcx>>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_verbose(\n+    lint::opaque_hidden_inferred_bound_sugg,\n+    applicability = \"machine-applicable\",\n+    code = \" + {trait_ref}\"\n+)]\n+struct AddBound<'tcx> {\n+    #[primary_span]\n+    suggest_span: Span,\n+    #[skip_arg]\n+    trait_ref: TraitPredPrintModifiersAndPath<'tcx>,\n }"}, {"sha": "334eb953cbcb45f2d138b1f49f1bcd7a18669ebc", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -2105,4 +2105,10 @@ rustc_queries! {\n     query permits_zero_init(key: TyAndLayout<'tcx>) -> bool {\n         desc { \"checking to see if {:?} permits being left zeroed\", key.ty }\n     }\n+\n+    query compare_assoc_const_impl_item_with_trait_item(\n+        key: (LocalDefId, DefId)\n+    ) -> Result<(), ErrorGuaranteed> {\n+        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.to_def_id()) }\n+    }\n }"}, {"sha": "e96ea682caecea447cdde244dd2a7fde1e87e1d5", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -1067,7 +1067,7 @@ pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n     let _timer = tcx\n         .dep_context()\n         .profiler()\n-        .extra_verbose_generic_activity(\"encode_query_results_for\", std::any::type_name::<Q>());\n+        .verbose_generic_activity_with_arg(\"encode_query_results_for\", std::any::type_name::<Q>());\n \n     assert!(Q::query_state(tcx).all_inactive());\n     let cache = Q::query_cache(tcx);"}, {"sha": "8d527c05122d1a1f3af2e58c3d18a6b688cff5d2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -280,14 +280,6 @@ macro_rules! options {\n \n ) }\n \n-impl Options {\n-    // JUSTIFICATION: defn of the suggested wrapper fn\n-    #[allow(rustc::bad_opt_access)]\n-    pub fn time_passes(&self) -> bool {\n-        self.unstable_opts.time_passes || self.unstable_opts.time\n-    }\n-}\n-\n impl CodegenOptions {\n     // JUSTIFICATION: defn of the suggested wrapper fn\n     #[allow(rustc::bad_opt_access)]\n@@ -1596,9 +1588,6 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\")]\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n-    time: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of rustc processes (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\")]\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each LLVM pass (default: no)\"),"}, {"sha": "5926cdc9dad9acbf2eed32a644a63ec66f251f4d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -606,10 +606,6 @@ impl Session {\n         self.parse_sess.source_map()\n     }\n \n-    pub fn time_passes(&self) -> bool {\n-        self.opts.time_passes()\n-    }\n-\n     /// Returns `true` if internal lints should be added to the lint store - i.e. if\n     /// `-Zunstable-options` is provided and this isn't rustdoc (internal lints can trigger errors\n     /// to be emitted under rustdoc).\n@@ -927,6 +923,10 @@ impl Session {\n         self.opts.unstable_opts.instrument_mcount\n     }\n \n+    pub fn time_passes(&self) -> bool {\n+        self.opts.unstable_opts.time_passes\n+    }\n+\n     pub fn time_llvm_passes(&self) -> bool {\n         self.opts.unstable_opts.time_llvm_passes\n     }\n@@ -1403,8 +1403,7 @@ pub fn build_session(\n         CguReuseTracker::new_disabled()\n     };\n \n-    let prof =\n-        SelfProfilerRef::new(self_profiler, sopts.time_passes(), sopts.unstable_opts.time_passes);\n+    let prof = SelfProfilerRef::new(self_profiler, sopts.unstable_opts.time_passes);\n \n     let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n         Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,"}, {"sha": "fe6ebd4b93568388269d0e23c5aa66d0870d619b", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -186,40 +186,14 @@ fn resolve_associated_item<'tcx>(\n             // a `trait` to an associated `const` definition in an `impl`, where\n             // the definition in the `impl` has the wrong type (for which an\n             // error has already been/will be emitted elsewhere).\n-            //\n-            // NB: this may be expensive, we try to skip it in all the cases where\n-            // we know the error would've been caught (e.g. in an upstream crate).\n-            //\n-            // A better approach might be to just introduce a query (returning\n-            // `Result<(), ErrorGuaranteed>`) for the check that `rustc_hir_analysis`\n-            // performs (i.e. that the definition's type in the `impl` matches\n-            // the declaration in the `trait`), so that we can cheaply check\n-            // here if it failed, instead of approximating it.\n             if leaf_def.item.kind == ty::AssocKind::Const\n                 && trait_item_id != leaf_def.item.def_id\n-                && leaf_def.item.def_id.is_local()\n+                && let Some(leaf_def_item) = leaf_def.item.def_id.as_local()\n             {\n-                let normalized_type_of = |def_id, substs| {\n-                    tcx.subst_and_normalize_erasing_regions(substs, param_env, tcx.type_of(def_id))\n-                };\n-\n-                let original_ty = normalized_type_of(trait_item_id, rcvr_substs);\n-                let resolved_ty = normalized_type_of(leaf_def.item.def_id, substs);\n-\n-                if original_ty != resolved_ty {\n-                    let msg = format!(\n-                        \"Instance::resolve: inconsistent associated `const` type: \\\n-                         was `{}: {}` but resolved to `{}: {}`\",\n-                        tcx.def_path_str_with_substs(trait_item_id, rcvr_substs),\n-                        original_ty,\n-                        tcx.def_path_str_with_substs(leaf_def.item.def_id, substs),\n-                        resolved_ty,\n-                    );\n-                    let span = tcx.def_span(leaf_def.item.def_id);\n-                    let reported = tcx.sess.delay_span_bug(span, &msg);\n-\n-                    return Err(reported);\n-                }\n+                tcx.compare_assoc_const_impl_item_with_trait_item((\n+                    leaf_def_item,\n+                    trait_item_id,\n+                ))?;\n             }\n \n             Some(ty::Instance::new(leaf_def.item.def_id, substs))"}, {"sha": "0ddc154fbebbfc38191b01de9b8a219e3a019bcc", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(let_chains)]\n #![feature(control_flow_enum)]\n #![feature(never_type)]\n #![feature(box_patterns)]"}, {"sha": "da766b67a328f6b0a0356c28d397005768ff8935", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -206,9 +206,9 @@ impl<'a, K: 'a, V: 'a, Type> Clone for NodeRef<marker::Immut<'a>, K, V, Type> {\n \n unsafe impl<BorrowType, K: Sync, V: Sync, Type> Sync for NodeRef<BorrowType, K, V, Type> {}\n \n-unsafe impl<'a, K: Sync + 'a, V: Sync + 'a, Type> Send for NodeRef<marker::Immut<'a>, K, V, Type> {}\n-unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::Mut<'a>, K, V, Type> {}\n-unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::ValMut<'a>, K, V, Type> {}\n+unsafe impl<K: Sync, V: Sync, Type> Send for NodeRef<marker::Immut<'_>, K, V, Type> {}\n+unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Mut<'_>, K, V, Type> {}\n+unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::ValMut<'_>, K, V, Type> {}\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Owned, K, V, Type> {}\n unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Dying, K, V, Type> {}\n "}, {"sha": "8ff5f0abe73dd013aa31bc76d3d03f6475c97816", "filename": "library/alloc/tests/autotraits.rs", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Ftests%2Fautotraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Ftests%2Fautotraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fautotraits.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -0,0 +1,293 @@\n+fn require_sync<T: Sync>(_: T) {}\n+fn require_send_sync<T: Send + Sync>(_: T) {}\n+\n+struct NotSend(*const ());\n+unsafe impl Sync for NotSend {}\n+\n+#[test]\n+fn test_btree_map() {\n+    // Tests of this form are prone to https://github.com/rust-lang/rust/issues/64552.\n+    //\n+    // In theory the async block's future would be Send if the value we hold\n+    // across the await point is Send, and Sync if the value we hold across the\n+    // await point is Sync.\n+    //\n+    // We test autotraits in this convoluted way, instead of a straightforward\n+    // `require_send_sync::<TypeIWantToTest>()`, because the interaction with\n+    // generators exposes some current limitations in rustc's ability to prove a\n+    // lifetime bound on the erased generator witness types. See the above link.\n+    //\n+    // A typical way this would surface in real code is:\n+    //\n+    //     fn spawn<T: Future + Send>(_: T) {}\n+    //\n+    //     async fn f() {\n+    //         let map = BTreeMap::<u32, Box<dyn Send + Sync>>::new();\n+    //         for _ in &map {\n+    //             async {}.await;\n+    //         }\n+    //     }\n+    //\n+    //     fn main() {\n+    //         spawn(f());\n+    //     }\n+    //\n+    // where with some unintentionally overconstrained Send impls in liballoc's\n+    // internals, the future might incorrectly not be Send even though every\n+    // single type involved in the program is Send and Sync.\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Iter<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    // Testing like this would not catch all issues that the above form catches.\n+    require_send_sync(None::<alloc::collections::btree_map::Iter<'_, &u32, &u32>>);\n+\n+    require_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Iter<'_, u32, NotSend>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::BTreeMap<&u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<\n+            alloc::collections::btree_map::DrainFilter<\n+                '_,\n+                &u32,\n+                &u32,\n+                fn(&&u32, &mut &u32) -> bool,\n+            >,\n+        >;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Entry<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::IntoIter<&u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::IntoKeys<&u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::IntoValues<&u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Iter<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::IterMut<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Keys<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::OccupiedEntry<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::OccupiedError<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Range<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::RangeMut<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::VacantEntry<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::Values<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_map::ValuesMut<'_, &u32, &u32>>;\n+        async {}.await;\n+    });\n+}\n+\n+#[test]\n+fn test_btree_set() {\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::BTreeSet<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::Difference<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::DrainFilter<'_, &u32, fn(&&u32) -> bool>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::Intersection<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::IntoIter<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::Iter<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::Range<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::SymmetricDifference<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::btree_set::Union<'_, &u32>>;\n+        async {}.await;\n+    });\n+}\n+\n+#[test]\n+fn test_binary_heap() {\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::BinaryHeap<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::Drain<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::DrainSorted<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::IntoIter<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::IntoIterSorted<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::Iter<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::binary_heap::PeekMut<'_, &u32>>;\n+        async {}.await;\n+    });\n+}\n+\n+#[test]\n+fn test_linked_list() {\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::Cursor<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::CursorMut<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    // FIXME\n+    /*\n+    require_send_sync(async {\n+        let _v =\n+            None::<alloc::collections::linked_list::DrainFilter<'_, &u32, fn(&mut &u32) -> bool>>;\n+        async {}.await;\n+    });\n+    */\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::IntoIter<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::Iter<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::IterMut<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::linked_list::LinkedList<&u32>>;\n+        async {}.await;\n+    });\n+}\n+\n+#[test]\n+fn test_vec_deque() {\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::vec_deque::Drain<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::vec_deque::IntoIter<&u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::vec_deque::Iter<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::vec_deque::IterMut<'_, &u32>>;\n+        async {}.await;\n+    });\n+\n+    require_send_sync(async {\n+        let _v = None::<alloc::collections::vec_deque::VecDeque<&u32>>;\n+        async {}.await;\n+    });\n+}"}, {"sha": "ffc5ca7a5c6cc1de574f8a80a86b302c15603014", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -2,6 +2,7 @@\n #![feature(alloc_layout_extra)]\n #![feature(assert_matches)]\n #![feature(box_syntax)]\n+#![feature(btree_drain_filter)]\n #![feature(cow_is_borrowed)]\n #![feature(const_box)]\n #![feature(const_convert)]\n@@ -14,6 +15,8 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n+#![feature(linked_list_cursors)]\n+#![feature(map_try_insert)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n@@ -49,6 +52,7 @@ use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n \n mod arc;\n+mod autotraits;\n mod borrow;\n mod boxed;\n mod btree_set_hash;"}, {"sha": "776d73b98c4f10de545de5efcc7219957c261459", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -67,7 +67,7 @@ fn main() {\n             if target == \"all\"\n                 || target.into_string().unwrap().split(',').any(|c| c.trim() == crate_name)\n             {\n-                cmd.arg(\"-Ztime\");\n+                cmd.arg(\"-Ztime-passes\");\n             }\n         }\n     }"}, {"sha": "2d12cf382b160c6bdbece1b770c32af3201f5d37", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -300,7 +300,7 @@ _Note:_ The order of these lint level arguments is taken into account, see [lint\n ## `-Z`: set unstable options\n \n This flag will allow you to set unstable options of rustc. In order to set multiple options,\n-the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time`.\n+the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time-passes`.\n Specifying options with -Z is only available on nightly. To view all available options\n run: `rustc -Z help`.\n "}, {"sha": "6f9cc026675b638795dcb9c09dc2d2bc2a2ff96d", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n     let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n-        .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n+        .verbose_generic_activity_with_arg(\"create_renderer\", T::descr())\n         .run(|| T::init(krate, options, cache, tcx))?;\n \n     if !emit_crate {\n@@ -92,6 +92,6 @@ pub(crate) fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n                 .run(|| cx.item(item))?;\n         }\n     }\n-    prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n+    prof.verbose_generic_activity_with_arg(\"renderer_after_krate\", T::descr())\n         .run(|| format_renderer.after_krate())\n }"}, {"sha": "28e968c9ff5f96ba0712cd2ba862a4e4acc915eb", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -914,6 +914,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tfont-size: 1rem;\n \twidth: 100%;\n \tbackground-color: var(--button-background-color);\n+\tcolor: var(--search-color);\n }\n .search-input:focus {\n \tborder-color: var(--search-input-focused-border-color);"}, {"sha": "0975d497cb23c48a98584e0f52261c8b627ca077", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -40,6 +40,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--search-result-link-focus-background-color: #3c3c3c;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n+\t--search-color: #fff;\n }\n \n .slider {\n@@ -149,10 +150,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(98%) sepia(12%) saturate(81%) hue-rotate(343deg) brightness(113%) contrast(76%);\n }\n \n-.search-input {\n-\tcolor: #fff;\n-}\n-\n .module-item .stab,\n .import-item .stab {\n \tcolor: #000;"}, {"sha": "ee2a9ec8a0beeb399570d0442a7fce41d7345157", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -35,6 +35,7 @@\n \t--search-result-link-focus-background-color: #616161;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n+\t--search-color: #111;\n }\n \n .slider {\n@@ -72,10 +73,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-.search-input {\n-\tcolor: #111;\n-}\n-\n #crate-search-div::after {\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \tfilter: invert(94%) sepia(0%) saturate(721%) hue-rotate(255deg) brightness(90%) contrast(90%);"}, {"sha": "7287d5b62123bfea4556a02012f4173b62e74d93", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -35,6 +35,7 @@\n \t--search-result-link-focus-background-color: #ccc;\n \t--stab-background-color: #fff5d6;\n \t--stab-code-color: #000;\n+\t--search-color: #000;\n }\n \n .slider {"}, {"sha": "65536cb3aa1354c00bf30e4a304cb0d4603f1623", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -170,7 +170,6 @@\n     -Z                                 thinlto=val -- enable ThinLTO when possible\n     -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n     -Z                                 threads=val -- use a thread pool with N threads\n-    -Z                                    time=val -- measure time of rustc processes (default: no)\n     -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)"}, {"sha": "742b81535dfdf4e0cdc67966cfe6b63840e0b944", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -2,7 +2,7 @@ error[E0308]: const not compatible with trait\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:7:5\n    |\n LL |     const NAME: &'a str = \"unit\";\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected reference `&'static str`\n               found reference `&'a str`"}, {"sha": "4dc6c2e47a9eab522d67ac8666a3c9dbd9883ce2", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    type ArrayType;\n+    const SIZE: usize;\n+    const ARRAY: Self::ArrayType;\n+}\n+impl MyTrait for () {\n+    type ArrayType = [u8; Self::SIZE];\n+    const SIZE: usize = 4;\n+    const ARRAY: [u8; Self::SIZE] = [1, 2, 3, 4];\n+}\n+\n+fn main() {\n+    let _ = <() as MyTrait>::ARRAY;\n+}"}, {"sha": "539becfdc7c8287763b38b31e4350d0ca50bf9d5", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+trait Trait {\n+    const ASSOC: fn(&'static u32);\n+}\n+impl Trait for () {\n+    const ASSOC: for<'a> fn(&'a u32) = |_| ();\n+}\n+\n+fn main() {\n+    let _ = <() as Trait>::ASSOC;\n+}"}, {"sha": "17bcc8fe5768ceb917d754229ddbdb571dd3467c", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+trait Trait {\n+    const ASSOC: for<'a, 'b> fn(&'a u32, &'b u32);\n+}\n+impl Trait for () {\n+    const ASSOC: for<'a> fn(&'a u32, &'a u32) = |_, _| ();\n+}\n+\n+fn main() {\n+    let _ = <() as Trait>::ASSOC;\n+}"}, {"sha": "5bcc8950adafbf5d38c668421bee899bddea2015", "filename": "src/test/ui/lint/issue-102705.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![allow(opaque_hidden_inferred_bound)]\n+#![allow(dead_code)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+fn foo() -> impl Trait<Assoc = impl Send> {\n+    || 42\n+}\n+\n+fn main() {}"}, {"sha": "cf1c52ba7cc4332ed4af63137b31bd60c8867cde", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca356586fed56002b10920fd21ddf6fb12de797/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=0ca356586fed56002b10920fd21ddf6fb12de797", "patch": "@@ -2,7 +2,7 @@ error[E0308]: const not compatible with trait\n   --> $DIR/trait-associated-constant.rs:21:5\n    |\n LL |     const AC: Option<&'c str> = None;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected enum `Option<&'b str>`\n               found enum `Option<&'c str>`"}]}