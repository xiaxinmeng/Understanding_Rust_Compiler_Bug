{"sha": "1cca4204357454dbf2e2b7f57f9f024631da209f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjY2E0MjA0MzU3NDU0ZGJmMmUyYjdmNTdmOWYwMjQ2MzFkYTIwOWY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-27T14:50:28Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-27T14:50:28Z"}, "message": "Use slices where a vector is not necessary", "tree": {"sha": "d53c0935f32ed2d688a59b0c42bc18cc0cb5806b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d53c0935f32ed2d688a59b0c42bc18cc0cb5806b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cca4204357454dbf2e2b7f57f9f024631da209f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cca4204357454dbf2e2b7f57f9f024631da209f", "html_url": "https://github.com/rust-lang/rust/commit/1cca4204357454dbf2e2b7f57f9f024631da209f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cca4204357454dbf2e2b7f57f9f024631da209f/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b18b9edf006c10f4e08794d31425001401e27a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b9edf006c10f4e08794d31425001401e27a09", "html_url": "https://github.com/rust-lang/rust/commit/b18b9edf006c10f4e08794d31425001401e27a09"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "7e2c5d03d6b2430d9cc2017d02531a0644a469da", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -746,7 +746,7 @@ impl<'a> LoweringContext<'a> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &Vec<GenericParam>, f: F) -> T\n+    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n@@ -2237,7 +2237,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_generic_params(\n         &mut self,\n-        params: &Vec<GenericParam>,\n+        params: &[GenericParam],\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {"}, {"sha": "05361b6564170dff4f501217eb13baf8384bc164", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -396,7 +396,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n pub fn hash_stable_trait_impls<'a, 'gcx, W, R>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n-    blanket_impls: &Vec<DefId>,\n+    blanket_impls: &[DefId],\n     non_blanket_impls: &HashMap<fast_reject::SimplifiedType, Vec<DefId>, R>)\n     where W: StableHasherResult,\n           R: std_hash::BuildHasher,"}, {"sha": "5f8a2208bb04001f07f33dc235ea37614e19505c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -48,7 +48,7 @@ use syntax_pos::{DUMMY_SP, Span};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n-                                     errors: &Vec<FulfillmentError<'tcx>>,\n+                                     errors: &[FulfillmentError<'tcx>],\n                                      body_id: Option<hir::BodyId>,\n                                      fallback_has_occurred: bool) {\n         #[derive(Debug)]\n@@ -1015,7 +1015,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx> {\n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n-        let args_str = |arguments: &Vec<ArgKind>, other: &Vec<ArgKind>| {\n+        let args_str = |arguments: &[ArgKind], other: &[ArgKind]| {\n             let arg_length = arguments.len();\n             let distinct = match &other[..] {\n                 &[ArgKind::Tuple(..)] => true,"}, {"sha": "b217e6a856471bea7389271c13c1e9d755ba3b17", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -68,7 +68,7 @@ pub struct GroupedMoveErrors<'tcx> {\n     move_to_places: Vec<MovePlace<'tcx>>\n }\n \n-fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<MoveError<'tcx>>) {\n+fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveError<'tcx>]) {\n     let grouped_errors = group_errors_with_same_origin(errors);\n     for error in &grouped_errors {\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n@@ -103,7 +103,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n     }\n }\n \n-fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n+fn group_errors_with_same_origin<'tcx>(errors: &[MoveError<'tcx>])\n                                        -> Vec<GroupedMoveErrors<'tcx>> {\n     let mut grouped_errors = Vec::new();\n     for error in errors {"}, {"sha": "1592722a0b2132397afaab2c8be94517eb3ea979", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -1395,7 +1395,7 @@ fn generated_output_paths(\n \n // Runs `f` on every output file path and returns the first non-None result, or None if `f`\n // returns None for every file path.\n-fn check_output<F, T>(output_paths: &Vec<PathBuf>, f: F) -> Option<T>\n+fn check_output<F, T>(output_paths: &[PathBuf], f: F) -> Option<T>\n where\n     F: Fn(&PathBuf) -> Option<T>,\n {\n@@ -1407,7 +1407,7 @@ where\n     None\n }\n \n-pub fn output_contains_path(output_paths: &Vec<PathBuf>, input_path: &PathBuf) -> bool {\n+pub fn output_contains_path(output_paths: &[PathBuf], input_path: &PathBuf) -> bool {\n     let input_path = input_path.canonicalize().ok();\n     if input_path.is_none() {\n         return false;\n@@ -1422,7 +1422,7 @@ pub fn output_contains_path(output_paths: &Vec<PathBuf>, input_path: &PathBuf) -\n     check_output(output_paths, check).is_some()\n }\n \n-pub fn output_conflicts_with_dir(output_paths: &Vec<PathBuf>) -> Option<PathBuf> {\n+pub fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n     let check = |output_path: &PathBuf| {\n         if output_path.is_dir() {\n             Some(output_path.clone())\n@@ -1433,7 +1433,7 @@ pub fn output_conflicts_with_dir(output_paths: &Vec<PathBuf>) -> Option<PathBuf>\n     check_output(output_paths, check)\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &Vec<PathBuf>) {\n+fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;"}, {"sha": "2ec85e1c27f1d7c12db973183ada1ff7e0fd65e0", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -62,7 +62,7 @@ struct StackFrame {\n     pub traces:   Vec<trace::Rec>,\n }\n \n-fn total_duration(traces: &Vec<trace::Rec>) -> Duration {\n+fn total_duration(traces: &[trace::Rec]) -> Duration {\n     let mut sum : Duration = Duration::new(0,0);\n     for t in traces.iter() { sum += t.dur_total; }\n     return sum"}, {"sha": "ecd2f4d916d15ff1844a8c49ae07564fd5248aa2", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -107,7 +107,7 @@ fn html_of_fraction(frac: f64) -> (String, String) {\n     else { (format!(\"< 0.1%\", ), css) }\n }\n \n-fn total_duration(traces: &Vec<Rec>) -> Duration {\n+fn total_duration(traces: &[Rec]) -> Duration {\n     let mut sum : Duration = Duration::new(0,0);\n     for t in traces.iter() {\n         sum += t.dur_total;\n@@ -123,7 +123,7 @@ fn duration_div(nom: Duration, den: Duration) -> f64 {\n     to_nanos(nom) as f64 / to_nanos(den) as f64\n }\n \n-fn write_traces_rec(file: &mut File, traces: &Vec<Rec>, total: Duration, depth: usize) {\n+fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usize) {\n     for t in traces {\n         let (eff_text, eff_css_classes) = html_of_effect(&t.effect);\n         let (dur_text, dur_css_classes) = html_of_duration(&t.start, &t.dur_total);\n@@ -149,7 +149,7 @@ fn write_traces_rec(file: &mut File, traces: &Vec<Rec>, total: Duration, depth:\n     }\n }\n \n-fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec>) {\n+fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec]) {\n     for t in traces.iter() {\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {\n@@ -218,7 +218,7 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n     }\n }\n \n-pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &Vec<Rec>) {\n+pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &[Rec]) {\n     let capacity = traces.iter().fold(0, |acc, t| acc + 1 + t.extent.len());\n     let mut counts : HashMap<String, QueryMetric> = HashMap::with_capacity(capacity);\n     compute_counts_rec(&mut counts, traces);"}, {"sha": "f54626d6a202427840aa8c811d3a2dbd7fcc2bc2", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -749,7 +749,7 @@ impl EmitterWriter {\n         max\n     }\n \n-    fn get_max_line_num(&mut self, span: &MultiSpan, children: &Vec<SubDiagnostic>) -> usize {\n+    fn get_max_line_num(&mut self, span: &MultiSpan, children: &[SubDiagnostic]) -> usize {\n         let mut max = 0;\n \n         let primary = self.get_multispan_max_line_num(span);\n@@ -954,7 +954,7 @@ impl EmitterWriter {\n \n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n-                            msg: &Vec<(String, Style)>,\n+                            msg: &[(String, Style)],\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n                             max_line_num_len: usize,\n@@ -1317,10 +1317,10 @@ impl EmitterWriter {\n \n     fn emit_messages_default(&mut self,\n                              level: &Level,\n-                             message: &Vec<(String, Style)>,\n+                             message: &[(String, Style)],\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n-                             children: &Vec<SubDiagnostic>,\n+                             children: &[SubDiagnostic],\n                              suggestions: &[CodeSuggestion]) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n@@ -1433,7 +1433,7 @@ fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n     num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n }\n \n-fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n+fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n                        lvl: &Level,\n                        dst: &mut Destination,\n                        short_message: bool)"}, {"sha": "8eb052f88e124c5902c02f90953488a840d9349d", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -120,7 +120,7 @@ struct FactWriter<'w> {\n impl<'w> FactWriter<'w> {\n     fn write_facts_to_path<T>(\n         &self,\n-        rows: &Vec<T>,\n+        rows: &[T],\n         file_name: &str,\n     ) -> Result<(), Box<dyn Error>>\n     where"}, {"sha": "d750c1f47a662f5deb968d4289755e4d96f1f2d3", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         self.eval_fn_call(\n             instance,\n             Some((Place::undef(), target)),\n-            &vec![valty],\n+            &[valty],\n             span,\n             fn_sig,\n         )"}, {"sha": "7a8c35e7b96f5fec18117b675fa9ed8075fc5b6e", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -222,7 +222,7 @@ impl RestoreSubsliceArrayMoveOut {\n     // indices is an integer interval. If all checks pass do the replacent.\n     // items are Vec<Option<LocalUse, index in source array, source place for init local>>\n     fn check_and_patch<'tcx>(candidate: Location,\n-                             items: &Vec<Option<(&LocalUse, u32, &Place<'tcx>)>>,\n+                             items: &[Option<(&LocalUse, u32, &Place<'tcx>)>],\n                              opt_size: Option<u64>,\n                              patch: &mut MirPatch<'tcx>,\n                              dst_place: &Place<'tcx>) {"}, {"sha": "c6bad9e1980fb8b9627b3137da0409d57f376ff9", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -147,7 +147,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n+    fn check_late_bound_lifetime_defs(&self, params: &[GenericParam]) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n         let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {"}, {"sha": "29b6f958cc119c64719964bafcf04f50b569ec55", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -783,7 +783,7 @@ impl<'a> Resolver<'a> {\n                 }\n             };\n             let ident = Ident::new(Symbol::intern(name), span);\n-            self.lookup_typo_candidate(&vec![ident], MacroNS, is_macro, span)\n+            self.lookup_typo_candidate(&[ident], MacroNS, is_macro, span)\n         });\n \n         if let Some(suggestion) = suggestion {"}, {"sha": "47a196331b3143a3c9197b7a475da66811ce6de1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -2690,7 +2690,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n     for it in &implementor.inner_impl().items {\n         if let clean::TypedefItem(ref tydef, _) = it.inner {\n             write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n-            assoc_type(w, it, &vec![], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n+            assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n             write!(w, \";</span>\")?;\n         }\n     }\n@@ -3040,7 +3040,7 @@ fn assoc_const(w: &mut fmt::Formatter,\n }\n \n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n-                             bounds: &Vec<clean::GenericBound>,\n+                             bounds: &[clean::GenericBound],\n                              default: Option<&clean::Type>,\n                              link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n@@ -3749,7 +3749,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                     for it in &impl_.items {\n                         if let clean::TypedefItem(ref tydef, _) = it.inner {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n-                            assoc_type(&mut out, it, &vec![],\n+                            assoc_type(&mut out, it, &[],\n                                        Some(&tydef.type_),\n                                        AssocItemLink::GotoSource(t_did, &FxHashSet()))?;\n                             out.push_str(\";</span>\");"}, {"sha": "0e9b0718b217ed7306f296689b84f215c66f100a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca4204357454dbf2e2b7f57f9f024631da209f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1cca4204357454dbf2e2b7f57f9f024631da209f", "patch": "@@ -3065,7 +3065,7 @@ impl<'a> State<'a> {\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n-                       generic_params: &Vec<ast::GenericParam>)\n+                       generic_params: &[ast::GenericParam])\n                        -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         if !generic_params.is_empty() {"}]}