{"sha": "31ee20db3e2c776c6b3fab9a3f0c5a89dc465670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZWUyMGRiM2UyYzc3NmM2YjNmYWI5YTNmMGM1YTg5ZGM0NjU2NzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-17T14:55:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-19T10:20:00Z"}, "message": "Add missing fmt structs examples", "tree": {"sha": "8112f49b9cc1669941fab9c271220688e2b4e527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8112f49b9cc1669941fab9c271220688e2b4e527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670", "html_url": "https://github.com/rust-lang/rust/commit/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618f5a08a13a90b65455cf8dc42e109e520b5dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/618f5a08a13a90b65455cf8dc42e109e520b5dbf", "html_url": "https://github.com/rust-lang/rust/commit/618f5a08a13a90b65455cf8dc42e109e520b5dbf"}], "stats": {"total": 323, "additions": 313, "deletions": 10}, "files": [{"sha": "45994c2b4f0f0781cc8dff98b19d00e59c0c473f", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 313, "deletions": 10, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ee20db3e2c776c6b3fab9a3f0c5a89dc465670/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=31ee20db3e2c776c6b3fab9a3f0c5a89dc465670", "patch": "@@ -71,8 +71,10 @@ impl fmt::Write for PadAdapter<'_> {\n ///     }\n /// }\n ///\n-/// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n-/// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() }),\n+///     \"Foo { bar: 10, baz: \\\"Hello World\\\" }\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -96,6 +98,33 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n \n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Bar {\n+    ///     bar: i32,\n+    ///     another: String,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Bar {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_struct(\"Bar\")\n+    ///            .field(\"bar\", &self.bar) // We add `bar` field.\n+    ///            .field(\"another\", &self.another) // We add `another` field.\n+    ///            // We even add a field which doesn't exist (because why not?).\n+    ///            .field(\"not_existing_field\", &1)\n+    ///            .finish() // We're good to go!\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Bar { bar: 10, another: \"Hello World\".to_string() }),\n+    ///     \"Bar { bar: 10, another: \\\"Hello World\\\", not_existing_field: 1 }\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -124,6 +153,32 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Bar {\n+    ///     bar: i32,\n+    ///     baz: String,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Bar {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_struct(\"Bar\")\n+    ///            .field(\"bar\", &self.bar)\n+    ///            .field(\"baz\", &self.baz)\n+    ///            .finish() // You need to call it to \"finish\" the\n+    ///                      // struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Bar { bar: 10, baz: \"Hello World\".to_string() }),\n+    ///     \"Bar { bar: 10, baz: \\\"Hello World\\\" }\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n@@ -168,8 +223,10 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"Foo(10, \"Hello World\")\"\n-/// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+///     \"Foo(10, \\\"Hello World\\\")\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -193,6 +250,28 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n \n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32, String);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_tuple(\"Foo\")\n+    ///            .field(&self.0) // We add the first field.\n+    ///            .field(&self.1) // We add the second field.\n+    ///            .finish() // We're good to go!\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+    ///     \"Foo(10, \\\"Hello World\\\")\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -220,6 +299,29 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32, String);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_tuple(\"Foo\")\n+    ///            .field(&self.0)\n+    ///            .field(&self.1)\n+    ///            .finish() // You need to call it to \"finish\" the\n+    ///                      // tuple formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(10, \"Hello World\".to_string())),\n+    ///     \"Foo(10, \\\"Hello World\\\")\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         if self.fields > 0 {\n@@ -306,8 +408,10 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"{10, 11}\"\n-/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![10, 11])),\n+///     \"{10, 11}\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -329,13 +433,57 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entry(&self.0) // Adds the first \"entry\".\n+    ///            .entry(&self.1) // Adds the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"{[10, 11], [12, 13]}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the set output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entries(self.0.iter()) // Adds the first \"entry\".\n+    ///            .entries(self.1.iter()) // Adds the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"{10, 11, 12, 13}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n         where D: fmt::Debug,\n@@ -348,6 +496,27 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///            .entries(self.0.iter())\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11])),\n+    ///     \"{10, 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n@@ -377,8 +546,10 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"[10, 11]\"\n-/// println!(\"{:?}\", Foo(vec![10, 11]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![10, 11])),\n+///     \"[10, 11]\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -400,13 +571,57 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n \n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds a new entry to the list output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entry(&self.0) // We add the first \"entry\".\n+    ///            .entry(&self.1) // We add the second \"entry\".\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"[[10, 11], [12, 13]]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n     /// Adds the contents of an iterator of entries to the list output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>, Vec<u32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entries(self.0.iter())\n+    ///            .entries(self.1.iter())\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11], vec![12, 13])),\n+    ///     \"[10, 11, 12, 13]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n         where D: fmt::Debug,\n@@ -419,6 +634,27 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_list()\n+    ///            .entries(self.0.iter())\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![10, 11])),\n+    ///     \"[10, 11]\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n@@ -448,8 +684,10 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n ///     }\n /// }\n ///\n-/// // prints \"{\"A\": 10, \"B\": 11}\"\n-/// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+/// assert_eq!(\n+///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+/// );\n /// ```\n #[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n@@ -471,6 +709,27 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n \n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            .entry(&\"whole\", &self.0) // We add the \"whole\" entry.\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"whole\\\": [(\\\"A\\\", 10), (\\\"B\\\", 11)]}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n@@ -500,6 +759,29 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Adds the contents of an iterator of entries to the map output.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            // We map our vec so each entries' first field will become\n+    ///            // the \"key\".\n+    ///            .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n+    ///            .finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n         where K: fmt::Debug,\n@@ -513,6 +795,27 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     /// Finishes output and returns any error encountered.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<(String, i32)>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_map()\n+    ///            .entries(self.0.iter().map(|&(ref k, ref v)| (k, v)))\n+    ///            .finish() // Ends the struct formatting.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     \"{\\\"A\\\": 10, \\\"B\\\": 11}\",\n+    /// );\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn finish(&mut self) -> fmt::Result {\n         let prefix = if self.is_pretty() && self.has_fields {"}]}