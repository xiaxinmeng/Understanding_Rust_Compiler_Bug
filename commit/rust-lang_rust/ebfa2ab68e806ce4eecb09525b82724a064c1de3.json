{"sha": "ebfa2ab68e806ce4eecb09525b82724a064c1de3", "node_id": "C_kwDOAAsO6NoAKGViZmEyYWI2OGU4MDZjZTRlZWNiMDk1MjViODI3MjRhMDY0YzFkZTM", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-04T08:44:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T08:44:59Z"}, "message": "Small style improvements", "tree": {"sha": "f1e6d6aa1eeb3b2be6e479d415b2d7c01c1ab6f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e6d6aa1eeb3b2be6e479d415b2d7c01c1ab6f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfa2ab68e806ce4eecb09525b82724a064c1de3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZNELCRBK7hj4Ov3rIwAAqo8IAAnzLtU9avIbftmJ78izNjUc\nb7DUXXD3xuYHVlHPNxOFMrV3NGt1k7xYf79rVuyb2pe59usnaZW6kLjMSa0KXjeh\nitw6CKO6lOyz3f4Tv0zq6n69wzTgt7RpiGohA0m88dITI4CacERCVL72Hj6qUoeg\nB0goTFeTgL2fZATTHT2TJhKvnmK2gPKQupiHIVCrijGB0KVtBIGTsa4Q1rMxREKa\n/3ULyOEMwVyP1JFEd23/fGeH5UCkUMjTJGpWNuR79xmcuqtyKFaOvLtCqs2f5Lj4\n/abdNybvDPi73NGe+4gNRGaqrNFDnwquRA9CcS8rQ0UjwCH3AWjEVB8HT5JJ6qQ=\n=ESD5\n-----END PGP SIGNATURE-----\n", "payload": "tree f1e6d6aa1eeb3b2be6e479d415b2d7c01c1ab6f0\nparent 1e21b3cfa38c5040ae0faf99178b0112fc90fd93\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1667551499 +0100\ncommitter GitHub <noreply@github.com> 1667551499 +0100\n\nSmall style improvements"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa2ab68e806ce4eecb09525b82724a064c1de3", "html_url": "https://github.com/rust-lang/rust/commit/ebfa2ab68e806ce4eecb09525b82724a064c1de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa2ab68e806ce4eecb09525b82724a064c1de3/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "html_url": "https://github.com/rust-lang/rust/commit/1e21b3cfa38c5040ae0faf99178b0112fc90fd93"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "95cec8d7ae29992455c0e1ee9638ff941d5c71cc", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa2ab68e806ce4eecb09525b82724a064c1de3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa2ab68e806ce4eecb09525b82724a064c1de3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=ebfa2ab68e806ce4eecb09525b82724a064c1de3", "patch": "@@ -70,7 +70,6 @@\n //! eof: [a $( a )* a b \u00b7]\n //! ```\n \n-use rustc_errors::ErrorGuaranteed;\n pub(crate) use NamedMatch::*;\n pub(crate) use ParseResult::*;\n \n@@ -79,6 +78,7 @@ use crate::mbe::{macro_rules::Tracker, KleeneOp, TokenTree};\n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_lint_defs::pluralize;\n use rustc_parse::parser::{NtOrTt, Parser};\n use rustc_span::symbol::Ident;\n@@ -96,7 +96,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n ///\n /// This means a matcher can be represented by `&[MatcherLoc]`, and traversal mostly involves\n /// simply incrementing the current matcher position index by one.\n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug)]\n pub(crate) enum MatcherLoc {\n     Token {\n         token: Token,"}, {"sha": "99af91072882efc99011b95871c34c32e80a6be7", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa2ab68e806ce4eecb09525b82724a064c1de3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa2ab68e806ce4eecb09525b82724a064c1de3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=ebfa2ab68e806ce4eecb09525b82724a064c1de3", "patch": "@@ -210,18 +210,18 @@ fn trace_macros_note(cx_expansions: &mut FxIndexMap<Span, Vec<String>>, sp: Span\n }\n \n pub(super) trait Tracker<'matcher> {\n-    /// This is called before trying to match next MatcherLoc on the current token\n+    /// This is called before trying to match next MatcherLoc on the current token.\n     fn before_match_loc(&mut self, parser: &TtParser, matcher: &'matcher MatcherLoc);\n \n     /// This is called after an arm has been parsed, either successfully or unsuccessfully. When this is called,\n-    /// `before_match_loc` was called at least once (with a `MatcherLoc::Eof`)\n+    /// `before_match_loc` was called at least once (with a `MatcherLoc::Eof`).\n     fn after_arm(&mut self, result: &NamedParseResult);\n \n-    /// For tracing\n+    /// For tracing.\n     fn description() -> &'static str;\n }\n \n-/// A noop tracker that is used in the hot path of the expansion, has zero overhead thanks to monomorphization\n+/// A noop tracker that is used in the hot path of the expansion, has zero overhead thanks to monomorphization.\n struct NoopTracker;\n \n impl<'matcher> Tracker<'matcher> for NoopTracker {\n@@ -256,7 +256,7 @@ fn expand_macro<'cx>(\n         trace_macros_note(&mut cx.expansions, sp, msg);\n     }\n \n-    // Track nothing for the best performance\n+    // Track nothing for the best performance.\n     let try_success_result = try_match_macro(sess, name, &arg, lhses, &mut NoopTracker);\n \n     match try_success_result {\n@@ -326,7 +326,7 @@ fn expand_macro<'cx>(\n         }\n     }\n \n-    // An error occured, try the expansion again, tracking the expansion closely for better diagnostics\n+    // An error occurred, try the expansion again, tracking the expansion closely for better diagnostics.\n     let mut tracker = CollectTrackerAndEmitter::new(cx, sp);\n \n     let try_success_result = try_match_macro(sess, name, &arg, lhses, &mut tracker);\n@@ -378,7 +378,7 @@ fn expand_macro<'cx>(\n     DummyResult::any(sp)\n }\n \n-/// The tracker used for the slow error path that collects useful info for diagnostics\n+/// The tracker used for the slow error path that collects useful info for diagnostics.\n struct CollectTrackerAndEmitter<'a, 'cx> {\n     cx: &'a mut ExtCtxt<'cx>,\n     /// Which arm's failure should we report? (the one furthest along)\n@@ -427,7 +427,7 @@ enum CanRetry {\n     No(ErrorGuaranteed),\n }\n \n-/// Try expanding the macro. Returns the index of the sucessful arm and its named_matches if it was successful,\n+/// Try expanding the macro. Returns the index of the successful arm and its named_matches if it was successful,\n /// and nothing if it failed. On failure, it's the callers job to use `track` accordingly to record all errors\n /// correctly.\n #[instrument(level = \"debug\", skip(sess, arg, lhses, track), fields(tracking = %T::description()))]\n@@ -485,15 +485,16 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n             }\n             Failure(_, _) => {\n                 trace!(\"Failed to match arm, trying the next one\");\n-                // Try the next arm\n+                // Try the next arm.\n             }\n             Error(_, _) => {\n                 debug!(\"Fatal error occurred during matching\");\n-                // We haven't emitted an error yet\n+                // We haven't emitted an error yet, so we can retry.\n                 return Err(CanRetry::Yes);\n             }\n             ErrorReported(guarantee) => {\n                 debug!(\"Fatal error occurred and was reported during matching\");\n+                // An error has been reported already, we cannot retry as that would cause duplicate errors.\n                 return Err(CanRetry::No(guarantee));\n             }\n         }"}]}