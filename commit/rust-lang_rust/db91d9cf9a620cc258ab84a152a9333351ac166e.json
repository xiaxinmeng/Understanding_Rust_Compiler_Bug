{"sha": "db91d9cf9a620cc258ab84a152a9333351ac166e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTFkOWNmOWE2MjBjYzI1OGFiODRhMTUyYTkzMzMzNTFhYzE2NmU=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-04T10:47:06Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:37:16Z"}, "message": "move map_collect_result_unit to its own module", "tree": {"sha": "458691d2f7c1b4814b7a313be6f9735777683132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/458691d2f7c1b4814b7a313be6f9735777683132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db91d9cf9a620cc258ab84a152a9333351ac166e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db91d9cf9a620cc258ab84a152a9333351ac166e", "html_url": "https://github.com/rust-lang/rust/commit/db91d9cf9a620cc258ab84a152a9333351ac166e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db91d9cf9a620cc258ab84a152a9333351ac166e/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0a42b67d66cb79bdd09379d0b0e7959fc1505a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a42b67d66cb79bdd09379d0b0e7959fc1505a", "html_url": "https://github.com/rust-lang/rust/commit/9b0a42b67d66cb79bdd09379d0b0e7959fc1505a"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "5b20e268d9f7ee8d7060d7e7eadd0fc52bbbbb73", "filename": "clippy_lints/src/methods/map_collect_result_unit.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/db91d9cf9a620cc258ab84a152a9333351ac166e/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db91d9cf9a620cc258ab84a152a9333351ac166e/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=db91d9cf9a620cc258ab84a152a9333351ac166e", "patch": "@@ -0,0 +1,45 @@\n+use crate::utils::{is_type_diagnostic_item, match_trait_method, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::symbol::sym;\n+\n+use super::MAP_COLLECT_RESULT_UNIT;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    map_args: &[hir::Expr<'_>],\n+    collect_args: &[hir::Expr<'_>],\n+) {\n+    if_chain! {\n+        // called on Iterator\n+        if let [map_expr] = collect_args;\n+        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n+        // return of collect `Result<(),_>`\n+        let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n+        if is_type_diagnostic_item(cx, collect_ret_ty, sym::result_type);\n+        if let ty::Adt(_, substs) = collect_ret_ty.kind();\n+        if let Some(result_t) = substs.types().next();\n+        if result_t.is_unit();\n+        // get parts for snippet\n+        if let [iter, map_fn] = map_args;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_COLLECT_RESULT_UNIT,\n+                expr.span,\n+                \"`.map().collect()` can be replaced with `.try_for_each()`\",\n+                \"try this\",\n+                format!(\n+                    \"{}.try_for_each({})\",\n+                    snippet(cx, iter.span, \"..\"),\n+                    snippet(cx, map_fn.span, \"..\")\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "baa342ab3bb8ced4c3e90c5c9ce425113af1772c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/db91d9cf9a620cc258ab84a152a9333351ac166e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db91d9cf9a620cc258ab84a152a9333351ac166e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=db91d9cf9a620cc258ab84a152a9333351ac166e", "patch": "@@ -11,6 +11,7 @@ mod inspect_for_each;\n mod iter_cloned_collect;\n mod iter_count;\n mod manual_saturating_arithmetic;\n+mod map_collect_result_unit;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_unwrap_or;\n@@ -1739,7 +1740,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::check(cx, expr, arg_lists[0], \"ok_or\"),\n-            [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"collect\", \"map\"] => map_collect_result_unit::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"for_each\", \"inspect\"] => inspect_for_each::check(cx, expr, method_spans[1]),\n             [\"to_owned\", ..] => implicit_clone::check(cx, expr, sym::ToOwned),\n             [\"to_os_string\", ..] => implicit_clone::check(cx, expr, sym::OsStr),\n@@ -3530,42 +3531,6 @@ fn lint_into_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_\n     }\n }\n \n-fn lint_map_collect(\n-    cx: &LateContext<'_>,\n-    expr: &hir::Expr<'_>,\n-    map_args: &[hir::Expr<'_>],\n-    collect_args: &[hir::Expr<'_>],\n-) {\n-    if_chain! {\n-        // called on Iterator\n-        if let [map_expr] = collect_args;\n-        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n-        // return of collect `Result<(),_>`\n-        let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n-        if is_type_diagnostic_item(cx, collect_ret_ty, sym::result_type);\n-        if let ty::Adt(_, substs) = collect_ret_ty.kind();\n-        if let Some(result_t) = substs.types().next();\n-        if result_t.is_unit();\n-        // get parts for snippet\n-        if let [iter, map_fn] = map_args;\n-        then {\n-            span_lint_and_sugg(\n-                cx,\n-                MAP_COLLECT_RESULT_UNIT,\n-                expr.span,\n-                \"`.map().collect()` can be replaced with `.try_for_each()`\",\n-                \"try this\",\n-                format!(\n-                    \"{}.try_for_each({})\",\n-                    snippet(cx, iter.span, \"..\"),\n-                    snippet(cx, map_fn.span, \"..\")\n-                ),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}\n-\n enum Convention {\n     Eq(&'static str),\n     StartsWith(&'static str),"}]}