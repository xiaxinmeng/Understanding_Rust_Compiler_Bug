{"sha": "e482c86b9de32c6392cb83aa97d72e22425163f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODJjODZiOWRlMzJjNjM5MmNiODNhYTk3ZDcyZTIyNDI1MTYzZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T01:44:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T01:44:36Z"}, "message": "Auto merge of #73084 - Aaron1011:feature/new-recursive-expand, r=petrochenkov\n\nRe-land PR #72388:  Recursively expand `TokenKind::Interpolated` in `probably_equal_for_proc_macro`\n\nPR #72388 allowed us to preserve the original `TokenStream` in more cases during proc-macro expansion, but had to be reverted due to a large number of regressions (See #72545 and #72622). These regressions fell into two categories\n\n1. Missing handling for `Group`s with `Delimiter::None`, which are inserted during `macro_rules!` expansion (but are lost during stringification and re-parsing). A large number of these regressions were due to `syn` and `proc-macro-hack`, but several crates needed changes to their own proc-macro code.\n2. Legitimate hygiene issues that were previously being masked by stringification. Some of these were relatively benign (e.g. [a compiliation error](https://github.com/paritytech/parity-scale-codec/pull/210) caused by misusing `quote_spanned!`). However, two crates had intentionally written unhygenic `macro_rules!` macros, which were able to access identifiers that were not passed as arguments (see https://github.com/rust-lang/rust/issues/72622#issuecomment-636402573).\n\nAll but one of the Crater regressions have now been fixed upstream (see https://hackmd.io/ItrXWRaSSquVwoJATPx3PQ?both). The remaining crate (which has a PR pending at https://github.com/sammhicks/face-generator/pull/1) is not on `crates.io`, and is a Yew application that seems unlikely to have any reverse dependencies.\n\nAs @petrochenkov mentioned in https://github.com/rust-lang/rust/issues/72545#issuecomment-638632434, not re-landing PR #72388 allows more crates to write unhygenic `macro_rules!` macros, which will eventually stop compiling. Since there is only one Crater regression remaining, since additional crates could write unhygenic `macro_rules!` macros in the time it takes that PR to be merged.", "tree": {"sha": "f9f7df4c17310596302e3330e683ad06343dbca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f7df4c17310596302e3330e683ad06343dbca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e482c86b9de32c6392cb83aa97d72e22425163f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e482c86b9de32c6392cb83aa97d72e22425163f9", "html_url": "https://github.com/rust-lang/rust/commit/e482c86b9de32c6392cb83aa97d72e22425163f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e482c86b9de32c6392cb83aa97d72e22425163f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663d2f5cd3163f17eddb74ee1e028d542255f21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/663d2f5cd3163f17eddb74ee1e028d542255f21a", "html_url": "https://github.com/rust-lang/rust/commit/663d2f5cd3163f17eddb74ee1e028d542255f21a"}, {"sha": "0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "html_url": "https://github.com/rust-lang/rust/commit/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99"}], "stats": {"total": 338, "additions": 255, "deletions": 83}, "files": [{"sha": "4a8bf6b4f19b604bc815c12cc869db8cce47d3a9", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -11,9 +11,11 @@ use crate::tokenstream::TokenTree;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::hygiene::ExpnKind;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::{self, Span, DUMMY_SP};\n+use rustc_span::{self, FileName, RealFileName, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n \n@@ -808,6 +810,31 @@ impl Nonterminal {\n         }\n         false\n     }\n+\n+    // See issue #74616 for details\n+    pub fn ident_name_compatibility_hack(\n+        &self,\n+        orig_span: Span,\n+        source_map: &SourceMap,\n+    ) -> Option<(Ident, bool)> {\n+        if let NtIdent(ident, is_raw) = self {\n+            if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n+                let filename = source_map.span_to_filename(orig_span);\n+                if let FileName::Real(RealFileName::Named(path)) = filename {\n+                    if (path.ends_with(\"time-macros-impl/src/lib.rs\")\n+                        && macro_name == sym::impl_macros)\n+                        || (path.ends_with(\"js-sys/src/lib.rs\") && macro_name == sym::arrays)\n+                    {\n+                        let snippet = source_map.span_to_snippet(orig_span);\n+                        if snippet.as_deref() == Ok(\"$name\") {\n+                            return Some((*ident, *is_raw));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "409784812f58f46e213989a4ca8163b752c80a90", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -173,13 +173,19 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                let stream = nt_to_tokenstream(&nt, sess, span);\n-                TokenTree::Group(Group {\n-                    delimiter: Delimiter::None,\n-                    stream,\n-                    span: DelimSpan::from_single(span),\n-                    flatten: nt.pretty_printing_compatibility_hack(),\n-                })\n+                if let Some((name, is_raw)) =\n+                    nt.ident_name_compatibility_hack(span, sess.source_map())\n+                {\n+                    TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n+                } else {\n+                    let stream = nt_to_tokenstream(&nt, sess, span);\n+                    TokenTree::Group(Group {\n+                        delimiter: Delimiter::None,\n+                        stream,\n+                        span: DelimSpan::from_single(span),\n+                        flatten: nt.pretty_printing_compatibility_hack(),\n+                    })\n+                }\n             }\n \n             OpenDelim(..) | CloseDelim(..) => unreachable!(),"}, {"sha": "bc857c9774218b75faad2800942d26a97718d31a", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -7,8 +7,8 @@\n #![feature(or_patterns)]\n \n use rustc_ast as ast;\n-use rustc_ast::token::{self, DelimToken, Nonterminal, Token};\n-use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::tokenstream::{self, IsJoint, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n@@ -309,7 +309,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real) {\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real, sess) {\n             return tokens;\n         }\n         info!(\n@@ -327,7 +327,11 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &TokenStream) -> bool {\n+pub fn tokenstream_probably_equal_for_proc_macro(\n+    first: &TokenStream,\n+    other: &TokenStream,\n+    sess: &ParseSess,\n+) -> bool {\n     // When checking for `probably_eq`, we ignore certain tokens that aren't\n     // preserved in the AST. Because they are not preserved, the pretty\n     // printer arbitrarily adds or removes them when printing as token\n@@ -408,20 +412,39 @@ pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &To\n                 }\n             }\n             token_trees = out.into_iter().map(TokenTree::Token).collect();\n-            if token_trees.len() != 1 {\n-                debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n-            }\n         } else {\n             token_trees = SmallVec::new();\n             token_trees.push(tree);\n         }\n         token_trees.into_iter()\n     }\n \n-    let mut t1 = first.trees().filter(semantic_tree).flat_map(break_tokens);\n-    let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n+    let expand_nt = |tree: TokenTree| {\n+        if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n+            // When checking tokenstreams for 'probable equality', we are comparing\n+            // a captured (from parsing) `TokenStream` to a reparsed tokenstream.\n+            // The reparsed Tokenstream will never have `None`-delimited groups,\n+            // since they are only ever inserted as a result of macro expansion.\n+            // Therefore, inserting a `None`-delimtied group here (when we\n+            // convert a nested `Nonterminal` to a tokenstream) would cause\n+            // a mismatch with the reparsed tokenstream.\n+            //\n+            // Note that we currently do not handle the case where the\n+            // reparsed stream has a `Parenthesis`-delimited group\n+            // inserted. This will cause a spurious mismatch:\n+            // issue #75734 tracks resolving this.\n+            nt_to_tokenstream(nt, sess, *span).into_trees()\n+        } else {\n+            TokenStream::new(vec![(tree, IsJoint::NonJoint)]).into_trees()\n+        }\n+    };\n+\n+    // Break tokens after we expand any nonterminals, so that we break tokens\n+    // that are produced as a result of nonterminal expansion.\n+    let mut t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let mut t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n     for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-        if !tokentree_probably_equal_for_proc_macro(&t1, &t2) {\n+        if !tokentree_probably_equal_for_proc_macro(&t1, &t2, sess) {\n             return false;\n         }\n     }\n@@ -433,13 +456,17 @@ pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &To\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-fn tokentree_probably_equal_for_proc_macro(first: &TokenTree, other: &TokenTree) -> bool {\n+pub fn tokentree_probably_equal_for_proc_macro(\n+    first: &TokenTree,\n+    other: &TokenTree,\n+    sess: &ParseSess,\n+) -> bool {\n     match (first, other) {\n         (TokenTree::Token(token), TokenTree::Token(token2)) => {\n             token_probably_equal_for_proc_macro(token, token2)\n         }\n         (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2)\n+            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n         }\n         _ => false,\n     }\n@@ -498,7 +525,7 @@ fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n             b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n         }\n \n-        (&Interpolated(..), &Interpolated(..)) => false,\n+        (&Interpolated(..), &Interpolated(..)) => panic!(\"Unexpanded Interpolated!\"),\n \n         _ => panic!(\"forgot to add a token?\"),\n     }"}, {"sha": "46612145bf02cb2b77702dfcc4eb58bcece6c497", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -258,6 +258,7 @@ symbols! {\n         arith_offset,\n         arm_target_feature,\n         array,\n+        arrays,\n         as_str,\n         asm,\n         assert,\n@@ -572,6 +573,7 @@ symbols! {\n         ignore,\n         impl_header_lifetime_elision,\n         impl_lint_pass,\n+        impl_macros,\n         impl_trait_in_bindings,\n         import_shadowing,\n         in_band_lifetimes,"}, {"sha": "5cd3b40a2e42a149920e891b7e181ce7e68c2168", "filename": "src/test/ui/proc-macro/group-compat-hack/auxiliary/group-compat-hack.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,13 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn my_macro(_attr: TokenStream, input: TokenStream) -> TokenStream {\n+    println!(\"Called proc_macro_hack with {:?}\", input);\n+    input\n+}"}, {"sha": "35c101587de05d6329db2812a92879eab4e08ab9", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+// aux-build:group-compat-hack.rs\n+// compile-flags: -Z span-debug\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use] extern crate group_compat_hack;\n+\n+// Tests the backwards compatibility hack added for certain macros\n+// When an attribute macro named `proc_macro_hack` or `wasm_bindgen`\n+// has an `NtIdent` named `$name`, we pass a plain `Ident` token in\n+// place of a `None`-delimited group. This allows us to maintain\n+// backwards compatibility for older versions of these crates.\n+\n+include!(\"js-sys/src/lib.rs\");\n+include!(\"time-macros-impl/src/lib.rs\");\n+\n+macro_rules! other {\n+    ($name:ident) => {\n+        #[my_macro] struct Three($name);\n+    }\n+}\n+\n+fn main() {\n+    struct Foo;\n+    impl_macros!(Foo);\n+    arrays!(Foo);\n+    other!(Foo);\n+}"}, {"sha": "d519daab1f287478fb8c9906dea18773bfdd9d18", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,3 @@\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#5) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#5) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#5) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#9) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#9) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#9) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#9) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:21: 21:27 (#13) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:28: 21:33 (#13) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:34: 21:39 (#13) }], span: $DIR/group-compat-hack.rs:21:33: 21:40 (#13) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:40: 21:41 (#13) }]"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! arrays {\n+    ($name:ident) => {\n+        #[my_macro] struct Two($name);\n+    }\n+}"}, {"sha": "c94c357920974b1e3e6c8f45fb1cc5f06a63cf3e", "filename": "src/test/ui/proc-macro/group-compat-hack/time-macros-impl/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! impl_macros {\n+    ($name:ident) => {\n+        #[my_macro] struct One($name);\n+    }\n+}"}, {"sha": "a9636cfef82197822add537a8f7d7abc28c797cd", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -15,51 +15,63 @@ PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"const\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(416..421),\n     },\n-    Ident {\n-        ident: \"A\",\n-        span: #0 bytes(0..0),\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"A\",\n+                span: #0 bytes(503..504),\n+            },\n+        ],\n+        span: #3 bytes(422..424),\n     },\n     Punct {\n         ch: ':',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(424..425),\n     },\n     Ident {\n         ident: \"u8\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(426..428),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(429..430),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(431..432),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(432..433),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct A { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(468..474),\n     },\n-    Ident {\n-        ident: \"A\",\n-        span: #0 bytes(0..0),\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"A\",\n+                span: #0 bytes(503..504),\n+            },\n+        ],\n+        span: #3 bytes(475..477),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: #0 bytes(0..0),\n+        span: #3 bytes(478..480),\n     },\n ]"}, {"sha": "e0c40bbc7344ecb6feebbb3c17e85bfca7232571", "filename": "src/test/ui/proc-macro/macro-rules-derive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -1,14 +1,13 @@\n // aux-build:first-second.rs\n-// FIXME: The spans here are bad, see PR #73084\n \n extern crate first_second;\n use first_second::*;\n \n macro_rules! produce_it {\n     ($name:ident) => {\n-        #[first] //~ ERROR cannot find type\n+        #[first]\n         struct $name {\n-            field: MissingType\n+            field: MissingType //~ ERROR cannot find type\n         }\n     }\n }"}, {"sha": "54a079e4e736af0e9ae1152d3e98bdb8a21dc9a4", "filename": "src/test/ui/proc-macro/macro-rules-derive.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -1,8 +1,13 @@\n error[E0412]: cannot find type `MissingType` in this scope\n-  --> $DIR/macro-rules-derive.rs:9:9\n+  --> $DIR/macro-rules-derive.rs:10:20\n    |\n-LL |         #[first]\n-   |         ^^^^^^^^ not found in this scope\n+LL |             field: MissingType\n+   |                    ^^^^^^^^^^^ not found in this scope\n+...\n+LL | produce_it!(MyName);\n+   | -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cdf851b535aa5b083373f50c2334576f82d1120e", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 49, "deletions": 38, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -71,7 +71,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" \"hello\" . len() + \"world\" . len() (1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,\n@@ -82,50 +81,62 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n         stream: TokenStream [\n-            Literal {\n-                kind: Str,\n-                symbol: \"hello\",\n-                suffix: None,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Punct {\n-                ch: '.',\n-                spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Ident {\n-                ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n             Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"hello\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:21:17: 21:24 (#0),\n+                    },\n+                    Punct {\n+                        ch: '.',\n+                        spacing: Alone,\n+                        span: $DIR/nodelim-groups.rs:21:24: 21:25 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"len\",\n+                        span: $DIR/nodelim-groups.rs:21:25: 21:28 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [],\n+                        span: $DIR/nodelim-groups.rs:21:28: 21:30 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:15:49: 15:54 (#7),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Literal {\n-                kind: Str,\n-                symbol: \"world\",\n-                suffix: None,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Punct {\n-                ch: '.',\n-                spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n-            },\n-            Ident {\n-                ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                span: $DIR/nodelim-groups.rs:15:55: 15:56 (#7),\n             },\n             Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"world\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:21:33: 21:40 (#0),\n+                    },\n+                    Punct {\n+                        ch: '.',\n+                        spacing: Alone,\n+                        span: $DIR/nodelim-groups.rs:21:40: 21:41 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"len\",\n+                        span: $DIR/nodelim-groups.rs:21:41: 21:44 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [],\n+                        span: $DIR/nodelim-groups.rs:21:44: 21:46 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:15:57: 15:62 (#7),\n             },\n         ],\n         span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),"}, {"sha": "7ba3f98a7a9a888dbd7dfbfcc9b64e10f1265572", "filename": "src/test/ui/proc-macro/weird-hygiene.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.rs?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -1,6 +1,4 @@\n // aux-build:weird-hygiene.rs\n-// check-pass\n-// FIXME: This should actually error, see PR #73084\n \n #![feature(stmt_expr_attributes)]\n #![feature(proc_macro_hygiene)]\n@@ -22,7 +20,7 @@ macro_rules! other {\n \n         #[derive(WeirdDerive)]\n         enum MyEnum {\n-            Value = (stringify!($tokens + hidden_ident), 1).1\n+            Value = (stringify!($tokens + hidden_ident), 1).1 //~ ERROR cannot find\n         }\n \n         inner!();\n@@ -33,7 +31,7 @@ macro_rules! invoke_it {\n     ($token:expr) => {\n         #[recollect_attr] {\n             $token;\n-            hidden_ident\n+            hidden_ident //~ ERROR cannot find\n         }\n     }\n }"}, {"sha": "b17dc28f84091a6cf3cda30423291e1af0e37d6d", "filename": "src/test/ui/proc-macro/weird-hygiene.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e482c86b9de32c6392cb83aa97d72e22425163f9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr?ref=e482c86b9de32c6392cb83aa97d72e22425163f9", "patch": "@@ -0,0 +1,25 @@\n+error[E0425]: cannot find value `hidden_ident` in this scope\n+  --> $DIR/weird-hygiene.rs:23:43\n+   |\n+LL |             Value = (stringify!($tokens + hidden_ident), 1).1\n+   |                                           ^^^^^^^^^^^^ not found in this scope\n+...\n+LL |     other!(50);\n+   |     ----------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `hidden_ident` in this scope\n+  --> $DIR/weird-hygiene.rs:34:13\n+   |\n+LL |             hidden_ident\n+   |             ^^^^^^^^^^^^ not found in this scope\n+...\n+LL |     invoke_it!(25);\n+   |     --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}