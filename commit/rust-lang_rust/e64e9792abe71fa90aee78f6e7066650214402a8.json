{"sha": "e64e9792abe71fa90aee78f6e7066650214402a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NGU5NzkyYWJlNzFmYTkwYWVlNzhmNmU3MDY2NjUwMjE0NDAyYTg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T15:02:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T15:02:36Z"}, "message": "Make pretty-printer wrap fail/ret/put in parens in call/index/field pos\n\nCloses #764\nCloses #891", "tree": {"sha": "0d8a62957f6208d9d0662bdb5dd02fc56e70b632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8a62957f6208d9d0662bdb5dd02fc56e70b632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e64e9792abe71fa90aee78f6e7066650214402a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e64e9792abe71fa90aee78f6e7066650214402a8", "html_url": "https://github.com/rust-lang/rust/commit/e64e9792abe71fa90aee78f6e7066650214402a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e64e9792abe71fa90aee78f6e7066650214402a8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc62b175432de660a8858274c3435feed0e85e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc62b175432de660a8858274c3435feed0e85e64", "html_url": "https://github.com/rust-lang/rust/commit/bc62b175432de660a8858274c3435feed0e85e64"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "6b09726ce94d93600a015cc96043b4c17037ba46", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e64e9792abe71fa90aee78f6e7066650214402a8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64e9792abe71fa90aee78f6e7066650214402a8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=e64e9792abe71fa90aee78f6e7066650214402a8", "patch": "@@ -802,7 +802,7 @@ fn print_expr(s: ps, expr: @ast::expr) {\n         pclose(s);\n       }\n       ast::expr_call(func, args) {\n-        print_expr_parens_if_unary(s, func);\n+        print_expr_parens_if_unary_or_ret(s, func);\n         popen(s);\n         commasep_exprs(s, inconsistent, args);\n         pclose(s);\n@@ -826,18 +826,18 @@ fn print_expr(s: ps, expr: @ast::expr) {\n       }\n       ast::expr_binary(op, lhs, rhs) {\n         let prec = operator_prec(op);\n-        print_maybe_parens(s, lhs, prec);\n+        print_op_maybe_parens(s, lhs, prec);\n         space(s.s);\n         word_space(s, ast_util::binop_to_str(op));\n-        print_maybe_parens(s, rhs, prec + 1);\n+        print_op_maybe_parens(s, rhs, prec + 1);\n       }\n       ast::expr_unary(op, expr) {\n         word(s.s, ast_util::unop_to_str(op));\n-        print_maybe_parens(s, expr, parse::parser::unop_prec);\n+        print_op_maybe_parens(s, expr, parse::parser::unop_prec);\n       }\n       ast::expr_lit(lit) { print_literal(s, lit); }\n       ast::expr_cast(expr, ty) {\n-        print_maybe_parens(s, expr, parse::parser::as_prec);\n+        print_op_maybe_parens(s, expr, parse::parser::as_prec);\n         space(s.s);\n         word_space(s, \"as\");\n         print_type(s, ty);\n@@ -965,12 +965,12 @@ fn print_expr(s: ps, expr: @ast::expr) {\n         print_expr(s, rhs);\n       }\n       ast::expr_field(expr, id) {\n-        print_expr_parens_if_unary(s, expr);\n+        print_expr_parens_if_unary_or_ret(s, expr);\n         word(s.s, \".\");\n         word(s.s, id);\n       }\n       ast::expr_index(expr, index) {\n-        print_expr_parens_if_unary(s, expr);\n+        print_expr_parens_if_unary_or_ret(s, expr);\n         word(s.s, \"[\");\n         print_expr(s, index);\n         word(s.s, \"]\");\n@@ -1072,8 +1072,12 @@ fn print_expr(s: ps, expr: @ast::expr) {\n     end(s);\n }\n \n-fn print_expr_parens_if_unary(s: ps, ex: @ast::expr) {\n-    let parens = alt ex.node { ast::expr_unary(_, _) { true } _ { false } };\n+fn print_expr_parens_if_unary_or_ret(s: ps, ex: @ast::expr) {\n+    let parens = alt ex.node {\n+      ast::expr_fail(_) | ast::expr_ret(_) | ast::expr_put(_) |\n+      ast::expr_unary(_, _) { true }\n+      _ { false }\n+    };\n     if parens { popen(s); }\n     print_expr(s, ex);\n     if parens { pclose(s); }\n@@ -1368,7 +1372,7 @@ fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n     }\n }\n \n-fn print_maybe_parens(s: ps, expr: @ast::expr, outer_prec: int) {\n+fn print_op_maybe_parens(s: ps, expr: @ast::expr, outer_prec: int) {\n     let add_them = need_parens(expr, outer_prec);\n     if add_them { popen(s); }\n     print_expr(s, expr);"}]}