{"sha": "a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZGNkMDhjYzI3M2JjYzg4MGZjOTY4N2JmZmM5ODc5NmZhMWYzYzQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-20T20:46:44Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-20T20:47:02Z"}, "message": "Added string duplication to deep_copy. Closes #520.", "tree": {"sha": "f794a78f7e6723995ed983e779ee9cbbbd896ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f794a78f7e6723995ed983e779ee9cbbbd896ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "html_url": "https://github.com/rust-lang/rust/commit/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/comments", "author": null, "committer": null, "parents": [{"sha": "c0515017842a4b7872ff31bd91acec4a54d2ef2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0515017842a4b7872ff31bd91acec4a54d2ef2d", "html_url": "https://github.com/rust-lang/rust/commit/c0515017842a4b7872ff31bd91acec4a54d2ef2d"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "1a5a9a8d2546130cc7523794c2abc9c8dfffe955", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -49,6 +49,7 @@ type upcalls =\n         ValueRef free,\n         ValueRef mark,\n         ValueRef new_str,\n+        ValueRef dup_str,\n         ValueRef new_vec,\n         ValueRef vec_append,\n         ValueRef get_type_desc,\n@@ -101,6 +102,8 @@ fn declare_upcalls(type_names tn, ModuleRef llmod) -> @upcalls {\n              mark=d(\"mark\", [T_ptr(T_i8())], T_int()),\n              new_str=d(\"new_str\", [T_ptr(T_i8()), T_size_t()],\n                        T_ptr(T_str())),\n+             dup_str=d(\"dup_str\", [T_ptr(T_str())],\n+                       T_ptr(T_str())),\n              new_vec=d(\"new_vec\", [T_size_t(), T_ptr(T_tydesc(tn))],\n                        T_opaque_vec_ptr()),\n              vec_append=d(\"vec_append\","}, {"sha": "408a9f3e7db46d3b59a7935eb60df6274062f859", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -6340,28 +6340,13 @@ fn deep_copy(&@block_ctxt bcx, ValueRef v, ty::t t, ValueRef target_task)\n     if(ty::type_is_scalar(tcx, t)) {\n         ret res(bcx, v);\n     }\n+    else if(ty::type_is_str(tcx, t)) {\n+        ret res(bcx,\n+                bcx.build.Call(bcx.fcx.lcx.ccx.upcalls.dup_str,\n+                               [bcx.fcx.lltaskptr, v]));\n+    }\n     else if(ty::type_is_chan(tcx, t)) {\n         // If this is a channel, we need to clone it.\n-        /*\n-        log_err \"Generating clone call for channel argument.\";\n-      \n-        log_err #fmt(\"ty(clone_chan) = %s\", \n-                     val_str(bcx.fcx.lcx.ccx.tn,\n-                             bcx.fcx.lcx.ccx.upcalls.clone_chan));\n-      \n-        log_err #fmt(\"ty(lltaskptr) = %s\", \n-                     val_str(bcx.fcx.lcx.ccx.tn, \n-                             bcx.fcx.lltaskptr));\n-      \n-        log_err #fmt(\"ty(target_task) = %s\", \n-                     val_str(bcx.fcx.lcx.ccx.tn, \n-                             target_task));\n-      \n-        log_err #fmt(\"ty(chan) = %s\", \n-                     val_str(bcx.fcx.lcx.ccx.tn, \n-                             v));\n-        */\n-\n         auto chan_ptr = bcx.build.PointerCast(v, T_opaque_chan_ptr());\n       \n         auto chan_raw_val = \n@@ -6386,8 +6371,8 @@ fn deep_copy(&@block_ctxt bcx, ValueRef v, ty::t t, ValueRef target_task)\n     }\n     else {\n         bcx.fcx.lcx.ccx.sess.bug(\"unexpected type in \" +\n-                                \"trans::deep_copy: \" +\n-                                ty_to_str(tcx, t));\n+                                 \"trans::deep_copy: \" +\n+                                 ty_to_str(tcx, t));\n     }\n }\n "}, {"sha": "d3e6dbfed3f035ac7383210f890e4feaf55a23ed", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -168,6 +168,7 @@ export type_is_sequence;\n export type_is_signed;\n export type_is_structural;\n export type_is_tup_like;\n+export type_is_str;\n export type_owns_heap_mem;\n export type_param;\n export unify;\n@@ -899,6 +900,13 @@ fn type_is_sequence(&ctxt cx, &t ty) -> bool {\n     }\n }\n \n+fn type_is_str(&ctxt cx, &t ty) -> bool {\n+    alt (struct(cx, ty)) {\n+        case (ty_str) { ret true; }\n+        case (_) { ret false; }\n+    }\n+}\n+\n fn sequence_is_interior(&ctxt cx, &t ty) -> bool {\n     alt (struct(cx, ty)) {\n         case ("}, {"sha": "7fb6bc4c84dc50d0ef07bae17a49ae671a45703b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -315,9 +315,7 @@ upcall_mark(rust_task *task, void* ptr) {\n     return 0;\n }\n \n-extern \"C\" CDECL rust_str *\n-upcall_new_str(rust_task *task, char const *s, size_t fill) {\n-    LOG_UPCALL_ENTRY(task);\n+rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n     rust_dom *dom = task->dom;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n     void *mem = task->malloc(alloc);\n@@ -332,6 +330,20 @@ upcall_new_str(rust_task *task, char const *s, size_t fill) {\n     return st;\n }\n \n+extern \"C\" CDECL rust_str *\n+upcall_new_str(rust_task *task, char const *s, size_t fill) {\n+    LOG_UPCALL_ENTRY(task);\n+    \n+    return make_str(task, s, fill);\n+}\n+\n+extern \"C\" CDECL rust_str *\n+upcall_dup_str(rust_task *task, rust_str *str) {\n+    LOG_UPCALL_ENTRY(task);\n+\n+    return make_str(task, (char const *)str->data, str->fill);\n+}\n+\n extern \"C\" CDECL rust_vec *\n upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);"}, {"sha": "17b4ba9817d25d5cd790085aff6c51f544052173", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -47,6 +47,7 @@ unsupervise\n upcall_clone_chan\n upcall_del_chan\n upcall_del_port\n+upcall_dup_str\n upcall_exit\n upcall_fail\n upcall_flush_chan"}, {"sha": "45052ffabccca7a856684258159dc99104bc3024", "filename": "src/test/run-pass/spawn-types.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "patch": "@@ -0,0 +1,25 @@\n+/*\n+  Make sure we can spawn tasks that take different types of\n+  parameters. This is based on a test case for #520 provided by Rob\n+  Arnold.\n+ */\n+\n+// xfail-stage0\n+// xfail-stage1\n+// xfail-stage2\n+// xfail-stage3\n+\n+use std;\n+\n+import std::str;\n+\n+type ctx = chan[int];\n+\n+fn iotask(ctx cx, str ip) {\n+  assert(str::eq(ip, \"localhost\"));\n+}\n+\n+fn main() {\n+  let port[int] p = port();\n+  spawn iotask(chan(p), \"localhost\");\n+}"}]}