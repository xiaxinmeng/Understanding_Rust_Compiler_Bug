{"sha": "9bb17186396b1bdad7b443135165575e81810be3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjE3MTg2Mzk2YjFiZGFkN2I0NDMxMzUxNjU1NzVlODE4MTBiZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:39:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T10:39:54Z"}, "message": "Cleanup", "tree": {"sha": "091983670aab06c771ddcac759acc98d208c3d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/091983670aab06c771ddcac759acc98d208c3d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb17186396b1bdad7b443135165575e81810be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb17186396b1bdad7b443135165575e81810be3", "html_url": "https://github.com/rust-lang/rust/commit/9bb17186396b1bdad7b443135165575e81810be3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb17186396b1bdad7b443135165575e81810be3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "819bbd08645a85cbf31025b31bd4daf69f821d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/819bbd08645a85cbf31025b31bd4daf69f821d20", "html_url": "https://github.com/rust-lang/rust/commit/819bbd08645a85cbf31025b31bd4daf69f821d20"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "1b6eb1174785753721836d18704be514c21cae75", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9bb17186396b1bdad7b443135165575e81810be3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb17186396b1bdad7b443135165575e81810be3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=9bb17186396b1bdad7b443135165575e81810be3", "patch": "@@ -72,41 +72,31 @@ pub(crate) fn highlight(\n     let mut in_macro_call = None;\n \n     for event in root.preorder_with_tokens() {\n-        match event {\n-            WalkEvent::Enter(node) => {\n-                if node.text_range().intersection(&range_to_highlight).is_none() {\n-                    continue;\n-                }\n+        let event_range = match &event {\n+            WalkEvent::Enter(it) => it.text_range(),\n+            WalkEvent::Leave(it) => it.text_range(),\n+        };\n \n-                match node.kind() {\n-                    MACRO_CALL => {\n-                        in_macro_call = Some(node.clone());\n-                        if let Some(range) = highlight_macro(node) {\n-                            res.push(HighlightedRange {\n-                                range,\n-                                highlight: HighlightTag::Macro.into(),\n-                                binding_hash: None,\n-                            });\n-                        }\n-                    }\n-                    _ if in_macro_call.is_some() => {\n-                        if let Some(token) = node.as_token() {\n-                            if let Some((highlight, binding_hash)) = highlight_token_tree(\n-                                &sema,\n-                                &mut bindings_shadow_count,\n-                                token.clone(),\n-                            ) {\n-                                res.push(HighlightedRange {\n-                                    range: node.text_range(),\n-                                    highlight,\n-                                    binding_hash,\n-                                });\n-                            }\n-                        }\n+        if event_range.intersection(&range_to_highlight).is_none() {\n+            continue;\n+        }\n+\n+        match event {\n+            WalkEvent::Enter(node) => match node.kind() {\n+                MACRO_CALL => {\n+                    in_macro_call = Some(node.clone());\n+                    if let Some(range) = highlight_macro(node) {\n+                        res.push(HighlightedRange {\n+                            range,\n+                            highlight: HighlightTag::Macro.into(),\n+                            binding_hash: None,\n+                        });\n                     }\n-                    _ => {\n+                }\n+                _ if in_macro_call.is_some() => {\n+                    if let Some(token) = node.as_token() {\n                         if let Some((highlight, binding_hash)) =\n-                            highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n+                            highlight_token_tree(&sema, &mut bindings_shadow_count, token.clone())\n                         {\n                             res.push(HighlightedRange {\n                                 range: node.text_range(),\n@@ -116,12 +106,19 @@ pub(crate) fn highlight(\n                         }\n                     }\n                 }\n-            }\n-            WalkEvent::Leave(node) => {\n-                if node.text_range().intersection(&range_to_highlight).is_none() {\n-                    continue;\n+                _ => {\n+                    if let Some((highlight, binding_hash)) =\n+                        highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n+                    {\n+                        res.push(HighlightedRange {\n+                            range: node.text_range(),\n+                            highlight,\n+                            binding_hash,\n+                        });\n+                    }\n                 }\n-\n+            },\n+            WalkEvent::Leave(node) => {\n                 if let Some(m) = in_macro_call.as_ref() {\n                     if *m == node {\n                         in_macro_call = None;"}]}