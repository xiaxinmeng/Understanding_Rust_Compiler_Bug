{"sha": "f610e2c2edfe8f3fdd0c9719e748af55093b449e", "node_id": "C_kwDOAAsO6NoAKGY2MTBlMmMyZWRmZThmM2ZkZDBjOTcxOWU3NDhhZjU1MDkzYjQ0OWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T23:42:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T23:42:21Z"}, "message": "Simplify completion import insertion", "tree": {"sha": "e5840b2e5cf6aad6c683216d89f2d6966bab8d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5840b2e5cf6aad6c683216d89f2d6966bab8d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f610e2c2edfe8f3fdd0c9719e748af55093b449e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f610e2c2edfe8f3fdd0c9719e748af55093b449e", "html_url": "https://github.com/rust-lang/rust/commit/f610e2c2edfe8f3fdd0c9719e748af55093b449e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f610e2c2edfe8f3fdd0c9719e748af55093b449e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28251e486cf2351cc817d631e0cffd92dd104e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/28251e486cf2351cc817d631e0cffd92dd104e30", "html_url": "https://github.com/rust-lang/rust/commit/28251e486cf2351cc817d631e0cffd92dd104e30"}], "stats": {"total": 150, "additions": 58, "deletions": 92}, "files": [{"sha": "e986331105d59042823d38992b79885ed85bba83", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -102,7 +102,7 @@ pub use ide_assists::{\n     Assist, AssistConfig, AssistId, AssistKind, AssistResolveStrategy, SingleResolve,\n };\n pub use ide_completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit, Snippet,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, Snippet,\n     SnippetScope,\n };\n pub use ide_db::{"}, {"sha": "2154a1b3cbf4b706cad54bab216588621b4e8eb1", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -10,7 +10,6 @@ use syntax::{AstNode, SyntaxNode, T};\n use crate::{\n     context::{CompletionContext, PathKind},\n     render::{render_resolution_with_import, RenderContext},\n-    ImportEdit,\n };\n \n use super::Completions;\n@@ -136,10 +135,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n \n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = import_assets(ctx, potential_import_name)?;\n-    let import_scope = ImportScope::find_insert_use_container(\n-        &position_for_import(ctx, Some(import_assets.import_candidate()))?,\n-        &ctx.sema,\n-    )?;\n+    let position = position_for_import(ctx, Some(import_assets.import_candidate()))?;\n+    if ImportScope::find_insert_use_container(&position, &ctx.sema).is_none() {\n+        return None;\n+    }\n \n     let path_kind = match ctx.path_kind() {\n         Some(kind) => Some(kind),\n@@ -199,12 +198,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n                     &user_input_lowercased,\n                 )\n             })\n-            .filter_map(|import| {\n-                render_resolution_with_import(\n-                    RenderContext::new(ctx),\n-                    ImportEdit { import, scope: import_scope.clone() },\n-                )\n-            }),\n+            .filter_map(|import| render_resolution_with_import(RenderContext::new(ctx), import)),\n     );\n     Some(())\n }"}, {"sha": "175d6f1623a886814a627d94162901516cdbeff9", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -261,10 +261,12 @@ fn add_custom_postfix_completions(\n     postfix_snippet: impl Fn(&str, &str, &str) -> Builder,\n     receiver_text: &str,\n ) -> Option<()> {\n-    let import_scope = ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema)?;\n+    if ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema).is_none() {\n+        return None;\n+    }\n     ctx.config.postfix_snippets().filter(|(_, snip)| snip.scope == SnippetScope::Expr).for_each(\n         |(trigger, snippet)| {\n-            let imports = match snippet.imports(ctx, &import_scope) {\n+            let imports = match snippet.imports(ctx) {\n                 Some(imports) => imports,\n                 None => return,\n             };"}, {"sha": "0a3d594e41eba35706eb9ddb4281d41887fc0929", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -104,10 +104,12 @@ fn add_custom_completions(\n     cap: SnippetCap,\n     scope: SnippetScope,\n ) -> Option<()> {\n-    let import_scope = ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema)?;\n+    if ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema).is_none() {\n+        return None;\n+    }\n     ctx.config.prefix_snippets().filter(|(_, snip)| snip.scope == scope).for_each(\n         |(trigger, snip)| {\n-            let imports = match snip.imports(ctx, &import_scope) {\n+            let imports = match snip.imports(ctx) {\n                 Some(imports) => imports,\n                 None => return,\n             };"}, {"sha": "3c2be32f4e9d12a5f038052f73f4407a1c371fed", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -3,17 +3,10 @@\n use std::fmt;\n \n use hir::{Documentation, Mutability};\n-use ide_db::{\n-    helpers::mod_path_to_ast,\n-    imports::{\n-        import_assets::LocatedImport,\n-        insert_use::{self, ImportScope, InsertUseConfig},\n-    },\n-    SnippetCap, SymbolKind,\n-};\n+use ide_db::{imports::import_assets::LocatedImport, SnippetCap, SymbolKind};\n use smallvec::SmallVec;\n use stdx::{impl_from, never};\n-use syntax::{algo, SmolStr, TextRange};\n+use syntax::{SmolStr, TextRange};\n use text_edit::TextEdit;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n@@ -73,7 +66,7 @@ pub struct CompletionItem {\n     ref_match: Option<Mutability>,\n \n     /// The import data to add to completion's edits.\n-    import_to_add: SmallVec<[ImportEdit; 1]>,\n+    import_to_add: SmallVec<[LocatedImport; 1]>,\n }\n \n // We use custom debug for CompletionItem to make snapshot tests more readable.\n@@ -380,40 +373,17 @@ impl CompletionItem {\n         self.ref_match.map(|mutability| (mutability, relevance))\n     }\n \n-    pub fn imports_to_add(&self) -> &[ImportEdit] {\n+    pub fn imports_to_add(&self) -> &[LocatedImport] {\n         &self.import_to_add\n     }\n }\n \n-/// An extra import to add after the completion is applied.\n-#[derive(Debug, Clone)]\n-pub struct ImportEdit {\n-    pub import: LocatedImport,\n-    pub scope: ImportScope,\n-}\n-\n-impl ImportEdit {\n-    /// Attempts to insert the import to the given scope, producing a text edit.\n-    /// May return no edit in edge cases, such as scope already containing the import.\n-    pub fn to_text_edit(&self, cfg: InsertUseConfig) -> Option<TextEdit> {\n-        let _p = profile::span(\"ImportEdit::to_text_edit\");\n-\n-        let new_ast = self.scope.clone_for_update();\n-        insert_use::insert_use(&new_ast, mod_path_to_ast(&self.import.import_path), &cfg);\n-        let mut import_insert = TextEdit::builder();\n-        algo::diff(self.scope.as_syntax_node(), new_ast.as_syntax_node())\n-            .into_text_edit(&mut import_insert);\n-\n-        Some(import_insert.finish())\n-    }\n-}\n-\n /// A helper to make `CompletionItem`s.\n #[must_use]\n #[derive(Clone)]\n pub(crate) struct Builder {\n     source_range: TextRange,\n-    imports_to_add: SmallVec<[ImportEdit; 1]>,\n+    imports_to_add: SmallVec<[LocatedImport; 1]>,\n     trait_name: Option<SmolStr>,\n     label: SmolStr,\n     insert_text: Option<String>,\n@@ -439,7 +409,7 @@ impl Builder {\n \n         if let [import_edit] = &*self.imports_to_add {\n             // snippets can have multiple imports, but normal completions only have up to one\n-            if let Some(original_path) = import_edit.import.original_path.as_ref() {\n+            if let Some(original_path) = import_edit.original_path.as_ref() {\n                 lookup = lookup.or_else(|| Some(label.clone()));\n                 label = SmolStr::from(format!(\"{} (use {})\", label, original_path));\n             }\n@@ -533,7 +503,7 @@ impl Builder {\n         self.trigger_call_info = Some(true);\n         self\n     }\n-    pub(crate) fn add_import(&mut self, import_to_add: ImportEdit) -> &mut Builder {\n+    pub(crate) fn add_import(&mut self, import_to_add: LocatedImport) -> &mut Builder {\n         self.imports_to_add.push(import_to_add);\n         self\n     }"}, {"sha": "8eb7615f8f29053732ef47c75a0ae3c1ef2aa44d", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -30,7 +30,6 @@ pub use crate::{\n     config::CompletionConfig,\n     item::{\n         CompletionItem, CompletionItemKind, CompletionRelevance, CompletionRelevancePostfixMatch,\n-        ImportEdit,\n     },\n     snippet::{Snippet, SnippetScope},\n };\n@@ -193,7 +192,6 @@ pub fn resolve_completion_edits(\n     let new_ast = scope.clone_for_update();\n     let mut import_insert = TextEdit::builder();\n \n-    // FIXME: lift out and make some tests here, this is ImportEdit::to_text_edit but changed to work with multiple edits\n     imports.into_iter().for_each(|(full_import_path, imported_name)| {\n         let items_with_name = items_locator::items_with_name(\n             &ctx.sema,"}, {"sha": "e5ec27321257b59f8dd2cbe43338bc5e043dd745", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -11,12 +11,14 @@ pub(crate) mod union_literal;\n pub(crate) mod literal;\n \n use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n-use ide_db::{helpers::item_name, RootDatabase, SnippetCap, SymbolKind};\n+use ide_db::{\n+    helpers::item_name, imports::import_assets::LocatedImport, RootDatabase, SnippetCap, SymbolKind,\n+};\n use syntax::{SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n     context::{PathCompletionCtx, PathKind},\n-    item::{CompletionRelevanceTypeMatch, ImportEdit},\n+    item::CompletionRelevanceTypeMatch,\n     render::{function::render_fn, literal::render_variant_lit, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n };\n@@ -25,7 +27,7 @@ use crate::{\n pub(crate) struct RenderContext<'a> {\n     completion: &'a CompletionContext<'a>,\n     is_private_editable: bool,\n-    import_to_add: Option<ImportEdit>,\n+    import_to_add: Option<LocatedImport>,\n }\n \n impl<'a> RenderContext<'a> {\n@@ -38,7 +40,7 @@ impl<'a> RenderContext<'a> {\n         self\n     }\n \n-    pub(crate) fn import_to_add(mut self, import_to_add: Option<ImportEdit>) -> Self {\n+    pub(crate) fn import_to_add(mut self, import_to_add: Option<LocatedImport>) -> Self {\n         self.import_to_add = import_to_add;\n         self\n     }\n@@ -156,22 +158,22 @@ pub(crate) fn render_resolution_simple(\n \n pub(crate) fn render_resolution_with_import(\n     ctx: RenderContext<'_>,\n-    import_edit: ImportEdit,\n+    import_edit: LocatedImport,\n ) -> Option<CompletionItem> {\n-    let resolution = ScopeDef::from(import_edit.import.original_item);\n+    let resolution = ScopeDef::from(import_edit.original_item);\n     let local_name = match resolution {\n         ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n         ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n         ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n-        _ => item_name(ctx.db(), import_edit.import.original_item)?,\n+        _ => item_name(ctx.db(), import_edit.original_item)?,\n     };\n     Some(render_resolution_(ctx, local_name, Some(import_edit), resolution))\n }\n \n fn render_resolution_(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n-    import_to_add: Option<ImportEdit>,\n+    import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_resolution\");\n@@ -200,7 +202,7 @@ fn render_resolution_(\n fn render_resolution_simple_(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n-    import_to_add: Option<ImportEdit>,\n+    import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_resolution\");"}, {"sha": "82632f440d4c9945bd25c74821f4b11e52e4f65c", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -102,11 +102,11 @@ use std::ops::Deref;\n // }\n // ----\n \n-use ide_db::imports::{import_assets::LocatedImport, insert_use::ImportScope};\n+use ide_db::imports::import_assets::LocatedImport;\n use itertools::Itertools;\n use syntax::{ast, AstNode, GreenNode, SyntaxNode};\n \n-use crate::{context::CompletionContext, ImportEdit};\n+use crate::context::CompletionContext;\n \n /// A snippet scope describing where a snippet may apply to.\n /// These may differ slightly in meaning depending on the snippet trigger.\n@@ -156,12 +156,8 @@ impl Snippet {\n     }\n \n     /// Returns [`None`] if the required items do not resolve.\n-    pub(crate) fn imports(\n-        &self,\n-        ctx: &CompletionContext,\n-        import_scope: &ImportScope,\n-    ) -> Option<Vec<ImportEdit>> {\n-        import_edits(ctx, import_scope, &self.requires)\n+    pub(crate) fn imports(&self, ctx: &CompletionContext) -> Option<Vec<LocatedImport>> {\n+        import_edits(ctx, &self.requires)\n     }\n \n     pub fn snippet(&self) -> String {\n@@ -173,11 +169,7 @@ impl Snippet {\n     }\n }\n \n-fn import_edits(\n-    ctx: &CompletionContext,\n-    import_scope: &ImportScope,\n-    requires: &[GreenNode],\n-) -> Option<Vec<ImportEdit>> {\n+fn import_edits(ctx: &CompletionContext, requires: &[GreenNode]) -> Option<Vec<LocatedImport>> {\n     let resolve = |import: &GreenNode| {\n         let path = ast::Path::cast(SyntaxNode::new_root(import.clone()))?;\n         let item = match ctx.scope.speculative_resolve(&path)? {\n@@ -186,10 +178,7 @@ fn import_edits(\n         };\n         let path =\n             ctx.module.find_use_path_prefixed(ctx.db, item, ctx.config.insert_use.prefix_kind)?;\n-        Some((path.len() > 1).then(|| ImportEdit {\n-            import: LocatedImport::new(path.clone(), item, item, None),\n-            scope: import_scope.clone(),\n-        }))\n+        Some((path.len() > 1).then(|| LocatedImport::new(path.clone(), item, item, None)))\n     };\n     let mut res = Vec::with_capacity(requires.len());\n     for import in requires {"}, {"sha": "470fc37ca73f17ef26704b5530544f7f3ed8281a", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -35,7 +35,7 @@ use stdx::{format_to, trim_indent};\n use syntax::{AstNode, NodeOrToken, SyntaxElement};\n use test_utils::assert_eq_text;\n \n-use crate::{CompletionConfig, CompletionItem, CompletionItemKind};\n+use crate::{resolve_completion_edits, CompletionConfig, CompletionItem, CompletionItemKind};\n \n /// Lots of basic item definitions\n const BASE_ITEMS_FIXTURE: &str = r#\"\n@@ -178,15 +178,24 @@ pub(crate) fn check_edit_with_config(\n     let mut actual = db.file_text(position.file_id).to_string();\n \n     let mut combined_edit = completion.text_edit().to_owned();\n-    completion\n-        .imports_to_add()\n-        .iter()\n-        .filter_map(|edit| edit.to_text_edit(config.insert_use))\n-        .for_each(|text_edit| {\n-            combined_edit.union(text_edit).expect(\n-                \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n-            )\n-        });\n+\n+    resolve_completion_edits(\n+        &db,\n+        &config,\n+        position,\n+        completion.imports_to_add().iter().filter_map(|import_edit| {\n+            let import_path = &import_edit.import_path;\n+            let import_name = import_path.segments().last()?;\n+            Some((import_path.to_string(), import_name.to_string()))\n+        }),\n+    )\n+    .into_iter()\n+    .flatten()\n+    .for_each(|text_edit| {\n+        combined_edit.union(text_edit).expect(\n+            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n+        )\n+    });\n \n     combined_edit.apply(&mut actual);\n     assert_eq_text!(&ra_fixture_after, &actual)"}, {"sha": "9b377f742b3857f690ebcbbae88c35d7de261bba", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f610e2c2edfe8f3fdd0c9719e748af55093b449e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f610e2c2edfe8f3fdd0c9719e748af55093b449e", "patch": "@@ -283,7 +283,7 @@ fn completion_item(\n             let imports: Vec<_> = imports\n                 .iter()\n                 .filter_map(|import_edit| {\n-                    let import_path = &import_edit.import.import_path;\n+                    let import_path = &import_edit.import_path;\n                     let import_name = import_path.segments().last()?;\n                     Some(lsp_ext::CompletionImport {\n                         full_import_path: import_path.to_string(),"}]}