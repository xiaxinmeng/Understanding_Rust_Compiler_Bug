{"sha": "a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjE5Yzg4NThlYzZkZDI5ZDcxZmRlN2JjMmQ3OGIyYWMzODZkMzQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-06T22:58:35Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-06-06T22:58:35Z"}, "message": "Remove many unneeded feature annotations in the docs\n\nWhen things get stabilized, they don't always have their docs updated to remove the gate.", "tree": {"sha": "64d843ca423a4ad874bf22bbc066994796778701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64d843ca423a4ad874bf22bbc066994796778701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "html_url": "https://github.com/rust-lang/rust/commit/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef72938a8b9171abc5c4b463d3e8345dc0e603a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef72938a8b9171abc5c4b463d3e8345dc0e603a6", "html_url": "https://github.com/rust-lang/rust/commit/ef72938a8b9171abc5c4b463d3e8345dc0e603a6"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "990a73c53ae966b417dff746909575492fc7810f", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -98,7 +98,6 @@ use heap::deallocate;\n /// increase the reference counter.\n ///\n /// ```\n-/// # #![feature(alloc, core)]\n /// use std::sync::Arc;\n /// use std::thread;\n ///\n@@ -297,7 +296,6 @@ impl<T: ?Sized> Clone for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -392,7 +390,6 @@ impl<T: ?Sized> Drop for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "7edcf3d3c9a209a0d8d6bc374bbf1c0baf18783e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -88,7 +88,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections, core)]\n+    /// # #![feature(collections)]\n     /// let s = String::from_str(\"hello\");\n     /// assert_eq!(&s[..], \"hello\");\n     /// ```"}, {"sha": "818943667d30b80d48084b81924b35a58645b8db", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -840,7 +840,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections, core)]\n+    /// # #![feature(collections)]\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(&w[..], &[3, 4, 5]);"}, {"sha": "16094f2e6cc3c11078fe9552236824a894497b9e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -308,7 +308,6 @@ extern \"rust-intrinsic\" {\n     /// A safe swap function:\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::mem;\n     /// use std::ptr;\n     ///\n@@ -348,7 +347,6 @@ extern \"rust-intrinsic\" {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::ptr;\n     ///\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {"}, {"sha": "b12a1c1ed96bd42e759241224e8d4a20bfd4dd6f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -326,7 +326,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let xs = [100, 200, 300];\n     /// let mut it = xs.iter().cloned().peekable();\n     /// assert_eq!(*it.peek().unwrap(), 100);\n@@ -514,15 +513,13 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n-    ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n     /// let sum: i32 = a.iter()\n     ///                 .map(|x| *x)\n     ///                 .inspect(|&x| println!(\"filtering {}\", x))\n     ///                 .filter(|&x| x % 2 == 0)\n     ///                 .inspect(|&x| println!(\"{} made it through\", x))\n-    ///                 .sum();\n+    ///                 .fold(0, |sum, i| sum + i);\n     /// println!(\"{}\", sum);\n     /// ```\n     #[inline]\n@@ -572,7 +569,6 @@ pub trait Iterator {\n     /// do not.\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let vec = vec![1, 2, 3, 4];\n     /// let (even, odd): (Vec<_>, Vec<_>) = vec.into_iter().partition(|&n| n % 2 == 0);\n     /// assert_eq!(even, [2, 4]);\n@@ -897,7 +893,6 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// # #![feature(core)]\n-    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n@@ -926,7 +921,6 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// # #![feature(core)]\n-    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n@@ -971,7 +965,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let a = [(1, 2), (3, 4)];\n     /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n     /// assert_eq!(left, [1, 3]);\n@@ -1065,7 +1058,6 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// # #![feature(core)]\n-    ///\n     /// let a = [1, 2, 3, 4, 5];\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n@@ -1084,7 +1076,6 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// # #![feature(core)]\n-    ///\n     /// fn factorial(n: u32) -> u32 {\n     ///     (1..).take_while(|&i| i <= n).product()\n     /// }\n@@ -2730,7 +2721,7 @@ impl<A: Step> ops::Range<A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(step_by, core)]\n+    /// # #![feature(step_by)]\n     /// for i in (0..10).step_by(2) {\n     ///     println!(\"{}\", i);\n     /// }"}, {"sha": "b5555fa51197c190444f63e51be7184275c671ab", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -173,12 +173,11 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n-/// # #![allow(unused_must_use)]\n /// use std::io::Write;\n ///\n /// let mut w = Vec::new();\n-/// write!(&mut w, \"test\");\n-/// write!(&mut w, \"formatted {}\", \"arguments\");\n+/// write!(&mut w, \"test\").unwrap();\n+/// write!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n /// ```\n #[macro_export]\n macro_rules! write {"}, {"sha": "872186c09e255cdd97485fe7e9db9e5c498f3849", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a3b19c8858ec6dd29d71fde7bc2d78b2ac386d34", "patch": "@@ -474,7 +474,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or(0), Ok(\"foo\"));\n     ///\n@@ -496,7 +495,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));\n     ///\n@@ -538,7 +536,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// let mut x = Some(4);\n     /// match x.iter_mut().next() {\n     ///     Some(&mut ref mut v) => *v = 42,"}]}