{"sha": "5bf385be6a5ce267ac7cd9d1725178488e33131c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjM4NWJlNmE1Y2UyNjdhYzdjZDlkMTcyNTE3ODQ4OGUzMzEzMWM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-12-19T04:48:26Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-05T20:00:57Z"}, "message": "Rename macro_escape to macro_use\n\nIn the future we want to support\n\n    #[macro_use(foo, bar)]\n    mod macros;\n\nbut it's not an essential part of macro reform.  Reserve the syntax for now.", "tree": {"sha": "7cfa66cf0c1acd0e6cf29efe0d77deb29d3a8946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cfa66cf0c1acd0e6cf29efe0d77deb29d3a8946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf385be6a5ce267ac7cd9d1725178488e33131c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf385be6a5ce267ac7cd9d1725178488e33131c", "html_url": "https://github.com/rust-lang/rust/commit/5bf385be6a5ce267ac7cd9d1725178488e33131c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf385be6a5ce267ac7cd9d1725178488e33131c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc584793237c388e9dca76ef406d1af34e453fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc584793237c388e9dca76ef406d1af34e453fe2", "html_url": "https://github.com/rust-lang/rust/commit/fc584793237c388e9dca76ef406d1af34e453fe2"}], "stats": {"total": 170, "additions": 127, "deletions": 43}, "files": [{"sha": "142ac6f34e02f6cd83222cb48febf6517e0ff1d8", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -54,7 +54,8 @@ pub use vec_map::VecMap;\n // Needed for the vec! macro\n pub use alloc::boxed;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod macros;\n \n pub mod binary_heap;"}, {"sha": "aff0065c52744d8d8430b8d7b9c69ef9125213cd", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -62,19 +62,23 @@\n #![feature(default_type_params, unboxed_closures, associated_types)]\n #![deny(missing_docs)]\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod macros;\n \n #[path = \"num/float_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod float_macros;\n \n #[path = \"num/int_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod int_macros;\n \n #[path = \"num/uint_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod uint_macros;\n \n #[path = \"num/int.rs\"]  pub mod int;"}, {"sha": "f86c85f821638f98813ab459ea8dab0293e00331", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -14,7 +14,8 @@ use core::num::{NumCast, cast};\n use core::ops::{Add, Sub, Mul, Div, Rem};\n use core::kinds::Copy;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod int_macros;\n \n mod i8;\n@@ -23,7 +24,8 @@ mod i32;\n mod i64;\n mod int;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod uint_macros;\n \n mod u8;"}, {"sha": "c210873563c5d12e546101ecd65934e7075aafdf", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -183,7 +183,8 @@ use regex::Regex;\n \n use directive::LOG_LEVEL_NAMES;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod macros;\n \n mod directive;"}, {"sha": "027af6619ab915e5701083ced54ff0312a953782", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -182,7 +182,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in\n     //\n-    //   #[macro_escape] #[cfg(foo)]\n+    //   #[macro_use] #[cfg(foo)]\n     //   mod bar { macro_rules! baz!(() => {{}}) }\n     //\n     // baz! should not use this definition unless foo is enabled."}, {"sha": "fa9cd5a698bbe05784d661832f89cbb630529f90", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -16,7 +16,8 @@ pub use self::base::trans_crate;\n pub use self::context::CrateContext;\n pub use self::common::gensym_name;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod macros;\n \n mod doc;"}, {"sha": "319eee87317720d111121aa1236709cc48ccb038", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -49,7 +49,8 @@ use rustc::session::search_paths::SearchPaths;\n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod externalfiles;\n \n pub mod clean;"}, {"sha": "e9386c30a6dad095dd1732a095291a1441b931f3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -285,7 +285,8 @@ pub mod stdio;\n pub mod timer;\n pub mod util;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod test;\n \n /// The default buffer size for various I/O operations"}, {"sha": "abe968849c2b8f0e62dcd196848c32bd4e4fb97b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -173,14 +173,17 @@ pub use unicode::char;\n /* Exported macros */\n \n #[cfg(stage0)]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod macros_stage0;\n \n #[cfg(not(stage0))]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod macros;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod bitflags;\n \n mod rtdeps;\n@@ -193,15 +196,18 @@ pub mod prelude;\n /* Primitive types */\n \n #[path = \"num/float_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod float_macros;\n \n #[path = \"num/int_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod int_macros;\n \n #[path = \"num/uint_macros.rs\"]\n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod uint_macros;\n \n #[path = \"num/int.rs\"]  pub mod int;\n@@ -229,7 +235,8 @@ pub mod num;\n \n /* Runtime and platform support */\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod thread_local;\n \n pub mod c_str;"}, {"sha": "e556888a470a288b100364bf8fd29aaae1ae94bf", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -39,6 +39,8 @@ pub use alloc::heap;\n pub mod backtrace;\n \n // Internals\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n mod macros;\n \n // These should be refactored/moved/made private over time"}, {"sha": "e0cbaa8ca50edbbb99c63a147445d1951f8551a7", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -40,7 +40,8 @@ use prelude::v1::*;\n \n use cell::UnsafeCell;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod scoped;\n \n // Sure wish we had macro hygiene, no?"}, {"sha": "13cbc83f730705b5d5d62819de4ed9e6cfe4a604", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -440,9 +440,9 @@ pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n             if valid_ident {\n                 fld.cx.mod_push(it.ident);\n             }\n-            let macro_escape = contains_macro_escape(new_attrs[]);\n+            let macro_use = contains_macro_use(fld, new_attrs[]);\n             let result = with_exts_frame!(fld.cx.syntax_env,\n-                                          macro_escape,\n+                                          macro_use,\n                                           noop_fold_item(it, fld));\n             if valid_ident {\n                 fld.cx.mod_pop();\n@@ -522,9 +522,28 @@ fn expand_item_underscore(item: ast::Item_, fld: &mut MacroExpander) -> ast::Ite\n     }\n }\n \n-// does this attribute list contain \"macro_escape\" ?\n-fn contains_macro_escape(attrs: &[ast::Attribute]) -> bool {\n-    attr::contains_name(attrs, \"macro_escape\")\n+// does this attribute list contain \"macro_use\" ?\n+fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool {\n+    for attr in attrs.iter() {\n+        let mut is_use = attr.check_name(\"macro_use\");\n+        if attr.check_name(\"macro_escape\") {\n+            fld.cx.span_warn(attr.span, \"macro_escape is a deprecated synonym for macro_use\");\n+            is_use = true;\n+            if let ast::AttrInner = attr.node.style {\n+                fld.cx.span_help(attr.span, \"consider an outer attribute, \\\n+                                             #[macro_use] mod ...\");\n+            }\n+        };\n+\n+        if is_use {\n+            match attr.node.value.node {\n+                ast::MetaWord(..) => (),\n+                _ => fld.cx.span_err(attr.span, \"arguments to macro_use are not allowed here\"),\n+            }\n+            return true;\n+        }\n+    }\n+    false\n }\n \n // Support for item-position macro invocations, exactly the same\n@@ -1299,7 +1318,7 @@ impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n \n #[cfg(test)]\n mod test {\n-    use super::{pattern_bindings, expand_crate, contains_macro_escape};\n+    use super::{pattern_bindings, expand_crate, contains_macro_use};\n     use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord, Name};\n@@ -1396,9 +1415,9 @@ mod test {\n         expand_crate(&sess,test_ecfg(),vec!(),vec!(),crate_ast);\n     }\n \n-    // macro_escape modules should allow macros to escape\n+    // macro_use modules should allow macros to escape\n     #[test] fn macros_can_escape_flattened_mods_test () {\n-        let src = \"#[macro_escape] mod foo {macro_rules! z (() => (3+4));}\\\n+        let src = \"#[macro_use] mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> int { z!() }\".to_string();\n         let sess = parse::new_parse_sess();\n         let crate_ast = parse::parse_crate_from_source_str(\n@@ -1408,16 +1427,6 @@ mod test {\n         expand_crate(&sess, test_ecfg(), vec!(), vec!(), crate_ast);\n     }\n \n-    #[test] fn test_contains_flatten (){\n-        let attr1 = make_dummy_attr (\"foo\");\n-        let attr2 = make_dummy_attr (\"bar\");\n-        let escape_attr = make_dummy_attr (\"macro_escape\");\n-        let attrs1 = vec!(attr1.clone(), escape_attr, attr2.clone());\n-        assert_eq!(contains_macro_escape(attrs1[]),true);\n-        let attrs2 = vec!(attr1,attr2);\n-        assert_eq!(contains_macro_escape(attrs2[]),false);\n-    }\n-\n     // make a MetaWord outer attribute with the given name\n     fn make_dummy_attr(s: &str) -> ast::Attribute {\n         Spanned {"}, {"sha": "ee7edceaf69699182429e1399797f296442226d1", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -24,7 +24,8 @@ use std::num::Int;\n use std::str;\n use std::iter;\n \n-#[macro_escape]\n+#[cfg_attr(stage0, macro_escape)]\n+#[cfg_attr(not(stage0), macro_use)]\n pub mod parser;\n \n pub mod lexer;"}, {"sha": "6d3038b4820d6a96a268d19fd6c6fa101fccb157", "filename": "src/test/compile-fail/module-macro_use-arguments.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Fcompile-fail%2Fmodule-macro_use-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Fcompile-fail%2Fmodule-macro_use-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmodule-macro_use-arguments.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_use(foo, bar)] //~ ERROR arguments to macro_use are not allowed here\n+mod foo {\n+}\n+\n+fn main() {\n+}"}, {"sha": "548057e9e6050aba9307860bdd43fb9117f05de4", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -16,15 +16,15 @@\n #![feature(macro_rules)]\n \n #[cfg(foo)]\n-#[macro_escape]\n+#[macro_use]\n mod foo {\n     macro_rules! bar {\n         () => { true }\n     }\n }\n \n #[cfg(not(foo))]\n-#[macro_escape]\n+#[macro_use]\n mod foo {\n     macro_rules! bar {\n         () => { false }"}, {"sha": "bf4f7e6bc403b1e969c216f1354be412340153e9", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -16,15 +16,15 @@\n #![feature(macro_rules)]\n \n #[cfg(foo)]\n-#[macro_escape]\n+#[macro_use]\n mod foo {\n     macro_rules! bar {\n         () => { true }\n     }\n }\n \n #[cfg(not(foo))]\n-#[macro_escape]\n+#[macro_use]\n mod foo {\n     macro_rules! bar {\n         () => { false }"}, {"sha": "7960a91bdc4fc125499aa200718270a63a80e178", "filename": "src/test/run-pass/deprecated-macro_escape-inner.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape-inner.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+mod foo {\n+    #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+    //~^ HELP consider an outer attribute\n+}\n+\n+fn main() {\n+}"}, {"sha": "b03905e1a0d63f2a8696aadb9667c8194dcf3127", "filename": "src/test/run-pass/deprecated-macro_escape.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf385be6a5ce267ac7cd9d1725178488e33131c/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeprecated-macro_escape.rs?ref=5bf385be6a5ce267ac7cd9d1725178488e33131c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+#[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+mod foo {\n+}\n+\n+fn main() {\n+}"}]}