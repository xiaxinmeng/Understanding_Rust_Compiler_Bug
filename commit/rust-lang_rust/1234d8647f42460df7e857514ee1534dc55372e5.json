{"sha": "1234d8647f42460df7e857514ee1534dc55372e5", "node_id": "C_kwDOAAsO6NoAKDEyMzRkODY0N2Y0MjQ2MGRmN2U4NTc1MTRlZTE1MzRkYzU1MzcyZTU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-31T18:21:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-31T18:21:50Z"}, "message": "minor: Remove unused code", "tree": {"sha": "aa5f0c810af9e080de6d731c2ac3f9ba9114fd83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa5f0c810af9e080de6d731c2ac3f9ba9114fd83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1234d8647f42460df7e857514ee1534dc55372e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1234d8647f42460df7e857514ee1534dc55372e5", "html_url": "https://github.com/rust-lang/rust/commit/1234d8647f42460df7e857514ee1534dc55372e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1234d8647f42460df7e857514ee1534dc55372e5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0327df224bf67ef2c3ceb5a69729cf36a6a96ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0327df224bf67ef2c3ceb5a69729cf36a6a96ba1", "html_url": "https://github.com/rust-lang/rust/commit/0327df224bf67ef2c3ceb5a69729cf36a6a96ba1"}], "stats": {"total": 18, "additions": 0, "deletions": 18}, "files": [{"sha": "f3e316ff3c1dfc88c3310d3e4c2ebed8080d1f26", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1234d8647f42460df7e857514ee1534dc55372e5/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234d8647f42460df7e857514ee1534dc55372e5/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=1234d8647f42460df7e857514ee1534dc55372e5", "patch": "@@ -383,7 +383,6 @@ impl<'a> CompletionContext<'a> {\n     // FIXME: This shouldn't exist\n     pub(crate) fn is_path_disallowed(&self) -> bool {\n         !self.qualifier_ctx.none()\n-            || matches!(self.prev_sibling, Some(ImmediatePrevSibling::Visibility))\n             || (matches!(self.name_ctx(), Some(NameContext { .. })) && self.pattern_ctx.is_none())\n             || matches!(self.pattern_ctx, Some(PatternContext { record_pat: Some(_), .. }))\n             || matches!("}, {"sha": "cc599a02cb26f6987ab7dcadb1db0b257e999ddc", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1234d8647f42460df7e857514ee1534dc55372e5/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234d8647f42460df7e857514ee1534dc55372e5/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=1234d8647f42460df7e857514ee1534dc55372e5", "patch": "@@ -23,7 +23,6 @@ pub(crate) enum ImmediatePrevSibling {\n     IfExpr,\n     TraitDefName,\n     ImplDefType,\n-    Visibility,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -77,17 +76,6 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n         _ => node,\n     };\n     let prev_sibling = non_trivia_sibling(node.into(), Direction::Prev)?.into_node()?;\n-    if prev_sibling.kind() == ERROR {\n-        let prev_sibling = prev_sibling.first_child()?;\n-        let res = match_ast! {\n-            match prev_sibling {\n-                // vis followed by random ident will always error the parser\n-                ast::Visibility(_) => ImmediatePrevSibling::Visibility,\n-                _ => return None,\n-            }\n-        };\n-        return Some(res);\n-    }\n     let res = match_ast! {\n         match prev_sibling {\n             ast::ExprStmt(it) => {\n@@ -442,9 +430,4 @@ mod tests {\n         check_prev_sibling(r\"fn foo() { if true {} w$0\", ImmediatePrevSibling::IfExpr);\n         check_prev_sibling(r\"fn foo() { if true {}; w$0\", None);\n     }\n-\n-    #[test]\n-    fn test_vis_prev_sibling() {\n-        check_prev_sibling(r\"pub w$0\", ImmediatePrevSibling::Visibility);\n-    }\n }"}]}