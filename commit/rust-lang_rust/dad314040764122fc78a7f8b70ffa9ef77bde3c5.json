{"sha": "dad314040764122fc78a7f8b70ffa9ef77bde3c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDMxNDA0MDc2NDEyMmZjNzhhN2Y4YjcwZmZhOWVmNzdiZGUzYzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-17T13:39:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:55:29Z"}, "message": "introduce (but do not yet use) a `CoerceMany` API\n\nThe existing pattern for coercions is fairly complex. `CoerceMany`\nenapsulates it better into a helper.", "tree": {"sha": "d3d13b4791f27e756fce0331fb851da33824ae46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d13b4791f27e756fce0331fb851da33824ae46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad314040764122fc78a7f8b70ffa9ef77bde3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad314040764122fc78a7f8b70ffa9ef77bde3c5", "html_url": "https://github.com/rust-lang/rust/commit/dad314040764122fc78a7f8b70ffa9ef77bde3c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad314040764122fc78a7f8b70ffa9ef77bde3c5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb6447bbfbb34ec093b723ff6a9dd40df2287bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb6447bbfbb34ec093b723ff6a9dd40df2287bb", "html_url": "https://github.com/rust-lang/rust/commit/eeb6447bbfbb34ec093b723ff6a9dd40df2287bb"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "40ae169a94e0d6f95aced65824f93f655875a5fb", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/dad314040764122fc78a7f8b70ffa9ef77bde3c5/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad314040764122fc78a7f8b70ffa9ef77bde3c5/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=dad314040764122fc78a7f8b70ffa9ef77bde3c5", "patch": "@@ -837,3 +837,230 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n }\n+\n+/// CoerceMany encapsulates the pattern you should use when you have\n+/// many expressions that are all getting coerced to a common\n+/// type. This arises, for example, when you have a match (the result\n+/// of each arm is coerced to a common type). It also arises in less\n+/// obvious places, such as when you have many `break foo` expressions\n+/// that target the same loop, or the various `return` expressions in\n+/// a function.\n+///\n+/// The basic protocol is as follows:\n+///\n+/// - Instantiate the `CoerceMany` with an initial `expected_ty`.\n+///   This will also serve as the \"starting LUB\". The expectation is\n+///   that this type is something which all of the expressions *must*\n+///   be coercible to. Use a fresh type variable if needed.\n+/// - For each expression whose result is to be coerced, invoke `coerce()` with.\n+///   - In some cases we wish to coerce \"non-expressions\" whose types are implicitly\n+///     unit. This happens for example if you have a `break` with no expression,\n+///     or an `if` with no `else`. In that case, invoke `coerce_forced_unit()`.\n+///   - `coerce()` and `coerce_forced_unit()` may report errors. They hide this\n+///     from you so that you don't have to worry your pretty head about it.\n+///     But if an error is reported, the final type will be `err`.\n+///   - Invoking `coerce()` may cause us to go and adjust the \"adjustments\" on\n+///     previously coerced expressions.\n+/// - When all done, invoke `complete()`. This will return the LUB of\n+///   all your expressions.\n+///   - WARNING: I don't believe this final type is guaranteed to be\n+///     related to your initial `expected_ty` in any particular way,\n+///     although it will typically be a subtype, so you should check it.\n+///   - Invoking `complete()` may cause us to go and adjust the \"adjustments\" on\n+///     previously coerced expressions.\n+///\n+/// Example:\n+///\n+/// ```\n+/// let mut coerce = CoerceMany::new(expected_ty);\n+/// for expr in exprs {\n+///     let expr_ty = fcx.check_expr_with_expectation(expr, expected);\n+///     coerce.coerce(fcx, &cause, expr, expr_ty);\n+/// }\n+/// let final_ty = coerce.complete(fcx);\n+/// ```\n+#[derive(Clone)] // (*)\n+pub struct CoerceMany<'gcx: 'tcx, 'tcx> {\n+    expected_ty: Ty<'tcx>,\n+    final_ty: Option<Ty<'tcx>>,\n+    expressions: Vec<&'gcx hir::Expr>,\n+}\n+\n+// (*) this is clone because `FnCtxt` is clone, but it seems dubious -- nmatsakis\n+\n+impl<'gcx, 'tcx> CoerceMany<'gcx, 'tcx> {\n+    pub fn new(expected_ty: Ty<'tcx>) -> Self {\n+        CoerceMany {\n+            expected_ty,\n+            final_ty: None,\n+            expressions: vec![],\n+        }\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.expressions.is_empty()\n+    }\n+\n+    /// Return the \"expected type\" with which this coercion was\n+    /// constructed.  This represents the \"downward propagated\" type\n+    /// that was given to us at the start of typing whatever construct\n+    /// we are typing (e.g., the match expression).\n+    ///\n+    /// Typically, this is used as the expected type when\n+    /// type-checking each of the alternative expressions whose types\n+    /// we are trying to merge.\n+    pub fn expected_ty(&self) -> Ty<'tcx> {\n+        self.expected_ty\n+    }\n+\n+    /// Returns the current \"merged type\", representing our best-guess\n+    /// at the LUB of the expressions we've seen so far (if any). This\n+    /// isn't *final* until you call `self.final()`, which will return\n+    /// the merged type.\n+    pub fn merged_ty(&self) -> Ty<'tcx> {\n+        self.final_ty.unwrap_or(self.expected_ty)\n+    }\n+\n+    /// Indicates that the value generated by `expression`, which is\n+    /// of type `expression_ty`, is one of the possibility that we\n+    /// could coerce from. This will record `expression` and later\n+    /// calls to `coerce` may come back and add adjustments and things\n+    /// if necessary.\n+    pub fn coerce<'a>(&mut self,\n+                      fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n+                      cause: &ObligationCause<'tcx>,\n+                      expression: &'gcx hir::Expr,\n+                      expression_ty: Ty<'tcx>)\n+    {\n+        self.coerce_inner(fcx, cause, Some(expression), expression_ty)\n+    }\n+\n+    /// Indicates that one of the inputs is a \"forced unit\". This\n+    /// occurs in a case like `if foo { ... };`, where the issing else\n+    /// generates a \"forced unit\". Another example is a `loop { break;\n+    /// }`, where the `break` has no argument expression. We treat\n+    /// these cases slightly differently for error-reporting\n+    /// purposes. Note that these tend to correspond to cases where\n+    /// the `()` expression is implicit in the source, and hence we do\n+    /// not take an expression argument.\n+    pub fn coerce_forced_unit<'a>(&mut self,\n+                                  fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n+                                  cause: &ObligationCause<'tcx>)\n+    {\n+        self.coerce_inner(fcx,\n+                          cause,\n+                          None,\n+                          fcx.tcx.mk_nil())\n+    }\n+\n+    /// The inner coercion \"engine\". If `expression` is `None`, this\n+    /// is a forced-unit case, and hence `expression_ty` must be\n+    /// `Nil`.\n+    fn coerce_inner<'a>(&mut self,\n+                        fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n+                        cause: &ObligationCause<'tcx>,\n+                        expression: Option<&'gcx hir::Expr>,\n+                        mut expression_ty: Ty<'tcx>)\n+    {\n+        // Incorporate whatever type inference information we have\n+        // until now; in principle we might also want to process\n+        // pending obligations, but doing so should only improve\n+        // compatibility (hopefully that is true) by helping us\n+        // uncover never types better.\n+        if expression_ty.is_ty_var() {\n+            expression_ty = fcx.infcx.shallow_resolve(expression_ty);\n+        }\n+\n+        // If we see any error types, just propagate that error\n+        // upwards.\n+        if expression_ty.references_error() || self.merged_ty().references_error() {\n+            self.final_ty = Some(fcx.tcx.types.err);\n+            return;\n+        }\n+\n+        // Handle the actual type unification etc.\n+        let result = if let Some(expression) = expression {\n+            if self.expressions.is_empty() {\n+                // Special-case the first expression we are coercing.\n+                // To be honest, I'm not entirely sure why we do this.\n+                fcx.try_coerce(expression, expression_ty, self.expected_ty)\n+            } else {\n+                fcx.try_find_coercion_lub(cause,\n+                                          || self.expressions.iter().cloned(),\n+                                          self.merged_ty(),\n+                                          expression,\n+                                          expression_ty)\n+            }\n+        } else {\n+            // this is a hack for cases where we default to `()` because\n+            // the expression etc has been omitted from the source. An\n+            // example is an `if let` without an else:\n+            //\n+            //     if let Some(x) = ... { }\n+            //\n+            // we wind up with a second match arm that is like `_ =>\n+            // ()`.  That is the case we are considering here. We take\n+            // a different path to get the right \"expected, found\"\n+            // message and so forth (and because we know that\n+            // `expression_ty` will be unit).\n+            //\n+            // Another example is `break` with no argument expression.\n+            assert!(expression_ty.is_nil());\n+            assert!(expression_ty.is_nil(), \"if let hack without unit type\");\n+            fcx.eq_types(true, cause, expression_ty, self.merged_ty())\n+               .map(|infer_ok| {\n+                   fcx.register_infer_ok_obligations(infer_ok);\n+                   expression_ty\n+               })\n+        };\n+\n+        match result {\n+            Ok(v) => {\n+                self.final_ty = Some(v);\n+                self.expressions.extend(expression);\n+            }\n+            Err(err) => {\n+                let (expected, found) = if expression.is_none() {\n+                    // In the case where this is a \"forced unit\", like\n+                    // `break`, we want to call the `()` \"expected\"\n+                    // since it is implied by the syntax.\n+                    assert!(expression_ty.is_nil());\n+                    (expression_ty, self.final_ty.unwrap_or(self.expected_ty))\n+                } else {\n+                    // Otherwise, the \"expected\" type for error\n+                    // reporting is the current unification type,\n+                    // which is basically the LUB of the expressions\n+                    // we've seen so far (combined with the expected\n+                    // type)\n+                    (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n+                };\n+\n+                match cause.code {\n+                    ObligationCauseCode::ReturnNoExpression => {\n+                        struct_span_err!(fcx.tcx.sess, cause.span, E0069,\n+                                         \"`return;` in a function whose return type is not `()`\")\n+                            .span_label(cause.span, &format!(\"return type is not ()\"))\n+                            .emit();\n+                    }\n+                    _ => {\n+                        fcx.report_mismatched_types(cause, expected, found, err)\n+                           .emit();\n+                    }\n+                }\n+\n+                self.final_ty = Some(fcx.tcx.types.err);\n+            }\n+        }\n+    }\n+\n+    pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+        if let Some(final_ty) = self.final_ty {\n+            final_ty\n+        } else {\n+            // If we only had inputs that were of type `!` (or no\n+            // inputs at all), then the final type is `!`.\n+            assert!(self.expressions.is_empty());\n+            fcx.tcx.types.never\n+        }\n+    }\n+}"}]}