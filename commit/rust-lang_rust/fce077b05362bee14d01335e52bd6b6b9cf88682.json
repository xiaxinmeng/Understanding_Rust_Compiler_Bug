{"sha": "fce077b05362bee14d01335e52bd6b6b9cf88682", "node_id": "C_kwDOAAsO6NoAKGZjZTA3N2IwNTM2MmJlZTE0ZDAxMzM1ZTUyYmQ2YjZiOWNmODg2ODI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-20T22:50:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-20T22:50:27Z"}, "message": "Rollup merge of #104504 - compiler-errors:fru-syntax-note, r=estebank\n\nAdd a detailed note for missing comma typo w/ FRU syntax\n\nThanks to `@pierwill` for working on this with me!\n\nFixes #104373, perhaps `@alice-i-cecile` can comment on the new error for the example provided on that issue -- feedback is welcome.\n\n```\nerror[E0063]: missing field `defaulted` in initializer of `Outer`\n  --> $DIR/multi-line-fru-suggestion.rs:14:5\n   |\nLL |     Outer {\n   |     ^^^^^ missing `defaulted`\n   |\nnote: this expression may have been misinterpreted as a `..` range expression\n  --> $DIR/multi-line-fru-suggestion.rs:16:16\n   |\nLL |           inner: Inner {\n   |  ________________^\nLL | |             a: 1,\nLL | |             b: 2,\nLL | |         }\n   | |_________^ this expression does not end in a comma...\nLL |           ..Default::default()\n   |           ^^^^^^^^^^^^^^^^^^^^ ... so this is interpreted as a `..` range expression, instead of functional record update syntax\nhelp: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n   |\nLL |         },\n   |          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0063`.\n```", "tree": {"sha": "4860b5a6bf1cfc2215197ef21559b8632f21b88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4860b5a6bf1cfc2215197ef21559b8632f21b88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce077b05362bee14d01335e52bd6b6b9cf88682", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeq8zCRBK7hj4Ov3rIwAAJ8oIAFgq+YVv88fWykcrvL6YYtUZ\nTaiHsSn0i2RfUNJcFxsc4tvz7Sj3Y0+wCDXvLpkOFfLH5wQQ9/wn4FBuKazWj0lY\nf6hmu8tSK9T3qflbIqshz24Vb+oiwkFdXVBVgNvH4q1gOwWQARP+otO33ymhnrLW\n0PfP4JwscDaVng9mJc2aqpONTsnzpTay0fjDLiHKQzEHN2+r+V8A5ER6ZnQryfG8\nFEOcIttCjdtEe0E7HzJSuVxSyB3hrftBy3EL9Y+DaQEGFVJ5wwFyxJBXW+jjjhjp\nWdfPwsrXnEOxdzABur4EK6+/x6kwn7AmVmM1eMRsXwJLvqeF4LO9UV+d+8hE6V0=\n=r4Sq\n-----END PGP SIGNATURE-----\n", "payload": "tree 4860b5a6bf1cfc2215197ef21559b8632f21b88d\nparent 7a10c4aea216ea8d5eaf51f5deebd13d5a743230\nparent bb0cb9ae9fb2dbebc62627a3f1f4326771338535\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668984627 +0100\ncommitter GitHub <noreply@github.com> 1668984627 +0100\n\nRollup merge of #104504 - compiler-errors:fru-syntax-note, r=estebank\n\nAdd a detailed note for missing comma typo w/ FRU syntax\n\nThanks to `@pierwill` for working on this with me!\n\nFixes #104373, perhaps `@alice-i-cecile` can comment on the new error for the example provided on that issue -- feedback is welcome.\n\n```\nerror[E0063]: missing field `defaulted` in initializer of `Outer`\n  --> $DIR/multi-line-fru-suggestion.rs:14:5\n   |\nLL |     Outer {\n   |     ^^^^^ missing `defaulted`\n   |\nnote: this expression may have been misinterpreted as a `..` range expression\n  --> $DIR/multi-line-fru-suggestion.rs:16:16\n   |\nLL |           inner: Inner {\n   |  ________________^\nLL | |             a: 1,\nLL | |             b: 2,\nLL | |         }\n   | |_________^ this expression does not end in a comma...\nLL |           ..Default::default()\n   |           ^^^^^^^^^^^^^^^^^^^^ ... so this is interpreted as a `..` range expression, instead of functional record update syntax\nhelp: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n   |\nLL |         },\n   |          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0063`.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce077b05362bee14d01335e52bd6b6b9cf88682", "html_url": "https://github.com/rust-lang/rust/commit/fce077b05362bee14d01335e52bd6b6b9cf88682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce077b05362bee14d01335e52bd6b6b9cf88682/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a10c4aea216ea8d5eaf51f5deebd13d5a743230", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a10c4aea216ea8d5eaf51f5deebd13d5a743230", "html_url": "https://github.com/rust-lang/rust/commit/7a10c4aea216ea8d5eaf51f5deebd13d5a743230"}, {"sha": "bb0cb9ae9fb2dbebc62627a3f1f4326771338535", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0cb9ae9fb2dbebc62627a3f1f4326771338535", "html_url": "https://github.com/rust-lang/rust/commit/bb0cb9ae9fb2dbebc62627a3f1f4326771338535"}], "stats": {"total": 186, "additions": 155, "deletions": 31}, "files": [{"sha": "2ce417a8c786459253dee5078b1e3c11e573b04a", "filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -0,0 +1,8 @@\n+hir_typeck_fru_note = this expression may have been misinterpreted as a `..` range expression\n+hir_typeck_fru_expr = this expression does not end in a comma...\n+hir_typeck_fru_expr2 = ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n+hir_typeck_fru_suggestion =\n+    to set the remaining fields{$expr ->\n+        [NONE]{\"\"}\n+        *[other] {\" \"}from `{$expr}`\n+    }, separate the last named field with a comma"}, {"sha": "1b35021db3d4bd673005f6cd539050f9e8cb7fc0", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -51,6 +51,7 @@ fluent_messages! {\n     errors => \"../locales/en-US/errors.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n     hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n+    hir_typeck => \"../locales/en-US/hir_typeck.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\","}, {"sha": "f8747386c0498d3916ddbc65be287b46d799951a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -467,6 +467,9 @@ pub enum StashKey {\n     /// When an invalid lifetime e.g. `'2` should be reinterpreted\n     /// as a char literal in the parser\n     LifetimeIsChar,\n+    /// Maybe there was a typo where a comma was forgotten before\n+    /// FRU syntax\n+    MaybeFruTypo,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "32265bcca45349ee4e6bbede9e058b4e543c3e80", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -1,4 +1,5 @@\n //! Errors emitted by `rustc_hir_analysis`.\n+use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span};\n@@ -133,3 +134,41 @@ pub struct OpMethodGenericParams {\n     pub span: Span,\n     pub method_name: String,\n }\n+\n+pub struct TypeMismatchFruTypo {\n+    /// Span of the LHS of the range\n+    pub expr_span: Span,\n+    /// Span of the `..RHS` part of the range\n+    pub fru_span: Span,\n+    /// Rendered expression of the RHS of the range\n+    pub expr: Option<String>,\n+}\n+\n+impl AddToDiagnostic for TypeMismatchFruTypo {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n+        diag.set_arg(\"expr\", self.expr.as_deref().unwrap_or(\"NONE\"));\n+\n+        // Only explain that `a ..b` is a range if it's split up\n+        if self.expr_span.between(self.fru_span).is_empty() {\n+            diag.span_note(\n+                self.expr_span.to(self.fru_span),\n+                rustc_errors::fluent::hir_typeck_fru_note,\n+            );\n+        } else {\n+            let mut multispan: MultiSpan = vec![self.expr_span, self.fru_span].into();\n+            multispan.push_span_label(self.expr_span, rustc_errors::fluent::hir_typeck_fru_expr);\n+            multispan.push_span_label(self.fru_span, rustc_errors::fluent::hir_typeck_fru_expr2);\n+            diag.span_note(multispan, rustc_errors::fluent::hir_typeck_fru_note);\n+        }\n+\n+        diag.span_suggestion(\n+            self.expr_span.shrink_to_hi(),\n+            rustc_errors::fluent::hir_typeck_fru_suggestion,\n+            \", \",\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "2764de751b08bc3fd52211d37500ddfa27bd58d8", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -5,6 +5,7 @@\n use crate::cast;\n use crate::coercion::CoerceMany;\n use crate::coercion::DynamicCoerceMany;\n+use crate::errors::TypeMismatchFruTypo;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use crate::errors::{\n     FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct,\n@@ -1616,10 +1617,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.demand_coerce_diag(&field.expr, ty, field_type, None, AllowTwoPhase::No);\n \n             if let Some(mut diag) = diag {\n-                if idx == ast_fields.len() - 1 && remaining_fields.is_empty() {\n-                    self.suggest_fru_from_range(field, variant, substs, &mut diag);\n+                if idx == ast_fields.len() - 1 {\n+                    if remaining_fields.is_empty() {\n+                        self.suggest_fru_from_range(field, variant, substs, &mut diag);\n+                        diag.emit();\n+                    } else {\n+                        diag.stash(field.span, StashKey::MaybeFruTypo);\n+                    }\n+                } else {\n+                    diag.emit();\n                 }\n-                diag.emit();\n             }\n         }\n \n@@ -1877,19 +1884,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .map(|adt| adt.did())\n                 != range_def_id\n         {\n-            let instead = self\n+            // Suppress any range expr type mismatches\n+            if let Some(mut diag) = self\n+                .tcx\n+                .sess\n+                .diagnostic()\n+                .steal_diagnostic(last_expr_field.span, StashKey::MaybeFruTypo)\n+            {\n+                diag.delay_as_bug();\n+            }\n+\n+            // Use a (somewhat arbitrary) filtering heuristic to avoid printing\n+            // expressions that are either too long, or have control character\n+            //such as newlines in them.\n+            let expr = self\n                 .tcx\n                 .sess\n                 .source_map()\n                 .span_to_snippet(range_end.expr.span)\n-                .map(|s| format!(\" from `{s}`\"))\n-                .unwrap_or_default();\n-            err.span_suggestion(\n-                range_start.span.shrink_to_hi(),\n-                &format!(\"to set the remaining fields{instead}, separate the last named field with a comma\"),\n-                \",\",\n-                Applicability::MaybeIncorrect,\n-            );\n+                .ok()\n+                .filter(|s| s.len() < 25 && !s.contains(|c: char| c.is_control()));\n+\n+            let fru_span = self\n+                .tcx\n+                .sess\n+                .source_map()\n+                .span_extend_while(range_start.span, |c| c.is_whitespace())\n+                .unwrap_or(range_start.span).shrink_to_hi().to(range_end.span);\n+\n+            err.subdiagnostic(TypeMismatchFruTypo {\n+                expr_span: range_start.span,\n+                fru_span,\n+                expr,\n+            });\n         }\n     }\n "}, {"sha": "7b2b139142e4c162d2565b21986e0dcdbba761d1", "filename": "src/test/ui/structs/multi-line-fru-suggestion.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -0,0 +1,22 @@\n+#[derive(Default)]\n+struct Inner {\n+    a: u8,\n+    b: u8,\n+}\n+\n+#[derive(Default)]\n+struct Outer {\n+    inner: Inner,\n+    defaulted: u8,\n+}\n+\n+fn main(){\n+    Outer {\n+        //~^ ERROR missing field `defaulted` in initializer of `Outer`\n+        inner: Inner {\n+            a: 1,\n+            b: 2,\n+        }\n+        ..Default::default()\n+    };\n+}"}, {"sha": "8bbd3ace7d29ef58e2cc2cf805734ddff1a0f02c", "filename": "src/test/ui/structs/multi-line-fru-suggestion.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fmulti-line-fru-suggestion.stderr?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -0,0 +1,25 @@\n+error[E0063]: missing field `defaulted` in initializer of `Outer`\n+  --> $DIR/multi-line-fru-suggestion.rs:14:5\n+   |\n+LL |     Outer {\n+   |     ^^^^^ missing `defaulted`\n+   |\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/multi-line-fru-suggestion.rs:16:16\n+   |\n+LL |           inner: Inner {\n+   |  ________________^\n+LL | |             a: 1,\n+LL | |             b: 2,\n+LL | |         }\n+   | |_________^ this expression does not end in a comma...\n+LL |           ..Default::default()\n+   |           ^^^^^^^^^^^^^^^^^^^^ ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n+help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n+   |\n+LL |         }, \n+   |          +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0063`."}, {"sha": "d93a62185b3f17184522f6a52aa0de0e666d81cd", "filename": "src/test/ui/structs/struct-record-suggestion.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -7,9 +7,8 @@ struct A {\n }\n \n fn a() {\n-    let q = A { c: 5,..Default::default() };\n-    //~^ ERROR mismatched types\n-    //~| ERROR missing fields\n+    let q = A { c: 5, ..Default::default() };\n+    //~^ ERROR missing fields\n     //~| HELP separate the last named field with a comma\n     let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);\n@@ -21,7 +20,7 @@ struct B {\n }\n \n fn b() {\n-    let q = B { b: 1,..Default::default() };\n+    let q = B { b: 1, ..Default::default() };\n     //~^ ERROR mismatched types\n     //~| HELP separate the last named field with a comma\n     let r = B { b: 1 };"}, {"sha": "f0fd1c94e9ab5d2c386f6567e32ee28f9d61019f", "filename": "src/test/ui/structs/struct-record-suggestion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -8,8 +8,7 @@ struct A {\n \n fn a() {\n     let q = A { c: 5..Default::default() };\n-    //~^ ERROR mismatched types\n-    //~| ERROR missing fields\n+    //~^ ERROR missing fields\n     //~| HELP separate the last named field with a comma\n     let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);"}, {"sha": "f4fd655e698b08171f3d6375d673c6d098f9ab5d", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fce077b05362bee14d01335e52bd6b6b9cf88682/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=fce077b05362bee14d01335e52bd6b6b9cf88682", "patch": "@@ -1,37 +1,38 @@\n-error[E0308]: mismatched types\n-  --> $DIR/struct-record-suggestion.rs:10:20\n-   |\n-LL |     let q = A { c: 5..Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n-   |\n-   = note: expected type `u64`\n-            found struct `std::ops::Range<{integer}>`\n-\n error[E0063]: missing fields `b` and `d` in initializer of `A`\n   --> $DIR/struct-record-suggestion.rs:10:13\n    |\n LL |     let q = A { c: 5..Default::default() };\n    |             ^ missing `b` and `d`\n    |\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/struct-record-suggestion.rs:10:20\n+   |\n+LL |     let q = A { c: 5..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n    |\n-LL |     let q = A { c: 5,..Default::default() };\n+LL |     let q = A { c: 5, ..Default::default() };\n    |                     +\n \n error[E0308]: mismatched types\n-  --> $DIR/struct-record-suggestion.rs:24:20\n+  --> $DIR/struct-record-suggestion.rs:23:20\n    |\n LL |     let q = B { b: 1..Default::default() };\n    |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `std::ops::Range`\n    |\n    = note: expected type `u32`\n             found struct `std::ops::Range<{integer}>`\n+note: this expression may have been misinterpreted as a `..` range expression\n+  --> $DIR/struct-record-suggestion.rs:23:20\n+   |\n+LL |     let q = B { b: 1..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n    |\n-LL |     let q = B { b: 1,..Default::default() };\n+LL |     let q = B { b: 1, ..Default::default() };\n    |                     +\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0063, E0308.\n For more information about an error, try `rustc --explain E0063`."}]}