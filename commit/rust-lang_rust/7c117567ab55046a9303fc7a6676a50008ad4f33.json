{"sha": "7c117567ab55046a9303fc7a6676a50008ad4f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMTE3NTY3YWI1NTA0NmE5MzAzZmM3YTY2NzZhNTAwMDhhZDRmMzM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T08:24:18Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T08:24:18Z"}, "message": "Merge #989\n\n989: Implement naive version of fill_struct_fields assist r=matklad a=yanchith\n\nFixes #964\r\n\r\nThis implements the `fill_struct_fields` assist. Currently only works for named struct fields, but not for tuple structs, because we seem to be missing a `TupleStructLit` (akin to `StructLit`, but for tuple structs). I am happy to implement `TupleStructLit` parsing given some guidance (provided it's really missing) and make the assist work for tuple structs as well. Could do so either in this PR, or another one \ud83d\ude42 \r\n\r\nSorry if I missed something important, this is my first PR for Rust Analyzer.\r\n\r\nBtw is there any way to run the assists in emacs?\r\n\r\nUPDATE: I just realized that parsing `TupleStructLit` would be quite difficult as it it really similar, if not identical to a function call...\n\nCo-authored-by: yanchith <yanchi.toth@gmail.com>", "tree": {"sha": "5f00d197d1dc9f8ab108afb394cedf227d892288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f00d197d1dc9f8ab108afb394cedf227d892288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c117567ab55046a9303fc7a6676a50008ad4f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c117567ab55046a9303fc7a6676a50008ad4f33", "html_url": "https://github.com/rust-lang/rust/commit/7c117567ab55046a9303fc7a6676a50008ad4f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c117567ab55046a9303fc7a6676a50008ad4f33/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "html_url": "https://github.com/rust-lang/rust/commit/4c1ea0b628f949612b48dd3b65c7d8bb2255f572"}, {"sha": "ca262fbab80dd74fd585544b9e6ce99e394dc573", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca262fbab80dd74fd585544b9e6ce99e394dc573", "html_url": "https://github.com/rust-lang/rust/commit/ca262fbab80dd74fd585544b9e6ce99e394dc573"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "90ce9c5775f8b9ea5791e303fda42c96c0c139c3", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=7c117567ab55046a9303fc7a6676a50008ad4f33", "patch": "@@ -0,0 +1,151 @@\n+use std::fmt::Write;\n+\n+use hir::{AdtDef, Ty, source_binder};\n+use hir::db::HirDatabase;\n+\n+use ra_syntax::ast::{self, AstNode};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let struct_lit = ctx.node_at_offset::<ast::StructLit>()?;\n+    let named_field_list = struct_lit.named_field_list()?;\n+\n+    // If we already have existing struct fields, don't provide the assist.\n+    if named_field_list.fields().count() > 0 {\n+        return None;\n+    }\n+\n+    let function =\n+        source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, struct_lit.syntax())?;\n+\n+    let infer_result = function.infer(ctx.db);\n+    let source_map = function.body_source_map(ctx.db);\n+    let node_expr = source_map.node_expr(struct_lit.into())?;\n+    let struct_lit_ty = infer_result[node_expr].clone();\n+    let struct_def = match struct_lit_ty {\n+        Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n+        _ => return None,\n+    };\n+\n+    let db = ctx.db;\n+    ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n+        let mut buf = String::from(\"{\\n\");\n+        let struct_fields = struct_def.fields(db);\n+        for field in struct_fields {\n+            let field_name = field.name(db).to_string();\n+            write!(&mut buf, \"    {}: (),\\n\", field_name).unwrap();\n+        }\n+        buf.push_str(\"}\");\n+\n+        edit.target(struct_lit.syntax().range());\n+        edit.set_cursor(struct_lit.syntax().range().start());\n+        edit.replace_node_and_indent(named_field_list.syntax(), buf);\n+    });\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_target};\n+\n+    use super::fill_struct_fields;\n+\n+    #[test]\n+    fn fill_struct_fields_empty_body() {\n+        check_assist(\n+            fill_struct_fields,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = S<|> {}\n+            }\n+            \"#,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = <|>S {\n+                    a: (),\n+                    b: (),\n+                    c: (),\n+                    d: (),\n+                    r: (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn fill_struct_fields_target() {\n+        check_assist_target(\n+            fill_struct_fields,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = S<|> {}\n+            }\n+            \"#,\n+            \"S {}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn fill_struct_fields_preserve_self() {\n+        check_assist(\n+            fill_struct_fields,\n+            r#\"\n+            struct Foo {\n+                foo: u8,\n+                bar: String,\n+                baz: i128,\n+            }\n+\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    Self <|>{}\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct Foo {\n+                foo: u8,\n+                bar: String,\n+                baz: i128,\n+            }\n+\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    <|>Self {\n+                        foo: (),\n+                        bar: (),\n+                        baz: (),\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "871b37f58cac1a24b9eca3bebc2cbbaaceb6e1a1", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c117567ab55046a9303fc7a6676a50008ad4f33/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=7c117567ab55046a9303fc7a6676a50008ad4f33", "patch": "@@ -90,6 +90,7 @@ mod add_impl;\n mod flip_comma;\n mod change_visibility;\n mod fill_match_arms;\n+mod fill_struct_fields;\n mod introduce_variable;\n mod replace_if_let_with_match;\n mod split_import;\n@@ -103,6 +104,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,\n+        fill_struct_fields::fill_struct_fields,\n         flip_comma::flip_comma,\n         introduce_variable::introduce_variable,\n         replace_if_let_with_match::replace_if_let_with_match,"}]}