{"sha": "8bd8413906ab2e22a152bac8cb53f0884b63f111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDg0MTM5MDZhYjJlMjJhMTUyYmFjOGNiNTNmMDg4NGI2M2YxMTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:52:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:52:46Z"}, "message": "Add test for writing-through-uninit bug (reported on IRC by jrmuizel), plus fix in typestate system.", "tree": {"sha": "2238b6ae7f6c9c7737190f74e5eb17accd73e320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2238b6ae7f6c9c7737190f74e5eb17accd73e320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd8413906ab2e22a152bac8cb53f0884b63f111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd8413906ab2e22a152bac8cb53f0884b63f111", "html_url": "https://github.com/rust-lang/rust/commit/8bd8413906ab2e22a152bac8cb53f0884b63f111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd8413906ab2e22a152bac8cb53f0884b63f111/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "html_url": "https://github.com/rust-lang/rust/commit/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "0f8588decda9611aa24203a22a7f87c40823caa2", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bd8413906ab2e22a152bac8cb53f0884b63f111/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8bd8413906ab2e22a152bac8cb53f0884b63f111/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=8bd8413906ab2e22a152bac8cb53f0884b63f111", "patch": "@@ -391,6 +391,14 @@ let condition_assigning_visitor\n       end\n   in\n \n+  let raise_dst_init_precond_if_writing_through sid lval =\n+    match lval with\n+        Ast.LVAL_base _ -> ()\n+      | Ast.LVAL_ext _ ->\n+          let precond = slot_inits (lval_slots cx lval) in\n+            raise_precondition sid precond;\n+  in\n+\n   let visit_stmt_pre s =\n     begin\n       match s.node with\n@@ -402,6 +410,7 @@ let condition_assigning_visitor\n             let precond = slot_inits (lval_slots cx src) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_send (dst, src) ->\n@@ -423,6 +432,7 @@ let condition_assigning_visitor\n               (Array.append (rec_inputs_slots cx entries) base_slots)\n             in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n@@ -431,38 +441,45 @@ let condition_assigning_visitor\n               (tup_inputs_slots cx modes_atoms)\n             in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_new_vec (dst, _, atoms) ->\n             let precond = slot_inits (atoms_slots cx atoms) in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_new_str (dst, _) ->\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_new_port dst ->\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_new_chan (dst, port) ->\n             let precond = slot_inits (lval_option_slots cx port) in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_new_box (dst, _, src) ->\n             let precond = slot_inits (atom_slots cx src) in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n         | Ast.STMT_copy (dst, src) ->\n             let precond = slot_inits (expr_slots cx src) in\n             let postcond = slot_inits (lval_slots cx dst) in\n+              raise_dst_init_precond_if_writing_through s.id dst;\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n@@ -474,11 +491,13 @@ let condition_assigning_visitor\n \n         | Ast.STMT_spawn (dst, _, lv, args)\n         | Ast.STMT_call (dst, lv, args) ->\n+            raise_dst_init_precond_if_writing_through s.id dst;\n             visit_callable_pre s.id (lval_slots cx dst) lv args\n \n         | Ast.STMT_bind (dst, lv, args_opt) ->\n             let args = arr_map_partial args_opt (fun a -> a) in\n-            visit_callable_pre s.id (lval_slots cx dst) lv args\n+              raise_dst_init_precond_if_writing_through s.id dst;\n+              visit_callable_pre s.id (lval_slots cx dst) lv args\n \n         | Ast.STMT_ret (Some at) ->\n             let precond = slot_inits (atom_slots cx at) in"}, {"sha": "55edbf8787515e5cf9c741ad23049bdc1828626b", "filename": "src/test/compile-fail/writing-through-uninit-vec.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bd8413906ab2e22a152bac8cb53f0884b63f111/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd8413906ab2e22a152bac8cb53f0884b63f111/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs?ref=8bd8413906ab2e22a152bac8cb53f0884b63f111", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern: Unsatisfied precondition constraint\n+\n+fn test() {\n+    let vec[int] w;\n+    w.(5) = 0;\n+}\n+\n+fn main() {\n+  test();\n+}\n\\ No newline at end of file"}]}