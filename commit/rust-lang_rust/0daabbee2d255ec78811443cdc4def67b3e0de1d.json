{"sha": "0daabbee2d255ec78811443cdc4def67b3e0de1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYWFiYmVlMmQyNTVlYzc4ODExNDQzY2RjNGRlZjY3YjNlMGRlMWQ=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T19:19:01Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T19:52:39Z"}, "message": "Change to just use first binders and add test", "tree": {"sha": "186a5dcf3caadefd4957f657360ce6fb4862181c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186a5dcf3caadefd4957f657360ce6fb4862181c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0daabbee2d255ec78811443cdc4def67b3e0de1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0daabbee2d255ec78811443cdc4def67b3e0de1d", "html_url": "https://github.com/rust-lang/rust/commit/0daabbee2d255ec78811443cdc4def67b3e0de1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0daabbee2d255ec78811443cdc4def67b3e0de1d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34e7c60f5b0d3e860b5b26191535a86fb649dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34e7c60f5b0d3e860b5b26191535a86fb649dba", "html_url": "https://github.com/rust-lang/rust/commit/c34e7c60f5b0d3e860b5b26191535a86fb649dba"}], "stats": {"total": 245, "additions": 218, "deletions": 27}, "files": [{"sha": "a70b374fc6d21b8b4e236ed4ec07323f9d5c8ad6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0daabbee2d255ec78811443cdc4def67b3e0de1d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daabbee2d255ec78811443cdc4def67b3e0de1d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=0daabbee2d255ec78811443cdc4def67b3e0de1d", "patch": "@@ -485,38 +485,59 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         mut self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        let mut predicate_iter = predicates.iter().peekable();\n-        while let Some(predicate) = predicate_iter.next() {\n-            match predicate.as_ref().skip_binder() {\n-                ty::ExistentialPredicate::Trait(trait_ref) => {\n-                    self = self.in_binder(&predicate, |mut cx, _predicate| {\n+        // Okay, so this is a bit tricky. Imagine we have a trait object like\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()>`. When we mangle this, the\n+        // output looks really close to the syntax, where the `Bar = &'a ()` bit\n+        // is under the same binders (`['a]`) as the `Foo<'a>` bit. However, we\n+        // actually desugar these into two separate `ExistentialPredicate`s. We\n+        // can't enter/exit the \"binder scope\" twice though, because then we\n+        // would mangle the binders twice. (Also, side note, we merging these\n+        // two is kind of difficult, because of potential HRTBs in the Projection\n+        // predicate.)\n+        //\n+        // Also worth mentioning: imagine that we instead had\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()> + Send`. In this case, `Send` is\n+        // under the same binders as `Foo`. Currently, this doesn't matter,\n+        // because only *auto traits* are allowed other than the principal trait\n+        // and all auto traits don't have any generics. Two things could\n+        // make this not an \"okay\" mangling:\n+        // 1) Instead of mangling only *used*\n+        // bound vars, we want to mangle *all* bound vars (`for<'b> Send` is a\n+        // valid trait predicate);\n+        // 2) We allow multiple \"principal\" traits in the future, or at least\n+        // allow in any form another trait predicate that can take generics.\n+        //\n+        // Here we assume that predicates have the following structure:\n+        // [<Trait> [{<Projection>}]] [{<Auto>}]\n+        // Since any predicates after the first one shouldn't change the binders,\n+        // just put them all in the binders of the first.\n+        self = self.in_binder(&predicates[0], |mut cx, _| {\n+            for predicate in predicates.iter() {\n+                // It would be nice to be able to validate bound vars here, but\n+                // projections can actually include bound vars from super traits\n+                // because of HRTBs (only in the `Self` type). Also, auto traits\n+                // could have different bound vars *anyways*.\n+                match predicate.as_ref().skip_binder() {\n+                    ty::ExistentialPredicate::Trait(trait_ref) => {\n                         // Use a type that can't appear in defaults of type parameters.\n                         let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n                         let trait_ref = trait_ref.with_self_ty(cx.tcx, dummy_self);\n                         cx = cx.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n-                        while let Some(projection_pred) = predicate_iter.next_if(|p| {\n-                            matches!(p.skip_binder(), ty::ExistentialPredicate::Projection(_))\n-                        }) {\n-                            let projection = match projection_pred.skip_binder() {\n-                                ty::ExistentialPredicate::Projection(projection) => projection,\n-                                _ => unreachable!(),\n-                            };\n-                            let name = cx.tcx.associated_item(projection.item_def_id).ident;\n-                            cx.push(\"p\");\n-                            cx.push_ident(&name.as_str());\n-                            cx = projection.ty.print(cx)?;\n-                        }\n-                        Ok(cx)\n-                    })?;\n-                }\n-                ty::ExistentialPredicate::Projection(_) => {\n-                    unreachable!(\"handled in trait predicate arm\")\n-                }\n-                ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                    self = self.print_def_path(*def_id, &[])?;\n+                    }\n+                    ty::ExistentialPredicate::Projection(projection) => {\n+                        let name = cx.tcx.associated_item(projection.item_def_id).ident;\n+                        cx.push(\"p\");\n+                        cx.push_ident(&name.as_str());\n+                        cx = projection.ty.print(cx)?;\n+                    }\n+                    ty::ExistentialPredicate::AutoTrait(def_id) => {\n+                        cx = cx.print_def_path(*def_id, &[])?;\n+                    }\n                 }\n             }\n-        }\n+            Ok(cx)\n+        })?;\n+\n         self.push(\"E\");\n         Ok(self)\n     }"}, {"sha": "c2e451670ed1c203766db6105e68ab67e4d0e0a9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0daabbee2d255ec78811443cdc4def67b3e0de1d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daabbee2d255ec78811443cdc4def67b3e0de1d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=0daabbee2d255ec78811443cdc4def67b3e0de1d", "patch": "@@ -1386,11 +1386,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let auto_trait_predicates = auto_traits.into_iter().map(|trait_ref| {\n             ty::Binder::dummy(ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()))\n         });\n+        // N.b. principal, projections, auto traits\n+        // FIXME: This is actually wrong with multiple principals in regards to symbol mangling\n         let mut v = regular_trait_predicates\n-            .chain(auto_trait_predicates)\n             .chain(\n                 existential_projections.map(|x| x.map_bound(ty::ExistentialPredicate::Projection)),\n             )\n+            .chain(auto_trait_predicates)\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();"}, {"sha": "200280c358f5b3c31548a2c19358de2fc9ef0754", "filename": "src/test/ui/symbol-names/trait-objects.legacy.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.legacy.stderr?ref=0daabbee2d255ec78811443cdc4def67b3e0de1d", "patch": "@@ -0,0 +1,56 @@\n+error: symbol-name(_ZN136_$LT$$RF$dyn$u20$core..ops..function..FnMut$LT$$LP$$RF$u8$C$$RP$$GT$$u2b$Output$u20$$u3d$$u20$$LP$$RP$$u20$as$u20$trait_objects..Bar$GT$6method17h1e14a5f2d365272fE)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn core::ops::function::FnMut<(&u8,)>+Output = () as trait_objects::Bar>::method::h1e14a5f2d365272f)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn core::ops::function::FnMut<(&u8,)>+Output = () as trait_objects::Bar>::method)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN159_$LT$$RF$dyn$u20$core..ops..function..FnMut$LT$$LP$$RF$u8$C$$RP$$GT$$u2b$Output$u20$$u3d$$u20$$LP$$RP$$u2b$core..marker..Send$u20$as$u20$trait_objects..Foo$GT$6method17he7a07961c9aaa367E)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn core::ops::function::FnMut<(&u8,)>+Output = ()+core::marker::Send as trait_objects::Foo>::method::he7a07961c9aaa367)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn core::ops::function::FnMut<(&u8,)>+Output = ()+core::marker::Send as trait_objects::Foo>::method)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN159_$LT$$RF$dyn$u20$core..ops..function..FnMut$LT$$LP$$RF$u8$C$$RP$$GT$$u2b$Output$u20$$u3d$$u20$$LP$$RP$$u2b$core..marker..Send$u20$as$u20$trait_objects..Baz$GT$6method17ha53e6f99bf033f0bE)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn core::ops::function::FnMut<(&u8,)>+Output = ()+core::marker::Send as trait_objects::Baz>::method::ha53e6f99bf033f0b)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn core::ops::function::FnMut<(&u8,)>+Output = ()+core::marker::Send as trait_objects::Baz>::method)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "ffbd3901b8e2ad9134eff6805ba10f2c52ad8ba1", "filename": "src/test/ui/symbol-names/trait-objects.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs?ref=0daabbee2d255ec78811443cdc4def67b3e0de1d", "patch": "@@ -0,0 +1,56 @@\n+// Ensure that trait objects don't include more than one binder. See #83611\n+\n+// build-fail\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+\n+#![feature(rustc_attrs)]\n+\n+trait Bar {\n+    fn method(&self) {}\n+}\n+\n+impl Bar for &dyn FnMut(&u8) {\n+    #[rustc_symbol_name]\n+    //[legacy]~^ ERROR symbol-name\n+    //[legacy]~| ERROR demangling\n+    //[legacy]~| ERROR demangling-alt\n+    //[v0]~^^^^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Foo {\n+    fn method(&self) {}\n+}\n+\n+impl Foo for &(dyn FnMut(&u8) + for<'b> Send) {\n+    #[rustc_symbol_name]\n+    //[legacy]~^ ERROR symbol-name\n+    //[legacy]~| ERROR demangling\n+    //[legacy]~| ERROR demangling-alt\n+    //[v0]~^^^^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Baz {\n+    fn method(&self) {}\n+}\n+\n+impl Baz for &(dyn for<'b> Send + FnMut(&u8)) {\n+    #[rustc_symbol_name]\n+    //[legacy]~^ ERROR symbol-name\n+    //[legacy]~| ERROR demangling\n+    //[legacy]~| ERROR demangling-alt\n+    //[v0]~^^^^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+}"}, {"sha": "7a29f44718af9c3b927088497eab375e0ccf49df", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0daabbee2d255ec78811443cdc4def67b3e0de1d/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=0daabbee2d255ec78811443cdc4def67b3e0de1d", "patch": "@@ -0,0 +1,56 @@\n+error: symbol-name(_RNvXCs21hi0yVfW1J_13trait_objectsRDG_INtNtNtCs54lBhuwykzk_4core3ops8function5FnMutTRL0_hEEp6OutputuEL_NtB2_3Bar6method)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[3b0e14d6e1ad42d0]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[17891616a171812d]::Bar>::method)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects::Bar>::method)\n+  --> $DIR/trait-objects.rs:15:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs_Cs21hi0yVfW1J_13trait_objectsRDG_INtNtNtCs54lBhuwykzk_4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBI_6marker4SendEL_NtB4_3Foo6method)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[3b0e14d6e1ad42d0]::ops::function::FnMut<(&'a u8,), Output = ()> + core[3b0e14d6e1ad42d0]::marker::Send as trait_objects[17891616a171812d]::Foo>::method)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Foo>::method)\n+  --> $DIR/trait-objects.rs:30:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs0_Cs21hi0yVfW1J_13trait_objectsRDG_INtNtNtCs54lBhuwykzk_4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBJ_6marker4SendEL_NtB5_3Baz6method)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[3b0e14d6e1ad42d0]::ops::function::FnMut<(&'a u8,), Output = ()> + core[3b0e14d6e1ad42d0]::marker::Send as trait_objects[17891616a171812d]::Baz>::method)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Baz>::method)\n+  --> $DIR/trait-objects.rs:45:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}