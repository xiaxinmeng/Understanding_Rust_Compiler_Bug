{"sha": "679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWI0ZTFiMzg3MGQ4ZGQ5MzQ5Yjk5YTY4YmU0YmI5NWIzZDVmYTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T14:37:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T19:07:11Z"}, "message": "rollup merge of #16971 : treeman/json-decode", "tree": {"sha": "aab83eb5634dbb1eb296298c7a2936821e8b42c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab83eb5634dbb1eb296298c7a2936821e8b42c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7", "html_url": "https://github.com/rust-lang/rust/commit/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b625d43f8fd2e9a800ca8a419f7d3f5f52604205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b625d43f8fd2e9a800ca8a419f7d3f5f52604205", "html_url": "https://github.com/rust-lang/rust/commit/b625d43f8fd2e9a800ca8a419f7d3f5f52604205"}, {"sha": "4f4a3dfb1a2a46021bc47f19bca48b0c4df94dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4a3dfb1a2a46021bc47f19bca48b0c4df94dd5", "html_url": "https://github.com/rust-lang/rust/commit/4f4a3dfb1a2a46021bc47f19bca48b0c4df94dd5"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "733bc593922dedf32f399b21240bfee1843823d8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=679b4e1b3870d8dd9349b99a68be4bb95b3d5fa7", "patch": "@@ -2128,7 +2128,15 @@ impl ::Decoder<DecoderError> for Decoder {\n         let mut obj = try!(expect!(self.pop(), Object));\n \n         let value = match obj.pop(&name.to_string()) {\n-            None => return Err(MissingFieldError(name.to_string())),\n+            None => {\n+                // Add a Null and try to parse it as an Option<_>\n+                // to get None as a default value.\n+                self.stack.push(Null);\n+                match f(self) {\n+                    Ok(x) => x,\n+                    Err(_) => return Err(MissingFieldError(name.to_string())),\n+                }\n+            },\n             Some(json) => {\n                 self.stack.push(json);\n                 try!(f(self))\n@@ -2167,6 +2175,7 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_option<T>(&mut self, f: |&mut Decoder, bool| -> DecodeResult<T>) -> DecodeResult<T> {\n+        debug!(\"read_option()\");\n         match self.pop() {\n             Null => f(self, false),\n             value => { self.stack.push(value); f(self, true) }\n@@ -2372,6 +2381,33 @@ mod tests {\n     use std::{i64, u64, f32, f64, io};\n     use std::collections::TreeMap;\n \n+    #[deriving(Decodable, Eq, PartialEq, Show)]\n+    struct OptionData {\n+        opt: Option<uint>,\n+    }\n+\n+    #[test]\n+    fn test_decode_option_none() {\n+        let s =\"{}\";\n+        let obj: OptionData = super::decode(s).unwrap();\n+        assert_eq!(obj, OptionData { opt: None });\n+    }\n+\n+    #[test]\n+    fn test_decode_option_some() {\n+        let s = \"{ \\\"opt\\\": 10 }\";\n+        let obj: OptionData = super::decode(s).unwrap();\n+        assert_eq!(obj, OptionData { opt: Some(10u) });\n+    }\n+\n+    #[test]\n+    fn test_decode_option_malformed() {\n+        check_err::<OptionData>(\"{ \\\"opt\\\": [] }\",\n+                                ExpectedError(\"Number\".to_string(), \"[]\".to_string()));\n+        check_err::<OptionData>(\"{ \\\"opt\\\": false }\",\n+                                ExpectedError(\"Number\".to_string(), \"false\".to_string()));\n+    }\n+\n     #[deriving(PartialEq, Encodable, Decodable, Show)]\n     enum Animal {\n         Dog,"}]}