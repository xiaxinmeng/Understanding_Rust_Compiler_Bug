{"sha": "7f107c415f1c88b016b9da0fa9c58e6b61f82589", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTA3YzQxNWYxYzg4YjAxNmI5ZGEwZmE5YzU4ZTZiNjFmODI1ODk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-23T05:18:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-23T05:18:29Z"}, "message": "core::rt: Remove UvEventLoop::new_scheduler function", "tree": {"sha": "218151b7e6f66a2f1edae005e3149237fc7bc298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/218151b7e6f66a2f1edae005e3149237fc7bc298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f107c415f1c88b016b9da0fa9c58e6b61f82589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f107c415f1c88b016b9da0fa9c58e6b61f82589", "html_url": "https://github.com/rust-lang/rust/commit/7f107c415f1c88b016b9da0fa9c58e6b61f82589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f107c415f1c88b016b9da0fa9c58e6b61f82589/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7e392752eddc202dae12c6b89b7c59556990ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e392752eddc202dae12c6b89b7c59556990ce", "html_url": "https://github.com/rust-lang/rust/commit/8b7e392752eddc202dae12c6b89b7c59556990ce"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "b4ecf9cd0616253dea536e404632e743b1c8bf7b", "filename": "src/libcore/rt/local.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal.rs?ref=7f107c415f1c88b016b9da0fa9c58e6b61f82589", "patch": "@@ -85,30 +85,31 @@ impl Local for IoFactoryObject {\n \n #[cfg(test)]\n mod test {\n+    use rt::test::*;\n     use rt::sched::Scheduler;\n     use rt::uv::uvio::UvEventLoop;\n     use super::*;\n \n     #[test]\n     fn thread_local_scheduler_smoke_test() {\n-        let scheduler = ~UvEventLoop::new_scheduler();\n+        let scheduler = ~new_test_uv_sched();\n         Local::put(scheduler);\n         let _scheduler: ~Scheduler = Local::take();\n     }\n \n     #[test]\n     fn thread_local_scheduler_two_instances() {\n-        let scheduler = ~UvEventLoop::new_scheduler();\n+        let scheduler = ~new_test_uv_sched();\n         Local::put(scheduler);\n         let _scheduler: ~Scheduler = Local::take();\n-        let scheduler = ~UvEventLoop::new_scheduler();\n+        let scheduler = ~new_test_uv_sched();\n         Local::put(scheduler);\n         let _scheduler: ~Scheduler = Local::take();\n     }\n \n     #[test]\n     fn borrow_smoke_test() {\n-        let scheduler = ~UvEventLoop::new_scheduler();\n+        let scheduler = ~new_test_uv_sched();\n         Local::put(scheduler);\n         unsafe {\n             let _scheduler: *mut Scheduler = Local::unsafe_borrow();"}, {"sha": "f136732c00b931fb6da6fa30f78ea160fcc4d430", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=7f107c415f1c88b016b9da0fa9c58e6b61f82589", "patch": "@@ -223,11 +223,12 @@ fn test_context() {\n     use rt::uv::uvio::UvEventLoop;\n     use cell::Cell;\n     use rt::local::Local;\n+    use rt::test::new_test_uv_sched;\n \n     assert_eq!(context(), OldTaskContext);\n     do run_in_bare_thread {\n         assert_eq!(context(), GlobalContext);\n-        let mut sched = ~UvEventLoop::new_scheduler();\n+        let mut sched = ~new_test_uv_sched();\n         let task = ~do Coroutine::new(&mut sched.stack_pool) {\n             assert_eq!(context(), TaskContext);\n             let sched = Local::take::<Scheduler>();"}, {"sha": "78c5da08c39ba0c5043b7d3ba4b1c53c49149b18", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=7f107c415f1c88b016b9da0fa9c58e6b61f82589", "patch": "@@ -435,7 +435,7 @@ mod test {\n             let mut task_ran = false;\n             let task_ran_ptr: *mut bool = &mut task_ran;\n \n-            let mut sched = ~UvEventLoop::new_scheduler();\n+            let mut sched = ~new_test_uv_sched();\n             let task = ~do Coroutine::new(&mut sched.stack_pool) {\n                 unsafe { *task_ran_ptr = true; }\n             };\n@@ -452,7 +452,7 @@ mod test {\n             let mut task_count = 0;\n             let task_count_ptr: *mut int = &mut task_count;\n \n-            let mut sched = ~UvEventLoop::new_scheduler();\n+            let mut sched = ~new_test_uv_sched();\n             for int::range(0, total) |_| {\n                 let task = ~do Coroutine::new(&mut sched.stack_pool) {\n                     unsafe { *task_count_ptr = *task_count_ptr + 1; }\n@@ -470,7 +470,7 @@ mod test {\n             let mut count = 0;\n             let count_ptr: *mut int = &mut count;\n \n-            let mut sched = ~UvEventLoop::new_scheduler();\n+            let mut sched = ~new_test_uv_sched();\n             let task1 = ~do Coroutine::new(&mut sched.stack_pool) {\n                 unsafe { *count_ptr = *count_ptr + 1; }\n                 let mut sched = Local::take::<Scheduler>();\n@@ -499,7 +499,7 @@ mod test {\n             let mut count = 0;\n             let count_ptr: *mut int = &mut count;\n \n-            let mut sched = ~UvEventLoop::new_scheduler();\n+            let mut sched = ~new_test_uv_sched();\n \n             let start_task = ~do Coroutine::new(&mut sched.stack_pool) {\n                 run_task(count_ptr);\n@@ -528,7 +528,7 @@ mod test {\n     #[test]\n     fn test_block_task() {\n         do run_in_bare_thread {\n-            let mut sched = ~UvEventLoop::new_scheduler();\n+            let mut sched = ~new_test_uv_sched();\n             let task = ~do Coroutine::new(&mut sched.stack_pool) {\n                 let sched = Local::take::<Scheduler>();\n                 assert!(sched.in_task_context());\n@@ -577,15 +577,15 @@ mod test {\n             let (port, chan) = oneshot::<()>();\n             let port_cell = Cell(port);\n             let chan_cell = Cell(chan);\n-            let mut sched1 = ~UvEventLoop::new_scheduler();\n+            let mut sched1 = ~new_test_uv_sched();\n             let handle1 = sched1.make_handle();\n             let handle1_cell = Cell(handle1);\n             let task1 = ~do Coroutine::new(&mut sched1.stack_pool) {\n                 chan_cell.take().send(());\n             };\n             sched1.enqueue_task(task1);\n \n-            let mut sched2 = ~UvEventLoop::new_scheduler();\n+            let mut sched2 = ~new_test_uv_sched();\n             let task2 = ~do Coroutine::new(&mut sched2.stack_pool) {\n                 port_cell.take().recv();\n                 // Release the other scheduler's handle so it can exit"}, {"sha": "0e2da452366cfe446b1f4763907653d62712dc2f", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=7f107c415f1c88b016b9da0fa9c58e6b61f82589", "patch": "@@ -16,6 +16,14 @@ use super::io::net::ip::{IpAddr, Ipv4};\n use rt::task::Task;\n use rt::thread::Thread;\n use rt::local::Local;\n+use rt::sched::Scheduler;\n+\n+pub fn new_test_uv_sched() -> Scheduler {\n+    use rt::uv::uvio::UvEventLoop;\n+    use rt::work_queue::WorkQueue;\n+\n+    Scheduler::new(~UvEventLoop::new(), WorkQueue::new())\n+}\n \n /// Creates a new scheduler in a new thread and runs a task in it,\n /// then waits for the scheduler to exit. Failure of the task\n@@ -28,7 +36,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     let f = Cell(f);\n \n     do run_in_bare_thread {\n-        let mut sched = ~UvEventLoop::new_scheduler();\n+        let mut sched = ~new_test_uv_sched();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n                                          ~Task::without_unwinding(),\n                                          f.take());\n@@ -155,7 +163,7 @@ pub fn spawntask_thread(f: ~fn()) -> Thread {\n \n     let f = Cell(f);\n     let thread = do Thread::start {\n-        let mut sched = ~UvEventLoop::new_scheduler();\n+        let mut sched = ~new_test_uv_sched();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n                                          ~Task::without_unwinding(),\n                                          f.take());"}, {"sha": "e25b6140abbfde9873cb623590eba808d9b9b689", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f107c415f1c88b016b9da0fa9c58e6b61f82589/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=7f107c415f1c88b016b9da0fa9c58e6b61f82589", "patch": "@@ -43,11 +43,6 @@ pub impl UvEventLoop {\n             uvio: UvIoFactory(Loop::new())\n         }\n     }\n-\n-    /// A convenience constructor\n-    fn new_scheduler() -> Scheduler {\n-        Scheduler::new(~UvEventLoop::new(), WorkQueue::new())\n-    }\n }\n \n impl Drop for UvEventLoop {"}]}