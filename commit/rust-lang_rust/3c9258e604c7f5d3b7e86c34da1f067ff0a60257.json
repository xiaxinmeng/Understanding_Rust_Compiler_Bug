{"sha": "3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTI1OGU2MDRjN2Y1ZDNiN2U4NmMzNGRhMWYwNjdmZjBhNjAyNTc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-16T14:57:53Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-19T12:34:44Z"}, "message": "Prefer `Default::default` over `FxHash*::default` in struct constructors", "tree": {"sha": "96a2c373f7f060355817005e3040d07fdbe77262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a2c373f7f060355817005e3040d07fdbe77262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "html_url": "https://github.com/rust-lang/rust/commit/3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee81739dc1e0f1c4dff9480b52528fb688ef9251", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee81739dc1e0f1c4dff9480b52528fb688ef9251", "html_url": "https://github.com/rust-lang/rust/commit/ee81739dc1e0f1c4dff9480b52528fb688ef9251"}], "stats": {"total": 599, "additions": 237, "deletions": 362}, "files": [{"sha": "4a50f744e7a54e617b7373bf5ebbae9c601cf761", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -169,19 +169,13 @@ impl Ord for Interned<String> {\n     }\n }\n \n-struct TyIntern<T> {\n+#[derive(Default)]\n+struct TyIntern<T: Hash + Clone + Eq> {\n     items: Vec<T>,\n     set: HashMap<T, Interned<T>>,\n }\n \n impl<T: Hash + Clone + Eq> TyIntern<T> {\n-    fn new() -> TyIntern<T> {\n-        TyIntern {\n-            items: Vec::new(),\n-            set: HashMap::new(),\n-        }\n-    }\n-\n     fn intern_borrow<B>(&mut self, item: &B) -> Interned<T>\n     where\n         B: Eq + Hash + ToOwned<Owned=T> + ?Sized,\n@@ -212,19 +206,13 @@ impl<T: Hash + Clone + Eq> TyIntern<T> {\n     }\n }\n \n+#[derive(Default)]\n pub struct Interner {\n     strs: Mutex<TyIntern<String>>,\n     paths: Mutex<TyIntern<PathBuf>>,\n }\n \n impl Interner {\n-    fn new() -> Interner {\n-        Interner {\n-            strs: Mutex::new(TyIntern::new()),\n-            paths: Mutex::new(TyIntern::new()),\n-        }\n-    }\n-\n     pub fn intern_str(&self, s: &str) -> Interned<String> {\n         self.strs.lock().unwrap().intern_borrow(s)\n     }\n@@ -238,7 +226,7 @@ impl Interner {\n }\n \n lazy_static! {\n-    pub static ref INTERNER: Interner = Interner::new();\n+    pub static ref INTERNER: Interner = Interner::default();\n }\n \n /// This is essentially a HashMap which allows storing any type in its input and"}, {"sha": "a7b34b6dc40af87730b525efb6dafe0631b2e694", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -114,10 +114,9 @@ impl<T> TypedArenaChunk<T> {\n \n const PAGE: usize = 4096;\n \n-impl<T> TypedArena<T> {\n+impl<T> Default for TypedArena<T> {\n     /// Creates a new `TypedArena`.\n-    #[inline]\n-    pub fn new() -> TypedArena<T> {\n+    fn default() -> TypedArena<T> {\n         TypedArena {\n             // We set both `ptr` and `end` to 0 so that the first call to\n             // alloc() will trigger a grow().\n@@ -127,7 +126,9 @@ impl<T> TypedArena<T> {\n             _own: PhantomData,\n         }\n     }\n+}\n \n+impl<T> TypedArena<T> {\n     /// Allocates an object in the `TypedArena`, returning a reference to it.\n     #[inline]\n     pub fn alloc(&self, object: T) -> &mut T {\n@@ -296,15 +297,17 @@ pub struct DroplessArena {\n \n unsafe impl Send for DroplessArena {}\n \n-impl DroplessArena {\n-    pub fn new() -> DroplessArena {\n+impl Default for DroplessArena {\n+    fn default() -> DroplessArena {\n         DroplessArena {\n             ptr: Cell::new(0 as *mut u8),\n             end: Cell::new(0 as *mut u8),\n-            chunks: RefCell::new(vec![]),\n+            chunks: Default::default(),\n         }\n     }\n+}\n \n+impl DroplessArena {\n     pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n         let ptr = ptr as *const u8 as *mut u8;\n         for chunk in &*self.chunks.borrow() {\n@@ -419,18 +422,13 @@ impl DroplessArena {\n     }\n }\n \n+#[derive(Default)]\n+// FIXME(@Zoxc): this type is entirely unused in rustc\n pub struct SyncTypedArena<T> {\n     lock: MTLock<TypedArena<T>>,\n }\n \n impl<T> SyncTypedArena<T> {\n-    #[inline(always)]\n-    pub fn new() -> SyncTypedArena<T> {\n-        SyncTypedArena {\n-            lock: MTLock::new(TypedArena::new())\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn alloc(&self, object: T) -> &mut T {\n         // Extend the lifetime of the result since it's limited to the lock guard\n@@ -452,18 +450,12 @@ impl<T> SyncTypedArena<T> {\n     }\n }\n \n+#[derive(Default)]\n pub struct SyncDroplessArena {\n     lock: MTLock<DroplessArena>,\n }\n \n impl SyncDroplessArena {\n-    #[inline(always)]\n-    pub fn new() -> SyncDroplessArena {\n-        SyncDroplessArena {\n-            lock: MTLock::new(DroplessArena::new())\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n         self.lock.lock().in_arena(ptr)"}, {"sha": "99fc020bbe44f67a08df38ad061da35f41c0bef9", "filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -51,8 +51,8 @@ pub struct CguReuseTracker {\n impl CguReuseTracker {\n     pub fn new() -> CguReuseTracker {\n         let data = TrackerData {\n-            actual_reuse: FxHashMap::default(),\n-            expected_reuse: FxHashMap::default(),\n+            actual_reuse: Default::default(),\n+            expected_reuse: Default::default(),\n         };\n \n         CguReuseTracker {"}, {"sha": "a674b5df6395cdb1a3bda01a95d8c9ceb9fecb39", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -36,7 +36,7 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         DepTrackingMap {\n             phantom: PhantomData,\n             graph,\n-            map: FxHashMap::default(),\n+            map: Default::default(),\n         }\n     }\n }"}, {"sha": "ddc5676c74eb55699c554f679729208db16829cb", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -101,11 +101,11 @@ impl DepGraph {\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n-                dep_node_debug: Lock::new(FxHashMap::default()),\n+                dep_node_debug: Lock::new(Default::default()),\n                 current: Lock::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n                 colors: Lock::new(DepNodeColorMap::new(prev_graph_node_count)),\n-                loaded_from_cache: Lock::new(FxHashMap::default()),\n+                loaded_from_cache: Lock::new(Default::default()),\n             })),\n             fingerprints: Lrc::new(Lock::new(fingerprints)),\n         }\n@@ -209,7 +209,7 @@ impl DepGraph {\n             |key| OpenTask::Regular(Lock::new(RegularOpenTask {\n                 node: key,\n                 reads: SmallVec::new(),\n-                read_set: FxHashSet::default(),\n+                read_set: Default::default(),\n             })),\n             |data, key, task| data.borrow_mut().complete_task(key, task))\n     }\n@@ -353,7 +353,7 @@ impl DepGraph {\n             let (result, open_task) = ty::tls::with_context(|icx| {\n                 let task = OpenTask::Anon(Lock::new(AnonOpenTask {\n                     reads: SmallVec::new(),\n-                    read_set: FxHashSet::default(),\n+                    read_set: Default::default(),\n                 }));\n \n                 let r = {\n@@ -937,7 +937,7 @@ impl CurrentDepGraph {\n         CurrentDepGraph {\n             nodes: IndexVec::new(),\n             edges: IndexVec::new(),\n-            node_to_node_index: FxHashMap::default(),\n+            node_to_node_index: Default::default(),\n             anon_id_seed: stable_hasher.finish(),\n             forbidden_edge,\n             total_read_count: 0,"}, {"sha": "ebc50f4afb8c8423c0770092d9e6eb2a11637a5a", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashMap;\n use super::dep_node::DepNode;\n use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, Default)]\n pub struct PreviousDepGraph {\n     data: SerializedDepGraph,\n     index: FxHashMap<DepNode, SerializedDepNodeIndex>,"}, {"sha": "0c6c224fa914c9009a5b1546d0cc125301a09337", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -19,7 +19,7 @@ newtype_index! {\n }\n \n /// Data for use when recompiling the **current crate**.\n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, Default)]\n pub struct SerializedDepGraph {\n     /// The set of all DepNodes in the graph\n     pub nodes: IndexVec<SerializedDepNodeIndex, DepNode>,\n@@ -36,16 +36,6 @@ pub struct SerializedDepGraph {\n }\n \n impl SerializedDepGraph {\n-\n-    pub fn new() -> SerializedDepGraph {\n-        SerializedDepGraph {\n-            nodes: IndexVec::new(),\n-            fingerprints: IndexVec::new(),\n-            edge_list_indices: IndexVec::new(),\n-            edge_list_data: Vec::new(),\n-        }\n-    }\n-\n     #[inline]\n     pub fn edge_targets_from(&self,\n                              source: SerializedDepNodeIndex)"}, {"sha": "dd6891540868db318949414b00067f531430577d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -421,10 +421,10 @@ impl Definitions {\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),\n-            parent_modules_of_macro_defs: FxHashMap::default(),\n-            expansions_that_defined: FxHashMap::default(),\n-            next_disambiguator: FxHashMap::default(),\n-            def_index_to_span: FxHashMap::default(),\n+            parent_modules_of_macro_defs: Default::default(),\n+            expansions_that_defined: Default::default(),\n+            next_disambiguator: Default::default(),\n+            def_index_to_span: Default::default(),\n         }\n     }\n "}, {"sha": "087efbd4a22dd5231087b502c6e79bf420e941a8", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'hir: 'a> OuterVisitor<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n             owner_def_index: None,\n-            hir_ids_seen: FxHashMap::default(),\n+            hir_ids_seen: Default::default(),\n             errors: Vec::new(),\n         }\n     }"}, {"sha": "1c7c1b854da4545a45b4c035c3a49ba91faa68b5", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -370,7 +370,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n             // recursing every time.\n             thread_local! {\n                 static CACHE: RefCell<FxHashMap<hygiene::Mark, u64>> =\n-                    RefCell::new(FxHashMap::default());\n+                    RefCell::new(Default::default());\n             }\n \n             let sub_hash: u64 = CACHE.with(|cache| {"}, {"sha": "d8b3cbded13d48282645ae32fc9bac7d5bb0d0cc", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -32,7 +32,7 @@ for &'gcx ty::List<T>\n                                           hasher: &mut StableHasher<W>) {\n         thread_local! {\n             static CACHE: RefCell<FxHashMap<(usize, usize), Fingerprint>> =\n-                RefCell::new(FxHashMap::default());\n+                RefCell::new(Default::default());\n         }\n \n         let hash = CACHE.with(|cache| {"}, {"sha": "c7785d831717376fe7b9c03d4f8cf2249245efcc", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n         TypeFreshener {\n             infcx,\n             freshen_count: 0,\n-            freshen_map: FxHashMap::default(),\n+            freshen_map: Default::default(),\n         }\n     }\n "}, {"sha": "8f28e9a320df24854af4fb9088387a458310da74", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -614,7 +614,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             dup_found: bool,\n         }\n         let mut state = WalkState {\n-            set: FxHashSet::default(),\n+            set: Default::default(),\n             stack: vec![orig_node_idx],\n             result: Vec::new(),\n             dup_found: false,"}, {"sha": "f5513acecf9e7b23fbd518455abbe9aa3dac5b50", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n     pub fn infer_ctxt(self) -> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n-            arena: SyncDroplessArena::new(),\n+            arena: SyncDroplessArena::default(),\n             fresh_tables: None,\n         }\n     }\n@@ -526,15 +526,15 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             f(InferCtxt {\n                 tcx,\n                 in_progress_tables,\n-                projection_cache: RefCell::new(traits::ProjectionCache::new()),\n+                projection_cache: Default::default(),\n                 type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n                 int_unification_table: RefCell::new(ut::UnificationTable::new()),\n                 float_unification_table: RefCell::new(ut::UnificationTable::new()),\n                 region_constraints: RefCell::new(Some(RegionConstraintCollector::new())),\n                 lexical_region_resolutions: RefCell::new(None),\n-                selection_cache: traits::SelectionCache::new(),\n-                evaluation_cache: traits::EvaluationCache::new(),\n-                reported_trait_errors: RefCell::new(FxHashMap::default()),\n+                selection_cache: Default::default(),\n+                evaluation_cache: Default::default(),\n+                reported_trait_errors: Default::default(),\n                 tainted_by_errors_flag: Cell::new(false),\n                 err_count_on_creation: tcx.sess.err_count(),\n                 in_snapshot: Cell::new(false),"}, {"sha": "726bb388252f95f1f9435ae51775b47bdf6eee90", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -81,8 +81,8 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n         let mut env = OutlivesEnvironment {\n             param_env,\n-            free_region_map: FreeRegionMap::new(),\n-            region_bound_pairs_map: FxHashMap::default(),\n+            free_region_map: Default::default(),\n+            region_bound_pairs_map: Default::default(),\n             region_bound_pairs_accum: vec![],\n         };\n "}, {"sha": "588a00eb503613af0709ba9036371e428c5bd30e", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -11,7 +11,7 @@\n use ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct FreeRegionMap<'tcx> {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     //\n@@ -21,10 +21,6 @@ pub struct FreeRegionMap<'tcx> {\n }\n \n impl<'tcx> FreeRegionMap<'tcx> {\n-    pub fn new() -> Self {\n-        FreeRegionMap { relation: TransitiveRelation::new() }\n-    }\n-\n     pub fn is_empty(&self) -> bool {\n         self.relation.is_empty()\n     }"}, {"sha": "a38be941b9a5c01851533ceba5d77473ec01a398", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -345,8 +345,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         RegionConstraintCollector {\n             var_infos: VarInfos::default(),\n             data: RegionConstraintData::default(),\n-            lubs: FxHashMap::default(),\n-            glbs: FxHashMap::default(),\n+            lubs: Default::default(),\n+            glbs: Default::default(),\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),"}, {"sha": "7e2532bb1c4e868aef9508d8db2e9b307d253a44", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -159,9 +159,9 @@ impl LintStore {\n             pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Some(vec![]),\n-            by_name: FxHashMap::default(),\n-            future_incompatible: FxHashMap::default(),\n-            lint_groups: FxHashMap::default(),\n+            by_name: Default::default(),\n+            future_incompatible: Default::default(),\n+            lint_groups: Default::default(),\n         }\n     }\n "}, {"sha": "475ca8da6b93c2a51e70c344af3527cc0bea2720", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -175,7 +175,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             sess,\n             sets,\n             cur: 0,\n-            id_to_set: FxHashMap::default(),\n+            id_to_set: Default::default(),\n             warn_about_weird_lints: sess.buffered_lints.borrow().is_some(),\n         }\n     }"}, {"sha": "cd85d5e3614400f3fa3833764b2d99b82121bf67", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -50,6 +50,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     worklist: Vec<ast::NodeId>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    // TODO: remove this `Box`\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n     repr_has_repr_c: bool,\n     in_pat: bool,\n@@ -429,7 +430,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         worklist,\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n-        live_symbols: box FxHashSet::default(),\n+        live_symbols: box Default::default(),\n         repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,"}, {"sha": "7d65d412e01d7dd41b07c9f9f1321f6065dbe746", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -31,8 +31,8 @@ pub struct LibFeatures {\n impl LibFeatures {\n     fn new() -> LibFeatures {\n         LibFeatures {\n-            stable: FxHashMap::default(),\n-            unstable: FxHashSet::default(),\n+            stable: Default::default(),\n+            unstable: Default::default(),\n         }\n     }\n "}, {"sha": "d00fbdeca21aa4ff78df58a720bd7a1c68789b2d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -1347,7 +1347,7 @@ fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                 parent: None,\n                 var_parent: None,\n             },\n-            terminating_scopes: FxHashSet::default(),\n+            terminating_scopes: Default::default(),\n         };\n \n         let body = tcx.hir.body(body_id);"}, {"sha": "e89ba8ac54ff69dbebe40e783f3da05fca334c82", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -216,6 +216,7 @@ struct NamedRegionMap {\n }\n \n /// See `NamedRegionMap`.\n+#[derive(Default)]\n pub struct ResolveLifetimes {\n     defs: FxHashMap<LocalDefId, Lrc<FxHashMap<ItemLocalId, Region>>>,\n     late_bound: FxHashMap<LocalDefId, Lrc<FxHashSet<ItemLocalId>>>,\n@@ -392,11 +393,7 @@ fn resolve_lifetimes<'tcx>(\n \n     let named_region_map = krate(tcx);\n \n-    let mut rl = ResolveLifetimes {\n-        defs: FxHashMap::default(),\n-        late_bound: FxHashMap::default(),\n-        object_lifetime_defaults: FxHashMap::default(),\n-    };\n+    let mut rl = ResolveLifetimes::default();\n \n     for (k, v) in named_region_map.defs {\n         let hir_id = tcx.hir.node_to_hir_id(k);\n@@ -2017,7 +2014,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     map: self.map,\n                     outer_index: ty::INNERMOST,\n                     have_bound_regions: false,\n-                    lifetimes: FxHashSet::default(),\n+                    lifetimes: Default::default(),\n                 };\n                 gather.visit_ty(input);\n \n@@ -2536,15 +2533,13 @@ fn insert_late_bound_lifetimes(\n     debug!(\"insert_late_bound_lifetimes(decl={:?}, generics={:?})\",\n            decl, generics);\n \n-    let mut constrained_by_input = ConstrainedCollector {\n-        regions: FxHashSet::default(),\n-    };\n+    let mut constrained_by_input = ConstrainedCollector::default();\n     for arg_ty in &decl.inputs {\n         constrained_by_input.visit_ty(arg_ty);\n     }\n \n     let mut appears_in_output = AllCollector {\n-        regions: FxHashSet::default(),\n+        regions: Default::default(),\n     };\n     intravisit::walk_fn_ret_ty(&mut appears_in_output, &decl.output);\n \n@@ -2556,7 +2551,7 @@ fn insert_late_bound_lifetimes(\n     // Subtle point: because we disallow nested bindings, we can just\n     // ignore binders here and scrape up all names we see.\n     let mut appears_in_where_clause = AllCollector {\n-        regions: FxHashSet::default(),\n+        regions: Default::default(),\n     };\n     appears_in_where_clause.visit_generics(generics);\n \n@@ -2610,6 +2605,7 @@ fn insert_late_bound_lifetimes(\n \n     return;\n \n+    #[derive(Default)]\n     struct ConstrainedCollector {\n         regions: FxHashSet<hir::LifetimeName>,\n     }"}, {"sha": "ba79cf66d08480d3e6fdd9ec0cec1a3d201d52ad", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -405,9 +405,9 @@ impl<'a, 'tcx> Index<'tcx> {\n         staged_api.insert(LOCAL_CRATE, is_staged_api);\n         let mut index = Index {\n             staged_api,\n-            stab_map: FxHashMap::default(),\n-            depr_map: FxHashMap::default(),\n-            active_features: FxHashSet::default(),\n+            stab_map: Default::default(),\n+            depr_map: Default::default(),\n+            active_features: Default::default(),\n         };\n \n         let ref active_lib_features = tcx.features().declared_lib_features;"}, {"sha": "8c8073080aaf8cbf5ba0cebd7dd91137329ee794", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -453,8 +453,8 @@ pub struct AllocMap<'tcx, M> {\n impl<'tcx, M: fmt::Debug + Eq + Hash + Clone> AllocMap<'tcx, M> {\n     pub fn new() -> Self {\n         AllocMap {\n-            id_to_type: FxHashMap::default(),\n-            type_interner: FxHashMap::default(),\n+            id_to_type: Default::default(),\n+            type_interner: Default::default(),\n             next_id: AllocId(0),\n         }\n     }"}, {"sha": "ff2bf3d78070d4b60d19416982bfd92ff300e8ce", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n         CodegenUnit {\n             name: name,\n-            items: FxHashMap::default(),\n+            items: Default::default(),\n             size_estimate: None,\n         }\n     }\n@@ -251,7 +251,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         CodegenUnitNameBuilder {\n             tcx,\n-            cache: FxHashMap::default(),\n+            cache: Default::default(),\n         }\n     }\n "}, {"sha": "b1dcfdfcda03891360d7a828b78c993cf9aed952", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -54,14 +54,12 @@ pub struct TypeSizeInfo {\n     pub variants: Vec<VariantInfo>,\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n+#[derive(PartialEq, Eq, Debug, Default)]\n pub struct CodeStats {\n     type_sizes: FxHashSet<TypeSizeInfo>,\n }\n \n impl CodeStats {\n-    pub fn new() -> Self { CodeStats { type_sizes: FxHashSet::default() } }\n-\n     pub fn record_type_size<S: ToString>(&mut self,\n                                          kind: DataTypeKind,\n                                          type_desc: S,"}, {"sha": "a17825a877d88cb45ecaba6e31d2cc6a15e0860a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -1147,7 +1147,7 @@ pub fn build_session_(\n         working_dir,\n         lint_store: RwLock::new(lint::LintStore::new()),\n         buffered_lints: Lock::new(Some(lint::LintBuffer::new())),\n-        one_time_diagnostics: Lock::new(FxHashSet::default()),\n+        one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),\n         crate_types: Once::new(),\n@@ -1173,7 +1173,7 @@ pub fn build_session_(\n             normalize_ty_after_erasing_regions: AtomicUsize::new(0),\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n-        code_stats: Lock::new(CodeStats::new()),\n+        code_stats: Default::default(),\n         optimization_fuel_crate,\n         optimization_fuel_limit,\n         print_fuel_crate,\n@@ -1207,7 +1207,7 @@ pub fn build_session_(\n         },\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n-        driver_lint_caps: FxHashMap::default(),\n+        driver_lint_caps: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "28c59d65becf24ecc925e526a05becc5aff5cf39", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -1404,7 +1404,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             let cleaned_pred = pred.fold_with(&mut ParamToVarFolder {\n                 infcx: self,\n-                var_map: FxHashMap::default()\n+                var_map: Default::default()\n             });\n \n             let cleaned_pred = super::project::normalize("}, {"sha": "8bceebb23950c425797d347ca8607304417a74a7", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -48,7 +48,7 @@ pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n-pub use self::specialize::{SpecializesCache, find_associated_item};\n+pub use self::specialize::find_associated_item;\n pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;"}, {"sha": "b29ee8f7cdce4ad9a76477ffa947ef4f4ad7434f", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -1601,6 +1601,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n /// FIXME: we probably also want some sort of cross-infcx cache here to\n /// reduce the amount of duplication. Let's see what we get with the Chalk\n /// reforms.\n+#[derive(Default)]\n pub struct ProjectionCache<'tcx> {\n     map: SnapshotMap<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n }\n@@ -1643,12 +1644,6 @@ pub struct ProjectionCacheSnapshot {\n }\n \n impl<'tcx> ProjectionCache<'tcx> {\n-    pub fn new() -> Self {\n-        ProjectionCache {\n-            map: SnapshotMap::new()\n-        }\n-    }\n-\n     pub fn clear(&mut self) {\n         self.map.clear();\n     }"}, {"sha": "95683e0613e15106b5530b74f4d972b0e8704008", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -166,7 +166,7 @@ struct TraitObligationStack<'prev, 'tcx: 'prev> {\n     previous: TraitObligationStackList<'prev, 'tcx>,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub struct SelectionCache<'tcx> {\n     hashmap: Lock<\n         FxHashMap<ty::TraitRef<'tcx>, WithDepNode<SelectionResult<'tcx, SelectionCandidate<'tcx>>>>,\n@@ -444,7 +444,7 @@ impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub struct EvaluationCache<'tcx> {\n     hashmap: Lock<FxHashMap<ty::PolyTraitRef<'tcx>, WithDepNode<EvaluationResult>>>,\n }\n@@ -3789,26 +3789,14 @@ impl<'tcx> TraitObligation<'tcx> {\n }\n \n impl<'tcx> SelectionCache<'tcx> {\n-    pub fn new() -> SelectionCache<'tcx> {\n-        SelectionCache {\n-            hashmap: Lock::new(FxHashMap::default()),\n-        }\n-    }\n-\n     pub fn clear(&self) {\n-        *self.hashmap.borrow_mut() = FxHashMap::default()\n+        self.hashmap.borrow_mut().clear();\n     }\n }\n \n impl<'tcx> EvaluationCache<'tcx> {\n-    pub fn new() -> EvaluationCache<'tcx> {\n-        EvaluationCache {\n-            hashmap: Lock::new(FxHashMap::default()),\n-        }\n-    }\n-\n     pub fn clear(&self) {\n-        *self.hashmap.borrow_mut() = FxHashMap::default()\n+        self.hashmap.borrow_mut().clear();\n     }\n }\n "}, {"sha": "0ce1d8f8227553ec5e3d312fa4ca6eda15635c66", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -22,7 +22,7 @@\n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use ty::subst::{Subst, Substs};\n@@ -284,26 +284,6 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     })\n }\n \n-pub struct SpecializesCache {\n-    map: FxHashMap<(DefId, DefId), bool>,\n-}\n-\n-impl SpecializesCache {\n-    pub fn new() -> Self {\n-        SpecializesCache {\n-            map: FxHashMap::default()\n-        }\n-    }\n-\n-    pub fn check(&self, a: DefId, b: DefId) -> Option<bool> {\n-        self.map.get(&(a, b)).cloned()\n-    }\n-\n-    pub fn insert(&mut self, a: DefId, b: DefId, result: bool) {\n-        self.map.insert((a, b), result);\n-    }\n-}\n-\n // Query provider for `specialization_graph_of`.\n pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                       trait_id: DefId)"}, {"sha": "0b7526dd78428d7ece38f345b521e69fd3bb5e0d", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -59,7 +59,7 @@ struct PredicateSet<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> PredicateSet<'a, 'gcx, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> PredicateSet<'a, 'gcx, 'tcx> {\n-        PredicateSet { tcx: tcx, set: FxHashSet::default() }\n+        PredicateSet { tcx: tcx, set: Default::default() }\n     }\n \n     fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {"}, {"sha": "64f87d077bab36ec4d2f4d9c509790b329f74f23", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -89,13 +89,14 @@ pub struct AllArenas<'tcx> {\n impl<'tcx> AllArenas<'tcx> {\n     pub fn new() -> Self {\n         AllArenas {\n-            global: WorkerLocal::new(|_| GlobalArenas::new()),\n-            interner: SyncDroplessArena::new(),\n+            global: WorkerLocal::new(|_| GlobalArenas::default()),\n+            interner: SyncDroplessArena::default(),\n         }\n     }\n }\n \n /// Internal storage\n+#[derive(Default)]\n pub struct GlobalArenas<'tcx> {\n     // internings\n     layout: TypedArena<LayoutDetails>,\n@@ -111,21 +112,6 @@ pub struct GlobalArenas<'tcx> {\n     const_allocs: TypedArena<interpret::Allocation>,\n }\n \n-impl<'tcx> GlobalArenas<'tcx> {\n-    pub fn new() -> GlobalArenas<'tcx> {\n-        GlobalArenas {\n-            layout: TypedArena::new(),\n-            generics: TypedArena::new(),\n-            trait_def: TypedArena::new(),\n-            adt_def: TypedArena::new(),\n-            steal_mir: TypedArena::new(),\n-            mir: TypedArena::new(),\n-            tables: TypedArena::new(),\n-            const_allocs: TypedArena::new(),\n-        }\n-    }\n-}\n-\n type InternedSet<'tcx, T> = Lock<FxHashSet<Interned<'tcx, T>>>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -462,15 +448,15 @@ impl<'tcx> TypeckTables<'tcx> {\n             adjustments: ItemLocalMap(),\n             pat_binding_modes: ItemLocalMap(),\n             pat_adjustments: ItemLocalMap(),\n-            upvar_capture_map: FxHashMap::default(),\n+            upvar_capture_map: Default::default(),\n             closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n             cast_kinds: ItemLocalMap(),\n             used_trait_imports: Lrc::new(DefIdSet()),\n             tainted_by_errors: false,\n-            free_region_map: FreeRegionMap::new(),\n-            concrete_existential_types: FxHashMap::default(),\n+            free_region_map: Default::default(),\n+            concrete_existential_types: Default::default(),\n         }\n     }\n \n@@ -1231,14 +1217,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 extern_providers,\n                 on_disk_query_result_cache,\n             ),\n-            rcache: Lock::new(FxHashMap::default()),\n-            selection_cache: traits::SelectionCache::new(),\n-            evaluation_cache: traits::EvaluationCache::new(),\n+            rcache: Default::default(),\n+            selection_cache: Default::default(),\n+            evaluation_cache: Default::default(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            layout_interner: Lock::new(FxHashSet::default()),\n-            stability_interner: Lock::new(FxHashSet::default()),\n-            allocation_interner: Lock::new(FxHashSet::default()),\n+            layout_interner: Default::default(),\n+            stability_interner: Default::default(),\n+            allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),"}, {"sha": "80dfd263af9af99e6dfe8d6753dc70e10d94f47b", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -753,7 +753,7 @@ impl LateBoundRegionsCollector {\n     fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n             current_index: ty::INNERMOST,\n-            regions: FxHashSet::default(),\n+            regions: Default::default(),\n             just_constrained,\n         }\n     }"}, {"sha": "760114a58388540eade32b9c83add67797936bc1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -1841,8 +1841,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         thread_local! {\n-            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> =\n-                RefCell::new(FxHashMap::default());\n+            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> = Default::default();\n         }\n \n         let hash: Fingerprint = CACHE.with(|cache| {"}, {"sha": "62bdf40317d12890a2867860f7e483546d8da933", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -136,30 +136,30 @@ impl<'sess> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: data,\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n-            file_index_to_file: Lock::new(FxHashMap::default()),\n+            file_index_to_file: Default::default(),\n             prev_cnums: footer.prev_cnums,\n             cnum_map: Once::new(),\n             source_map: sess.source_map(),\n-            current_diagnostics: Lock::new(FxHashMap::default()),\n+            current_diagnostics: Default::default(),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n             prev_diagnostics_index: footer.diagnostics_index.into_iter().collect(),\n-            synthetic_expansion_infos: Lock::new(FxHashMap::default()),\n+            synthetic_expansion_infos: Default::default(),\n             alloc_decoding_state: AllocDecodingState::new(footer.interpret_alloc_index),\n         }\n     }\n \n     pub fn new_empty(source_map: &'sess SourceMap) -> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: Vec::new(),\n-            file_index_to_stable_id: FxHashMap::default(),\n-            file_index_to_file: Lock::new(FxHashMap::default()),\n+            file_index_to_stable_id: Default::default(),\n+            file_index_to_file: Default::default(),\n             prev_cnums: vec![],\n             cnum_map: Once::new(),\n             source_map,\n-            current_diagnostics: Lock::new(FxHashMap::default()),\n-            query_result_index: FxHashMap::default(),\n-            prev_diagnostics_index: FxHashMap::default(),\n-            synthetic_expansion_infos: Lock::new(FxHashMap::default()),\n+            current_diagnostics: Default::default(),\n+            query_result_index: Default::default(),\n+            prev_diagnostics_index: Default::default(),\n+            synthetic_expansion_infos: Default::default(),\n             alloc_decoding_state: AllocDecodingState::new(Vec::new()),\n         }\n     }\n@@ -190,10 +190,10 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut encoder = CacheEncoder {\n                 tcx,\n                 encoder,\n-                type_shorthands: FxHashMap::default(),\n-                predicate_shorthands: FxHashMap::default(),\n-                expn_info_shorthands: FxHashMap::default(),\n-                interpret_allocs: FxHashMap::default(),\n+                type_shorthands: Default::default(),\n+                predicate_shorthands: Default::default(),\n+                expn_info_shorthands: Default::default(),\n+                interpret_allocs: Default::default(),\n                 interpret_allocs_inverse: Vec::new(),\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,"}, {"sha": "71e435fea77d438cb652b0cb0bc7ee4dc8e35383", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -55,8 +55,8 @@ impl<T> QueryValue<T> {\n     }\n }\n \n-impl<'tcx, M: QueryConfig<'tcx>> QueryCache<'tcx, M> {\n-    pub(super) fn new() -> QueryCache<'tcx, M> {\n+impl<'tcx, M: QueryConfig<'tcx>> Default for QueryCache<'tcx, M> {\n+    fn default() -> QueryCache<'tcx, M> {\n         QueryCache {\n             results: FxHashMap::default(),\n             active: FxHashMap::default(),\n@@ -699,7 +699,7 @@ macro_rules! define_queries_inner {\n                     providers,\n                     fallback_extern_providers: Box::new(fallback_extern_providers),\n                     on_disk_cache,\n-                    $($name: Lock::new(QueryCache::new())),*\n+                    $($name: Default::default()),*\n                 }\n             }\n "}, {"sha": "dbd3e00d9fd1da2de58bde4106ea64bafc56d2c5", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -22,9 +22,9 @@ pub use rustc_data_structures::fx::FxHashSet;\n macro_rules! define_id_collections {\n     ($map_name:ident, $set_name:ident, $key:ty) => {\n         pub type $map_name<T> = FxHashMap<$key, T>;\n-        pub fn $map_name<T>() -> $map_name<T> { FxHashMap::default() }\n+        pub fn $map_name<T>() -> $map_name<T> { Default::default() }\n         pub type $set_name = FxHashSet<$key>;\n-        pub fn $set_name() -> $set_name { FxHashSet::default() }\n+        pub fn $set_name() -> $set_name { Default::default() }\n     }\n }\n "}, {"sha": "bfa2203cc04b24507081140b582166b86c9e03b2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -182,7 +182,7 @@ impl PrintContext {\n     fn prepare_late_bound_region_info<'tcx, T>(&mut self, value: &ty::Binder<T>)\n     where T: TypeFoldable<'tcx>\n     {\n-        let mut collector = LateBoundRegionNameCollector(FxHashSet::default());\n+        let mut collector = LateBoundRegionNameCollector(Default::default());\n         value.visit_with(&mut collector);\n         self.used_region_names = Some(collector.0);\n         self.region_index = 0;"}, {"sha": "da5c5f47c08ac6b01976960e110f7ebb02ea2051", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -103,7 +103,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n             // tuple structs/variants) do not have an associated body\n             // and do not need borrowchecking.\n             return Lrc::new(BorrowCheckResult {\n-                used_mut_nodes: FxHashSet::default(),\n+                used_mut_nodes: Default::default(),\n                 signalled_any_error: SignalledError::NoErrorsSeen,\n             })\n         }\n@@ -120,7 +120,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n         region_scope_tree,\n         owner_def_id,\n         body,\n-        used_mut_nodes: RefCell::new(FxHashSet::default()),\n+        used_mut_nodes: Default::default(),\n         signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n \n@@ -235,7 +235,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n         region_scope_tree,\n         owner_def_id,\n         body,\n-        used_mut_nodes: RefCell::new(FxHashSet::default()),\n+        used_mut_nodes: Default::default(),\n         signalled_any_error: Cell::new(SignalledError::NoErrorsSeen),\n     };\n "}, {"sha": "85794c5b10af45f78adfedff4743ace23283ca50", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -45,7 +45,7 @@ struct UnusedMutCx<'a, 'tcx: 'a> {\n impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n     fn check_unused_mut_pat(&self, pats: &[P<hir::Pat>]) {\n         let tcx = self.bccx.tcx;\n-        let mut mutables: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+        let mut mutables: FxHashMap<_, Vec<_>> = Default::default();\n         for p in pats {\n             p.each_binding(|_, hir_id, span, ident| {\n                 // Skip anything that looks like `_foo`"}, {"sha": "61856236a149141294fc6395d1f2f90e6d00ce84", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -502,7 +502,7 @@ fn thin_lto(cgcx: &CodegenContext,\n             // If we don't compile incrementally, we don't need to load the\n             // import data from LLVM.\n             assert!(green_modules.is_empty());\n-            ThinLTOImports::new()\n+            ThinLTOImports::default()\n         };\n         info!(\"thin LTO import map loaded\");\n         timeline.record(\"import-map-loaded\");\n@@ -873,19 +873,13 @@ impl ThinModule {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct ThinLTOImports {\n     // key = llvm name of importing module, value = list of modules it imports from\n     imports: FxHashMap<String, Vec<String>>,\n }\n \n impl ThinLTOImports {\n-    fn new() -> ThinLTOImports {\n-        ThinLTOImports {\n-            imports: FxHashMap::default(),\n-        }\n-    }\n-\n     fn modules_imported_by(&self, llvm_module_name: &str) -> &[String] {\n         self.imports.get(llvm_module_name).map(|v| &v[..]).unwrap_or(&[])\n     }\n@@ -910,9 +904,7 @@ impl ThinLTOImports {\n                .unwrap()\n                .push(imported_module_name.to_owned());\n         }\n-        let mut map = ThinLTOImports {\n-            imports: FxHashMap::default(),\n-        };\n+        let mut map = ThinLTOImports::default();\n         llvm::LLVMRustGetThinLTOModuleImports(data,\n                                               imported_module_callback,\n                                               &mut map as *mut _ as *mut libc::c_void);"}, {"sha": "614a562846e8633f096c38b68249ce8e26405e3a", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -70,7 +70,7 @@ use time_graph;\n use mono_item::{MonoItem, BaseMonoItemExt, MonoItemExt};\n use type_::Type;\n use type_of::LayoutLlvmExt;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n+use rustc::util::nodemap::{FxHashMap, DefIdSet};\n use CrateInfo;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,7 +1030,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n     }).collect();\n \n     if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n-        let mut item_to_cgus: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+        let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n         for cgu in &codegen_units {\n             for (&mono_item, &linkage) in cgu.items() {\n@@ -1092,17 +1092,17 @@ impl CrateInfo {\n             compiler_builtins: None,\n             profiler_runtime: None,\n             sanitizer_runtime: None,\n-            is_no_builtins: FxHashSet::default(),\n-            native_libraries: FxHashMap::default(),\n+            is_no_builtins: Default::default(),\n+            native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE),\n             link_args: tcx.link_args(LOCAL_CRATE),\n-            crate_name: FxHashMap::default(),\n+            crate_name: Default::default(),\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n-            used_crate_source: FxHashMap::default(),\n-            wasm_imports: FxHashMap::default(),\n-            lang_item_to_crate: FxHashMap::default(),\n-            missing_lang_items: FxHashMap::default(),\n+            used_crate_source: Default::default(),\n+            wasm_imports: Default::default(),\n+            lang_item_to_crate: Default::default(),\n+            missing_lang_items: Default::default(),\n         };\n         let lang_items = tcx.lang_items();\n "}, {"sha": "826df82193a31970769dacf43a21d3e476f724e8", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -295,22 +295,22 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n             llcx,\n             stats: RefCell::new(Stats::default()),\n             codegen_unit,\n-            instances: RefCell::new(FxHashMap::default()),\n-            vtables: RefCell::new(FxHashMap::default()),\n-            const_cstr_cache: RefCell::new(FxHashMap::default()),\n-            const_unsized: RefCell::new(FxHashMap::default()),\n-            const_globals: RefCell::new(FxHashMap::default()),\n+            instances: Default::default(),\n+            vtables: Default::default(),\n+            const_cstr_cache: Default::default(),\n+            const_unsized: Default::default(),\n+            const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),\n             used_statics: RefCell::new(Vec::new()),\n-            lltypes: RefCell::new(FxHashMap::default()),\n-            scalar_lltypes: RefCell::new(FxHashMap::default()),\n-            pointee_infos: RefCell::new(FxHashMap::default()),\n+            lltypes: Default::default(),\n+            scalar_lltypes: Default::default(),\n+            pointee_infos: Default::default(),\n             isize_ty,\n             dbg_cx,\n             eh_personality: Cell::new(None),\n             eh_unwind_resume: Cell::new(None),\n             rust_try_fn: Cell::new(None),\n-            intrinsics: RefCell::new(FxHashMap::default()),\n+            intrinsics: Default::default(),\n             local_gen_sym_counter: Cell::new(0),\n         }\n     }"}, {"sha": "846d505641103dd864de097c137b2d19165fad62", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -96,6 +96,7 @@ pub struct UniqueTypeId(ast::Name);\n // created so far. The metadata nodes are indexed by UniqueTypeId, and, for\n // faster lookup, also by Ty. The TypeMap is responsible for creating\n // UniqueTypeIds.\n+#[derive(Default)]\n pub struct TypeMap<'ll, 'tcx> {\n     // The UniqueTypeIds created so far\n     unique_id_interner: Interner,\n@@ -108,15 +109,6 @@ pub struct TypeMap<'ll, 'tcx> {\n }\n \n impl TypeMap<'ll, 'tcx> {\n-    pub fn new() -> Self {\n-        TypeMap {\n-            unique_id_interner: Interner::new(),\n-            type_to_metadata: FxHashMap::default(),\n-            unique_id_to_metadata: FxHashMap::default(),\n-            type_to_unique_id: FxHashMap::default(),\n-        }\n-    }\n-\n     // Adds a Ty to metadata mapping to the TypeMap. The method will fail if\n     // the mapping already exists.\n     fn register_type_with_metadata("}, {"sha": "042e72e921ecead4e02951a41c7f3747db5e0966", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -100,11 +100,11 @@ impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n             llcontext,\n             llmod,\n             builder,\n-            created_files: RefCell::new(FxHashMap::default()),\n-            created_enum_disr_types: RefCell::new(FxHashMap::default()),\n-            type_map: RefCell::new(TypeMap::new()),\n+            created_files: Default::default(),\n+            created_enum_disr_types: Default::default(),\n+            type_map: Default::default(),\n             namespace_map: RefCell::new(DefIdMap()),\n-            composite_types_completed: RefCell::new(FxHashSet::default()),\n+            composite_types_completed: Default::default(),\n         }\n     }\n }"}, {"sha": "046f0cccfee05f68d539893c5188c00a37f3bb1e", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -28,7 +28,6 @@ use std::path::Path;\n use std::sync::{mpsc, Arc};\n \n use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::sync::Lrc;\n use flate2::Compression;\n use flate2::write::DeflateEncoder;\n \n@@ -42,7 +41,6 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n use link::out_filename;\n \n@@ -132,7 +130,7 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         ::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n-            Lrc::new(FxHashMap::default()) // Just a dummy\n+            Default::default() // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());"}, {"sha": "ccf2a7f81590e94b182fc92f631879c8c4fe3689", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -187,11 +187,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n     pub fn new() -> ObligationForest<O> {\n         ObligationForest {\n             nodes: vec![],\n-            done_cache: FxHashSet::default(),\n-            waiting_cache: FxHashMap::default(),\n+            done_cache: Default::default(),\n+            waiting_cache: Default::default(),\n             scratch: Some(vec![]),\n             obligation_tree_id_generator: (0..).map(|i| ObligationTreeId(i)),\n-            error_cache: FxHashMap::default(),\n+            error_cache: Default::default(),\n         }\n     }\n \n@@ -303,7 +303,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         self.error_cache\n             .entry(node.obligation_tree_id)\n-            .or_insert_with(|| FxHashSet::default())\n+            .or_default()\n             .insert(node.obligation.as_predicate().clone());\n     }\n "}, {"sha": "f8663cd4fd43677a30b866e9dc12950f5cec8809", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -35,16 +35,20 @@ enum UndoLog<K, V> {\n     Noop,\n }\n \n-impl<K, V> SnapshotMap<K, V>\n+impl<K, V> Default for SnapshotMap<K, V>\n     where K: Hash + Clone + Eq\n {\n-    pub fn new() -> Self {\n+    fn default() -> Self {\n         SnapshotMap {\n             map: FxHashMap::default(),\n             undo_log: vec![],\n         }\n     }\n+}\n \n+impl<K, V> SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n     pub fn clear(&mut self) {\n         self.map.clear();\n         self.undo_log.clear();"}, {"sha": "6a4012c81984d99413cb163acd457f0b2aac8417", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -133,7 +133,7 @@ cfg_if! {\n \n         pub type MTRef<'a, T> = &'a mut T;\n \n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct MTLock<T>(T);\n \n         impl<T> MTLock<T> {\n@@ -228,7 +228,7 @@ cfg_if! {\n \n         pub type MTRef<'a, T> = &'a T;\n \n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct MTLock<T>(Lock<T>);\n \n         impl<T> MTLock<T> {"}, {"sha": "3cc467aa038c4fa72ab1e29a24920247a722bfe8", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -51,16 +51,18 @@ struct Edge {\n     target: Index,\n }\n \n-impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n-    pub fn new() -> TransitiveRelation<T> {\n+impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n+    fn default() -> TransitiveRelation<T> {\n         TransitiveRelation {\n             elements: vec![],\n             map: FxHashMap::default(),\n             edges: vec![],\n             closure: Lock::new(None),\n         }\n     }\n+}\n \n+impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     pub fn is_empty(&self) -> bool {\n         self.edges.is_empty()\n     }\n@@ -95,7 +97,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         where F: FnMut(&T) -> Option<U>,\n               U: Clone + Debug + Eq + Hash + Clone,\n     {\n-        let mut result = TransitiveRelation::new();\n+        let mut result = TransitiveRelation::default();\n         for edge in &self.edges {\n             result.add(f(&self.elements[edge.source.0])?, f(&self.elements[edge.target.0])?);\n         }"}, {"sha": "f02a5e2bc5d3aaa31b4317f09972cb4889f54baf", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -382,9 +382,9 @@ impl Handler {\n             emitter: Lock::new(e),\n             continue_after_error: LockCell::new(true),\n             delayed_span_bugs: Lock::new(Vec::new()),\n-            taught_diagnostics: Lock::new(FxHashSet::default()),\n-            emitted_diagnostic_codes: Lock::new(FxHashSet::default()),\n-            emitted_diagnostics: Lock::new(FxHashSet::default()),\n+            taught_diagnostics: Default::default(),\n+            emitted_diagnostic_codes: Default::default(),\n+            emitted_diagnostics: Default::default(),\n         }\n     }\n \n@@ -398,7 +398,7 @@ impl Handler {\n     /// tools that want to reuse a `Parser` cleaning the previously emitted diagnostics as well as\n     /// the overall count of emitted error diagnostics.\n     pub fn reset_err_count(&self) {\n-        *self.emitted_diagnostics.borrow_mut() = FxHashSet::default();\n+        self.emitted_diagnostics.borrow_mut().clear();\n         self.err_count.store(0, SeqCst);\n     }\n "}, {"sha": "58a799bb45f2d319fba95e4f0aa18ed3628f8336", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -226,7 +226,7 @@ pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         let krate = tcx.hir.krate();\n         let mut dirty_clean_visitor = DirtyCleanVisitor {\n             tcx,\n-            checked_attrs: FxHashSet::default(),\n+            checked_attrs: Default::default(),\n         };\n         krate.visit_all_item_likes(&mut dirty_clean_visitor);\n "}, {"sha": "2f7e1af1ff6c234237e5c2b6c45641464a770585", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -48,15 +48,15 @@ impl LoadResult<(PreviousDepGraph, WorkProductMap)> {\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n-                (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap::default())\n+                Default::default()\n             },\n             LoadResult::DataOutOfDate => {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {\n                     sess.err(&format!(\"Failed to delete invalidated or incompatible \\\n                                       incremental compilation session directory contents `{}`: {}.\",\n                                       dep_graph_path(sess).display(), err));\n                 }\n-                (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap::default())\n+                Default::default()\n             }\n             LoadResult::Ok { data } => data\n         }\n@@ -117,7 +117,7 @@ pub fn load_dep_graph(sess: &Session) ->\n     if sess.opts.incremental.is_none() {\n         // No incremental compilation.\n         return MaybeAsync::Sync(LoadResult::Ok {\n-            data: (PreviousDepGraph::new(SerializedDepGraph::new()), FxHashMap::default())\n+            data: Default::default(),\n         });\n     }\n "}, {"sha": "2be9883d03d9b76cd5b6150e5d32c83e5f4f732f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -111,7 +111,7 @@ impl CStore {\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n-            extern_mod_crate_map: Lock::new(FxHashMap::default()),\n+            extern_mod_crate_map: Default::default(),\n             metadata_loader,\n         }\n     }"}, {"sha": "e7e6dd71a7668b6f7e0f66a51cf87daa9c24f25f", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -459,7 +459,7 @@ impl<'a> Context<'a> {\n         let mut candidates: FxHashMap<\n             _,\n             (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>),\n-        > = FxHashMap::default();\n+        > = Default::default();\n         let mut staticlibs = vec![];\n \n         // First, find all possible candidate rlibs and dylibs purely based on"}, {"sha": "ab44ebc052f308e6b11b2f532a9682185e9ab382", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -151,11 +151,11 @@ impl<'tcx> BorrowSet<'tcx> {\n             tcx,\n             mir,\n             idx_vec: IndexVec::new(),\n-            location_map: FxHashMap::default(),\n-            activation_map: FxHashMap::default(),\n-            region_map: FxHashMap::default(),\n-            local_map: FxHashMap::default(),\n-            pending_activations: FxHashMap::default(),\n+            location_map: Default::default(),\n+            activation_map: Default::default(),\n+            region_map: Default::default(),\n+            local_map: Default::default(),\n+            pending_activations: Default::default(),\n             locals_state_at_exit:\n                 LocalsStateAtExit::build(locals_are_invalidated_at_exit, mir, move_data),\n         };"}, {"sha": "6ef8b155458721e556496d62584a921c77586116", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -252,13 +252,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         location_table,\n         movable_generator,\n         locals_are_invalidated_at_exit,\n-        access_place_error_reported: FxHashSet::default(),\n-        reservation_error_reported: FxHashSet::default(),\n+        access_place_error_reported: Default::default(),\n+        reservation_error_reported: Default::default(),\n         move_error_reported: BTreeMap::new(),\n-        uninitialized_error_reported: FxHashSet::default(),\n+        uninitialized_error_reported: Default::default(),\n         errors_buffer,\n         nonlexical_regioncx: regioncx,\n-        used_mut: FxHashSet::default(),\n+        used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n         borrow_set,\n         dominators,"}, {"sha": "f8c839e4d3f88f697f2bdac6a3d1dc1b4a946cc0", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -80,8 +80,8 @@ crate fn create(\n         region_bound_pairs: Vec::new(),\n         relations: UniversalRegionRelations {\n             universal_regions: universal_regions.clone(),\n-            outlives: TransitiveRelation::new(),\n-            inverse_outlives: TransitiveRelation::new(),\n+            outlives: Default::default(),\n+            inverse_outlives: Default::default(),\n         },\n     }.create()\n }"}, {"sha": "9d9588dd9b9048ba8be5a4c7704a6e29f230a85c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -128,7 +128,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     let mut constraints = MirTypeckRegionConstraints {\n         liveness_constraints: LivenessValues::new(elements),\n         outlives_constraints: ConstraintSet::default(),\n-        closure_bounds_mapping: FxHashMap::default(),\n+        closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n     };\n     let mut placeholder_indices = PlaceholderIndices::default();\n@@ -847,7 +847,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             region_bound_pairs,\n             implicit_region_bound,\n             borrowck_context,\n-            reported_errors: FxHashSet::default(),\n+            reported_errors: Default::default(),\n             universal_region_relations,\n         }\n     }"}, {"sha": "c7da9c4fbd792b46c8a300e28782ca73872a62eb", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         // these maps are empty to start; cases are\n                         // added below in add_cases_to_switch\n                         options: vec![],\n-                        indices: FxHashMap::default(),\n+                        indices: Default::default(),\n                     }\n                 }\n             }"}, {"sha": "b3e62788256836a046e164a0bb4bece440b37807", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             needs_cleanup: false,\n             drops: vec![],\n             cached_generator_drop: None,\n-            cached_exits: FxHashMap::default(),\n+            cached_exits: Default::default(),\n             cached_unwind: CachedBlock::default(),\n         });\n     }"}, {"sha": "08696dc098e00398c86a11ccbe954e963e1fc470", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -11,7 +11,6 @@\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::tcx::RvalueInitializationState;\n-use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n \n use std::collections::hash_map::Entry;\n@@ -53,7 +52,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n                             v,\n                         )\n                     }).collect(),\n-                    projections: FxHashMap::default(),\n+                    projections: Default::default(),\n                 },\n                 move_paths,\n                 path_map,"}, {"sha": "04a297d0a8317963ead1be2b656c72e6d66885f8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -320,7 +320,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         f: F) -> R\n         where F: for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R\n     {\n-        let pattern_arena = TypedArena::new();\n+        let pattern_arena = TypedArena::default();\n \n         f(MatchCheckCtxt {\n             tcx,"}, {"sha": "3a1108bb169835d5f6d90e085910dc0979769fc2", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -703,7 +703,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Build a map from every monomorphization to all the monomorphizations that\n     // reference it.\n-    let mut accessor_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>> = FxHashMap::default();\n+    let mut accessor_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>> = Default::default();\n     inlining_map.iter_accesses(|accessor, accessees| {\n         for accessee in accessees {\n             accessor_map.entry(*accessee)"}, {"sha": "ae881bad58dcd57b1c0822356010968aa7b13b61", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             },\n             tcx,\n             param_env,\n-            used_unsafe: FxHashSet::default(),\n+            used_unsafe: Default::default(),\n             inherited_blocks: vec![],\n         }\n     }"}, {"sha": "4d3b422ab28171770a340aa99bfead908262e78e", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -41,6 +41,7 @@ use transform::{MirPass, MirSource};\n \n pub struct CleanEndRegions;\n \n+#[derive(Default)]\n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<region::Scope>,\n }\n@@ -56,9 +57,7 @@ impl MirPass for CleanEndRegions {\n                           mir: &mut Mir<'tcx>) {\n         if !tcx.emit_end_regions() { return; }\n \n-        let mut gather = GatherBorrowedRegions {\n-            seen_regions: FxHashSet::default()\n-        };\n+        let mut gather = GatherBorrowedRegions::default();\n         gather.visit_mir(mir);\n \n         let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n@@ -139,6 +138,7 @@ impl<'tcx> MutVisitor<'tcx> for DeleteAscribeUserType {\n \n pub struct CleanFakeReadsAndBorrows;\n \n+#[derive(Default)]\n pub struct DeleteAndRecordFakeReads {\n     fake_borrow_temporaries: FxHashSet<Local>,\n }\n@@ -153,9 +153,7 @@ impl MirPass for CleanFakeReadsAndBorrows {\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let mut delete_reads = DeleteAndRecordFakeReads {\n-            fake_borrow_temporaries: FxHashSet::default(),\n-        };\n+        let mut delete_reads = DeleteAndRecordFakeReads::default();\n         delete_reads.visit_mir(mir);\n         let mut delete_borrows = DeleteFakeBorrows {\n             fake_borrow_temporaries: delete_reads.fake_borrow_temporaries,"}, {"sha": "e1165e865cec2544fca52debc37483269a772298", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -75,7 +75,7 @@ impl MirPass for ElaborateDrops {\n                 env: &env,\n                 flow_inits,\n                 flow_uninits,\n-                drop_flags: FxHashMap::default(),\n+                drop_flags: Default::default(),\n                 patch: MirPatch::new(mir),\n             }.elaborate()\n         };"}, {"sha": "25bd02ff6dc5d2eb3280f6a54de7e17260610961", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -536,7 +536,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     writeln!(w, \"{{\")?;\n \n     // construct a scope tree and write it out\n-    let mut scope_tree: FxHashMap<SourceScope, Vec<SourceScope>> = FxHashMap::default();\n+    let mut scope_tree: FxHashMap<SourceScope, Vec<SourceScope>> = Default::default();\n     for (index, scope_data) in mir.source_scopes.iter().enumerate() {\n         if let Some(parent) = scope_data.parent_scope {\n             scope_tree"}, {"sha": "0f96ee6a688f1c6b0518e562584b96209e9d110a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -930,7 +930,7 @@ struct Rib<'a> {\n impl<'a> Rib<'a> {\n     fn new(kind: RibKind<'a>) -> Rib<'a> {\n         Rib {\n-            bindings: FxHashMap::default(),\n+            bindings: Default::default(),\n             kind,\n         }\n     }\n@@ -1053,11 +1053,11 @@ impl<'a> ModuleData<'a> {\n             parent,\n             kind,\n             normal_ancestor_id,\n-            resolutions: RefCell::new(FxHashMap::default()),\n+            resolutions: Default::default(),\n             legacy_macro_resolutions: RefCell::new(Vec::new()),\n             macro_resolutions: RefCell::new(Vec::new()),\n             builtin_attrs: RefCell::new(Vec::new()),\n-            unresolved_invocations: RefCell::new(FxHashSet::default()),\n+            unresolved_invocations: Default::default(),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new(Vec::new()),\n@@ -1315,13 +1315,14 @@ impl<'a> NameBinding<'a> {\n ///\n /// All other types are defined somewhere and possibly imported, but the primitive ones need\n /// special handling, since they have no place of origin.\n+#[derive(Default)]\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n \n impl PrimitiveTypeTable {\n     fn new() -> PrimitiveTypeTable {\n-        let mut table = PrimitiveTypeTable { primitive_types: FxHashMap::default() };\n+        let mut table = PrimitiveTypeTable::default();\n \n         table.intern(\"bool\", Bool);\n         table.intern(\"char\", Char);\n@@ -1482,6 +1483,7 @@ pub struct Resolver<'a, 'b: 'a> {\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n+#[derive(Default)]\n pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleData<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n@@ -1782,15 +1784,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     }\n \n     pub fn arenas() -> ResolverArenas<'a> {\n-        ResolverArenas {\n-            modules: arena::TypedArena::new(),\n-            local_modules: RefCell::new(Vec::new()),\n-            name_bindings: arena::TypedArena::new(),\n-            import_directives: arena::TypedArena::new(),\n-            name_resolutions: arena::TypedArena::new(),\n-            invocation_data: arena::TypedArena::new(),\n-            legacy_bindings: arena::TypedArena::new(),\n-        }\n+        Default::default()\n     }\n \n     /// Runs the function on each namespace."}, {"sha": "a251269b21d2b2f2ae21081bf73ca0aa03fef814", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -475,6 +475,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     });\n     // Now we build the substituted predicates.\n     let default_obligations = predicates.predicates.iter().flat_map(|&(pred, _)| {\n+        #[derive(Default)]\n         struct CountParams { params: FxHashSet<u32> }\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n@@ -491,7 +492,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 true\n             }\n         }\n-        let mut param_count = CountParams { params: FxHashSet::default() };\n+        let mut param_count = CountParams::default();\n         let has_region = pred.visit_with(&mut param_count);\n         let substituted_pred = pred.subst(fcx.tcx, substs);\n         // Don't check non-defaulted params, dependent defaults (including lifetimes)"}, {"sha": "eb52a013b0566ef649d9b075596554e0e7f55f82", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -561,7 +561,7 @@ fn convert_variant<'a, 'tcx>(\n     adt_kind: ty::AdtKind,\n     attribute_def_id: DefId\n ) -> ty::VariantDef {\n-    let mut seen_fields: FxHashMap<ast::Ident, Span> = FxHashMap::default();\n+    let mut seen_fields: FxHashMap<ast::Ident, Span> = Default::default();\n     let node_id = tcx.hir.as_local_node_id(did).unwrap();\n     let fields = def\n         .fields()"}, {"sha": "7cc56bc192bb21725e39ceada5aff06a09ea30bc", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -48,7 +48,7 @@ pub fn provide(providers: &mut Providers) {\n fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n                              -> Lrc<CrateVariancesMap> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n-    let mut arena = arena::TypedArena::new();\n+    let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     Lrc::new(solve::solve_constraints(constraints_cx))"}, {"sha": "26487605bac67f8006e3bcb04dc2356e1287e956", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                 inner: ImplItem(Impl {\n                     unsafety: hir::Unsafety::Normal,\n                     generics: new_generics,\n-                    provided_trait_methods: FxHashSet::default(),\n+                    provided_trait_methods: Default::default(),\n                     trait_: Some(trait_.clean(self.cx)),\n                     for_: ty.clean(self.cx),\n                     items: Vec::new(),\n@@ -267,9 +267,9 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n         // all intermediate RegionVids. At the end, all constraints should\n         // be between Regions (aka region variables). This gives us the information\n         // we need to create the Generics.\n-        let mut finished: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+        let mut finished: FxHashMap<_, Vec<_>> = Default::default();\n \n-        let mut vid_map: FxHashMap<RegionTarget, RegionDeps> = FxHashMap::default();\n+        let mut vid_map: FxHashMap<RegionTarget, RegionDeps> = Default::default();\n \n         // Flattening is done in two parts. First, we insert all of the constraints\n         // into a map. Each RegionTarget (either a RegionVid or a Region) maps\n@@ -577,11 +577,11 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n         } = full_generics.clean(self.cx);\n \n         let mut has_sized = FxHashSet::default();\n-        let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap::default();\n-        let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap::default();\n-        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = FxHashMap::default();\n+        let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n+        let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n+        let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = Default::default();\n \n-        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = FxHashMap::default();\n+        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n \n         for (orig_p, p) in clean_where_predicates {\n             match p {"}, {"sha": "49cecd5b04bbcd08ee2f3ef8d305df2129e035ff", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -368,7 +368,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n            .into_iter()\n            .map(|meth| meth.ident.to_string())\n            .collect()\n-    }).unwrap_or(FxHashSet::default());\n+    }).unwrap_or_default();\n \n     debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n "}, {"sha": "db605e57735aa710d6781e46495df5971577256d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -75,8 +75,7 @@ use self::cfg::Cfg;\n use self::auto_trait::AutoTraitFinder;\n use self::blanket_impl::BlanketImplFinder;\n \n-thread_local!(pub static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> =\n-    RefCell::new(FxHashMap::default()));\n+thread_local!(pub static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> = Default::default());\n \n const FN_OUTPUT_NAME: &'static str = \"Output\";\n \n@@ -3388,7 +3387,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                   .into_iter()\n                   .map(|meth| meth.ident.to_string())\n                   .collect()\n-        }).unwrap_or(FxHashSet::default());\n+        }).unwrap_or_default();\n \n         ret.push(Item {\n             name: None,"}, {"sha": "49f13df64d6ea15dade9a106083fb3ff3e0eaf4f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -539,9 +539,9 @@ pub fn run_core(search_paths: SearchPaths,\n                 lt_substs: Default::default(),\n                 impl_trait_bounds: Default::default(),\n                 send_trait: send_trait,\n-                fake_def_ids: RefCell::new(FxHashMap::default()),\n-                all_fake_def_ids: RefCell::new(FxHashSet::default()),\n-                generated_synthetics: RefCell::new(FxHashSet::default()),\n+                fake_def_ids: Default::default(),\n+                all_fake_def_ids: Default::default(),\n+                generated_synthetics: Default::default(),\n                 all_traits: tcx.all_traits(LOCAL_CRATE).to_vec(),\n             };\n             debug!(\"crate: {:?}\", tcx.hir.krate());"}, {"sha": "dda0f37c3f95bfeffaaaf4e3c7e4d5616fd2f5ab", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -513,7 +513,7 @@ pub fn run(mut krate: clean::Crate,\n         src_root,\n         passes,\n         include_sources: true,\n-        local_sources: FxHashMap::default(),\n+        local_sources: Default::default(),\n         issue_tracker_base_url: None,\n         layout: layout::Layout {\n             logo: String::new(),\n@@ -522,7 +522,7 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n         },\n         css_file_extension: css_file_extension.clone(),\n-        created_dirs: RefCell::new(FxHashSet::default()),\n+        created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n         resource_suffix,\n@@ -591,29 +591,29 @@ pub fn run(mut krate: clean::Crate,\n         .collect();\n \n     let mut cache = Cache {\n-        impls: FxHashMap::default(),\n+        impls: Default::default(),\n         external_paths,\n         exact_paths,\n-        paths: FxHashMap::default(),\n-        implementors: FxHashMap::default(),\n+        paths: Default::default(),\n+        implementors: Default::default(),\n         stack: Vec::new(),\n         parent_stack: Vec::new(),\n         search_index: Vec::new(),\n         parent_is_trait_impl: false,\n-        extern_locations: FxHashMap::default(),\n-        primitive_locations: FxHashMap::default(),\n+        extern_locations: Default::default(),\n+        primitive_locations: Default::default(),\n         stripped_mod: false,\n         access_levels,\n         crate_version: krate.version.take(),\n         orphan_impl_items: Vec::new(),\n         orphan_trait_impls: Vec::new(),\n-        traits: krate.external_traits.lock().replace(FxHashMap::default()),\n+        traits: krate.external_traits.lock().replace(Default::default()),\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n-        masked_crates: mem::replace(&mut krate.masked_crates, FxHashSet::default()),\n+        masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n         typarams: external_typarams,\n-        aliases: FxHashMap::default(),\n+        aliases: Default::default(),\n     };\n \n     // Cache where all our extern crates are located"}, {"sha": "5054f18b020f62d33a3617b31ccc7be99521224d", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -124,6 +124,7 @@ impl StableFilemapId {\n // SourceMap\n //\n \n+#[derive(Default)]\n pub(super) struct SourceMapFiles {\n     pub(super) file_maps: Vec<Lrc<SourceFile>>,\n     stable_id_to_source_file: FxHashMap<StableFilemapId, Lrc<SourceFile>>\n@@ -143,10 +144,7 @@ pub struct SourceMap {\n impl SourceMap {\n     pub fn new(path_mapping: FilePathMapping) -> SourceMap {\n         SourceMap {\n-            files: Lock::new(SourceMapFiles {\n-                file_maps: Vec::new(),\n-                stable_id_to_source_file: FxHashMap::default(),\n-            }),\n+            files: Default::default(),\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n             doctest_offset: None,\n@@ -166,10 +164,7 @@ impl SourceMap {\n                             path_mapping: FilePathMapping)\n                             -> SourceMap {\n         SourceMap {\n-            files: Lock::new(SourceMapFiles {\n-                file_maps: Vec::new(),\n-                stable_id_to_source_file: FxHashMap::default(),\n-            }),\n+            files: Default::default(),\n             file_loader: file_loader,\n             path_mapping,\n             doctest_offset: None,"}, {"sha": "361353c82e25cbc1a980a5d82ef2a7026ce03ee3", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9258e604c7f5d3b7e86c34da1f067ff0a60257/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=3c9258e604c7f5d3b7e86c34da1f067ff0a60257", "patch": "@@ -224,6 +224,7 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n }\n \n // The &'static strs in this type actually point into the arena\n+#[derive(Default)]\n pub struct Interner {\n     arena: DroplessArena,\n     names: FxHashMap<&'static str, Symbol>,\n@@ -232,17 +233,8 @@ pub struct Interner {\n }\n \n impl Interner {\n-    pub fn new() -> Self {\n-        Interner {\n-            arena: DroplessArena::new(),\n-            names: Default::default(),\n-            strings: Default::default(),\n-            gensyms: Default::default(),\n-        }\n-    }\n-\n     fn prefill(init: &[&str]) -> Self {\n-        let mut this = Interner::new();\n+        let mut this = Interner::default();\n         for &string in init {\n             if string == \"\" {\n                 // We can't allocate empty strings in the arena, so handle this here\n@@ -697,7 +689,7 @@ mod tests {\n \n     #[test]\n     fn interner_tests() {\n-        let mut i: Interner = Interner::new();\n+        let mut i: Interner = Interner::default();\n         // first one is zero:\n         assert_eq!(i.intern(\"dog\"), Symbol(0));\n         // re-use gets the same entry:"}]}