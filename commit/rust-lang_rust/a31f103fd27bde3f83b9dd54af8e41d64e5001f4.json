{"sha": "a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMWYxMDNmZDI3YmRlM2Y4M2I5ZGQ1NGFmOGU0MWQ2NGU1MDAxZjQ=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-05-17T17:44:56Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-05-18T19:54:14Z"}, "message": "Add core::future::{poll_fn, PollFn}", "tree": {"sha": "2dba1819976dd9c5a5159eb1fc03db927f89a212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dba1819976dd9c5a5159eb1fc03db927f89a212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "html_url": "https://github.com/rust-lang/rust/commit/a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a31f103fd27bde3f83b9dd54af8e41d64e5001f4/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34cce58d81f006a5406fcae918db4492e6cf2784", "url": "https://api.github.com/repos/rust-lang/rust/commits/34cce58d81f006a5406fcae918db4492e6cf2784", "html_url": "https://github.com/rust-lang/rust/commit/34cce58d81f006a5406fcae918db4492e6cf2784"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "f56d19d66248aab4feffc81de6acc22c5e30d0c6", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a31f103fd27bde3f83b9dd54af8e41d64e5001f4/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31f103fd27bde3f83b9dd54af8e41d64e5001f4/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "patch": "@@ -11,6 +11,7 @@ use crate::{\n \n mod future;\n mod pending;\n+mod poll_fn;\n mod ready;\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -21,6 +22,9 @@ pub use pending::{pending, Pending};\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n pub use ready::{ready, Ready};\n \n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub use poll_fn::{poll_fn, PollFn};\n+\n /// This type is needed because:\n ///\n /// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass"}, {"sha": "9ab3bfcea1c71b810c0d51ccbd44abf9d3d9bd3c", "filename": "src/libcore/future/poll_fn.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a31f103fd27bde3f83b9dd54af8e41d64e5001f4/src%2Flibcore%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31f103fd27bde3f83b9dd54af8e41d64e5001f4/src%2Flibcore%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fpoll_fn.rs?ref=a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "patch": "@@ -0,0 +1,66 @@\n+use crate::fmt;\n+use crate::future::Future;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// Creates a future that wraps a function returning `Poll`.\n+///\n+/// Polling the future delegates to the wrapped function.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(future_poll_fn)]\n+/// # async fn run() {\n+/// use core::future::poll_fn;\n+/// use core::task::{Context, Poll};\n+///\n+/// fn read_line(_cx: &mut Context<'_>) -> Poll<String> {\n+///     Poll::Ready(\"Hello, World!\".into())\n+/// }\n+///\n+/// let read_future = poll_fn(read_line);\n+/// assert_eq!(read_future.await, \"Hello, World!\".to_owned());\n+/// # };\n+/// ```\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub fn poll_fn<T, F>(f: F) -> PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    PollFn { f }\n+}\n+\n+/// A Future that wraps a function returning `Poll`.\n+///\n+/// This `struct` is created by the [`poll_fn`] function. See its\n+/// documentation for more.\n+///\n+/// [`poll_fn`]: fn.poll_fn.html\n+#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub struct PollFn<F> {\n+    f: F,\n+}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<F> Unpin for PollFn<F> {}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<F> fmt::Debug for PollFn<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"PollFn\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<T, F> Future for PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    type Output = T;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        (&mut self.f)(cx)\n+    }\n+}"}]}