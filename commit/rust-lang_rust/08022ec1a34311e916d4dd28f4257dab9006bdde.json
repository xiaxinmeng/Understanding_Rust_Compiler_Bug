{"sha": "08022ec1a34311e916d4dd28f4257dab9006bdde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MDIyZWMxYTM0MzExZTkxNmQ0ZGQyOGY0MjU3ZGFiOTAwNmJkZGU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-10T20:00:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-10T20:00:56Z"}, "message": "Merge pull request #2265 from topecongiro/issue-2262\n\nFix bugs related to closures", "tree": {"sha": "02e587f2fe2b4e8e5cb2483427c639f7128eed96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e587f2fe2b4e8e5cb2483427c639f7128eed96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08022ec1a34311e916d4dd28f4257dab9006bdde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaLZJ4CRBK7hj4Ov3rIwAAdHIIAI4qpDW1SCcVghtBjN7tOSIE\nVyEMeFK5vh4Y/HgygoD/6dIW4NKMFtoDYn/5ijYaoCzqHDkjLerikFztlzVhih8t\nNVk1SOGPuNQICoeztyq3YTNWsWLwLFf9WVCGQj6heoHtgd/LK0lhBR1zmsVJYbJ3\nccThTWK4ZTd0aX/M6Rl21bu+dqaLF60YBXbfNjr0Bu2NGICEtseD1lfAEGBzKflt\ntWa2qzR/qaqyHod9S5ubXjgqtin8YiMjS7wQHxifue34Ko55x0GYJvakAxNK3BAs\nVmtb/bqrkaK4WOMc6jcpUjbZvkybJhMDl95MnuIMajD3yJA/eLYn97wZO3RZD8E=\n=yJnX\n-----END PGP SIGNATURE-----\n", "payload": "tree 02e587f2fe2b4e8e5cb2483427c639f7128eed96\nparent 5da2d7be3233901fb1c27721363395fadd47ce8e\nparent e3d2f2c2b1a33265375fde45e5152c9250f81b19\nauthor Nick Cameron <nrc@ncameron.org> 1512936056 +1300\ncommitter GitHub <noreply@github.com> 1512936056 +1300\n\nMerge pull request #2265 from topecongiro/issue-2262\n\nFix bugs related to closures"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08022ec1a34311e916d4dd28f4257dab9006bdde", "html_url": "https://github.com/rust-lang/rust/commit/08022ec1a34311e916d4dd28f4257dab9006bdde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08022ec1a34311e916d4dd28f4257dab9006bdde/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da2d7be3233901fb1c27721363395fadd47ce8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da2d7be3233901fb1c27721363395fadd47ce8e", "html_url": "https://github.com/rust-lang/rust/commit/5da2d7be3233901fb1c27721363395fadd47ce8e"}, {"sha": "e3d2f2c2b1a33265375fde45e5152c9250f81b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d2f2c2b1a33265375fde45e5152c9250f81b19", "html_url": "https://github.com/rust-lang/rust/commit/e3d2f2c2b1a33265375fde45e5152c9250f81b19"}], "stats": {"total": 137, "additions": 92, "deletions": 45}, "files": [{"sha": "7512ef72e27588ee906c0f5b6a4993c61dbb7910", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -419,10 +419,12 @@ fn rewrite_chain_subexpr(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let rewrite_element = |expr_str: String| if expr_str.len() <= shape.width {\n-        Some(expr_str)\n-    } else {\n-        None\n+    let rewrite_element = |expr_str: String| {\n+        if expr_str.len() <= shape.width {\n+            Some(expr_str)\n+        } else {\n+            None\n+        }\n     };\n \n     match expr.node {"}, {"sha": "f169a3f4d229f80f9a4ae9218e309df456a67763", "filename": "src/closures.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -81,7 +81,7 @@ fn try_rewrite_without_block(\n ) -> Option<String> {\n     let expr = get_inner_expr(expr, prefix, context);\n \n-    if is_block_closure_forced(expr) {\n+    if is_block_closure_forced(context, expr) {\n         rewrite_closure_with_block(expr, prefix, context, shape)\n     } else {\n         rewrite_closure_expr(expr, prefix, context, body_shape)\n@@ -107,7 +107,7 @@ fn get_inner_expr<'a>(\n \n // Figure out if a block is necessary.\n fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext) -> bool {\n-    is_unsafe_block(block) || block.stmts.len() > 1 || context.inside_macro\n+    is_unsafe_block(block) || block.stmts.len() > 1\n         || block_contains_comment(block, context.codemap) || prefix.contains('\\n')\n }\n \n@@ -118,6 +118,12 @@ fn rewrite_closure_with_block(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n+    let left_most = left_most_sub_expr(body);\n+    let veto_block = left_most != body && !classify::expr_requires_semi_to_be_stmt(left_most);\n+    if veto_block {\n+        return None;\n+    }\n+\n     let block = ast::Block {\n         stmts: vec![\n             ast::Stmt {\n@@ -141,18 +147,37 @@ fn rewrite_closure_expr(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let mut rewrite = expr.rewrite(context, shape);\n-    if classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(expr)) {\n-        rewrite = and_one_line(rewrite);\n-    }\n-    rewrite = rewrite.and_then(|rw| {\n-        if context.config.force_multiline_blocks() && rw.contains('\\n') {\n-            None\n-        } else {\n-            Some(rw)\n+    fn allow_multi_line(expr: &ast::Expr) -> bool {\n+        match expr.node {\n+            ast::ExprKind::Match(..)\n+            | ast::ExprKind::Block(..)\n+            | ast::ExprKind::Catch(..)\n+            | ast::ExprKind::Loop(..)\n+            | ast::ExprKind::Struct(..) => true,\n+\n+            ast::ExprKind::AddrOf(_, ref expr)\n+            | ast::ExprKind::Box(ref expr)\n+            | ast::ExprKind::Try(ref expr)\n+            | ast::ExprKind::Unary(_, ref expr)\n+            | ast::ExprKind::Cast(ref expr, _) => allow_multi_line(expr),\n+\n+            _ => false,\n         }\n-    });\n-    rewrite.map(|rw| format!(\"{} {}\", prefix, rw))\n+    }\n+\n+    // When rewriting closure's body without block, we require it to fit in a single line\n+    // unless it is a block-like expression or we are inside macro call.\n+    let veto_multiline = (!allow_multi_line(expr) && !context.inside_macro)\n+        || context.config.force_multiline_blocks();\n+    expr.rewrite(context, shape)\n+        .and_then(|rw| {\n+            if veto_multiline && rw.contains('\\n') {\n+                None\n+            } else {\n+                Some(rw)\n+            }\n+        })\n+        .map(|rw| format!(\"{} {}\", prefix, rw))\n }\n \n // Rewrite closure whose body is block.\n@@ -269,15 +294,11 @@ pub fn rewrite_last_closure(\n         if prefix.contains('\\n') {\n             return None;\n         }\n-        // If we are inside macro, we do not want to add or remove block from closure body.\n-        if context.inside_macro {\n-            return expr.rewrite(context, shape);\n-        }\n \n         let body_shape = shape.offset_left(extra_offset)?;\n \n         // We force to use block for the body of the closure for certain kinds of expressions.\n-        if is_block_closure_forced(body) {\n+        if is_block_closure_forced(context, body) {\n             return rewrite_closure_with_block(body, &prefix, context, body_shape).and_then(\n                 |body_str| {\n                     // If the expression can fit in a single line, we need not force block closure.\n@@ -329,23 +350,27 @@ where\n         .count() > 1\n }\n \n-fn is_block_closure_forced(expr: &ast::Expr) -> bool {\n+fn is_block_closure_forced(context: &RewriteContext, expr: &ast::Expr) -> bool {\n+    // If we are inside macro, we do not want to add or remove block from closure body.\n+    if context.inside_macro {\n+        false\n+    } else {\n+        is_block_closure_forced_inner(expr)\n+    }\n+}\n+\n+fn is_block_closure_forced_inner(expr: &ast::Expr) -> bool {\n     match expr.node {\n         ast::ExprKind::If(..)\n         | ast::ExprKind::IfLet(..)\n-        | ast::ExprKind::Loop(..)\n         | ast::ExprKind::While(..)\n         | ast::ExprKind::WhileLet(..)\n         | ast::ExprKind::ForLoop(..) => true,\n         ast::ExprKind::AddrOf(_, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n+        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced_inner(expr),\n         _ => false,\n     }\n }\n-\n-fn and_one_line(x: Option<String>) -> Option<String> {\n-    x.and_then(|x| if x.contains('\\n') { None } else { Some(x) })\n-}"}, {"sha": "ed4adffb9f5971983579df8f09729fbe1fbb6060", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -2316,12 +2316,13 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) ->\n         .offset_left(paren_overhead)\n         .and_then(|s| s.sub_width(paren_overhead))?;\n \n-    let paren_wrapper =\n-        |s: &str| if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n+    let paren_wrapper = |s: &str| {\n+        if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n             format!(\"( {} )\", s)\n         } else {\n             format!(\"({})\", s)\n-        };\n+        }\n+    };\n \n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);"}, {"sha": "90bea58ea1baf3e9ccad4c0990a5adf046339d43", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -481,10 +481,12 @@ impl<'a> FmtVisitor<'a> {\n                 enum_def.variants.iter(),\n                 \"}\",\n                 \",\",\n-                |f| if !f.node.attrs.is_empty() {\n-                    f.node.attrs[0].span.lo()\n-                } else {\n-                    f.span.lo()\n+                |f| {\n+                    if !f.node.attrs.is_empty() {\n+                        f.node.attrs[0].span.lo()\n+                    } else {\n+                        f.span.lo()\n+                    }\n                 },\n                 |f| f.span.hi(),\n                 |f| self.format_variant(f, one_line_width),\n@@ -2548,10 +2550,12 @@ fn rewrite_where_clause_rfc_style(\n     };\n     let preds_str = write_list(&items.collect::<Vec<_>>(), &fmt)?;\n \n-    let comment_separator = |comment: &str, shape: Shape| if comment.is_empty() {\n-        String::new()\n-    } else {\n-        format!(\"\\n{}\", shape.indent.to_string(context.config))\n+    let comment_separator = |comment: &str, shape: Shape| {\n+        if comment.is_empty() {\n+            String::new()\n+        } else {\n+            format!(\"\\n{}\", shape.indent.to_string(context.config))\n+        }\n     };\n     let newline_before_where = comment_separator(&comment_before, shape);\n     let newline_after_where = comment_separator(&comment_after, clause_shape);"}, {"sha": "ce0616d9ebf03e2cfc3c851967b5012dc75795bf", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -119,6 +119,7 @@ pub fn rewrite_macro(\n     context.inside_macro = true;\n     if context.config.use_try_shorthand() {\n         if let Some(expr) = convert_try_mac(mac, context) {\n+            context.inside_macro = false;\n             return expr.rewrite(context, shape);\n         }\n     }"}, {"sha": "e93cc3fb40f59f55b21d46594e01a3513c22d908", "filename": "tests/source/closure.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -204,3 +204,10 @@ fn issue2207() {\n         a_very_very_very_very_very_very_very_long_function_name_or_anything_else()\n     }.to_string())\n }\n+\n+fn issue2262() {\n+    result.init(&mut result.slave.borrow_mut(), &mut (result.strategy)()).map_err(|factory| Error {\n+        factory,\n+        slave: None,\n+    })?;\n+}"}, {"sha": "1912c16ef6ef2585c7c318606a51028f236ce45f", "filename": "tests/target/closure.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -240,3 +240,12 @@ fn issue2207() {\n             .to_string()\n     })\n }\n+\n+fn issue2262() {\n+    result\n+        .init(&mut result.slave.borrow_mut(), &mut (result.strategy)())\n+        .map_err(|factory| Error {\n+            factory,\n+            slave: None,\n+        })?;\n+}"}, {"sha": "d3522214c2e2f4e3aa0a4685f7042c0f63ba55fe", "filename": "tests/target/configs-fn_call_indent-block.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08022ec1a34311e916d4dd28f4257dab9006bdde/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs?ref=08022ec1a34311e916d4dd28f4257dab9006bdde", "patch": "@@ -72,11 +72,9 @@ fn query(conn: &Connection) -> Result<()> {\n             WHERE DATE(date) = $1\n         \"#,\n         &[],\n-        |row| {\n-            Post {\n-                title: row.get(0),\n-                date: row.get(1),\n-            }\n+        |row| Post {\n+            title: row.get(0),\n+            date: row.get(1),\n         },\n     )?;\n "}]}