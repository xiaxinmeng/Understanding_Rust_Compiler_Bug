{"sha": "cdca33754771e6b10e9399c8d7780e391963305e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkY2EzMzc1NDc3MWU2YjEwZTkzOTljOGQ3NzgwZTM5MTk2MzMwNWU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-14T00:25:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-28T03:16:57Z"}, "message": "Add tests for the new behavior\n\n- Only set stage 2 in dist tests\n- Add test for `x.py doc` without args\n- Add test for `x.py build` without args\n- Add test for `x.py build --stage 0`", "tree": {"sha": "2352c74112a39813d99c1140199664b8eb6d5fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2352c74112a39813d99c1140199664b8eb6d5fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdca33754771e6b10e9399c8d7780e391963305e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdca33754771e6b10e9399c8d7780e391963305e", "html_url": "https://github.com/rust-lang/rust/commit/cdca33754771e6b10e9399c8d7780e391963305e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdca33754771e6b10e9399c8d7780e391963305e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c17297383102964ae08bed7e0d2f202959f7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c17297383102964ae08bed7e0d2f202959f7f9", "html_url": "https://github.com/rust-lang/rust/commit/60c17297383102964ae08bed7e0d2f202959f7f9"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "d6056565356d52b59de6eeda7447636d6880a16b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 92, "deletions": 3, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cdca33754771e6b10e9399c8d7780e391963305e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca33754771e6b10e9399c8d7780e391963305e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=cdca33754771e6b10e9399c8d7780e391963305e", "patch": "@@ -4,7 +4,6 @@ use std::thread;\n \n fn configure(host: &[&str], target: &[&str]) -> Config {\n     let mut config = Config::default_opts();\n-    config.stage = Some(2);\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.skip_only_host_steps = false;\n@@ -34,11 +33,101 @@ fn first<A, B>(v: Vec<(A, B)>) -> Vec<A> {\n     v.into_iter().map(|(a, _)| a).collect::<Vec<_>>()\n }\n \n-mod dist {\n+mod defaults {\n     use super::{configure, first};\n     use crate::builder::*;\n+    use crate::Config;\n     use pretty_assertions::assert_eq;\n \n+    #[test]\n+    fn build_default() {\n+        let build = Build::new(configure(&[], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+            ]\n+        );\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        // Make sure rustdoc is only built once.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            // Recall that rustdoc stages are off-by-one\n+            // - this is the compiler it's _linked_ to, not built with.\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } }],\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+    }\n+\n+    #[test]\n+    fn build_stage_0() {\n+        let config = Config { stage: Some(0), ..configure(&[], &[]) };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            // This is the beta rustdoc.\n+            // Add an assert here to make sure this is the only rustdoc built.\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } }],\n+        );\n+        assert!(builder.cache.all::<compile::Rustc>().is_empty());\n+    }\n+\n+    #[test]\n+    fn doc_default() {\n+        let mut config = configure(&[], &[]);\n+        config.compiler_docs = true;\n+        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+        let a = TargetSelection::from_user(\"A\");\n+\n+        // error_index_generator uses stage 0 to share rustdoc artifacts with the\n+        // rustdoc tool.\n+        assert_eq!(\n+            first(builder.cache.all::<doc::ErrorIndex>()),\n+            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::ErrorIndex>()),\n+            &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 0 } }]\n+        );\n+        // docs should be built with the beta compiler, not with the stage0 artifacts.\n+        // recall that rustdoc is off-by-one: `stage` is the compiler rustdoc is _linked_ to,\n+        // not the one it was built by.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } },]\n+        );\n+    }\n+}\n+\n+mod dist {\n+    use super::{first, Config};\n+    use crate::builder::*;\n+    use pretty_assertions::assert_eq;\n+\n+    fn configure(host: &[&str], target: &[&str]) -> Config {\n+        Config { stage: Some(2), ..super::configure(host, target) }\n+    }\n+\n     #[test]\n     fn dist_baseline() {\n         let build = Build::new(configure(&[], &[]));\n@@ -276,7 +365,7 @@ mod dist {\n     }\n \n     #[test]\n-    fn build_default() {\n+    fn build_all() {\n         let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions("}]}