{"sha": "2e1911b47ae5a4fd8cf4c4a98e739666f99daf82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMTkxMWI0N2FlNWE0ZmQ4Y2Y0YzRhOThlNzM5NjY2Zjk5ZGFmODI=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2014-12-04T00:31:21Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2014-12-04T09:28:16Z"}, "message": "core::iter::Unfold: reword docs and add example\n\nRemove note about core", "tree": {"sha": "6f5cfef92be447fb30fb0d25bc1aa947d7db79b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5cfef92be447fb30fb0d25bc1aa947d7db79b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82", "html_url": "https://github.com/rust-lang/rust/commit/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0745886c2382c37d5d345f4c5b1b8f7b9a387", "html_url": "https://github.com/rust-lang/rust/commit/daa0745886c2382c37d5d345f4c5b1b8f7b9a387"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "6c43d4dbc30ca40d9d84888c0e076b24f58c64bd", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1911b47ae5a4fd8cf4c4a98e739666f99daf82/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2e1911b47ae5a4fd8cf4c4a98e739666f99daf82", "patch": "@@ -2036,18 +2036,49 @@ for Inspect<'a, A, T> {\n     }\n }\n \n-/// An iterator which just modifies the contained state throughout iteration.\n+/// An iterator which passes mutable state to a closure and yields the result.\n+///\n+/// # Example: The Fibonacci Sequence\n+///\n+/// An iterator that yields sequential Fibonacci numbers, and stops on overflow.\n+///\n+/// ```rust\n+/// use std::iter::Unfold;\n+/// use std::num::Int; // For `.checked_add()`\n+///\n+/// // This iterator will yield up to the last Fibonacci number before the max value of `u32`.\n+/// // You can simply change `u32` to `u64` in this line if you want higher values than that.\n+/// let mut fibonacci = Unfold::new((Some(0u32), Some(1u32)), |&(ref mut x2, ref mut x1)| {\n+///     // Attempt to get the next Fibonacci number\n+///     // `x1` will be `None` if previously overflowed.\n+///     let next = match (*x2, *x1) {\n+///         (Some(x2), Some(x1)) => x2.checked_add(x1),\n+///         _ => None,\n+///     };\n+///\n+///     // Shift left: ret <- x2 <- x1 <- next\n+///     let ret = *x2;\n+///     *x2 = *x1;\n+///     *x1 = next;\n+///\n+///     ret\n+/// });\n+///\n+/// for i in fibonacci {\n+///     println!(\"{}\", i);\n+/// }\n+/// ```\n #[experimental]\n pub struct Unfold<'a, A, St> {\n     f: |&mut St|: 'a -> Option<A>,\n-    /// Internal state that will be yielded on the next iteration\n+    /// Internal state that will be passed to the closure on the next iteration\n     pub state: St,\n }\n \n #[experimental]\n impl<'a, A, St> Unfold<'a, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n-    /// function\" and an initial state to eventually pass to the iterator\n+    /// function\" and an initial state to eventually pass to the closure\n     #[inline]\n     pub fn new<'a>(initial_state: St, f: |&mut St|: 'a -> Option<A>)\n                -> Unfold<'a, A, St> {"}]}