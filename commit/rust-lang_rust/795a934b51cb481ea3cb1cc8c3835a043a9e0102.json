{"sha": "795a934b51cb481ea3cb1cc8c3835a043a9e0102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWE5MzRiNTFjYjQ4MWVhM2NiMWNjOGMzODM1YTA0M2E5ZTAxMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T16:08:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T16:08:32Z"}, "message": "Auto merge of #82043 - tmiasko:may-have-side-effect, r=kennytm\n\nTurn may_have_side_effect into an associated constant\n\nThe `may_have_side_effect` is an implementation detail of `TrustedRandomAccess`\ntrait. It describes if obtaining an iterator element may have side effects. It\nis currently implemented as an associated function.\n\nTurn `may_have_side_effect` into an associated constant. This makes the\nvalue immediately available to the optimizer.", "tree": {"sha": "1d7577797c57c55bd3ce5e592de267e50e51ec91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7577797c57c55bd3ce5e592de267e50e51ec91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795a934b51cb481ea3cb1cc8c3835a043a9e0102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795a934b51cb481ea3cb1cc8c3835a043a9e0102", "html_url": "https://github.com/rust-lang/rust/commit/795a934b51cb481ea3cb1cc8c3835a043a9e0102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795a934b51cb481ea3cb1cc8c3835a043a9e0102/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/67342b830ebeca05ebafc09d8c7ed71b2ad821e1", "html_url": "https://github.com/rust-lang/rust/commit/67342b830ebeca05ebafc09d8c7ed71b2ad821e1"}, {"sha": "dc3304c341ff4f5551cc0f7960f4e56521effd3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3304c341ff4f5551cc0f7960f4e56521effd3d", "html_url": "https://github.com/rust-lang/rust/commit/dc3304c341ff4f5551cc0f7960f4e56521effd3d"}], "stats": {"total": 108, "additions": 30, "deletions": 78}, "files": [{"sha": "bcbdffabc7fbea221905aa647ec3934953068841", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -212,9 +212,7 @@ unsafe impl<T, A: Allocator> TrustedRandomAccess for IntoIter<T, A>\n where\n     T: Copy,\n {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]"}, {"sha": "0abdbba2ef1b0046eeac899632b77eec79afdba5", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -124,10 +124,7 @@ unsafe impl<I> TrustedRandomAccess for Cloned<I>\n where\n     I: TrustedRandomAccess,\n {\n-    #[inline]\n-    fn may_have_side_effect() -> bool {\n-        true\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = true;\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}, {"sha": "0a5822452a3471fb312b1ec94afd7890d1e3f3be", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -140,10 +140,7 @@ unsafe impl<I> TrustedRandomAccess for Copied<I>\n where\n     I: TrustedRandomAccess,\n {\n-    #[inline]\n-    fn may_have_side_effect() -> bool {\n-        I::may_have_side_effect()\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }\n \n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]"}, {"sha": "73cee1df30c5eb99679797a30c341792733c7b01", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -210,9 +210,7 @@ unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n where\n     I: TrustedRandomAccess,\n {\n-    fn may_have_side_effect() -> bool {\n-        I::may_have_side_effect()\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "c01f384dec5d621f01b41aa00a10123ec98761ce", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -201,9 +201,7 @@ unsafe impl<I> TrustedRandomAccess for Fuse<I>\n where\n     I: TrustedRandomAccess,\n {\n-    fn may_have_side_effect() -> bool {\n-        I::may_have_side_effect()\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }\n \n // Fuse specialization trait"}, {"sha": "2d997cfe50946b6c179e8b8badd98b19c77de9c8", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -189,10 +189,7 @@ unsafe impl<I, F> TrustedRandomAccess for Map<I, F>\n where\n     I: TrustedRandomAccess,\n {\n-    #[inline]\n-    fn may_have_side_effect() -> bool {\n-        true\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = true;\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "9d0f4e3618fc54e382eb4ed7563b5ff10086c267", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -197,7 +197,7 @@ where\n             unsafe {\n                 Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n             }\n-        } else if A::may_have_side_effect() && self.index < self.a.size() {\n+        } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a.size() {\n             let i = self.index;\n             self.index += 1;\n             // match the base implementation's potential side effects\n@@ -224,15 +224,15 @@ where\n         while self.index < end {\n             let i = self.index;\n             self.index += 1;\n-            if A::may_have_side_effect() {\n+            if A::MAY_HAVE_SIDE_EFFECT {\n                 // SAFETY: the usage of `cmp::min` to calculate `delta`\n                 // ensures that `end` is smaller than or equal to `self.len`,\n                 // so `i` is also smaller than `self.len`.\n                 unsafe {\n                     self.a.__iterator_get_unchecked(i);\n                 }\n             }\n-            if B::may_have_side_effect() {\n+            if B::MAY_HAVE_SIDE_EFFECT {\n                 // SAFETY: same as above.\n                 unsafe {\n                     self.b.__iterator_get_unchecked(i);\n@@ -249,23 +249,21 @@ where\n         A: DoubleEndedIterator + ExactSizeIterator,\n         B: DoubleEndedIterator + ExactSizeIterator,\n     {\n-        let a_side_effect = A::may_have_side_effect();\n-        let b_side_effect = B::may_have_side_effect();\n-        if a_side_effect || b_side_effect {\n+        if A::MAY_HAVE_SIDE_EFFECT || B::MAY_HAVE_SIDE_EFFECT {\n             let sz_a = self.a.size();\n             let sz_b = self.b.size();\n             // Adjust a, b to equal length, make sure that only the first call\n             // of `next_back` does this, otherwise we will break the restriction\n             // on calls to `self.next_back()` after calling `get_unchecked()`.\n             if sz_a != sz_b {\n                 let sz_a = self.a.size();\n-                if a_side_effect && sz_a > self.len {\n+                if A::MAY_HAVE_SIDE_EFFECT && sz_a > self.len {\n                     for _ in 0..sz_a - cmp::max(self.len, self.index) {\n                         self.a.next_back();\n                     }\n                 }\n                 let sz_b = self.b.size();\n-                if b_side_effect && sz_b > self.len {\n+                if B::MAY_HAVE_SIDE_EFFECT && sz_b > self.len {\n                     for _ in 0..sz_b - self.len {\n                         self.b.next_back();\n                     }\n@@ -309,9 +307,7 @@ where\n     A: TrustedRandomAccess,\n     B: TrustedRandomAccess,\n {\n-    fn may_have_side_effect() -> bool {\n-        A::may_have_side_effect() || B::may_have_side_effect()\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = A::MAY_HAVE_SIDE_EFFECT || B::MAY_HAVE_SIDE_EFFECT;\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -422,9 +418,9 @@ pub unsafe trait TrustedRandomAccess: Sized {\n     {\n         self.size_hint().0\n     }\n-    /// Returns `true` if getting an iterator element may have\n-    /// side effects. Remember to take inner iterators into account.\n-    fn may_have_side_effect() -> bool;\n+    /// `true` if getting an iterator element may have side effects.\n+    /// Remember to take inner iterators into account.\n+    const MAY_HAVE_SIDE_EFFECT: bool;\n }\n \n /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to"}, {"sha": "796301c76b608cc156efb6ac06962c4c7244fd87", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -1305,9 +1305,7 @@ impl<T> FusedIterator for Windows<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n@@ -1473,9 +1471,7 @@ impl<T> FusedIterator for Chunks<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n@@ -1638,9 +1634,7 @@ impl<T> FusedIterator for ChunksMut<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n@@ -1794,9 +1788,7 @@ impl<T> FusedIterator for ChunksExact<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n@@ -1947,9 +1939,7 @@ impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// A windowed iterator over a slice in overlapping chunks (`N` elements at a\n@@ -2186,9 +2176,7 @@ impl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N> {}\n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) mutable chunks (`N` elements\n@@ -2300,9 +2288,7 @@ impl<T, const N: usize> FusedIterator for ArrayChunksMut<'_, T, N> {}\n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n@@ -2464,9 +2450,7 @@ impl<T> FusedIterator for RChunks<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n@@ -2627,9 +2611,7 @@ impl<T> FusedIterator for RChunksMut<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n@@ -2787,9 +2769,7 @@ impl<T> FusedIterator for RChunksExact<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n@@ -2944,25 +2924,19 @@ impl<T> FusedIterator for RChunksExactMut<'_, T> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for Iter<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// An iterator over slice in (non-overlapping) chunks separated by a predicate."}, {"sha": "0c9307a6d2f15d6e0117d81106120ed39ee4f099", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795a934b51cb481ea3cb1cc8c3835a043a9e0102/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=795a934b51cb481ea3cb1cc8c3835a043a9e0102", "patch": "@@ -321,10 +321,7 @@ unsafe impl TrustedLen for Bytes<'_> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl TrustedRandomAccess for Bytes<'_> {\n-    #[inline]\n-    fn may_have_side_effect() -> bool {\n-        false\n-    }\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n /// This macro generates a Clone impl for string pattern API"}]}