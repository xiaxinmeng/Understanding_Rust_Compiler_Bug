{"sha": "fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjQ1ZTA1NDA0YWQ1YmJlNjg5ZGNkYzViZDVmNDc1MGY0ZTM3MzA=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-12-19T22:05:14Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-12-19T22:05:14Z"}, "message": "Split PlaceContext::Store into Store & AsmOutput\n\nOutputs in InlineAsm can be read-write, so splitting it out is useful for things like Store-Store folding, as it cannot be done for a Store-AsmOutput.\n\nThis PR is intended to make no changes, just be the mechanical split of the enum.  Future changes can use the split, like a MIR pass I'm working on and perhaps two-phase borrows.", "tree": {"sha": "c7bd066f7ed7f7e508e3ef6d6eca92d62d0718ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7bd066f7ed7f7e508e3ef6d6eca92d62d0718ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "html_url": "https://github.com/rust-lang/rust/commit/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7db42fb5b9a620c5669711546663d0ccebf9291", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7db42fb5b9a620c5669711546663d0ccebf9291", "html_url": "https://github.com/rust-lang/rust/commit/e7db42fb5b9a620c5669711546663d0ccebf9291"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "a50a9c819f6ecb57cc95a1229a826b8be8fef3f3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -376,7 +376,7 @@ macro_rules! make_mir_visitor {\n                                                ref $($mutability)* inputs,\n                                                asm: _ } => {\n                         for output in & $($mutability)* outputs[..] {\n-                            self.visit_place(output, PlaceContext::Store, location);\n+                            self.visit_place(output, PlaceContext::AsmOutput, location);\n                         }\n                         for input in & $($mutability)* inputs[..] {\n                             self.visit_operand(input, location);\n@@ -835,6 +835,11 @@ pub enum PlaceContext<'tcx> {\n     // Appears as LHS of an assignment\n     Store,\n \n+    // Can often be treated as a Store, but needs to be separate because\n+    // ASM is allowed to read outputs as well, so a Store-AsmOutput sequence\n+    // cannot be simplified the way a Store-Store can be.\n+    AsmOutput,\n+\n     // Dest of a call\n     Call,\n \n@@ -910,7 +915,7 @@ impl<'tcx> PlaceContext<'tcx> {\n     /// Returns true if this place context represents a use that potentially changes the value.\n     pub fn is_mutating_use(&self) -> bool {\n         match *self {\n-            PlaceContext::Store | PlaceContext::Call |\n+            PlaceContext::Store | PlaceContext::AsmOutput | PlaceContext::Call |\n             PlaceContext::Borrow { kind: BorrowKind::Mut, .. } |\n             PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop => true,\n@@ -932,6 +937,7 @@ impl<'tcx> PlaceContext<'tcx> {\n             PlaceContext::Projection(Mutability::Not) |\n             PlaceContext::Copy | PlaceContext::Move => true,\n             PlaceContext::Borrow { kind: BorrowKind::Mut, .. } | PlaceContext::Store |\n+            PlaceContext::AsmOutput |\n             PlaceContext::Call | PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop | PlaceContext::StorageLive | PlaceContext::StorageDead |\n             PlaceContext::Validate => false,"}, {"sha": "2504aa5ff378acf9f07ec2401ead0bc9e2ea8f24", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -540,6 +540,10 @@ impl<'a, 'b, 'tcx> FindPlaceUses<'a, 'b, 'tcx> {\n             // \"deep\" does validation go?\n             PlaceContext::Validate => false,\n \n+            // FIXME: This is here to not change behaviour from before\n+            // AsmOutput existed, but it's not necessarily a pure overwrite.\n+            // so it's possible this should activate the place.\n+            PlaceContext::AsmOutput |\n             // pure overwrites of an place do not activate it. (note\n             // PlaceContext::Call is solely about dest place)\n             PlaceContext::Store | PlaceContext::Call => false,"}, {"sha": "d9ef5235d1939d51f9be7efb52680a1ef10b4295", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -173,6 +173,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     ty::TyAdt(adt, _) => {\n                         if adt.is_union() {\n                             if context == PlaceContext::Store ||\n+                                context == PlaceContext::AsmOutput ||\n                                 context == PlaceContext::Drop\n                             {\n                                 let elem_ty = match elem {"}, {"sha": "1545040f2da796a688747fdbaaba9aa81852f698", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -103,6 +103,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n         if *temp == TempState::Undefined {\n             match context {\n                 PlaceContext::Store |\n+                PlaceContext::AsmOutput |\n                 PlaceContext::Call => {\n                     *temp = TempState::Defined {\n                         location,"}, {"sha": "0af08e1bc8ac9ac0ef06d48882d8900fcd52fe19", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -240,6 +240,9 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor {\n \n             PlaceContext::Store |\n \n+            // This is potentially both a def and a use...\n+            PlaceContext::AsmOutput |\n+\n             // We let Call define the result in both the success and\n             // unwind cases. This is not really correct, however it\n             // does not seem to be observable due to the way that we"}, {"sha": "cfe55aba0d3c5e0019520887b16bdd88bbebc4ec", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb245e05404ad5bbe689dcdc5bd5f4750f4e3730/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=fb245e05404ad5bbe689dcdc5bd5f4750f4e3730", "patch": "@@ -193,6 +193,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n             PlaceContext::Inspect |\n             PlaceContext::Store |\n+            PlaceContext::AsmOutput |\n             PlaceContext::Borrow { .. } |\n             PlaceContext::Projection(..) => {\n                 self.mark_as_memory(index);"}]}