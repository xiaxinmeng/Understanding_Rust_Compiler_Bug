{"sha": "24c3d85e66b0fd719d9ffa70ae5e56593cb9b644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YzNkODVlNjZiMGZkNzE5ZDlmZmE3MGFlNWU1NjU5M2NiOWI2NDQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-06-07T21:08:26Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T22:26:57Z"}, "message": "Make sure that module_id is actually a module", "tree": {"sha": "5860911f8591ee909c4420b0a549783f5e19cad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5860911f8591ee909c4420b0a549783f5e19cad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644", "html_url": "https://github.com/rust-lang/rust/commit/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20106d5a2fda0f2fef97ce253e5d78d4cf030289", "url": "https://api.github.com/repos/rust-lang/rust/commits/20106d5a2fda0f2fef97ce253e5d78d4cf030289", "html_url": "https://github.com/rust-lang/rust/commit/20106d5a2fda0f2fef97ce253e5d78d4cf030289"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "487a4a5b0a229be96c9c42d73511374e980b1d63", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c3d85e66b0fd719d9ffa70ae5e56593cb9b644/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=24c3d85e66b0fd719d9ffa70ae5e56593cb9b644", "patch": "@@ -466,7 +466,19 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             // FIXME: is this correct?\n             None\n         } else {\n-            self.cx.tcx.parent(item.def_id)\n+            let mut current = item.def_id;\n+            // The immediate parent might not always be a module.\n+            // Find the first parent which is.\n+            loop {\n+                if let Some(parent) = self.cx.tcx.parent(current) {\n+                    if self.cx.tcx.def_kind(parent) == DefKind::Mod {\n+                        break Some(parent);\n+                    }\n+                    current = parent;\n+                } else {\n+                    break None;\n+                }\n+            }\n         };\n \n         if parent_node.is_some() {"}]}