{"sha": "3b276cbe044a528e5966a4dc729fdfd662724f8c", "node_id": "C_kwDOAAsO6NoAKDNiMjc2Y2JlMDQ0YTUyOGU1OTY2YTRkYzcyOWZkZmQ2NjI3MjRmOGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-25T23:49:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T23:49:20Z"}, "message": "Rollup merge of #93603 - connorff:compute-polonius-liveness-facts-flag, r=ecstatic-morse\n\nPopulate liveness facts when calling `get_body_with_borrowck_facts` without `-Z polonius`\n\nFor a new feature of [Flowistry](https://github.com/willcrichton/flowistry), a static-analysis tool, we need to obtain a `mir::Body`'s liveness facts using `get_body_with_borrowck_facts` (added in #86977). We'd like to do this without passing `-Z polonius` as a compiler arg to avoid borrow checking the entire crate.\n\nSupport for doing this was added in #88983, but the Polonius input facts used for liveness analysis are empty. This happens because the liveness input facts are populated in `liveness::generate` depending only on the value of `AllFacts::enabled` (which is toggled via compiler args).\n\nThis PR propagates the [`use_polonius`](https://github.com/rust-lang/rust/blob/8b09ba6a5d5c644fe0f1c27c7f9c80b334241707/compiler/rustc_borrowck/src/nll.rs#L168) flag to `liveness::generate` to support populating liveness facts without requiring the `-Z polonius` flag.\n\nThis fix is somewhat patchy - if it'd be better to add more widely-accessible state (like `AllFacts::enabled`) I'd be open to ideas!", "tree": {"sha": "98098dc6c7b39e3c6da55aeb0d502bf80422312e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98098dc6c7b39e3c6da55aeb0d502bf80422312e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b276cbe044a528e5966a4dc729fdfd662724f8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGWsACRBK7hj4Ov3rIwAADboIAASkiG4d86MTG7r5qRohH077\njM9OTZJnsEPlP1Mby9+n0+1BZ8A6gLgWRAi/YUTjyFkQvv5l8B21jR+3mO26XEIX\nXhcgDvDD3nvVXaxl/bJ6cW8CG+k5vsCL3ao0wJLooi0+6x0+evcBHtJgXqyUZm4c\njo55iyijGO5fvLvHsGosdZUSs/GHLNtAZaA7oETEnrVeO5kfk5oWLyHKnPLuGYf9\nvCpoLL6bYUhoTa/pJXyoYx1wGwB3haXBS2Z0fravg0H6Yn2Fl/UYKr5lU50ws+Qb\n/Sh+D/1sbFMXt0GjoF4WLvPWCEozKST1aTGXSeov2/4OpDwLvTDI3iMxxKvCnbw=\n=YhJp\n-----END PGP SIGNATURE-----\n", "payload": "tree 98098dc6c7b39e3c6da55aeb0d502bf80422312e\nparent d3ad51b48f83329fac0cd8a9f1253f3146613c1c\nparent 42371a502fd82b33bfbc777b53948432e91a60ef\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645832960 +0100\ncommitter GitHub <noreply@github.com> 1645832960 +0100\n\nRollup merge of #93603 - connorff:compute-polonius-liveness-facts-flag, r=ecstatic-morse\n\nPopulate liveness facts when calling `get_body_with_borrowck_facts` without `-Z polonius`\n\nFor a new feature of [Flowistry](https://github.com/willcrichton/flowistry), a static-analysis tool, we need to obtain a `mir::Body`'s liveness facts using `get_body_with_borrowck_facts` (added in #86977). We'd like to do this without passing `-Z polonius` as a compiler arg to avoid borrow checking the entire crate.\n\nSupport for doing this was added in #88983, but the Polonius input facts used for liveness analysis are empty. This happens because the liveness input facts are populated in `liveness::generate` depending only on the value of `AllFacts::enabled` (which is toggled via compiler args).\n\nThis PR propagates the [`use_polonius`](https://github.com/rust-lang/rust/blob/8b09ba6a5d5c644fe0f1c27c7f9c80b334241707/compiler/rustc_borrowck/src/nll.rs#L168) flag to `liveness::generate` to support populating liveness facts without requiring the `-Z polonius` flag.\n\nThis fix is somewhat patchy - if it'd be better to add more widely-accessible state (like `AllFacts::enabled`) I'd be open to ideas!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b276cbe044a528e5966a4dc729fdfd662724f8c", "html_url": "https://github.com/rust-lang/rust/commit/3b276cbe044a528e5966a4dc729fdfd662724f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b276cbe044a528e5966a4dc729fdfd662724f8c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "html_url": "https://github.com/rust-lang/rust/commit/d3ad51b48f83329fac0cd8a9f1253f3146613c1c"}, {"sha": "42371a502fd82b33bfbc777b53948432e91a60ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/42371a502fd82b33bfbc777b53948432e91a60ef", "html_url": "https://github.com/rust-lang/rust/commit/42371a502fd82b33bfbc777b53948432e91a60ef"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "6fd9f4954a6cc869694e13b4700aa31f451f1939", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=3b276cbe044a528e5966a4dc729fdfd662724f8c", "patch": "@@ -188,6 +188,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             move_data,\n             elements,\n             upvars,\n+            use_polonius,\n         );\n \n     if let Some(all_facts) = &mut all_facts {"}, {"sha": "ac8670a513820f108bd62f29321c131904e90de0", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=3b276cbe044a528e5966a4dc729fdfd662724f8c", "patch": "@@ -37,6 +37,7 @@ pub(super) fn generate<'mir, 'tcx>(\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     location_table: &LocationTable,\n+    use_polonius: bool,\n ) {\n     debug!(\"liveness::generate\");\n \n@@ -46,7 +47,7 @@ pub(super) fn generate<'mir, 'tcx>(\n         &typeck.borrowck_context.constraints.outlives_constraints,\n     );\n     let live_locals = compute_live_locals(typeck.tcx(), &free_regions, &body);\n-    let facts_enabled = AllFacts::enabled(typeck.tcx());\n+    let facts_enabled = use_polonius || AllFacts::enabled(typeck.tcx());\n \n     let polonius_drop_used = if facts_enabled {\n         let mut drop_used = Vec::new();"}, {"sha": "fdbf95591c8b838fd1d4dd330d0bcb236d94b960", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b276cbe044a528e5966a4dc729fdfd662724f8c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3b276cbe044a528e5966a4dc729fdfd662724f8c", "patch": "@@ -136,6 +136,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     upvars: &[Upvar<'tcx>],\n+    use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let mut universe_causes = FxHashMap::default();\n@@ -187,7 +188,15 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut borrowck_context,\n         |mut cx| {\n             cx.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n-            liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n+            liveness::generate(\n+                &mut cx,\n+                body,\n+                elements,\n+                flow_inits,\n+                move_data,\n+                location_table,\n+                use_polonius,\n+            );\n \n             translate_outlives_facts(&mut cx);\n             let opaque_type_values = mem::take(&mut infcx.inner.borrow_mut().opaque_types);"}]}