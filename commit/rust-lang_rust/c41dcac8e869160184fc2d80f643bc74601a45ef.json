{"sha": "c41dcac8e869160184fc2d80f643bc74601a45ef", "node_id": "C_kwDOAAsO6NoAKGM0MWRjYWM4ZTg2OTE2MDE4NGZjMmQ4MGY2NDNiYzc0NjAxYTQ1ZWY", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-13T10:42:47Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-13T10:42:47Z"}, "message": "dead-code-lint: de-dup multiple unused assoc fns", "tree": {"sha": "72960db856ef92ccc695c49fb3fa1b86786e8372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72960db856ef92ccc695c49fb3fa1b86786e8372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41dcac8e869160184fc2d80f643bc74601a45ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQ33N4ACgkQZ6vxb7Ds\n2HAqZRAAqsSMLWd2Uogwkholh0IKYF0wdDIBKTDO35/KYJlvt7lr4t47AThQn6Qk\n805q+Wkwg++C/Wpw4gaZgqdzkBfyPZIXMJUtTpw5SYYnCaHucnVpYZ6OC1H07fKC\nnAz2eSHQkZzTnLIAYBxCPVyKUyjWlroIbqmoXmhIyhQo68uHsril6sJcZh6Awdkw\nxvsdmSORKYOjm/V/GjHtXB3vJVodlOl+tdejTKJ5drXCdsYtFXuX7ASfRWE8S5Sx\nOuFvUQ/cFuwkbqMPfrK4OnNr6jUpl76txWSKNah9kWJEdUeWbJ0RTloDTvtAcqyW\nlmpdnbIaUYinb5J2FRPbndhSPSBU2kYoBohkpwGRqRsIL1yFDSLv6zB3owOap3Rt\nnD4p7HM/SSpLVzetZQAFLDlckR3/GKYIjUzMkQMdJXalr433ceUaXcRl+ZAmfHOG\nP5lDmbASiu50+R3fhnjwWVN4MKN/gUY7d03kT1pLDucTB2cvaMiR62Ufd9VUYGhB\nRR+lHvkscju6M+ImQ0QlGhgZjkZqjJpfJrmozlaerNCxQ88mHUrEC0dQQDw59qwl\nqtAdqL/30qQpq7xELK6bGPj0A3vRIZ6aSGDciVxY6FampZg3CqWuY7EjKYfofzRq\nyJXlA0B7WhXAqYCvq91+LAlcs1k8W0MzPgPKdX7vNJfMs1TD5yA=\n=whMn\n-----END PGP SIGNATURE-----", "payload": "tree 72960db856ef92ccc695c49fb3fa1b86786e8372\nparent 03cf0e949fc1537f4a626eb0a925f23cb9010cb3\nauthor Ezra Shaw <ezrasure@outlook.com> 1681382567 +1200\ncommitter Ezra Shaw <ezrasure@outlook.com> 1681382567 +1200\n\ndead-code-lint: de-dup multiple unused assoc fns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41dcac8e869160184fc2d80f643bc74601a45ef", "html_url": "https://github.com/rust-lang/rust/commit/c41dcac8e869160184fc2d80f643bc74601a45ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41dcac8e869160184fc2d80f643bc74601a45ef/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03cf0e949fc1537f4a626eb0a925f23cb9010cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/03cf0e949fc1537f4a626eb0a925f23cb9010cb3", "html_url": "https://github.com/rust-lang/rust/commit/03cf0e949fc1537f4a626eb0a925f23cb9010cb3"}], "stats": {"total": 149, "additions": 77, "deletions": 72}, "files": [{"sha": "fc7755d3df80f59449a31149ffe06065d29a5bc4", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -712,12 +712,12 @@ impl<'tcx> DeadVisitor<'tcx> {\n \n         let parent_info = if let Some(parent_item) = parent_item {\n             let parent_descr = tcx.def_descr(parent_item.to_def_id());\n-            Some(ParentInfo {\n-                num,\n-                descr,\n-                parent_descr,\n-                span: tcx.def_ident_span(parent_item).unwrap(),\n-            })\n+            let span = if let DefKind::Impl { .. } = tcx.def_kind(parent_item) {\n+                tcx.def_span(parent_item)\n+            } else {\n+                tcx.def_ident_span(parent_item).unwrap()\n+            };\n+            Some(ParentInfo { num, descr, parent_descr, span })\n         } else {\n             None\n         };\n@@ -800,16 +800,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n     }\n \n     fn check_definition(&mut self, def_id: LocalDefId) {\n-        if self.live_symbols.contains(&def_id) {\n-            return;\n-        }\n-        if has_allow_dead_code_or_lang_attr(self.tcx, def_id) {\n-            return;\n-        }\n-        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n-            return\n-        };\n-        if name.as_str().starts_with('_') {\n+        if self.is_live_code(def_id) {\n             return;\n         }\n         match self.tcx.def_kind(def_id) {\n@@ -827,6 +818,18 @@ impl<'tcx> DeadVisitor<'tcx> {\n             _ => {}\n         }\n     }\n+\n+    fn is_live_code(&self, def_id: LocalDefId) -> bool {\n+        // if we cannot get a name for the item, then we just assume that it is\n+        // live. I mean, we can't really emit a lint.\n+        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n+            return true;\n+        };\n+\n+        self.live_symbols.contains(&def_id)\n+            || has_allow_dead_code_or_lang_attr(self.tcx, def_id)\n+            || name.as_str().starts_with('_')\n+    }\n }\n \n fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n@@ -837,9 +840,26 @@ fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n \n     for item in module_items.items() {\n         if let hir::ItemKind::Impl(impl_item) = tcx.hir().item(item).kind {\n+            let mut dead_items = Vec::new();\n             for item in impl_item.items {\n-                visitor.check_definition(item.id.owner_id.def_id);\n+                match item.kind {\n+                    hir::AssocItemKind::Const | hir::AssocItemKind::Type => {\n+                        visitor.check_definition(item.id.owner_id.def_id)\n+                    }\n+                    hir::AssocItemKind::Fn { .. } => {\n+                        let did = item.id.owner_id.def_id;\n+                        if !visitor.is_live_code(did) {\n+                            dead_items.push(did)\n+                        }\n+                    }\n+                }\n             }\n+            visitor.warn_multiple_dead_codes(\n+                &dead_items,\n+                \"used\",\n+                Some(item.owner_id.def_id),\n+                false,\n+            );\n             continue;\n         }\n "}, {"sha": "d75a8e2dd41a87468c8f6dd68d00560dd7a1342b", "filename": "tests/ui/lint/dead-code/issue-85255.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -11,8 +11,8 @@ struct Foo {\n struct Bar;\n \n impl Bar {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n pub(crate) struct Foo1 {\n@@ -23,8 +23,8 @@ pub(crate) struct Foo1 {\n pub(crate) struct Bar1;\n \n impl Bar1 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n pub(crate) struct Foo2 {\n@@ -35,8 +35,8 @@ pub(crate) struct Foo2 {\n pub(crate) struct Bar2;\n \n impl Bar2 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n "}, {"sha": "d981085a4fa5daca83e7be2845334e7b0ec5f72d", "filename": "tests/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -14,15 +14,13 @@ note: the lint level is defined here\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n-warning: method `a` is never used\n+warning: methods `a` and `b` are never used\n   --> $DIR/issue-85255.rs:14:8\n    |\n+LL | impl Bar {\n+   | -------- methods in this implementation\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:15:12\n-   |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n@@ -36,15 +34,13 @@ LL |     a: i32,\n LL |     pub b: i32,\n    |         ^\n \n-warning: method `a` is never used\n+warning: methods `a` and `b` are never used\n   --> $DIR/issue-85255.rs:26:8\n    |\n+LL | impl Bar1 {\n+   | --------- methods in this implementation\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:27:12\n-   |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n@@ -58,17 +54,15 @@ LL |     a: i32,\n LL |     pub b: i32,\n    |         ^\n \n-warning: method `a` is never used\n+warning: methods `a` and `b` are never used\n   --> $DIR/issue-85255.rs:38:8\n    |\n+LL | impl Bar2 {\n+   | --------- methods in this implementation\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:39:12\n-   |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: 9 warnings emitted\n+warning: 6 warnings emitted\n "}, {"sha": "5c68cf0e18b67011e4821b5c455cb561aa8a3651", "filename": "tests/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -13,6 +13,8 @@ LL | #![deny(dead_code)]\n error: method `foo` is never used\n   --> $DIR/lint-dead-code-3.rs:16:8\n    |\n+LL | impl Foo {\n+   | -------- method in this implementation\n LL |     fn foo(&self) {\n    |        ^^^\n "}, {"sha": "5b2b76b76ecd4ef78406f538c1ff05bb34a21d79", "filename": "tests/ui/lint/dead-code/lint-dead-code-6.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -2,17 +2,16 @@\n \n struct UnusedStruct; //~ ERROR struct `UnusedStruct` is never constructed\n impl UnusedStruct {\n-    fn unused_impl_fn_1() { //~ ERROR associated function `unused_impl_fn_1` is never used\n+    fn unused_impl_fn_1() {\n+        //~^ ERROR associated functions `unused_impl_fn_1`, `unused_impl_fn_2`, and `unused_impl_fn_3` are never used [dead_code]\n         println!(\"blah\");\n     }\n \n-    fn unused_impl_fn_2(var: i32) { //~ ERROR associated function `unused_impl_fn_2` is never used\n+    fn unused_impl_fn_2(var: i32) {\n         println!(\"foo {}\", var);\n     }\n \n-    fn unused_impl_fn_3( //~ ERROR associated function `unused_impl_fn_3` is never used\n-        var: i32,\n-    ) {\n+    fn unused_impl_fn_3(var: i32) {\n         println!(\"bar {}\", var);\n     }\n }"}, {"sha": "ce41100866ad9430cec5771fe764a9a516dd750f", "filename": "tests/ui/lint/dead-code/lint-dead-code-6.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -10,23 +10,19 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function `unused_impl_fn_1` is never used\n+error: associated functions `unused_impl_fn_1`, `unused_impl_fn_2`, and `unused_impl_fn_3` are never used\n   --> $DIR/lint-dead-code-6.rs:5:8\n    |\n+LL | impl UnusedStruct {\n+   | ----------------- associated functions in this implementation\n LL |     fn unused_impl_fn_1() {\n    |        ^^^^^^^^^^^^^^^^\n-\n-error: associated function `unused_impl_fn_2` is never used\n-  --> $DIR/lint-dead-code-6.rs:9:8\n-   |\n+...\n LL |     fn unused_impl_fn_2(var: i32) {\n    |        ^^^^^^^^^^^^^^^^\n-\n-error: associated function `unused_impl_fn_3` is never used\n-  --> $DIR/lint-dead-code-6.rs:13:8\n-   |\n-LL |     fn unused_impl_fn_3(\n+...\n+LL |     fn unused_impl_fn_3(var: i32) {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "9e3ad85390a80d536204d45923f5491eea64783e", "filename": "tests/ui/lint/dead-code/unused-assoc-fns.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -4,10 +4,9 @@ struct Foo;\n \n impl Foo {\n     fn one() {}\n-    //~^ ERROR associated function `one` is never used [dead_code]\n+    //~^ ERROR associated functions `one`, `two`, and `three` are never used [dead_code]\n \n     fn two(&self) {}\n-    //~^ ERROR method `two` is never used [dead_code]\n \n     // seperation between functions\n     // ...\n@@ -16,7 +15,6 @@ impl Foo {\n     fn used() {}\n \n     fn three(&self) {\n-    //~^ ERROR method `three` is never used [dead_code]\n         Foo::one();\n         // ...\n     }"}, {"sha": "71174a1c3ded1032ac5455f773fd48c268efe582", "filename": "tests/ui/lint/dead-code/unused-assoc-fns.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c41dcac8e869160184fc2d80f643bc74601a45ef/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr?ref=c41dcac8e869160184fc2d80f643bc74601a45ef", "patch": "@@ -1,8 +1,16 @@\n-error: associated function `one` is never used\n+error: associated functions `one`, `two`, and `three` are never used\n   --> $DIR/unused-assoc-fns.rs:6:8\n    |\n+LL | impl Foo {\n+   | -------- associated functions in this implementation\n LL |     fn one() {}\n    |        ^^^\n+...\n+LL |     fn two(&self) {}\n+   |        ^^^\n+...\n+LL |     fn three(&self) {\n+   |        ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-assoc-fns.rs:1:9\n@@ -11,17 +19,5 @@ LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n \n-error: method `two` is never used\n-  --> $DIR/unused-assoc-fns.rs:9:8\n-   |\n-LL |     fn two(&self) {}\n-   |        ^^^\n-\n-error: method `three` is never used\n-  --> $DIR/unused-assoc-fns.rs:18:8\n-   |\n-LL |     fn three(&self) {\n-   |        ^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n "}]}