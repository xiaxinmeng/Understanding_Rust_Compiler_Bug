{"sha": "4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOGRhOWNjZDUyOGQ0NjYzN2M4OGE0MGY2Y2RkMGQ2MzRjMGZiMjI=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-23T09:02:20Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-24T15:28:08Z"}, "message": "Reduce the amount of comments in call_inner", "tree": {"sha": "8c636455d5fc6b5856376c86764f4dcc9eaaabce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c636455d5fc6b5856376c86764f4dcc9eaaabce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "html_url": "https://github.com/rust-lang/rust/commit/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8eb5f33d55b507da687593bbb7042416d73058", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8eb5f33d55b507da687593bbb7042416d73058", "html_url": "https://github.com/rust-lang/rust/commit/2e8eb5f33d55b507da687593bbb7042416d73058"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "59cc6188045332e893f51262c3daeb94b1650e09", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "patch": "@@ -355,25 +355,16 @@ impl Once {\n         // performance difference really does not matter there, and\n         // SeqCst minimizes the chances of something going wrong.\n         let mut state_and_queue = self.state_and_queue.load(Ordering::SeqCst);\n-\n         loop {\n             match state_and_queue {\n-                // If we're complete, then there's nothing to do, we just\n-                // jettison out as we shouldn't run the closure.\n-                COMPLETE => return,\n-\n-                // If we're poisoned and we're not in a mode to ignore\n-                // poisoning, then we panic here to propagate the poison.\n+                COMPLETE => break,\n                 POISONED if !ignore_poisoning => {\n+                    // Panic to propagate the poison.\n                     panic!(\"Once instance has previously been poisoned\");\n                 }\n-\n-                // Otherwise if we see a poisoned or otherwise incomplete state\n-                // we will attempt to move ourselves into the RUNNING state. If\n-                // we succeed, then the queue of waiters starts at null (all 0\n-                // bits).\n                 POISONED |\n                 INCOMPLETE => {\n+                    // Try to register this thread as the one RUNNING.\n                     let old = self.state_and_queue.compare_and_swap(state_and_queue,\n                                                                     RUNNING,\n                                                                     Ordering::SeqCst);\n@@ -391,15 +382,11 @@ impl Once {\n                     // poisoned or not.\n                     init(state_and_queue == POISONED);\n                     waiter_queue.set_state_on_drop_to = COMPLETE;\n-                    return\n+                    break\n                 }\n-\n-                // All other values we find should correspond to the RUNNING\n-                // state with an encoded waiter list in the more significant\n-                // bits. We attempt to enqueue ourselves by moving us to the\n-                // head of the list and bail out if we ever see a state that's\n-                // not RUNNING.\n                 _ => {\n+                    // All other values must be RUNNING with possibly a\n+                    // pointer to the waiter queue in the more significant bits.\n                     assert!(state_and_queue & STATE_MASK == RUNNING);\n                     wait(&self.state_and_queue, state_and_queue);\n                     state_and_queue = self.state_and_queue.load(Ordering::SeqCst);"}]}