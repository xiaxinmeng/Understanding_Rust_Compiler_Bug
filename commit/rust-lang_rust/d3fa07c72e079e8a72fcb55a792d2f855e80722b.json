{"sha": "d3fa07c72e079e8a72fcb55a792d2f855e80722b", "node_id": "C_kwDOAAsO6NoAKGQzZmEwN2M3MmUwNzllOGE3MmZjYjU1YTc5MmQyZjg1NWU4MDcyMmI", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-14T02:22:09Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-15T16:14:02Z"}, "message": "Use LocalDefId directly in more places in wfcheck", "tree": {"sha": "46d293f606fc15ca8c8bd0b7b3e21c41ac951fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d293f606fc15ca8c8bd0b7b3e21c41ac951fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3fa07c72e079e8a72fcb55a792d2f855e80722b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fa07c72e079e8a72fcb55a792d2f855e80722b", "html_url": "https://github.com/rust-lang/rust/commit/d3fa07c72e079e8a72fcb55a792d2f855e80722b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3fa07c72e079e8a72fcb55a792d2f855e80722b/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c132de559ee904ec59d8305d0e9c4ef6d822b1", "html_url": "https://github.com/rust-lang/rust/commit/a7c132de559ee904ec59d8305d0e9c4ef6d822b1"}], "stats": {"total": 57, "additions": 22, "deletions": 35}, "files": [{"sha": "30aab38b1eb8522cd41e8689ca86e6f0ec4280d0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d3fa07c72e079e8a72fcb55a792d2f855e80722b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3fa07c72e079e8a72fcb55a792d2f855e80722b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d3fa07c72e079e8a72fcb55a792d2f855e80722b", "patch": "@@ -142,23 +142,23 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             }\n         }\n         hir::ItemKind::Fn(ref sig, ..) => {\n-            check_item_fn(tcx, item.hir_id(), item.ident, item.span, sig.decl);\n+            check_item_fn(tcx, item.def_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::Const(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod { items, .. } => {\n             for it in items.iter() {\n                 let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(decl, ..) => {\n-                        check_item_fn(tcx, it.hir_id(), it.ident, it.span, decl)\n+                        check_item_fn(tcx, it.def_id, it.ident, it.span, decl)\n                     }\n                     hir::ForeignItemKind::Static(ty, ..) => {\n-                        check_item_type(tcx, it.hir_id(), ty.span, true)\n+                        check_item_type(tcx, it.def_id, ty.span, true)\n                     }\n                     hir::ForeignItemKind::Type => (),\n                 }\n@@ -199,7 +199,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, trait_item.span),\n     };\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n-    check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n     let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n@@ -327,7 +327,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, impl_item.def_id, span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n@@ -437,13 +437,13 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n #[tracing::instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n fn check_associated_item(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    item_id: LocalDefId,\n     span: Span,\n     sig_if_method: Option<&hir::FnSig<'_>>,\n ) {\n-    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner())));\n+    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id)));\n     for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id(item_id));\n+        let item = fcx.tcx.associated_item(item_id);\n \n         let (mut implied_bounds, self_ty) = match item.container {\n             ty::TraitContainer(_) => (FxHashSet::default(), fcx.tcx.types.self_param),\n@@ -455,11 +455,7 @@ fn check_associated_item(\n         match item.kind {\n             ty::AssocKind::Const => {\n                 let ty = fcx.tcx.type_of(item.def_id);\n-                let ty = fcx.normalize_associated_types_in_wf(\n-                    span,\n-                    ty,\n-                    WellFormedLoc::Ty(item_id.expect_owner()),\n-                );\n+                let ty = fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                 fcx.register_wf_obligation(ty.into(), span, code.clone());\n             }\n             ty::AssocKind::Fn => {\n@@ -481,11 +477,8 @@ fn check_associated_item(\n                 }\n                 if item.defaultness.has_value() {\n                     let ty = fcx.tcx.type_of(item.def_id);\n-                    let ty = fcx.normalize_associated_types_in_wf(\n-                        span,\n-                        ty,\n-                        WellFormedLoc::Ty(item_id.expect_owner()),\n-                    );\n+                    let ty =\n+                        fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                     fcx.register_wf_obligation(ty.into(), span, code.clone());\n                 }\n             }\n@@ -496,14 +489,13 @@ fn check_associated_item(\n }\n \n fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n-    for_id(tcx, item.hir_id(), item.span)\n+    for_id(tcx, item.def_id, item.span)\n }\n \n-fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n-    let def_id = tcx.hir().local_def_id(id);\n+fn for_id(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> CheckWfFcxBuilder<'_> {\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n-        id,\n+        id: hir::HirId::make_owner(def_id),\n         span,\n         param_env: tcx.param_env(def_id),\n     }\n@@ -665,30 +657,25 @@ fn check_associated_type_bounds(fcx: &FnCtxt<'_, '_>, item: &ty::AssocItem, span\n \n fn check_item_fn(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    def_id: LocalDefId,\n     ident: Ident,\n     span: Span,\n     decl: &hir::FnDecl<'_>,\n ) {\n-    for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let def_id = tcx.hir().local_def_id(item_id);\n+    for_id(tcx, def_id, span).with_fcx(|fcx| {\n         let sig = tcx.fn_sig(def_id);\n         let mut implied_bounds = FxHashSet::default();\n         check_fn_or_method(fcx, ident.span, sig, decl, def_id.to_def_id(), &mut implied_bounds);\n         implied_bounds\n     })\n }\n \n-fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_foreign_ty: bool) {\n+fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_foreign_ty: bool) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx| {\n-        let ty = tcx.type_of(tcx.hir().local_def_id(item_id));\n-        let item_ty = fcx.normalize_associated_types_in_wf(\n-            ty_span,\n-            ty,\n-            WellFormedLoc::Ty(item_id.expect_owner()),\n-        );\n+        let ty = tcx.type_of(item_id);\n+        let item_ty = fcx.normalize_associated_types_in_wf(ty_span, ty, WellFormedLoc::Ty(item_id));\n \n         let mut forbid_unsized = true;\n         if allow_foreign_ty {\n@@ -701,7 +688,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_fo\n         fcx.register_wf_obligation(\n             item_ty.into(),\n             ty_span,\n-            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner()))),\n+            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id))),\n         );\n         if forbid_unsized {\n             fcx.register_bound("}]}