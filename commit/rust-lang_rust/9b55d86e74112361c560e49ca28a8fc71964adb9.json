{"sha": "9b55d86e74112361c560e49ca28a8fc71964adb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTVkODZlNzQxMTIzNjFjNTYwZTQ5Y2EyOGE4ZmM3MTk2NGFkYjk=", "commit": {"author": {"name": "Jeong YunWon", "email": "jeong@youknowone.org", "date": "2013-04-15T19:13:37Z"}, "committer": {"name": "Jeong YunWon", "email": "jeong@youknowone.org", "date": "2013-04-15T19:13:37Z"}, "message": "Prevent eval_const_expr_partial hides prior error in expr_cast arm.\n\nThis will help not to meet confusing errors.\nIn issue #5873, the error was \"expected constant expr for vector length: Can't cast str to int\".\nIt was originally \"expected constant expr for vector length: Non-constant path in constant expr\"\nThis patch make the original error to be printed.", "tree": {"sha": "e27f09fd87442222fdab5dd46a62268e6cde7d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27f09fd87442222fdab5dd46a62268e6cde7d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b55d86e74112361c560e49ca28a8fc71964adb9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b55d86e74112361c560e49ca28a8fc71964adb9", "html_url": "https://github.com/rust-lang/rust/commit/9b55d86e74112361c560e49ca28a8fc71964adb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b55d86e74112361c560e49ca28a8fc71964adb9/comments", "author": {"login": "youknowone", "id": 69878, "node_id": "MDQ6VXNlcjY5ODc4", "avatar_url": "https://avatars.githubusercontent.com/u/69878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youknowone", "html_url": "https://github.com/youknowone", "followers_url": "https://api.github.com/users/youknowone/followers", "following_url": "https://api.github.com/users/youknowone/following{/other_user}", "gists_url": "https://api.github.com/users/youknowone/gists{/gist_id}", "starred_url": "https://api.github.com/users/youknowone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youknowone/subscriptions", "organizations_url": "https://api.github.com/users/youknowone/orgs", "repos_url": "https://api.github.com/users/youknowone/repos", "events_url": "https://api.github.com/users/youknowone/events{/privacy}", "received_events_url": "https://api.github.com/users/youknowone/received_events", "type": "User", "site_admin": false}, "committer": {"login": "youknowone", "id": 69878, "node_id": "MDQ6VXNlcjY5ODc4", "avatar_url": "https://avatars.githubusercontent.com/u/69878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youknowone", "html_url": "https://github.com/youknowone", "followers_url": "https://api.github.com/users/youknowone/followers", "following_url": "https://api.github.com/users/youknowone/following{/other_user}", "gists_url": "https://api.github.com/users/youknowone/gists{/gist_id}", "starred_url": "https://api.github.com/users/youknowone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youknowone/subscriptions", "organizations_url": "https://api.github.com/users/youknowone/orgs", "repos_url": "https://api.github.com/users/youknowone/repos", "events_url": "https://api.github.com/users/youknowone/events{/privacy}", "received_events_url": "https://api.github.com/users/youknowone/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab13549372ca12406ed948f1cdbcd5fd9da2e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab13549372ca12406ed948f1cdbcd5fd9da2e0f", "html_url": "https://github.com/rust-lang/rust/commit/1ab13549372ca12406ed948f1cdbcd5fd9da2e0f"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "63122a82eafdfe3f3bcb7d3d95b461b1f3fd46e1", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9b55d86e74112361c560e49ca28a8fc71964adb9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b55d86e74112361c560e49ca28a8fc71964adb9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9b55d86e74112361c560e49ca28a8fc71964adb9", "patch": "@@ -371,32 +371,31 @@ pub fn eval_const_expr_partial(tcx: middle::ty::ctxt, e: @expr)\n       expr_cast(base, _) => {\n         let ety = ty::expr_ty(tcx, e);\n         let base = eval_const_expr_partial(tcx, base);\n-        match ty::get(ety).sty {\n-          ty::ty_float(_) => {\n-            match base {\n-              Ok(const_uint(u)) => Ok(const_float(u as f64)),\n-              Ok(const_int(i)) => Ok(const_float(i as f64)),\n-              Ok(const_float(_)) => base,\n-              _ => Err(~\"Can't cast float to str\")\n-            }\n-          }\n-          ty::ty_uint(_) => {\n-            match base {\n-              Ok(const_uint(_)) => base,\n-              Ok(const_int(i)) => Ok(const_uint(i as u64)),\n-              Ok(const_float(f)) => Ok(const_uint(f as u64)),\n-              _ => Err(~\"Can't cast str to uint\")\n-            }\n-          }\n-          ty::ty_int(_) | ty::ty_bool => {\n-            match base {\n-              Ok(const_uint(u)) => Ok(const_int(u as i64)),\n-              Ok(const_int(_)) => base,\n-              Ok(const_float(f)) => Ok(const_int(f as i64)),\n-              _ => Err(~\"Can't cast str to int\")\n+        match /*bad*/copy base {\n+            Err(_) => base,\n+            Ok(val) => {\n+                match ty::get(ety).sty {\n+                    ty::ty_float(_) => match val {\n+                        const_uint(u) => Ok(const_float(u as f64)),\n+                        const_int(i) => Ok(const_float(i as f64)),\n+                        const_float(_) => base,\n+                        _ => Err(~\"Can't cast float to str\"),\n+                    },\n+                    ty::ty_uint(_) => match val {\n+                        const_uint(_) => base,\n+                        const_int(i) => Ok(const_uint(i as u64)),\n+                        const_float(f) => Ok(const_uint(f as u64)),\n+                        _ => Err(~\"Can't cast str to uint\"),\n+                    },\n+                    ty::ty_int(_) | ty::ty_bool => match val {\n+                        const_uint(u) => Ok(const_int(u as i64)),\n+                        const_int(_) => base,\n+                        const_float(f) => Ok(const_int(f as i64)),\n+                        _ => Err(~\"Can't cast str to int\"),\n+                    },\n+                    _ => Err(~\"Can't cast this type\")\n+                }\n             }\n-          }\n-          _ => Err(~\"Can't cast this type\")\n         }\n       }\n       expr_path(_) => {"}]}