{"sha": "aa3e9703d180648af483a4d2304a9092debf365d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhM2U5NzAzZDE4MDY0OGFmNDgzYTRkMjMwNGE5MDkyZGViZjM2NWQ=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-02T18:17:58Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:36:33Z"}, "message": "Add clock_gettime shim", "tree": {"sha": "6ae31a2cb4fbb402e08b5a909e7ca65517815747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ae31a2cb4fbb402e08b5a909e7ca65517815747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3e9703d180648af483a4d2304a9092debf365d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3e9703d180648af483a4d2304a9092debf365d", "html_url": "https://github.com/rust-lang/rust/commit/aa3e9703d180648af483a4d2304a9092debf365d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3e9703d180648af483a4d2304a9092debf365d/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2776e465c2244f77ff69a128bf4131d7fb4fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2776e465c2244f77ff69a128bf4131d7fb4fab", "html_url": "https://github.com/rust-lang/rust/commit/6a2776e465c2244f77ff69a128bf4131d7fb4fab"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "8641a7cf38627203583be76f730690c0013e3fc5", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/aa3e9703d180648af483a4d2304a9092debf365d/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3e9703d180648af483a4d2304a9092debf365d/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=aa3e9703d180648af483a4d2304a9092debf365d", "patch": "@@ -507,16 +507,55 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n-            \"strlen\" => {\n-                let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let n = this.memory().read_c_str(ptr)?.len();\n-                this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n+            \"clock_gettime\" => {\n+                if !this.machine.communicate {\n+                    throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n+                } else {\n+                    let tcx = &{ this.tcx.tcx };\n+\n+                    let clk_id = this.read_scalar(args[0])?.to_i32()?;\n+\n+                    if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n+                        let einval = this.eval_libc(\"EINVAL\")?;\n+                        this.set_last_error(einval)?;\n+                        this.write_scalar(Scalar::from_int(-1i32, dest.layout.size), dest)?;\n+                    } else {\n+                        let tp = this.force_ptr(this.read_scalar(args[1])?.not_undef()?)?;\n+\n+                        let allocation = this.memory_mut().get_mut(tp.alloc_id)?;\n+\n+                        let duration = std::time::SystemTime::now()\n+                            .duration_since(std::time::SystemTime::UNIX_EPOCH)\n+                            .unwrap_or_else(|_| bug!(\"Clock went backwards\"));\n+\n+                        allocation.write_scalar(\n+                            tcx,\n+                            tp,\n+                            Scalar::from_u64(duration.as_secs()).into(),\n+                            Size::from_bits(64),\n+                        )?;\n+                        allocation.write_scalar(\n+                            tcx,\n+                            tp.offset(Size::from_bits(64), tcx)?,\n+                            Scalar::from_u64(duration.subsec_nanos() as u64).into(),\n+                            Size::from_bits(64),\n+                        )?;\n+\n+                        this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n+                    }\n+                }\n             }\n \n-            // math functions\n-            \"cbrtf\" | \"coshf\" | \"sinhf\" | \"tanf\" => {\n-                // FIXME: Using host floats.\n-                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+                \"strlen\" => {\n+                    let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                    let n = this.memory().read_c_str(ptr)?.len();\n+                    this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n+                }\n+\n+                // math functions\n+                \"cbrtf\" | \"coshf\" | \"sinhf\" | \"tanf\" => {\n+                    // FIXME: Using host floats.\n+                    let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let f = match link_name {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),"}, {"sha": "987a78fe1f058661a93371f6f3abc661b8377e0e", "filename": "tests/run-pass/clock.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa3e9703d180648af483a4d2304a9092debf365d/tests%2Frun-pass%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3e9703d180648af483a4d2304a9092debf365d/tests%2Frun-pass%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclock.rs?ref=aa3e9703d180648af483a4d2304a9092debf365d", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::time::SystemTime;\n+\n+fn main() {\n+   let _now = SystemTime::now();\n+}"}]}