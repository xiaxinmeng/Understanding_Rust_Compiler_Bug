{"sha": "dbec033e29417ab01bae5749b58f8866b300f005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWMwMzNlMjk0MTdhYjAxYmFlNTc0OWI1OGY4ODY2YjMwMGYwMDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T20:19:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-06T23:27:50Z"}, "message": "Change the data structures for tracking defaulted traits. In the tcx, we\nnow have a simple set of trait def-ids. During coherence, we use a\nseparate table to track the default impls for any given trait so that we\ncan report a nice error. This fixes various bugs in the metadata\nencoding that led to `ty::trait_has_default_impl` yielding the wrong\nvalues in the cross-crate case. (In particular, default impl def-ids\nwere not included in the list of all impl def-ids; I debated fixing just\nthat, but this approach seemed cleaner overall, since we usually treat\nthe \"defaulted\" bit on traits as being a property of the trait, and now\niterating over a list of impls doesn't intermingle default impls with\nnormal impls.)", "tree": {"sha": "8725f72a452dbfe0830e3eefb27d677d0386ab70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8725f72a452dbfe0830e3eefb27d677d0386ab70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbec033e29417ab01bae5749b58f8866b300f005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbec033e29417ab01bae5749b58f8866b300f005", "html_url": "https://github.com/rust-lang/rust/commit/dbec033e29417ab01bae5749b58f8866b300f005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbec033e29417ab01bae5749b58f8866b300f005/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "html_url": "https://github.com/rust-lang/rust/commit/4d716decb5d9944bc0d79cdc51b03e3af69bc59c"}], "stats": {"total": 114, "additions": 51, "deletions": 63}, "files": [{"sha": "081c64ecae88102920ea0bbaa03e0b4a57d16422", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -254,3 +254,5 @@ pub const tag_codemap: uint = 0xa1;\n pub const tag_codemap_filemap: uint = 0xa2;\n \n pub const tag_item_super_predicates: uint = 0xa3;\n+\n+pub const tag_defaulted_trait: uint = 0xa4;"}, {"sha": "ed5783c8dba661e4a1927964362abeb0b5e9a602", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -407,7 +407,7 @@ pub fn is_associated_type(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n     decoder::is_associated_type(&*cdata, def.node)\n }\n \n-pub fn is_default_trait(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::is_default_trait(&*cdata, def.node)\n+pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(trait_def_id.krate);\n+    decoder::is_defaulted_trait(&*cdata, trait_def_id.node)\n }"}, {"sha": "dbbc17c018a2fc92b2b0c235db4750ff8db44b93", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -1537,12 +1537,11 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n     }\n }\n \n-pub fn is_default_trait<'tcx>(cdata: Cmd, id: ast::NodeId) -> bool {\n-    let item_doc = lookup_item(id, cdata.data());\n-    match item_family(item_doc) {\n-        Family::DefaultImpl => true,\n-        _ => false\n-    }\n+pub fn is_defaulted_trait<'tcx>(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n+    let trait_doc = lookup_item(trait_id, cdata.data());\n+    assert!(item_family(trait_doc) == Family::Trait);\n+    let defaulted_doc = reader::get_doc(trait_doc, tag_defaulted_trait);\n+    reader::doc_as_u8(defaulted_doc) != 0\n }\n \n pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> {"}, {"sha": "08263eb8e6a03978478147d8ed97b3fd6c4f138a", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -1288,6 +1288,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         let trait_predicates = ty::lookup_predicates(tcx, def_id);\n         encode_unsafety(rbml_w, trait_def.unsafety);\n         encode_paren_sugar(rbml_w, trait_def.paren_sugar);\n+        encode_defaulted(rbml_w, ty::trait_has_default_impl(tcx, def_id));\n         encode_associated_type_names(rbml_w, &trait_def.associated_type_names);\n         encode_generics(rbml_w, ecx, &trait_def.generics, &trait_predicates, tag_item_generics);\n         encode_predicates(rbml_w, ecx, &ty::lookup_super_predicates(tcx, def_id),\n@@ -1660,6 +1661,11 @@ fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) {\n     rbml_w.wr_tagged_u8(tag_paren_sugar, byte);\n }\n \n+fn encode_defaulted(rbml_w: &mut Encoder, is_defaulted: bool) {\n+    let byte: u8 = if is_defaulted {1} else {0};\n+    rbml_w.wr_tagged_u8(tag_defaulted_trait, byte);\n+}\n+\n fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) {\n     rbml_w.start_tag(tag_associated_type_names);\n     for &name in names {"}, {"sha": "60a04417e028fef7a42120243fd91151492820d3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -757,8 +757,8 @@ pub struct ctxt<'tcx> {\n     /// Maps a trait onto a list of impls of that trait.\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n-    /// Maps a trait onto a list of *default* trait implementations\n-    default_trait_impls: RefCell<DefIdMap<ast::DefId>>,\n+    /// A set of traits that have a default impl\n+    traits_with_default_impls: RefCell<DefIdMap<()>>,\n \n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n@@ -2591,7 +2591,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         destructor_for_type: RefCell::new(DefIdMap()),\n         destructors: RefCell::new(DefIdSet()),\n         trait_impls: RefCell::new(DefIdMap()),\n-        default_trait_impls: RefCell::new(DefIdMap()),\n+        traits_with_default_impls: RefCell::new(DefIdMap()),\n         inherent_impls: RefCell::new(DefIdMap()),\n         impl_items: RefCell::new(DefIdMap()),\n         used_unsafe: RefCell::new(NodeSet()),\n@@ -5975,32 +5975,22 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n         || Rc::new(csearch::get_item_variances(&tcx.sess.cstore, item_id)))\n }\n \n-pub fn trait_default_impl(tcx: &ctxt, trait_def_id: DefId) -> Option<ast::DefId> {\n-    match tcx.default_trait_impls.borrow().get(&trait_def_id) {\n-        Some(id) => Some(*id),\n-        None => None\n-    }\n-}\n-\n pub fn trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) -> bool {\n+    populate_implementations_for_trait_if_necessary(tcx, trait_def_id);\n     match tcx.lang_items.to_builtin_kind(trait_def_id) {\n         Some(BoundSend) | Some(BoundSync) => true,\n-        _ => tcx.default_trait_impls.borrow().contains_key(&trait_def_id)\n+        _ => tcx.traits_with_default_impls.borrow().contains_key(&trait_def_id),\n     }\n }\n \n /// Records a trait-to-implementation mapping.\n-pub fn record_default_trait_implementation(tcx: &ctxt,\n-                                           trait_def_id: DefId,\n-                                           impl_def_id: DefId) {\n-\n+pub fn record_trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) {\n     // We're using the latest implementation found as the reference one.\n     // Duplicated implementations are caught and reported in the coherence\n     // step.\n-    tcx.default_trait_impls.borrow_mut().insert(trait_def_id, impl_def_id);\n+    tcx.traits_with_default_impls.borrow_mut().insert(trait_def_id, ());\n }\n \n-\n /// Records a trait-to-implementation mapping.\n pub fn record_trait_implementation(tcx: &ctxt,\n                                    trait_def_id: DefId,\n@@ -6031,8 +6021,7 @@ pub fn populate_implementations_for_type_if_necessary(tcx: &ctxt,\n     debug!(\"populate_implementations_for_type_if_necessary: searching for {:?}\", type_id);\n \n     let mut inherent_impls = Vec::new();\n-    csearch::each_implementation_for_type(&tcx.sess.cstore, type_id,\n-            |impl_def_id| {\n+    csearch::each_implementation_for_type(&tcx.sess.cstore, type_id, |impl_def_id| {\n         let impl_items = csearch::get_impl_items(&tcx.sess.cstore, impl_def_id);\n \n         // Record the trait->implementation mappings, if applicable.\n@@ -6078,27 +6067,20 @@ pub fn populate_implementations_for_trait_if_necessary(\n     if trait_id.krate == LOCAL_CRATE {\n         return\n     }\n+\n     if tcx.populated_external_traits.borrow().contains(&trait_id) {\n         return\n     }\n \n-    csearch::each_implementation_for_trait(&tcx.sess.cstore, trait_id,\n-            |implementation_def_id|{\n-        let impl_items = csearch::get_impl_items(&tcx.sess.cstore, implementation_def_id);\n+    if csearch::is_defaulted_trait(&tcx.sess.cstore, trait_id) {\n+        record_trait_has_default_impl(tcx, trait_id);\n+    }\n \n-        if csearch::is_default_trait(&tcx.sess.cstore, implementation_def_id) {\n-            record_default_trait_implementation(tcx, trait_id,\n-                                                implementation_def_id);\n-            tcx.populated_external_traits.borrow_mut().insert(trait_id);\n+    csearch::each_implementation_for_trait(&tcx.sess.cstore, trait_id, |implementation_def_id| {\n+        let impl_items = csearch::get_impl_items(&tcx.sess.cstore, implementation_def_id);\n \n-            // Nothing else to do for default trait implementations since\n-            // they are not allowed to have type parameters, methods, or any\n-            // other item that could be associated to a trait implementation.\n-            return;\n-        } else {\n-            // Record the trait->implementation mapping.\n-            record_trait_implementation(tcx, trait_id, implementation_def_id);\n-        }\n+        // Record the trait->implementation mapping.\n+        record_trait_implementation(tcx, trait_id, implementation_def_id);\n \n         // For any methods that use a default implementation, add them to\n         // the map. This is a bit unfortunate.\n@@ -6108,8 +6090,8 @@ pub fn populate_implementations_for_trait_if_necessary(\n                 MethodTraitItem(method) => {\n                     if let Some(source) = method.provided_source {\n                         tcx.provided_method_sources\n-                           .borrow_mut()\n-                           .insert(method_def_id, source);\n+                            .borrow_mut()\n+                            .insert(method_def_id, source);\n                     }\n                 }\n                 TypeTraitItem(_) => {}"}, {"sha": "466d00b348b94d33d029c7a34ecbb43b30f71030", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -20,10 +20,11 @@ use syntax::ast;\n use syntax::ast_util;\n use syntax::visit;\n use syntax::codemap::Span;\n+use util::nodemap::DefIdMap;\n use util::ppaux::Repr;\n \n pub fn check(tcx: &ty::ctxt) {\n-    let mut overlap = OverlapChecker { tcx: tcx };\n+    let mut overlap = OverlapChecker { tcx: tcx, default_impls: DefIdMap() };\n     overlap.check_for_overlapping_impls();\n \n     // this secondary walk specifically checks for impls of defaulted\n@@ -33,6 +34,9 @@ pub fn check(tcx: &ty::ctxt) {\n \n struct OverlapChecker<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>,\n+\n+    // maps from a trait def-id to an impl id\n+    default_impls: DefIdMap<ast::NodeId>,\n }\n \n impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n@@ -134,24 +138,19 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         match item.node {\n             ast::ItemDefaultImpl(_, _) => {\n+                // look for another default impl; note that due to the\n+                // general orphan/coherence rules, it must always be\n+                // in this crate.\n                 let impl_def_id = ast_util::local_def(item.id);\n-                match ty::impl_trait_ref(self.tcx, impl_def_id) {\n-                    Some(ref trait_ref) => {\n-                        match ty::trait_default_impl(self.tcx, trait_ref.def_id) {\n-                            Some(other_impl) if other_impl != impl_def_id => {\n-                                self.report_overlap_error(trait_ref.def_id,\n-                                                          other_impl,\n-                                                          impl_def_id);\n-                            }\n-                            Some(_) => {}\n-                            None => {\n-                                self.tcx.sess.bug(\n-                                          &format!(\"no default implementation recorded for `{:?}`\",\n-                                          item));\n-                            }\n-                        }\n+                let trait_ref = ty::impl_trait_ref(self.tcx, impl_def_id).unwrap();\n+                let prev_default_impl = self.default_impls.insert(trait_ref.def_id, item.id);\n+                match prev_default_impl {\n+                    Some(prev_id) => {\n+                        self.report_overlap_error(trait_ref.def_id,\n+                                                  impl_def_id,\n+                                                  ast_util::local_def(prev_id));\n                     }\n-                    _ => {}\n+                    None => { }\n                 }\n             }\n             _ => {}"}, {"sha": "5591281263d051551f1364c6031b98507dd75e93", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbec033e29417ab01bae5749b58f8866b300f005/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=dbec033e29417ab01bae5749b58f8866b300f005", "patch": "@@ -979,7 +979,7 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                                                            None,\n                                                            None);\n \n-            ty::record_default_trait_implementation(tcx, trait_ref.def_id, local_def(it.id))\n+            ty::record_trait_has_default_impl(tcx, trait_ref.def_id);\n         }\n         ast::ItemImpl(_, _,\n                       ref generics,"}]}