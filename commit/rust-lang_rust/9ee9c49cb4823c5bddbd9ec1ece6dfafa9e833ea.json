{"sha": "9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTljNDljYjQ4MjNjNWJkZGJkOWVjMWVjZTZkZmFmYTllODMzZWE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-07T16:54:08Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-08T23:26:43Z"}, "message": "introducing let-syntax\n\nThe let-syntax expander is different in that it doesn't apply\na mark to its token trees before expansion. This is used\nfor macro_rules, and it's because macro_rules is essentially\nMTWT's let-syntax. You don't want to mark before expand sees\nlet-syntax, because there's no \"after\" syntax to mark again.\n\nIn some sense, the cleaner approach might be to introduce a new\nAST node that macro_rules expands into; this would make it clearer\nthat the expansion of a macro is distinct from the addition of a\nnew macro binding.\n\nThis should work for now, though...", "tree": {"sha": "74a30492aa2aadaf28eb0d591d22fb89dd62ae9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a30492aa2aadaf28eb0d591d22fb89dd62ae9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "html_url": "https://github.com/rust-lang/rust/commit/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c2ff6d697fe7be2d4e3979b4dec9f86b969b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c2ff6d697fe7be2d4e3979b4dec9f86b969b69", "html_url": "https://github.com/rust-lang/rust/commit/92c2ff6d697fe7be2d4e3979b4dec9f86b969b69"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "2581ba51c2e107b1830a6a5fda3b82b971eda11c", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "patch": "@@ -13,7 +13,7 @@\n use lint::LintPassObject;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n+use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -57,6 +57,8 @@ impl Registry {\n             IdentTT(ext, _) => IdentTT(ext, Some(self.krate_span)),\n             ItemDecorator(ext) => ItemDecorator(ext),\n             ItemModifier(ext) => ItemModifier(ext),\n+            // there's probably a nicer way to signal this:\n+            LetSyntaxTT(_, _) => fail!(\"can't register a new LetSyntax!\"),\n         }));\n     }\n "}, {"sha": "a2a442f8b6aa756fa8ba51abd4d365808a6c41f3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "patch": "@@ -264,8 +264,15 @@ pub enum SyntaxExtension {\n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n     ///\n-    /// `macro_rules!` is an `IdentTT`.\n     IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n+\n+    /// An ident macro that has two properties:\n+    /// - it adds a macro definition to the environment, and\n+    /// - the definition it adds doesn't introduce any new\n+    ///   identifiers.\n+    ///\n+    /// `macro_rules!` is a LetSyntaxTT\n+    LetSyntaxTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n@@ -300,7 +307,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(\"macro_rules\"),\n-                            IdentTT(box BasicIdentMacroExpander {\n+                            LetSyntaxTT(box BasicIdentMacroExpander {\n                                 expander: ext::tt::macro_rules::add_new_extension,\n                                 span: None,\n                             },"}, {"sha": "709db52262d4bc344206765d11002d2a2a8d8279", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9ee9c49cb4823c5bddbd9ec1ece6dfafa9e833ea", "patch": "@@ -484,6 +484,24 @@ fn expand_item_mac(it: Gc<ast::Item>, fld: &mut MacroExpander)\n             let marked_tts = mark_tts(tts.as_slice(), fm);\n             expander.expand(fld.cx, it.span, it.ident, marked_tts)\n         }\n+        Some(&LetSyntaxTT(ref expander, span)) => {\n+            if it.ident.name == parse::token::special_idents::invalid.name {\n+                fld.cx.span_err(pth.span,\n+                                format!(\"macro {}! expects an ident argument\",\n+                                        extnamestr.get()).as_slice());\n+                return SmallVector::zero();\n+            }\n+            fld.cx.bt_push(ExpnInfo {\n+                call_site: it.span,\n+                callee: NameAndSpan {\n+                    name: extnamestr.get().to_string(),\n+                    format: MacroBang,\n+                    span: span\n+                }\n+            });\n+            // DON'T mark before expansion:\n+            expander.expand(fld.cx, it.span, it.ident, tts)\n+        }\n         _ => {\n             fld.cx.span_err(it.span,\n                             format!(\"{}! is not legal in item position\","}]}