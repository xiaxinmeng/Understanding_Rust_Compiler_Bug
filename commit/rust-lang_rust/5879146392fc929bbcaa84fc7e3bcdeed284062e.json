{"sha": "5879146392fc929bbcaa84fc7e3bcdeed284062e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NzkxNDYzOTJmYzkyOWJiY2FhODRmYzdlM2JjZGVlZDI4NDA2MmU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-08T18:25:01Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:29Z"}, "message": "Rename pretty_print_* to scan_* to follow naming in the paper\n\nThis is also easier to understand because the scan and print \"tasks\" are\nseparate, but previously were both called \"print\" or \"pretty print.\"", "tree": {"sha": "93a76c3817c3fe33d226c31b3540de8fd907f571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a76c3817c3fe33d226c31b3540de8fd907f571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5879146392fc929bbcaa84fc7e3bcdeed284062e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5879146392fc929bbcaa84fc7e3bcdeed284062e", "html_url": "https://github.com/rust-lang/rust/commit/5879146392fc929bbcaa84fc7e3bcdeed284062e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5879146392fc929bbcaa84fc7e3bcdeed284062e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4783d9eaa5488ad8ff2c49a17c14ab6f604e4e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4783d9eaa5488ad8ff2c49a17c14ab6f604e4e71", "html_url": "https://github.com/rust-lang/rust/commit/4783d9eaa5488ad8ff2c49a17c14ab6f604e4e71"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "10b94aff0efa7e6908479ca1a3c023c03a91a6c3", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5879146392fc929bbcaa84fc7e3bcdeed284062e/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5879146392fc929bbcaa84fc7e3bcdeed284062e/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=5879146392fc929bbcaa84fc7e3bcdeed284062e", "patch": "@@ -131,7 +131,7 @@\n //! it.\n //!\n //! In this implementation (following the paper, again) the SCAN process is the\n-//! methods called `Printer::pretty_print_*`, and the 'PRINT' process is the\n+//! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n use std::collections::VecDeque;\n@@ -310,14 +310,14 @@ impl Printer {\n         self.buf[self.right].token = t;\n     }\n \n-    fn pretty_print_eof(&mut self) {\n+    fn scan_eof(&mut self) {\n         if !self.scan_stack.is_empty() {\n             self.check_stack(0);\n             self.advance_left();\n         }\n     }\n \n-    fn pretty_print_begin(&mut self, b: BeginToken) {\n+    fn scan_begin(&mut self, b: BeginToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n@@ -331,7 +331,7 @@ impl Printer {\n         self.scan_push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n     }\n \n-    fn pretty_print_end(&mut self) {\n+    fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n             debug!(\"pp End/print Vec<{},{}>\", self.left, self.right);\n             self.print_end();\n@@ -342,7 +342,7 @@ impl Printer {\n         }\n     }\n \n-    fn pretty_print_break(&mut self, b: BreakToken) {\n+    fn scan_break(&mut self, b: BreakToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n@@ -358,7 +358,7 @@ impl Printer {\n         self.right_total += b.blank_space;\n     }\n \n-    fn pretty_print_string(&mut self, s: Cow<'static, str>, len: isize) {\n+    fn scan_string(&mut self, s: Cow<'static, str>, len: isize) {\n         if self.scan_stack.is_empty() {\n             debug!(\"pp String('{}')/print Vec<{},{}>\",\n                    s, self.left, self.right);\n@@ -594,7 +594,7 @@ impl Printer {\n \n     /// \"raw box\"\n     crate fn rbox(&mut self, indent: usize, b: Breaks) {\n-        self.pretty_print_begin(BeginToken {\n+        self.scan_begin(BeginToken {\n             offset: indent as isize,\n             breaks: b\n         })\n@@ -611,25 +611,25 @@ impl Printer {\n     }\n \n     pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.pretty_print_break(BreakToken {\n+        self.scan_break(BreakToken {\n             offset: off,\n             blank_space: n as isize\n         })\n     }\n \n     crate fn end(&mut self) {\n-        self.pretty_print_end()\n+        self.scan_end()\n     }\n \n     pub fn eof(mut self) -> String {\n-        self.pretty_print_eof();\n+        self.scan_eof();\n         self.out\n     }\n \n     pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n         let s = wrd.into();\n         let len = s.len() as isize;\n-        self.pretty_print_string(s, len)\n+        self.scan_string(s, len)\n     }\n \n     fn spaces(&mut self, n: usize) {"}]}