{"sha": "39c03fb65268e3331f381714c664a581a6e86b8c", "node_id": "C_kwDOAAsO6NoAKDM5YzAzZmI2NTI2OGUzMzMxZjM4MTcxNGM2NjRhNTgxYTZlODZiOGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T12:33:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T12:33:52Z"}, "message": "Auto merge of #112026 - saethlin:misaligned-addrof, r=pnkfelix\n\nDon't check for misaligned raw pointer derefs inside Rvalue::AddressOf\n\nFrom https://github.com/rust-lang/rust/pull/112026#issuecomment-1565686697:\n\nrustc 1.70 (stable next week) added a Mir pass to add pointer alignment checks in debug mode. Adding these checks caused some crates to break, but that was expected, since they contain broken code (https://github.com/rust-lang/rust/issues/111487) for tracking that.\n\nHowever, the checks added are slightly more aggressive than they should have been. Specifically, they also check the place in an `addr_of!` expression. Whether lack of alignment there is or isn't UB is unclear. This PR modifies the pass to not affect those cases.\n\nI spot checked the crater regressions and the ones I saw were not the case that this PR is modifying. It still seems good to not land anything overaggressive though", "tree": {"sha": "6bccf8406f5cd042d2bdc26408ef64825149a30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bccf8406f5cd042d2bdc26408ef64825149a30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39c03fb65268e3331f381714c664a581a6e86b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39c03fb65268e3331f381714c664a581a6e86b8c", "html_url": "https://github.com/rust-lang/rust/commit/39c03fb65268e3331f381714c664a581a6e86b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39c03fb65268e3331f381714c664a581a6e86b8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59d577838fb0449a2b59ec3525a7fa91509e861", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59d577838fb0449a2b59ec3525a7fa91509e861", "html_url": "https://github.com/rust-lang/rust/commit/f59d577838fb0449a2b59ec3525a7fa91509e861"}, {"sha": "783b1ce99c86106456329d7fc51c149bc27a282a", "url": "https://api.github.com/repos/rust-lang/rust/commits/783b1ce99c86106456329d7fc51c149bc27a282a", "html_url": "https://github.com/rust-lang/rust/commit/783b1ce99c86106456329d7fc51c149bc27a282a"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "1fe8ea0789286780a7684d16715c89e5ecb6aa6f", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39c03fb65268e3331f381714c664a581a6e86b8c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c03fb65268e3331f381714c664a581a6e86b8c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=39c03fb65268e3331f381714c664a581a6e86b8c", "patch": "@@ -75,6 +75,14 @@ struct PointerFinder<'tcx, 'a> {\n }\n \n impl<'tcx, 'a> Visitor<'tcx> for PointerFinder<'tcx, 'a> {\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        if let Rvalue::AddressOf(..) = rvalue {\n+            // Ignore dereferences inside of an AddressOf\n+            return;\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+\n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n         if let PlaceContext::NonUse(_) = context {\n             return;"}, {"sha": "892638bfb92bdba8507a4137faf4ceddd3707ac5", "filename": "tests/ui/mir/addrof_alignment.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39c03fb65268e3331f381714c664a581a6e86b8c/tests%2Fui%2Fmir%2Faddrof_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c03fb65268e3331f381714c664a581a6e86b8c/tests%2Fui%2Fmir%2Faddrof_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Faddrof_alignment.rs?ref=39c03fb65268e3331f381714c664a581a6e86b8c", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// ignore-wasm32-bare: No panic messages\n+// compile-flags: -C debug-assertions\n+\n+struct Misalignment {\n+    a: u32,\n+}\n+\n+fn main() {\n+    let items: [Misalignment; 2] = [Misalignment { a: 0 }, Misalignment { a: 1 }];\n+    unsafe {\n+        let ptr: *const Misalignment = items.as_ptr().cast::<u8>().add(1).cast::<Misalignment>();\n+        let _ptr = core::ptr::addr_of!((*ptr).a);\n+    }\n+}"}]}