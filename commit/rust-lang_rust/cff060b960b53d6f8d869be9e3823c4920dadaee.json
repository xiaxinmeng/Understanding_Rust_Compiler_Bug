{"sha": "cff060b960b53d6f8d869be9e3823c4920dadaee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjA2MGI5NjBiNTNkNmY4ZDg2OWJlOWUzODIzYzQ5MjBkYWRhZWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-03T15:58:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-16T13:53:27Z"}, "message": "Refactor `trait BitDenotation` to take `Location` instead of `BasicBlock`/`usize` argument pairs.", "tree": {"sha": "f83597b7f951eed7ffefed724df19bce6ceb627d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83597b7f951eed7ffefed724df19bce6ceb627d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff060b960b53d6f8d869be9e3823c4920dadaee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff060b960b53d6f8d869be9e3823c4920dadaee", "html_url": "https://github.com/rust-lang/rust/commit/cff060b960b53d6f8d869be9e3823c4920dadaee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff060b960b53d6f8d869be9e3823c4920dadaee/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e79fc72cb51246c397c2776fcede5401dcd3859", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e79fc72cb51246c397c2776fcede5401dcd3859", "html_url": "https://github.com/rust-lang/rust/commit/8e79fc72cb51246c397c2776fcede5401dcd3859"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "817abd8fadc59ad2473cbac0bdd029017d54d80a", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=cff060b960b53d6f8d869be9e3823c4920dadaee", "patch": "@@ -287,24 +287,22 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n \n     fn statement_effect(&self,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: mir::BasicBlock,\n-                        idx: usize)\n+                        location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: idx },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n \n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: mir::BasicBlock,\n-                         statements_len: usize)\n+                         location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: statements_len },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n@@ -344,24 +342,22 @@ impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> {\n \n     fn statement_effect(&self,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: mir::BasicBlock,\n-                        idx: usize)\n+                        location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: idx },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n \n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: mir::BasicBlock,\n-                         statements_len: usize)\n+                         location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: statements_len },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n@@ -400,24 +396,22 @@ impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> {\n \n     fn statement_effect(&self,\n                         sets: &mut BlockSets<MovePathIndex>,\n-                        bb: mir::BasicBlock,\n-                        idx: usize)\n+                        location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: idx },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n \n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<MovePathIndex>,\n-                         bb: mir::BasicBlock,\n-                         statements_len: usize)\n+                         location: Location)\n     {\n         drop_flag_effects_for_location(\n             self.tcx, self.mir, self.mdpe,\n-            Location { block: bb, statement_index: statements_len },\n+            location,\n             |path, s| Self::update_bits(sets, path, s)\n         )\n     }\n@@ -448,18 +442,16 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n     }\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<MoveOutIndex>,\n-                        bb: mir::BasicBlock,\n-                        idx: usize) {\n+                        location: Location) {\n         let (tcx, mir, move_data) = (self.tcx, self.mir, self.move_data());\n-        let stmt = &mir[bb].statements[idx];\n+        let stmt = &mir[location.block].statements[location.statement_index];\n         let loc_map = &move_data.loc_map;\n         let path_map = &move_data.path_map;\n         let rev_lookup = &move_data.rev_lookup;\n \n-        let loc = Location { block: bb, statement_index: idx };\n         debug!(\"stmt {:?} at loc {:?} moves out of move_indexes {:?}\",\n-               stmt, loc, &loc_map[loc]);\n-        for move_index in &loc_map[loc] {\n+               stmt, location, &loc_map[location]);\n+        for move_index in &loc_map[location] {\n             // Every path deinitialized by a *particular move*\n             // has corresponding bit, \"gen'ed\" (i.e. set)\n             // here, in dataflow vector\n@@ -506,17 +498,15 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n \n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<MoveOutIndex>,\n-                         bb: mir::BasicBlock,\n-                         statements_len: usize)\n+                         location: Location)\n     {\n         let (mir, move_data) = (self.mir, self.move_data());\n-        let term = mir[bb].terminator();\n+        let term = mir[location.block].terminator();\n         let loc_map = &move_data.loc_map;\n-        let loc = Location { block: bb, statement_index: statements_len };\n         debug!(\"terminator {:?} at loc {:?} moves out of move_indexes {:?}\",\n-               term, loc, &loc_map[loc]);\n+               term, location, &loc_map[location]);\n         let bits_per_block = self.bits_per_block();\n-        for move_index in &loc_map[loc] {\n+        for move_index in &loc_map[location] {\n             assert!(move_index.index() < bits_per_block);\n             zero_to_one(sets.gen_set.words_mut(), *move_index);\n         }"}, {"sha": "731799256abbe26a492480c437828af87ce6f56c", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=cff060b960b53d6f8d869be9e3823c4920dadaee", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n \n use rustc::ty::{TyCtxt};\n-use rustc::mir::{self, Mir};\n+use rustc::mir::{self, Mir, Location};\n \n use std::fmt::Debug;\n use std::io;\n@@ -98,12 +98,13 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n \n             let sets = &mut self.flow_state.sets.for_block(bb.index());\n             for j_stmt in 0..statements.len() {\n-                self.flow_state.operator.statement_effect(sets, bb, j_stmt);\n+                let location = Location { block: bb, statement_index: j_stmt };\n+                self.flow_state.operator.statement_effect(sets, location);\n             }\n \n             if terminator.is_some() {\n-                let stmts_len = statements.len();\n-                self.flow_state.operator.terminator_effect(sets, bb, stmts_len);\n+                let location = Location { block: bb, statement_index: statements.len() };\n+                self.flow_state.operator.terminator_effect(sets, location);\n             }\n         }\n     }\n@@ -341,8 +342,7 @@ pub trait BitDenotation {\n     /// the MIR.\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<Self::Idx>,\n-                        bb: mir::BasicBlock,\n-                        idx_stmt: usize);\n+                        location: Location);\n \n     /// Mutates the block-sets (the flow sets for the given\n     /// basic block) according to the effects of evaluating\n@@ -356,8 +356,7 @@ pub trait BitDenotation {\n     /// terminator took.\n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<Self::Idx>,\n-                         bb: mir::BasicBlock,\n-                         idx_term: usize);\n+                         location: Location);\n \n     /// Mutates the block-sets according to the (flow-dependent)\n     /// effect of a successful return from a Call terminator."}, {"sha": "ceff52409b2f0f53c35140d6399cf823b2bd764e", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff060b960b53d6f8d869be9e3823c4920dadaee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=cff060b960b53d6f8d869be9e3823c4920dadaee", "patch": "@@ -13,7 +13,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::{self, Mir};\n+use rustc::mir::{self, Mir, Location};\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -202,7 +202,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // reset GEN and KILL sets before emulating their effect.\n         for e in sets.gen_set.words_mut() { *e = 0; }\n         for e in sets.kill_set.words_mut() { *e = 0; }\n-        results.0.operator.statement_effect(&mut sets, bb, j);\n+        results.0.operator.statement_effect(&mut sets, Location { block: bb, statement_index: j });\n         sets.on_entry.union(sets.gen_set);\n         sets.on_entry.subtract(sets.kill_set);\n     }"}]}