{"sha": "a991d48e95911c0e94f47bda10cbb50200852ec2", "node_id": "C_kwDOAAsO6NoAKGE5OTFkNDhlOTU5MTFjMGU5NGY0N2JkYTEwY2JiNTAyMDA4NTJlYzI", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T00:58:38Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T02:37:02Z"}, "message": "Add Simd::cast", "tree": {"sha": "f8b88ed839094ab27aa49994c5e77938e7ee0faf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b88ed839094ab27aa49994c5e77938e7ee0faf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a991d48e95911c0e94f47bda10cbb50200852ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a991d48e95911c0e94f47bda10cbb50200852ec2", "html_url": "https://github.com/rust-lang/rust/commit/a991d48e95911c0e94f47bda10cbb50200852ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a991d48e95911c0e94f47bda10cbb50200852ec2/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b", "html_url": "https://github.com/rust-lang/rust/commit/cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "2291400537c9431fa0d292e0b43bb95c4ea4e52f", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a991d48e95911c0e94f47bda10cbb50200852ec2/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a991d48e95911c0e94f47bda10cbb50200852ec2/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=a991d48e95911c0e94f47bda10cbb50200852ec2", "patch": "@@ -39,6 +39,9 @@ extern \"platform-intrinsic\" {\n \n     /// fptoui/fptosi/uitofp/sitofp\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n+    /// follows Rust's `T as U` semantics, including saturating float casts\n+    /// which amounts to the same as `simd_cast` for many cases\n+    pub(crate) fn simd_as<T, U>(x: T) -> U;\n \n     /// neg/fneg\n     pub(crate) fn simd_neg<T>(x: T) -> T;"}, {"sha": "a9e99a18c2db5853142c41755db32790a0d517ce", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a991d48e95911c0e94f47bda10cbb50200852ec2/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a991d48e95911c0e94f47bda10cbb50200852ec2/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=a991d48e95911c0e94f47bda10cbb50200852ec2", "patch": "@@ -75,6 +75,35 @@ where\n         Self(array)\n     }\n \n+    /// Performs lanewise conversion of a SIMD vector's elements to another SIMD-valid type.\n+    /// This follows the semantics of Rust's `as` conversion for casting\n+    /// integers to unsigned integers (interpreting as the other type, so `-1` to `MAX`),\n+    /// and from floats to integers (truncating, or saturating at the limits) for each lane,\n+    /// or vice versa.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// let floats: Simd<f32, 4> = Simd::from_array([1.9, -4.5, f32::INFINITY, f32::NAN]);\n+    /// let ints = floats.cast::<i32>();\n+    /// assert_eq!(ints, Simd::from_array([1, -4, i32::MAX, 0]));\n+    ///\n+    /// // Formally equivalent, but `Simd::cast` can optimize better.\n+    /// assert_eq!(ints, Simd::from_array(floats.to_array().map(|x| x as i32)));\n+    ///\n+    /// // The float conversion does not round-trip.\n+    /// let floats_again = ints.cast();\n+    /// assert_ne!(floats, floats_again);\n+    /// assert_eq!(floats_again, Simd::from_array([1.0, -4.0, 2147483647.0, 0.0]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    pub fn cast<U: SimdElement>(self) -> Simd<U, LANES> {\n+        unsafe { intrinsics::simd_as(self) }\n+    }\n+\n     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.\n     /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n     ///"}]}