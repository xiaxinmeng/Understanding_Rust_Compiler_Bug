{"sha": "93ae993ec495233850720126deb0f6b6319645d9", "node_id": "C_kwDOAAsO6NoAKDkzYWU5OTNlYzQ5NTIzMzg1MDcyMDEyNmRlYjBmNmI2MzE5NjQ1ZDk", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-10-13T13:19:41Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2021-10-13T13:19:41Z"}, "message": "resolve `ControlFlow` ourself instead of hard coding.", "tree": {"sha": "238f414f2a070c5d06c3274fac21bdb5301ebdf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238f414f2a070c5d06c3274fac21bdb5301ebdf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ae993ec495233850720126deb0f6b6319645d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ae993ec495233850720126deb0f6b6319645d9", "html_url": "https://github.com/rust-lang/rust/commit/93ae993ec495233850720126deb0f6b6319645d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ae993ec495233850720126deb0f6b6319645d9/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5818358bbfffceee842055a5c857b3437d59ee88", "url": "https://api.github.com/repos/rust-lang/rust/commits/5818358bbfffceee842055a5c857b3437d59ee88", "html_url": "https://github.com/rust-lang/rust/commit/5818358bbfffceee842055a5c857b3437d59ee88"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "8ae0a4a10ad1530e629eefdcded6db9140a5a098", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/93ae993ec495233850720126deb0f6b6319645d9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ae993ec495233850720126deb0f6b6319645d9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=93ae993ec495233850720126deb0f6b6319645d9", "patch": "@@ -2,11 +2,17 @@ use std::{hash::BuildHasherDefault, iter};\n \n use ast::make;\n use either::Either;\n-use hir::{HirDisplay, InFile, Local, Semantics, TypeInfo};\n+use hir::{HirDisplay, InFile, Local, ModuleDef, Semantics, TypeInfo};\n use ide_db::{\n     defs::{Definition, NameRefClass},\n-    helpers::insert_use::{insert_use, ImportScope},\n-    helpers::node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n+    helpers::{\n+        insert_use::{insert_use, ImportScope},\n+        FamousDefs,\n+    },\n+    helpers::{\n+        mod_path_to_ast,\n+        node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n+    },\n     search::{FileReference, ReferenceCategory, SearchScope},\n     RootDatabase,\n };\n@@ -129,11 +135,20 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n                     ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n                 };\n \n-                insert_use(\n-                    &scope,\n-                    make::path_from_text(\"std::ops::ControlFlow\"),\n-                    &ctx.config.insert_use,\n-                );\n+                let control_flow_enum =\n+                    FamousDefs(&ctx.sema, Some(module.krate())).core_ops_ControlFlow();\n+\n+                if let Some(control_flow_enum) = control_flow_enum {\n+                    let mod_path = module.find_use_path_prefixed(\n+                        ctx.sema.db,\n+                        ModuleDef::from(control_flow_enum),\n+                        ctx.config.insert_use.prefix_kind,\n+                    );\n+\n+                    if let Some(mod_path) = mod_path {\n+                        insert_use(&scope, mod_path_to_ast(&mod_path), &ctx.config.insert_use);\n+                    }\n+                }\n             }\n \n             match ctx.config.snippet_cap {\n@@ -3304,6 +3319,7 @@ fn foo() {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: try\n fn foo() {\n     loop {\n         let mut n = 1;\n@@ -3315,7 +3331,7 @@ fn foo() {\n }\n \"#,\n             r#\"\n-use std::ops::ControlFlow;\n+use core::ops::ControlFlow;\n \n fn foo() {\n     loop {\n@@ -3342,6 +3358,7 @@ fn $0fun_name(n: &mut i32) -> ControlFlow<()> {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: try\n fn foo() {\n     loop {\n         let mut n = 1;\n@@ -3354,7 +3371,7 @@ fn foo() {\n }\n \"#,\n             r#\"\n-use std::ops::ControlFlow;\n+use core::ops::ControlFlow;\n \n fn foo() {\n     loop {"}, {"sha": "18524986e2d164826c589327579658deb89327b0", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ae993ec495233850720126deb0f6b6319645d9/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ae993ec495233850720126deb0f6b6319645d9/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=93ae993ec495233850720126deb0f6b6319645d9", "patch": "@@ -68,6 +68,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:ops:Deref\")\n     }\n \n+    pub fn core_ops_ControlFlow(&self) -> Option<Enum> {\n+        self.find_enum(\"core:ops:ControlFlow\")\n+    }\n+\n     pub fn alloc(&self) -> Option<Crate> {\n         self.find_crate(\"alloc\")\n     }"}]}