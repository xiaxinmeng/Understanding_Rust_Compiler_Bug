{"sha": "5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkY2Q0MDYxODgwYjNjZTllOTdhN2RjNjYzODM2MDU0MGJmNmQ0Zjc=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T05:11:59Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T05:11:59Z"}, "message": "Run rustfmt on liballoc.", "tree": {"sha": "087921e037fddabec0781f00ffb4ca20cb17b46c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087921e037fddabec0781f00ffb4ca20cb17b46c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "html_url": "https://github.com/rust-lang/rust/commit/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b3b27cf533e50424f749d1c1db23e5d8db952f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b27cf533e50424f749d1c1db23e5d8db952f", "html_url": "https://github.com/rust-lang/rust/commit/81b3b27cf533e50424f749d1c1db23e5d8db952f"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "8c12b9d94ba91428340b024ad36ea1a62940ccbd", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "patch": "@@ -307,9 +307,7 @@ impl<T: ?Sized> Arc<T> {\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);\n-            deallocate(ptr as *mut u8,\n-                       size_of_val(&*ptr),\n-                       align_of_val(&*ptr))\n+            deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n         }\n     }\n }\n@@ -722,11 +720,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n         // ref, which can only happen after the lock is released.\n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);\n-            unsafe {\n-                deallocate(ptr as *mut u8,\n-                           size_of_val(&*ptr),\n-                           align_of_val(&*ptr))\n-            }\n+            unsafe { deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr)) }\n         }\n     }\n }\n@@ -1152,5 +1146,7 @@ impl<T: ?Sized> borrow::Borrow<T> for Arc<T> {\n \n #[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]\n impl<T: ?Sized> AsRef<T> for Arc<T> {\n-    fn as_ref(&self) -> &T { &**self }\n+    fn as_ref(&self) -> &T {\n+        &**self\n+    }\n }"}, {"sha": "e85b7d2d4969fa6ee7ca8c8336289d0a9acb26aa", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "patch": "@@ -161,7 +161,12 @@ fn make_place<T>() -> IntermediateBox<T> {\n         p\n     };\n \n-    IntermediateBox { ptr: p, size: size, align: align, marker: marker::PhantomData }\n+    IntermediateBox {\n+        ptr: p,\n+        size: size,\n+        align: align,\n+        marker: marker::PhantomData,\n+    }\n }\n \n impl<T> BoxPlace<T> for IntermediateBox<T> {\n@@ -538,7 +543,10 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n impl<T: Clone> Clone for Box<[T]> {\n     fn clone(&self) -> Self {\n-        let mut new = BoxBuilder { data: RawVec::with_capacity(self.len()), len: 0 };\n+        let mut new = BoxBuilder {\n+            data: RawVec::with_capacity(self.len()),\n+            len: 0,\n+        };\n \n         let mut target = new.data.ptr();\n \n@@ -597,10 +605,14 @@ impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> {\n \n #[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]\n impl<T: ?Sized> AsRef<T> for Box<T> {\n-    fn as_ref(&self) -> &T { &**self }\n+    fn as_ref(&self) -> &T {\n+        &**self\n+    }\n }\n \n #[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]\n impl<T: ?Sized> AsMut<T> for Box<T> {\n-    fn as_mut(&mut self) -> &mut T { &mut **self }\n+    fn as_mut(&mut self) -> &mut T {\n+        &mut **self\n+    }\n }"}, {"sha": "4df3bacdcb6e6dfd587bbbbf87208e02cf92e6e5", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "patch": "@@ -65,7 +65,10 @@ impl<T> RawVec<T> {\n             };\n \n             // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n-            RawVec { ptr: Unique::new(heap::EMPTY as *mut T), cap: cap }\n+            RawVec {\n+                ptr: Unique::new(heap::EMPTY as *mut T),\n+                cap: cap,\n+            }\n         }\n     }\n \n@@ -102,7 +105,10 @@ impl<T> RawVec<T> {\n                 ptr\n             };\n \n-            RawVec { ptr: Unique::new(ptr as *mut _), cap: cap }\n+            RawVec {\n+                ptr: Unique::new(ptr as *mut _),\n+                cap: cap,\n+            }\n         }\n     }\n \n@@ -114,7 +120,10 @@ impl<T> RawVec<T> {\n     /// capacity cannot exceed `isize::MAX` (only a concern on 32-bit systems).\n     /// If the ptr and capacity come from a RawVec, then this is guaranteed.\n     pub unsafe fn from_raw_parts(ptr: *mut T, cap: usize) -> Self {\n-        RawVec { ptr: Unique::new(ptr), cap: cap }\n+        RawVec {\n+            ptr: Unique::new(ptr),\n+            cap: cap,\n+        }\n     }\n \n     /// Converts a `Box<[T]>` into a `RawVec<T>`.\n@@ -398,8 +407,7 @@ impl<T> RawVec<T> {\n         }\n \n         // This check is my waterloo; it's the only thing Vec wouldn't have to do.\n-        assert!(self.cap >= amount,\n-                \"Tried to shrink to a larger capacity\");\n+        assert!(self.cap >= amount, \"Tried to shrink to a larger capacity\");\n \n         if amount == 0 {\n             mem::replace(self, RawVec::new());"}, {"sha": "4753bb2379ac52ace04b93dcafde8c5602e05afe", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dcd4061880b3ce9e97a7dc6638360540bf6d4f7/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=5dcd4061880b3ce9e97a7dc6638360540bf6d4f7", "patch": "@@ -467,9 +467,7 @@ impl<T: ?Sized> Drop for Rc<T> {\n                     self.dec_weak();\n \n                     if self.weak() == 0 {\n-                        deallocate(ptr as *mut u8,\n-                                   size_of_val(&*ptr),\n-                                   align_of_val(&*ptr))\n+                        deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n                     }\n                 }\n             }\n@@ -788,9 +786,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n                 // the weak count starts at 1, and will only go to zero if all\n                 // the strong pointers have disappeared.\n                 if self.weak() == 0 {\n-                    deallocate(ptr as *mut u8,\n-                               size_of_val(&*ptr),\n-                               align_of_val(&*ptr))\n+                    deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n                 }\n             }\n         }\n@@ -1121,5 +1117,7 @@ impl<T: ?Sized> borrow::Borrow<T> for Rc<T> {\n \n #[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]\n impl<T: ?Sized> AsRef<T> for Rc<T> {\n-    fn as_ref(&self) -> &T { &**self }\n+    fn as_ref(&self) -> &T {\n+        &**self\n+    }\n }"}]}