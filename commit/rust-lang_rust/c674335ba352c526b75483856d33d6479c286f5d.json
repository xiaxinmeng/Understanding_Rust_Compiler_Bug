{"sha": "c674335ba352c526b75483856d33d6479c286f5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzQzMzViYTM1MmM1MjZiNzU0ODM4NTZkMzNkNjQ3OWMyODZmNWQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-03T12:40:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-03T12:40:37Z"}, "message": "Rollup merge of #55568 - durka:rustdoc-big-enum, r=nikomatsakis\n\ntest that rustdoc doesn't overflow on a big enum\n\nAdds a test to close #25295. The test case depended on `enum_primitive` so I just basically pulled its source into an auxiliary file, is that the right way to do it?", "tree": {"sha": "94c688232b4326d84ff7001b80d3ad66d51844ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c688232b4326d84ff7001b80d3ad66d51844ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c674335ba352c526b75483856d33d6479c286f5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb3ZdFCRBK7hj4Ov3rIwAAdHIIAA7YBgh8U9R/IJ1eSqA7sQAS\njwk3/+Oxa1ogd/v+65kT/DviTTtzULo5ePfsbPpWScD62J4sndmk+Ki7ShYugd8K\nIuYf+9Snamfeg38vpueqatNOOofV2r77CFXNBQu+QrFyKJrSiybP8V5FEx19i2PJ\nt3c13Dlf/IZ7jJZ08zOlah6NAJqCaPpSL9EPE0ddvGnmgjzzyPfvXSG9Tb+iBECu\n5iNPBnGcrBPd32f/oH4pu8/U7X2n20tr1EojxamcNtQ4iCiA+nuzreRhWu+XB74X\no6m1QmrcFau6Yw1k90t8b9pcbqVqGSA9N8NpnqDkF15bfPiWQiC9aaJi2BaBVBU=\n=6kK7\n-----END PGP SIGNATURE-----\n", "payload": "tree 94c688232b4326d84ff7001b80d3ad66d51844ca\nparent c5c6e4239f1e8043e87859b4cdac322172cc4f73\nparent 273930e59fff70b0e5b981a81e89b3007679bf66\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1541248837 +0100\ncommitter GitHub <noreply@github.com> 1541248837 +0100\n\nRollup merge of #55568 - durka:rustdoc-big-enum, r=nikomatsakis\n\ntest that rustdoc doesn't overflow on a big enum\n\nAdds a test to close #25295. The test case depended on `enum_primitive` so I just basically pulled its source into an auxiliary file, is that the right way to do it?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c674335ba352c526b75483856d33d6479c286f5d", "html_url": "https://github.com/rust-lang/rust/commit/c674335ba352c526b75483856d33d6479c286f5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c674335ba352c526b75483856d33d6479c286f5d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c6e4239f1e8043e87859b4cdac322172cc4f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c6e4239f1e8043e87859b4cdac322172cc4f73", "html_url": "https://github.com/rust-lang/rust/commit/c5c6e4239f1e8043e87859b4cdac322172cc4f73"}, {"sha": "273930e59fff70b0e5b981a81e89b3007679bf66", "url": "https://api.github.com/repos/rust-lang/rust/commits/273930e59fff70b0e5b981a81e89b3007679bf66", "html_url": "https://github.com/rust-lang/rust/commit/273930e59fff70b0e5b981a81e89b3007679bf66"}], "stats": {"total": 256, "additions": 256, "deletions": 0}, "files": [{"sha": "c265ae44f0dc0334d7b7ae8ae3e9d114ca029e04", "filename": "src/test/rustdoc/auxiliary/enum_primitive.rs", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/c674335ba352c526b75483856d33d6479c286f5d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c674335ba352c526b75483856d33d6479c286f5d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs?ref=c674335ba352c526b75483856d33d6479c286f5d", "patch": "@@ -0,0 +1,210 @@\n+// Copyright (c) 2015 Anders Kaseorg <andersk@mit.edu>\n+\n+// Permission is hereby granted, free of charge, to any person obtaining\n+// a copy of this software and associated documentation files (the\n+// \u201cSoftware\u201d), to deal in the Software without restriction, including\n+// without limitation the rights to use, copy, modify, merge, publish,\n+// distribute, sublicense, and/or sell copies of the Software, and to\n+// permit persons to whom the Software is furnished to do so, subject to\n+// the following conditions:\n+\n+// The above copyright notice and this permission notice shall be\n+// included in all copies or substantial portions of the Software.\n+\n+// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND,\n+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n+// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n+// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n+// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+\n+//! This crate exports a macro `enum_from_primitive!` that wraps an\n+//! `enum` declaration and automatically adds an implementation of\n+//! `num::FromPrimitive` (reexported here), to allow conversion from\n+//! primitive integers to the enum.  It therefore provides an\n+//! alternative to the built-in `#[derive(FromPrimitive)]`, which\n+//! requires the unstable `std::num::FromPrimitive` and is disabled in\n+//! Rust 1.0.\n+//!\n+//! # Example\n+//!\n+//! ```\n+//! #[macro_use] extern crate enum_primitive;\n+//! extern crate num_traits;\n+//! use num_traits::FromPrimitive;\n+//!\n+//! enum_from_primitive! {\n+//! #[derive(Debug, PartialEq)]\n+//! enum FooBar {\n+//!     Foo = 17,\n+//!     Bar = 42,\n+//!     Baz,\n+//! }\n+//! }\n+//!\n+//! fn main() {\n+//!     assert_eq!(FooBar::from_i32(17), Some(FooBar::Foo));\n+//!     assert_eq!(FooBar::from_i32(42), Some(FooBar::Bar));\n+//!     assert_eq!(FooBar::from_i32(43), Some(FooBar::Baz));\n+//!     assert_eq!(FooBar::from_i32(91), None);\n+//! }\n+//! ```\n+\n+\n+pub mod num_traits {\n+    pub trait FromPrimitive: Sized {\n+        fn from_i64(n: i64) -> Option<Self>;\n+        fn from_u64(n: u64) -> Option<Self>;\n+    }\n+}\n+\n+pub use std::option::Option;\n+pub use num_traits::FromPrimitive;\n+\n+/// Helper macro for internal use by `enum_from_primitive!`.\n+#[macro_export]\n+macro_rules! enum_from_primitive_impl_ty {\n+    ($meth:ident, $ty:ty, $name:ident, $( $variant:ident )*) => {\n+        #[allow(non_upper_case_globals, unused)]\n+        fn $meth(n: $ty) -> $crate::Option<Self> {\n+            $( if n == $name::$variant as $ty {\n+                $crate::Option::Some($name::$variant)\n+            } else )* {\n+                $crate::Option::None\n+            }\n+        }\n+    };\n+}\n+\n+/// Helper macro for internal use by `enum_from_primitive!`.\n+#[macro_export]\n+#[macro_use(enum_from_primitive_impl_ty)]\n+macro_rules! enum_from_primitive_impl {\n+    ($name:ident, $( $variant:ident )*) => {\n+        impl $crate::FromPrimitive for $name {\n+            enum_from_primitive_impl_ty! { from_i64, i64, $name, $( $variant )* }\n+            enum_from_primitive_impl_ty! { from_u64, u64, $name, $( $variant )* }\n+        }\n+    };\n+}\n+\n+/// Wrap this macro around an `enum` declaration to get an\n+/// automatically generated implementation of `num::FromPrimitive`.\n+#[macro_export]\n+#[macro_use(enum_from_primitive_impl)]\n+macro_rules! enum_from_primitive {\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),*\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*,\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),+,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),+,\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )+ }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),*\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*,\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),+,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),+,\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )+ }\n+    };\n+}\n+"}, {"sha": "37b0aca4b00caa1cd46b1472b4a767c0a340e623", "filename": "src/test/rustdoc/no-stack-overflow-25295.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c674335ba352c526b75483856d33d6479c286f5d/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c674335ba352c526b75483856d33d6479c286f5d/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs?ref=c674335ba352c526b75483856d33d6479c286f5d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ensure this code doesn't stack overflow\n+// aux-build:enum_primitive.rs\n+\n+#[macro_use] extern crate enum_primitive;\n+\n+enum_from_primitive! {\n+    pub enum Test {\n+        A1,A2,A3,A4,A5,A6,\n+        B1,B2,B3,B4,B5,B6,\n+        C1,C2,C3,C4,C5,C6,\n+        D1,D2,D3,D4,D5,D6,\n+        E1,E2,E3,E4,E5,E6,\n+        F1,F2,F3,F4,F5,F6,\n+        G1,G2,G3,G4,G5,G6,\n+        H1,H2,H3,H4,H5,H6,\n+        I1,I2,I3,I4,I5,I6,\n+        J1,J2,J3,J4,J5,J6,\n+        K1,K2,K3,K4,K5,K6,\n+        L1,L2,L3,L4,L5,L6,\n+        M1,M2,M3,M4,M5,M6,\n+        N1,N2,N3,N4,N5,N6,\n+        O1,O2,O3,O4,O5,O6,\n+        P1,P2,P3,P4,P5,P6,\n+        Q1,Q2,Q3,Q4,Q5,Q6,\n+        R1,R2,R3,R4,R5,R6,\n+        S1,S2,S3,S4,S5,S6,\n+        T1,T2,T3,T4,T5,T6,\n+        U1,U2,U3,U4,U5,U6,\n+        V1,V2,V3,V4,V5,V6,\n+        W1,W2,W3,W4,W5,W6,\n+        X1,X2,X3,X4,X5,X6,\n+        Y1,Y2,Y3,Y4,Y5,Y6,\n+        Z1,Z2,Z3,Z4,Z5,Z6,\n+    }\n+}\n+"}]}