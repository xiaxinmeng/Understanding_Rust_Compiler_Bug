{"sha": "dfa758f6a9146fbcb5109e7294d0a8e561c77913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTc1OGY2YTkxNDZmYmNiNTEwOWU3Mjk0ZDBhOGU1NjFjNzc5MTM=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-08-29T18:01:26Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-08-31T18:03:33Z"}, "message": "Add test", "tree": {"sha": "1f1a4bea1919f34ecd4c59f7519a390c6dcd6e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1a4bea1919f34ecd4c59f7519a390c6dcd6e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa758f6a9146fbcb5109e7294d0a8e561c77913", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1qtnYACgkQztOS3gxI\nPQBLJhAAudYHbjH4ZNf9aNzAmrLi6bWfFydrYzVo0dtybxg9VPxL1viODgOXbbeE\nNsVIFK0q/suOHGk5ZFhyoq++Ww+Q82suesdvBrlb0hgZ4fzAZpZHllSJperxIOhU\n6EssyNn0twwBNXrF8YkKHd8+VDHTZ0fg1zRGj0hKxla3pOxKXdpzH++u76Mu9aXd\n2R8Xr8UklZ/R3ypeKjm842tm/k4P+du/XUv9GhVZ+ha5TmIqJj+kpVde7lGUxHuv\n5QxwUUlO+MM7Z0OyMIG5zJPfRc/1+AYeVFWa51OfqZVJp1zDgNSA9uRdwgRjUych\nQJn6VSJ23gtrmPHoUSzqqh5s+uuqlk90kf5PuqFCUXFwlCRPuq9HhsphiNJHbNT+\njRNndmxs1yt98oka0/8rjloOWxmtFElVs0FTVrgfRPEbcAPV6ripmkIPWrfiKIUS\ngNlf+DKA1kmMmy2/OSJo1h5ZrTfRy+J6++meLd1lJUgAxTVUn+rDA+0hArH/BNfC\nAK3l0XGqHsucchOIE4Jw/4YOAcY5nYV7+p7OLUscfb75J7M8+oQTCe/UmvO7Bjs3\nCgRLewO+MIQvODKSd6VZtvHHkQfIwKucuJQeziC2XFPIstxFNjj+63kF8WHM8osI\nDepZNIk1wE7dRaUP6O9YxCO+UT1PFxe+A5RmE2S27qGOBnhZ5qA=\n=YO+b\n-----END PGP SIGNATURE-----", "payload": "tree 1f1a4bea1919f34ecd4c59f7519a390c6dcd6e95\nparent f5bea9051b81f3a490c08afdb336c63c9180aae0\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567101686 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567274613 +0800\n\nAdd test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa758f6a9146fbcb5109e7294d0a8e561c77913", "html_url": "https://github.com/rust-lang/rust/commit/dfa758f6a9146fbcb5109e7294d0a8e561c77913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa758f6a9146fbcb5109e7294d0a8e561c77913/comments", "author": null, "committer": null, "parents": [{"sha": "f5bea9051b81f3a490c08afdb336c63c9180aae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bea9051b81f3a490c08afdb336c63c9180aae0", "html_url": "https://github.com/rust-lang/rust/commit/f5bea9051b81f3a490c08afdb336c63c9180aae0"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "a8ee0ba28fd8c93896c1172af16977cbf6f62b42", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dfa758f6a9146fbcb5109e7294d0a8e561c77913/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa758f6a9146fbcb5109e7294d0a8e561c77913/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=dfa758f6a9146fbcb5109e7294d0a8e561c77913", "patch": "@@ -99,22 +99,22 @@ fn macro_rules_from_other_crates_are_visible() {\n fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     let map = def_map_with_crate_graph(\n         \"\n-        //- /main.rs      \n+        //- /main.rs\n         macro_rules! baz {\n             () => {\n-                use foo::bar;                \n+                use foo::bar;\n             }\n         }\n-        \n-        foo!();              \n+\n+        foo!();\n         bar!();\n         baz!();\n \n         //- /lib.rs\n         #[macro_export]\n         macro_rules! foo {\n             () => {\n-                struct Foo { field: u32 } \n+                struct Foo { field: u32 }\n             }\n         }\n         #[macro_export]\n@@ -137,3 +137,48 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n    \u22eefoo: m\n     \"###);\n }\n+\n+#[test]\n+fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[macro_use]\n+        extern crate foo;\n+\n+        structs!(Foo, Bar)\n+\n+        mod bar;\n+\n+        //- /bar.rs\n+        use crate::*;\n+\n+        //- /lib.rs\n+        #[macro_export]\n+        macro_rules! structs {\n+            ($($i:ident),*) => {\n+                $(struct $i { field: u32 } )*\n+            }\n+        }\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"foo\"]),\n+            \"foo\": (\"/lib.rs\", []),\n+        },\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22eefoo: t\n+   \u22eestructs: m\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22eefoo: t\n+   \u22eestructs: m\n+    \"###);\n+}"}]}