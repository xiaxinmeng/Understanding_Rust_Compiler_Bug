{"sha": "a20d1ad0cbcca13ee386fd819f33563b465f1185", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGQxYWQwY2JjY2ExM2VlMzg2ZmQ4MTlmMzM1NjNiNDY1ZjExODU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-04-01T23:37:40Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-04-01T23:37:40Z"}, "message": "Improve documentation for core::io.", "tree": {"sha": "659fbb2a1f595883c9aa03e41295bd1800af6573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659fbb2a1f595883c9aa03e41295bd1800af6573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20d1ad0cbcca13ee386fd819f33563b465f1185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20d1ad0cbcca13ee386fd819f33563b465f1185", "html_url": "https://github.com/rust-lang/rust/commit/a20d1ad0cbcca13ee386fd819f33563b465f1185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20d1ad0cbcca13ee386fd819f33563b465f1185/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc60788215afc61b3f5b5e57cf786478218b919e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc60788215afc61b3f5b5e57cf786478218b919e", "html_url": "https://github.com/rust-lang/rust/commit/dc60788215afc61b3f5b5e57cf786478218b919e"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "be3e10063148803192b1c32a84efde667dab2001", "filename": "src/libcore/io.rs", "status": "modified", "additions": 68, "deletions": 8, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a20d1ad0cbcca13ee386fd819f33563b465f1185/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20d1ad0cbcca13ee386fd819f33563b465f1185/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a20d1ad0cbcca13ee386fd819f33563b465f1185", "patch": "@@ -49,29 +49,89 @@ pub mod rustrt {\n \n // FIXME (#2004): This is all buffered. We might need an unbuffered variant\n // as well\n+/**\n+* The SeekStyle enum describes the relationship between the position\n+* we'd like to seek to from our current position. It's used as an argument\n+* to the `seek` method defined on the `Reader` trait.\n+*\n+* There are three seek styles:\n+* \n+* 1. `SeekSet` means that the new position should become our position.\n+* 2. `SeekCur` means that we should seek from the current position.\n+* 3. `SeekEnd` means that we should seek from the end.\n+*\n+* # Examples\n+* \n+* None right now. \n+*/\n pub enum SeekStyle { SeekSet, SeekEnd, SeekCur, }\n \n \n-/// The raw underlying reader trait. All readers must implement this.\n+/**\n+* The core Reader trait. All readers must implement this trait.\n+*\n+* # Examples\n+* \n+* None right now. \n+*/\n pub trait Reader {\n     // FIXME (#2004): Seekable really should be orthogonal.\n \n-    /// Read up to len bytes (or EOF) and put them into bytes (which\n-    /// must be at least len bytes long). Return number of bytes read.\n     // FIXME (#2982): This should probably return an error.\n+    /**\n+    * Reads bytes and puts them into `bytes`. Returns the number of\n+    * bytes read.\n+    *\n+    * The number of bytes to be read is `len` or the end of the file, \n+    * whichever comes first.\n+    *\n+    * The buffer must be at least `len` bytes long.\n+    *\n+    * # Examples\n+    * \n+    * None right now. \n+    */\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint;\n \n-    /// Read a single byte, returning a negative value for EOF or read error.\n+    /**\n+    * Reads a single byte.\n+    *\n+    * In the case of an EOF or an error, returns a negative value.\n+    *\n+    * # Examples\n+    * \n+    * None right now. \n+    */\n     fn read_byte(&self) -> int;\n \n-    /// Return whether the stream is currently at EOF position.\n+    /**\n+    * Returns a boolean value: are we currently at EOF?\n+    *\n+    * # Examples\n+    * \n+    * None right now. \n+    */\n     fn eof(&self) -> bool;\n \n-    /// Move the current position within the stream. The second parameter\n-    /// determines the position that the first parameter is relative to.\n+    /**\n+    * Seek to a given `position` in the stream.\n+    * \n+    * Takes an optional SeekStyle, which affects how we seek from the\n+    * position. See `SeekStyle` docs for more details.\n+    *\n+    * # Examples\n+    * \n+    * None right now. \n+    */\n     fn seek(&self, position: int, style: SeekStyle);\n \n-    /// Return the current position within the stream.\n+    /**\n+    * Returns the current position within the stream.\n+    *\n+    * # Examples\n+    * \n+    * None right now. \n+    */\n     fn tell(&self) -> uint;\n }\n "}]}