{"sha": "9c06e1ba47e1077725a950e0b5d1870a89c8b536", "node_id": "C_kwDOAAsO6NoAKDljMDZlMWJhNDdlMTA3NzcyNWE5NTBlMGI1ZDE4NzBhODljOGI1MzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-29T21:01:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-29T21:01:45Z"}, "message": "Auto merge of #95448 - Dylan-DPC:rollup-wpj5yto, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #93840 (Stabilize Termination and ExitCode)\n - #95256 (Ensure io::Error's bitpacked repr doesn't accidentally impl UnwindSafe)\n - #95386 (Suggest wrapping patterns in enum variants)\n - #95437 (diagnostics: regression test for derive bounds)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cbbd2f53a1af15c37af805341655f7a82be2962d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbd2f53a1af15c37af805341655f7a82be2962d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c06e1ba47e1077725a950e0b5d1870a89c8b536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c06e1ba47e1077725a950e0b5d1870a89c8b536", "html_url": "https://github.com/rust-lang/rust/commit/9c06e1ba47e1077725a950e0b5d1870a89c8b536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c06e1ba47e1077725a950e0b5d1870a89c8b536/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1d19d30723c287f049662474021f2b9a9894ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d19d30723c287f049662474021f2b9a9894ce", "html_url": "https://github.com/rust-lang/rust/commit/5e1d19d30723c287f049662474021f2b9a9894ce"}, {"sha": "24715028a078fe592b546870c33de68d16a9ca3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24715028a078fe592b546870c33de68d16a9ca3f", "html_url": "https://github.com/rust-lang/rust/commit/24715028a078fe592b546870c33de68d16a9ca3f"}], "stats": {"total": 427, "additions": 388, "deletions": 39}, "files": [{"sha": "6e007b181f2c2b1682c6a9d282edfbd12a578fbc", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -65,6 +65,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self,\n     error::TypeError,\n@@ -1736,6 +1737,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n \n             if should_suggest_fixes {\n+                self.suggest_tuple_pattern(cause, &exp_found, diag);\n                 self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                 self.suggest_accessing_field_where_appropriate(cause, &exp_found, diag);\n                 self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n@@ -1766,6 +1768,73 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.note_error_origin(diag, cause, exp_found, terr);\n     }\n \n+    fn suggest_tuple_pattern(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n+        diag: &mut Diagnostic,\n+    ) {\n+        // Heavily inspired by `FnCtxt::suggest_compatible_variants`, with\n+        // some modifications due to that being in typeck and this being in infer.\n+        if let ObligationCauseCode::Pattern { .. } = cause.code() {\n+            if let ty::Adt(expected_adt, substs) = exp_found.expected.kind() {\n+                let compatible_variants: Vec<_> = expected_adt\n+                    .variants()\n+                    .iter()\n+                    .filter(|variant| {\n+                        variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n+                    })\n+                    .filter_map(|variant| {\n+                        let sole_field = &variant.fields[0];\n+                        let sole_field_ty = sole_field.ty(self.tcx, substs);\n+                        if same_type_modulo_infer(sole_field_ty, exp_found.found) {\n+                            let variant_path =\n+                                with_no_trimmed_paths!(self.tcx.def_path_str(variant.def_id));\n+                            // FIXME #56861: DRYer prelude filtering\n+                            if let Some(path) = variant_path.strip_prefix(\"std::prelude::\") {\n+                                if let Some((_, path)) = path.split_once(\"::\") {\n+                                    return Some(path.to_string());\n+                                }\n+                            }\n+                            Some(variant_path)\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .collect();\n+                match &compatible_variants[..] {\n+                    [] => {}\n+                    [variant] => {\n+                        diag.multipart_suggestion_verbose(\n+                            &format!(\"try wrapping the pattern in `{}`\", variant),\n+                            vec![\n+                                (cause.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                                (cause.span.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    _ => {\n+                        // More than one matching variant.\n+                        diag.multipart_suggestions(\n+                            &format!(\n+                                \"try wrapping the pattern in a variant of `{}`\",\n+                                self.tcx.def_path_str(expected_adt.did())\n+                            ),\n+                            compatible_variants.into_iter().map(|variant| {\n+                                vec![\n+                                    (cause.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                                    (cause.span.shrink_to_hi(), \")\".to_string()),\n+                                ]\n+                            }),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         if let ty::Opaque(def_id, substs) = ty.kind() {\n             let future_trait = self.tcx.require_lang_item(LangItem::Future, None);"}, {"sha": "7f5ab8e4f42fa844ede6aa0a472d7d64b033bc9d", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -268,10 +268,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_ty: Ty<'tcx>,\n     ) {\n         if let ty::Adt(expected_adt, substs) = expected.kind() {\n-            if !expected_adt.is_enum() {\n-                return;\n-            }\n-\n             // If the expression is of type () and it's the return expression of a block,\n             // we suggest adding a separate return expression instead.\n             // (To avoid things like suggesting `Ok(while .. { .. })`.)\n@@ -336,7 +332,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let compatible_variants: Vec<String> = expected_adt\n                 .variants()\n                 .iter()\n-                .filter(|variant| variant.fields.len() == 1)\n+                .filter(|variant| {\n+                    variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n+                })\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);"}, {"sha": "208d5a80c5a699b98348e9ba1be84cadf5314921", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -104,6 +104,7 @@\n \n use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n use alloc::boxed::Box;\n+use core::marker::PhantomData;\n use core::mem::{align_of, size_of};\n use core::ptr::NonNull;\n \n@@ -114,8 +115,17 @@ const TAG_CUSTOM: usize = 0b01;\n const TAG_OS: usize = 0b10;\n const TAG_SIMPLE: usize = 0b11;\n \n+/// The internal representation.\n+///\n+/// See the module docs for more, this is just a way to hack in a check that we\n+/// indeed are not unwind-safe.\n+///\n+/// ```compile_fail,E0277\n+/// fn is_unwind_safe<T: core::panic::UnwindSafe>() {}\n+/// is_unwind_safe::<std::io::Error>();\n+/// ```\n #[repr(transparent)]\n-pub(super) struct Repr(NonNull<()>);\n+pub(super) struct Repr(NonNull<()>, PhantomData<ErrorData<Box<Custom>>>);\n \n // All the types `Repr` stores internally are Send + Sync, and so is it.\n unsafe impl Send for Repr {}\n@@ -145,7 +155,7 @@ impl Repr {\n         // box, and `TAG_CUSTOM` just... isn't zero -- it's `0b01`). Therefore,\n         // `TAG_CUSTOM + p` isn't zero and so `tagged` can't be, and the\n         // `new_unchecked` is safe.\n-        let res = Self(unsafe { NonNull::new_unchecked(tagged) });\n+        let res = Self(unsafe { NonNull::new_unchecked(tagged) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(matches!(res.data(), ErrorData::Custom(_)), \"repr(custom) encoding failed\");\n@@ -156,7 +166,7 @@ impl Repr {\n     pub(super) fn new_os(code: i32) -> Self {\n         let utagged = ((code as usize) << 32) | TAG_OS;\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -170,7 +180,7 @@ impl Repr {\n     pub(super) fn new_simple(kind: ErrorKind) -> Self {\n         let utagged = ((kind as usize) << 32) | TAG_SIMPLE;\n         // Safety: `TAG_SIMPLE` is not zero, so the result of the `|` is not 0.\n-        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) });\n+        let res = Self(unsafe { NonNull::new_unchecked(utagged as *mut ()) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n         // only run in libstd's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n@@ -184,7 +194,7 @@ impl Repr {\n     #[inline]\n     pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {\n         // Safety: References are never null.\n-        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) })\n+        Self(unsafe { NonNull::new_unchecked(m as *const _ as *mut ()) }, PhantomData)\n     }\n \n     #[inline]"}, {"sha": "d3c8d864b0c10841def9c5f9370b4cad6e0899ed", "filename": "library/std/src/process.rs", "status": "modified", "additions": 68, "deletions": 24, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -1417,6 +1417,15 @@ impl From<fs::File> for Stdio {\n /// For proper error reporting of failed processes, print the value of `ExitStatus` or\n /// `ExitStatusError` using their implementations of [`Display`](crate::fmt::Display).\n ///\n+/// # Differences from `ExitStatus`\n+///\n+/// `ExitCode` is intended for terminating the currently running process, via\n+/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n+/// termination of a child process. These APIs are separate due to platform\n+/// compatibility differences and their expected usage; it is not generally\n+/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// process after the fact.\n+///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n //\n@@ -1649,8 +1658,16 @@ impl fmt::Display for ExitStatusError {\n #[unstable(feature = \"exit_status_error\", issue = \"84908\")]\n impl crate::error::Error for ExitStatusError {}\n \n-/// This type represents the status code a process can return to its\n-/// parent under normal termination.\n+/// This type represents the status code the current process can return\n+/// to its parent under normal termination.\n+///\n+/// `ExitCode` is intended to be consumed only by the standard library (via\n+/// [`Termination::report()`]), and intentionally does not provide accessors like\n+/// `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the\n+/// canonical `SUCCESS` and `FAILURE` exit codes as well as `From<u8> for\n+/// ExitCode` for constructing other arbitrary exit codes.\n+///\n+/// # Portability\n ///\n /// Numeric values used in this type don't have portable meanings, and\n /// different platforms may mask different amounts of them.\n@@ -1661,52 +1678,78 @@ impl crate::error::Error for ExitStatusError {}\n /// [`SUCCESS`]: ExitCode::SUCCESS\n /// [`FAILURE`]: ExitCode::FAILURE\n ///\n-/// **Warning**: While various forms of this were discussed in [RFC #1937],\n-/// it was ultimately cut from that RFC, and thus this type is more subject\n-/// to change even than the usual unstable item churn.\n+/// # Differences from `ExitStatus`\n+///\n+/// `ExitCode` is intended for terminating the currently running process, via\n+/// the `Termination` trait, in contrast to [`ExitStatus`], which represents the\n+/// termination of a child process. These APIs are separate due to platform\n+/// compatibility differences and their expected usage; it is not generally\n+/// possible to exactly reproduce an ExitStatus from a child for the current\n+/// process after the fact.\n+///\n+/// # Examples\n+///\n+/// `ExitCode` can be returned from the `main` function of a crate, as it implements\n+/// [`Termination`]:\n+///\n+/// ```\n+/// use std::process::ExitCode;\n+/// # fn check_foo() -> bool { true }\n ///\n-/// [RFC #1937]: https://github.com/rust-lang/rfcs/pull/1937\n+/// fn main() -> ExitCode {\n+///     if !check_foo() {\n+///         return ExitCode::from(42);\n+///     }\n+///\n+///     ExitCode::SUCCESS\n+/// }\n+/// ```\n #[derive(Clone, Copy, Debug)]\n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl ExitCode {\n-    /// The canonical ExitCode for successful termination on this platform.\n+    /// The canonical `ExitCode` for successful termination on this platform.\n     ///\n     /// Note that a `()`-returning `main` implicitly results in a successful\n     /// termination, so there's no need to return this from `main` unless\n     /// you're also returning other possible codes.\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n     pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n \n-    /// The canonical ExitCode for unsuccessful termination on this platform.\n+    /// The canonical `ExitCode` for unsuccessful termination on this platform.\n     ///\n     /// If you're only returning this and `SUCCESS` from `main`, consider\n     /// instead returning `Err(_)` and `Ok(())` respectively, which will\n     /// return the same codes (but will also `eprintln!` the error).\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n     pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n }\n \n impl ExitCode {\n-    // This should not be stabilized when stabilizing ExitCode, we don't know that i32 will serve\n+    // This is private/perma-unstable because ExitCode is opaque; we don't know that i32 will serve\n     // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n     // likely want to isolate users anything that could restrict the platform specific\n     // representation of an ExitCode\n     //\n     // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n-    /// Convert an ExitCode into an i32\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    /// Convert an `ExitCode` into an i32\n+    #[unstable(\n+        feature = \"process_exitcode_internals\",\n+        reason = \"exposed only for libstd\",\n+        issue = \"none\"\n+    )]\n     #[inline]\n+    #[doc(hidden)]\n     pub fn to_i32(self) -> i32 {\n         self.0.as_i32()\n     }\n }\n \n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+#[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl From<u8> for ExitCode {\n-    /// Construct an exit code from an arbitrary u8 value.\n+    /// Construct an `ExitCode` from an arbitrary u8 value.\n     fn from(code: u8) -> Self {\n         ExitCode(imp::ExitCode::from(code))\n     }\n@@ -2049,26 +2092,27 @@ pub fn id() -> u32 {\n /// standard library's runtime for convenience. Other runtimes are not required\n /// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n #[rustc_on_unimplemented(\n     message = \"`main` has invalid return type `{Self}`\",\n     label = \"`main` can only return types that implement `{Termination}`\"\n )]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system.\n+    #[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n     fn report(self) -> ExitCode;\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for () {\n     #[inline]\n     fn report(self) -> ExitCode {\n         ExitCode::SUCCESS.report()\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<(), E> {\n     fn report(self) -> ExitCode {\n         match self {\n@@ -2078,14 +2122,14 @@ impl<E: fmt::Debug> Termination for Result<(), E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for ! {\n     fn report(self) -> ExitCode {\n         self\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n@@ -2094,15 +2138,15 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl<E: fmt::Debug> Termination for Result<Infallible, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n         Err::<!, _>(err).report()\n     }\n }\n \n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[stable(feature = \"termination_trait_lib\", since = \"1.60.0\")]\n impl Termination for ExitCode {\n     #[inline]\n     fn report(self) -> ExitCode {"}, {"sha": "889f7cb9db9419494b1d6999e73d64868289940f", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -19,8 +19,7 @@\n #![feature(bench_black_box)]\n #![feature(internal_output_capture)]\n #![feature(staged_api)]\n-#![feature(termination_trait_lib)]\n-#![feature(process_exitcode_placeholder)]\n+#![feature(process_exitcode_internals)]\n #![feature(test)]\n #![feature(total_cmp)]\n "}, {"sha": "09e12dab2d3fc6533f48419777c03aa47333974b", "filename": "src/test/ui/did_you_mean/compatible-variants-in-pat.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -0,0 +1,41 @@\n+enum Foo {\n+    Bar(Bar),\n+}\n+struct Bar {\n+    x: i32,\n+}\n+\n+fn a(f: Foo) {\n+    match f {\n+        Bar { x } => {\n+            //~^ ERROR mismatched types\n+            //~| HELP try wrapping\n+        }\n+    }\n+}\n+\n+struct S;\n+\n+fn b(s: Option<S>) {\n+    match s {\n+        S => {\n+            //~^ ERROR mismatched types\n+            //~| HELP try wrapping\n+            //~| HELP introduce a new binding instead\n+        }\n+        _ => {}\n+    }\n+}\n+\n+fn c(s: Result<S, S>) {\n+    match s {\n+        S => {\n+            //~^ ERROR mismatched types\n+            //~| HELP try wrapping\n+            //~| HELP introduce a new binding instead\n+        }\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a4c77e08efe1996908742b9489997610cb76ec2b", "filename": "src/test/ui/did_you_mean/compatible-variants-in-pat.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -0,0 +1,68 @@\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants-in-pat.rs:10:9\n+   |\n+LL |     match f {\n+   |           - this expression has type `Foo`\n+LL |         Bar { x } => {\n+   |         ^^^^^^^^^ expected enum `Foo`, found struct `Bar`\n+   |\n+help: try wrapping the pattern in `Foo::Bar`\n+   |\n+LL |         Foo::Bar(Bar { x }) => {\n+   |         +++++++++         +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants-in-pat.rs:21:9\n+   |\n+LL | struct S;\n+   | --------- unit struct defined here\n+...\n+LL |     match s {\n+   |           - this expression has type `Option<S>`\n+LL |         S => {\n+   |         ^\n+   |         |\n+   |         expected enum `Option`, found struct `S`\n+   |         `S` is interpreted as a unit struct, not a new binding\n+   |\n+   = note: expected enum `Option<S>`\n+            found struct `S`\n+help: try wrapping the pattern in `Some`\n+   |\n+LL |         Some(S) => {\n+   |         +++++ +\n+help: introduce a new binding instead\n+   |\n+LL |         other_s => {\n+   |         ~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants-in-pat.rs:32:9\n+   |\n+LL | struct S;\n+   | --------- unit struct defined here\n+...\n+LL |     match s {\n+   |           - this expression has type `Result<S, S>`\n+LL |         S => {\n+   |         ^\n+   |         |\n+   |         expected enum `Result`, found struct `S`\n+   |         `S` is interpreted as a unit struct, not a new binding\n+   |\n+   = note: expected enum `Result<S, S>`\n+            found struct `S`\n+help: try wrapping the pattern in a variant of `Result`\n+   |\n+LL |         Ok(S) => {\n+   |         +++ +\n+LL |         Err(S) => {\n+   |         ++++ +\n+help: introduce a new binding instead\n+   |\n+LL |         other_s => {\n+   |         ~~~~~~~\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5d7c611980f1c8165bdc2a2e4daa3206d487eb0d", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -64,3 +64,27 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| HELP try wrapping\n }\n+\n+enum A {\n+    B { b: B},\n+}\n+\n+struct A2(B);\n+\n+enum B {\n+    Fst,\n+    Snd,\n+}\n+\n+fn foo() {\n+    // We don't want to suggest `A::B(B::Fst)` here.\n+    let a: A = B::Fst;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() {\n+    // But we _do_ want to suggest `A2(B::Fst)` here!\n+    let a: A2 = B::Fst;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+}"}, {"sha": "a8cb5d6d3e8491495bd3bb681f90a35899931e4f", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -190,6 +190,27 @@ help: try wrapping the expression in `Some`\n LL |     let _ = Foo { bar: Some(bar) };\n    |                   ++++++++++   +\n \n-error: aborting due to 11 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:81:16\n+   |\n+LL |     let a: A = B::Fst;\n+   |            -   ^^^^^^ expected enum `A`, found enum `B`\n+   |            |\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:87:17\n+   |\n+LL |     let a: A2 = B::Fst;\n+   |            --   ^^^^^^ expected struct `A2`, found enum `B`\n+   |            |\n+   |            expected due to this\n+   |\n+help: try wrapping the expression in `A2`\n+   |\n+LL |     let a: A2 = A2(B::Fst);\n+   |                 +++      +\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b027eba2c25ea43ed1b2f456669847b6b45b989", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -8,6 +8,10 @@ LL |     Some(k) => match k {\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n+help: try wrapping the pattern in `Ok`\n+   |\n+LL |     Ok(Some(k)) => match k {\n+   |     +++       +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n@@ -20,6 +24,10 @@ LL |     None => ()\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n+help: try wrapping the pattern in `Ok`\n+   |\n+LL |     Ok(None) => ()\n+   |     +++    +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29ba44f136afa48b41a334d4cc87088b63df1819", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -8,6 +8,10 @@ LL |         Err(_) => ()\n    |\n    = note: expected enum `Option<_>`\n               found enum `Result<_, _>`\n+help: try wrapping the pattern in `Some`\n+   |\n+LL |         Some(Err(_)) => ()\n+   |         +++++      +\n \n error: aborting due to previous error\n "}, {"sha": "9d5b8d9d3fc1b9f08ba4566a337fc8ce5a3cdb85", "filename": "src/test/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -8,6 +8,10 @@ LL |         Either::Right(_) => {}\n    |\n    = note: expected struct `S`\n                 found enum `Either<_, _>`\n+help: try wrapping the pattern in `S`\n+   |\n+LL |         S(Either::Right(_)) => {}\n+   |         ++                +\n help: you might have meant to use field `0` whose type is `Either<usize, usize>`\n    |\n LL |     match S(Either::Left(5)).0 {"}, {"sha": "6d4c1562053b659f5ecbd9fdc22abea81f458cff", "filename": "src/test/ui/rfcs/rfc-1937-termination-trait/termination-trait-for-exitcode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-exitcode.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(process_exitcode_placeholder)]\n \n use std::process::ExitCode;\n "}, {"sha": "c06a135dcbc203b0b32c58b3425cbf3765f56d6d", "filename": "src/test/ui/rfcs/rfc-1937-termination-trait/termination-trait-for-impl-termination.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -1,4 +1,3 @@\n // run-pass\n-#![feature(termination_trait_lib)]\n \n fn main() -> impl std::process::Termination { }"}, {"sha": "f07784d53b3a38471474abe4816f4f6cf0b95d2c", "filename": "src/test/ui/suggestions/derive-clone-for-eq.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.fixed?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/79076\n+\n+use std::cmp::PartialEq;\n+\n+#[derive(Clone, Eq)] //~ ERROR [E0277]\n+pub struct Struct<T: std::clone::Clone>(T);\n+\n+impl<T: Clone, U> PartialEq<U> for Struct<T>\n+where\n+    U: Into<Struct<T>> + Clone\n+{\n+    fn eq(&self, _other: &U) -> bool {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "15c0d4659fbbe0c470580b09ea273c1288101bc9", "filename": "src/test/ui/suggestions/derive-clone-for-eq.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.rs?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/79076\n+\n+use std::cmp::PartialEq;\n+\n+#[derive(Clone, Eq)] //~ ERROR [E0277]\n+pub struct Struct<T>(T);\n+\n+impl<T: Clone, U> PartialEq<U> for Struct<T>\n+where\n+    U: Into<Struct<T>> + Clone\n+{\n+    fn eq(&self, _other: &U) -> bool {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "55a23c031d5bcb9a1a6f1790a3fb452e71fe07db", "filename": "src/test/ui/suggestions/derive-clone-for-eq.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c06e1ba47e1077725a950e0b5d1870a89c8b536/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr?ref=9c06e1ba47e1077725a950e0b5d1870a89c8b536", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `T: Clone` is not satisfied\n+  --> $DIR/derive-clone-for-eq.rs:6:17\n+   |\n+LL | #[derive(Clone, Eq)]\n+   |                 ^^ the trait `Clone` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `PartialEq` for `Struct<T>`\n+  --> $DIR/derive-clone-for-eq.rs:9:19\n+   |\n+LL | impl<T: Clone, U> PartialEq<U> for Struct<T>\n+   |                   ^^^^^^^^^^^^     ^^^^^^^^^\n+note: required by a bound in `Eq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub trait Eq: PartialEq<Self> {\n+   |               ^^^^^^^^^^^^^^^ required by this bound in `Eq`\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider restricting type parameter `T`\n+   |\n+LL | pub struct Struct<T: std::clone::Clone>(T);\n+   |                    +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}