{"sha": "81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjBlOWM5NGUxYzcwZTNkMzYyZmM4YTVmY2QyMDRhOGZjOWVkMmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-05T11:34:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-05T11:34:12Z"}, "message": "Merge pull request #2032 from topecongiro/trailing-whitespaces-in-macro-def\n\nRemove trailing whitespaces in macro def", "tree": {"sha": "64a9d676ed3ec359035e1a4f4dbc459cc4fd171b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a9d676ed3ec359035e1a4f4dbc459cc4fd171b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "html_url": "https://github.com/rust-lang/rust/commit/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ab2b5f5e3ebb3bdcd07c8de12d2604ce2981a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ab2b5f5e3ebb3bdcd07c8de12d2604ce2981a2", "html_url": "https://github.com/rust-lang/rust/commit/69ab2b5f5e3ebb3bdcd07c8de12d2604ce2981a2"}, {"sha": "00f8610d9b0557eaf9dc28ce3e768c6d9e5d542b", "url": "https://api.github.com/repos/rust-lang/rust/commits/00f8610d9b0557eaf9dc28ce3e768c6d9e5d542b", "html_url": "https://github.com/rust-lang/rust/commit/00f8610d9b0557eaf9dc28ce3e768c6d9e5d542b"}], "stats": {"total": 93, "additions": 79, "deletions": 14}, "files": [{"sha": "3c863086a3669424d769f9e9e32dc1374be7d3b4", "filename": "src/comment.rs", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "patch": "@@ -464,7 +464,7 @@ impl FindUncommented for str {\n                     return Some(i - pat.len());\n                 }\n                 Some(c) => match kind {\n-                    FullCodeCharKind::Normal if b == c => {}\n+                    FullCodeCharKind::Normal | FullCodeCharKind::InString if b == c => {}\n                     _ => {\n                         needle_iter = pat.chars();\n                     }\n@@ -487,7 +487,7 @@ impl FindUncommented for str {\n pub fn find_comment_end(s: &str) -> Option<usize> {\n     let mut iter = CharClasses::new(s.char_indices());\n     for (kind, (i, _c)) in &mut iter {\n-        if kind == FullCodeCharKind::Normal {\n+        if kind == FullCodeCharKind::Normal || kind == FullCodeCharKind::InString {\n             return Some(i);\n         }\n     }\n@@ -505,6 +505,35 @@ pub fn contains_comment(text: &str) -> bool {\n     CharClasses::new(text.chars()).any(|(kind, _)| kind.is_comment())\n }\n \n+/// Remove trailing spaces from the specified snippet. We do not remove spaces\n+/// inside strings or comments.\n+pub fn remove_trailing_white_spaces(text: &str) -> String {\n+    let mut buffer = String::with_capacity(text.len());\n+    let mut space_buffer = String::with_capacity(128);\n+    for (char_kind, c) in CharClasses::new(text.chars()) {\n+        match c {\n+            '\\n' => {\n+                if char_kind == FullCodeCharKind::InString {\n+                    buffer.push_str(&space_buffer);\n+                }\n+                space_buffer.clear();\n+                buffer.push('\\n');\n+            }\n+            _ if c.is_whitespace() => {\n+                space_buffer.push(c);\n+            }\n+            _ => {\n+                if !space_buffer.is_empty() {\n+                    buffer.push_str(&space_buffer);\n+                    space_buffer.clear();\n+                }\n+                buffer.push(c);\n+            }\n+        }\n+    }\n+    buffer\n+}\n+\n struct CharClasses<T>\n where\n     T: Iterator,\n@@ -568,15 +597,17 @@ enum FullCodeCharKind {\n     InComment,\n     /// Last character of a comment, '\\n' for a line comment, '/' for a block comment.\n     EndComment,\n+    /// Inside a string.\n+    InString,\n }\n \n impl FullCodeCharKind {\n     fn is_comment(&self) -> bool {\n         match *self {\n-            FullCodeCharKind::Normal => false,\n             FullCodeCharKind::StartComment |\n             FullCodeCharKind::InComment |\n             FullCodeCharKind::EndComment => true,\n+            _ => false,\n         }\n     }\n \n@@ -612,21 +643,34 @@ where\n     fn next(&mut self) -> Option<(FullCodeCharKind, T::Item)> {\n         let item = try_opt!(self.base.next());\n         let chr = item.get_char();\n+        let mut char_kind = FullCodeCharKind::Normal;\n         self.status = match self.status {\n             CharClassesStatus::LitString => match chr {\n                 '\"' => CharClassesStatus::Normal,\n-                '\\\\' => CharClassesStatus::LitStringEscape,\n-                _ => CharClassesStatus::LitString,\n+                '\\\\' => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitStringEscape\n+                }\n+                _ => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitString\n+                }\n             },\n-            CharClassesStatus::LitStringEscape => CharClassesStatus::LitString,\n+            CharClassesStatus::LitStringEscape => {\n+                char_kind = FullCodeCharKind::InString;\n+                CharClassesStatus::LitString\n+            }\n             CharClassesStatus::LitChar => match chr {\n                 '\\\\' => CharClassesStatus::LitCharEscape,\n                 '\\'' => CharClassesStatus::Normal,\n                 _ => CharClassesStatus::LitChar,\n             },\n             CharClassesStatus::LitCharEscape => CharClassesStatus::LitChar,\n             CharClassesStatus::Normal => match chr {\n-                '\"' => CharClassesStatus::LitString,\n+                '\"' => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitString\n+                }\n                 '\\'' => CharClassesStatus::LitChar,\n                 '/' => match self.base.peek() {\n                     Some(next) if next.get_char() == '*' => {\n@@ -680,7 +724,7 @@ where\n                 }\n             },\n         };\n-        Some((FullCodeCharKind::Normal, item))\n+        Some((char_kind, item))\n     }\n }\n \n@@ -707,9 +751,12 @@ impl<'a> Iterator for UngroupedCommentCodeSlices<'a> {\n     fn next(&mut self) -> Option<Self::Item> {\n         let (kind, (start_idx, _)) = try_opt!(self.iter.next());\n         match kind {\n-            FullCodeCharKind::Normal => {\n+            FullCodeCharKind::Normal | FullCodeCharKind::InString => {\n                 // Consume all the Normal code\n-                while let Some(&(FullCodeCharKind::Normal, (_, _))) = self.iter.peek() {\n+                while let Some(&(char_kind, _)) = self.iter.peek() {\n+                    if char_kind.is_comment() {\n+                        break;\n+                    }\n                     let _ = self.iter.next();\n                 }\n             }\n@@ -1032,7 +1079,7 @@ mod test {\n     fn uncommented(text: &str) -> String {\n         CharClasses::new(text.chars())\n             .filter_map(|(s, c)| match s {\n-                FullCodeCharKind::Normal => Some(c),\n+                FullCodeCharKind::Normal | FullCodeCharKind::InString => Some(c),\n                 _ => None,\n             })\n             .collect()"}, {"sha": "dba9f9965f3ead8e11ec62114f818e1bf69e8829", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "patch": "@@ -19,8 +19,8 @@ use syntax::parse::ParseSess;\n use expr::rewrite_literal;\n use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, CommentCodeSlices,\n-              FindUncommented};\n+use comment::{contains_comment, recover_missing_comment_in_span, remove_trailing_white_spaces,\n+              CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use items::{format_impl, format_struct, format_struct_struct, format_trait,\n@@ -459,7 +459,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::MacroDef(..) => {\n                 // FIXME(#1539): macros 2.0\n-                let mac_snippet = Some(self.snippet(item.span));\n+                let mac_snippet = Some(remove_trailing_white_spaces(&self.snippet(item.span)));\n                 self.push_rewrite(item.span, mac_snippet);\n             }\n         }"}, {"sha": "616a275876fdf137af7a910b2571c33cedbc6a03", "filename": "tests/source/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "patch": "@@ -189,3 +189,12 @@ fn __bindgen_test_layout_HandleWithDtor_open0_int_close0_instantiation() {\n     );\n     assert_eq ! ( :: std :: mem :: align_of :: < HandleWithDtor < :: std :: os :: raw :: c_int > > ( ) , 8usize , concat ! ( \"Alignment of template specialization: \" , stringify ! ( HandleWithDtor < :: std :: os :: raw :: c_int > ) ) );\n }\n+\n+// #878\n+macro_rules! try_opt {\n+    ($expr:expr) => (match $expr {  \n+        Some(val) => val,\n+          \n+        None => { return None; }\n+    })\n+}"}, {"sha": "394cac3820f38841b3cedf8bbf49aa3785151175", "filename": "tests/target/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=81f0e9c94e1c70e3d362fc8a5fcd204a8fc9ed2f", "patch": "@@ -240,3 +240,12 @@ fn __bindgen_test_layout_HandleWithDtor_open0_int_close0_instantiation() {\n         )\n     );\n }\n+\n+// #878\n+macro_rules! try_opt {\n+    ($expr:expr) => (match $expr {\n+        Some(val) => val,\n+\n+        None => { return None; }\n+    })\n+}"}]}