{"sha": "6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzJhMDQ3MTg4YzE1OTBmMTNlYzliNmRkMWIwMGIzNWQyYmQ5Yzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-21T03:53:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-26T18:25:48Z"}, "message": "instantiate_value_path: .impl_self_ty -> .type_of", "tree": {"sha": "54ccb1dcea1525fef907013fe5f8dada1459c7a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ccb1dcea1525fef907013fe5f8dada1459c7a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "html_url": "https://github.com/rust-lang/rust/commit/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892cb143e5984f220e6b26b48d972bd1f4644298", "url": "https://api.github.com/repos/rust-lang/rust/commits/892cb143e5984f220e6b26b48d972bd1f4644298", "html_url": "https://github.com/rust-lang/rust/commit/892cb143e5984f220e6b26b48d972bd1f4644298"}], "stats": {"total": 166, "additions": 162, "deletions": 4}, "files": [{"sha": "698b0e9bfcb87abac212a33060b5cf5956702bf9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "patch": "@@ -5446,9 +5446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(false);\n \n         let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {\n-            let ty = self.impl_self_ty(span, impl_def_id).ty;\n-            let adt_def = ty.ty_adt_def();\n-\n+            let ty = self.normalize_ty(span, tcx.at(span).type_of(impl_def_id));\n             match ty.kind {\n                 ty::Adt(adt_def, substs) if adt_def.has_ctor() => {\n                     let variant = adt_def.non_enum_variant();\n@@ -5463,7 +5461,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         span,\n                         \"the `Self` constructor can only be used with tuple or unit structs\",\n                     );\n-                    if let Some(adt_def) = adt_def {\n+                    if let Some(adt_def) = ty.ty_adt_def() {\n                         match adt_def.adt_kind() {\n                             AdtKind::Enum => {\n                                 err.help(\"did you mean to use one of the enum's variants?\");"}, {"sha": "85d60952ac82394e4063a4b5268cb6f3fc8c7c44", "filename": "src/test/ui/issues/issue-69306.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Ftest%2Fui%2Fissues%2Fissue-69306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Ftest%2Fui%2Fissues%2Fissue-69306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69306.rs?ref=6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "patch": "@@ -0,0 +1,45 @@\n+fn main() {}\n+\n+struct S0<T>(T);\n+impl<T> S0<T> {\n+    const C: S0<u8> = Self(0);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+\n+    fn foo() {\n+        Self(0);\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+// Testing normalization.\n+trait Fun {\n+    type Out;\n+}\n+impl<T> Fun for S0<T> {\n+    type Out = Self;\n+}\n+trait Foo<T> {\n+    fn foo();\n+}\n+impl<T> Foo<T> for <S0<T> as Fun>::Out {\n+    fn foo() {\n+        Self(0); //~ ERROR mismatched types\n+    }\n+}\n+\n+struct S1<T, U>(T, U);\n+impl<T> S1<T, u8> {\n+    const C: S1<u8, u8> = Self(0, 1);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}\n+\n+struct S2<T>(T);\n+impl<T> S2<T> {\n+    fn map<U>(x: U) -> S2<U> {\n+        Self(x)\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+    }\n+}"}, {"sha": "a2a42739ca8be49e1b5e699891e9291f06b45c50", "filename": "src/test/ui/issues/issue-69306.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6672a047188c1590f13ec9b6dd1b00b35d2bd9c9/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr?ref=6672a047188c1590f13ec9b6dd1b00b35d2bd9c9", "patch": "@@ -0,0 +1,115 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:5:28\n+   |\n+LL | impl<T> S0<T> {\n+   |      - this type parameter\n+LL |     const C: S0<u8> = Self(0);\n+   |                            ^ expected type parameter `T`, found integer\n+   |\n+   = note: expected type parameter `T`\n+                        found type `{integer}`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:5:23\n+   |\n+LL | impl<T> S0<T> {\n+   |      - this type parameter\n+LL |     const C: S0<u8> = Self(0);\n+   |                       ^^^^^^^ expected `u8`, found type parameter `T`\n+   |\n+   = note: expected struct `S0<u8>`\n+              found struct `S0<T>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:10:14\n+   |\n+LL | impl<T> S0<T> {\n+   |      - this type parameter\n+...\n+LL |         Self(0);\n+   |              ^ expected type parameter `T`, found integer\n+   |\n+   = note: expected type parameter `T`\n+                        found type `{integer}`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:27:14\n+   |\n+LL | impl<T> Foo<T> for <S0<T> as Fun>::Out {\n+   |      - this type parameter\n+LL |     fn foo() {\n+LL |         Self(0);\n+   |              ^ expected type parameter `T`, found integer\n+   |\n+   = note: expected type parameter `T`\n+                        found type `{integer}`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:33:32\n+   |\n+LL | impl<T> S1<T, u8> {\n+   |      - this type parameter\n+LL |     const C: S1<u8, u8> = Self(0, 1);\n+   |                                ^ expected type parameter `T`, found integer\n+   |\n+   = note: expected type parameter `T`\n+                        found type `{integer}`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:33:27\n+   |\n+LL | impl<T> S1<T, u8> {\n+   |      - this type parameter\n+LL |     const C: S1<u8, u8> = Self(0, 1);\n+   |                           ^^^^^^^^^^ expected `u8`, found type parameter `T`\n+   |\n+   = note: expected struct `S1<u8, _>`\n+              found struct `S1<T, _>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:41:14\n+   |\n+LL | impl<T> S2<T> {\n+   |      - expected type parameter\n+LL |     fn map<U>(x: U) -> S2<U> {\n+   |            - found type parameter\n+LL |         Self(x)\n+   |              ^ expected type parameter `T`, found type parameter `U`\n+   |\n+   = note: expected type parameter `T`\n+              found type parameter `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-69306.rs:41:9\n+   |\n+LL | impl<T> S2<T> {\n+   |      - found type parameter\n+LL |     fn map<U>(x: U) -> S2<U> {\n+   |            -           ----- expected `S2<U>` because of return type\n+   |            |\n+   |            expected type parameter\n+LL |         Self(x)\n+   |         ^^^^^^^ expected type parameter `U`, found type parameter `T`\n+   |\n+   = note: expected struct `S2<U>`\n+              found struct `S2<T>`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}