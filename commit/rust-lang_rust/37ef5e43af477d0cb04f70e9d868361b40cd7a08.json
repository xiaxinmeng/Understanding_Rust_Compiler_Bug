{"sha": "37ef5e43af477d0cb04f70e9d868361b40cd7a08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZWY1ZTQzYWY0NzdkMGNiMDRmNzBlOWQ4NjgzNjFiNDBjZDdhMDg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-06T16:43:32Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:37Z"}, "message": "Add tests for stable unsafe features in const fn", "tree": {"sha": "e6806d934231136144af600ff497939fcfa608f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6806d934231136144af600ff497939fcfa608f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ef5e43af477d0cb04f70e9d868361b40cd7a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ef5e43af477d0cb04f70e9d868361b40cd7a08", "html_url": "https://github.com/rust-lang/rust/commit/37ef5e43af477d0cb04f70e9d868361b40cd7a08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ef5e43af477d0cb04f70e9d868361b40cd7a08/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4497ff37627d860690613249a31cf3ee4c4195ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4497ff37627d860690613249a31cf3ee4c4195ef", "html_url": "https://github.com/rust-lang/rust/commit/4497ff37627d860690613249a31cf3ee4c4195ef"}], "stats": {"total": 162, "additions": 160, "deletions": 2}, "files": [{"sha": "726e891df0ccf2f4e4c63d4dee08121594785f5d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -93,7 +93,6 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n-#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]"}, {"sha": "597a7738217035f42677e8cb2308fe92559ed2eb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -122,6 +122,7 @@ impl serialize::UseSpecializedDecodable for HirId {\n // hack to ensure that we don't try to access the private parts of `ItemLocalId` in this module\n mod item_local_id_inner {\n     use rustc_data_structures::indexed_vec::Idx;\n+    use serialize::{Decodable, Decoder};\n     /// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n     /// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n     /// guarantee that the numerical value of a given `ItemLocalId` corresponds to"}, {"sha": "ddb0c5bf22ab6410299a4f061c2c3f9fc9cda00b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -69,7 +69,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(transpose_result)]\n-#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "27a4292543ad65352c6047aecba0c504b0e9ac65", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -17,6 +17,7 @@ use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_serialize::{Decodable, Decoder};\n \n pub mod call;\n "}, {"sha": "a61e3329bdce8b9dd899aedca44e80e914c63959", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,20 @@\n+#![feature(rustc_attrs, const_let, const_fn)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+}\n+\n+const fn foo() -> NonZero<u32> {\n+    let mut x = unsafe { NonZero(1) };\n+    let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+    //~^ ERROR mutation of layout constrained field is unsafe\n+    unsafe { NonZero(1) }\n+}\n+\n+const fn bar() -> NonZero<u32> {\n+    let mut x = unsafe { NonZero(1) };\n+    let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n+    unsafe { NonZero(1) }\n+}"}, {"sha": "f79792ffba9bec63c9a2e1960920a6ef8aa16da6", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,24 @@\n+error[E0017]: references in constant functions may only refer to immutable values\n+  --> $DIR/ranged_ints2_const.rs:11:13\n+   |\n+LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+   |             ^^^^^^^^ constant functions require immutable values\n+\n+error[E0017]: references in constant functions may only refer to immutable values\n+  --> $DIR/ranged_ints2_const.rs:18:22\n+   |\n+LL |     let y = unsafe { &mut x.0 }; //~ ERROR references in constant functions may only refer to immut\n+   |                      ^^^^^^^^ constant functions require immutable values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints2_const.rs:11:13\n+   |\n+LL |     let y = &mut x.0; //~ ERROR references in constant functions may only refer to immutable\n+   |             ^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0017, E0133.\n+For more information about an error, try `rustc --explain E0017`."}, {"sha": "6497b611224b6a77b3d17cd7acf41427f68dce90", "filename": "src/test/ui/unsafe/ranged_ints3_const.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,21 @@\n+#![feature(rustc_attrs, const_let, const_fn)]\n+\n+use std::cell::Cell;\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {}\n+\n+const fn foo() -> NonZero<Cell<u32>> {\n+    let mut x = unsafe { NonZero(Cell::new(1)) };\n+    let y = &x.0; //~ ERROR cannot borrow a constant which may contain interior mutability\n+    //~^ ERROR borrow of layout constrained field with interior mutability\n+    unsafe { NonZero(Cell::new(1)) }\n+}\n+\n+const fn bar() -> NonZero<Cell<u32>> {\n+    let mut x = unsafe { NonZero(Cell::new(1)) };\n+    let y = unsafe { &x.0 }; //~ ERROR cannot borrow a constant which may contain interior mut\n+    unsafe { NonZero(Cell::new(1)) }\n+}"}, {"sha": "d83d75787d948f34ad669173b81da1a9b5fb1c0d", "filename": "src/test/ui/unsafe/ranged_ints3_const.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.stderr?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,24 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/ranged_ints3_const.rs:12:13\n+   |\n+LL |     let y = &x.0; //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |             ^^^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/ranged_ints3_const.rs:19:22\n+   |\n+LL |     let y = unsafe { &x.0 }; //~ ERROR cannot borrow a constant which may contain interior mut\n+   |                      ^^^^\n+\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_const.rs:12:13\n+   |\n+LL |     let y = &x.0; //~ ERROR cannot borrow a constant which may contain interior mutability\n+   |             ^^^^ borrow of layout constrained field with interior mutability\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0133, E0492.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "09689579639e76193ada9ca543d38d6b513e0f51", "filename": "src/test/ui/unsafe/ranged_ints4_const.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,19 @@\n+#![feature(rustc_attrs, const_let, const_fn)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {}\n+\n+const fn foo() -> NonZero<u32> {\n+    let mut x = unsafe { NonZero(1) };\n+    x.0 = 0; //~ ERROR statements in constant functions are unstable\n+    //~^ ERROR mutation of layout constrained field is unsafe\n+    x\n+}\n+\n+const fn bar() -> NonZero<u32> {\n+    let mut x = unsafe { NonZero(1) };\n+    unsafe { x.0 = 0 }; //~ ERROR statements in constant functions are unstable\n+    x\n+}"}, {"sha": "284ba3603af2e3be222ad4251733c8a120f74a26", "filename": "src/test/ui/unsafe/ranged_ints4_const.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,28 @@\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/ranged_ints4_const.rs:10:5\n+   |\n+LL |     x.0 = 0; //~ ERROR statements in constant functions are unstable\n+   |     ^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/ranged_ints4_const.rs:17:14\n+   |\n+LL |     unsafe { x.0 = 0 }; //~ ERROR statements in constant functions are unstable\n+   |              ^^^^^^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints4_const.rs:10:5\n+   |\n+LL |     x.0 = 0; //~ ERROR statements in constant functions are unstable\n+   |     ^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "8477772867e91d503a48750632775cf82310f78e", "filename": "src/test/ui/unsafe/ranged_ints_const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,11 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {}\n+\n+const fn foo() -> NonZero<u32> { NonZero(0) }\n+//~^ ERROR initializing type with `rustc_layout_scalar_valid_range` attr is unsafe\n+\n+const fn bar() -> NonZero<u32> { unsafe { NonZero(0) } }"}, {"sha": "584ad40a92bb08b6064540b6e7734ce9ca81f874", "filename": "src/test/ui/unsafe/ranged_ints_const.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ef5e43af477d0cb04f70e9d868361b40cd7a08/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.stderr?ref=37ef5e43af477d0cb04f70e9d868361b40cd7a08", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints_const.rs:8:34\n+   |\n+LL | const fn foo() -> NonZero<u32> { NonZero(0) }\n+   |                                  ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}]}