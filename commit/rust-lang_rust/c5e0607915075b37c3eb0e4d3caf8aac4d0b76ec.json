{"sha": "c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec", "node_id": "C_kwDOAAsO6NoAKGM1ZTA2MDc5MTUwNzViMzdjM2ViMGU0ZDNjYWY4YWFjNGQwYjc2ZWM", "commit": {"author": {"name": "Alexis (Poliorcetics) Bourget", "email": "ab_github@poliorcetiq.eu", "date": "2023-05-06T13:37:38Z"}, "committer": {"name": "Alexis (Poliorcetics) Bourget", "email": "ab_github@poliorcetiq.eu", "date": "2023-05-06T13:37:38Z"}, "message": "fix(todo): implement IntoIterator for ArenaMap<IDX, V>", "tree": {"sha": "fcde38b990af5c2f2ed1181ce1126981736ad0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcde38b990af5c2f2ed1181ce1126981736ad0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec", "html_url": "https://github.com/rust-lang/rust/commit/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4966c92829f945d3846eb0ca0e240ac7f7c8c60", "html_url": "https://github.com/rust-lang/rust/commit/a4966c92829f945d3846eb0ca0e240ac7f7c8c60"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "750f345b5398d9e9025e1d2f06e591c360a70172", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=c5e0607915075b37c3eb0e4d3caf8aac4d0b76ec", "patch": "@@ -1,3 +1,4 @@\n+use std::iter::Enumerate;\n use std::marker::PhantomData;\n \n use crate::Idx;\n@@ -94,12 +95,6 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n             .filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_mut()?)))\n     }\n \n-    /// Returns an iterator over the arena indexes and values in the map.\n-    // FIXME: Implement `IntoIterator` trait.\n-    pub fn into_iter(self) -> impl Iterator<Item = (Idx<T>, V)> + DoubleEndedIterator {\n-        self.v.into_iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o?)))\n-    }\n-\n     /// Gets the given key's corresponding entry in the map for in-place manipulation.\n     pub fn entry(&mut self, idx: Idx<T>) -> Entry<'_, Idx<T>, V> {\n         let idx = Self::to_idx(idx);\n@@ -154,6 +149,63 @@ impl<T, V> FromIterator<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n     }\n }\n \n+pub struct ArenaMapIter<IDX, V> {\n+    iter: Enumerate<std::vec::IntoIter<Option<V>>>,\n+    _ty: PhantomData<IDX>,\n+}\n+\n+impl<T, V> IntoIterator for ArenaMap<Idx<T>, V> {\n+    type Item = (Idx<T>, V);\n+\n+    type IntoIter = ArenaMapIter<Idx<T>, V>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        let iter = self.v.into_iter().enumerate();\n+        Self::IntoIter { iter, _ty: PhantomData }\n+    }\n+}\n+\n+impl<T, V> ArenaMapIter<Idx<T>, V> {\n+    fn mapper((idx, o): (usize, Option<V>)) -> Option<(Idx<T>, V)> {\n+        Some((ArenaMap::<Idx<T>, V>::from_idx(idx), o?))\n+    }\n+}\n+\n+impl<T, V> Iterator for ArenaMapIter<Idx<T>, V> {\n+    type Item = (Idx<T>, V);\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        for next in self.iter.by_ref() {\n+            match Self::mapper(next) {\n+                Some(r) => return Some(r),\n+                None => continue,\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<T, V> DoubleEndedIterator for ArenaMapIter<Idx<T>, V> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        while let Some(next_back) = self.iter.next_back() {\n+            match Self::mapper(next_back) {\n+                Some(r) => return Some(r),\n+                None => continue,\n+            }\n+        }\n+\n+        None\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n ///\n /// This `enum` is constructed from the [`entry`] method on [`ArenaMap`]."}]}