{"sha": "830b4ee76adea7577615c7a6950e14c22cf0fb20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMGI0ZWU3NmFkZWE3NTc3NjE1YzdhNjk1MGUxNGMyMmNmMGZiMjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-11T09:10:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-11T09:10:41Z"}, "message": "Rollup merge of #66881 - krishna-veerareddy:issue-66780-bool-ord-optimization, r=sfackler\n\nOptimize Ord trait implementation for bool\n\nCasting the booleans to `i8`s and converting their difference into `Ordering` generates better assembly than casting them to `u8`s and comparing them.\n\nFixes #66780\n\n#### Comparison([Godbolt link](https://rust.godbolt.org/z/PjBpvF))\n\n##### Old assembly:\n```asm\nexample::boolean_cmp:\n        mov     ecx, edi\n        xor     ecx, esi\n        test    esi, esi\n        mov     eax, 255\n        cmove   eax, ecx\n        test    edi, edi\n        cmovne  eax, ecx\n        ret\n```\n\n##### New assembly:\n```asm\nexample::boolean_cmp:\n        mov     eax, edi\n        sub     al, sil\n        ret\n```\n\n##### Old LLVM-MCA statistics:\n```\nIterations:        100\nInstructions:      800\nTotal Cycles:      234\nTotal uOps:        1000\n\nDispatch Width:    6\nuOps Per Cycle:    4.27\nIPC:               3.42\nBlock RThroughput: 1.7\n```\n\n##### New LLVM-MCA statistics:\n```\nIterations:        100\nInstructions:      300\nTotal Cycles:      110\nTotal uOps:        500\n\nDispatch Width:    6\nuOps Per Cycle:    4.55\nIPC:               2.73\nBlock RThroughput: 1.0\n```", "tree": {"sha": "b2c6c494190484a96c79a0ad042e0a76ea4f7e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c6c494190484a96c79a0ad042e0a76ea4f7e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830b4ee76adea7577615c7a6950e14c22cf0fb20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8LKRCRBK7hj4Ov3rIwAAdHIIABQyLt0vI+cCTN/Vab1EDEgR\nqyPyhIZ7r4DxsPAKB0nGaGBPsj4aEdrOFCGwQsQz8pHGlCB3TO371AANMNHNWy20\na1zE9X7G/hQcjabojabnQx7ZbtlDVz6zSGj60kUHct7Id86gs4T4yj9cmq86W/i4\nEYvrD/uQJa/OrStMQcF4s+aC3uqXU+kgsNnzwfpHL9TCNv+JUYoSdFNn5ruRvilm\n8uGwJ0tvzHGORAf0iEKba92I+c21j5F8HvcjNVs5i8Q65nN3cuYCqKlDDG4kj6u8\n6nZcw3nJ2UutSywHpqhgVUS4Wk7jEttb2jVUn9g/fh39kk5sMr/eemn4F6uyb8Q=\n=RyVj\n-----END PGP SIGNATURE-----\n", "payload": "tree b2c6c494190484a96c79a0ad042e0a76ea4f7e8f\nparent ddca1e09c36a6ce21d95fec1619f23ba59b69c8a\nparent 1f07aa582a41e6fc253139909d3bf9bfd04a9d6d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576055441 +0100\ncommitter GitHub <noreply@github.com> 1576055441 +0100\n\nRollup merge of #66881 - krishna-veerareddy:issue-66780-bool-ord-optimization, r=sfackler\n\nOptimize Ord trait implementation for bool\n\nCasting the booleans to `i8`s and converting their difference into `Ordering` generates better assembly than casting them to `u8`s and comparing them.\n\nFixes #66780\n\n#### Comparison([Godbolt link](https://rust.godbolt.org/z/PjBpvF))\n\n##### Old assembly:\n```asm\nexample::boolean_cmp:\n        mov     ecx, edi\n        xor     ecx, esi\n        test    esi, esi\n        mov     eax, 255\n        cmove   eax, ecx\n        test    edi, edi\n        cmovne  eax, ecx\n        ret\n```\n\n##### New assembly:\n```asm\nexample::boolean_cmp:\n        mov     eax, edi\n        sub     al, sil\n        ret\n```\n\n##### Old LLVM-MCA statistics:\n```\nIterations:        100\nInstructions:      800\nTotal Cycles:      234\nTotal uOps:        1000\n\nDispatch Width:    6\nuOps Per Cycle:    4.27\nIPC:               3.42\nBlock RThroughput: 1.7\n```\n\n##### New LLVM-MCA statistics:\n```\nIterations:        100\nInstructions:      300\nTotal Cycles:      110\nTotal uOps:        500\n\nDispatch Width:    6\nuOps Per Cycle:    4.55\nIPC:               2.73\nBlock RThroughput: 1.0\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830b4ee76adea7577615c7a6950e14c22cf0fb20", "html_url": "https://github.com/rust-lang/rust/commit/830b4ee76adea7577615c7a6950e14c22cf0fb20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830b4ee76adea7577615c7a6950e14c22cf0fb20/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddca1e09c36a6ce21d95fec1619f23ba59b69c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddca1e09c36a6ce21d95fec1619f23ba59b69c8a", "html_url": "https://github.com/rust-lang/rust/commit/ddca1e09c36a6ce21d95fec1619f23ba59b69c8a"}, {"sha": "1f07aa582a41e6fc253139909d3bf9bfd04a9d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f07aa582a41e6fc253139909d3bf9bfd04a9d6d", "html_url": "https://github.com/rust-lang/rust/commit/1f07aa582a41e6fc253139909d3bf9bfd04a9d6d"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "fd4be02e20f4bc800b6e6be55438238cd19d778d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=830b4ee76adea7577615c7a6950e14c22cf0fb20", "patch": "@@ -1005,6 +1005,7 @@ pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n+    use crate::hint::unreachable_unchecked;\n     use crate::cmp::Ordering::{self, Less, Greater, Equal};\n \n     macro_rules! partial_eq_impl {\n@@ -1125,7 +1126,16 @@ mod impls {\n     impl Ord for bool {\n         #[inline]\n         fn cmp(&self, other: &bool) -> Ordering {\n-            (*self as u8).cmp(&(*other as u8))\n+            // Casting to i8's and converting the difference to an Ordering generates\n+            // more optimal assembly.\n+            // See <https://github.com/rust-lang/rust/issues/66780> for more info.\n+            match (*self as i8) - (*other as i8) {\n+                -1 => Less,\n+                0 => Equal,\n+                1 => Greater,\n+                // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else\n+                _ => unsafe { unreachable_unchecked() },\n+            }\n         }\n     }\n "}, {"sha": "56a2f4acf6eaa158ec111d7239ec19fb02a091ed", "filename": "src/libcore/tests/cmp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=830b4ee76adea7577615c7a6950e14c22cf0fb20", "patch": "@@ -9,6 +9,14 @@ fn test_int_totalord() {\n     assert_eq!(12.cmp(&-5), Greater);\n }\n \n+#[test]\n+fn test_bool_totalord() {\n+    assert_eq!(true.cmp(&false), Greater);\n+    assert_eq!(false.cmp(&true), Less);\n+    assert_eq!(true.cmp(&true), Equal);\n+    assert_eq!(false.cmp(&false), Equal);\n+}\n+\n #[test]\n fn test_mut_int_totalord() {\n     assert_eq!((&mut 5).cmp(&&mut 10), Less);"}, {"sha": "8769a4cb5e1898f078d07d031939342e3036a4e8", "filename": "src/test/codegen/bool-cmp.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830b4ee76adea7577615c7a6950e14c22cf0fb20/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbool-cmp.rs?ref=830b4ee76adea7577615c7a6950e14c22cf0fb20", "patch": "@@ -0,0 +1,17 @@\n+// This is a test for optimal Ord trait implementation for bool.\n+// See <https://github.com/rust-lang/rust/issues/66780> for more info.\n+\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+// CHECK-LABEL: @cmp_bool\n+#[no_mangle]\n+pub fn cmp_bool(a: bool, b: bool) -> Ordering {\n+// CHECK: zext i1\n+// CHECK: zext i1\n+// CHECK: sub nsw\n+    a.cmp(&b)\n+}"}]}