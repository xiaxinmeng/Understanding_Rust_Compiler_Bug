{"sha": "ca9d72540b0f90dee4a090b362843e9a38606520", "node_id": "C_kwDOAAsO6NoAKGNhOWQ3MjU0MGIwZjkwZGVlNGEwOTBiMzYyODQzZTlhMzg2MDY1MjA", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-22T15:07:35Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-05-25T16:13:17Z"}, "message": "update tests", "tree": {"sha": "06503331b12c52b45d04f061bd1aec32f452039a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06503331b12c52b45d04f061bd1aec32f452039a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9d72540b0f90dee4a090b362843e9a38606520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9d72540b0f90dee4a090b362843e9a38606520", "html_url": "https://github.com/rust-lang/rust/commit/ca9d72540b0f90dee4a090b362843e9a38606520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9d72540b0f90dee4a090b362843e9a38606520/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f65331b3eff0a66a695127ec890638bb67e039f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f65331b3eff0a66a695127ec890638bb67e039f", "html_url": "https://github.com/rust-lang/rust/commit/5f65331b3eff0a66a695127ec890638bb67e039f"}], "stats": {"total": 252, "additions": 237, "deletions": 15}, "files": [{"sha": "3ab55b370c2318e7b3f991f5f97996d245698e87", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -72,14 +72,15 @@ LL | | }\n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26\n    |\n-LL |     let cell = Cell::new(&a);\n-   |                ----------^^-\n-   |                |         |\n-   |                |         borrowed value does not live long enough\n-   |                argument requires that `a` is borrowed for `'static`\n+LL |       let cell = Cell::new(&a);\n+   |                            ^^ borrowed value does not live long enough\n ...\n-LL | }\n-   | - `a` dropped here while still borrowed\n+LL | /     foo(cell, |cell_a, cell_x| {\n+LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+LL | |     })\n+   | |______- argument requires that `a` is borrowed for `'static`\n+LL |   }\n+   |   - `a` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea835f2e05260a95425ecfbbd8911c85a6fdcecd", "filename": "src/test/ui/nll/impl-dyn-trait-static-bound.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.rs?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -0,0 +1,116 @@\n+#![allow(dead_code)]\n+#![feature(nll)]\n+\n+mod foo {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait<T> {}\n+    trait MyTrait<T> {\n+        fn use_self<K>(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n+        fn use_self<K>(&self) -> &() { panic!() }\n+    }\n+    impl<T> Irrelevant for dyn ObjectTrait<T> {}\n+\n+    fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n+        val.use_self::<T>()\n+        //~^ ERROR borrowed data escapes outside\n+    }\n+}\n+\n+mod bar {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n+        val.use_self()\n+    }\n+}\n+\n+mod baz {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for Box<dyn ObjectTrait> {}\n+\n+    fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n+        val.use_self()\n+    }\n+}\n+\n+mod bat {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+\n+    impl dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        val.use_self()\n+        //~^ ERROR borrowed data escapes outside\n+    }\n+}\n+\n+mod ban {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+        val.use_self()\n+        //~^ ERROR borrowed data escapes outside\n+    }\n+}\n+\n+mod bal {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait {}\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        MyTrait::use_self(val)\n+        //~^ ERROR borrowed data escapes outside\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dd6b50839ef9daf2dedc82cda07bba92815829ba", "filename": "src/test/ui/nll/impl-dyn-trait-static-bound.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fimpl-dyn-trait-static-bound.stderr?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -0,0 +1,105 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-dyn-trait-static-bound.rs:20:9\n+   |\n+LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n+   |               --     --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n+LL |         val.use_self::<T>()\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-dyn-trait-static-bound.rs:14:32\n+   |\n+LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n+   |                                ^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self<K>(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> + '_ {\n+   |                                               ++++\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-dyn-trait-static-bound.rs:70:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n+LL |         val.use_self()\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-dyn-trait-static-bound.rs:65:14\n+   |\n+LL |     impl dyn ObjectTrait {\n+   |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl dyn ObjectTrait + '_ {\n+   |                          ++++\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-dyn-trait-static-bound.rs:90:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n+LL |         val.use_self()\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-dyn-trait-static-bound.rs:87:26\n+   |\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+...\n+LL |     impl MyTrait for dyn ObjectTrait {}\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n+   |                                      ++++\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-dyn-trait-static-bound.rs:111:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n+LL |         MyTrait::use_self(val)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-dyn-trait-static-bound.rs:107:26\n+   |\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+...\n+LL |     impl MyTrait for dyn ObjectTrait {}\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n+   |                                      ++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "3326fa521fc9cea4efc8e4d26b039fb90f1c7663", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca9d72540b0f90dee4a090b362843e9a38606520/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=ca9d72540b0f90dee4a090b362843e9a38606520", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:33:41\n    |\n-LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n-   |                               ----------^^-\n-   |                               |         |\n-   |                               |         borrowed value does not live long enough\n-   |                               argument requires that `c` is borrowed for `'static`\n-...\n-LL | }\n-   | - `c` dropped here while still borrowed\n+LL | /     combine(\n+LL | |         SomeEnum::SomeVariant(Cell::new(&c)),\n+   | |                                         ^^ borrowed value does not live long enough\n+LL | |         SomeEnum::SomeOtherVariant::<Cell<&'static u32>>,\n+LL | |     );\n+   | |_____- argument requires that `c` is borrowed for `'static`\n+LL |   }\n+   |   - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:41:41"}]}