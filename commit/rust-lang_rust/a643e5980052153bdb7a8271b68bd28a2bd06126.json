{"sha": "a643e5980052153bdb7a8271b68bd28a2bd06126", "node_id": "C_kwDOAAsO6NoAKGE2NDNlNTk4MDA1MjE1M2JkYjdhODI3MWI2OGJkMjhhMmJkMDYxMjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-01T15:08:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T15:08:02Z"}, "message": "Rollup merge of #91828 - oxalica:feat/waker-getters, r=dtolnay\n\nImplement `RawWaker` and `Waker` getters for underlying pointers\n\nimplement #87021\n\nNew APIs:\n- `RawWaker::data(&self) -> *const ()`\n- `RawWaker::vtable(&self) -> &'static RawWakerVTable`\n- ~`Waker::as_raw_waker(&self) -> &RawWaker`~ `Waker::as_raw(&self) -> &RawWaker`\n\nThis third one is an auxiliary function to make the two APIs above more useful. Since we can only get `&Waker` in `Future::poll`, without this, we need to `transmute` it into `&RawWaker` (relying on `repr(transparent)`) in order to access its data/vtable pointers.\n\n~Not sure if it should be named `as_raw` or `as_raw_waker`. Seems we always use `as_<something-raw>` instead of just `as_raw`. But `as_raw_waker` seems not quite consistent with `Waker::from_raw`.~ As suggested in https://github.com/rust-lang/rust/pull/91828#discussion_r770729837, use `as_raw`.", "tree": {"sha": "5700a59ff507bca6140e43a8b61cdcd5fda8cd30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5700a59ff507bca6140e43a8b61cdcd5fda8cd30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a643e5980052153bdb7a8271b68bd28a2bd06126", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+UzSCRBK7hj4Ov3rIwAAtL4IAEqPjvl88KBepMyR2yemW3ap\ntdvoaucm/PjD1UcktSZCoICbRi23TNoCLnypyU3DW5fsSHDpGLeqO45s3pwV4cGm\nKO/9ib9zcA4EEEfZ8y+ayLBJnpXhLVTtZrNfUm+X+CZNQfLtwpE7MPEd4+voxA+w\n0rmn2HGyqXecz8AirhFaYxqyf6DWS1EvWV3qPLFogUlRpKSvZwtf0647ZGZ9tTcR\nVdZ3WfNQWUhehpCbXsrec46Fq3ilo6biaw0jYHSqBnIW9GQtQnOctQRriTkiOjmG\nkiSF5c+iCWtLqWA7KQKhx9KOsVf/R7KjqrOxgOyJhfiW6tyJhk9SsJ3anee+81A=\n=PvZX\n-----END PGP SIGNATURE-----\n", "payload": "tree 5700a59ff507bca6140e43a8b61cdcd5fda8cd30\nparent ce6c1484f8963cee8b793f010ad84ef7e94d2b91\nparent bae0da83612257185691faf94fc39457b4ed14e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643728082 +0100\ncommitter GitHub <noreply@github.com> 1643728082 +0100\n\nRollup merge of #91828 - oxalica:feat/waker-getters, r=dtolnay\n\nImplement `RawWaker` and `Waker` getters for underlying pointers\n\nimplement #87021\n\nNew APIs:\n- `RawWaker::data(&self) -> *const ()`\n- `RawWaker::vtable(&self) -> &'static RawWakerVTable`\n- ~`Waker::as_raw_waker(&self) -> &RawWaker`~ `Waker::as_raw(&self) -> &RawWaker`\n\nThis third one is an auxiliary function to make the two APIs above more useful. Since we can only get `&Waker` in `Future::poll`, without this, we need to `transmute` it into `&RawWaker` (relying on `repr(transparent)`) in order to access its data/vtable pointers.\n\n~Not sure if it should be named `as_raw` or `as_raw_waker`. Seems we always use `as_<something-raw>` instead of just `as_raw`. But `as_raw_waker` seems not quite consistent with `Waker::from_raw`.~ As suggested in https://github.com/rust-lang/rust/pull/91828#discussion_r770729837, use `as_raw`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a643e5980052153bdb7a8271b68bd28a2bd06126", "html_url": "https://github.com/rust-lang/rust/commit/a643e5980052153bdb7a8271b68bd28a2bd06126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a643e5980052153bdb7a8271b68bd28a2bd06126/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "html_url": "https://github.com/rust-lang/rust/commit/ce6c1484f8963cee8b793f010ad84ef7e94d2b91"}, {"sha": "bae0da83612257185691faf94fc39457b4ed14e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae0da83612257185691faf94fc39457b4ed14e6", "html_url": "https://github.com/rust-lang/rust/commit/bae0da83612257185691faf94fc39457b4ed14e6"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "27af227a1f27f0804b305945dacd1abd7b56924d", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=a643e5980052153bdb7a8271b68bd28a2bd06126", "patch": "@@ -43,6 +43,22 @@ impl RawWaker {\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n+\n+    /// Get the `data` pointer used to create this `RawWaker`.\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn data(&self) -> *const () {\n+        self.data\n+    }\n+\n+    /// Get the `vtable` pointer used to create this `RawWaker`.\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn vtable(&self) -> &'static RawWakerVTable {\n+        self.vtable\n+    }\n }\n \n /// A virtual function pointer table (vtable) that specifies the behavior\n@@ -260,6 +276,14 @@ impl Waker {\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }\n     }\n+\n+    /// Get a reference to the underlying [`RawWaker`].\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"waker_getters\", issue = \"87021\")]\n+    pub fn as_raw(&self) -> &RawWaker {\n+        &self.waker\n+    }\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "a993def0a818ef98375d4a65ff1a7ee65b7f6a3b", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a643e5980052153bdb7a8271b68bd28a2bd06126", "patch": "@@ -90,6 +90,7 @@\n #![feature(unzip_option)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n+#![feature(waker_getters)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n@@ -131,3 +132,4 @@ mod task;\n mod time;\n mod tuple;\n mod unicode;\n+mod waker;"}, {"sha": "6602ab36ba714c04a748ca4797a1a13a0a6b3efa", "filename": "library/core/tests/waker.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Ftests%2Fwaker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a643e5980052153bdb7a8271b68bd28a2bd06126/library%2Fcore%2Ftests%2Fwaker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fwaker.rs?ref=a643e5980052153bdb7a8271b68bd28a2bd06126", "patch": "@@ -0,0 +1,22 @@\n+use std::ptr;\n+use std::task::{RawWaker, RawWakerVTable, Waker};\n+\n+#[test]\n+fn test_waker_getters() {\n+    let raw_waker = RawWaker::new(42usize as *mut (), &WAKER_VTABLE);\n+    assert_eq!(raw_waker.data() as usize, 42);\n+    assert!(ptr::eq(raw_waker.vtable(), &WAKER_VTABLE));\n+\n+    let waker = unsafe { Waker::from_raw(raw_waker) };\n+    let waker2 = waker.clone();\n+    let raw_waker2 = waker2.as_raw();\n+    assert_eq!(raw_waker2.data() as usize, 43);\n+    assert!(ptr::eq(raw_waker2.vtable(), &WAKER_VTABLE));\n+}\n+\n+static WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(\n+    |data| RawWaker::new((data as usize + 1) as *mut (), &WAKER_VTABLE),\n+    |_| {},\n+    |_| {},\n+    |_| {},\n+);"}]}