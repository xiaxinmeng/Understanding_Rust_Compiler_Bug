{"sha": "d727f642b939305ed7a68e5f74875d4d52304ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MjdmNjQyYjkzOTMwNWVkN2E2OGU1Zjc0ODc1ZDRkNTIzMDRlYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-04T13:25:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-04T13:25:26Z"}, "message": "stop promoting union field accesses in 'const'", "tree": {"sha": "53571ec26c04025e65a94e8433b8a4f282b9184b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53571ec26c04025e65a94e8433b8a4f282b9184b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d727f642b939305ed7a68e5f74875d4d52304ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d727f642b939305ed7a68e5f74875d4d52304ebf", "html_url": "https://github.com/rust-lang/rust/commit/d727f642b939305ed7a68e5f74875d4d52304ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d727f642b939305ed7a68e5f74875d4d52304ebf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d37dca25a51fb900a402c94c8818ad1c2789e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30", "html_url": "https://github.com/rust-lang/rust/commit/0d37dca25a51fb900a402c94c8818ad1c2789e30"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "32c18c80b240285317995dc203e9ed73e870a617", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d727f642b939305ed7a68e5f74875d4d52304ebf/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d727f642b939305ed7a68e5f74875d4d52304ebf/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=d727f642b939305ed7a68e5f74875d4d52304ebf", "patch": "@@ -294,17 +294,6 @@ impl std::ops::Deref for Validator<'a, 'tcx> {\n struct Unpromotable;\n \n impl<'tcx> Validator<'_, 'tcx> {\n-    /// Determines if this code could be executed at runtime and thus is subject to codegen.\n-    /// That means even unused constants need to be evaluated.\n-    ///\n-    /// `const_kind` should not be used in this file other than through this method!\n-    fn maybe_runtime(&self) -> bool {\n-        match self.const_kind {\n-            None | Some(hir::ConstContext::ConstFn) => true,\n-            Some(hir::ConstContext::Static(_) | hir::ConstContext::Const) => false,\n-        }\n-    }\n-\n     fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {\n         match candidate {\n             Candidate::Ref(loc) => {\n@@ -555,14 +544,12 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     }\n \n                     ProjectionElem::Field(..) => {\n-                        if self.maybe_runtime() {\n-                            let base_ty =\n-                                Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n-                            if let Some(def) = base_ty.ty_adt_def() {\n-                                // No promotion of union field accesses.\n-                                if def.is_union() {\n-                                    return Err(Unpromotable);\n-                                }\n+                        let base_ty =\n+                            Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n+                        if let Some(def) = base_ty.ty_adt_def() {\n+                            // No promotion of union field accesses.\n+                            if def.is_union() {\n+                                return Err(Unpromotable);\n                             }\n                         }\n                     }\n@@ -744,7 +731,14 @@ impl<'tcx> Validator<'_, 'tcx> {\n     ) -> Result<(), Unpromotable> {\n         let fn_ty = callee.ty(self.body, self.tcx);\n \n-        if !self.explicit && self.maybe_runtime() {\n+        // When doing explicit promotion and inside const/static items, we promote all (eligible) function calls.\n+        // Everywhere else, we require `#[rustc_promotable]` on the callee.\n+        let promote_all_const_fn = self.explicit\n+            || matches!(\n+                self.const_kind,\n+                Some(hir::ConstContext::Static(_) | hir::ConstContext::Const)\n+            );\n+        if !promote_all_const_fn {\n             if let ty::FnDef(def_id, _) = *fn_ty.kind() {\n                 // Never promote runtime `const fn` calls of\n                 // functions without `#[rustc_promotable]`."}, {"sha": "30bb9917bf7ade5125fc15826075aed0d77e2144", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d727f642b939305ed7a68e5f74875d4d52304ebf/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d727f642b939305ed7a68e5f74875d4d52304ebf/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=d727f642b939305ed7a68e5f74875d4d52304ebf", "patch": "@@ -27,4 +27,9 @@ pub const fn promote_union() {\n     let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n }\n \n+// We do not promote union field accesses in `const`, either.\n+const TEST_UNION: () = {\n+    let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n+};\n+\n fn main() {}"}, {"sha": "6ca7a4c273ee22df755fe3d1bf7f4105a43ade61", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d727f642b939305ed7a68e5f74875d4d52304ebf/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d727f642b939305ed7a68e5f74875d4d52304ebf/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=d727f642b939305ed7a68e5f74875d4d52304ebf", "patch": "@@ -38,6 +38,16 @@ LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 4 previous errors\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:32:29\n+   |\n+LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n+   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |             |\n+   |             type annotation requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}]}