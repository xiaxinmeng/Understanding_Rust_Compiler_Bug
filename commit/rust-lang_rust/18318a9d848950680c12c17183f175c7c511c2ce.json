{"sha": "18318a9d848950680c12c17183f175c7c511c2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzE4YTlkODQ4OTUwNjgwYzEyYzE3MTgzZjE3NWM3YzUxMWMyY2U=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T14:56:09Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T14:56:09Z"}, "message": "Reimplement for_each_relevant_impl on top of find_map...", "tree": {"sha": "adb54e644a7a79952c348135d49240cd6002699a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb54e644a7a79952c348135d49240cd6002699a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18318a9d848950680c12c17183f175c7c511c2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18318a9d848950680c12c17183f175c7c511c2ce", "html_url": "https://github.com/rust-lang/rust/commit/18318a9d848950680c12c17183f175c7c511c2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18318a9d848950680c12c17183f175c7c511c2ce/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7993ddd89d8d2e0754bf9b12756573f56b76e254", "url": "https://api.github.com/repos/rust-lang/rust/commits/7993ddd89d8d2e0754bf9b12756573f56b76e254", "html_url": "https://github.com/rust-lang/rust/commit/7993ddd89d8d2e0754bf9b12756573f56b76e254"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "86476dffc0312d4690f786b90f169ca8743501f0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/18318a9d848950680c12c17183f175c7c511c2ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18318a9d848950680c12c17183f175c7c511c2ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=18318a9d848950680c12c17183f175c7c511c2ce", "patch": "@@ -123,10 +123,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n+        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+            f(did);\n+            None\n+        });\n+    }\n+\n+    /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n+    /// the first non-none value.\n+    pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n+        self,\n+        def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        mut f: F,\n+    ) -> Option<T> {\n         let impls = self.trait_impls_of(def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n-            f(impl_def_id);\n+            if let result @ Some(_) = f(impl_def_id) {\n+                return result;\n+            }\n         }\n \n         // simplify_type(.., false) basically replaces type parameters and\n@@ -154,35 +170,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         // blanket and non-blanket impls, and compare them separately.\n         //\n         // I think we'll cross that bridge when we get to it.\n-        if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n-            if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n-                for &impl_def_id in impls {\n-                    f(impl_def_id);\n-                }\n-            }\n-        } else {\n-            for &impl_def_id in impls.non_blanket_impls.values().flatten() {\n-                f(impl_def_id);\n-            }\n-        }\n-    }\n-\n-    /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n-    /// the first non-none value.\n-    pub fn find_map_relevant_impl<T, F: Fn(DefId) -> Option<T>>(\n-        self,\n-        def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-        f: F,\n-    ) -> Option<T> {\n-        let impls = self.trait_impls_of(def_id);\n-\n-        for &impl_def_id in impls.blanket_impls.iter() {\n-            if let result @ Some(_) = f(impl_def_id) {\n-                return result;\n-            }\n-        }\n-\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {"}]}