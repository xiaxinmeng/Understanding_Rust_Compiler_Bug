{"sha": "28856327066b9d15662ffd185196366de02c6240", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODU2MzI3MDY2YjlkMTU2NjJmZmQxODUxOTYzNjZkZTAyYzYyNDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-11T16:14:23Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-12T14:39:05Z"}, "message": "rustc: Allow an edition's feature on that edition\n\nThis commit fixes a hard error where the `#![feature(rust_2018_preview)]`\nfeature was forbidden to be mentioned when the `--edition 2018` flag was passed.\nThis instead silently accepts that feature gate despite it not being necessary.\nIt's intended that this will help ease the transition into the 2018 edition as\nusers will, for the time being, start off with the `rust_2018_preview` feature\nand no longer immediately need to remove it.\n\nCloses #50662", "tree": {"sha": "a2077ad7810b6b808767e04c9195e1974288d3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2077ad7810b6b808767e04c9195e1974288d3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28856327066b9d15662ffd185196366de02c6240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28856327066b9d15662ffd185196366de02c6240", "html_url": "https://github.com/rust-lang/rust/commit/28856327066b9d15662ffd185196366de02c6240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28856327066b9d15662ffd185196366de02c6240/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd441779ff60668d29b857e3b85e77aac773ebd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd441779ff60668d29b857e3b85e77aac773ebd3", "html_url": "https://github.com/rust-lang/rust/commit/bd441779ff60668d29b857e3b85e77aac773ebd3"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "b27568a61f85cfb16390130cf07086787abd047a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/28856327066b9d15662ffd185196366de02c6240/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28856327066b9d15662ffd185196366de02c6240/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=28856327066b9d15662ffd185196366de02c6240", "patch": "@@ -1861,56 +1861,61 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             continue\n         }\n \n-        match attr.meta_item_list() {\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n             None => {\n                 span_err!(span_handler, attr.span, E0555,\n                           \"malformed feature attribute, expected #![feature(...)]\");\n+                continue\n+            }\n+        };\n+\n+        for mi in list {\n+            let name = if let Some(word) = mi.word() {\n+                word.name()\n+            } else {\n+                span_err!(span_handler, mi.span, E0556,\n+                          \"malformed feature, expected just one word\");\n+                continue\n+            };\n+\n+            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n+                set(&mut features, mi.span);\n+                feature_checker.collect(&features, mi.span);\n+                continue\n             }\n-            Some(list) => {\n-                for mi in list {\n \n-                    let name = if let Some(word) = mi.word() {\n-                        word.name()\n-                    } else {\n-                        span_err!(span_handler, mi.span, E0556,\n-                                  \"malformed feature, expected just one word\");\n-                        continue\n-                    };\n-\n-                    if let Some(&(_, _, _, _, set)) = ACTIVE_FEATURES.iter()\n-                        .find(|& &(n, ..)| name == n) {\n-                        set(&mut features, mi.span);\n-                        feature_checker.collect(&features, mi.span);\n-                    }\n-                    else if let Some(&(.., reason)) = REMOVED_FEATURES.iter()\n-                            .find(|& &(n, ..)| name == n)\n-                        .or_else(|| STABLE_REMOVED_FEATURES.iter()\n-                            .find(|& &(n, ..)| name == n)) {\n-                        feature_removed(span_handler, mi.span, reason);\n-                    }\n-                    else if let Some(&(..)) = ACCEPTED_FEATURES.iter()\n-                        .find(|& &(n, ..)| name == n) {\n-                        features.declared_stable_lang_features.push((name, mi.span));\n-                    } else if let Some(&edition) = ALL_EDITIONS.iter()\n-                                                              .find(|e| name == e.feature_name()) {\n-                        if edition <= crate_edition {\n-                            feature_removed(span_handler, mi.span, None);\n-                        } else {\n-                            for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n-                                if let Some(f_edition) = f_edition {\n-                                    if edition >= f_edition {\n-                                        // FIXME(Manishearth) there is currently no way to set\n-                                        // lib features by edition\n-                                        set(&mut features, DUMMY_SP);\n-                                    }\n-                                }\n-                            }\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            if let Some((.., reason)) = removed.or(stable_removed) {\n+                feature_removed(span_handler, mi.span, *reason);\n+                continue\n+            }\n+\n+            if ACCEPTED_FEATURES.iter().any(|f| name == f.0) {\n+                features.declared_stable_lang_features.push((name, mi.span));\n+                continue\n+            }\n+\n+            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n+                if *edition <= crate_edition {\n+                    continue\n+                }\n+\n+                for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                    if let Some(f_edition) = f_edition {\n+                        if *edition >= f_edition {\n+                            // FIXME(Manishearth) there is currently no way to set\n+                            // lib features by edition\n+                            set(&mut features, DUMMY_SP);\n                         }\n-                    } else {\n-                        features.declared_lib_features.push((name, mi.span));\n                     }\n                 }\n+\n+                continue\n             }\n+\n+            features.declared_lib_features.push((name, mi.span));\n         }\n     }\n "}, {"sha": "3a3a6ff95f97e9a73943244423eb261ba49a16ab", "filename": "src/test/compile-fail/edition-feature-ok.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28856327066b9d15662ffd185196366de02c6240/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28856327066b9d15662ffd185196366de02c6240/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs?ref=28856327066b9d15662ffd185196366de02c6240", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--edition 2018\n+// compile-pass\n+\n+#![feature(rust_2018_preview)]\n+\n+fn main() {}"}]}