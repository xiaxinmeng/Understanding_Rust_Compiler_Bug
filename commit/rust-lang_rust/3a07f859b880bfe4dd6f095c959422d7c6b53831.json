{"sha": "3a07f859b880bfe4dd6f095c959422d7c6b53831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDdmODU5Yjg4MGJmZTRkZDZmMDk1Yzk1OTQyMmQ3YzZiNTM4MzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-23T00:31:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-27T00:01:16Z"}, "message": "Fallout of io => old_io", "tree": {"sha": "797b16a0b4c63a16a37b098c577d47b537a8fbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797b16a0b4c63a16a37b098c577d47b537a8fbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a07f859b880bfe4dd6f095c959422d7c6b53831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a07f859b880bfe4dd6f095c959422d7c6b53831", "html_url": "https://github.com/rust-lang/rust/commit/3a07f859b880bfe4dd6f095c959422d7c6b53831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a07f859b880bfe4dd6f095c959422d7c6b53831/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72b1645103e12b581f7022b893c37b5fe41aef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72b1645103e12b581f7022b893c37b5fe41aef7", "html_url": "https://github.com/rust-lang/rust/commit/f72b1645103e12b581f7022b893c37b5fe41aef7"}], "stats": {"total": 1212, "additions": 607, "deletions": 605}, "files": [{"sha": "b95e956aca28ee06cd7dfe457c2bc8a76b0a7cd5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -24,8 +24,8 @@ extern crate getopts;\n extern crate log;\n \n use std::os;\n-use std::io;\n-use std::io::fs;\n+use std::old_io;\n+use std::old_io::fs;\n use std::str::FromStr;\n use std::thunk::Thunk;\n use getopts::{optopt, optflag, reqopt};\n@@ -237,7 +237,7 @@ pub fn run_tests(config: &Config) {\n     // sadly osx needs some file descriptor limits raised for running tests in\n     // parallel (especially when we have lots and lots of child processes).\n     // For context, see #8904\n-    io::test::raise_fd_limit();\n+    old_io::test::raise_fd_limit();\n     // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n     // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n     os::setenv(\"__COMPAT_LAYER\", \"RunAsInvoker\");"}, {"sha": "868512c7943fa98be841c60dd74a3a5d738a11a7", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n use self::WhichLine::*;\n \n-use std::io::{BufferedReader, File};\n+use std::old_io::{BufferedReader, File};\n \n pub struct ExpectedError {\n     pub line: uint,"}, {"sha": "8458d880d05a180a447dac49c54756abe6f259fa", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -223,7 +223,7 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n fn iter_header<F>(testfile: &Path, mut it: F) -> bool where\n     F: FnMut(&str) -> bool,\n {\n-    use std::io::{BufferedReader, File};\n+    use std::old_io::{BufferedReader, File};\n \n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {"}, {"sha": "60b040cd4aca2f8acd840423899f69b6fd0ee3aa", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::process::{ProcessExit, Command, Process, ProcessOutput};\n+use std::old_io::process::{ProcessExit, Command, Process, ProcessOutput};\n use std::dynamic_lib::DynamicLibrary;\n \n fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {"}, {"sha": "b093a53eee99b826e724002d7deb1acd5bd69dbd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -23,14 +23,14 @@ use util;\n \n #[cfg(target_os = \"windows\")]\n use std::ascii::AsciiExt;\n-use std::io::File;\n-use std::io::fs::PathExtensions;\n-use std::io::fs;\n-use std::io::net::tcp;\n-use std::io::process::ProcessExit;\n-use std::io::process;\n-use std::io::timer;\n-use std::io;\n+use std::old_io::File;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::fs;\n+use std::old_io::net::tcp;\n+use std::old_io::process::ProcessExit;\n+use std::old_io::process;\n+use std::old_io::timer;\n+use std::old_io;\n use std::os;\n use std::iter::repeat;\n use std::str;\n@@ -619,7 +619,7 @@ fn find_rust_src_root(config: &Config) -> Option<Path> {\n }\n \n fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path) {\n-    use std::io::process::{Command, ProcessOutput};\n+    use std::old_io::process::{Command, ProcessOutput};\n \n     if config.lldb_python_dir.is_none() {\n         fatal(\"Can't run LLDB test because LLDB's python path is not set.\");\n@@ -764,7 +764,7 @@ struct DebuggerCommands {\n \n fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n                            -> DebuggerCommands {\n-    use std::io::{BufferedReader, File};\n+    use std::old_io::{BufferedReader, File};\n \n     let command_directive = format!(\"{}-command\", debugger_prefix);\n     let check_directive = format!(\"{}-check\", debugger_prefix);\n@@ -1224,7 +1224,7 @@ fn compose_and_run_compiler(\n \n fn ensure_dir(path: &Path) {\n     if path.is_dir() { return; }\n-    fs::mkdir(path, io::USER_RWX).unwrap();\n+    fs::mkdir(path, old_io::USER_RWX).unwrap();\n }\n \n fn compose_and_run(config: &Config, testfile: &Path,"}, {"sha": "f01b62223ca813b7123cb76e360b2ac850e4e0cc", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -75,14 +75,14 @@ Let's get to it! The first thing we need to do for our guessing game is\n allow our player to input a guess. Put this in your `src/main.rs`:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n \n fn main() {\n     println!(\"Guess the number!\");\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -121,7 +121,7 @@ explanatory text, and then an example. Let's try to modify our code to add in th\n `random` function and see what happens:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n use std::rand;\n \n fn main() {\n@@ -133,7 +133,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -180,7 +180,7 @@ This says \"please give me a random `i32` value.\" We can change our code to use\n this hint:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n \n fn main() {\n@@ -192,7 +192,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -233,7 +233,7 @@ unsigned integer approach. If we want a random positive number, we should ask fo\n a random positive number. Our code looks like this now:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n \n fn main() {\n@@ -245,7 +245,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -276,7 +276,7 @@ two numbers. Let's add that in, along with a `match` statement to compare our\n guess to the secret number:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -289,7 +289,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -331,7 +331,7 @@ but we've given it unsigned integers. In this case, the fix is easy, because\n we wrote the `cmp` function! Let's change it to take `u32`s:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -344,7 +344,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n \n@@ -397,7 +397,7 @@ Anyway, we have a `String`, but we need a `u32`. What to do? Well, there's\n a function for that:\n \n ```{rust,ignore}\n-let input = io::stdin().read_line()\n+let input = old_io::stdin().read_line()\n                        .ok()\n                        .expect(\"Failed to read line\");\n let input_num: Option<u32> = input.parse();\n@@ -429,7 +429,7 @@ let input_num: Option<u32> = \"5\".parse(); // input_num: Option<u32>\n Anyway, with us now converting our input to a number, our code looks like this:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -442,7 +442,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n     let input_num: Option<u32> = input.parse();\n@@ -479,7 +479,7 @@ need to unwrap the Option. If you remember from before, `match` is a great way\n to do that. Try this code:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -492,7 +492,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n     let input_num: Option<u32> = input.parse();\n@@ -546,7 +546,7 @@ method we can use defined on them: `trim()`. One small modification, and our\n code looks like this:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -559,7 +559,7 @@ fn main() {\n \n     println!(\"Please input your guess.\");\n \n-    let input = io::stdin().read_line()\n+    let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n     let input_num: Option<u32> = input.trim().parse();\n@@ -620,7 +620,7 @@ As we already discussed, the `loop` keyword gives us an infinite loop.\n Let's add that in:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -635,7 +635,7 @@ fn main() {\n \n         println!(\"Please input your guess.\");\n \n-        let input = io::stdin().read_line()\n+        let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n         let input_num: Option<u32> = input.trim().parse();\n@@ -696,7 +696,7 @@ Ha! `quit` actually quits. As does any other non-number input. Well, this is\n suboptimal to say the least. First, let's actually quit when you win the game:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -711,7 +711,7 @@ fn main() {\n \n         println!(\"Please input your guess.\");\n \n-        let input = io::stdin().read_line()\n+        let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n         let input_num: Option<u32> = input.trim().parse();\n@@ -752,7 +752,7 @@ we don't want to quit, we just want to ignore it. Change that `return` to\n \n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -767,7 +767,7 @@ fn main() {\n \n         println!(\"Please input your guess.\");\n \n-        let input = io::stdin().read_line()\n+        let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n         let input_num: Option<u32> = input.trim().parse();\n@@ -831,7 +831,7 @@ think of what it is? That's right, we don't want to print out the secret number.\n It was good for testing, but it kind of ruins the game. Here's our final source:\n \n ```{rust,no_run}\n-use std::io;\n+use std::old_io;\n use std::rand;\n use std::cmp::Ordering;\n \n@@ -844,7 +844,7 @@ fn main() {\n \n         println!(\"Please input your guess.\");\n \n-        let input = io::stdin().read_line()\n+        let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n         let input_num: Option<u32> = input.trim().parse();"}, {"sha": "0c26fb2b44fa4d9509df78a791a6c5b84b9894f8", "filename": "src/doc/trpl/standard-input.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@ and then prints it back out:\n fn main() {\n     println!(\"Type something!\");\n \n-    let input = std::io::stdin().read_line().ok().expect(\"Failed to read line\");\n+    let input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n \n     println!(\"{}\", input);\n }\n@@ -17,7 +17,7 @@ fn main() {\n Let's go over these chunks, one by one:\n \n ```{rust,ignore}\n-std::io::stdin();\n+std::old_io::stdin();\n ```\n \n This calls a function, `stdin()`, that lives inside the `std::io` module. As\n@@ -28,7 +28,7 @@ Since writing the fully qualified name all the time is annoying, we can use\n the `use` statement to import it in:\n \n ```{rust}\n-use std::io::stdin;\n+use std::old_io::stdin;\n \n stdin();\n ```\n@@ -37,20 +37,20 @@ However, it's considered better practice to not import individual functions, but\n to import the module, and only use one level of qualification:\n \n ```{rust}\n-use std::io;\n+use std::old_io;\n \n-io::stdin();\n+old_io::stdin();\n ```\n \n Let's update our example to use this style:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n \n fn main() {\n     println!(\"Type something!\");\n \n-    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+    let input = old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n \n     println!(\"{}\", input);\n }\n@@ -121,12 +121,12 @@ For now, this gives you enough of a basic understanding to work with.\n Back to the code we were working on! Here's a refresher:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n \n fn main() {\n     println!(\"Type something!\");\n \n-    let input = io::stdin().read_line().ok().expect(\"Failed to read line\");\n+    let input = old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n \n     println!(\"{}\", input);\n }\n@@ -136,14 +136,14 @@ With long lines like this, Rust gives you some flexibility with the whitespace.\n We _could_ write the example like this:\n \n ```{rust,ignore}\n-use std::io;\n+use std::old_io;\n \n fn main() {\n     println!(\"Type something!\");\n \n     // here, we'll show the types at each step\n \n-    let input = io::stdin() // std::io::stdio::StdinReader\n+    let input = old_io::stdin() // std::old_io::stdio::StdinReader\n                   .read_line() // IoResult<String>\n                   .ok() // Option<String>\n                   .expect(\"Failed to read line\"); // String"}, {"sha": "7bb11fb5d927331d80be5b2a9028748ad85745ef", "filename": "src/libcore/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -49,7 +49,7 @@\n //!\n //! ```\n //! use std::error::FromError;\n-//! use std::io::{File, IoError};\n+//! use std::old_io::{File, IoError};\n //! use std::os::{MemoryMap, MapError};\n //! use std::path::Path;\n //!"}, {"sha": "28463c0f04ca3f4e4815da9451ef04c230cf4919", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -95,7 +95,7 @@\n //! by the [`Writer`](../io/trait.Writer.html) trait:\n //!\n //! ```\n-//! use std::io::IoError;\n+//! use std::old_io::IoError;\n //!\n //! trait Writer {\n //!     fn write_line(&mut self, s: &str) -> Result<(), IoError>;\n@@ -110,7 +110,7 @@\n //! something like this:\n //!\n //! ```{.ignore}\n-//! use std::io::{File, Open, Write};\n+//! use std::old_io::{File, Open, Write};\n //!\n //! let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! // If `write_line` errors, then we'll never know, because the return\n@@ -128,7 +128,7 @@\n //! a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n-//! use std::io::{File, Open, Write};\n+//! use std::old_io::{File, Open, Write};\n //!\n //! let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! file.write_line(\"important message\").ok().expect(\"failed to write message\");\n@@ -138,7 +138,7 @@\n //! You might also simply assert success:\n //!\n //! ```{.no_run}\n-//! # use std::io::{File, Open, Write};\n+//! # use std::old_io::{File, Open, Write};\n //!\n //! # let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! assert!(file.write_line(\"important message\").is_ok());\n@@ -148,7 +148,7 @@\n //! Or propagate the error up the call stack with `try!`:\n //!\n //! ```\n-//! # use std::io::{File, Open, Write, IoError};\n+//! # use std::old_io::{File, Open, Write, IoError};\n //! fn write_message() -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //!     try!(file.write_line(\"important message\"));\n@@ -167,7 +167,7 @@\n //! It replaces this:\n //!\n //! ```\n-//! use std::io::{File, Open, Write, IoError};\n+//! use std::old_io::{File, Open, Write, IoError};\n //!\n //! struct Info {\n //!     name: String,\n@@ -191,7 +191,7 @@\n //! With this:\n //!\n //! ```\n-//! use std::io::{File, Open, Write, IoError};\n+//! use std::old_io::{File, Open, Write, IoError};\n //!\n //! struct Info {\n //!     name: String,\n@@ -444,7 +444,7 @@ impl<T, E> Result<T, E> {\n     /// ignoring I/O and parse errors:\n     ///\n     /// ```\n-    /// use std::io::IoResult;\n+    /// use std::old_io::IoResult;\n     ///\n     /// let mut buffer = &mut b\"1\\n2\\n3\\n4\\n\";\n     ///"}, {"sha": "ebe2487215a11a6bc0b573cd930da478ed82b0de", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -96,7 +96,7 @@\n //! ```no_run\n //! # pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n //! pub fn main() {\n-//!     use std::io::File;\n+//!     use std::old_io::File;\n //!     let mut f = File::create(&Path::new(\"example1.dot\"));\n //!     render_to(&mut f)\n //! }\n@@ -188,7 +188,7 @@\n //! ```no_run\n //! # pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n //! pub fn main() {\n-//!     use std::io::File;\n+//!     use std::old_io::File;\n //!     let mut f = File::create(&Path::new(\"example2.dot\"));\n //!     render_to(&mut f)\n //! }\n@@ -252,7 +252,7 @@\n //! ```no_run\n //! # pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n //! pub fn main() {\n-//!     use std::io::File;\n+//!     use std::old_io::File;\n //!     let mut f = File::create(&Path::new(\"example3.dot\"));\n //!     render_to(&mut f)\n //! }\n@@ -279,7 +279,7 @@\n use self::LabelText::*;\n \n use std::borrow::IntoCow;\n-use std::io;\n+use std::old_io;\n use std::string::CowString;\n use std::vec::CowVec;\n \n@@ -532,7 +532,7 @@ pub fn default_options() -> Vec<RenderOption> { vec![] }\n /// (Simple wrapper around `render_opts` that passes a default set of options.)\n pub fn render<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(\n               g: &'a G,\n-              w: &mut W) -> io::IoResult<()> {\n+              w: &mut W) -> old_io::IoResult<()> {\n     render_opts(g, w, &[])\n }\n \n@@ -541,14 +541,14 @@ pub fn render<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>,\n pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(\n               g: &'a G,\n               w: &mut W,\n-              options: &[RenderOption]) -> io::IoResult<()>\n+              options: &[RenderOption]) -> old_io::IoResult<()>\n {\n-    fn writeln<W:Writer>(w: &mut W, arg: &[&str]) -> io::IoResult<()> {\n+    fn writeln<W:Writer>(w: &mut W, arg: &[&str]) -> old_io::IoResult<()> {\n         for &s in arg.iter() { try!(w.write_str(s)); }\n         w.write_char('\\n')\n     }\n \n-    fn indent<W:Writer>(w: &mut W) -> io::IoResult<()> {\n+    fn indent<W:Writer>(w: &mut W) -> old_io::IoResult<()> {\n         w.write_str(\"    \")\n     }\n \n@@ -590,7 +590,7 @@ mod tests {\n     use self::NodeLabels::*;\n     use super::{Id, Labeller, Nodes, Edges, GraphWalk, render};\n     use super::LabelText::{self, LabelStr, EscStr};\n-    use std::io::IoResult;\n+    use std::old_io::IoResult;\n     use std::borrow::IntoCow;\n     use std::iter::repeat;\n "}, {"sha": "6712f153c0953ed7b25305c21b4447f06e3c4cf1", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -174,8 +174,8 @@\n \n use std::cell::RefCell;\n use std::fmt;\n-use std::io::LineBufferedWriter;\n-use std::io;\n+use std::old_io::LineBufferedWriter;\n+use std::old_io;\n use std::mem;\n use std::os;\n use std::ptr;\n@@ -232,7 +232,7 @@ pub trait Logger {\n }\n \n struct DefaultLogger {\n-    handle: LineBufferedWriter<io::stdio::StdWriter>,\n+    handle: LineBufferedWriter<old_io::stdio::StdWriter>,\n }\n \n /// Wraps the log level with fmt implementations.\n@@ -294,7 +294,7 @@ pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) {\n     let mut logger = LOCAL_LOGGER.with(|s| {\n         s.borrow_mut().take()\n     }).unwrap_or_else(|| {\n-        box DefaultLogger { handle: io::stderr() } as Box<Logger + Send>\n+        box DefaultLogger { handle: old_io::stderr() } as Box<Logger + Send>\n     });\n     logger.log(&LogRecord {\n         level: LogLevel(level),"}, {"sha": "d23f5c6835966e262af4da8cf2dc87a6846728c1", "filename": "src/librbml/io.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{IoError, IoResult, SeekStyle};\n-use std::io;\n+use std::old_io::{IoError, IoResult, SeekStyle};\n+use std::old_io;\n use std::slice;\n use std::iter::repeat;\n \n@@ -18,14 +18,14 @@ static BUF_CAPACITY: uint = 128;\n fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64> {\n     // compute offset as signed and clamp to prevent overflow\n     let pos = match seek {\n-        io::SeekSet => 0,\n-        io::SeekEnd => end,\n-        io::SeekCur => cur,\n+        old_io::SeekSet => 0,\n+        old_io::SeekEnd => end,\n+        old_io::SeekCur => cur,\n     } as i64;\n \n     if offset + pos < 0 {\n         Err(IoError {\n-            kind: io::InvalidInput,\n+            kind: old_io::InvalidInput,\n             desc: \"invalid seek to a negative offset\",\n             detail: None\n         })\n@@ -132,7 +132,7 @@ impl Seek for SeekableMemWriter {\n mod tests {\n     extern crate test;\n     use super::SeekableMemWriter;\n-    use std::io;\n+    use std::old_io;\n     use std::iter::repeat;\n     use test::Bencher;\n \n@@ -148,23 +148,23 @@ mod tests {\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n-        writer.seek(0, io::SeekSet).unwrap();\n+        writer.seek(0, old_io::SeekSet).unwrap();\n         assert_eq!(writer.tell(), Ok(0));\n         writer.write(&[3, 4]).unwrap();\n         let b: &[_] = &[3, 4, 2, 3, 4, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n-        writer.seek(1, io::SeekCur).unwrap();\n+        writer.seek(1, old_io::SeekCur).unwrap();\n         writer.write(&[0, 1]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n-        writer.seek(-1, io::SeekEnd).unwrap();\n+        writer.seek(-1, old_io::SeekEnd).unwrap();\n         writer.write(&[1, 2]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2];\n         assert_eq!(writer.get_ref(), b);\n \n-        writer.seek(1, io::SeekEnd).unwrap();\n+        writer.seek(1, old_io::SeekEnd).unwrap();\n         writer.write(&[1]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2, 0, 1];\n         assert_eq!(writer.get_ref(), b);\n@@ -173,14 +173,14 @@ mod tests {\n     #[test]\n     fn seek_past_end() {\n         let mut r = SeekableMemWriter::new();\n-        r.seek(10, io::SeekSet).unwrap();\n+        r.seek(10, old_io::SeekSet).unwrap();\n         assert!(r.write(&[3]).is_ok());\n     }\n \n     #[test]\n     fn seek_before_0() {\n         let mut r = SeekableMemWriter::new();\n-        assert!(r.seek(-1, io::SeekSet).is_err());\n+        assert!(r.seek(-1, old_io::SeekSet).is_err());\n     }\n \n     fn do_bench_seekable_mem_writer(b: &mut Bencher, times: uint, len: uint) {"}, {"sha": "56944fac35ef71f5821d888bb8fe1dcb4ef44c77", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -111,7 +111,7 @@ pub enum EbmlEncoderTag {\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),\n-    IoError(std::io::IoError),\n+    IoError(std::old_io::IoError),\n     ApplicationError(String)\n }\n \n@@ -127,7 +127,7 @@ pub mod reader {\n     use std::char;\n \n     use std::int;\n-    use std::io::extensions::u64_from_be_bytes;\n+    use std::old_io::extensions::u64_from_be_bytes;\n     use std::mem::transmute;\n     use std::num::Int;\n     use std::option::Option;\n@@ -685,9 +685,9 @@ pub mod reader {\n \n pub mod writer {\n     use std::clone::Clone;\n-    use std::io::extensions::u64_to_be_bytes;\n-    use std::io::{Writer, Seek};\n-    use std::io;\n+    use std::old_io::extensions::u64_to_be_bytes;\n+    use std::old_io::{Writer, Seek};\n+    use std::old_io;\n     use std::mem;\n \n     use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n@@ -698,7 +698,7 @@ pub mod writer {\n     use serialize;\n \n \n-    pub type EncodeResult = io::IoResult<()>;\n+    pub type EncodeResult = old_io::IoResult<()>;\n \n     // rbml writing\n     pub struct Encoder<'a, W:'a> {\n@@ -714,8 +714,8 @@ pub mod writer {\n                             n as u8]),\n             4u => w.write(&[0x10u8 | ((n >> 24_u) as u8), (n >> 16_u) as u8,\n                             (n >> 8_u) as u8, n as u8]),\n-            _ => Err(io::IoError {\n-                kind: io::OtherIoError,\n+            _ => Err(old_io::IoError {\n+                kind: old_io::OtherIoError,\n                 desc: \"int too big\",\n                 detail: Some(format!(\"{}\", n))\n             })\n@@ -727,8 +727,8 @@ pub mod writer {\n         if n < 0x4000_u { return write_sized_vuint(w, n, 2u); }\n         if n < 0x200000_u { return write_sized_vuint(w, n, 3u); }\n         if n < 0x10000000_u { return write_sized_vuint(w, n, 4u); }\n-        Err(io::IoError {\n-            kind: io::OtherIoError,\n+        Err(old_io::IoError {\n+            kind: old_io::OtherIoError,\n             desc: \"int too big\",\n             detail: Some(format!(\"{}\", n))\n         })\n@@ -766,10 +766,10 @@ pub mod writer {\n         pub fn end_tag(&mut self) -> EncodeResult {\n             let last_size_pos = self.size_positions.pop().unwrap();\n             let cur_pos = try!(self.writer.tell());\n-            try!(self.writer.seek(last_size_pos as i64, io::SeekSet));\n+            try!(self.writer.seek(last_size_pos as i64, old_io::SeekSet));\n             let size = cur_pos as uint - last_size_pos - 4;\n             try!(write_sized_vuint(self.writer, size, 4u));\n-            let r = try!(self.writer.seek(cur_pos as i64, io::SeekSet));\n+            let r = try!(self.writer.seek(cur_pos as i64, old_io::SeekSet));\n \n             debug!(\"End tag (size = {:?})\", size);\n             Ok(r)\n@@ -883,7 +883,7 @@ pub mod writer {\n     }\n \n     impl<'a, W: Writer + Seek> serialize::Encoder for Encoder<'a, W> {\n-        type Error = io::IoError;\n+        type Error = old_io::IoError;\n \n         fn emit_nil(&mut self) -> EncodeResult {\n             Ok(())"}, {"sha": "e6f76dedca95f55ae4cce36a2535956992b27c3f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -34,8 +34,8 @@ use middle::astencode::vtable_decoder_helpers;\n \n use std::collections::HashMap;\n use std::hash::{self, Hash, SipHasher};\n-use std::io::extensions::u64_from_be_bytes;\n-use std::io;\n+use std::old_io::extensions::u64_from_be_bytes;\n+use std::old_io;\n use std::num::FromPrimitive;\n use std::rc::Rc;\n use std::str;\n@@ -1178,7 +1178,7 @@ fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> {\n }\n \n fn list_crate_attributes(md: rbml::Doc, hash: &Svh,\n-                         out: &mut io::Writer) -> io::IoResult<()> {\n+                         out: &mut old_io::Writer) -> old_io::IoResult<()> {\n     try!(write!(out, \"=Crate Attributes ({})=\\n\", *hash));\n \n     let r = get_attributes(md);\n@@ -1223,7 +1223,7 @@ pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {\n     return deps;\n }\n \n-fn list_crate_deps(data: &[u8], out: &mut io::Writer) -> io::IoResult<()> {\n+fn list_crate_deps(data: &[u8], out: &mut old_io::Writer) -> old_io::IoResult<()> {\n     try!(write!(out, \"=External Dependencies=\\n\"));\n     for dep in get_crate_deps(data).iter() {\n         try!(write!(out, \"{} {}-{}\\n\", dep.cnum, dep.name, dep.hash));\n@@ -1262,7 +1262,7 @@ pub fn get_crate_name(data: &[u8]) -> String {\n     maybe_get_crate_name(data).expect(\"no crate name in crate\")\n }\n \n-pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Writer) -> io::IoResult<()> {\n+pub fn list_crate_metadata(bytes: &[u8], out: &mut old_io::Writer) -> old_io::IoResult<()> {\n     let hash = get_crate_hash(bytes);\n     let md = rbml::Doc::new(bytes);\n     try!(list_crate_attributes(md, &hash, out));"}, {"sha": "26046cfb43d8a410cb5d021b5634b7998a258547", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,8 +13,8 @@\n pub use self::FileMatch::*;\n \n use std::collections::HashSet;\n-use std::io::fs::PathExtensions;\n-use std::io::fs;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::fs;\n use std::os;\n \n use util::fs as myfs;"}, {"sha": "3ee4017292c4c7f1251454952591e73d0362b0e3", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -231,8 +231,8 @@ use rustc_back::target::Target;\n use std::ffi::CString;\n use std::cmp;\n use std::collections::HashMap;\n-use std::io::fs::PathExtensions;\n-use std::io;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io;\n use std::ptr;\n use std::slice;\n use std::time::Duration;\n@@ -796,7 +796,7 @@ pub fn read_meta_section_name(is_osx: bool) -> &'static str {\n \n // A diagnostic function for dumping crate metadata to an output stream\n pub fn list_file_metadata(is_osx: bool, path: &Path,\n-                          out: &mut io::Writer) -> io::IoResult<()> {\n+                          out: &mut old_io::Writer) -> old_io::IoResult<()> {\n     match get_metadata_section(is_osx, path) {\n         Ok(bytes) => decoder::list_crate_metadata(bytes.as_slice(), out),\n         Err(msg) => {"}, {"sha": "091ef9d52eb40e9aef1fdc9d7017f8b7e3b724d9", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -37,7 +37,7 @@ use syntax::parse::token;\n use syntax::ptr::P;\n use syntax;\n \n-use std::io::Seek;\n+use std::old_io::Seek;\n use std::rc::Rc;\n \n use rbml::io::SeekableMemWriter;"}, {"sha": "d3c843d1d50c3112dc7d8f3c7988bb5dca5ea169", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@ pub use self::EntryOrExit::*;\n use middle::cfg;\n use middle::cfg::CFGIndex;\n use middle::ty;\n-use std::io;\n+use std::old_io;\n use std::uint;\n use std::iter::repeat;\n use syntax::ast;\n@@ -105,7 +105,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> {\n     fn pre(&self,\n            ps: &mut pprust::State,\n-           node: pprust::AnnNode) -> io::IoResult<()> {\n+           node: pprust::AnnNode) -> old_io::IoResult<()> {\n         let id = match node {\n             pprust::NodeIdent(_) | pprust::NodeName(_) => 0,\n             pprust::NodeExpr(expr) => expr.id,\n@@ -457,13 +457,13 @@ impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n \n         debug!(\"Dataflow result for {}:\", self.analysis_name);\n         debug!(\"{}\", {\n-            self.pretty_print_to(box io::stderr(), blk).unwrap();\n+            self.pretty_print_to(box old_io::stderr(), blk).unwrap();\n             \"\"\n         });\n     }\n \n-    fn pretty_print_to(&self, wr: Box<io::Writer+'static>,\n-                       blk: &ast::Block) -> io::IoResult<()> {\n+    fn pretty_print_to(&self, wr: Box<old_io::Writer+'static>,\n+                       blk: &ast::Block) -> old_io::IoResult<()> {\n         let mut ps = pprust::rust_printer_annotated(wr, self);\n         try!(ps.cbox(pprust::indent_unit));\n         try!(ps.ibox(0u));"}, {"sha": "8803fe7cf38a93ef9ae72cc9a41cf48a3b5cdedf", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n use std::collections::hash_map::Entry::Vacant;\n-use std::io::{self, File};\n+use std::old_io::{self, File};\n use std::os;\n use std::sync::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};\n use syntax::ast;\n@@ -217,7 +217,7 @@ pub type ConstraintMap<'tcx> = FnvHashMap<Constraint, SubregionOrigin<'tcx>>;\n \n fn dump_region_constraints_to<'a, 'tcx:'a >(tcx: &'a ty::ctxt<'tcx>,\n                                             map: &ConstraintMap<'tcx>,\n-                                            path: &str) -> io::IoResult<()> {\n+                                            path: &str) -> old_io::IoResult<()> {\n     debug!(\"dump_region_constraints map (len: {}) path: {}\", map.len(), path);\n     let g = ConstraintGraph::new(tcx, format!(\"region_constraints\"), map);\n     let mut f = File::create(&Path::new(path));"}, {"sha": "00fa6546b4805e8fd2740e88ea39e4d7375434d1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -118,7 +118,7 @@ use middle::ty::ClosureTyper;\n use lint;\n use util::nodemap::NodeMap;\n \n-use std::{fmt, io, uint};\n+use std::{fmt, old_io, uint};\n use std::rc::Rc;\n use std::iter::repeat;\n use syntax::ast::{self, NodeId, Expr};\n@@ -693,10 +693,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn write_vars<F>(&self,\n-                     wr: &mut io::Writer,\n+                     wr: &mut old_io::Writer,\n                      ln: LiveNode,\n                      mut test: F)\n-                     -> io::IoResult<()> where\n+                     -> old_io::IoResult<()> where\n         F: FnMut(uint) -> LiveNode,\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n@@ -740,7 +740,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn ln_str(&self, ln: LiveNode) -> String {\n         let mut wr = Vec::new();\n         {\n-            let wr = &mut wr as &mut io::Writer;\n+            let wr = &mut wr as &mut old_io::Writer;\n             write!(wr, \"[ln({:?}) of kind {:?} reads\", ln.get(), self.ir.lnk(ln));\n             self.write_vars(wr, ln, |idx| self.users[idx].reader);\n             write!(wr, \"  writes\");"}, {"sha": "ee8bc71668b357c34f650479223872dc272e5273", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,10 +10,10 @@\n \n //! A helper class for dealing with static archives\n \n-use std::io::fs::PathExtensions;\n-use std::io::process::{Command, ProcessOutput};\n-use std::io::{fs, TempDir};\n-use std::io;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::process::{Command, ProcessOutput};\n+use std::old_io::{fs, TempDir};\n+use std::old_io;\n use std::os;\n use std::str;\n use syntax::diagnostic::Handler as ErrorHandler;\n@@ -172,7 +172,7 @@ impl<'a> ArchiveBuilder<'a> {\n \n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n-    pub fn add_native_library(&mut self, name: &str) -> io::IoResult<()> {\n+    pub fn add_native_library(&mut self, name: &str) -> old_io::IoResult<()> {\n         let location = find_library(name,\n                                     &self.archive.slib_prefix[],\n                                     &self.archive.slib_suffix[],\n@@ -187,7 +187,7 @@ impl<'a> ArchiveBuilder<'a> {\n     /// This ignores adding the bytecode from the rlib, and if LTO is enabled\n     /// then the object file also isn't added.\n     pub fn add_rlib(&mut self, rlib: &Path, name: &str,\n-                    lto: bool) -> io::IoResult<()> {\n+                    lto: bool) -> old_io::IoResult<()> {\n         // Ignoring obj file starting with the crate name\n         // as simple comparison is not enough - there\n         // might be also an extra name suffix\n@@ -205,7 +205,7 @@ impl<'a> ArchiveBuilder<'a> {\n     }\n \n     /// Adds an arbitrary file to this archive\n-    pub fn add_file(&mut self, file: &Path) -> io::IoResult<()> {\n+    pub fn add_file(&mut self, file: &Path) -> old_io::IoResult<()> {\n         let filename = Path::new(file.filename().unwrap());\n         let new_file = self.work_dir.path().join(&filename);\n         try!(fs::copy(file, &new_file));\n@@ -274,8 +274,9 @@ impl<'a> ArchiveBuilder<'a> {\n         self.archive\n     }\n \n-    fn add_archive<F>(&mut self, archive: &Path, name: &str, mut skip: F) -> io::IoResult<()> where\n-        F: FnMut(&str) -> bool,\n+    fn add_archive<F>(&mut self, archive: &Path, name: &str,\n+                      mut skip: F) -> old_io::IoResult<()>\n+        where F: FnMut(&str) -> bool,\n     {\n         let loc = TempDir::new(\"rsar\").unwrap();\n "}, {"sha": "24f81b024789c1fdb19456cb9f584f4e957de4ca", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-use std::io::fs;\n+use std::old_io;\n+use std::old_io::fs;\n use std::os;\n \n /// Returns an absolute path in the filesystem that `path` points to. The\n /// returned path does not contain any symlinks in its hierarchy.\n-pub fn realpath(original: &Path) -> io::IoResult<Path> {\n+pub fn realpath(original: &Path) -> old_io::IoResult<Path> {\n     static MAX_LINKS_FOLLOWED: uint = 256;\n     let original = os::make_absolute(original).unwrap();\n \n@@ -32,12 +32,12 @@ pub fn realpath(original: &Path) -> io::IoResult<Path> {\n \n         loop {\n             if followed == MAX_LINKS_FOLLOWED {\n-                return Err(io::standard_error(io::InvalidInput))\n+                return Err(old_io::standard_error(old_io::InvalidInput))\n             }\n \n             match fs::lstat(&result) {\n                 Err(..) => break,\n-                Ok(ref stat) if stat.kind != io::FileType::Symlink => break,\n+                Ok(ref stat) if stat.kind != old_io::FileType::Symlink => break,\n                 Ok(..) => {\n                     followed += 1;\n                     let path = try!(fs::readlink(&result));\n@@ -53,10 +53,10 @@ pub fn realpath(original: &Path) -> io::IoResult<Path> {\n \n #[cfg(all(not(windows), test))]\n mod test {\n-    use std::io;\n-    use std::io::fs::{File, symlink, mkdir, mkdir_recursive};\n+    use std::old_io;\n+    use std::old_io::fs::{File, symlink, mkdir, mkdir_recursive};\n     use super::realpath;\n-    use std::io::TempDir;\n+    use std::old_io::TempDir;\n \n     #[test]\n     fn realpath_works() {\n@@ -68,7 +68,7 @@ mod test {\n         let linkdir = tmpdir.join(\"test3\");\n \n         File::create(&file).unwrap();\n-        mkdir(&dir, io::USER_RWX).unwrap();\n+        mkdir(&dir, old_io::USER_RWX).unwrap();\n         symlink(&file, &link).unwrap();\n         symlink(&dir, &linkdir).unwrap();\n \n@@ -91,8 +91,8 @@ mod test {\n         let e = d.join(\"e\");\n         let f = a.join(\"f\");\n \n-        mkdir_recursive(&b, io::USER_RWX).unwrap();\n-        mkdir_recursive(&d, io::USER_RWX).unwrap();\n+        mkdir_recursive(&b, old_io::USER_RWX).unwrap();\n+        mkdir_recursive(&d, old_io::USER_RWX).unwrap();\n         File::create(&f).unwrap();\n         symlink(&Path::new(\"../d/e\"), &c).unwrap();\n         symlink(&Path::new(\"../f\"), &e).unwrap();"}, {"sha": "bafd5fbe94487784e3219c900acb04b8a496eb16", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n \n use std::collections::HashSet;\n use std::os;\n-use std::io::IoError;\n+use std::old_io::IoError;\n use syntax::ast;\n \n pub struct RPathConfig<F, G> where"}, {"sha": "715bcc4f36dd0375679b9b5f439a45235d75ccd3", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{Command, IoError, OtherIoError};\n+use std::old_io::{Command, IoError, OtherIoError};\n use target::TargetOptions;\n \n use self::Arch::*;"}, {"sha": "36d83da725e813b5a785c2e7ea510deb371efa5c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -48,7 +48,7 @@\n use serialize::json::Json;\n use syntax::{diagnostic, abi};\n use std::default::Default;\n-use std::io::fs::PathExtensions;\n+use std::old_io::fs::PathExtensions;\n \n mod windows_base;\n mod linux_base;\n@@ -302,7 +302,7 @@ impl Target {\n     /// JSON decoding.\n     pub fn search(target: &str) -> Result<Target, String> {\n         use std::os;\n-        use std::io::File;\n+        use std::old_io::File;\n         use std::path::Path;\n         use serialize::json;\n "}, {"sha": "36a9c0e16f018e926c4675cfa25f1173dd11d6c7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -30,8 +30,8 @@ use rustc_privacy;\n \n use serialize::json;\n \n-use std::io;\n-use std::io::fs;\n+use std::old_io;\n+use std::old_io::fs;\n use std::os;\n use syntax::ast;\n use syntax::ast_map;\n@@ -787,14 +787,14 @@ fn write_out_deps(sess: &Session,\n         _ => return,\n     };\n \n-    let result = (|&:| -> io::IoResult<()> {\n+    let result = (|&:| -> old_io::IoResult<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n         let files: Vec<String> = sess.codemap().files.borrow()\n                                    .iter().filter(|fmap| fmap.is_real_file())\n                                    .map(|fmap| escape_dep_filename(&fmap.name[]))\n                                    .collect();\n-        let mut file = try!(io::File::create(&deps_filename));\n+        let mut file = try!(old_io::File::create(&deps_filename));\n         for path in out_filenames.iter() {\n             try!(write!(&mut file as &mut Writer,\n                           \"{}: {}\\n\\n\", path.display(), files.connect(\" \")));"}, {"sha": "fdda8e737a945ab74d6997ebcaf6f122feb3d3db", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -64,7 +64,7 @@ use rustc::metadata::creader::CrateOrString::Str;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;\n-use std::io;\n+use std::old_io;\n use std::iter::repeat;\n use std::os;\n use std::sync::mpsc::channel;\n@@ -133,7 +133,7 @@ fn run_compiler(args: &[String]) {\n         1u => {\n             let ifile = &matches.free[0][];\n             if ifile == \"-\" {\n-                let contents = io::stdin().read_to_end().unwrap();\n+                let contents = old_io::stdin().read_to_end().unwrap();\n                 let src = String::from_utf8(contents).unwrap();\n                 (Input::Str(src), None)\n             } else {\n@@ -187,7 +187,7 @@ fn run_compiler(args: &[String]) {\n     if r.contains(&(\"ls\".to_string())) {\n         match input {\n             Input::File(ref ifile) => {\n-                let mut stdout = io::stdout();\n+                let mut stdout = old_io::stdout();\n                 list_metadata(&sess, &(*ifile), &mut stdout).unwrap();\n             }\n             Input::Str(_) => {\n@@ -590,7 +590,7 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n }\n \n pub fn list_metadata(sess: &Session, path: &Path,\n-                     out: &mut io::Writer) -> io::IoResult<()> {\n+                     out: &mut old_io::Writer) -> old_io::IoResult<()> {\n     metadata::loader::list_file_metadata(sess.target.target.options.is_like_osx, path, out)\n }\n \n@@ -603,8 +603,8 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n     static STACK_SIZE: uint = 8 * 1024 * 1024; // 8MB\n \n     let (tx, rx) = channel();\n-    let w = io::ChanWriter::new(tx);\n-    let mut r = io::ChanReader::new(rx);\n+    let w = old_io::ChanWriter::new(tx);\n+    let mut r = old_io::ChanReader::new(rx);\n \n     let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n \n@@ -614,7 +614,7 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n         cfg = cfg.stack_size(STACK_SIZE);\n     }\n \n-    match cfg.scoped(move || { std::io::stdio::set_stderr(box w); f() }).join() {\n+    match cfg.scoped(move || { std::old_io::stdio::set_stderr(box w); f() }).join() {\n         Ok(()) => { /* fallthrough */ }\n         Err(value) => {\n             // Thread panicked without emitting a fatal diagnostic\n@@ -656,7 +656,7 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n             // Panic so the process returns a failure code, but don't pollute the\n             // output with some unnecessary panic messages, we've already\n             // printed everything that we needed to.\n-            io::stdio::set_stderr(box io::util::NullWriter);\n+            old_io::stdio::set_stderr(box old_io::util::NullWriter);\n             panic!();\n         }\n     }"}, {"sha": "b09e9f14357776125a8f1d003b2724d92d66f081", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -38,7 +38,7 @@ use syntax::ptr::P;\n \n use graphviz as dot;\n \n-use std::io::{self, MemReader};\n+use std::old_io::{self, MemReader};\n use std::option;\n use std::str::FromStr;\n \n@@ -208,15 +208,15 @@ impl<'ast> PrinterSupport<'ast> for IdentifiedAnnotation<'ast> {\n impl<'ast> pprust::PpAnn for IdentifiedAnnotation<'ast> {\n     fn pre(&self,\n            s: &mut pprust::State,\n-           node: pprust::AnnNode) -> io::IoResult<()> {\n+           node: pprust::AnnNode) -> old_io::IoResult<()> {\n         match node {\n             pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n     fn post(&self,\n             s: &mut pprust::State,\n-            node: pprust::AnnNode) -> io::IoResult<()> {\n+            node: pprust::AnnNode) -> old_io::IoResult<()> {\n         match node {\n             pprust::NodeIdent(_) | pprust::NodeName(_) => Ok(()),\n \n@@ -259,7 +259,7 @@ impl<'ast> PrinterSupport<'ast> for HygieneAnnotation<'ast> {\n impl<'ast> pprust::PpAnn for HygieneAnnotation<'ast> {\n     fn post(&self,\n             s: &mut pprust::State,\n-            node: pprust::AnnNode) -> io::IoResult<()> {\n+            node: pprust::AnnNode) -> old_io::IoResult<()> {\n         match node {\n             pprust::NodeIdent(&ast::Ident { name: ast::Name(nm), ctxt }) => {\n                 try!(pp::space(&mut s.s));\n@@ -294,15 +294,15 @@ impl<'tcx> PrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n impl<'tcx> pprust::PpAnn for TypedAnnotation<'tcx> {\n     fn pre(&self,\n            s: &mut pprust::State,\n-           node: pprust::AnnNode) -> io::IoResult<()> {\n+           node: pprust::AnnNode) -> old_io::IoResult<()> {\n         match node {\n             pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n     fn post(&self,\n             s: &mut pprust::State,\n-            node: pprust::AnnNode) -> io::IoResult<()> {\n+            node: pprust::AnnNode) -> old_io::IoResult<()> {\n         let tcx = &self.analysis.ty_cx;\n         match node {\n             pprust::NodeExpr(expr) => {\n@@ -548,9 +548,9 @@ pub fn pretty_print_input(sess: Session,\n     let mut rdr = MemReader::new(src);\n \n     let out = match ofile {\n-        None => box io::stdout() as Box<Writer+'static>,\n+        None => box old_io::stdout() as Box<Writer+'static>,\n         Some(p) => {\n-            let r = io::File::create(&p);\n+            let r = old_io::File::create(&p);\n             match r {\n                 Ok(w) => box w as Box<Writer+'static>,\n                 Err(e) => panic!(\"print-print failed to open {} due to {}\",\n@@ -643,11 +643,11 @@ pub fn pretty_print_input(sess: Session,\n     }.unwrap()\n }\n \n-fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n+fn print_flowgraph<W:old_io::Writer>(variants: Vec<borrowck_dot::Variant>,\n                                  analysis: ty::CrateAnalysis,\n                                  code: blocks::Code,\n                                  mode: PpFlowGraphMode,\n-                                 mut out: W) -> io::IoResult<()> {\n+                                 mut out: W) -> old_io::IoResult<()> {\n     let ty_cx = &analysis.ty_cx;\n     let cfg = match code {\n         blocks::BlockCode(block) => cfg::CFG::new(ty_cx, &*block),\n@@ -687,11 +687,11 @@ fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n         }\n     }\n \n-    fn expand_err_details(r: io::IoResult<()>) -> io::IoResult<()> {\n+    fn expand_err_details(r: old_io::IoResult<()>) -> old_io::IoResult<()> {\n         r.map_err(|ioerr| {\n             let orig_detail = ioerr.detail.clone();\n             let m = \"graphviz::render failed\";\n-            io::IoError {\n+            old_io::IoError {\n                 detail: Some(match orig_detail {\n                     None => m.to_string(),\n                     Some(d) => format!(\"{}: {}\", m, d)"}, {"sha": "25fe194257969f751a27f7aace5caa4ee844a392", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -27,9 +27,9 @@ use util::common::time;\n use util::ppaux;\n use util::sha2::{Digest, Sha256};\n \n-use std::io::fs::PathExtensions;\n-use std::io::{fs, TempDir, Command};\n-use std::io;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::{fs, TempDir, Command};\n+use std::old_io;\n use std::mem;\n use std::str;\n use std::string::String;\n@@ -425,7 +425,7 @@ pub fn invalid_output_for_target(sess: &Session,\n fn is_writeable(p: &Path) -> bool {\n     match p.stat() {\n         Err(..) => true,\n-        Ok(m) => m.perm & io::USER_WRITE == io::USER_WRITE\n+        Ok(m) => m.perm & old_io::USER_WRITE == old_io::USER_WRITE\n     }\n }\n \n@@ -671,7 +671,7 @@ fn link_rlib<'a>(sess: &'a Session,\n \n fn write_rlib_bytecode_object_v1<T: Writer>(writer: &mut T,\n                                             bc_data_deflated: &[u8])\n-                                         -> ::std::io::IoResult<()> {\n+                                         -> ::std::old_io::IoResult<()> {\n     let bc_data_deflated_size: u64 = bc_data_deflated.len() as u64;\n \n     try! { writer.write(RLIB_BYTECODE_OBJECT_MAGIC) };\n@@ -1201,7 +1201,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n                 // Fix up permissions of the copy, as fs::copy() preserves\n                 // permissions, but the original file may have been installed\n                 // by a package manager and may be read-only.\n-                match fs::chmod(&dst, io::USER_READ | io::USER_WRITE) {\n+                match fs::chmod(&dst, old_io::USER_READ | old_io::USER_WRITE) {\n                     Ok(..) => {}\n                     Err(e) => {\n                         sess.err(&format!(\"failed to chmod {} when preparing \\"}, {"sha": "370ea0c7b1435a2b1b985d1dfb910fdcc41e71cd", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -23,8 +23,8 @@ use syntax::diagnostic;\n use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n \n use std::ffi::{self, CString};\n-use std::io::Command;\n-use std::io::fs;\n+use std::old_io::Command;\n+use std::old_io::fs;\n use std::iter::Unfold;\n use std::ptr;\n use std::str;\n@@ -728,9 +728,9 @@ pub fn run_passes(sess: &Session,\n             println!(\"{:?}\", &cmd);\n         }\n \n-        cmd.stdin(::std::io::process::Ignored)\n-           .stdout(::std::io::process::InheritFd(1))\n-           .stderr(::std::io::process::InheritFd(2));\n+        cmd.stdin(::std::old_io::process::Ignored)\n+           .stdout(::std::old_io::process::InheritFd(1))\n+           .stderr(::std::old_io::process::InheritFd(2));\n         match cmd.status() {\n             Ok(status) => {\n                 if !status.success() {"}, {"sha": "7e7176d661c6fa0781b79d82795af9dcc7d70d13", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -33,7 +33,7 @@ use middle::def;\n use middle::ty::{self, Ty};\n \n use std::cell::Cell;\n-use std::io::{self, File, fs};\n+use std::old_io::{self, File, fs};\n use std::os;\n \n use syntax::ast_util::{self, PostExpansionMethod};\n@@ -1532,7 +1532,7 @@ pub fn process_crate(sess: &Session,\n         },\n     };\n \n-    match fs::mkdir_recursive(&root_path, io::USER_RWX) {\n+    match fs::mkdir_recursive(&root_path, old_io::USER_RWX) {\n         Err(e) => sess.err(&format!(\"Could not create directory {}: {}\",\n                            root_path.display(), e)[]),\n         _ => (),"}, {"sha": "79ca24a18d4d02cb1971f765d3be929d3f47b687", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{io, str};\n+use std::{old_io, str};\n \n #[derive(Clone)]\n pub struct ExternalHtml{\n@@ -33,8 +33,8 @@ impl ExternalHtml {\n     }\n }\n \n-pub fn load_string(input: &Path) -> io::IoResult<Option<String>> {\n-    let mut f = try!(io::File::open(input));\n+pub fn load_string(input: &Path) -> old_io::IoResult<Option<String>> {\n+    let mut f = try!(old_io::File::open(input));\n     let d = try!(f.read_to_end());\n     Ok(str::from_utf8(d.as_slice()).map(|s| s.to_string()).ok())\n }\n@@ -45,12 +45,12 @@ macro_rules! load_or_return {\n             let input = Path::new($input);\n             match ::externalfiles::load_string(&input) {\n                 Err(e) => {\n-                    let _ = writeln!(&mut io::stderr(),\n+                    let _ = writeln!(&mut old_io::stderr(),\n                                      \"error reading `{}`: {}\", input.display(), e);\n                     return $cant_read;\n                 }\n                 Ok(None) => {\n-                    let _ = writeln!(&mut io::stderr(),\n+                    let _ = writeln!(&mut old_io::stderr(),\n                                      \"error reading `{}`: not UTF-8\", input.display());\n                     return $not_utf8;\n                 }"}, {"sha": "38b191846f1985229c1f494731a884738a63fd6a", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@\n \n use html::escape::Escape;\n \n-use std::io;\n+use std::old_io;\n use syntax::parse::lexer;\n use syntax::parse::token;\n use syntax::parse;\n@@ -46,7 +46,7 @@ pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n /// source.\n fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n         class: Option<&str>, id: Option<&str>,\n-        out: &mut Writer) -> io::IoResult<()> {\n+        out: &mut Writer) -> old_io::IoResult<()> {\n     use syntax::parse::lexer::Reader;\n \n     try!(write!(out, \"<pre \"));"}, {"sha": "c537e370723d7ca2526e0fc2cbbac25c9f7eeb19", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::fmt;\n-use std::io;\n+use std::old_io;\n \n use externalfiles::ExternalHtml;\n \n@@ -31,8 +31,8 @@ pub struct Page<'a> {\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n-    dst: &mut io::Writer, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n-    -> io::IoResult<()>\n+    dst: &mut old_io::Writer, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n+    -> old_io::IoResult<()>\n {\n     write!(dst,\n r##\"<!DOCTYPE html>\n@@ -159,7 +159,7 @@ r##\"<!DOCTYPE html>\n     )\n }\n \n-pub fn redirect(dst: &mut io::Writer, url: &str) -> io::IoResult<()> {\n+pub fn redirect(dst: &mut old_io::Writer, url: &str) -> old_io::IoResult<()> {\n     // <script> triggers a redirect before refresh, so this is fine.\n     write!(dst,\n r##\"<!DOCTYPE html>"}, {"sha": "55c70048ccd4218b460c695e9c8e78dbe59ee628", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -39,9 +39,9 @@ use std::cmp::Ordering;\n use std::collections::{HashMap, HashSet};\n use std::default::Default;\n use std::fmt;\n-use std::io::fs::PathExtensions;\n-use std::io::{fs, File, BufferedWriter, BufferedReader};\n-use std::io;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::{fs, File, BufferedWriter, BufferedReader};\n+use std::old_io;\n use std::iter::repeat;\n use std::str;\n use std::sync::Arc;\n@@ -257,7 +257,7 @@ thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n pub fn run(mut krate: clean::Crate,\n            external_html: &ExternalHtml,\n            dst: Path,\n-           passes: HashSet<String>) -> io::IoResult<()> {\n+           passes: HashSet<String>) -> old_io::IoResult<()> {\n     let mut cx = Context {\n         dst: dst,\n         src_root: krate.src.dir_path(),\n@@ -391,7 +391,7 @@ pub fn run(mut krate: clean::Crate,\n     cx.krate(krate, summary)\n }\n \n-fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String> {\n+fn build_index(krate: &clean::Crate, cache: &mut Cache) -> old_io::IoResult<String> {\n     // Build the search index from the collected metadata\n     let mut nodeid_to_pathid = HashMap::new();\n     let mut pathid_to_nodeid = Vec::new();\n@@ -485,7 +485,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n fn write_shared(cx: &Context,\n                 krate: &clean::Crate,\n                 cache: &Cache,\n-                search_index: String) -> io::IoResult<()> {\n+                search_index: String) -> old_io::IoResult<()> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n@@ -517,7 +517,7 @@ fn write_shared(cx: &Context,\n                include_bytes!(\"static/SourceCodePro-Semibold.woff\")));\n \n     fn collect(path: &Path, krate: &str,\n-               key: &str) -> io::IoResult<Vec<String>> {\n+               key: &str) -> old_io::IoResult<Vec<String>> {\n         let mut ret = Vec::new();\n         if path.exists() {\n             for line in BufferedReader::new(File::open(path)).lines() {\n@@ -607,7 +607,7 @@ fn write_shared(cx: &Context,\n }\n \n fn render_sources(cx: &mut Context,\n-                  krate: clean::Crate) -> io::IoResult<clean::Crate> {\n+                  krate: clean::Crate) -> old_io::IoResult<clean::Crate> {\n     info!(\"emitting source files\");\n     let dst = cx.dst.join(\"src\");\n     try!(mkdir(&dst));\n@@ -625,15 +625,15 @@ fn render_sources(cx: &mut Context,\n \n /// Writes the entire contents of a string to a destination, not attempting to\n /// catch any errors.\n-fn write(dst: Path, contents: &[u8]) -> io::IoResult<()> {\n+fn write(dst: Path, contents: &[u8]) -> old_io::IoResult<()> {\n     File::create(&dst).write(contents)\n }\n \n /// Makes a directory on the filesystem, failing the task if an error occurs and\n /// skipping if the directory already exists.\n-fn mkdir(path: &Path) -> io::IoResult<()> {\n+fn mkdir(path: &Path) -> old_io::IoResult<()> {\n     if !path.exists() {\n-        fs::mkdir(path, io::USER_RWX)\n+        fs::mkdir(path, old_io::USER_RWX)\n     } else {\n         Ok(())\n     }\n@@ -736,7 +736,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n \n impl<'a> SourceCollector<'a> {\n     /// Renders the given filename into its corresponding HTML source file.\n-    fn emit_source(&mut self, filename: &str) -> io::IoResult<()> {\n+    fn emit_source(&mut self, filename: &str) -> old_io::IoResult<()> {\n         let p = Path::new(filename);\n \n         // If we couldn't open this file, then just returns because it\n@@ -1084,7 +1084,7 @@ impl Context {\n     /// This currently isn't parallelized, but it'd be pretty easy to add\n     /// parallelization to this function.\n     fn krate(mut self, mut krate: clean::Crate,\n-             stability: stability_summary::ModuleSummary) -> io::IoResult<()> {\n+             stability: stability_summary::ModuleSummary) -> old_io::IoResult<()> {\n         let mut item = match krate.module.take() {\n             Some(i) => i,\n             None => return Ok(())\n@@ -1134,11 +1134,11 @@ impl Context {\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item<F>(&mut self, item: clean::Item, mut f: F) -> io::IoResult<()> where\n+    fn item<F>(&mut self, item: clean::Item, mut f: F) -> old_io::IoResult<()> where\n         F: FnMut(&mut Context, clean::Item),\n     {\n-        fn render(w: io::File, cx: &Context, it: &clean::Item,\n-                  pushname: bool) -> io::IoResult<()> {\n+        fn render(w: old_io::File, cx: &Context, it: &clean::Item,\n+                  pushname: bool) -> old_io::IoResult<()> {\n             info!(\"Rendering an item to {}\", w.path().display());\n             // A little unfortunate that this is done like this, but it sure\n             // does make formatting *a lot* nicer."}, {"sha": "18b62f5ebd2305b690ac642bbd723248a02b578c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -38,8 +38,8 @@ extern crate \"serialize\" as rustc_serialize; // used by deriving\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n-use std::io::File;\n-use std::io;\n+use std::old_io::File;\n+use std::old_io;\n use std::rc::Rc;\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n@@ -476,7 +476,7 @@ fn json_input(input: &str) -> Result<Output, String> {\n /// Outputs the crate/plugin json as a giant json blob at the specified\n /// destination.\n fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n-               dst: Path) -> io::IoResult<()> {\n+               dst: Path) -> old_io::IoResult<()> {\n     // {\n     //   \"schema\": version,\n     //   \"crate\": { parsed crate ... },"}, {"sha": "7f932b6ca21d97dd5888dc1ed02e540ec4b221a5", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+use std::old_io;\n \n use core;\n use getopts;\n@@ -59,9 +59,9 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n     }\n     let playground = playground.unwrap_or(\"\".to_string());\n \n-    let mut out = match io::File::create(&output) {\n+    let mut out = match old_io::File::create(&output) {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n+            let _ = writeln!(&mut old_io::stderr(),\n                              \"error opening `{}` for writing: {}\",\n                              output.display(), e);\n             return 4;\n@@ -71,7 +71,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n \n     let (metadata, text) = extract_leading_metadata(input_str.as_slice());\n     if metadata.len() == 0 {\n-        let _ = writeln!(&mut io::stderr(),\n+        let _ = writeln!(&mut old_io::stderr(),\n                          \"invalid markdown file: expecting initial line with `% ...TITLE...`\");\n         return 5;\n     }\n@@ -126,7 +126,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n \n     match err {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n+            let _ = writeln!(&mut old_io::stderr(),\n                              \"error writing to `{}`: {}\",\n                              output.display(), e);\n             6"}, {"sha": "0919377395b0185b2023a3e3cf87f97db91c0e89", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,8 +11,8 @@\n use std::cell::RefCell;\n use std::sync::mpsc::channel;\n use std::dynamic_lib::DynamicLibrary;\n-use std::io::{Command, TempDir};\n-use std::io;\n+use std::old_io::{Command, TempDir};\n+use std::old_io;\n use std::os;\n use std::str;\n use std::thread::Thread;\n@@ -145,20 +145,20 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     // The basic idea is to not use a default_handler() for rustc, and then also\n     // not print things by default to the actual stderr.\n     let (tx, rx) = channel();\n-    let w1 = io::ChanWriter::new(tx);\n+    let w1 = old_io::ChanWriter::new(tx);\n     let w2 = w1.clone();\n-    let old = io::stdio::set_stderr(box w1);\n+    let old = old_io::stdio::set_stderr(box w1);\n     Thread::spawn(move |:| {\n-        let mut p = io::ChanReader::new(rx);\n+        let mut p = old_io::ChanReader::new(rx);\n         let mut err = match old {\n             Some(old) => {\n                 // Chop off the `Send` bound.\n                 let old: Box<Writer> = old;\n                 old\n             }\n-            None => box io::stderr() as Box<Writer>,\n+            None => box old_io::stderr() as Box<Writer>,\n         };\n-        io::util::copy(&mut p, &mut err).unwrap();\n+        old_io::util::copy(&mut p, &mut err).unwrap();\n     });\n     let emitter = diagnostic::EmitterWriter::new(box w2, None);\n \n@@ -200,7 +200,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n \n     match cmd.output() {\n         Err(e) => panic!(\"couldn't run the test: {}{}\", e,\n-                        if e.kind == io::PermissionDenied {\n+                        if e.kind == old_io::PermissionDenied {\n                             \" - maybe your tempdir is mounted with noexec?\"\n                         } else { \"\" }),\n         Ok(out) => {"}, {"sha": "dad72fbd0e30b15d488a93646cb1c492da5c5dc0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -201,7 +201,7 @@ use self::InternalStackElement::*;\n \n use std;\n use std::collections::{HashMap, BTreeMap};\n-use std::{char, f64, fmt, io, num, str};\n+use std::{char, f64, fmt, old_io, num, str};\n use std::mem::{swap};\n use std::num::{Float, Int};\n use std::num::FpCategory as Fp;\n@@ -260,7 +260,7 @@ pub enum ErrorCode {\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n-    IoError(io::IoErrorKind, &'static str),\n+    IoError(old_io::IoErrorKind, &'static str),\n }\n \n // Builder and Parser have the same errors.\n@@ -331,7 +331,7 @@ impl fmt::Display for ErrorCode {\n     }\n }\n \n-fn io_error_to_error(io: io::IoError) -> ParserError {\n+fn io_error_to_error(io: old_io::IoError) -> ParserError {\n     IoError(io.kind, io.desc)\n }\n \n@@ -2057,8 +2057,8 @@ impl<T: Iterator<Item=char>> Builder<T> {\n     }\n }\n \n-/// Decodes a json value from an `&mut io::Reader`\n-pub fn from_reader(rdr: &mut io::Reader) -> Result<Json, BuilderError> {\n+/// Decodes a json value from an `&mut old_io::Reader`\n+pub fn from_reader(rdr: &mut old_io::Reader) -> Result<Json, BuilderError> {\n     let contents = match rdr.read_to_end() {\n         Ok(c)  => c,\n         Err(e) => return Err(io_error_to_error(e))\n@@ -2618,7 +2618,7 @@ mod tests {\n     use super::JsonEvent::*;\n     use super::{Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Decoder, Encoder, EncoderError};\n-    use std::{i64, u64, f32, f64, io};\n+    use std::{i64, u64, f32, f64, old_io};\n     use std::collections::BTreeMap;\n     use std::num::Float;\n     use std::string;\n@@ -3456,7 +3456,7 @@ mod tests {\n     #[test]\n     fn test_encode_hashmap_with_numeric_key() {\n         use std::str::from_utf8;\n-        use std::io::Writer;\n+        use std::old_io::Writer;\n         use std::collections::HashMap;\n         let mut hm: HashMap<uint, bool> = HashMap::new();\n         hm.insert(1, true);\n@@ -3472,7 +3472,7 @@ mod tests {\n     #[test]\n     fn test_prettyencode_hashmap_with_numeric_key() {\n         use std::str::from_utf8;\n-        use std::io::Writer;\n+        use std::old_io::Writer;\n         use std::collections::HashMap;\n         let mut hm: HashMap<uint, bool> = HashMap::new();\n         hm.insert(1, true);\n@@ -3929,7 +3929,7 @@ mod tests {\n     #[test]\n     fn test_encode_hashmap_with_arbitrary_key() {\n         use std::str::from_utf8;\n-        use std::io::Writer;\n+        use std::old_io::Writer;\n         use std::collections::HashMap;\n         use std::fmt;\n         #[derive(PartialEq, Eq, Hash, RustcEncodable)]"}, {"sha": "69c9a9200f722f7b46c60007c142f2c9b05d38ef", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,12 +14,12 @@ use prelude::v1::*;\n \n use any::Any;\n use cell::RefCell;\n-use io::IoResult;\n+use old_io::IoResult;\n use rt::{backtrace, unwind};\n use rt::util::{Stderr, Stdio};\n use thread::Thread;\n \n-// Defined in this module instead of io::stdio so that the unwinding\n+// Defined in this module instead of old_io::stdio so that the unwinding\n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<Writer + Send>>> = {\n         RefCell::new(None)"}, {"sha": "5965a0ceffbdd30ebf8c635715cfc51d14480526", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -238,7 +238,7 @@\n //!\n //! ```ignore\n //! format!      // described above\n-//! write!       // first argument is a &mut io::Writer, the destination\n+//! write!       // first argument is a &mut old_io::Writer, the destination\n //! writeln!     // same as write but appends a newline\n //! print!       // the format string is printed to the standard output\n //! println!     // same as print but appends a newline\n@@ -255,10 +255,8 @@\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]\n-//! use std::io;\n-//!\n //! let mut w = Vec::new();\n-//! write!(&mut w as &mut io::Writer, \"Hello {}!\", \"world\");\n+//! write!(&mut w, \"Hello {}!\", \"world\");\n //! ```\n //!\n //! #### `print!`\n@@ -282,15 +280,15 @@\n //!\n //! ```\n //! use std::fmt;\n-//! use std::io;\n+//! use std::old_io;\n //!\n //! fmt::format(format_args!(\"this returns {}\", \"String\"));\n //!\n-//! let some_writer: &mut io::Writer = &mut io::stdout();\n-//! write!(some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n+//! let mut some_writer = old_io::stdout();\n+//! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n //!\n //! fn my_fmt_fn(args: fmt::Arguments) {\n-//!     write!(&mut io::stdout(), \"{}\", args);\n+//!     write!(&mut old_io::stdout(), \"{}\", args);\n //! }\n //! my_fmt_fn(format_args!(\"or a {} too\", \"function\"));\n //! ```"}, {"sha": "9f0276c744b7f7bb3bf0e240ff0d3b564fd3d479", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -81,14 +81,14 @@ macro_rules! format {\n #[macro_export]\n #[stable]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::io::stdio::print_args(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::old_io::stdio::print_args(format_args!($($arg)*)))\n }\n \n /// Macro for printing to a task's stdout handle.\n ///\n-/// Each task can override its stdout handle via `std::io::stdio::set_stdout`.\n+/// Each task can override its stdout handle via `std::old_io::stdio::set_stdout`.\n /// The syntax of this macro is the same as that used for `format!`. For more\n-/// information, see `std::fmt` and `std::io::stdio`.\n+/// information, see `std::fmt` and `std::old_io::stdio`.\n ///\n /// # Example\n ///\n@@ -99,7 +99,7 @@ macro_rules! print {\n #[macro_export]\n #[stable]\n macro_rules! println {\n-    ($($arg:tt)*) => ($crate::io::stdio::println_args(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::old_io::stdio::println_args(format_args!($($arg)*)))\n }\n \n /// Helper macro for unwrapping `Result` values while returning early with an"}, {"sha": "fc2eb10ec168a112c7a001fc773f6ade8554744d", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -423,7 +423,7 @@ impl<S: Stream> Writer for BufferedStream<S> {\n #[cfg(test)]\n mod test {\n     extern crate test;\n-    use io;\n+    use old_io;\n     use prelude::v1::*;\n     use super::*;\n     use super::super::{IoResult, EndOfFile};"}, {"sha": "bca023b338f214d3a80e5d1ee694d95bc56168ed", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -160,7 +160,7 @@ mod test {\n \n     use sync::mpsc::channel;\n     use super::*;\n-    use io;\n+    use old_io;\n     use thread::Thread;\n \n     #[test]"}, {"sha": "826271a9f834e8d0fa387a3d746ca24fbc5b0706", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -178,7 +178,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n #[cfg(test)]\n mod test {\n     use prelude::v1::*;\n-    use io;\n+    use old_io;\n     use old_io::{MemReader, BytesReader};\n \n     struct InitialZeroByteReader {"}, {"sha": "3a39ffc9494409005e102d5feca5f90302babcb5", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -407,7 +407,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n-/// use std::io;\n+/// use std::old_io;\n /// use std::old_io::fs;\n ///\n /// fs::chmod(&Path::new(\"file.txt\"), old_io::USER_FILE);\n@@ -469,7 +469,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n ///\n /// ```rust\n /// # #![allow(unused_must_use)]\n-/// use std::io;\n+/// use std::old_io;\n /// use std::old_io::fs;\n ///\n /// let p = Path::new(\"/some/dir\");\n@@ -515,7 +515,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// ```rust\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_io::fs;\n-/// use std::io;\n+/// use std::old_io;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n /// fn visit_dirs<F>(dir: &Path, cb: &mut F) -> old_io::IoResult<()> where\n@@ -825,7 +825,7 @@ fn access_string(access: FileAccess) -> &'static str {\n mod test {\n     use prelude::v1::*;\n     use old_io::{SeekSet, SeekCur, SeekEnd, Read, Open, ReadWrite, FileType};\n-    use io;\n+    use old_io;\n     use str;\n     use old_io::fs::*;\n "}, {"sha": "5f8d2aa76cee4995df1e9a76840e138e6ddba6f7", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -393,7 +393,7 @@ mod test {\n     use old_io::{SeekSet, SeekCur, SeekEnd, Reader, Writer, Seek};\n     use prelude::v1::{Ok, Err, range,  Vec, Buffer,  AsSlice, SliceExt};\n     use prelude::v1::IteratorExt;\n-    use io;\n+    use old_io;\n     use iter::repeat;\n     use self::test_crate::Bencher;\n     use super::*;"}, {"sha": "60631287b08f70e9cdfd8e7a7906d10cdf74cfbb", "filename": "src/libstd/old_io/result.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fresult.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -80,34 +80,34 @@ impl<T, A: Acceptor<T>> Acceptor<T> for IoResult<A> {\n mod test {\n     use prelude::v1::*;\n     use super::super::mem::*;\n-    use io;\n+    use old_io;\n \n     #[test]\n     fn test_option_writer() {\n-        let mut writer: io::IoResult<Vec<u8>> = Ok(Vec::new());\n+        let mut writer: old_io::IoResult<Vec<u8>> = Ok(Vec::new());\n         writer.write(&[0, 1, 2]).unwrap();\n         writer.flush().unwrap();\n         assert_eq!(writer.unwrap(), vec!(0, 1, 2));\n     }\n \n     #[test]\n     fn test_option_writer_error() {\n-        let mut writer: io::IoResult<Vec<u8>> =\n-            Err(io::standard_error(io::EndOfFile));\n+        let mut writer: old_io::IoResult<Vec<u8>> =\n+            Err(old_io::standard_error(old_io::EndOfFile));\n \n         match writer.write(&[0, 0, 0]) {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind, io::EndOfFile),\n+            Err(e) => assert_eq!(e.kind, old_io::EndOfFile),\n         }\n         match writer.flush() {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind, io::EndOfFile),\n+            Err(e) => assert_eq!(e.kind, old_io::EndOfFile),\n         }\n     }\n \n     #[test]\n     fn test_option_reader() {\n-        let mut reader: io::IoResult<MemReader> =\n+        let mut reader: old_io::IoResult<MemReader> =\n             Ok(MemReader::new(vec!(0, 1, 2, 3)));\n         let mut buf = [0, 0];\n         reader.read(&mut buf).unwrap();\n@@ -117,13 +117,13 @@ mod test {\n \n     #[test]\n     fn test_option_reader_error() {\n-        let mut reader: io::IoResult<MemReader> =\n-            Err(io::standard_error(io::EndOfFile));\n+        let mut reader: old_io::IoResult<MemReader> =\n+            Err(old_io::standard_error(old_io::EndOfFile));\n         let mut buf = [];\n \n         match reader.read(&mut buf) {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind, io::EndOfFile),\n+            Err(e) => assert_eq!(e.kind, old_io::EndOfFile),\n         }\n     }\n }"}, {"sha": "81068aca6c288399d2a2bdb34de9f3b94ffc8148", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]\n-//! use std::io;\n+//! use std::old_io;\n //!\n //! let mut out = old_io::stdout();\n //! out.write(b\"Hello, world!\");\n@@ -141,7 +141,7 @@ impl StdinReader {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// use std::io;\n+    /// use std::old_io;\n     ///\n     /// for line in old_io::stdin().lock().lines() {\n     ///     println!(\"{}\", line.unwrap());"}, {"sha": "c8a929b3a0d62d74569d0fee0d302e61550d9118", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -276,7 +276,7 @@ mod test {\n     use prelude::v1::*;\n \n     use old_io::{MemReader, ByRefReader};\n-    use io;\n+    use old_io;\n     use super::*;\n \n     #[test]"}, {"sha": "f041d2799ab99bfe930b8b8c67b986e6b0826b8d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,17 +10,19 @@\n \n //! Higher-level interfaces to libc::* functions and operating system services.\n //!\n-//! In general these take and return rust types, use rust idioms (enums, closures, vectors) rather\n-//! than C idioms, and do more extensive safety checks.\n+//! In general these take and return rust types, use rust idioms (enums,\n+//! closures, vectors) rather than C idioms, and do more extensive safety\n+//! checks.\n //!\n-//! This module is not meant to only contain 1:1 mappings to libc entries; any os-interface code\n-//! that is reasonably useful and broadly applicable can go here. Including utility routines that\n-//! merely build on other os code.\n+//! This module is not meant to only contain 1:1 mappings to libc entries; any\n+//! os-interface code that is reasonably useful and broadly applicable can go\n+//! here. Including utility routines that merely build on other os code.\n //!\n-//! We assume the general case is that users do not care, and do not want to be made to care, which\n-//! operating system they are on. While they may want to special case various special cases -- and\n-//! so we will not _hide_ the facts of which OS the user is on -- they should be given the\n-//! opportunity to write OS-ignorant code by default.\n+//! We assume the general case is that users do not care, and do not want to be\n+//! made to care, which operating system they are on. While they may want to\n+//! special case various special cases -- and so we will not _hide_ the facts of\n+//! which OS the user is on -- they should be given the opportunity to write\n+//! OS-ignorant code by default.\n \n #![unstable]\n \n@@ -35,7 +37,7 @@ use self::MapError::*;\n use clone::Clone;\n use error::{FromError, Error};\n use fmt;\n-use io::{IoResult, IoError};\n+use old_io::{IoResult, IoError};\n use iter::{Iterator, IteratorExt};\n use marker::{Copy, Send};\n use libc::{c_void, c_int, c_char};\n@@ -374,7 +376,7 @@ pub struct Pipe {\n /// This function is also unsafe as there is no destructor associated with the\n /// `Pipe` structure will return. If it is not arranged for the returned file\n /// descriptors to be closed, the file descriptors will leak. For safe handling\n-/// of this scenario, use `std::io::PipeStream` instead.\n+/// of this scenario, use `std::old_io::PipeStream` instead.\n pub unsafe fn pipe() -> IoResult<Pipe> {\n     let (reader, writer) = try!(sys::os::pipe());\n     Ok(Pipe {\n@@ -1635,10 +1637,10 @@ mod tests {\n     fn memory_map_file() {\n         use libc;\n         use os::*;\n-        use io::fs::{File, unlink};\n-        use io::SeekStyle::SeekSet;\n-        use io::FileMode::Open;\n-        use io::FileAccess::ReadWrite;\n+        use old_io::fs::{File, unlink};\n+        use old_io::SeekStyle::SeekSet;\n+        use old_io::FileMode::Open;\n+        use old_io::FileAccess::ReadWrite;\n \n         #[cfg(not(windows))]\n         fn get_fd(file: &File) -> libc::c_int {"}, {"sha": "1b09fb92737421d9ef7fbaaedc67c79f97f96615", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -49,7 +49,7 @@\n //! ## Example\n //!\n //! ```rust\n-//! use std::io::fs::PathExtensions;\n+//! use std::old_io::fs::PathExtensions;\n //!\n //! let mut path = Path::new(\"/tmp/path\");\n //! println!(\"path: {}\", path.display());"}, {"sha": "202d81f56965fe5c697f0ec89e74e8cf456f6862", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,7 +14,7 @@ use clone::Clone;\n use cmp::{Ordering, Eq, Ord, PartialEq, PartialOrd};\n use fmt;\n use hash;\n-use io::Writer;\n+use old_io::Writer;\n use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map};\n use marker::Sized;"}, {"sha": "9f5ed17791844749a825de1f6bbe725034996687", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -20,7 +20,7 @@ use clone::Clone;\n use cmp::{Ordering, Eq, Ord, PartialEq, PartialOrd};\n use fmt;\n use hash;\n-use io::Writer;\n+use old_io::Writer;\n use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;"}, {"sha": "aa4db7b6b70342b9904079d2fc100a347d4b85fc", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -43,6 +43,6 @@\n // NB: remove when path reform lands\n #[doc(no_inline)] pub use path::{Path, GenericPath};\n // NB: remove when I/O reform lands\n-#[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n+#[doc(no_inline)] pub use old_io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n // NB: remove when range syntax lands\n #[doc(no_inline)] pub use iter::range;"}, {"sha": "ac87fc11a3458ddd8477915d82486c4f9fef6fe9", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -223,7 +223,7 @@\n \n use cell::RefCell;\n use clone::Clone;\n-use io::IoResult;\n+use old_io::IoResult;\n use iter::{Iterator, IteratorExt};\n use mem;\n use rc::Rc;"}, {"sha": "547c813148621bbc9e29f36d5acb0eb1b456a17e", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@ mod imp {\n \n     use self::OsRngInner::*;\n \n-    use io::{IoResult, File};\n+    use old_io::{IoResult, File};\n     use path::Path;\n     use rand::Rng;\n     use rand::reader::ReaderRng;\n@@ -187,7 +187,7 @@ mod imp {\n mod imp {\n     extern crate libc;\n \n-    use io::{IoResult};\n+    use old_io::{IoResult};\n     use marker::Sync;\n     use mem;\n     use os;\n@@ -259,7 +259,7 @@ mod imp {\n mod imp {\n     extern crate libc;\n \n-    use io::{IoResult, IoError};\n+    use old_io::{IoResult, IoError};\n     use mem;\n     use ops::Drop;\n     use os;"}, {"sha": "afacfeeaa3048a3ee38ec821f98f46a415b86519", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,7 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n-use io::Reader;\n+use old_io::Reader;\n use rand::Rng;\n use result::Result::{Ok, Err};\n use slice::SliceExt;\n@@ -26,7 +26,7 @@ use slice::SliceExt;\n ///\n /// ```rust\n /// use std::rand::{reader, Rng};\n-/// use std::io::MemReader;\n+/// use std::old_io::MemReader;\n ///\n /// let mut rng = reader::ReaderRng::new(MemReader::new(vec!(1,2,3,4,5,6,7,8)));\n /// println!(\"{:x}\", rng.gen::<uint>());\n@@ -77,7 +77,7 @@ mod test {\n     use prelude::v1::*;\n \n     use super::ReaderRng;\n-    use io::MemReader;\n+    use old_io::MemReader;\n     use num::Int;\n     use rand::Rng;\n "}, {"sha": "6140e3fd36c0ac88d6cb88057750b469c9587342", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -120,7 +120,7 @@\n //!\n //! ```no_run\n //! use std::sync::mpsc::channel;\n-//! use std::io::timer::Timer;\n+//! use std::old_io::timer::Timer;\n //! use std::time::Duration;\n //!\n //! let (tx, rx) = channel::<int>();\n@@ -144,7 +144,7 @@\n //!\n //! ```no_run\n //! use std::sync::mpsc::channel;\n-//! use std::io::timer::Timer;\n+//! use std::old_io::timer::Timer;\n //! use std::time::Duration;\n //!\n //! let (tx, rx) = channel::<int>();"}, {"sha": "9b53ebf70a0fd7229148b82e134517967d77521e", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,7 +10,7 @@\n \n use prelude::v1::*;\n \n-use io::IoResult;\n+use old_io::IoResult;\n \n #[cfg(target_pointer_width = \"64\")]\n pub const HEX_WIDTH: uint = 18;"}, {"sha": "ae01586c7039effc671a3f1250f142b48238e26e", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n #![allow(missing_docs)]\n #![allow(dead_code)]\n \n-use io::{self, IoError, IoResult};\n+use old_io::{self, IoError, IoResult};\n use prelude::v1::*;\n use sys::{last_error, retry};\n use ffi::CString;\n@@ -35,31 +35,31 @@ pub mod wtf8;\n \n pub fn eof() -> IoError {\n     IoError {\n-        kind: io::EndOfFile,\n+        kind: old_io::EndOfFile,\n         desc: \"end of file\",\n         detail: None,\n     }\n }\n \n pub fn timeout(desc: &'static str) -> IoError {\n     IoError {\n-        kind: io::TimedOut,\n+        kind: old_io::TimedOut,\n         desc: desc,\n         detail: None,\n     }\n }\n \n pub fn short_write(n: uint, desc: &'static str) -> IoError {\n     IoError {\n-        kind: if n == 0 { io::TimedOut } else { io::ShortWrite(n) },\n+        kind: if n == 0 { old_io::TimedOut } else { old_io::ShortWrite(n) },\n         desc: desc,\n         detail: None,\n     }\n }\n \n pub fn unimpl() -> IoError {\n     IoError {\n-        kind: io::IoUnavailable,\n+        kind: old_io::IoUnavailable,\n         desc: \"operations not yet supported\",\n         detail: None,\n     }"}, {"sha": "e42db42dc602892d33a3cd28ccb5ba39ccc0e975", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,9 +14,9 @@ use self::InAddr::*;\n \n use ffi::CString;\n use ffi;\n-use io::net::addrinfo;\n-use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n-use io::{IoResult, IoError};\n+use old_io::net::addrinfo;\n+use old_io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n+use old_io::{IoResult, IoError};\n use libc::{self, c_char, c_int};\n use mem;\n use num::Int;\n@@ -28,7 +28,7 @@ use sys::{self, retry, c, sock_t, last_error, last_net_error, last_gai_error, cl\n use sync::{Arc, Mutex, MutexGuard};\n use sys_common::{self, keep_going, short_write, timeout};\n use cmp;\n-use io;\n+use old_io;\n \n // FIXME: move uses of Arc and deadline tracking to std::io\n \n@@ -208,7 +208,7 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n         }\n         _ => {\n             Err(IoError {\n-                kind: io::InvalidInput,\n+                kind: old_io::InvalidInput,\n                 desc: \"invalid argument\",\n                 detail: None,\n             })\n@@ -458,7 +458,7 @@ pub fn write<T, L, W>(fd: sock_t,\n             // As with read(), first wait for the socket to be ready for\n             // the I/O operation.\n             match await(&[fd], deadline, Writable) {\n-                Err(ref e) if e.kind == io::EndOfFile && written > 0 => {\n+                Err(ref e) if e.kind == old_io::EndOfFile && written > 0 => {\n                     assert!(deadline.is_some());\n                     return Err(short_write(written, \"short write\"))\n                 }"}, {"sha": "65f1b5e9883802977c264bf4e264d3dba6ab4c2e", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -86,7 +86,7 @@\n use prelude::v1::*;\n \n use ffi;\n-use io::IoResult;\n+use old_io::IoResult;\n use libc;\n use mem;\n use str;\n@@ -136,7 +136,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n #[inline(never)] // if we know this is a function call, we can skip it when\n                  // tracing\n pub fn write(w: &mut Writer) -> IoResult<()> {\n-    use io::IoError;\n+    use old_io::IoError;\n \n     struct Context<'a> {\n         idx: int,"}, {"sha": "37c47d593e04d108f938435703ea73672d9e4a9b", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -18,7 +18,7 @@\n //! ```rust,ignore\n //! #![feature(globs)]\n //!\n-//! use std::io::fs::File;\n+//! use std::old_io::fs::File;\n //! use std::os::unix::prelude::*;\n //!\n //! fn main() {\n@@ -37,7 +37,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n use ffi::{OsStr, OsString};\n use libc;\n \n-use io;\n+use old_io;\n \n /// Raw file descriptors.\n pub type Fd = libc::c_int;\n@@ -48,55 +48,55 @@ pub trait AsRawFd {\n     fn as_raw_fd(&self) -> Fd;\n }\n \n-impl AsRawFd for io::fs::File {\n+impl AsRawFd for old_io::fs::File {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::pipe::PipeStream {\n+impl AsRawFd for old_io::pipe::PipeStream {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::pipe::UnixStream {\n+impl AsRawFd for old_io::net::pipe::UnixStream {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::pipe::UnixListener {\n+impl AsRawFd for old_io::net::pipe::UnixListener {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::pipe::UnixAcceptor {\n+impl AsRawFd for old_io::net::pipe::UnixAcceptor {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::tcp::TcpStream {\n+impl AsRawFd for old_io::net::tcp::TcpStream {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::tcp::TcpListener {\n+impl AsRawFd for old_io::net::tcp::TcpListener {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::tcp::TcpAcceptor {\n+impl AsRawFd for old_io::net::tcp::TcpAcceptor {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n-impl AsRawFd for io::net::udp::UdpSocket {\n+impl AsRawFd for old_io::net::udp::UdpSocket {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }"}, {"sha": "66ae018cb36af96fb75b3105d2296ace9df33c76", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,10 +13,10 @@\n use prelude::v1::*;\n \n use ffi::{self, CString};\n-use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n-use io::{IoResult, FileStat, SeekStyle};\n-use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n-use io;\n+use old_io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n+use old_io::{IoResult, FileStat, SeekStyle};\n+use old_io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n+use old_io;\n use libc::{self, c_int, c_void};\n use mem;\n use ptr;\n@@ -304,12 +304,12 @@ fn mkstat(stat: &libc::stat) -> FileStat {\n     FileStat {\n         size: stat.st_size as u64,\n         kind: match (stat.st_mode as libc::mode_t) & libc::S_IFMT {\n-            libc::S_IFREG => io::FileType::RegularFile,\n-            libc::S_IFDIR => io::FileType::Directory,\n-            libc::S_IFIFO => io::FileType::NamedPipe,\n-            libc::S_IFBLK => io::FileType::BlockSpecial,\n-            libc::S_IFLNK => io::FileType::Symlink,\n-            _ => io::FileType::Unknown,\n+            libc::S_IFREG => old_io::FileType::RegularFile,\n+            libc::S_IFDIR => old_io::FileType::Directory,\n+            libc::S_IFIFO => old_io::FileType::NamedPipe,\n+            libc::S_IFBLK => old_io::FileType::BlockSpecial,\n+            libc::S_IFLNK => old_io::FileType::Symlink,\n+            _ => old_io::FileType::Unknown,\n         },\n         perm: FilePermission::from_bits_truncate(stat.st_mode as u32),\n         created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),"}, {"sha": "f2f2e7436bfb7d7d0d6da1a2b677ea688c517d69", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -18,7 +18,7 @@\n use prelude::v1::*;\n \n use ffi;\n-use io::{self, IoResult, IoError};\n+use old_io::{self, IoResult, IoError};\n use libc;\n use num::{Int, SignedInt};\n use num;\n@@ -94,35 +94,35 @@ pub fn last_gai_error(s: libc::c_int) -> IoError {\n pub fn decode_error(errno: i32) -> IoError {\n     // FIXME: this should probably be a bit more descriptive...\n     let (kind, desc) = match errno {\n-        libc::EOF => (io::EndOfFile, \"end of file\"),\n-        libc::ECONNREFUSED => (io::ConnectionRefused, \"connection refused\"),\n-        libc::ECONNRESET => (io::ConnectionReset, \"connection reset\"),\n+        libc::EOF => (old_io::EndOfFile, \"end of file\"),\n+        libc::ECONNREFUSED => (old_io::ConnectionRefused, \"connection refused\"),\n+        libc::ECONNRESET => (old_io::ConnectionReset, \"connection reset\"),\n         libc::EPERM | libc::EACCES =>\n-            (io::PermissionDenied, \"permission denied\"),\n-        libc::EPIPE => (io::BrokenPipe, \"broken pipe\"),\n-        libc::ENOTCONN => (io::NotConnected, \"not connected\"),\n-        libc::ECONNABORTED => (io::ConnectionAborted, \"connection aborted\"),\n-        libc::EADDRNOTAVAIL => (io::ConnectionRefused, \"address not available\"),\n-        libc::EADDRINUSE => (io::ConnectionRefused, \"address in use\"),\n-        libc::ENOENT => (io::FileNotFound, \"no such file or directory\"),\n-        libc::EISDIR => (io::InvalidInput, \"illegal operation on a directory\"),\n-        libc::ENOSYS => (io::IoUnavailable, \"function not implemented\"),\n-        libc::EINVAL => (io::InvalidInput, \"invalid argument\"),\n+            (old_io::PermissionDenied, \"permission denied\"),\n+        libc::EPIPE => (old_io::BrokenPipe, \"broken pipe\"),\n+        libc::ENOTCONN => (old_io::NotConnected, \"not connected\"),\n+        libc::ECONNABORTED => (old_io::ConnectionAborted, \"connection aborted\"),\n+        libc::EADDRNOTAVAIL => (old_io::ConnectionRefused, \"address not available\"),\n+        libc::EADDRINUSE => (old_io::ConnectionRefused, \"address in use\"),\n+        libc::ENOENT => (old_io::FileNotFound, \"no such file or directory\"),\n+        libc::EISDIR => (old_io::InvalidInput, \"illegal operation on a directory\"),\n+        libc::ENOSYS => (old_io::IoUnavailable, \"function not implemented\"),\n+        libc::EINVAL => (old_io::InvalidInput, \"invalid argument\"),\n         libc::ENOTTY =>\n-            (io::MismatchedFileTypeForOperation,\n+            (old_io::MismatchedFileTypeForOperation,\n              \"file descriptor is not a TTY\"),\n-        libc::ETIMEDOUT => (io::TimedOut, \"operation timed out\"),\n-        libc::ECANCELED => (io::TimedOut, \"operation aborted\"),\n+        libc::ETIMEDOUT => (old_io::TimedOut, \"operation timed out\"),\n+        libc::ECANCELED => (old_io::TimedOut, \"operation aborted\"),\n         libc::consts::os::posix88::EEXIST =>\n-            (io::PathAlreadyExists, \"path already exists\"),\n+            (old_io::PathAlreadyExists, \"path already exists\"),\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match\n         // clause\n         x if x == libc::EAGAIN || x == libc::EWOULDBLOCK =>\n-            (io::ResourceUnavailable, \"resource temporarily unavailable\"),\n+            (old_io::ResourceUnavailable, \"resource temporarily unavailable\"),\n \n-        _ => (io::OtherIoError, \"unknown error\")\n+        _ => (old_io::OtherIoError, \"unknown error\")\n     };\n     IoError { kind: kind, desc: desc, detail: None }\n }"}, {"sha": "5d5cda03f01a0ea894e0519a6b24dc477d5f31c7", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@ use prelude::v1::*;\n use error::{FromError, Error};\n use ffi::{self, CString};\n use fmt;\n-use io::{IoError, IoResult};\n+use old_io::{IoError, IoResult};\n use libc::{self, c_int, c_char, c_void};\n use os::TMPBUF_SZ;\n use os;\n@@ -198,17 +198,17 @@ pub fn load_self() -> Option<Vec<u8>> {\n pub fn load_self() -> Option<Vec<u8>> {\n     use std::io;\n \n-    match io::fs::readlink(&Path::new(\"/proc/curproc/file\")) {\n+    match old_io::fs::readlink(&Path::new(\"/proc/curproc/file\")) {\n         Ok(path) => Some(path.into_vec()),\n         Err(..) => None\n     }\n }\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn load_self() -> Option<Vec<u8>> {\n-    use std::io;\n+    use old_io;\n \n-    match io::fs::readlink(&Path::new(\"/proc/self/exe\")) {\n+    match old_io::fs::readlink(&Path::new(\"/proc/self/exe\")) {\n         Ok(path) => Some(path.into_vec()),\n         Err(..) => None\n     }"}, {"sha": "16274a2ab0820a0112a90a3cad32288ed3f6beaa", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@ use libc;\n use mem;\n use sync::{Arc, Mutex};\n use sync::atomic::{AtomicBool, Ordering};\n-use io::{self, IoResult, IoError};\n+use old_io::{self, IoResult, IoError};\n \n use sys::{self, timer, retry, c, set_nonblocking, wouldblock};\n use sys::fs::{fd_t, FileDesc};\n@@ -41,7 +41,7 @@ fn addr_to_sockaddr_un(addr: &CString,\n     let len = addr.len();\n     if len > s.sun_path.len() - 1 {\n         return Err(IoError {\n-            kind: io::InvalidInput,\n+            kind: old_io::InvalidInput,\n             desc: \"invalid argument: path must be smaller than SUN_LEN\",\n             detail: None,\n         })"}, {"sha": "6e12432649f0f42fc6154e482d3dd546eaca0564", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,8 +15,8 @@ use collections::HashMap;\n use collections::hash_map::Hasher;\n use ffi::CString;\n use hash::Hash;\n-use io::process::{ProcessExit, ExitStatus, ExitSignal};\n-use io::{self, IoResult, IoError, EndOfFile};\n+use old_io::process::{ProcessExit, ExitStatus, ExitSignal};\n+use old_io::{self, IoResult, IoError, EndOfFile};\n use libc::{self, pid_t, c_void, c_int};\n use mem;\n use os;"}, {"sha": "c8f9d318482b09c39a3a2a9f993c2f1d27e11e83", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,8 +10,8 @@\n \n use prelude::v1::*;\n \n-use io::net::ip;\n-use io::IoResult;\n+use old_io::net::ip;\n+use old_io::IoResult;\n use libc;\n use mem;\n use ptr;"}, {"sha": "6a4e47f58ceea29608d825600cfc52f1b1a28982", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -49,7 +49,7 @@\n use prelude::v1::*;\n use self::Req::*;\n \n-use io::IoResult;\n+use old_io::IoResult;\n use libc;\n use mem;\n use os;"}, {"sha": "2df1b1968f1f2d13201938b3cbe8d14bb2ec894d", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,7 +12,7 @@ use prelude::v1::*;\n \n use sys::fs::FileDesc;\n use libc::{self, c_int, c_ulong, funcs};\n-use io::{self, IoResult, IoError};\n+use old_io::{self, IoResult, IoError};\n use sys::c;\n use sys_common;\n \n@@ -33,7 +33,7 @@ impl TTY {\n             Ok(TTY { fd: FileDesc::new(fd, true) })\n         } else {\n             Err(IoError {\n-                kind: io::MismatchedFileTypeForOperation,\n+                kind: old_io::MismatchedFileTypeForOperation,\n                 desc: \"file descriptor is not a TTY\",\n                 detail: None,\n             })"}, {"sha": "4d932b3e7779d21b0b535dffc7be4029df3589c5", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -158,7 +158,7 @@ use sync::{Mutex, Condvar, Arc};\n use str::Str;\n use string::String;\n use rt::{self, unwind};\n-use io::{Writer, stdio};\n+use old_io::{Writer, stdio};\n use thunk::Thunk;\n \n use sys::thread as imp;\n@@ -508,7 +508,7 @@ mod test {\n     use sync::mpsc::{channel, Sender};\n     use boxed::BoxAny;\n     use result;\n-    use std::io::{ChanReader, ChanWriter};\n+    use std::old_io::{ChanReader, ChanWriter};\n     use super::{Thread, Builder};\n     use thunk::Thunk;\n "}, {"sha": "96476cabac5f8f172de3ceefc92c69fcec46a515", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -25,7 +25,7 @@ use visit::{self, Visitor};\n use arena::TypedArena;\n use std::cell::RefCell;\n use std::fmt;\n-use std::io::IoResult;\n+use std::old_io::IoResult;\n use std::iter::{self, repeat};\n use std::mem;\n use std::slice;"}, {"sha": "b1f9a53bc4602a0b502f805eed872179b932edf5", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@ use diagnostics;\n \n use std::cell::{RefCell, Cell};\n use std::fmt;\n-use std::io;\n+use std::old_io;\n use std::iter::range;\n use std::string::String;\n use term::WriterWrapper;\n@@ -266,7 +266,7 @@ impl Level {\n \n fn print_maybe_styled(w: &mut EmitterWriter,\n                       msg: &str,\n-                      color: term::attr::Attr) -> io::IoResult<()> {\n+                      color: term::attr::Attr) -> old_io::IoResult<()> {\n     match w.dst {\n         Terminal(ref mut t) => {\n             try!(t.attr(color));\n@@ -300,7 +300,7 @@ fn print_maybe_styled(w: &mut EmitterWriter,\n }\n \n fn print_diagnostic(dst: &mut EmitterWriter, topic: &str, lvl: Level,\n-                    msg: &str, code: Option<&str>) -> io::IoResult<()> {\n+                    msg: &str, code: Option<&str>) -> old_io::IoResult<()> {\n     if !topic.is_empty() {\n         try!(write!(&mut dst.dst, \"{} \", topic));\n     }\n@@ -336,7 +336,7 @@ enum Destination {\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig,\n                   registry: Option<diagnostics::registry::Registry>) -> EmitterWriter {\n-        let stderr = io::stderr();\n+        let stderr = old_io::stderr();\n \n         let use_color = match color_config {\n             Always => true,\n@@ -362,7 +362,7 @@ impl EmitterWriter {\n }\n \n impl Writer for Destination {\n-    fn write(&mut self, bytes: &[u8]) -> io::IoResult<()> {\n+    fn write(&mut self, bytes: &[u8]) -> old_io::IoResult<()> {\n         match *self {\n             Terminal(ref mut t) => t.write(bytes),\n             Raw(ref mut w) => w.write(bytes),\n@@ -398,7 +398,7 @@ impl Emitter for EmitterWriter {\n }\n \n fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n-        msg: &str, code: Option<&str>, lvl: Level, custom: bool) -> io::IoResult<()> {\n+        msg: &str, code: Option<&str>, lvl: Level, custom: bool) -> old_io::IoResult<()> {\n     let sp = rsp.span();\n \n     // We cannot check equality directly with COMMAND_LINE_SP\n@@ -446,7 +446,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n                    cm: &codemap::CodeMap,\n                    sp: Span,\n                    lvl: Level,\n-                   lines: codemap::FileLines) -> io::IoResult<()> {\n+                   lines: codemap::FileLines) -> old_io::IoResult<()> {\n     let fm = &*lines.file;\n \n     let mut elided = false;\n@@ -529,7 +529,7 @@ fn custom_highlight_lines(w: &mut EmitterWriter,\n                           sp: Span,\n                           lvl: Level,\n                           lines: codemap::FileLines)\n-                          -> io::IoResult<()> {\n+                          -> old_io::IoResult<()> {\n     let fm = &*lines.file;\n \n     let lines = &lines.lines[];\n@@ -570,7 +570,7 @@ fn custom_highlight_lines(w: &mut EmitterWriter,\n fn print_macro_backtrace(w: &mut EmitterWriter,\n                          cm: &codemap::CodeMap,\n                          sp: Span)\n-                         -> io::IoResult<()> {\n+                         -> old_io::IoResult<()> {\n     let cs = try!(cm.with_expn_info(sp.expn_id, |expn_info| match expn_info {\n         Some(ei) => {\n             let ss = ei.callee.span.map_or(String::new(), |span| cm.span_to_string(span));"}, {"sha": "fbc591834d07f928e89463a053423a2b916da21b", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -20,7 +20,7 @@ use print::pprust;\n use ptr::P;\n use util::small_vector::SmallVector;\n \n-use std::io::File;\n+use std::old_io::File;\n use std::rc::Rc;\n \n // These macros all relate to the file system; they either return"}, {"sha": "bf822599a8864347a29e06157bb3b75f9eb7d08b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -1430,7 +1430,7 @@ pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)\n \n #[cfg(test)]\n mod test {\n-    use std::io;\n+    use std::old_io;\n     use ast;\n     use util::parser_testing::{string_to_crate, matches_codepattern};\n     use parse::token;\n@@ -1440,7 +1440,7 @@ mod test {\n \n     // this version doesn't care about getting comments or docstrings in.\n     fn fake_print_crate(s: &mut pprust::State,\n-                        krate: &ast::Crate) -> io::IoResult<()> {\n+                        krate: &ast::Crate) -> old_io::IoResult<()> {\n         s.print_mod(&krate.module, krate.attrs.as_slice())\n     }\n "}, {"sha": "926385ccd119e519c6727ef46710e78a990eb0b1", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@ use parse::lexer::is_block_doc_comment;\n use parse::lexer;\n use print::pprust;\n \n-use std::io;\n+use std::old_io;\n use std::str;\n use std::string::String;\n use std::usize;\n@@ -337,7 +337,7 @@ pub struct Literal {\n // probably not a good thing.\n pub fn gather_comments_and_literals(span_diagnostic: &diagnostic::SpanHandler,\n                                     path: String,\n-                                    srdr: &mut io::Reader)\n+                                    srdr: &mut old_io::Reader)\n                                  -> (Vec<Comment>, Vec<Literal>) {\n     let src = srdr.read_to_end().unwrap();\n     let src = String::from_utf8(src).unwrap();"}, {"sha": "92a89c175790b2c4295c5cd21bafd9f225e8efbc", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -1482,7 +1482,7 @@ mod test {\n     use diagnostic;\n     use parse::token;\n     use parse::token::{str_to_ident};\n-    use std::io::util;\n+    use std::old_io::util;\n \n     fn mk_sh() -> diagnostic::SpanHandler {\n         let emitter = diagnostic::EmitterWriter::new(box util::NullWriter, None);"}, {"sha": "2b4087dba58a5e6a946bf5deac47e80575d1dabf", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -18,7 +18,7 @@ use parse::parser::Parser;\n use ptr::P;\n \n use std::cell::{Cell, RefCell};\n-use std::io::File;\n+use std::old_io::File;\n use std::rc::Rc;\n use std::num::Int;\n use std::str;"}, {"sha": "fbea265597c6a5b7a531b1c94c0690f1864b458d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -80,7 +80,7 @@ use ptr::P;\n use owned_slice::OwnedSlice;\n \n use std::collections::HashSet;\n-use std::io::fs::PathExtensions;\n+use std::old_io::fs::PathExtensions;\n use std::iter;\n use std::mem;\n use std::num::Float;"}, {"sha": "7fb2f9a80cc85a4d8f62bd353662b44f0cd41d51", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -59,7 +59,7 @@\n //! line (which it can't) and so naturally place the content on its own line to\n //! avoid combining it with other lines and making matters even worse.\n \n-use std::io;\n+use std::old_io;\n use std::string;\n use std::iter::repeat;\n \n@@ -161,7 +161,7 @@ pub struct PrintStackElem {\n \n static SIZE_INFINITY: isize = 0xffff;\n \n-pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: usize) -> Printer {\n+pub fn mk_printer(out: Box<old_io::Writer+'static>, linewidth: usize) -> Printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n     let n: usize = 3 * linewidth;\n@@ -266,7 +266,7 @@ pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: usize) -> Printer {\n /// the method called 'pretty_print', and the 'PRINT' process is the method\n /// called 'print'.\n pub struct Printer {\n-    pub out: Box<io::Writer+'static>,\n+    pub out: Box<old_io::Writer+'static>,\n     buf_len: usize,\n     /// Width of lines we're constrained to\n     margin: isize,\n@@ -311,7 +311,7 @@ impl Printer {\n     pub fn replace_last_token(&mut self, t: Token) {\n         self.token[self.right] = t;\n     }\n-    pub fn pretty_print(&mut self, token: Token) -> io::IoResult<()> {\n+    pub fn pretty_print(&mut self, token: Token) -> old_io::IoResult<()> {\n         debug!(\"pp ~[{},{}]\", self.left, self.right);\n         match token {\n           Token::Eof => {\n@@ -385,7 +385,7 @@ impl Printer {\n           }\n         }\n     }\n-    pub fn check_stream(&mut self) -> io::IoResult<()> {\n+    pub fn check_stream(&mut self) -> old_io::IoResult<()> {\n         debug!(\"check_stream ~[{}, {}] with left_total={}, right_total={}\",\n                self.left, self.right, self.left_total, self.right_total);\n         if self.right_total - self.left_total > self.space {\n@@ -445,7 +445,7 @@ impl Printer {\n         self.right %= self.buf_len;\n         assert!((self.right != self.left));\n     }\n-    pub fn advance_left(&mut self) -> io::IoResult<()> {\n+    pub fn advance_left(&mut self) -> old_io::IoResult<()> {\n         debug!(\"advance_left ~[{},{}], sizeof({})={}\", self.left, self.right,\n                self.left, self.size[self.left]);\n \n@@ -506,7 +506,7 @@ impl Printer {\n             }\n         }\n     }\n-    pub fn print_newline(&mut self, amount: isize) -> io::IoResult<()> {\n+    pub fn print_newline(&mut self, amount: isize) -> old_io::IoResult<()> {\n         debug!(\"NEWLINE {}\", amount);\n         let ret = write!(self.out, \"\\n\");\n         self.pending_indentation = 0;\n@@ -529,14 +529,14 @@ impl Printer {\n             }\n         }\n     }\n-    pub fn print_str(&mut self, s: &str) -> io::IoResult<()> {\n+    pub fn print_str(&mut self, s: &str) -> old_io::IoResult<()> {\n         while self.pending_indentation > 0 {\n             try!(write!(self.out, \" \"));\n             self.pending_indentation -= 1;\n         }\n         write!(self.out, \"{}\", s)\n     }\n-    pub fn print(&mut self, token: Token, l: isize) -> io::IoResult<()> {\n+    pub fn print(&mut self, token: Token, l: isize) -> old_io::IoResult<()> {\n         debug!(\"print {} {} (remaining line space={})\", tok_str(&token), l,\n                self.space);\n         debug!(\"{}\", buf_str(&self.token[],\n@@ -620,61 +620,61 @@ impl Printer {\n // Convenience functions to talk to the printer.\n //\n // \"raw box\"\n-pub fn rbox(p: &mut Printer, indent: usize, b: Breaks) -> io::IoResult<()> {\n+pub fn rbox(p: &mut Printer, indent: usize, b: Breaks) -> old_io::IoResult<()> {\n     p.pretty_print(Token::Begin(BeginToken {\n         offset: indent as isize,\n         breaks: b\n     }))\n }\n \n-pub fn ibox(p: &mut Printer, indent: usize) -> io::IoResult<()> {\n+pub fn ibox(p: &mut Printer, indent: usize) -> old_io::IoResult<()> {\n     rbox(p, indent, Breaks::Inconsistent)\n }\n \n-pub fn cbox(p: &mut Printer, indent: usize) -> io::IoResult<()> {\n+pub fn cbox(p: &mut Printer, indent: usize) -> old_io::IoResult<()> {\n     rbox(p, indent, Breaks::Consistent)\n }\n \n-pub fn break_offset(p: &mut Printer, n: usize, off: isize) -> io::IoResult<()> {\n+pub fn break_offset(p: &mut Printer, n: usize, off: isize) -> old_io::IoResult<()> {\n     p.pretty_print(Token::Break(BreakToken {\n         offset: off,\n         blank_space: n as isize\n     }))\n }\n \n-pub fn end(p: &mut Printer) -> io::IoResult<()> {\n+pub fn end(p: &mut Printer) -> old_io::IoResult<()> {\n     p.pretty_print(Token::End)\n }\n \n-pub fn eof(p: &mut Printer) -> io::IoResult<()> {\n+pub fn eof(p: &mut Printer) -> old_io::IoResult<()> {\n     p.pretty_print(Token::Eof)\n }\n \n-pub fn word(p: &mut Printer, wrd: &str) -> io::IoResult<()> {\n+pub fn word(p: &mut Printer, wrd: &str) -> old_io::IoResult<()> {\n     p.pretty_print(Token::String(/* bad */ wrd.to_string(), wrd.len() as isize))\n }\n \n-pub fn huge_word(p: &mut Printer, wrd: &str) -> io::IoResult<()> {\n+pub fn huge_word(p: &mut Printer, wrd: &str) -> old_io::IoResult<()> {\n     p.pretty_print(Token::String(/* bad */ wrd.to_string(), SIZE_INFINITY))\n }\n \n-pub fn zero_word(p: &mut Printer, wrd: &str) -> io::IoResult<()> {\n+pub fn zero_word(p: &mut Printer, wrd: &str) -> old_io::IoResult<()> {\n     p.pretty_print(Token::String(/* bad */ wrd.to_string(), 0))\n }\n \n-pub fn spaces(p: &mut Printer, n: usize) -> io::IoResult<()> {\n+pub fn spaces(p: &mut Printer, n: usize) -> old_io::IoResult<()> {\n     break_offset(p, n, 0)\n }\n \n-pub fn zerobreak(p: &mut Printer) -> io::IoResult<()> {\n+pub fn zerobreak(p: &mut Printer) -> old_io::IoResult<()> {\n     spaces(p, 0us)\n }\n \n-pub fn space(p: &mut Printer) -> io::IoResult<()> {\n+pub fn space(p: &mut Printer) -> old_io::IoResult<()> {\n     spaces(p, 1us)\n }\n \n-pub fn hardbreak(p: &mut Printer) -> io::IoResult<()> {\n+pub fn hardbreak(p: &mut Printer) -> old_io::IoResult<()> {\n     spaces(p, SIZE_INFINITY as usize)\n }\n "}, {"sha": "ae3c4addf3883c9c324af0fc583c9c9c25db1ed0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -30,7 +30,7 @@ use print::pp::Breaks::{Consistent, Inconsistent};\n use ptr::P;\n \n use std::{ascii, mem};\n-use std::io::{self, IoResult};\n+use std::old_io::{self, IoResult};\n use std::iter;\n \n pub enum AnnNode<'a> {\n@@ -69,12 +69,12 @@ pub struct State<'a> {\n     encode_idents_with_hygiene: bool,\n }\n \n-pub fn rust_printer(writer: Box<io::Writer+'static>) -> State<'static> {\n+pub fn rust_printer(writer: Box<old_io::Writer+'static>) -> State<'static> {\n     static NO_ANN: NoAnn = NoAnn;\n     rust_printer_annotated(writer, &NO_ANN)\n }\n \n-pub fn rust_printer_annotated<'a>(writer: Box<io::Writer+'static>,\n+pub fn rust_printer_annotated<'a>(writer: Box<old_io::Writer+'static>,\n                                   ann: &'a PpAnn) -> State<'a> {\n     State {\n         s: pp::mk_printer(writer, default_columns),\n@@ -104,8 +104,8 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        span_diagnostic: &diagnostic::SpanHandler,\n                        krate: &ast::Crate,\n                        filename: String,\n-                       input: &mut io::Reader,\n-                       out: Box<io::Writer+'static>,\n+                       input: &mut old_io::Reader,\n+                       out: Box<old_io::Writer+'static>,\n                        ann: &'a PpAnn,\n                        is_expanded: bool) -> IoResult<()> {\n     let mut s = State::new_from_input(cm,\n@@ -124,8 +124,8 @@ impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a CodeMap,\n                           span_diagnostic: &diagnostic::SpanHandler,\n                           filename: String,\n-                          input: &mut io::Reader,\n-                          out: Box<io::Writer+'static>,\n+                          input: &mut old_io::Reader,\n+                          out: Box<old_io::Writer+'static>,\n                           ann: &'a PpAnn,\n                           is_expanded: bool) -> State<'a> {\n         let (cmnts, lits) = comments::gather_comments_and_literals(\n@@ -145,7 +145,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn new(cm: &'a CodeMap,\n-               out: Box<io::Writer+'static>,\n+               out: Box<old_io::Writer+'static>,\n                ann: &'a PpAnn,\n                comments: Option<Vec<comments::Comment>>,\n                literals: Option<Vec<comments::Literal>>) -> State<'a> {\n@@ -173,7 +173,7 @@ pub fn to_string<F>(f: F) -> String where\n     f(&mut s).unwrap();\n     eof(&mut s.s).unwrap();\n     let wr = unsafe {\n-        // FIXME(pcwalton): A nasty function to extract the string from an `io::Writer`\n+        // FIXME(pcwalton): A nasty function to extract the string from an `old_io::Writer`\n         // that we \"know\" to be a `Vec<u8>` that works around the lack of checked\n         // downcasts.\n         let obj: &TraitObject = mem::transmute(&s.s.out);\n@@ -421,7 +421,7 @@ thing_to_string_impls! { to_string }\n pub mod with_hygiene {\n     use abi;\n     use ast;\n-    use std::io::IoResult;\n+    use std::old_io::IoResult;\n     use super::indent_unit;\n \n     // This function is the trick that all the rest of the routines"}, {"sha": "0999fc86cfc7a7fedd95eec87d608f33632ba9f2", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -61,7 +61,7 @@ pub use terminfo::TerminfoTerminal;\n #[cfg(windows)]\n pub use win::WinConsole;\n \n-use std::io::IoResult;\n+use std::old_io::IoResult;\n \n pub mod terminfo;\n \n@@ -91,7 +91,7 @@ impl Writer for WriterWrapper {\n /// opened.\n pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stdout() as Box<Writer + Send>,\n+        wrapped: box std::old_io::stdout() as Box<Writer + Send>,\n     })\n }\n \n@@ -100,14 +100,14 @@ pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     let ti = TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stdout() as Box<Writer + Send>,\n+        wrapped: box std::old_io::stdout() as Box<Writer + Send>,\n     });\n \n     match ti {\n         Some(t) => Some(t),\n         None => {\n             WinConsole::new(WriterWrapper {\n-                wrapped: box std::io::stdout() as Box<Writer + Send>,\n+                wrapped: box std::old_io::stdout() as Box<Writer + Send>,\n             })\n         }\n     }\n@@ -118,7 +118,7 @@ pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stderr() as Box<Writer + Send>,\n+        wrapped: box std::old_io::stderr() as Box<Writer + Send>,\n     })\n }\n \n@@ -127,14 +127,14 @@ pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// opened.\n pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n     let ti = TerminfoTerminal::new(WriterWrapper {\n-        wrapped: box std::io::stderr() as Box<Writer + Send>,\n+        wrapped: box std::old_io::stderr() as Box<Writer + Send>,\n     });\n \n     match ti {\n         Some(t) => Some(t),\n         None => {\n             WinConsole::new(WriterWrapper {\n-                wrapped: box std::io::stderr() as Box<Writer + Send>,\n+                wrapped: box std::old_io::stderr() as Box<Writer + Send>,\n             })\n         }\n     }"}, {"sha": "88180460e30df51189f025cc19f188836b983921", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n //! Terminfo database interface.\n \n use std::collections::HashMap;\n-use std::io::IoResult;\n+use std::old_io::IoResult;\n use std::os;\n \n use attr;"}, {"sha": "f82c3ea2e7baf986e13778dfc64cb8a54767081d", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@\n //! ncurses-compatible compiled terminfo format parsing (term(5))\n \n use std::collections::HashMap;\n-use std::io;\n+use std::old_io;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable.\n@@ -158,7 +158,7 @@ pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tb\n     \"box1\"];\n \n /// Parse a compiled terminfo entry, using long capability names if `longnames` is true\n-pub fn parse(file: &mut io::Reader, longnames: bool)\n+pub fn parse(file: &mut old_io::Reader, longnames: bool)\n              -> Result<Box<TermInfo>, String> {\n     macro_rules! try { ($e:expr) => (\n         match $e {\n@@ -340,6 +340,6 @@ mod test {\n     #[ignore(reason = \"no ncurses on buildbots, needs a bundled terminfo file to test against\")]\n     fn test_parse() {\n         // FIXME #6870: Distribute a compiled file in src/tests and test there\n-        // parse(io::fs_reader(&p(\"/usr/share/terminfo/r/rxvt-256color\")).unwrap(), false);\n+        // parse(old_io::fs_reader(&p(\"/usr/share/terminfo/r/rxvt-256color\")).unwrap(), false);\n     }\n }"}, {"sha": "1e84c0462d61ac19d035b5ad6388706fff7571ec", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,8 +12,8 @@\n //!\n //! Does not support hashed database, only filesystem!\n \n-use std::io::File;\n-use std::io::fs::PathExtensions;\n+use std::old_io::File;\n+use std::old_io::fs::PathExtensions;\n use std::os::getenv;\n use std::os;\n "}, {"sha": "bfb2ae388cda748e1f1b45a115e34a7c73704a09", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -60,9 +60,9 @@ use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::fmt;\n-use std::io::stdio::StdWriter;\n-use std::io::{File, ChanReader, ChanWriter};\n-use std::io;\n+use std::old_io::stdio::StdWriter;\n+use std::old_io::{File, ChanReader, ChanWriter};\n+use std::old_io;\n use std::iter::repeat;\n use std::num::{Float, Int};\n use std::os;\n@@ -443,13 +443,13 @@ struct ConsoleTestState<T> {\n \n impl<T: Writer> ConsoleTestState<T> {\n     pub fn new(opts: &TestOpts,\n-               _: Option<T>) -> io::IoResult<ConsoleTestState<StdWriter>> {\n+               _: Option<T>) -> old_io::IoResult<ConsoleTestState<StdWriter>> {\n         let log_out = match opts.logfile {\n             Some(ref path) => Some(try!(File::create(path))),\n             None => None\n         };\n         let out = match term::stdout() {\n-            None => Raw(io::stdio::stdout_raw()),\n+            None => Raw(old_io::stdio::stdout_raw()),\n             Some(t) => Pretty(t)\n         };\n \n@@ -468,29 +468,29 @@ impl<T: Writer> ConsoleTestState<T> {\n         })\n     }\n \n-    pub fn write_ok(&mut self) -> io::IoResult<()> {\n+    pub fn write_ok(&mut self) -> old_io::IoResult<()> {\n         self.write_pretty(\"ok\", term::color::GREEN)\n     }\n \n-    pub fn write_failed(&mut self) -> io::IoResult<()> {\n+    pub fn write_failed(&mut self) -> old_io::IoResult<()> {\n         self.write_pretty(\"FAILED\", term::color::RED)\n     }\n \n-    pub fn write_ignored(&mut self) -> io::IoResult<()> {\n+    pub fn write_ignored(&mut self) -> old_io::IoResult<()> {\n         self.write_pretty(\"ignored\", term::color::YELLOW)\n     }\n \n-    pub fn write_metric(&mut self) -> io::IoResult<()> {\n+    pub fn write_metric(&mut self) -> old_io::IoResult<()> {\n         self.write_pretty(\"metric\", term::color::CYAN)\n     }\n \n-    pub fn write_bench(&mut self) -> io::IoResult<()> {\n+    pub fn write_bench(&mut self) -> old_io::IoResult<()> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n \n     pub fn write_pretty(&mut self,\n                         word: &str,\n-                        color: term::color::Color) -> io::IoResult<()> {\n+                        color: term::color::Color) -> old_io::IoResult<()> {\n         match self.out {\n             Pretty(ref mut term) => {\n                 if self.use_color {\n@@ -506,26 +506,26 @@ impl<T: Writer> ConsoleTestState<T> {\n         }\n     }\n \n-    pub fn write_plain(&mut self, s: &str) -> io::IoResult<()> {\n+    pub fn write_plain(&mut self, s: &str) -> old_io::IoResult<()> {\n         match self.out {\n             Pretty(ref mut term) => term.write(s.as_bytes()),\n             Raw(ref mut stdout) => stdout.write(s.as_bytes())\n         }\n     }\n \n-    pub fn write_run_start(&mut self, len: uint) -> io::IoResult<()> {\n+    pub fn write_run_start(&mut self, len: uint) -> old_io::IoResult<()> {\n         self.total = len;\n         let noun = if len != 1 { \"tests\" } else { \"test\" };\n         self.write_plain(format!(\"\\nrunning {} {}\\n\", len, noun).as_slice())\n     }\n \n     pub fn write_test_start(&mut self, test: &TestDesc,\n-                            align: NamePadding) -> io::IoResult<()> {\n+                            align: NamePadding) -> old_io::IoResult<()> {\n         let name = test.padded_name(self.max_name_len, align);\n         self.write_plain(format!(\"test {} ... \", name).as_slice())\n     }\n \n-    pub fn write_result(&mut self, result: &TestResult) -> io::IoResult<()> {\n+    pub fn write_result(&mut self, result: &TestResult) -> old_io::IoResult<()> {\n         try!(match *result {\n             TrOk => self.write_ok(),\n             TrFailed => self.write_failed(),\n@@ -547,7 +547,7 @@ impl<T: Writer> ConsoleTestState<T> {\n     }\n \n     pub fn write_log(&mut self, test: &TestDesc,\n-                     result: &TestResult) -> io::IoResult<()> {\n+                     result: &TestResult) -> old_io::IoResult<()> {\n         match self.log_out {\n             None => Ok(()),\n             Some(ref mut o) => {\n@@ -563,7 +563,7 @@ impl<T: Writer> ConsoleTestState<T> {\n         }\n     }\n \n-    pub fn write_failures(&mut self) -> io::IoResult<()> {\n+    pub fn write_failures(&mut self) -> old_io::IoResult<()> {\n         try!(self.write_plain(\"\\nfailures:\\n\"));\n         let mut failures = Vec::new();\n         let mut fail_out = String::new();\n@@ -591,7 +591,7 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(())\n     }\n \n-    pub fn write_run_finish(&mut self) -> io::IoResult<bool> {\n+    pub fn write_run_finish(&mut self) -> old_io::IoResult<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n         let success = self.failed == 0u;\n@@ -627,9 +627,10 @@ pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n }\n \n // A simple console test runner\n-pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> io::IoResult<bool> {\n+pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> old_io::IoResult<bool> {\n \n-    fn callback<T: Writer>(event: &TestEvent, st: &mut ConsoleTestState<T>) -> io::IoResult<()> {\n+    fn callback<T: Writer>(event: &TestEvent,\n+                           st: &mut ConsoleTestState<T>) -> old_io::IoResult<()> {\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => st.write_run_start(filtered_tests.len()),\n             TeWait(ref test, padding) => st.write_test_start(test, padding),\n@@ -727,7 +728,7 @@ fn should_sort_failures_before_printing_them() {\n \n fn use_color(opts: &TestOpts) -> bool {\n     match opts.color {\n-        AutoColor => get_concurrency() == 1 && io::stdout().get_ref().isatty(),\n+        AutoColor => get_concurrency() == 1 && old_io::stdout().get_ref().isatty(),\n         AlwaysColor => true,\n         NeverColor => false,\n     }\n@@ -745,8 +746,8 @@ pub type MonitorMsg = (TestDesc, TestResult, Vec<u8> );\n \n fn run_tests<F>(opts: &TestOpts,\n                 tests: Vec<TestDescAndFn> ,\n-                mut callback: F) -> io::IoResult<()> where\n-    F: FnMut(TestEvent) -> io::IoResult<()>,\n+                mut callback: F) -> old_io::IoResult<()> where\n+    F: FnMut(TestEvent) -> old_io::IoResult<()>,\n {\n     let filtered_tests = filter_tests(opts, tests);\n     let filtered_descs = filtered_tests.iter()\n@@ -1119,7 +1120,7 @@ mod tests {\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n                Metric, MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n-    use std::io::TempDir;\n+    use std::old_io::TempDir;\n     use std::thunk::Thunk;\n     use std::sync::mpsc::channel;\n "}, {"sha": "2f551bb7f49ec8b2d8b95ce37d82c617304a0441", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -351,7 +351,7 @@ pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n mod tests {\n     use stats::Stats;\n     use stats::Summary;\n-    use std::io;\n+    use std::old_io;\n     use std::f64;\n \n     macro_rules! assert_approx_eq {\n@@ -367,7 +367,7 @@ mod tests {\n \n         let summ2 = Summary::new(samples);\n \n-        let mut w = io::stdout();\n+        let mut w = old_io::stdout();\n         let w = &mut w;\n         (write!(w, \"\\n\")).unwrap();\n "}, {"sha": "2707a6346c87fab6ffa079640b39ac8b594973b5", "filename": "src/rustbook/book.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,7 +10,7 @@\n \n //! Basic data structures for representing a book.\n \n-use std::io::BufferedReader;\n+use std::old_io::BufferedReader;\n use std::iter;\n use std::iter::AdditiveIterator;\n "}, {"sha": "ccb572a113a4948560840a2eddf9e7b0f372631b", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,8 +11,8 @@\n //! Implementation of the `build` subcommand, used to compile a book.\n \n use std::os;\n-use std::io;\n-use std::io::{fs, File, BufferedWriter, TempDir, IoResult};\n+use std::old_io;\n+use std::old_io::{fs, File, BufferedWriter, TempDir, IoResult};\n \n use subcommand::Subcommand;\n use term::Term;\n@@ -119,7 +119,7 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n             try!(writeln!(&mut toc, \"</div></div>\"));\n         }\n \n-        try!(fs::mkdir_recursive(&out_path, io::USER_DIR));\n+        try!(fs::mkdir_recursive(&out_path, old_io::USER_DIR));\n \n         let rustdoc_args: &[String] = &[\n             \"\".to_string(),\n@@ -165,7 +165,7 @@ impl Subcommand for Build {\n             tgt = Path::new(os::args()[3].clone());\n         }\n \n-        try!(fs::mkdir(&tgt, io::USER_DIR));\n+        try!(fs::mkdir(&tgt, old_io::USER_DIR));\n \n         try!(File::create(&tgt.join(\"rust-book.css\")).write_str(css::STYLE));\n "}, {"sha": "d4829a2c391b801938a7bc0ea54a55f159a81804", "filename": "src/rustbook/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ferror.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@\n use std::fmt;\n use std::fmt::{Show, Formatter};\n \n-use std::io::IoError;\n+use std::old_io::IoError;\n \n pub type CliError = Box<Error + 'static>;\n pub type CliResult<T> = Result<T, CliError>;"}, {"sha": "b922bf1cdd3675fce2f370e6689094b7db1d33dd", "filename": "src/rustbook/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fterm.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,7 +12,7 @@\n //! verbosity support. For now, just a wrapper around stdout/stderr.\n \n use std::os;\n-use std::io::stdio;\n+use std::old_io::stdio;\n \n pub struct Term {\n     err: Box<Writer + 'static>"}, {"sha": "db02481cb0297145e05e51374ce4c4eaabcf6630", "filename": "src/rustbook/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Frustbook%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ftest.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -16,7 +16,7 @@ use error::CommandResult;\n use error::Error;\n use term::Term;\n use book;\n-use std::io::{Command, File};\n+use std::old_io::{Command, File};\n use std::os;\n \n struct Test;"}, {"sha": "a20a649dfe9150ddd0bb1b5e0fa69585335c6d90", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@\n \n #![feature(unboxed_closures)]\n \n-use std::io::File;\n+use std::old_io::File;\n use std::iter::repeat;\n use std::mem::swap;\n use std::os;\n@@ -71,7 +71,7 @@ fn shift_push() {\n }\n \n fn read_line() {\n-    use std::io::BufferedReader;\n+    use std::old_io::BufferedReader;\n \n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");"}, {"sha": "32242bee80121905ea89dfecd3eb16f461015981", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -39,7 +39,7 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n use std::cmp::min;\n-use std::io::{stdout, IoResult};\n+use std::old_io::{stdout, IoResult};\n use std::iter::repeat;\n use std::os;\n use std::slice::bytes::copy_memory;"}, {"sha": "193be04f80919913e58b158e21ac6236e145d7a3", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -39,8 +39,8 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n use std::cmp::min;\n-use std::io::{BufferedWriter, File};\n-use std::io;\n+use std::old_io::{BufferedWriter, File};\n+use std::old_io;\n use std::num::Float;\n use std::os;\n \n@@ -86,7 +86,7 @@ impl<'a> Iterator for AAGen<'a> {\n \n fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n     wr: &mut W, header: &str, mut it: I, mut n: uint)\n-    -> std::io::IoResult<()>\n+    -> std::old_io::IoResult<()>\n {\n     try!(wr.write(header.as_bytes()));\n     let mut line = [0u8; LINE_LENGTH + 1];\n@@ -102,7 +102,7 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n     Ok(())\n }\n \n-fn run<W: Writer>(writer: &mut W) -> std::io::IoResult<()> {\n+fn run<W: Writer>(writer: &mut W) -> std::old_io::IoResult<()> {\n     let args = os::args();\n     let args = args.as_slice();\n     let n = if os::getenv(\"RUST_BENCH\").is_some() {\n@@ -147,7 +147,7 @@ fn main() {\n         let mut file = BufferedWriter::new(File::create(&Path::new(\"./shootout-fasta.data\")));\n         run(&mut file)\n     } else {\n-        run(&mut io::stdout())\n+        run(&mut old_io::stdout())\n     };\n     res.unwrap()\n }"}, {"sha": "377cb5c9bae2660b4ea1affb4111e07d241c26fa", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -146,7 +146,7 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    use std::io::{stdio, MemReader, BufferedReader};\n+    use std::old_io::{stdio, MemReader, BufferedReader};\n \n     let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n         let foo = include_bytes!(\"shootout-k-nucleotide.data\");"}, {"sha": "657ae537f21fb6795f042a5882e2c9c0795a600e", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -294,10 +294,10 @@ fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> Vec<u8> {\n \n fn main() {\n     let input = if std::os::getenv(\"RUST_BENCH\").is_some() {\n-        let fd = std::io::File::open(&Path::new(\"shootout-k-nucleotide.data\"));\n-        get_sequence(&mut std::io::BufferedReader::new(fd), \">THREE\")\n+        let fd = std::old_io::File::open(&Path::new(\"shootout-k-nucleotide.data\"));\n+        get_sequence(&mut std::old_io::BufferedReader::new(fd), \">THREE\")\n     } else {\n-        get_sequence(&mut *std::io::stdin().lock(), \">THREE\")\n+        get_sequence(&mut *std::old_io::stdin().lock(), \">THREE\")\n     };\n     let input = Arc::new(input);\n "}, {"sha": "d261f3f3cf2694f6415a4d0eec139148109cf282", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -43,7 +43,7 @@\n \n // ignore-pretty very bad with line comments\n \n-use std::io;\n+use std::old_io;\n use std::os;\n use std::simd::f64x2;\n use std::sync::Arc;\n@@ -54,7 +54,7 @@ const LIMIT: f64 = 2.0;\n const WORKERS: uint = 16;\n \n #[inline(always)]\n-fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n+fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n     assert!(WORKERS % 2 == 0);\n \n     // Ensure w and h are multiples of 8.\n@@ -203,9 +203,9 @@ fn main() {\n     let res = if args.len() < 2 {\n         println!(\"Test mode: do not dump the image because it's not utf8, \\\n                   which interferes with the test runner.\");\n-        mandelbrot(1000, io::util::NullWriter)\n+        mandelbrot(1000, old_io::util::NullWriter)\n     } else {\n-        mandelbrot(args[1].parse().unwrap(), io::stdout())\n+        mandelbrot(args[1].parse().unwrap(), old_io::stdout())\n     };\n     res.unwrap();\n }"}, {"sha": "6419ad551f4617051e1bf291728086b1c0f28c26", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -44,8 +44,8 @@\n \n extern crate libc;\n \n-use std::io::stdio::{stdin_raw, stdout_raw};\n-use std::io::{IoResult, EndOfFile};\n+use std::old_io::stdio::{stdin_raw, stdout_raw};\n+use std::old_io::{IoResult, EndOfFile};\n use std::ptr::{copy_memory, Unique};\n use std::thread::Thread;\n "}, {"sha": "30a0bd7bd91c6b319db5a73ca58c7acb7c0610ab", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,9 +13,9 @@\n #![feature(box_syntax)]\n #![allow(non_snake_case)]\n \n-use std::io::BufferedReader;\n-use std::io::stdio::StdReader;\n-use std::io;\n+use std::old_io::BufferedReader;\n+use std::old_io::stdio::StdReader;\n+use std::old_io;\n use std::iter::repeat;\n use std::num::Int;\n use std::os;\n@@ -80,7 +80,7 @@ impl Sudoku {\n         return Sudoku::new(g)\n     }\n \n-    pub fn write(&self, writer: &mut io::Writer) {\n+    pub fn write(&self, writer: &mut old_io::Writer) {\n         for row in range(0u8, 9u8) {\n             write!(writer, \"{}\", self.grid[row as uint][0]);\n             for col in range(1u8, 9u8) {\n@@ -274,8 +274,8 @@ fn main() {\n     let mut sudoku = if use_default {\n         Sudoku::from_vec(&DEFAULT_SUDOKU)\n     } else {\n-        Sudoku::read(&mut *io::stdin().lock())\n+        Sudoku::read(&mut *old_io::stdin().lock())\n     };\n     sudoku.solve();\n-    sudoku.write(&mut io::stdout());\n+    sudoku.write(&mut old_io::stdout());\n }"}, {"sha": "b106169c6fcf43f59e8788ca58cbb191b3fe102e", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     move|:| { x = 2; };\n     //~^ ERROR: cannot assign to immutable captured outer variable\n \n-    let s = std::io::stdin();\n+    let s = std::old_io::stdin();\n     move|:| { s.read_to_end(); };\n     //~^ ERROR: cannot borrow immutable captured outer variable\n }"}, {"sha": "aa2a71ca2dbbf51bebdf9dec83476e707f16fc3e", "filename": "src/test/compile-fail/issue-11374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+use std::old_io;\n use std::vec;\n \n pub struct Container<'a> {\n@@ -26,7 +26,7 @@ impl<'a> Container<'a> {\n }\n \n pub fn for_stdin<'a>() -> Container<'a> {\n-    let mut r = io::stdin();\n+    let mut r = old_io::stdin();\n     Container::wrap(&mut r as &mut Reader)\n }\n "}, {"sha": "6f1e997e7bfe481c641991a3f84b5a001d2be483", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,8 +14,8 @@\n #![allow(unstable)]\n #![deny(non_snake_case)]\n \n-use std::io::File;\n-use std::io::IoError;\n+use std::old_io::File;\n+use std::old_io::IoError;\n \n struct Something {\n     X: usize //~ ERROR structure field `X` should have a snake case name such as `x`\n@@ -35,7 +35,7 @@ fn main() {\n         Ok(cnt) => println!(\"read this many bytes: {}\", cnt),\n         Err(IoError{ kind: EndOfFile, .. }) => println!(\"Got end of file: {:?}\", EndOfFile),\n //~^ ERROR variable `EndOfFile` should have a snake case name such as `end_of_file`\n-//~^^ WARN `EndOfFile` is named the same as one of the variants of the type `std::io::IoErrorKind`\n+//~^^ WARN `EndOfFile` is named the same as one of the variants of the type `std::old_io::IoErrorKind`\n     }\n \n     test(1);"}, {"sha": "38875c7656ec0a7497d763ca70b15dbf8e6555cb", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -226,7 +226,7 @@\n #![omit_gdb_pretty_printer_section]\n \n fn immediate_args(a: int, b: bool, c: f64) {\n-    ::std::io::print(\"\") // #break\n+    ::std::old_io::print(\"\") // #break\n }\n \n struct BigStruct {\n@@ -241,21 +241,21 @@ struct BigStruct {\n }\n \n fn non_immediate_args(a: BigStruct, b: BigStruct) {\n-    ::std::io::print(\"\") // #break\n+    ::std::old_io::print(\"\") // #break\n }\n \n fn binding(a: i64, b: u64, c: f64) {\n     let x = 0i; // #break\n-    ::std::io::print(\"\")\n+    ::std::old_io::print(\"\")\n }\n \n fn assignment(mut a: u64, b: u64, c: f64) {\n     a = b; // #break\n-    ::std::io::print(\"\")\n+    ::std::old_io::print(\"\")\n }\n \n fn function_call(x: u64, y: u64, z: f64) {\n-    std::io::stdio::print(\"Hi!\") // #break\n+    std::old_io::stdio::print(\"Hi!\") // #break\n }\n \n fn identifier(x: u64, y: u64, z: f64) -> u64 {"}, {"sha": "4692318b98fd1beff848280e294d8266b1a54914", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -249,7 +249,7 @@\n \n #[no_stack_check]\n fn immediate_args(a: int, b: bool, c: f64) {\n-    ::std::io::print(\"\");\n+    ::std::old_io::print(\"\");\n }\n \n struct BigStruct {\n@@ -265,24 +265,24 @@ struct BigStruct {\n \n #[no_stack_check]\n fn non_immediate_args(a: BigStruct, b: BigStruct) {\n-    ::std::io::print(\"\");\n+    ::std::old_io::print(\"\");\n }\n \n #[no_stack_check]\n fn binding(a: i64, b: u64, c: f64) {\n     let x = 0i;\n-    ::std::io::print(\"\");\n+    ::std::old_io::print(\"\");\n }\n \n #[no_stack_check]\n fn assignment(mut a: u64, b: u64, c: f64) {\n     a = b;\n-    ::std::io::print(\"\");\n+    ::std::old_io::print(\"\");\n }\n \n #[no_stack_check]\n fn function_call(x: u64, y: u64, z: f64) {\n-    std::io::stdio::print(\"Hi!\")\n+    std::old_io::stdio::print(\"Hi!\")\n }\n \n #[no_stack_check]"}, {"sha": "dd61542b80050508feab5b53bb0ba9dd852f334f", "filename": "src/test/debuginfo/issue13213.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Fdebuginfo%2Fissue13213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue13213.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -21,5 +21,5 @@ extern crate issue13213aux;\n // be available because they have been optimized out from the exporting crate.\n fn main() {\n     let b: issue13213aux::S = issue13213aux::A;\n-    ::std::io::println(\"Nothing to do here...\");\n+    ::std::old_io::println(\"Nothing to do here...\");\n }"}, {"sha": "3adb45798e41a002752c30b7c3723482774b45dc", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::os;\n-use std::io::{File, Command};\n+use std::old_io::{File, Command};\n \n // creates broken.rs, which has the Ident \\x00name_0,ctxt_0\\x00\n // embedded within it, and then attempts to compile broken.rs with the"}, {"sha": "eda89f2344bc06db44082fd1510000775b633e6c", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::{char, os};\n-use std::io::{File, Command};\n+use std::old_io::{File, Command};\n use std::rand::{thread_rng, Rng};\n \n // creates unicode_input_multiple_files_{main,chars}.rs, where the"}, {"sha": "d387b9d71e37c648241467ae8d833f2120110509", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{File, Command};\n+use std::old_io::{File, Command};\n use std::iter::repeat;\n use std::rand::{thread_rng, Rng};\n use std::{char, os};"}, {"sha": "c16f1f4c842ac1d1afacc0205d28635c7b224d9a", "filename": "src/test/run-pass-valgrind/cleanup-stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _ = std::io::stdin();\n+    let _ = std::old_io::stdin();\n }"}, {"sha": "a71794149be48be09be762bf94fe99d4d24cde1e", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@\n #![feature(unsafe_destructor)]\n \n use std::os;\n-use std::io::process::Command;\n+use std::old_io::process::Command;\n use std::str;\n use std::ops::{Drop, FnMut, FnOnce};\n "}, {"sha": "fd988d28778032452d4907905977ebf4becf0ffc", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -20,7 +20,7 @@ extern crate log;\n use log::{set_logger, Logger, LogRecord};\n use std::sync::mpsc::channel;\n use std::fmt;\n-use std::io::{ChanReader, ChanWriter};\n+use std::old_io::{ChanReader, ChanWriter};\n use std::thread::Thread;\n \n struct MyWriter(ChanWriter);"}, {"sha": "a4495c3c68e8b37f443d2e45619d5a02eff68906", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,7 +14,7 @@\n #![feature(unboxed_closures)]\n \n use std::mem;\n-use std::io::stdio::println;\n+use std::old_io::stdio::println;\n \n fn call_it<F>(f: F)\n     where F : FnOnce(String) -> String"}, {"sha": "bcb2e492041509a95e899f16f1b97ffebd822772", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n // no-pretty-expanded\n \n #![allow(unused_must_use, dead_code, deprecated)]\n-use std::io::MemWriter;\n+use std::old_io::MemWriter;\n use std::fmt;\n \n struct Foo<'a> {"}, {"sha": "88d5b74708e623804d7e348a8658259c39344044", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -19,7 +19,7 @@\n \n extern crate libc;\n \n-use std::io::{Process, Command, timer};\n+use std::old_io::{Process, Command, timer};\n use std::time::Duration;\n use std::str;\n use std::sync::mpsc::channel;\n@@ -56,8 +56,8 @@ fn test_destroy_twice() {\n }\n \n pub fn test_destroy_actually_kills(force: bool) {\n-    use std::io::process::{Command, ProcessOutput, ExitStatus, ExitSignal};\n-    use std::io::timer;\n+    use std::old_io::process::{Command, ProcessOutput, ExitStatus, ExitSignal};\n+    use std::old_io::timer;\n     use libc;\n     use std::str;\n "}, {"sha": "4b69e1595bd601c416b31471affebd1ecfba5a13", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@\n // that we don't die in a large ball of fire\n \n use std::os;\n-use std::io::process;\n+use std::old_io::process;\n \n pub fn main () {\n     let args = os::args();"}, {"sha": "10d694957f57e10101d7eea864cf81af06a458fc", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,9 +13,9 @@\n extern crate rbml;\n extern crate serialize;\n \n-use std::io;\n+use std::old_io;\n use std::fmt;\n-use std::io::{IoResult, SeekStyle};\n+use std::old_io::{IoResult, SeekStyle};\n use std::slice;\n \n use serialize::{Encodable, Encoder};"}, {"sha": "38731b8c8daeb579a9694d4280611685bff1b3c8", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -16,7 +16,7 @@ fn main() {\n }\n \n fn customtask() {\n-    let mut timer = std::io::timer::Timer::new().unwrap();\n+    let mut timer = std::old_io::timer::Timer::new().unwrap();\n     let periodic = timer.periodic(Duration::milliseconds(10));\n     periodic.recv();\n }"}, {"sha": "b55d64777537ec4424f14a5fab03ac2725d36e52", "filename": "src/test/run-pass/issue-12699.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::timer;\n+use std::old_io::timer;\n use std::time::Duration;\n \n fn main() {"}, {"sha": "f2a8bc47db86ed27d47a9c9d53a521ccea6a9bb0", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n \n use std::os;\n-use std::io;\n+use std::old_io;\n use std::str;\n \n fn main() {\n@@ -27,7 +27,7 @@ fn main() {\n fn parent() {\n     let args = os::args();\n     let args = args.as_slice();\n-    let mut p = io::process::Command::new(args[0].as_slice())\n+    let mut p = old_io::process::Command::new(args[0].as_slice())\n                                      .arg(\"child\").spawn().unwrap();\n     p.stdin.as_mut().unwrap().write_str(\"test1\\ntest2\\ntest3\").unwrap();\n     let out = p.wait_with_output().unwrap();\n@@ -37,7 +37,7 @@ fn parent() {\n }\n \n fn child() {\n-    for line in io::stdin().lock().lines() {\n+    for line in old_io::stdin().lock().lines() {\n         println!(\"{}\", line.unwrap());\n     }\n }"}, {"sha": "a41e57f10025d2e32dfa1429a03db8261783b397", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n \n-use std::io::process;\n-use std::io::Command;\n-use std::io;\n+use std::old_io::process;\n+use std::old_io::Command;\n+use std::old_io;\n use std::os;\n \n fn main() {\n@@ -25,9 +25,9 @@ fn main() {\n }\n \n fn child() {\n-    io::stdout().write_line(\"foo\").unwrap();\n-    io::stderr().write_line(\"bar\").unwrap();\n-    assert_eq!(io::stdin().lock().read_line().err().unwrap().kind, io::EndOfFile);\n+    old_io::stdout().write_line(\"foo\").unwrap();\n+    old_io::stderr().write_line(\"bar\").unwrap();\n+    assert_eq!(old_io::stdin().lock().read_line().err().unwrap().kind, old_io::EndOfFile);\n }\n \n fn test() {"}, {"sha": "abb15dae00df614e3a1451693de0e34e2b9a6415", "filename": "src/test/run-pass/issue-14901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14901.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::Reader;\n+use std::old_io::Reader;\n \n enum Wrapper<'a> {\n     WrapReader(&'a (Reader + 'a))"}, {"sha": "5ae0ad6c3e97453231f00f4783e8d9cc9a901226", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::os;\n-use std::io::{stdio, Command};\n+use std::old_io::{stdio, Command};\n \n fn main() {\n     let args = os::args();"}, {"sha": "1d18f33fd18eecf7c666f6d872e5040a51ee23aa", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::slice::SliceExt;\n-use std::io::{Command, fs, USER_RWX};\n+use std::old_io::{Command, fs, USER_RWX};\n use std::os;\n use std::path::BytesContainer;\n use std::rand::random;"}, {"sha": "d73ca1b11a5555fef9b8d3aca29d3f0e5f65b6ae", "filename": "src/test/run-pass/issue-16272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{process, Command};\n+use std::old_io::{process, Command};\n use std::os;\n \n fn main() {"}, {"sha": "56b2e038a7bfde867b79beca121a6ca95a4010b6", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -22,7 +22,7 @@\n use std::thread::Thread;\n \n pub fn main() {\n-    let mut stdin = std::io::stdin();\n+    let mut stdin = std::old_io::stdin();\n     Thread::spawn(move|| {\n         let _ = stdin.read_to_end();\n     });"}, {"sha": "2f0b8c9f19beb1c0f57ded4062ceb73d33ca23bc", "filename": "src/test/run-pass/issue-17121.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17121.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::BufReader;\n-use std::io::BufferedReader;\n-use std::io::File;\n-use std::io::IoResult;\n+use std::old_io::BufReader;\n+use std::old_io::BufferedReader;\n+use std::old_io::File;\n+use std::old_io::IoResult;\n \n struct Lexer<R: Reader>\n {"}, {"sha": "dd1cfb5e342832e9b50f87bae8687cfd0aaeae18", "filename": "src/test/run-pass/issue-17322.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,13 +11,13 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::io;\n+use std::old_io;\n \n fn f(wr: &mut Writer) {\n     wr.write_str(\"hello\").ok().expect(\"failed\");\n }\n \n fn main() {\n-    let mut wr = box io::stdout() as Box<Writer + 'static>;\n+    let mut wr = box old_io::stdout() as Box<Writer + 'static>;\n     f(&mut wr);\n }"}, {"sha": "6b6296b0bd929f264fbd9c638189ad31f2f241ce", "filename": "src/test/run-pass/issue-18619.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18619.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::FileType;\n+use std::old_io::FileType;\n \n pub fn main() {\n     let _ = FileType::RegularFile.clone();"}, {"sha": "3ef63a53a6dea195780df58473d88e2c6b573b12", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-windows currently windows requires UTF-8 for spawning processes\n \n-use std::io::Command;\n+use std::old_io::Command;\n use std::os;\n \n fn main() {"}, {"sha": "0d482548cc0bf933241d8a6f7407b83e7cba93ec", "filename": "src/test/run-pass/issue-20644.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20644.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -16,7 +16,7 @@\n \n use std::iter;\n use std::os;\n-use std::io::File;\n+use std::old_io::File;\n \n #[allow(unused)]\n pub fn parse_summary<R: Reader>(_: R, _: &Path) {"}, {"sha": "049e08d2b94f5b9838a44f8e34c23f8b62e050ab", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,9 +14,9 @@\n // Regression test for #20797.\n \n use std::default::Default;\n-use std::io::IoResult;\n-use std::io::fs;\n-use std::io::fs::PathExtensions;\n+use std::old_io::IoResult;\n+use std::old_io::fs;\n+use std::old_io::fs::PathExtensions;\n \n /// A strategy for acquiring more subpaths to walk.\n pub trait Strategy {"}, {"sha": "27ac538b5b3a5bdbf390cc1637db1408aa1f0a55", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,7 +12,7 @@\n \n /// Map representation\n \n-use std::io;\n+use std::old_io;\n use std::fmt;\n use square::{bot, wall, rock, lambda, closed_lift, open_lift, earth, empty};\n \n@@ -59,9 +59,9 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + io::Reader>(mut input: rdr)\n+fn read_board_grid<rdr:'static + old_io::Reader>(mut input: rdr)\n                    -> Vec<Vec<square>> {\n-    let mut input: &mut io::Reader = &mut input;\n+    let mut input: &mut old_io::Reader = &mut input;\n     let mut grid = Vec::new();\n     let mut line = [0; 10];\n     input.read(&mut line);"}, {"sha": "28ab3c3ef12537956feed46fcdfdc587f12bde1b", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+use std::old_io;\n \n pub fn main() {\n-    let stdout = &mut io::stdout() as &mut io::Writer;\n+    let stdout = &mut old_io::stdout() as &mut old_io::Writer;\n     stdout.write(b\"Hello!\");\n }"}, {"sha": "ec4cd02e9fd698ea3167e5f7aa889efdb298066a", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::println;\n+use std::old_io::println;\n use std::sync::mpsc::channel;\n use std::thread::Thread;\n "}, {"sha": "1ad48d326eaca423d151628cc4a1b579c071e2e5", "filename": "src/test/run-pass/issue-5988.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5988.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+use std::old_io;\n trait B {\n     fn f(&self);\n }\n@@ -19,7 +19,7 @@ trait T : B {\n struct A;\n \n impl<U: T> B for U {\n-    fn f(&self) { io::println(\"Hey, I'm a T!\"); }\n+    fn f(&self) { old_io::println(\"Hey, I'm a T!\"); }\n }\n \n impl T for A {"}, {"sha": "e52e3295c6e0b1d3241191dbd9c9c8dbb5cfbfc1", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+use std::old_io;\n \n-fn foo(a: &mut io::Writer) {\n+fn foo(a: &mut old_io::Writer) {\n     a.write(&[]).unwrap();\n }\n "}, {"sha": "a98d1aba04dfd716d65efe69e7caafebf34d69cc", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::sync::mpsc::{TryRecvError, channel};\n-use std::io::timer::Timer;\n+use std::old_io::timer::Timer;\n use std::thread::Thread;\n use std::time::Duration;\n "}, {"sha": "44daa52886cf85872156234107c813c6439bd79b", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@\n #[macro_use]\n extern crate log;\n \n-use std::io::Command;\n+use std::old_io::Command;\n use std::os;\n use std::str;\n "}, {"sha": "76895af099d6d0109f9216c3ad9cd3bb975e0fbc", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@\n use std::raw;\n use std::mem;\n use std::slice;\n-use std::io::IoResult;\n+use std::old_io::IoResult;\n \n trait MyWriter {\n     fn my_write(&mut self, buf: &[u8]) -> IoResult<()>;"}, {"sha": "5d180c3a2801b13edca25956d00608f859cddd54", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(asm)]\n \n-use std::io::process::Command;\n+use std::old_io::process::Command;\n use std::os;\n use std::thread::Thread;\n "}, {"sha": "ef77f6e9901089edf3cc2709586aef8e5a47392f", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(asm)]\n \n-use std::io::process::Command;\n+use std::old_io::process::Command;\n use std::os;\n \n // lifted from the test module"}, {"sha": "e0fd0a1347399aa2fb9c741aa87daf3abfeac7fe", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::Command;\n+use std::old_io::Command;\n use std::os;\n \n #[cfg(all(unix, not(target_os=\"android\")))]"}, {"sha": "5dcaa885e380c5aa46dad882789eb4a87773dde7", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -16,9 +16,9 @@\n // non-ASCII characters.  The child process ensures all the strings are\n // intact.\n \n-use std::io;\n-use std::io::fs;\n-use std::io::Command;\n+use std::old_io;\n+use std::old_io::fs;\n+use std::old_io::Command;\n use std::os;\n use std::path::Path;\n \n@@ -49,7 +49,7 @@ fn main() {\n         let child_path     = cwd.join(child_filename);\n \n         // make a separate directory for the child\n-        drop(fs::mkdir(&cwd, io::USER_RWX).is_ok());\n+        drop(fs::mkdir(&cwd, old_io::USER_RWX).is_ok());\n         assert!(fs::copy(&my_path, &child_path).is_ok());\n         let mut my_env = my_env;\n         my_env.push(env);\n@@ -62,8 +62,8 @@ fn main() {\n                         .spawn().unwrap().wait_with_output().unwrap();\n \n         // display the output\n-        assert!(io::stdout().write(p.output.as_slice()).is_ok());\n-        assert!(io::stderr().write(p.error.as_slice()).is_ok());\n+        assert!(old_io::stdout().write(p.output.as_slice()).is_ok());\n+        assert!(old_io::stderr().write(p.error.as_slice()).is_ok());\n \n         // make sure the child succeeded\n         assert!(p.status.success());"}, {"sha": "12e4f27a64f21f51924aadaa7f89fe32992aea1a", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -14,10 +14,10 @@\n extern crate libc;\n \n use std::ffi::CString;\n-use std::io::TempDir;\n-use std::io::fs::PathExtensions;\n-use std::io::fs;\n-use std::io;\n+use std::old_io::TempDir;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::fs;\n+use std::old_io;\n use std::os;\n \n fn rename_directory() {\n@@ -27,7 +27,7 @@ fn rename_directory() {\n         let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");\n         let tmpdir = tmpdir.path();\n         let old_path = tmpdir.join_many(&[\"foo\", \"bar\", \"baz\"]);\n-        fs::mkdir_recursive(&old_path, io::USER_RWX);\n+        fs::mkdir_recursive(&old_path, old_io::USER_RWX);\n         let test_file = &old_path.join(\"temp.txt\");\n \n         /* Write the temp input file */\n@@ -45,7 +45,7 @@ fn rename_directory() {\n         assert_eq!(libc::fclose(ostream), (0u as libc::c_int));\n \n         let new_path = tmpdir.join_many(&[\"quux\", \"blat\"]);\n-        fs::mkdir_recursive(&new_path, io::USER_RWX);\n+        fs::mkdir_recursive(&new_path, old_io::USER_RWX);\n         fs::rename(&old_path, &new_path.join(\"newdir\"));\n         assert!(new_path.join(\"newdir\").is_dir());\n         assert!(new_path.join_many(&[\"newdir\", \"temp.txt\"]).exists());"}, {"sha": "32f9de71d5307e770b9b1f981b08cb686e68638e", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n #![feature(start)]\n \n use std::ffi;\n-use std::io::process::{Command, ProcessOutput};\n+use std::old_io::process::{Command, ProcessOutput};\n use std::os;\n use std::rt::unwind::try;\n use std::rt;"}, {"sha": "160c9f2c9d5c2df103dd599260845bb011a0134f", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::process::Command;\n+use std::old_io::process::Command;\n use std::os;\n \n fn main() {"}, {"sha": "bf500bf041723068f43743630b574d942cecaeed", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n // ignore-windows\n \n use std::os;\n-use std::io::process::{Command, ExitSignal, ExitStatus};\n+use std::old_io::process::{Command, ExitSignal, ExitStatus};\n \n pub fn main() {\n     let args = os::args();"}, {"sha": "23a928571766181cb31478bc9a6fcbbecc107ce3", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,8 +12,8 @@\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n use std::os;\n-use std::io::PipeStream;\n-use std::io::Command;\n+use std::old_io::PipeStream;\n+use std::old_io::Command;\n \n fn test() {\n     let os::Pipe { reader, writer } = unsafe { os::pipe().unwrap() };"}, {"sha": "bf22fc3bd72efbfa4e156042c35fd94dc7c15d2c", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::fs::PathExtensions;\n-use std::io::{File, TempDir};\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::{File, TempDir};\n \n pub fn main() {\n     let dir = TempDir::new_in(&Path::new(\".\"), \"\").unwrap();"}, {"sha": "2bc7a5a88d577d9b2699218dbe27638c822a2c58", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n use std::sync::mpsc::channel;\n-use std::io::{ChanReader, ChanWriter};\n+use std::old_io::{ChanReader, ChanWriter};\n use std::thread;\n \n fn main() {"}, {"sha": "fbe2309964bacf70e70b4d32b4cbc6ae6f25773b", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -13,7 +13,7 @@\n //              quite quickly and it takes a few seconds for the sockets to get\n //              recycled.\n \n-use std::io::{TcpListener, Listener, Acceptor, EndOfFile, TcpStream};\n+use std::old_io::{TcpListener, Listener, Acceptor, EndOfFile, TcpStream};\n use std::sync::Arc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::mpsc::channel;"}, {"sha": "4f67baa69b258282f306c1d0109cf1e3de5454f7", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -21,9 +21,9 @@\n \n #![allow(unused_imports)]\n \n-use std::io::*;\n-use std::io::test::*;\n-use std::io;\n+use std::old_io::*;\n+use std::old_io::test::*;\n+use std::old_io;\n use std::time::Duration;\n use std::sync::mpsc::channel;\n use std::thread::Thread;\n@@ -45,7 +45,7 @@ fn eventual_timeout() {\n     for _ in range(0u, 10000) {\n         match TcpStream::connect_timeout(addr, Duration::milliseconds(100)) {\n             Ok(e) => v.push(e),\n-            Err(ref e) if e.kind == io::TimedOut => return,\n+            Err(ref e) if e.kind == old_io::TimedOut => return,\n             Err(e) => panic!(\"other error: {}\", e),\n         }\n     }"}, {"sha": "6695920723aefeb6692346f0e83ce22afc10c29a", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -18,9 +18,9 @@\n // they're in a different location than before. Hence, these tests are all run\n // serially here.\n \n-use std::io::fs::PathExtensions;\n-use std::io::{fs, TempDir};\n-use std::io;\n+use std::old_io::fs::PathExtensions;\n+use std::old_io::{fs, TempDir};\n+use std::old_io;\n use std::os;\n use std::sync::mpsc::channel;\n use std::thread::Thread;\n@@ -127,38 +127,38 @@ fn recursive_mkdir_rel() {\n     let cwd = os::getcwd().unwrap();\n     println!(\"recursive_mkdir_rel: Making: {} in cwd {} [{}]\", path.display(),\n            cwd.display(), path.exists());\n-    fs::mkdir_recursive(&path, io::USER_RWX);\n+    fs::mkdir_recursive(&path, old_io::USER_RWX);\n     assert!(path.is_dir());\n-    fs::mkdir_recursive(&path, io::USER_RWX);\n+    fs::mkdir_recursive(&path, old_io::USER_RWX);\n     assert!(path.is_dir());\n }\n \n fn recursive_mkdir_dot() {\n     let dot = Path::new(\".\");\n-    fs::mkdir_recursive(&dot, io::USER_RWX);\n+    fs::mkdir_recursive(&dot, old_io::USER_RWX);\n     let dotdot = Path::new(\"..\");\n-    fs::mkdir_recursive(&dotdot, io::USER_RWX);\n+    fs::mkdir_recursive(&dotdot, old_io::USER_RWX);\n }\n \n fn recursive_mkdir_rel_2() {\n     let path = Path::new(\"./frob/baz\");\n     let cwd = os::getcwd().unwrap();\n     println!(\"recursive_mkdir_rel_2: Making: {} in cwd {} [{}]\", path.display(),\n            cwd.display(), path.exists());\n-    fs::mkdir_recursive(&path, io::USER_RWX);\n+    fs::mkdir_recursive(&path, old_io::USER_RWX);\n     assert!(path.is_dir());\n     assert!(path.dir_path().is_dir());\n     let path2 = Path::new(\"quux/blat\");\n     println!(\"recursive_mkdir_rel_2: Making: {} in cwd {}\", path2.display(),\n            cwd.display());\n-    fs::mkdir_recursive(&path2, io::USER_RWX);\n+    fs::mkdir_recursive(&path2, old_io::USER_RWX);\n     assert!(path2.is_dir());\n     assert!(path2.dir_path().is_dir());\n }\n \n // Ideally this would be in core, but needs TempFile\n pub fn test_rmdir_recursive_ok() {\n-    let rwx = io::USER_RWX;\n+    let rwx = old_io::USER_RWX;\n \n     let tmpdir = TempDir::new(\"test\").ok().expect(\"test_rmdir_recursive_ok: \\\n                                                    couldn't create temp dir\");"}, {"sha": "11eaa4c99621ff5e58ddf455a6c739d1d20118f0", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::io;\n+use std::old_io;\n \n trait Trait {\n     fn f(&self);\n@@ -41,7 +41,7 @@ pub fn main() {\n     let c: &Trait = &a;\n     c.f();\n \n-    let out = io::stdout();\n+    let out = old_io::stdout();\n     foo(box out);\n }\n "}, {"sha": "4e5d61f166cbebe1db829dc6f11968e517d8d2e6", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a07f859b880bfe4dd6f095c959422d7c6b53831/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=3a07f859b880bfe4dd6f095c959422d7c6b53831", "patch": "@@ -10,7 +10,7 @@\n \n extern crate libc;\n \n-use std::io::process::Command;\n+use std::old_io::process::Command;\n \n use libc::funcs::posix88::unistd;\n "}]}