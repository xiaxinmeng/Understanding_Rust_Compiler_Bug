{"sha": "707c9795ac00bdc487f79f048618b4119f70ba0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwN2M5Nzk1YWMwMGJkYzQ4N2Y3OWYwNDg2MThiNDExOWY3MGJhMGQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-25T20:34:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-25T20:34:37Z"}, "message": "Rollup merge of #53518 - phungleson:fix-impl-from-for-convert, r=frewsxcv\n\nAdd doc for impl From in char_convert\n\nAs part of issue #51430 (cc @skade).\n\nThe impl is very simple, let me know if we need to go into any details.", "tree": {"sha": "fab2a8f31448f225ee49abdde75edafb64ad0762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab2a8f31448f225ee49abdde75edafb64ad0762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707c9795ac00bdc487f79f048618b4119f70ba0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbqpvdCRBK7hj4Ov3rIwAAdHIIACFk/8ox2Idjscpctgm6lgw9\nqywLF2uyiVh2avT2BYTGnGMEuCxIy4OsQruKgNaFjCgLHQZWLl2UDEFwMHwPrxpm\nuYzrJxcM6OCChVb5+Xf9s76QnUzEz+PBFcDpTje14sFdySEGbFJ8UHEzdrV6+iow\n9VpnDuzxZlVtlI1b/DxnQee0+8RBC/wMAR9zrKt93lQgbPchBYC9JjbULGT6se8n\nSovax4e8mfNwQGPtuWJEVK0aA8TvLeLy7OttnekrTwtdPk3c+5/ayf96/zGRYMi1\nZHAyPNtSrmN7CHiIBJizUwlEnnLxgAsntNQm8cRZQAQzd1L4bT1x4X3b6+TY6Ho=\n=kDJZ\n-----END PGP SIGNATURE-----\n", "payload": "tree fab2a8f31448f225ee49abdde75edafb64ad0762\nparent 31789a658bb6b6c78da1f2b99a5f169e4e8b983b\nparent 992e220935f1d4c60ada2b0da625a83b85724f04\nauthor Pietro Albini <pietro@pietroalbini.org> 1537907677 +0200\ncommitter GitHub <noreply@github.com> 1537907677 +0200\n\nRollup merge of #53518 - phungleson:fix-impl-from-for-convert, r=frewsxcv\n\nAdd doc for impl From in char_convert\n\nAs part of issue #51430 (cc @skade).\n\nThe impl is very simple, let me know if we need to go into any details.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707c9795ac00bdc487f79f048618b4119f70ba0d", "html_url": "https://github.com/rust-lang/rust/commit/707c9795ac00bdc487f79f048618b4119f70ba0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707c9795ac00bdc487f79f048618b4119f70ba0d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31789a658bb6b6c78da1f2b99a5f169e4e8b983b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31789a658bb6b6c78da1f2b99a5f169e4e8b983b", "html_url": "https://github.com/rust-lang/rust/commit/31789a658bb6b6c78da1f2b99a5f169e4e8b983b"}, {"sha": "992e220935f1d4c60ada2b0da625a83b85724f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/992e220935f1d4c60ada2b0da625a83b85724f04", "html_url": "https://github.com/rust-lang/rust/commit/992e220935f1d4c60ada2b0da625a83b85724f04"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "e9ccdd0ea3c578ee0fdbb6fa820cb50e9f70efb9", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/707c9795ac00bdc487f79f048618b4119f70ba0d/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707c9795ac00bdc487f79f048618b4119f70ba0d/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=707c9795ac00bdc487f79f048618b4119f70ba0d", "patch": "@@ -115,6 +115,19 @@ pub unsafe fn from_u32_unchecked(i: u32) -> char {\n \n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n impl From<char> for u32 {\n+    /// Converts a [`char`] into a [`u32`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let c = 'c';\n+    ///     let u = u32::from(c);\n+    ///     assert!(4 == mem::size_of_val(&u))\n+    /// }\n+    /// ```\n     #[inline]\n     fn from(c: char) -> Self {\n         c as u32\n@@ -141,6 +154,19 @@ impl From<char> for u32 {\n /// C0 and C1 control codes.\n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n impl From<u8> for char {\n+    /// Converts a [`u8`] into a [`char`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let u = 32 as u8;\n+    ///     let c = char::from(u);\n+    ///     assert!(4 == mem::size_of_val(&c))\n+    /// }\n+    /// ```\n     #[inline]\n     fn from(i: u8) -> Self {\n         i as char"}]}