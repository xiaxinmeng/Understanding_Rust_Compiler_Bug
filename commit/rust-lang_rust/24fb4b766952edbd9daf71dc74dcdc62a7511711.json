{"sha": "24fb4b766952edbd9daf71dc74dcdc62a7511711", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZmI0Yjc2Njk1MmVkYmQ5ZGFmNzFkYzc0ZGNkYzYyYTc1MTE3MTE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-02-27T04:34:55Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2018-03-06T03:31:53Z"}, "message": "Add reverse_bits to integer types", "tree": {"sha": "99c37dafb6a21af0bcfb3b58d34e80690615cdba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c37dafb6a21af0bcfb3b58d34e80690615cdba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24fb4b766952edbd9daf71dc74dcdc62a7511711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24fb4b766952edbd9daf71dc74dcdc62a7511711", "html_url": "https://github.com/rust-lang/rust/commit/24fb4b766952edbd9daf71dc74dcdc62a7511711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24fb4b766952edbd9daf71dc74dcdc62a7511711/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed", "html_url": "https://github.com/rust-lang/rust/commit/02e021b6d4e1ae779dc538404a4fa0c54ed5f7ed"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "a46ac2b5f0fee1d9af082f160b6c84218592e763", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=24fb4b766952edbd9daf71dc74dcdc62a7511711", "patch": "@@ -321,6 +321,33 @@ $EndFeature, \"\n             (self as $UnsignedT).swap_bytes() as Self\n         }\n \n+        /// Reverses the bit pattern of the integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i16` is used here.\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(reverse_bits)]\n+        ///\n+        /// let n: i16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n+        ///\n+        /// let m = n.reverse_bits();\n+        ///\n+        /// assert_eq!(m as u16, 0b10101010_00000000);\n+        /// assert_eq!(m, -22016);\n+        /// ```\n+        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+        #[cfg(not(stage0))]\n+        #[inline]\n+        pub fn reverse_bits(self) -> Self {\n+            (self as $UnsignedT).reverse_bits() as Self\n+        }\n+\n         doc_comment! {\n             concat!(\"Converts an integer from big endian to the target's endianness.\n \n@@ -1773,6 +1800,33 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             unsafe { intrinsics::bswap(self as $ActualT) as Self }\n         }\n \n+        /// Reverses the bit pattern of the integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u16` is used here.\n+        ///\n+        /// ```\n+        /// #![feature(reverse_bits)]\n+        ///\n+        /// let n: u16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n+        ///\n+        /// let m = n.reverse_bits();\n+        ///\n+        /// assert_eq!(m, 0b10101010_00000000);\n+        /// assert_eq!(m, 43520);\n+        /// ```\n+        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+        #[cfg(not(stage0))]\n+        #[inline]\n+        pub fn reverse_bits(self) -> Self {\n+            unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+        }\n+\n         doc_comment! {\n             concat!(\"Converts an integer from big endian to the target's endianness.\n "}, {"sha": "a9c5683e0ef7b376847563ccc25b19c2c0309856", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=24fb4b766952edbd9daf71dc74dcdc62a7511711", "patch": "@@ -46,6 +46,7 @@\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![feature(atomic_nand)]\n+#![feature(reverse_bits)]\n \n extern crate core;\n extern crate test;"}, {"sha": "ca6906f731047c62e0091c3a3212756cff2b5c23", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb4b766952edbd9daf71dc74dcdc62a7511711/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=24fb4b766952edbd9daf71dc74dcdc62a7511711", "patch": "@@ -97,6 +97,17 @@ mod tests {\n         assert_eq!(_1.swap_bytes(), _1);\n     }\n \n+    #[test]\n+    fn test_reverse_bits() {\n+        assert_eq!(A.reverse_bits().reverse_bits(), A);\n+        assert_eq!(B.reverse_bits().reverse_bits(), B);\n+        assert_eq!(C.reverse_bits().reverse_bits(), C);\n+\n+        // Swapping these should make no difference\n+        assert_eq!(_0.reverse_bits(), _0);\n+        assert_eq!(_1.reverse_bits(), _1);\n+    }\n+\n     #[test]\n     fn test_le() {\n         assert_eq!($T::from_le(A.to_le()), A);"}]}