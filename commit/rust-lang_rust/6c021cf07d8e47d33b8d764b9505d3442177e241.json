{"sha": "6c021cf07d8e47d33b8d764b9505d3442177e241", "node_id": "C_kwDOAAsO6NoAKDZjMDIxY2YwN2Q4ZTQ3ZDMzYjhkNzY0Yjk1MDVkMzQ0MjE3N2UyNDE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T02:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T02:03:54Z"}, "message": "Rollup merge of #103827 - compiler-errors:rpitit-substs-compat, r=wesleywiser\n\nProperly remap and check for substs compatibility in `confirm_impl_trait_in_trait_candidate`\n\nFixes #103824", "tree": {"sha": "796032b98b22954d5dc633c605247c2c0550d739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/796032b98b22954d5dc633c605247c2c0550d739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c021cf07d8e47d33b8d764b9505d3442177e241", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjawqKCRBK7hj4Ov3rIwAAVagIAKWnInv1pKNgwXEy3Jidosm8\n86U1nsofGM/XcCWlkxpRW2STxa2rIsdo+4m6zI8ANS/E00BISg9SggquzyfJfNbX\n7dBiBfiRX+31CPVc9uD3ujTBR1oTRYccXTTYK6566EYZzJh+11VeQZXDipQKNWXp\nWfIyP9mhmyTMcGQxSrkJ1cnlzfG0FAyAfn5KQjqBcQGwtezqwqBXt9d5TuaIh/zz\nGVZvObM2/a0RLG0Bq2I+Jz0J1u/RpO8/0b+FxzktFIF4W6FAX5hrBxFScW8E1QA4\nmtDe/OhHgrU70yqjzkrMH9eT+D/eipNJ3NmK3x9b/tLRKqD92DBJOKEcSf7G2gA=\n=tP7o\n-----END PGP SIGNATURE-----\n", "payload": "tree 796032b98b22954d5dc633c605247c2c0550d739\nparent 83e73e013d2e6eacadc6abc83a6cdc4b78c293b1\nparent 0f632c8f7882a4470bf1c7b6a4d6b14379b8e163\nauthor Manish Goregaokar <manishsmail@gmail.com> 1667959434 -0500\ncommitter GitHub <noreply@github.com> 1667959434 -0500\n\nRollup merge of #103827 - compiler-errors:rpitit-substs-compat, r=wesleywiser\n\nProperly remap and check for substs compatibility in `confirm_impl_trait_in_trait_candidate`\n\nFixes #103824\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c021cf07d8e47d33b8d764b9505d3442177e241", "html_url": "https://github.com/rust-lang/rust/commit/6c021cf07d8e47d33b8d764b9505d3442177e241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c021cf07d8e47d33b8d764b9505d3442177e241/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e73e013d2e6eacadc6abc83a6cdc4b78c293b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e73e013d2e6eacadc6abc83a6cdc4b78c293b1", "html_url": "https://github.com/rust-lang/rust/commit/83e73e013d2e6eacadc6abc83a6cdc4b78c293b1"}, {"sha": "0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163", "html_url": "https://github.com/rust-lang/rust/commit/0f632c8f7882a4470bf1c7b6a4d6b14379b8e163"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "dc13374f992eb7589f6eb919b50024314ab5d1ba", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -430,7 +430,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Projection(_), ty::Projection(_)) => {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n-                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p)) => {\n+                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p))\n+                        if self.def_kind(proj.item_def_id) != DefKind::ImplTraitPlaceholder =>\n+                    {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n                         if !sp.contains(p_span) {"}, {"sha": "572f82117cc0e701440b9b0308f6848b539ed214", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -2187,7 +2187,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n // Verify that the trait item and its implementation have compatible substs lists\n fn check_substs_compatible<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    assoc_ty: &ty::AssocItem,\n+    assoc_item: &ty::AssocItem,\n     substs: ty::SubstsRef<'tcx>,\n ) -> bool {\n     fn check_substs_compatible_inner<'tcx>(\n@@ -2219,7 +2219,10 @@ fn check_substs_compatible<'tcx>(\n         true\n     }\n \n-    check_substs_compatible_inner(tcx, tcx.generics_of(assoc_ty.def_id), substs.as_slice())\n+    let generics = tcx.generics_of(assoc_item.def_id);\n+    // Chop off any additional substs (RPITIT) substs\n+    let substs = &substs[0..generics.count().min(substs.len())];\n+    check_substs_compatible_inner(tcx, generics, substs)\n }\n \n fn confirm_impl_trait_in_trait_candidate<'tcx>(\n@@ -2248,11 +2251,27 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         };\n     }\n \n-    let impl_fn_def_id = leaf_def.item.def_id;\n     // Rebase from {trait}::{fn}::{opaque} to {impl}::{fn}::{opaque},\n     // since `data.substs` are the impl substs.\n     let impl_fn_substs =\n         obligation.predicate.substs.rebase_onto(tcx, tcx.parent(trait_fn_def_id), data.substs);\n+    let impl_fn_substs = translate_substs(\n+        selcx.infcx(),\n+        obligation.param_env,\n+        data.impl_def_id,\n+        impl_fn_substs,\n+        leaf_def.defining_node,\n+    );\n+\n+    if !check_substs_compatible(tcx, &leaf_def.item, impl_fn_substs) {\n+        let err = tcx.ty_error_with_message(\n+            obligation.cause.span,\n+            \"impl method and trait method have different parameters\",\n+        );\n+        return Progress { term: err.into(), obligations };\n+    }\n+\n+    let impl_fn_def_id = leaf_def.item.def_id;\n \n     let cause = ObligationCause::new(\n         obligation.cause.span,"}, {"sha": "cc0fc720ebbfd99e0fb87e74b1ca053239148d57", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -0,0 +1,17 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct U;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl Foo for U {\n+    fn bar<T>(&self) {}\n+    //~^ ERROR method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+}\n+\n+fn main() {\n+    U.bar();\n+}"}, {"sha": "cd42683e0224d3f50e5881d212ac922dc3e3b140", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/generics-mismatch.rs:11:12\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |           - expected 0 type parameters\n+...\n+LL |     fn bar<T>(&self) {}\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "9d27d3710a6016e2d5f9b67bd2082824e83dfdf1", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n+// But we fixed an ICE anyways.\n+\n+#![feature(specialization)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+default impl<U> Foo for U\n+where\n+    U: Copy,\n+{\n+    fn bar(&self) -> U {\n+        //~^ ERROR method `bar` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+impl Foo for i32 {}\n+\n+fn main() {\n+    1i32.bar();\n+}"}, {"sha": "a30e6346b292714d4235c666ffd142a56d57c28e", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -0,0 +1,23 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:16:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:9:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected fn pointer `fn(&U) -> impl Sized`\n+              found fn pointer `fn(&U) -> U`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "c9ee877db8ec52c4c7ecef269e4069d3b785d6c0", "filename": "src/test/ui/impl-trait/in-trait/specialization-substs-remap.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c021cf07d8e47d33b8d764b9505d3442177e241/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs?ref=6c021cf07d8e47d33b8d764b9505d3442177e241", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(specialization)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl<U> Foo for U\n+where\n+    U: Copy,\n+{\n+    fn bar(&self) -> U {\n+        *self\n+    }\n+}\n+\n+impl Foo for i32 {}\n+\n+fn main() {\n+    let _: i32 = 1i32.bar();\n+}"}]}