{"sha": "f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjIwYTNkMTQ3MWZkNzk0M2ViZDQxM2RjYmM5NGQ1MWJjZmVhOGU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-15T23:29:53Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:41:51Z"}, "message": "Stub out less code", "tree": {"sha": "fc6a6f50535194a59a56903776f64521149375fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6a6f50535194a59a56903776f64521149375fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "html_url": "https://github.com/rust-lang/rust/commit/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fde21c27c67ce3c665e344b602cfd1d22842cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fde21c27c67ce3c665e344b602cfd1d22842cc", "html_url": "https://github.com/rust-lang/rust/commit/42fde21c27c67ce3c665e344b602cfd1d22842cc"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "49d4864190aee530c0fd70fa9ee77bc1f1ffa86c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -691,7 +691,7 @@ impl<'a> Builder<'a> {\n         // the options through environment variables that are fetched and understood by both.\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n-        if !target.contains(\"msvc\") && !cfg!(test) {\n+        if !target.contains(\"msvc\") {\n             let ccache = self.config.ccache.as_ref();\n             let ccacheify = |s: &Path| {\n                 let ccache = match ccache {\n@@ -874,6 +874,8 @@ mod __test {\n \n     fn configure(host: &[&str], target: &[&str]) -> Config {\n         let mut config = Config::default_opts();\n+        // don't save toolstates\n+        config.save_toolstates = None;\n         config.run_host_only = true;\n         config.build = INTERNER.intern_str(\"A\");\n         config.hosts = vec![config.build].clone().into_iter()"}, {"sha": "daf25a36d47748066310e54f177107f44b744cc2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -722,7 +722,6 @@ impl Step for CodegenBackend {\n fn copy_codegen_backends_to_sysroot(builder: &Builder,\n                                     compiler: Compiler,\n                                     target_compiler: Compiler) {\n-    if cfg!(test) { return; }\n     let build = builder.build;\n     let target = target_compiler.host;\n "}, {"sha": "44073a5b0757237bda2fe96abb1aa873e6432756", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -817,7 +817,6 @@ impl Step for UnstableBookGen {\n }\n \n fn symlink_dir_force(src: &Path, dst: &Path) -> io::Result<()> {\n-    if cfg!(test) { return Ok(()); }\n     if let Ok(m) = fs::symlink_metadata(dst) {\n         if m.file_type().is_dir() {\n             try!(fs::remove_dir_all(dst));"}, {"sha": "fca265fe41c26f1435d71c97c4ebc7dfcfa795b3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -367,20 +367,20 @@ impl Build {\n         cc_detect::find(&mut build);\n         build.verbose(\"running sanity check\");\n         sanity::check(&mut build);\n-        if !cfg!(test) {\n-            // If local-rust is the same major.minor as the current version, then force a\n-            // local-rebuild\n-            let local_version_verbose = output(\n-                Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n-            let local_release = local_version_verbose\n-                .lines().filter(|x| x.starts_with(\"release:\"))\n-                .next().unwrap().trim_left_matches(\"release:\").trim();\n-            let my_version = channel::CFG_RELEASE_NUM;\n-            if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n-                build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n-                build.local_rebuild = true;\n-            }\n+\n+        // If local-rust is the same major.minor as the current version, then force a\n+        // local-rebuild\n+        let local_version_verbose = output(\n+            Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n+        let local_release = local_version_verbose\n+            .lines().filter(|x| x.starts_with(\"release:\"))\n+            .next().unwrap().trim_left_matches(\"release:\").trim();\n+        let my_version = channel::CFG_RELEASE_NUM;\n+        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n+            build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n+            build.local_rebuild = true;\n         }\n+\n         build.verbose(\"learning about cargo\");\n         metadata::build(&mut build);\n \n@@ -426,7 +426,6 @@ impl Build {\n     ///\n     /// After this executes, it will also ensure that `dir` exists.\n     fn clear_if_dirty(&self, dir: &Path, input: &Path) -> bool {\n-        if cfg!(test) { return true; }\n         let stamp = dir.join(\".stamp\");\n         let mut cleared = false;\n         if mtime(&stamp) < mtime(input) {\n@@ -697,7 +696,6 @@ impl Build {\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n     fn linker(&self, target: Interned<String>) -> Option<&Path> {\n-        if cfg!(test) { return None; }\n         if let Some(linker) = self.config.target_config.get(&target)\n                                                        .and_then(|c| c.linker.as_ref()) {\n             Some(linker)"}, {"sha": "2bb46cc5171d61b0881782f5474eb2aee3dee461", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -199,11 +199,7 @@ impl Step for ToolBuild {\n \n         if !is_expected {\n             if !is_ext_tool {\n-                if cfg!(test) {\n-                    panic!(\"unexpected failure -- would have hard exited\");\n-                } else {\n-                    exit(1);\n-                }\n+                exit(1);\n             } else {\n                 return None;\n             }"}, {"sha": "f3f4278d3290110194163e8a40ec22753be64540", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4620a3d1471fd7943ebd413dcbc94d51bcfea8e/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=f4620a3d1471fd7943ebd413dcbc94d51bcfea8e", "patch": "@@ -34,7 +34,6 @@ pub fn staticlib(name: &str, target: &str) -> String {\n \n /// Copies a file from `src` to `dst`\n pub fn copy(src: &Path, dst: &Path) {\n-    if cfg!(test) { return; }\n     let _ = fs::remove_file(&dst);\n     // Attempt to \"easy copy\" by creating a hard link (symlinks don't work on\n     // windows), but if that fails just fall back to a slow `copy` operation.\n@@ -67,7 +66,6 @@ pub fn replace_in_file(path: &Path, replacements: &[(&str, &str)]) {\n }\n \n pub fn read_stamp_file(stamp: &Path) -> Vec<PathBuf> {\n-    if cfg!(test) { return vec![]; }\n     let mut paths = Vec::new();\n     let mut contents = Vec::new();\n     t!(t!(File::open(stamp)).read_to_end(&mut contents));"}]}