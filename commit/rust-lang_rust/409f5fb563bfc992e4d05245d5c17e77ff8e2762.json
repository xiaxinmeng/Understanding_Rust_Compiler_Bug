{"sha": "409f5fb563bfc992e4d05245d5c17e77ff8e2762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWY1ZmI1NjNiZmM5OTJlNGQwNTI0NWQ1YzE3ZTc3ZmY4ZTI3NjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-11T22:00:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-11T22:00:23Z"}, "message": "Merge #9204\n\n9204: feat: more accurate memory usage info on glibc Linux r=jonas-schievink a=jonas-schievink\n\nThis adds support for the new `mallinfo2` API added in glibc 2.33. It addresses a shortcoming in the `mallinfo` API where it was unable to handle memory usage of more than 2 GB, which we sometimes exceed.\r\n\r\nBlocked on https://github.com/rust-lang/libc/pull/2228\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "934302b3a697fdf8c3b27e4885e75fb5b649f5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934302b3a697fdf8c3b27e4885e75fb5b649f5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409f5fb563bfc992e4d05245d5c17e77ff8e2762", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgw9z3CRBK7hj4Ov3rIwAAcdUIAF+SDhQKoQHGdqfsafUnJNJw\nSvnw4jQjt2isLMb5yrJEpqdb8ywZsQMEh1zEBkKCYfnfXhuOPuYEO/YsxZPnUEal\n9PN2mVMtRNo+hx0XtEfBNC3YyFOE81yAcNv5kGQkuS+FiPUR1TwdoX55yWDxhIl0\n+aeYbzk43MOBKF7MCQD+YQ0c9legYb+p8jeV/8JqYK8UO1Haf3hW1Ig/GHuHqbJw\nuzyQvFx9cDskACPTa3Y6wnRHdCg9RvwKvAKUHsYe4ZLd6Ms3lbj5nCFXHuD202Dq\njAR3uNyZjvGjDvsD0OAid5mePRH8g4y0HhvOZFcopjzakaUwxpV9nBEVKDX702Q=\n=UCId\n-----END PGP SIGNATURE-----\n", "payload": "tree 934302b3a697fdf8c3b27e4885e75fb5b649f5d5\nparent 72ea02869b94caf6dd450e17c4998357849ab3c5\nparent 74dc9bb0e9c1d62b3faa33b204abb04a17e57bcf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623448823 +0000\ncommitter GitHub <noreply@github.com> 1623448823 +0000\n\nMerge #9204\n\n9204: feat: more accurate memory usage info on glibc Linux r=jonas-schievink a=jonas-schievink\n\nThis adds support for the new `mallinfo2` API added in glibc 2.33. It addresses a shortcoming in the `mallinfo` API where it was unable to handle memory usage of more than 2 GB, which we sometimes exceed.\r\n\r\nBlocked on https://github.com/rust-lang/libc/pull/2228\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409f5fb563bfc992e4d05245d5c17e77ff8e2762", "html_url": "https://github.com/rust-lang/rust/commit/409f5fb563bfc992e4d05245d5c17e77ff8e2762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409f5fb563bfc992e4d05245d5c17e77ff8e2762/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ea02869b94caf6dd450e17c4998357849ab3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ea02869b94caf6dd450e17c4998357849ab3c5", "html_url": "https://github.com/rust-lang/rust/commit/72ea02869b94caf6dd450e17c4998357849ab3c5"}, {"sha": "74dc9bb0e9c1d62b3faa33b204abb04a17e57bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dc9bb0e9c1d62b3faa33b204abb04a17e57bcf", "html_url": "https://github.com/rust-lang/rust/commit/74dc9bb0e9c1d62b3faa33b204abb04a17e57bcf"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "e1d2a74f0528791e7b20a4fe9817639458c00365", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409f5fb563bfc992e4d05245d5c17e77ff8e2762/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/409f5fb563bfc992e4d05245d5c17e77ff8e2762/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=409f5fb563bfc992e4d05245d5c17e77ff8e2762", "patch": "@@ -765,9 +765,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.95\"\n+version = \"0.2.97\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"789da6d93f1b866ffe175afc5322a4d76c038605a1c3319bb57b06967ca98a36\"\n+checksum = \"12b8adadd720df158f4d70dfe7ccc6adb0472d7c55ca83445f6a5ab3e36f8fb6\"\n \n [[package]]\n name = \"libloading\""}, {"sha": "0b0a196aeb7265a7c7d44b56dadd1a532dcb8850", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/409f5fb563bfc992e4d05245d5c17e77ff8e2762/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f5fb563bfc992e4d05245d5c17e77ff8e2762/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=409f5fb563bfc992e4d05245d5c17e77ff8e2762", "patch": "@@ -32,9 +32,7 @@ impl MemoryUsage {\n                     allocated: Bytes(jemalloc_ctl::stats::allocated::read().unwrap() as isize),\n                 }\n             } else if #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))] {\n-                // Note: This is incredibly slow.\n-                let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n-                MemoryUsage { allocated: Bytes(alloc) }\n+                memusage_linux()\n             } else if #[cfg(windows)] {\n                 // There doesn't seem to be an API for determining heap usage, so we try to\n                 // approximate that by using the Commit Charge value.\n@@ -58,6 +56,37 @@ impl MemoryUsage {\n     }\n }\n \n+#[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n+fn memusage_linux() -> MemoryUsage {\n+    // Linux/glibc has 2 APIs for allocator introspection that we can use: mallinfo and mallinfo2.\n+    // mallinfo uses `int` fields and cannot handle memory usage exceeding 2 GB.\n+    // mallinfo2 is very recent, so its presence needs to be detected at runtime.\n+    // Both are abysmally slow.\n+\n+    use std::ffi::CStr;\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+    static MALLINFO2: AtomicUsize = AtomicUsize::new(1);\n+\n+    let mut mallinfo2 = MALLINFO2.load(Ordering::Relaxed);\n+    if mallinfo2 == 1 {\n+        let cstr = CStr::from_bytes_with_nul(b\"mallinfo2\\0\").unwrap();\n+        mallinfo2 = unsafe { libc::dlsym(libc::RTLD_DEFAULT, cstr.as_ptr()) } as usize;\n+        // NB: races don't matter here, since they'll always store the same value\n+        MALLINFO2.store(mallinfo2, Ordering::Relaxed);\n+    }\n+\n+    if mallinfo2 == 0 {\n+        // mallinfo2 does not exist, use mallinfo.\n+        let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n+        MemoryUsage { allocated: Bytes(alloc) }\n+    } else {\n+        let mallinfo2: fn() -> libc::mallinfo2 = unsafe { std::mem::transmute(mallinfo2) };\n+        let alloc = mallinfo2().uordblks as isize;\n+        MemoryUsage { allocated: Bytes(alloc) }\n+    }\n+}\n+\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n pub struct Bytes(isize);\n "}]}