{"sha": "bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYWQ5MTBiMjExZDNhM2RjYjZhYTM5ZTkzYjVkNmJhZDJhOTJmZjQ=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-15T20:02:54Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:08Z"}, "message": "simplify pointer arithmetic", "tree": {"sha": "003e001cf5b5f5dc382a338d092c8c337394f1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003e001cf5b5f5dc382a338d092c8c337394f1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4", "html_url": "https://github.com/rust-lang/rust/commit/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f904d0339a1e3f83fd99fe3d780cd07dac6dd11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f904d0339a1e3f83fd99fe3d780cd07dac6dd11d", "html_url": "https://github.com/rust-lang/rust/commit/f904d0339a1e3f83fd99fe3d780cd07dac6dd11d"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "a81514e96486d66c5814cb8e5ea38f724bab66d4", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=bead910b211d3a3dcb6aa39e93b5d6bad2a92ff4", "patch": "@@ -2128,16 +2128,22 @@ where\n \n struct InPlaceIterFront<T> {\n     inner: *mut T,\n-    count: usize,\n+    dst: *mut T,\n     did_panic: bool,\n }\n \n+impl<T> InPlaceIterFront<T> {\n+    unsafe fn len(&self) -> usize {\n+        self.dst.offset_from(self.inner) as usize\n+    }\n+}\n+\n impl<T> Drop for InPlaceIterFront<T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n             if mem::needs_drop::<T>() && self.did_panic {\n-                ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.count) as *mut _);\n+                ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()) as *mut _);\n             }\n         }\n     }\n@@ -2148,28 +2154,26 @@ where\n     I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n {\n     let original_ptr = iterator.as_inner().buf.as_ptr();\n-    let mut front_buffer = InPlaceIterFront { inner: original_ptr, count: 0, did_panic: true };\n+    let mut front_buffer =\n+        InPlaceIterFront { inner: original_ptr, dst: original_ptr, did_panic: true };\n \n     while let Some(item) = iterator.next() {\n         let source_iter = iterator.as_inner();\n-        let src_buf = source_iter.buf.as_ptr();\n-        debug_assert_eq!(original_ptr, src_buf);\n-        let src_idx = source_iter.ptr;\n+        debug_assert_eq!(original_ptr, source_iter.buf.as_ptr());\n         unsafe {\n-            let dst = src_buf.add(front_buffer.count);\n             debug_assert!(\n-                dst as *const _ < src_idx,\n+                front_buffer.dst as *const _ < source_iter.ptr,\n                 \"InPlaceIterable implementation produced more\\\n                           items than it consumed from the source\"\n             );\n-            ptr::write(dst, item)\n+            ptr::write(front_buffer.dst, item);\n+            front_buffer.dst = front_buffer.dst.add(1);\n         }\n-        front_buffer.count += 1;\n     }\n \n     let src = iterator.as_inner();\n     front_buffer.did_panic = false;\n-    let vec = unsafe { Vec::from_raw_parts(src.buf.as_ptr(), front_buffer.count, src.cap) };\n+    let vec = unsafe { Vec::from_raw_parts(src.buf.as_ptr(), front_buffer.len(), src.cap) };\n     src.cap = 0;\n     src.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };\n     src.ptr = src.buf.as_ptr();"}]}