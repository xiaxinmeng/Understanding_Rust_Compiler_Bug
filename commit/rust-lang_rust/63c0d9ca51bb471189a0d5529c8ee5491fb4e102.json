{"sha": "63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzBkOWNhNTFiYjQ3MTE4OWEwZDU1MjljOGVlNTQ5MWZiNGUxMDI=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-08-06T23:48:24Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-08-07T22:35:07Z"}, "message": "Display elided lifetime for non-reference type in doc", "tree": {"sha": "f452dc41505ef63d2cd543c816a375be00659796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f452dc41505ef63d2cd543c816a375be00659796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "html_url": "https://github.com/rust-lang/rust/commit/63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c15bae53b5c40db2682211836f892a5a44065e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15bae53b5c40db2682211836f892a5a44065e10", "html_url": "https://github.com/rust-lang/rust/commit/c15bae53b5c40db2682211836f892a5a44065e10"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "7b1dd5b11ed0e014b97cc46674a2782eb3e5a6df", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "patch": "@@ -1395,10 +1395,13 @@ impl Clean<Type> for hir::Ty<'_> {\n                                             _ => None,\n                                         });\n                                     if let Some(lt) = lifetime.cloned() {\n-                                        if !lt.is_elided() {\n-                                            let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                                            lt_substs.insert(lt_def_id.to_def_id(), lt.clean(cx));\n-                                        }\n+                                        let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n+                                        let cleaned = if !lt.is_elided() {\n+                                            lt.clean(cx)\n+                                        } else {\n+                                            self::types::Lifetime::elided()\n+                                        };\n+                                        lt_substs.insert(lt_def_id.to_def_id(), cleaned);\n                                     }\n                                     indices.lifetimes += 1;\n                                 }\n@@ -1957,21 +1960,17 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n                 output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None },\n             }\n         } else {\n-            let elide_lifetimes = self.args.iter().all(|arg| match arg {\n-                hir::GenericArg::Lifetime(lt) => lt.is_elided(),\n-                _ => true,\n-            });\n             GenericArgs::AngleBracketed {\n                 args: self\n                     .args\n                     .iter()\n-                    .filter_map(|arg| match arg {\n-                        hir::GenericArg::Lifetime(lt) if !elide_lifetimes => {\n-                            Some(GenericArg::Lifetime(lt.clean(cx)))\n+                    .map(|arg| match arg {\n+                        hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n+                            GenericArg::Lifetime(lt.clean(cx))\n                         }\n-                        hir::GenericArg::Lifetime(_) => None,\n-                        hir::GenericArg::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n-                        hir::GenericArg::Const(ct) => Some(GenericArg::Const(ct.clean(cx))),\n+                        hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n+                        hir::GenericArg::Type(ty) => GenericArg::Type(ty.clean(cx)),\n+                        hir::GenericArg::Const(ct) => GenericArg::Const(ct.clean(cx)),\n                     })\n                     .collect(),\n                 bindings: self.bindings.clean(cx),"}, {"sha": "b261df4073dfcc83be1eb26cd2554d8f5e131079", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "patch": "@@ -749,6 +749,10 @@ impl Lifetime {\n     pub fn statik() -> Lifetime {\n         Lifetime(\"'static\".to_string())\n     }\n+\n+    pub fn elided() -> Lifetime {\n+        Lifetime(\"'_\".to_string())\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "641866aaf3c5f44f7994e8f1db85159052dc2f29", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c0d9ca51bb471189a0d5529c8ee5491fb4e102/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "patch": "@@ -0,0 +1,33 @@\n+#![crate_name = \"foo\"]\n+\n+// rust-lang/rust#75225\n+//\n+// Since Rust 2018 we encourage writing out <'_> explicitly to make it clear\n+// that borrowing is occuring. Make sure rustdoc is following the same idiom.\n+\n+pub struct Ref<'a>(&'a u32);\n+type ARef<'a> = Ref<'a>;\n+\n+// @has foo/fn.test1.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test1(a: &u32) -> Ref {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test2.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test2(a: &u32) -> Ref<'_> {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test3.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test3(a: &u32) -> ARef {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test4.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test4(a: &u32) -> ARef<'_> {\n+    Ref(a)\n+}"}]}