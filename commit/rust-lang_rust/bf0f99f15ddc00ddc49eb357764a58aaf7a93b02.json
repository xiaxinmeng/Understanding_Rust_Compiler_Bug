{"sha": "bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "node_id": "C_kwDOAAsO6NoAKGJmMGY5OWYxNWRkYzAwZGRjNDllYjM1Nzc2NGE1OGFhZjdhOTNiMDI", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-02T10:22:12Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-06T17:39:09Z"}, "message": "Fix overloaded deref unused mut false positive", "tree": {"sha": "60c416bdad4a4dc87c5a1ddcca340a5afe0c6644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c416bdad4a4dc87c5a1ddcca340a5afe0c6644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "html_url": "https://github.com/rust-lang/rust/commit/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6377d50bd137424a38f2f71bb3eba29d74d02210", "url": "https://api.github.com/repos/rust-lang/rust/commits/6377d50bd137424a38f2f71bb3eba29d74d02210", "html_url": "https://github.com/rust-lang/rust/commit/6377d50bd137424a38f2f71bb3eba29d74d02210"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "c5d843d9ebd8975a1098c6e8555ecac18fbc76fd", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "patch": "@@ -263,12 +263,14 @@ impl Evaluator<'_> {\n         for proj in &p.projection {\n             match proj {\n                 ProjectionElem::Deref => {\n-                    match &ty.data(Interner).kind {\n-                        TyKind::Ref(_, _, inner) => {\n-                            ty = inner.clone();\n+                    ty = match &ty.data(Interner).kind {\n+                        TyKind::Raw(_, inner) | TyKind::Ref(_, _, inner) => inner.clone(),\n+                        _ => {\n+                            return Err(MirEvalError::TypeError(\n+                                \"Overloaded deref in MIR is disallowed\",\n+                            ))\n                         }\n-                        _ => not_supported!(\"dereferencing smart pointers\"),\n-                    }\n+                    };\n                     let x = from_bytes!(usize, self.read_memory(addr, self.ptr_size())?);\n                     addr = Address::from_usize(x);\n                 }"}, {"sha": "8e7fb091c03dbe48563729a5789af273085fc0e8", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "patch": "@@ -129,6 +129,12 @@ impl MirLowerCtx<'_> {\n             }\n             Expr::UnaryOp { expr, op } => match op {\n                 hir_def::expr::UnaryOp::Deref => {\n+                    if !matches!(\n+                        self.expr_ty(*expr).kind(Interner),\n+                        TyKind::Ref(..) | TyKind::Raw(..)\n+                    ) {\n+                        return None;\n+                    }\n                     let mut r = self.lower_expr_as_place(*expr)?;\n                     r.projection.push(ProjectionElem::Deref);\n                     Some(r)\n@@ -210,7 +216,7 @@ impl MirLowerCtx<'_> {\n                         Adjust::Deref(None) => {\n                             r.projection.push(ProjectionElem::Deref);\n                         }\n-                        Adjust::Deref(Some(_)) => not_supported!(\"overloaded dereference\"),\n+                        Adjust::Deref(Some(_)) => not_supported!(\"implicit overloaded dereference\"),\n                         Adjust::Borrow(AutoBorrow::Ref(m) | AutoBorrow::RawPtr(m)) => {\n                             let tmp = self.temp(adjustment.target.clone())?;\n                             self.push_assignment(\n@@ -757,6 +763,9 @@ impl MirLowerCtx<'_> {\n             Expr::Box { .. } => not_supported!(\"box expression\"),\n             Expr::UnaryOp { expr, op } => match op {\n                 hir_def::expr::UnaryOp::Deref => {\n+                    if !matches!(self.expr_ty(*expr).kind(Interner), TyKind::Ref(..) | TyKind::Raw(..)) {\n+                        not_supported!(\"explicit overloaded deref\");\n+                    }\n                     let (mut tmp, Some(current)) = self.lower_expr_to_some_place(*expr, current)? else {\n                         return Ok(None);\n                     };"}, {"sha": "1203a96124704b9a1c3377a14245e0f8fdf6f998", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0f99f15ddc00ddc49eb357764a58aaf7a93b02/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=bf0f99f15ddc00ddc49eb357764a58aaf7a93b02", "patch": "@@ -523,6 +523,34 @@ fn f(x: [(i32, u8); 10]) {\n       //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `a`\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn overloaded_deref() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore: deref_mut\n+use core::ops::{Deref, DerefMut};\n+\n+struct Foo;\n+impl Deref for Foo {\n+    type Target = i32;\n+    fn deref(&self) -> &i32 {\n+        &5\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut i32 {\n+        &mut 5\n+    }\n+}\n+fn f() {\n+    // FIXME: remove this mut and detect error\n+    let mut x = Foo;\n+    let y = &mut *x;\n+}\n \"#,\n         );\n     }"}]}