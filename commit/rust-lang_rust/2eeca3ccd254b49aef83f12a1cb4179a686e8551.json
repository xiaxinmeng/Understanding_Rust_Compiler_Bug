{"sha": "2eeca3ccd254b49aef83f12a1cb4179a686e8551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZWNhM2NjZDI1NGI0OWFlZjgzZjEyYTFjYjQxNzlhNjg2ZTg1NTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-08-23T20:02:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-08-27T13:20:45Z"}, "message": "Make metadata encoding deterministic\n\n`ty::Predicate` was being used as a key for a hash map, but its hash\nimplementation indirectly hashed addresses, which vary between each\ncompiler run. This is fixed by sorting predicates by their ID before\nencoding them.\n\nIn my tests, rustc is now able to produce deterministic results when\ncompiling libcore and libstd.\n\nI've beefed up `run-make/reproducible-build` to compare the produced\nartifacts bit-by-bit. This doesn't catch everything, but should be a\ngood start.\n\ncc #34902", "tree": {"sha": "9695d0b7a0de2751284274cab3fd60195d6ee0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9695d0b7a0de2751284274cab3fd60195d6ee0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eeca3ccd254b49aef83f12a1cb4179a686e8551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eeca3ccd254b49aef83f12a1cb4179a686e8551", "html_url": "https://github.com/rust-lang/rust/commit/2eeca3ccd254b49aef83f12a1cb4179a686e8551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eeca3ccd254b49aef83f12a1cb4179a686e8551/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adf003b990c7fc76cca3a909c6f81cfe4a1102f", "html_url": "https://github.com/rust-lang/rust/commit/5adf003b990c7fc76cca3a909c6f81cfe4a1102f"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "f99bdf3b890cb42db8669cd37790c2c362c2f99f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2eeca3ccd254b49aef83f12a1cb4179a686e8551", "patch": "@@ -862,8 +862,13 @@ fn encode_xrefs<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                           xrefs: FnvHashMap<XRef<'tcx>, u32>)\n {\n     let mut xref_positions = vec![0; xrefs.len()];\n+\n+    // Encode XRefs sorted by their ID\n+    let mut sorted_xrefs: Vec<_> = xrefs.into_iter().collect();\n+    sorted_xrefs.sort_by_key(|&(_, id)| id);\n+\n     rbml_w.start_tag(tag_xref_data);\n-    for (xref, id) in xrefs.into_iter() {\n+    for (xref, id) in sorted_xrefs.into_iter() {\n         xref_positions[id as usize] = rbml_w.mark_stable_position() as u32;\n         match xref {\n             XRef::Predicate(p) => {"}, {"sha": "8b22dd021a9e78ae1c9583ba85f5900df9c6e5ac", "filename": "src/test/run-make/reproducible-build/Makefile", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile?ref=2eeca3ccd254b49aef83f12a1cb4179a686e8551", "patch": "@@ -1,20 +1,24 @@\n -include ../tools.mk\n all:\n \t$(RUSTC) reproducible-build-aux.rs\n+\tmv libreproducible_build_aux.rlib first.rlib\n+\t$(RUSTC) reproducible-build-aux.rs\n+\tcp libreproducible_build_aux.rlib second.rlib\n+\tcmp \"first.rlib\" \"second.rlib\" || exit 1\n \t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build1\"\n \t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build2\"\n-\tnm \"$(TMPDIR)/reproducible-build1\" | sort > \"$(TMPDIR)/reproducible-build1.nm\"\n-\tnm \"$(TMPDIR)/reproducible-build2\" | sort > \"$(TMPDIR)/reproducible-build2.nm\"\n-\tcmp \"$(TMPDIR)/reproducible-build1.nm\" \"$(TMPDIR)/reproducible-build2.nm\" || exit 1\n+\tcmp \"$(TMPDIR)/reproducible-build1\" \"$(TMPDIR)/reproducible-build2\" || exit 1\n+\t$(RUSTC) reproducible-build-aux.rs -g\n+\tmv libreproducible_build_aux.rlib first.rlib\n \t$(RUSTC) reproducible-build-aux.rs -g\n+\tcp libreproducible_build_aux.rlib second.rlib\n \t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build1-debug\"\n \t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build2-debug\"\n-\tnm \"$(TMPDIR)/reproducible-build1-debug\" | sort > \"$(TMPDIR)/reproducible-build1-debug.nm\"\n-\tnm \"$(TMPDIR)/reproducible-build2-debug\" | sort > \"$(TMPDIR)/reproducible-build2-debug.nm\"\n-\tcmp \"$(TMPDIR)/reproducible-build1-debug.nm\" \"$(TMPDIR)/reproducible-build2-debug.nm\" || exit 1\n+\tcmp \"$(TMPDIR)/reproducible-build1-debug\" \"$(TMPDIR)/reproducible-build2-debug\" || exit 1\n+\t$(RUSTC) reproducible-build-aux.rs -O\n+\tmv libreproducible_build_aux.rlib first.rlib\n \t$(RUSTC) reproducible-build-aux.rs -O\n+\tcp libreproducible_build_aux.rlib second.rlib\n \t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build1-opt\"\n \t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build2-opt\"\n-\tnm \"$(TMPDIR)/reproducible-build1-opt\" | sort > \"$(TMPDIR)/reproducible-build1-opt.nm\"\n-\tnm \"$(TMPDIR)/reproducible-build2-opt\" | sort > \"$(TMPDIR)/reproducible-build2-opt.nm\"\n-\tcmp \"$(TMPDIR)/reproducible-build1-opt.nm\" \"$(TMPDIR)/reproducible-build2-opt.nm\" || exit 1\n+\tcmp \"$(TMPDIR)/reproducible-build1-opt\" \"$(TMPDIR)/reproducible-build2-opt\" || exit 1"}, {"sha": "73a62eee265cd5a830e95dfedbd12597ddb691ce", "filename": "src/test/run-make/reproducible-build/reproducible-build-aux.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build-aux.rs?ref=2eeca3ccd254b49aef83f12a1cb4179a686e8551", "patch": "@@ -33,6 +33,12 @@ pub enum Enum {\n \n pub struct TupleStruct(pub i8, pub i16, pub i32, pub i64);\n \n-pub trait Trait<T1, T2> {\n+pub trait Marker {}\n+impl Marker for char {}\n+impl<T, U> Marker for (T, U) {}\n+\n+pub trait Trait<T1: Marker + Marker + Marker, T2> where T1: 'static {\n+    type Assoc: Marker;\n+\n     fn foo(&self);\n }"}, {"sha": "a732cc11d60619654d580bea4419658148ce0f02", "filename": "src/test/run-make/reproducible-build/reproducible-build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeca3ccd254b49aef83f12a1cb4179a686e8551/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs?ref=2eeca3ccd254b49aef83f12a1cb4179a686e8551", "patch": "@@ -67,7 +67,9 @@ impl Trait<i32, u64> for u64 {\n     fn foo(&self) {}\n }\n \n-impl reproducible_build_aux::Trait<char, String> for TupleStruct {\n+impl<T: reproducible_build_aux::Marker + 'static> reproducible_build_aux::Trait<T, String> for TupleStruct {\n+    type Assoc = (u8, i16);\n+\n     fn foo(&self) {}\n }\n \n@@ -117,12 +119,10 @@ fn main() {\n     let _ = reproducible_build_aux::Enum::Variant3 { x: 0 };\n     let _ = reproducible_build_aux::TupleStruct(1, 2, 3, 4);\n \n-    let object_shim: &reproducible_build_aux::Trait<char, String> = &TupleStruct(0, 1, 2, 3);\n+    let object_shim: &reproducible_build_aux::Trait<char, String, Assoc=(u8, i16)> = &TupleStruct(0, 1, 2, 3);\n     object_shim.foo();\n \n     let pointer_shim: &Fn(i32) = &regular_fn;\n \n     TupleStruct(1, 2, 3, 4).bar();\n }\n-\n-"}]}