{"sha": "5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzZiOTVlOWI1NTYwZTFmNjc4NGFiM2MwMDNlNzEwNmFlNzRkMTk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-03T23:15:27Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-03T23:21:56Z"}, "message": "Change DocFragments from enum variant fields to structs with a nested enum\n\nThis makes the code a lot easier to work with. It also makes it easier\nto add new fields without updating each variant and `match`\nindividually.\n\n- Name the `Kind` variant after `DocFragmentKind` from `collapse_docs`\n- Remove unneeded impls", "tree": {"sha": "ca4a93a43e2a4dc6a0a07c8a0aab6e693afbbb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4a93a43e2a4dc6a0a07c8a0aab6e693afbbb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "html_url": "https://github.com/rust-lang/rust/commit/5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782013564efc06ef02614ba35a4e67dee4fcb8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/782013564efc06ef02614ba35a4e67dee4fcb8e7", "html_url": "https://github.com/rust-lang/rust/commit/782013564efc06ef02614ba35a4e67dee4fcb8e7"}], "stats": {"total": 136, "additions": 48, "deletions": 88}, "files": [{"sha": "a5ba037c2d6ee3883aeb1606625e8acaff47c99b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "patch": "@@ -370,32 +370,22 @@ impl<I: IntoIterator<Item = ast::NestedMetaItem>> NestedAttributesExt for I {\n /// information can be given when a doctest fails. Sugared doc comments and \"raw\" doc comments are\n /// kept separate because of issue #42760.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum DocFragment {\n+pub struct DocFragment {\n+    pub line: usize,\n+    pub span: rustc_span::Span,\n+    pub doc: String,\n+    pub kind: DocFragmentKind,\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n+pub enum DocFragmentKind {\n     /// A doc fragment created from a `///` or `//!` doc comment.\n-    SugaredDoc(usize, rustc_span::Span, String),\n+    SugaredDoc,\n     /// A doc fragment created from a \"raw\" `#[doc=\"\"]` attribute.\n-    RawDoc(usize, rustc_span::Span, String),\n+    RawDoc,\n     /// A doc fragment created from a `#[doc(include=\"filename\")]` attribute. Contains both the\n     /// given filename and the file contents.\n-    Include(usize, rustc_span::Span, String, String),\n-}\n-\n-impl DocFragment {\n-    pub fn as_str(&self) -> &str {\n-        match *self {\n-            DocFragment::SugaredDoc(_, _, ref s) => &s[..],\n-            DocFragment::RawDoc(_, _, ref s) => &s[..],\n-            DocFragment::Include(_, _, _, ref s) => &s[..],\n-        }\n-    }\n-\n-    pub fn span(&self) -> rustc_span::Span {\n-        match *self {\n-            DocFragment::SugaredDoc(_, span, _)\n-            | DocFragment::RawDoc(_, span, _)\n-            | DocFragment::Include(_, span, _, _) => span,\n-        }\n-    }\n+    Include { filename: String },\n }\n \n impl<'a> FromIterator<&'a DocFragment> for String {\n@@ -407,12 +397,7 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n             if !acc.is_empty() {\n                 acc.push('\\n');\n             }\n-            match *frag {\n-                DocFragment::SugaredDoc(_, _, ref docs)\n-                | DocFragment::RawDoc(_, _, ref docs)\n-                | DocFragment::Include(_, _, _, ref docs) => acc.push_str(docs),\n-            }\n-\n+            acc.push_str(&frag.doc);\n             acc\n         })\n     }\n@@ -547,15 +532,15 @@ impl Attributes {\n             .filter_map(|attr| {\n                 if let Some(value) = attr.doc_str() {\n                     let value = beautify_doc_string(value);\n-                    let mk_fragment: fn(_, _, _) -> _ = if attr.is_doc_comment() {\n-                        DocFragment::SugaredDoc\n+                    let kind = if attr.is_doc_comment() {\n+                        DocFragmentKind::SugaredDoc\n                     } else {\n-                        DocFragment::RawDoc\n+                        DocFragmentKind::RawDoc\n                     };\n \n                     let line = doc_line;\n                     doc_line += value.lines().count();\n-                    doc_strings.push(mk_fragment(line, attr.span, value));\n+                    doc_strings.push(DocFragment { line, span: attr.span, doc: value, kind });\n \n                     if sp.is_none() {\n                         sp = Some(attr.span);\n@@ -575,9 +560,12 @@ impl Attributes {\n                             {\n                                 let line = doc_line;\n                                 doc_line += contents.lines().count();\n-                                doc_strings.push(DocFragment::Include(\n-                                    line, attr.span, filename, contents,\n-                                ));\n+                                doc_strings.push(DocFragment {\n+                                    line,\n+                                    span: attr.span,\n+                                    doc: contents,\n+                                    kind: DocFragmentKind::Include { filename },\n+                                });\n                             }\n                         }\n                     }\n@@ -621,7 +609,7 @@ impl Attributes {\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n     pub fn doc_value(&self) -> Option<&str> {\n-        self.doc_strings.first().map(|s| s.as_str())\n+        self.doc_strings.first().map(|s| s.doc.as_str())\n     }\n \n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined"}, {"sha": "4bca3996eb48f50e96e251df1fd938f7ce08aee1", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "patch": "@@ -232,7 +232,12 @@ impl fold::DocFolder for CoverageCalculator {\n                 let mut tests = Tests { found_tests: 0 };\n \n                 find_testable_code(\n-                    &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n+                    &i.attrs\n+                        .doc_strings\n+                        .iter()\n+                        .map(|d| d.doc.as_str())\n+                        .collect::<Vec<_>>()\n+                        .join(\"\\n\"),\n                     &mut tests,\n                     ErrorCodes::No,\n                     false,"}, {"sha": "be7250f833f0042f2460f2e01f666828279a3afb", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "patch": "@@ -1,4 +1,4 @@\n-use crate::clean::{self, DocFragment, Item};\n+use crate::clean::{self, DocFragment, DocFragmentKind, Item};\n use crate::core::DocContext;\n use crate::fold;\n use crate::fold::DocFolder;\n@@ -12,23 +12,6 @@ pub const COLLAPSE_DOCS: Pass = Pass {\n     description: \"concatenates all document attributes into one document attribute\",\n };\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-enum DocFragmentKind {\n-    Sugared,\n-    Raw,\n-    Include,\n-}\n-\n-impl DocFragment {\n-    fn kind(&self) -> DocFragmentKind {\n-        match *self {\n-            DocFragment::SugaredDoc(..) => DocFragmentKind::Sugared,\n-            DocFragment::RawDoc(..) => DocFragmentKind::Raw,\n-            DocFragment::Include(..) => DocFragmentKind::Include,\n-        }\n-    }\n-}\n-\n pub fn collapse_docs(krate: clean::Crate, _: &DocContext<'_>) -> clean::Crate {\n     let mut krate = Collapser.fold_crate(krate);\n     krate.collapsed = true;\n@@ -50,30 +33,22 @@ fn collapse(doc_strings: &mut Vec<DocFragment>) {\n \n     for frag in take(doc_strings) {\n         if let Some(mut curr_frag) = last_frag.take() {\n-            let curr_kind = curr_frag.kind();\n-            let new_kind = frag.kind();\n+            let curr_kind = &curr_frag.kind;\n+            let new_kind = &frag.kind;\n \n-            if curr_kind == DocFragmentKind::Include || curr_kind != new_kind {\n-                match curr_frag {\n-                    DocFragment::SugaredDoc(_, _, ref mut doc_string)\n-                    | DocFragment::RawDoc(_, _, ref mut doc_string) => {\n-                        // add a newline for extra padding between segments\n-                        doc_string.push('\\n');\n-                    }\n-                    _ => {}\n+            if matches!(*curr_kind, DocFragmentKind::Include { .. }) || curr_kind != new_kind {\n+                if *curr_kind == DocFragmentKind::SugaredDoc\n+                    || *curr_kind == DocFragmentKind::RawDoc\n+                {\n+                    // add a newline for extra padding between segments\n+                    curr_frag.doc.push('\\n');\n                 }\n                 docs.push(curr_frag);\n                 last_frag = Some(frag);\n             } else {\n-                match curr_frag {\n-                    DocFragment::SugaredDoc(_, ref mut span, ref mut doc_string)\n-                    | DocFragment::RawDoc(_, ref mut span, ref mut doc_string) => {\n-                        doc_string.push('\\n');\n-                        doc_string.push_str(frag.as_str());\n-                        *span = span.to(frag.span());\n-                    }\n-                    _ => unreachable!(),\n-                }\n+                curr_frag.doc.push('\\n');\n+                curr_frag.doc.push_str(&frag.doc);\n+                curr_frag.span = curr_frag.span.to(frag.span);\n                 last_frag = Some(curr_frag);\n             }\n         } else {"}, {"sha": "f8e395bfb41d9aba35b502b3ffe32f4cbf34aec2", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "patch": "@@ -8,7 +8,7 @@ use std::mem;\n use std::ops::Range;\n \n use self::Condition::*;\n-use crate::clean::{self, GetDefId, Item};\n+use crate::clean::{self, DocFragmentKind, GetDefId, Item};\n use crate::core::DocContext;\n use crate::fold::{DocFolder, StripItem};\n \n@@ -314,11 +314,11 @@ crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {\n         return None;\n     }\n-    let start = attrs.doc_strings[0].span();\n+    let start = attrs.doc_strings[0].span;\n     if start == DUMMY_SP {\n         return None;\n     }\n-    let end = attrs.doc_strings.last().expect(\"no doc strings provided\").span();\n+    let end = attrs.doc_strings.last().expect(\"no doc strings provided\").span;\n     Some(start.to(end))\n }\n \n@@ -333,10 +333,8 @@ crate fn source_span_for_markdown_range(\n     md_range: &Range<usize>,\n     attrs: &clean::Attributes,\n ) -> Option<Span> {\n-    let is_all_sugared_doc = attrs.doc_strings.iter().all(|frag| match frag {\n-        clean::DocFragment::SugaredDoc(..) => true,\n-        _ => false,\n-    });\n+    let is_all_sugared_doc =\n+        attrs.doc_strings.iter().all(|frag| frag.kind == DocFragmentKind::SugaredDoc);\n \n     if !is_all_sugared_doc {\n         return None;"}, {"sha": "a9cf5a87f5493671365f49c0b95490f737be4415", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f76b95e9b5560e1f6784ab3c003e7106ae74d19/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=5f76b95e9b5560e1f6784ab3c003e7106ae74d19", "patch": "@@ -36,13 +36,7 @@ impl clean::Attributes {\n \n fn unindent_fragments(docs: &mut Vec<DocFragment>) {\n     for fragment in docs {\n-        match *fragment {\n-            DocFragment::SugaredDoc(_, _, ref mut doc_string)\n-            | DocFragment::RawDoc(_, _, ref mut doc_string)\n-            | DocFragment::Include(_, _, _, ref mut doc_string) => {\n-                *doc_string = unindent(doc_string)\n-            }\n-        }\n+        fragment.doc = unindent(&fragment.doc);\n     }\n }\n "}]}