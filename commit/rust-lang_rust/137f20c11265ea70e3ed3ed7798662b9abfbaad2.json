{"sha": "137f20c11265ea70e3ed3ed7798662b9abfbaad2", "node_id": "C_kwDOAAsO6NoAKDEzN2YyMGMxMTI2NWVhNzBlM2VkM2VkNzc5ODY2MmI5YWJmYmFhZDI", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-18T21:51:47Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-25T17:06:32Z"}, "message": "rebased: convert rustc_monomorphize errors to SessionDiagnostic", "tree": {"sha": "e9e9323ebecadd0740083c3169c97fbd9dc6f65b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e9323ebecadd0740083c3169c97fbd9dc6f65b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/137f20c11265ea70e3ed3ed7798662b9abfbaad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/137f20c11265ea70e3ed3ed7798662b9abfbaad2", "html_url": "https://github.com/rust-lang/rust/commit/137f20c11265ea70e3ed3ed7798662b9abfbaad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/137f20c11265ea70e3ed3ed7798662b9abfbaad2/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "4d45b0745ab227feb9000bc15713ade4b99241ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d45b0745ab227feb9000bc15713ade4b99241ea", "html_url": "https://github.com/rust-lang/rust/commit/4d45b0745ab227feb9000bc15713ade4b99241ea"}], "stats": {"total": 211, "additions": 170, "deletions": 41}, "files": [{"sha": "1c1869a470c4d03569f43d01ce49a71f9183fa84", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -4253,8 +4253,10 @@ name = \"rustc_monomorphize\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4995,9 +4997,9 @@ checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n \n [[package]]\n name = \"snapbox\"\n-version = \"0.3.3\"\n+version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"44d199ccf8f606592df2d145db26f2aa45344e23c64b074cc5a4047f1d99b0f7\"\n+checksum = \"767a1d5da232b6959cd1bd5c9e8db8a7cce09c3038e89deedb49a549a2aefd93\"\n dependencies = [\n  \"concolor\",\n  \"content_inspector\",\n@@ -5013,9 +5015,9 @@ dependencies = [\n \n [[package]]\n name = \"snapbox-macros\"\n-version = \"0.3.0\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8a253e6f894cfa440cba00600a249fa90869d8e0ec45ab274a456e043a0ce8f2\"\n+checksum = \"c01dea7e04cbb27ef4c86e9922184608185f7cd95c1763bc30d727cda4a5e930\"\n \n [[package]]\n name = \"socket2\""}, {"sha": "4c67c6f5cb46dff622ad70086ab18f9f966cd2f3", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -0,0 +1,19 @@\n+monomorphize_recursion_limit =\n+    reached the recursion limit while instantiating `{$shrunk}`\n+    .note = `{$def_path_str}` defined here\n+\n+monomorphize_written_to_path = the full type name has been written to '{$path}'\n+\n+monomorphize_type_length_limit = reached the type-length limit while instantiating `{$shrunk}`\n+\n+monomorphize_consider_type_length_limit =\n+    consider adding a `#![type_length_limit=\"{$type_length}\"]` attribute to your crate\n+\n+monomorphize_fatal_error = {$error_message}\n+\n+monomorphize_unused_generic_params = item has unused generic parameters\n+\n+monomorphize_large_assignments =\n+    moving {$size} bytes\n+    .label = value moved from here\n+    .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`"}, {"sha": "3f3f99fa9c04d57c16658eb5bc460ef255fbd8e5", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -39,6 +39,7 @@ fluent_messages! {\n     expand => \"../locales/en-US/expand.ftl\",\n     interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n+    monomorphize => \"../locales/en-US/monomorphize.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     passes => \"../locales/en-US/passes.ftl\",\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\","}, {"sha": "59ca04ec868d159d32a2d62d65cfd8c67a196ace", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -7,11 +7,13 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.8.1\", features = [ \"union\", \"may_dangle\" ] }\n tracing = \"0.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "8f0d98563af2c092c3fd6a2a43c2226c5f23c5c4", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -207,6 +207,8 @@ use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n+use crate::errors::{FatalError, LargeAssignmentsLint, RecursionLimit, TypeLengthLimit};\n+\n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n     Eager,\n@@ -604,17 +606,24 @@ fn check_recursion_limit<'tcx>(\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n+        let def_span = tcx.def_span(def_id);\n+        let def_path_str = tcx.def_path_str(def_id);\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n-        let error = format!(\"reached the recursion limit while instantiating `{}`\", shrunk);\n-        let mut err = tcx.sess.struct_span_fatal(span, &error);\n-        err.span_note(\n-            tcx.def_span(def_id),\n-            &format!(\"`{}` defined here\", tcx.def_path_str(def_id)),\n-        );\n-        if let Some(path) = written_to_path {\n-            err.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n-        }\n-        err.emit()\n+        let mut path = PathBuf::new();\n+        let was_written = if written_to_path.is_some() {\n+            path = written_to_path.unwrap();\n+            Some(())\n+        } else {\n+            None\n+        };\n+        tcx.sess.emit_fatal(RecursionLimit {\n+            span,\n+            shrunk,\n+            def_span,\n+            def_path_str,\n+            was_written,\n+            path,\n+        });\n     }\n \n     recursion_depths.insert(def_id, recursion_depth + 1);\n@@ -642,16 +651,15 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n-        let msg = format!(\"reached the type-length limit while instantiating `{}`\", shrunk);\n-        let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n-        if let Some(path) = written_to_path {\n-            diag.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n-        }\n-        diag.help(&format!(\n-            \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n-            type_length\n-        ));\n-        diag.emit()\n+        let span = tcx.def_span(instance.def_id());\n+        let mut path = PathBuf::new();\n+        let was_written = if written_to_path.is_some() {\n+            path = written_to_path.unwrap();\n+            Some(())\n+        } else {\n+            None\n+        };\n+        tcx.sess.emit_fatal(TypeLengthLimit { span, shrunk, was_written, path, type_length });\n     }\n }\n \n@@ -914,17 +922,16 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     // but correct span? This would make the lint at least accept crate-level lint attributes.\n                     return;\n                 };\n-                self.tcx.struct_span_lint_hir(\n+                self.tcx.emit_spanned_lint(\n                     LARGE_ASSIGNMENTS,\n                     lint_root,\n                     source_info.span,\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n-                        err.span_label(source_info.span, \"value moved from here\");\n-                        err.note(&format!(r#\"The current maximum size is {}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\"#, limit.bytes()));\n-                        err.emit();\n+                    LargeAssignmentsLint {\n+                        span: source_info.span,\n+                        size: layout.size.bytes(),\n+                        limit: limit.bytes(),\n                     },\n-                );\n+                )\n             }\n         }\n     }\n@@ -1321,7 +1328,9 @@ impl<'v> RootCollector<'_, 'v> {\n \n         let start_def_id = match self.tcx.lang_items().require(LangItem::Start) {\n             Ok(s) => s,\n-            Err(err) => self.tcx.sess.fatal(&err),\n+            Err(error_message) => {\n+                self.tcx.sess.emit_fatal(FatalError { error_message: error_message.clone() });\n+            }\n         };\n         let main_ret_ty = self.tcx.fn_sig(main_def_id).output();\n "}, {"sha": "62ebac97136ceb274fc6a3a418bfced016af263a", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -0,0 +1,81 @@\n+use std::path::PathBuf;\n+\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n+use rustc_session::SessionDiagnostic;\n+// use rustc_session::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::recursion_limit)]\n+pub struct RecursionLimit {\n+    #[primary_span]\n+    pub span: Span,\n+    pub shrunk: String,\n+    #[note]\n+    pub def_span: Span,\n+    pub def_path_str: String,\n+    #[note(monomorphize::written_to_path)]\n+    pub was_written: Option<()>,\n+    pub path: PathBuf,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::type_length_limit)]\n+#[help(monomorphize::consider_type_length_limit)]\n+pub struct TypeLengthLimit {\n+    #[primary_span]\n+    pub span: Span,\n+    pub shrunk: String,\n+    #[note(monomorphize::written_to_path)]\n+    pub was_written: Option<()>,\n+    pub path: PathBuf,\n+    pub type_length: usize,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::fatal_error)]\n+pub struct FatalError {\n+    pub error_message: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(monomorphize::fatal_error)]\n+pub struct SpanFatalError {\n+    #[primary_span]\n+    pub span: Span,\n+    pub error_message: String,\n+}\n+\n+pub struct UnusedGenericParams {\n+    pub span: Span,\n+    pub param_spans: Vec<Span>,\n+    pub param_names: Vec<String>,\n+}\n+\n+impl SessionDiagnostic<'_> for UnusedGenericParams {\n+    fn into_diagnostic(\n+        self,\n+        sess: &'_ rustc_session::parse::ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(rustc_errors::fluent::monomorphize::unused_generic_params);\n+        diag.set_span(self.span);\n+        for (span, name) in self.param_spans.into_iter().zip(self.param_names) {\n+            // FIXME: I can figure out how to do a label with a fluent string with a fixed message,\n+            // or a label with a dynamic value in a hard-coded string, but I haven't figured out\n+            // how to combine the two. \ud83d\ude22\n+            diag.span_label(span, format!(\"generic parameter `{}` is unused\", name));\n+        }\n+        diag\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(monomorphize::large_assignments)]\n+#[note]\n+pub struct LargeAssignmentsLint {\n+    #[label]\n+    pub span: Span,\n+    pub size: u64,\n+    pub limit: u64,\n+}"}, {"sha": "d64de44705bb2eaf7ea037a87af7516da3fac17c", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -3,6 +3,8 @@\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate tracing;\n@@ -16,6 +18,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n mod collector;\n+mod errors;\n mod partitioning;\n mod polymorphize;\n mod util;"}, {"sha": "d88b7e0a813604a79ec7a18164530f30bfb367c9", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -108,6 +108,7 @@ use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n use crate::collector::{self, MonoItemCollectionMode};\n+use crate::errors::{FatalError, SpanFatalError};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -149,7 +150,10 @@ fn get_partitioner<'tcx>(tcx: TyCtxt<'tcx>) -> Box<dyn Partitioner<'tcx>> {\n \n     match strategy {\n         \"default\" => Box::new(default::DefaultPartitioning),\n-        _ => tcx.sess.fatal(\"unknown partitioning strategy\"),\n+        _ => {\n+            let error_message = \"unknown partitioning strategy\".to_string();\n+            tcx.sess.emit_fatal(FatalError { error_message: error_message.clone() });\n+        }\n     }\n }\n \n@@ -334,9 +338,9 @@ where\n             let error_message = format!(\"symbol `{}` is already defined\", sym1);\n \n             if let Some(span) = span {\n-                tcx.sess.span_fatal(span, &error_message)\n+                tcx.sess.emit_fatal(SpanFatalError { span, error_message: error_message.clone() });\n             } else {\n-                tcx.sess.fatal(&error_message)\n+                tcx.sess.emit_fatal(FatalError { error_message: error_message.clone() });\n             }\n         }\n     }"}, {"sha": "88f8e24fbd529fa119d873cddbf636a3fb1dea02", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137f20c11265ea70e3ed3ed7798662b9abfbaad2/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -22,6 +22,8 @@ use rustc_span::symbol::sym;\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n+use crate::errors::UnusedGenericParams;\n+\n /// Provide implementations of queries relating to polymorphization analysis.\n pub fn provide(providers: &mut Providers) {\n     providers.unused_generic_params = unused_generic_params;\n@@ -206,22 +208,28 @@ fn emit_unused_generic_params_error<'tcx>(\n         _ => tcx.def_span(def_id),\n     };\n \n-    let mut err = tcx.sess.struct_span_err(fn_span, \"item has unused generic parameters\");\n-\n+    let mut param_spans = Vec::new();\n+    let mut param_names = Vec::new();\n     let mut next_generics = Some(generics);\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n             if unused_parameters.contains(param.index).unwrap_or(false) {\n                 debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n-                err.span_label(def_span, &format!(\"generic parameter `{}` is unused\", param.name));\n+                // \ud83e\udd14 The docs say\n+                //\n+                //     Any attribute applied to a Vec<T> will be repeated for each element of the vector.\n+                //\n+                // But they don't say what template variable to use to substitute each value into the message!?\n+                param_spans.push(def_span);\n+                param_names.push(param.name.to_string());\n             }\n         }\n \n         next_generics = generics.parent.map(|did| tcx.generics_of(did));\n     }\n \n-    err.emit();\n+    tcx.sess.emit_err(UnusedGenericParams { span: fn_span, param_spans, param_names });\n }\n \n /// Visitor used to aggregate generic parameter uses."}, {"sha": "9809f8ff33c2b998919fd0432c626f0f7323697a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=137f20c11265ea70e3ed3ed7798662b9abfbaad2", "patch": "@@ -1 +1 @@\n-Subproject commit 6da726708a4406f31f996d813790818dce837161\n+Subproject commit 9809f8ff33c2b998919fd0432c626f0f7323697a"}]}