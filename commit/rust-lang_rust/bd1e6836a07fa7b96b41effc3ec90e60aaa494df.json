{"sha": "bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "node_id": "C_kwDOAAsO6NoAKGJkMWU2ODM2YTA3ZmE3Yjk2YjQxZWZmYzNlYzkwZTYwYWFhNDk0ZGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-25T04:05:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T21:26:22Z"}, "message": "Avoid some clones.\n\n`Builder::expr_into_pattern` has a single call site. Currently the\n`pattern` argument at the call site is always cloned.\n\nThis commit changes things so that we instead do a clone within\n`expr_into_pattern`, but only if the pattern has the\n`PatKind::AscribeUserType` kind, and we only clone the annotation within\nthe pattern instead of the entire pattern.", "tree": {"sha": "550f41080a5e88fd8dc83261aa9c5b1c0721e10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/550f41080a5e88fd8dc83261aa9c5b1c0721e10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "html_url": "https://github.com/rust-lang/rust/commit/bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053874eecc9806f36195c35a7fad9c8878b0788e", "url": "https://api.github.com/repos/rust-lang/rust/commits/053874eecc9806f36195c35a7fad9c8878b0788e", "html_url": "https://github.com/rust-lang/rust/commit/053874eecc9806f36195c35a7fad9c8878b0788e"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "c8d4a1bf2c9e7eeb4ae48231f80208b6aeb8287c", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 ArmHasGuard(false),\n                                                 Some((None, initializer_span)),\n                                             );\n-                                            this.expr_into_pattern(block, (**pattern).clone(), init) // irrefutable pattern\n+                                            this.expr_into_pattern(block, pattern, init) // irrefutable pattern\n                                         }\n                                     })\n                                 },"}, {"sha": "b4440f2dda80e681646ed2a4f17ad49454541811", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "patch": "@@ -490,7 +490,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(super) fn expr_into_pattern(\n         &mut self,\n         mut block: BasicBlock,\n-        irrefutable_pat: Pat<'tcx>,\n+        irrefutable_pat: &Pat<'tcx>,\n         initializer: &Expr<'tcx>,\n     ) -> BlockAnd<()> {\n         match irrefutable_pat.kind {\n@@ -525,7 +525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             },\n                         ..\n                     },\n-                ascription: thir::Ascription { annotation, variance: _ },\n+                ascription: thir::Ascription { ref annotation, variance: _ },\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n@@ -538,7 +538,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let ty_source_info = self.source_info(annotation.span);\n \n-                let base = self.canonical_user_type_annotations.push(annotation);\n+                let base = self.canonical_user_type_annotations.push(annotation.clone());\n                 self.cfg.push(\n                     block,\n                     Statement {\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn place_into_pattern(\n         &mut self,\n         block: BasicBlock,\n-        irrefutable_pat: Pat<'tcx>,\n+        irrefutable_pat: &Pat<'tcx>,\n         initializer: PlaceBuilder<'tcx>,\n         set_match_place: bool,\n     ) -> BlockAnd<()> {"}, {"sha": "763038c52d7fab8d54a003b1e94cc5fda9d47605", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1e6836a07fa7b96b41effc3ec90e60aaa494df/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "patch": "@@ -1052,7 +1052,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Some((Some(&place), span)),\n                     );\n                     let place_builder = PlaceBuilder::from(local);\n-                    unpack!(block = self.place_into_pattern(block, *pattern, place_builder, false));\n+                    unpack!(\n+                        block =\n+                            self.place_into_pattern(block, pattern.as_ref(), place_builder, false)\n+                    );\n                 }\n             }\n             self.source_scope = original_source_scope;"}]}