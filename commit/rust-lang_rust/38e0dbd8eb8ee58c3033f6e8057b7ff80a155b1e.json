{"sha": "38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTBkYmQ4ZWI4ZWU1OGMzMDMzZjZlODA1N2I3ZmY4MGExNTViMWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-27T17:08:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-27T17:08:49Z"}, "message": "Rollup merge of #84610 - flip1995:clippyup, r=Manishearth,flip1995\n\nUpdate Clippy\n\nOut of cycle sync: I want to get https://github.com/rust-lang/rust-clippy/pull/7129 into beta that is branched next week.\n\nThis sync only adds one new feature in efc4c6c, which looks fine to me. Otherwise it only contains bug fixes and/or restricts lints further.\n\nr? `@Manishearth`", "tree": {"sha": "27c04af1d5f4b4ea7c41e4fed50aa296c2e4bb73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27c04af1d5f4b4ea7c41e4fed50aa296c2e4bb73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiEUhCRBK7hj4Ov3rIwAAFAEIADXjdcMgsppFrntbyysZc8Cz\nZvc61/vCVIFoEmbVuuWyEKlrIRpwxDWnemXBPS4nbK2hCEK2TRYLZWLOWBy9yqrP\nt0pKuRyMp9Ao/KDdSddW9XGw3e9u3RRjSFuyHgfN+T4/n2g7KK3Iesepoe98+kCB\neaeM2ufZ+i9ZpXBU5ayFvGvLv6S74g7zckukPWcFtgTOjGIskL9Os1Z04oZA5rC/\nrJbD5+Vgoy0EfP6/Idw+HueTXSeyfWKj/TTQOctfe26MSswo1Ahx+LtOs57KUb5X\n3ja+af4702Zq/tC0Li6Q9/gv2/wf1bJbXYTUkGtiqozQ5bAG+CiK5HEd1a9Ia/k=\n=TXst\n-----END PGP SIGNATURE-----\n", "payload": "tree 27c04af1d5f4b4ea7c41e4fed50aa296c2e4bb73\nparent 7969de2d9c8d463130550401b0bd76ab3db0b07e\nparent d4af90e0f93f92d2e04d7a4d8798e6b7af81b238\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619543329 +0200\ncommitter GitHub <noreply@github.com> 1619543329 +0200\n\nRollup merge of #84610 - flip1995:clippyup, r=Manishearth,flip1995\n\nUpdate Clippy\n\nOut of cycle sync: I want to get https://github.com/rust-lang/rust-clippy/pull/7129 into beta that is branched next week.\n\nThis sync only adds one new feature in efc4c6c, which looks fine to me. Otherwise it only contains bug fixes and/or restricts lints further.\n\nr? `@Manishearth`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "html_url": "https://github.com/rust-lang/rust/commit/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7969de2d9c8d463130550401b0bd76ab3db0b07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7969de2d9c8d463130550401b0bd76ab3db0b07e", "html_url": "https://github.com/rust-lang/rust/commit/7969de2d9c8d463130550401b0bd76ab3db0b07e"}, {"sha": "d4af90e0f93f92d2e04d7a4d8798e6b7af81b238", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4af90e0f93f92d2e04d7a4d8798e6b7af81b238", "html_url": "https://github.com/rust-lang/rust/commit/d4af90e0f93f92d2e04d7a4d8798e6b7af81b238"}], "stats": {"total": 742, "additions": 416, "deletions": 326}, "files": [{"sha": "3132d3a5cf0976d7dece539347c09c9f61832871", "filename": "src/tools/clippy/clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,8 +1,8 @@\n use std::borrow::Cow;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::meets_msrv;\n use clippy_utils::sugg::Sugg;\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n@@ -12,10 +12,8 @@ use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n-\n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: &Option<RustcVersion>) {\n-    if !meets_msrv(msrv.as_ref(), &PTR_AS_PTR_MSRV) {\n+    if !meets_msrv(msrv.as_ref(), &msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "8d3123e1ec8eefa00ee7e5a4b4ba65fd82314066", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{meets_msrv, SpanlessEq};\n+use clippy_utils::{meets_msrv, msrvs, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -12,8 +12,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const CHECKED_CONVERSIONS_MSRV: RustcVersion = RustcVersion::new(1, 34, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit bounds checking when casting.\n     ///\n@@ -58,7 +56,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &CHECKED_CONVERSIONS_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::TRY_FROM) {\n             return;\n         }\n "}, {"sha": "3560672a7481208b238a5cc8d96925f6ae267515", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::paths::INTO;\n-use clippy_utils::{match_def_path, meets_msrv};\n+use clippy_utils::{match_def_path, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const FROM_OVER_INTO_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n     ///\n@@ -57,7 +55,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl LateLintPass<'_> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &FROM_OVER_INTO_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::RE_REBALANCING_COHERENCE) {\n             return;\n         }\n "}, {"sha": "eadcd0867a8809c841f167dfcf7c397bf1d3d6e4", "filename": "src/tools/clippy/clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{is_else_clause, is_lang_ctor, meets_msrv};\n+use clippy_utils::{is_else_clause, is_lang_ctor, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind};\n@@ -9,8 +9,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const IF_THEN_SOME_ELSE_NONE_MSRV: RustcVersion = RustcVersion::new(1, 50, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for if-else that could be written to `bool::then`.\n     ///\n@@ -59,7 +57,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl LateLintPass<'_> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &IF_THEN_SOME_ELSE_NONE_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::BOOL_THEN) {\n             return;\n         }\n "}, {"sha": "757d7669bd806719ea3c63dfac9f846f7759af80", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1077,7 +1077,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark::new(msrv));\n+    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n     store.register_late_pass(move || box casts::Casts::new(msrv));\n     store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n "}, {"sha": "0fd09ff7197ae7e03e42966a528bb596b1b0233e", "filename": "src/tools/clippy/clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -14,8 +14,14 @@ pub(super) fn check<'tcx>(\n     body: &'tcx Expr<'_>,\n     expr: &'tcx Expr<'_>,\n ) {\n+    let arg_expr = match arg.kind {\n+        ExprKind::AddrOf(BorrowKind::Ref, _, ref_arg) => ref_arg,\n+        ExprKind::MethodCall(method, _, args, _) if args.len() == 1 && method.ident.name == rustc_span::sym::iter => {\n+            &args[0]\n+        },\n+        _ => return,\n+    };\n     if_chain! {\n-        if let ExprKind::AddrOf(BorrowKind::Ref, _, arg_expr) = arg.kind;\n         if let PatKind::Binding(.., target, _) = pat.kind;\n         if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Path(ref list_item) = arg_expression.kind;"}, {"sha": "54f714b54b657f6f6e2f25040d2e2e3afd4f1b4d", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_ast::ast::{FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_errors::Applicability;\n@@ -10,8 +10,6 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n-const MANUAL_NON_EXHAUSTIVE_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n     ///\n@@ -76,7 +74,7 @@ impl_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustive {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &MANUAL_NON_EXHAUSTIVE_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n "}, {"sha": "23428524dee976f8a9994ba50fd4cdbe335023f0", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant, Constant};\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, paths};\n+use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n@@ -17,8 +17,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n \n-const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using\n@@ -74,7 +72,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "520162559e50f74690bcaa67c2f93135dea73f7f", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -112,14 +112,23 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         then {\n             let reindented_or_body =\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n+\n+            let suggestion = if scrutinee.span.from_expansion() {\n+                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n+                }\n+                else {\n+                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par()\n+                };\n+\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n                 &format!(\"this pattern reimplements `{}`\", case.unwrap_fn_path()),\n                 \"replace with\",\n                 format!(\n                     \"{}.unwrap_or({})\",\n-                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par(),\n+                    suggestion,\n                     reindented_or_body,\n                 ),\n                 Applicability::MachineApplicable,"}, {"sha": "13b2a834b0a962ac4db369573dab48ddfc9bda16", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -7,8 +7,9 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use clippy_utils::visitors::LocalUsedVisitor;\n use clippy_utils::{\n-    get_parent_expr, in_macro, is_allowed, is_expn_of, is_lang_ctor, is_refutable, is_wild, meets_msrv, path_to_local,\n-    path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks, strip_pat_refs,\n+    get_parent_expr, in_macro, is_allowed, is_expn_of, is_lang_ctor, is_refutable, is_wild, meets_msrv, msrvs,\n+    path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks,\n+    strip_pat_refs,\n };\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -578,8 +579,6 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n-const MATCH_LIKE_MATCHES_MACRO_MSRV: RustcVersion = RustcVersion::new(1, 42, 0);\n-\n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n@@ -588,7 +587,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n         redundant_pattern_match::check(cx, expr);\n \n-        if meets_msrv(self.msrv.as_ref(), &MATCH_LIKE_MATCHES_MACRO_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO) {\n             if !check_match_like_matches(cx, expr) {\n                 lint_match_arms(cx, expr);\n             }"}, {"sha": "183daee36177489843452fb7ce3350a2a6c742ff", "filename": "src/tools/clippy/clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{in_macro, is_diag_trait_item, is_lang_ctor, match_def_path, meets_msrv, paths};\n+use clippy_utils::{in_macro, is_diag_trait_item, is_lang_ctor, match_def_path, meets_msrv, msrvs, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -256,8 +256,6 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n     }\n }\n \n-const MEM_REPLACE_WITH_DEFAULT_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n pub struct MemReplace {\n     msrv: Option<RustcVersion>,\n }\n@@ -281,7 +279,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv.as_ref(), &MEM_REPLACE_WITH_DEFAULT_MSRV) {\n+                if meets_msrv(self.msrv.as_ref(), &msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "ecec6da3aa0f62e6ad3be7317edb5bca59114f46", "filename": "src/tools/clippy/clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,23 +1,30 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_trait_method;\n use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n+use rustc_semver::RustcVersion;\n use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span) {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<&RustcVersion>) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n-        ty::Adt(adt, subst) if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) => subst.type_at(0),\n-        _ if is_trait_method(cx, expr, sym::Iterator) => match get_iterator_item_ty(cx, recv_ty) {\n-            // <T as Iterator>::Item\n-            Some(ty) => ty,\n-            _ => return,\n+        ty::Adt(adt, subst)\n+            if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n+        {\n+            subst.type_at(0)\n+        },\n+        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) => {\n+            match get_iterator_item_ty(cx, recv_ty) {\n+                // <T as Iterator>::Item\n+                Some(ty) => ty,\n+                _ => return,\n+            }\n         },\n         _ => return,\n     };"}, {"sha": "f0d69a1f42e7b911a6c39e34ce4cb1091eeedb95", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::source::snippet;\n-use clippy_utils::{is_trait_method, meets_msrv};\n+use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -9,8 +9,6 @@ use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n \n-const FILTER_MAP_NEXT_MSRV: RustcVersion = RustcVersion::new(1, 30, 0);\n-\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n@@ -19,7 +17,7 @@ pub(super) fn check<'tcx>(\n     msrv: Option<&RustcVersion>,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n+        if !meets_msrv(msrv, &msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "4d8365fcda12681f72a45fd48e961c2e54ab8b23", "filename": "src/tools/clippy/clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -11,8 +11,6 @@ use rustc_span::symbol::sym;\n \n use super::MAP_UNWRAP_OR;\n \n-const MAP_UNWRAP_OR_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n-\n /// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n /// Return true if lint triggered\n pub(super) fn check<'tcx>(\n@@ -23,13 +21,14 @@ pub(super) fn check<'tcx>(\n     unwrap_arg: &'tcx hir::Expr<'_>,\n     msrv: Option<&RustcVersion>,\n ) -> bool {\n-    if !meets_msrv(msrv, &MAP_UNWRAP_OR_MSRV) {\n-        return false;\n-    }\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n \n+    if is_result && !meets_msrv(msrv, &msrvs::RESULT_MAP_OR_ELSE) {\n+        return false;\n+    }\n+\n     if is_option || is_result {\n         // Don't make a suggestion that may fail to compile due to mutably borrowing\n         // the same variable twice."}, {"sha": "e15dbb899b36aac49bd00dae5ebf6cc7058a4a5d", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1959,7 +1959,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n             (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n             (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n-            (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span),\n+            (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, msrv),\n             (\"collect\", []) => match method_call!(recv) {\n                 Some((\"cloned\", [recv2], _)) => iter_cloned_collect::check(cx, expr, recv2),\n                 Some((\"map\", [m_recv, m_arg], _)) => {"}, {"sha": "5a57135038fdc8beac4206c401c6e8167f176c3c", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks};\n+use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, remove_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -12,8 +12,6 @@ use rustc_span::sym;\n \n use super::OPTION_AS_REF_DEREF;\n \n-const OPTION_AS_REF_DEREF_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -23,7 +21,7 @@ pub(super) fn check<'tcx>(\n     is_mut: bool,\n     msrv: Option<&RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n+    if !meets_msrv(msrv, &msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "0daea47816a512137265160cc7773706380b4b44", "filename": "src/tools/clippy/clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -18,9 +18,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n-            ty::Array(_, size) => size\n-                .try_eval_usize(cx.tcx, cx.param_env)\n-                .map_or(false, |size| size < 32),\n+            ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }"}, {"sha": "59cbc481ed42eccd73758fe2d314b09bde109bff", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, trait_ref_of_method};\n+use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n@@ -12,8 +12,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n \n-const MISSING_CONST_FOR_FN_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     ///\n@@ -97,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv.as_ref(), &MISSING_CONST_FOR_FN_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::CONST_IF_MATCH) {\n             return;\n         }\n "}, {"sha": "7b156a8c49dd9d93aec449e7898ce3acb7c09dba", "filename": "src/tools/clippy/clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,15 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_lang_ctor;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, meets_msrv};\n+use clippy_utils::{differing_macro_contexts, is_lang_ctor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -63,21 +61,7 @@ declare_clippy_lint! {\n     \"Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.\"\n }\n \n-const NEEDLESS_QUESTION_MARK_RESULT_MSRV: RustcVersion = RustcVersion::new(1, 13, 0);\n-const NEEDLESS_QUESTION_MARK_OPTION_MSRV: RustcVersion = RustcVersion::new(1, 22, 0);\n-\n-pub struct NeedlessQuestionMark {\n-    msrv: Option<RustcVersion>,\n-}\n-\n-impl NeedlessQuestionMark {\n-    #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n-    }\n-}\n-\n-impl_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n+declare_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n \n #[derive(Debug)]\n enum SomeOkCall<'a> {\n@@ -111,7 +95,7 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n             _ => return,\n         };\n \n-        if let Some(ok_some_call) = is_some_or_ok_call(self, cx, e) {\n+        if let Some(ok_some_call) = is_some_or_ok_call(cx, e) {\n             emit_lint(cx, &ok_some_call);\n         }\n     }\n@@ -127,14 +111,12 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n \n         if_chain! {\n             if let Some(expr) = expr_opt;\n-            if let Some(ok_some_call) = is_some_or_ok_call(self, cx, expr);\n+            if let Some(ok_some_call) = is_some_or_ok_call(cx, expr);\n             then {\n                 emit_lint(cx, &ok_some_call);\n             }\n         };\n     }\n-\n-    extract_msrv_attr!(LateContext);\n }\n \n fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n@@ -153,11 +135,7 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n     );\n }\n \n-fn is_some_or_ok_call<'a>(\n-    nqml: &NeedlessQuestionMark,\n-    cx: &'a LateContext<'_>,\n-    expr: &'a Expr<'_>,\n-) -> Option<SomeOkCall<'a>> {\n+fn is_some_or_ok_call<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option<SomeOkCall<'a>> {\n     if_chain! {\n         // Check outer expression matches CALL_IDENT(ARGUMENT) format\n         if let ExprKind::Call(path, args) = &expr.kind;\n@@ -188,8 +166,7 @@ fn is_some_or_ok_call<'a>(\n             let inner_is_some = is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n \n             // Check for Option MSRV\n-            let meets_option_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n-            if outer_is_some && inner_is_some && meets_option_msrv {\n+            if outer_is_some && inner_is_some {\n                 return Some(SomeOkCall::SomeCall(expr, inner_expr));\n             }\n \n@@ -202,8 +179,7 @@ fn is_some_or_ok_call<'a>(\n             let does_not_call_from = !has_implicit_error_from(cx, expr, inner_expr);\n \n             // Must meet Result MSRV\n-            let meets_result_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_RESULT_MSRV);\n-            if outer_is_result && inner_is_result && does_not_call_from && meets_result_msrv {\n+            if outer_is_result && inner_is_result && does_not_call_from {\n                 return Some(SomeOkCall::OkCall(expr, inner_expr));\n             }\n         }"}, {"sha": "7169f96eaf1f3c9160b3e87a5188bfdde3040bec", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path};\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, msrvs, single_segment_path};\n use clippy_utils::{higher, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n@@ -159,8 +159,6 @@ declare_clippy_lint! {\n     \"manually reimplementing {`Range`, `RangeInclusive`}`::contains`\"\n }\n \n-const MANUAL_RANGE_CONTAINS_MSRV: RustcVersion = RustcVersion::new(1, 35, 0);\n-\n pub struct Ranges {\n     msrv: Option<RustcVersion>,\n }\n@@ -187,7 +185,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, l, r) => {\n-                if meets_msrv(self.msrv.as_ref(), &MANUAL_RANGE_CONTAINS_MSRV) {\n+                if meets_msrv(self.msrv.as_ref(), &msrvs::RANGE_CONTAINS) {\n                     check_possible_range_contains(cx, op.node, l, r, expr);\n                 }\n             },"}, {"sha": "d5ee8d3468deb84aca1ad7017d66765a1d181b15", "filename": "src/tools/clippy/clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::meets_msrv;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const REDUNDANT_FIELD_NAMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for fields in struct literals where shorthands\n     /// could be used.\n@@ -52,7 +50,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_FIELD_NAMES_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "48107d9c037db3abdae9caa08930c1cbbb2d9321", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const REDUNDANT_STATIC_LIFETIMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for constants and statics with an explicit `'static` lifetime.\n     ///\n@@ -100,7 +98,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_STATIC_LIFETIMES_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "a45bb1023899dacd3f04d8883ef1b04d3f7e4497", "filename": "src/tools/clippy/clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::in_macro;\n-use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -60,8 +60,21 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n     // ```\n     let mut single_use_usages = Vec::new();\n \n+    // keep track of macros defined in the module as we don't want it to trigger on this (#7106)\n+    // ```rust,ignore\n+    // macro_rules! foo { () => {} };\n+    // pub(crate) use foo;\n+    // ```\n+    let mut macros = Vec::new();\n+\n     for item in items {\n-        track_uses(cx, &item, &mut imports_reused_with_self, &mut single_use_usages);\n+        track_uses(\n+            cx,\n+            &item,\n+            &mut imports_reused_with_self,\n+            &mut single_use_usages,\n+            &mut macros,\n+        );\n     }\n \n     for single_use in &single_use_usages {\n@@ -96,6 +109,7 @@ fn track_uses(\n     item: &Item,\n     imports_reused_with_self: &mut Vec<Symbol>,\n     single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n+    macros: &mut Vec<Symbol>,\n ) {\n     if in_macro(item.span) || item.vis.kind.is_pub() {\n         return;\n@@ -105,14 +119,22 @@ fn track_uses(\n         ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n             check_mod(cx, &items);\n         },\n+        ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n+            macros.push(item.ident.name);\n+        },\n         ItemKind::Use(use_tree) => {\n             let segments = &use_tree.prefix.segments;\n \n+            let should_report =\n+                |name: &Symbol| !macros.contains(name) || matches!(item.vis.kind, VisibilityKind::Inherited);\n+\n             // keep track of `use some_module;` usages\n             if segments.len() == 1 {\n                 if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n-                    let ident = &segments[0].ident;\n-                    single_use_usages.push((ident.name, item.span, true));\n+                    let name = segments[0].ident.name;\n+                    if should_report(&name) {\n+                        single_use_usages.push((name, item.span, true));\n+                    }\n                 }\n                 return;\n             }\n@@ -124,8 +146,10 @@ fn track_uses(\n                         let segments = &tree.0.prefix.segments;\n                         if segments.len() == 1 {\n                             if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n-                                let ident = &segments[0].ident;\n-                                single_use_usages.push((ident.name, tree.0.span, false));\n+                                let name = segments[0].ident.name;\n+                                if should_report(&name) {\n+                                    single_use_usages.push((name, tree.0.span, false));\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "3e985fa72b8fe77583ed58223778bf464a2eb04c", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,11 +1,8 @@\n #![allow(clippy::wildcard_imports, clippy::enum_glob_use)]\n \n+use clippy_utils::ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path};\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::over;\n-use clippy_utils::{\n-    ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path},\n-    meets_msrv,\n-};\n+use clippy_utils::{meets_msrv, msrvs, over};\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Pat, PatKind, PatKind::*, DUMMY_NODE_ID};\n@@ -54,8 +51,6 @@ declare_clippy_lint! {\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n \n-const UNNESTED_OR_PATTERNS_MSRV: RustcVersion = RustcVersion::new(1, 53, 0);\n-\n #[derive(Clone, Copy)]\n pub struct UnnestedOrPatterns {\n     msrv: Option<RustcVersion>,\n@@ -72,27 +67,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "3387f35bac3d4fea903d4145fbb247dc5e8b5f49", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -47,25 +47,35 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                         func.kind,\n                         hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryIntoResult, _))\n                     ) {\n-                        check_method_call(cx, &args[0], expr);\n+                        check_map_error(cx, &args[0], expr);\n                     }\n                 } else {\n-                    check_method_call(cx, res, expr);\n+                    check_map_error(cx, res, expr);\n                 }\n             },\n-\n             hir::ExprKind::MethodCall(path, _, args, _) => match &*path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n-                    check_method_call(cx, &args[0], expr);\n+                    check_map_error(cx, &args[0], expr);\n                 },\n                 _ => (),\n             },\n-\n             _ => (),\n         }\n     }\n }\n \n+fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n+    let mut call = call;\n+    while let hir::ExprKind::MethodCall(ref path, _, ref args, _) = call.kind {\n+        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+            call = &args[0];\n+        } else {\n+            break;\n+        }\n+    }\n+    check_method_call(cx, call, expr);\n+}\n+\n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n         let symbol = &*path.ident.as_str();"}, {"sha": "aa4d16633ff80f3937f576017e3ad2d3ec689a19", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{in_macro, meets_msrv};\n+use clippy_utils::{in_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -62,8 +62,6 @@ pub struct UseSelf {\n     stack: Vec<StackItem>,\n }\n \n-const USE_SELF_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n-\n impl UseSelf {\n     #[must_use]\n     pub fn new(msrv: Option<RustcVersion>) -> Self {\n@@ -236,7 +234,10 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n-        if in_macro(hir_ty.span) | in_impl(cx, hir_ty) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+        if in_macro(hir_ty.span)\n+            || in_impl(cx, hir_ty)\n+            || !meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS)\n+        {\n             return;\n         }\n \n@@ -288,7 +289,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             }\n         }\n \n-        if in_macro(expr.span) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+        if in_macro(expr.span) || !meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS) {\n             return;\n         }\n "}, {"sha": "d56855a71c159b2e1cdc351d7708e9f8371b3e46", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -106,7 +106,7 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, NEEDLESS_QUESTION_MARK, PTR_AS_PTR. The minimum rust version that the project supports\n+    /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR. The minimum rust version that the project supports\n     (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),"}, {"sha": "cd85c487798d911a1e64d477937d92212c4ad663", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -38,6 +38,7 @@ pub mod diagnostics;\n pub mod eager_or_lazy;\n pub mod higher;\n mod hir_utils;\n+pub mod msrvs;\n pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;"}, {"sha": "00df04c0144c18b97650f0f9bc128de9d47f9219", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -0,0 +1,29 @@\n+use rustc_semver::RustcVersion;\n+\n+macro_rules! msrv_aliases {\n+    ($($major:literal,$minor:literal,$patch:literal {\n+        $($name:ident),* $(,)?\n+    })*) => {\n+        $($(\n+        pub const $name: RustcVersion = RustcVersion::new($major, $minor, $patch);\n+        )*)*\n+    };\n+}\n+\n+// names may refer to stabilized feature flags or library items\n+msrv_aliases! {\n+    1,53,0 { OR_PATTERNS }\n+    1,50,0 { BOOL_THEN }\n+    1,46,0 { CONST_IF_MATCH }\n+    1,45,0 { STR_STRIP_PREFIX }\n+    1,42,0 { MATCHES_MACRO }\n+    1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n+    1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }\n+    1,38,0 { POINTER_CAST }\n+    1,37,0 { TYPE_ALIAS_ENUM_VARIANTS }\n+    1,36,0 { ITERATOR_COPIED }\n+    1,35,0 { OPTION_COPIED, RANGE_CONTAINS }\n+    1,34,0 { TRY_FROM }\n+    1,30,0 { ITERATOR_FIND_MAP }\n+    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n+}"}, {"sha": "a08dcf19e5b51481398f933bd35f1bf4401f2ae4", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -364,7 +364,7 @@ fn check_terminator(\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n     rustc_mir::const_eval::is_const_fn(tcx, def_id)\n-        && if let Some(const_stab) = tcx.lookup_const_stability(def_id) {\n+        && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n@@ -375,10 +375,8 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {\n-                // `rustc_mir::const_eval::is_const_fn` should return false for unstably const functions.\n-                unreachable!();\n+                // Unstable const fn with the feature enabled.\n+                msrv.is_none()\n             }\n-        } else {\n-            true\n-        }\n+        })\n }"}, {"sha": "d6cc6d0c2c76394842dd80d085e811bf96b78725", "filename": "src/tools/clippy/doc/adding_lints.md", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -390,17 +390,23 @@ pass.\n \n ## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Projects supporting older versions of Rust would need to disable a lint if it\n-targets features present in later versions. Support for this can be added by\n-specifying an MSRV in your lint like so,\n+Sometimes a lint makes suggestions that require a certain version of Rust. For example, the `manual_strip` lint suggests\n+using `str::strip_prefix` and `str::strip_suffix` which is only available after Rust 1.45. In such cases, you need to\n+ensure that the MSRV configured for the project is >= the MSRV of the required Rust feature. If multiple features are\n+required, just use the one with a lower MSRV.\n+\n+First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be\n+accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n-const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n+msrv_aliases! {\n+    ..\n+    1,45,0 { STR_STRIP_PREFIX }\n+}\n ```\n \n-The project's MSRV will also have to be an attribute in the lint so you'll have\n-to add a struct and constructor for your lint. The project's MSRV needs to be\n-passed when the lint is registered in `lib.rs`\n+In order to access the project-configured MSRV, you need to have an `msrv` field in the LintPass struct, and a\n+constructor to initialize the field. The `msrv` value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n@@ -415,11 +421,11 @@ impl ManualStrip {\n }\n ```\n \n-The project's MSRV can then be matched against the lint's `msrv` in the LintPass\n+The project's MSRV can then be matched against the feature MSRV in the LintPass\n using the `meets_msrv` utility function.\n \n ``` rust\n-if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```"}, {"sha": "f6a75595c986b1294e21bf8236eafd90cd97237e", "filename": "src/tools/clippy/lintcheck/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -22,9 +22,16 @@ use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n \n+#[cfg(not(windows))]\n const CLIPPY_DRIVER_PATH: &str = \"target/debug/clippy-driver\";\n+#[cfg(not(windows))]\n const CARGO_CLIPPY_PATH: &str = \"target/debug/cargo-clippy\";\n \n+#[cfg(windows)]\n+const CLIPPY_DRIVER_PATH: &str = \"target/debug/clippy-driver.exe\";\n+#[cfg(windows)]\n+const CARGO_CLIPPY_PATH: &str = \"target/debug/cargo-clippy.exe\";\n+\n const LINTCHECK_DOWNLOADS: &str = \"target/lintcheck/downloads\";\n const LINTCHECK_SOURCES: &str = \"target/lintcheck/sources\";\n "}, {"sha": "ca563ba097851b3b8a005ec203fcac9480e43aea", "filename": "src/tools/clippy/tests/ui/crashes/ice-7126.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -0,0 +1,14 @@\n+// This test requires a feature gated const fn and will stop working in the future.\n+\n+#![feature(const_btree_new)]\n+\n+use std::collections::BTreeMap;\n+\n+struct Foo(BTreeMap<i32, i32>);\n+impl Foo {\n+    fn new() -> Self {\n+        Self(BTreeMap::new())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "39cc58cd298439d0c06756b5f68090234b9414b1", "filename": "src/tools/clippy/tests/ui/iter_cloned_collect.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.fixed?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -19,4 +19,8 @@ fn main() {\n         let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n             .to_bytes().to_vec();\n     }\n+\n+    // Issue #6808\n+    let arr: [u8; 64] = [0; 64];\n+    let _: Vec<_> = arr.to_vec();\n }"}, {"sha": "c2a036ec09f1e80cea582f0b49c746497e95e3ce", "filename": "src/tools/clippy/tests/ui/iter_cloned_collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -22,4 +22,8 @@ fn main() {\n             .cloned()\n             .collect();\n     }\n+\n+    // Issue #6808\n+    let arr: [u8; 64] = [0; 64];\n+    let _: Vec<_> = arr.iter().cloned().collect();\n }"}, {"sha": "e1df61794cecee7273dfac211f425fec0f924680", "filename": "src/tools/clippy/tests/ui/iter_cloned_collect.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_cloned_collect.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -22,5 +22,11 @@ LL | |             .cloned()\n LL | |             .collect();\n    | |______________________^ help: try: `.to_vec()`\n \n-error: aborting due to 3 previous errors\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:28:24\n+   |\n+LL |     let _: Vec<_> = arr.iter().cloned().collect();\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "e7a29596b73ac50f8fdb1723c089e9425dbdf3bb", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -151,4 +151,16 @@ const fn const_fn_result_unwrap_or() {\n     };\n }\n \n+mod issue6965 {\n+    macro_rules! some_macro {\n+        () => {\n+            if 1 > 2 { Some(1) } else { None }\n+        };\n+    }\n+\n+    fn test() {\n+        let _ = some_macro!().unwrap_or(0);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "66006b6c616f08f9e1858e53ef451b57b26c130f", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -190,4 +190,19 @@ const fn const_fn_result_unwrap_or() {\n     };\n }\n \n+mod issue6965 {\n+    macro_rules! some_macro {\n+        () => {\n+            if 1 > 2 { Some(1) } else { None }\n+        };\n+    }\n+\n+    fn test() {\n+        let _ = match some_macro!() {\n+            Some(val) => val,\n+            None => 0,\n+        };\n+    }\n+}\n+\n fn main() {}"}, {"sha": "99625b789b6a4d7d0728ca89eb19dd98e8d73125", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -141,5 +141,15 @@ LL | |         Err(_) => \"Alice\",\n LL | |     };\n    | |_____^ help: replace with: `Ok::<&str, &str>(\"Bob\").unwrap_or(\"Alice\")`\n \n-error: aborting due to 13 previous errors\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:201:17\n+   |\n+LL |           let _ = match some_macro!() {\n+   |  _________________^\n+LL | |             Some(val) => val,\n+LL | |             None => 0,\n+LL | |         };\n+   | |_________^ help: replace with: `some_macro!().unwrap_or(0)`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "7f9f7ddc53575ca57a21cc0840df551218571da1", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -4,6 +4,10 @@\n \n use std::ops::{Deref, RangeFrom};\n \n+fn cloned_instead_of_copied() {\n+    let _ = [1].iter().cloned();\n+}\n+\n fn option_as_ref_deref() {\n     let mut opt = Some(String::from(\"123\"));\n "}, {"sha": "ddb1e1f37240909738d742fcd917b6c0b4d83d02", "filename": "src/tools/clippy/tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmin_rust_version_attr.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:156:24\n+  --> $DIR/min_rust_version_attr.rs:160:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:155:9\n+  --> $DIR/min_rust_version_attr.rs:159:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:168:24\n+  --> $DIR/min_rust_version_attr.rs:172:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:167:9\n+  --> $DIR/min_rust_version_attr.rs:171:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "52ddd9d2dc8266ac128e0c9bcc17f9d7394ecd21", "filename": "src/tools/clippy/tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.fixed?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        to.magic // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "1ea4ba0d83fd76da23c3ac13bb4dcb3caf9cc801", "filename": "src/tools/clippy/tests/ui/needless_question_mark.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "afd68d91e51fe54c022487f30388a72ea434511e", "filename": "src/tools/clippy/tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_question_mark.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -67,25 +67,7 @@ LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:138:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:154:9\n-   |\n-LL |         Some(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:162:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:187:27\n+  --> $DIR/needless_question_mark.rs:115:27\n    |\n LL |         || -> Option<_> { Some(Some($expr)?) }()\n    |                           ^^^^^^^^^^^^^^^^^^ help: try: `Some($expr)`\n@@ -95,5 +77,5 @@ LL |     let _x = some_and_qmark_in_macro!(x?);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "05863f9a2bf488c06722209622ceae63cce12de7", "filename": "src/tools/clippy/tests/ui/single_component_path_imports_macro.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.fixed?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+ // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "633deea348b81d415778fc372cae9a720c5c5ffc", "filename": "src/tools/clippy/tests/ui/single_component_path_imports_macro.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+use m2; // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "239efb393b1ab4ac058a959ebe323044cad662f1", "filename": "src/tools/clippy/tests/ui/single_component_path_imports_macro.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_component_path_imports_macro.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -0,0 +1,10 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_macro.rs:16:1\n+   |\n+LL | use m2; // fail\n+   | ^^^^^^^ help: remove it entirely\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c307afffcb86325b7dac857ef288042e1a5bdce9", "filename": "src/tools/clippy/tests/ui/single_element_loop.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -8,4 +8,9 @@ fn main() {\n         let item = &item1;\n         println!(\"{}\", item);\n     }\n+\n+    {\n+        let item = &item1;\n+        println!(\"{:?}\", item);\n+    }\n }"}, {"sha": "2c0c03b7211993ee22d5c5022818eec6842cb283", "filename": "src/tools/clippy/tests/ui/single_element_loop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -7,4 +7,8 @@ fn main() {\n     for item in &[item1] {\n         println!(\"{}\", item);\n     }\n+\n+    for item in [item1].iter() {\n+        println!(\"{:?}\", item);\n+    }\n }"}, {"sha": "0e35a33ded5ba0fc34a7aeaf46623630b74aaaa9", "filename": "src/tools/clippy/tests/ui/single_element_loop.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -15,5 +15,21 @@ LL |         println!(\"{}\", item);\n LL |     }\n    |\n \n-error: aborting due to previous error\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:11:5\n+   |\n+LL | /     for item in [item1].iter() {\n+LL | |         println!(\"{:?}\", item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL |     {\n+LL |         let item = &item1;\n+LL |         println!(\"{:?}\", item);\n+LL |     }\n+   |\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "8b141e25942d7f74a6eb90685def758340ce46ee", "filename": "src/tools/clippy/tests/ui/unused_io_amount.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.rs?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n #![warn(clippy::unused_io_amount)]\n \n-use std::io;\n+use std::io::{self, Read};\n \n fn question_mark<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     s.write(b\"test\")?;\n@@ -22,4 +22,43 @@ fn vectored<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     Ok(())\n }\n \n+fn ok(file: &str) -> Option<()> {\n+    let mut reader = std::fs::File::open(file).ok()?;\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).ok()?;\n+    Some(())\n+}\n+\n+#[allow(clippy::redundant_closure)]\n+#[allow(clippy::bind_instead_of_map)]\n+fn or_else(file: &str) -> io::Result<()> {\n+    let mut reader = std::fs::File::open(file)?;\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).or_else(|err| Err(err))?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+enum Error {\n+    Kind,\n+}\n+\n+fn or(file: &str) -> Result<(), Error> {\n+    let mut reader = std::fs::File::open(file).unwrap();\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).or(Err(Error::Kind))?;\n+    Ok(())\n+}\n+\n+fn combine_or(file: &str) -> Result<(), Error> {\n+    let mut reader = std::fs::File::open(file).unwrap();\n+    let mut result = [0u8; 0];\n+    reader\n+        .read(&mut result)\n+        .or(Err(Error::Kind))\n+        .or(Err(Error::Kind))\n+        .expect(\"error\");\n+    Ok(())\n+}\n+\n fn main() {}"}, {"sha": "d8dfc0e5a798c53edd720d8583f0a2d0745d2206", "filename": "src/tools/clippy/tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_io_amount.stderr?ref=38e0dbd8eb8ee58c3033f6e8057b7ff80a155b1e", "patch": "@@ -36,5 +36,33 @@ error: written amount is not handled\n LL |     s.write_vectored(&[io::IoSlice::new(&[])])?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:28:5\n+   |\n+LL |     reader.read(&mut result).ok()?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:37:5\n+   |\n+LL |     reader.read(&mut result).or_else(|err| Err(err))?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:49:5\n+   |\n+LL |     reader.read(&mut result).or(Err(Error::Kind))?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:56:5\n+   |\n+LL | /     reader\n+LL | |         .read(&mut result)\n+LL | |         .or(Err(Error::Kind))\n+LL | |         .or(Err(Error::Kind))\n+LL | |         .expect(\"error\");\n+   | |________________________^\n+\n+error: aborting due to 10 previous errors\n "}]}