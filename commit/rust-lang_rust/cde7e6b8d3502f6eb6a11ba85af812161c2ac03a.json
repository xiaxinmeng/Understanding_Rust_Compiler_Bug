{"sha": "cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZTdlNmI4ZDM1MDJmNmViNmExMWJhODVhZjgxMjE2MWMyYWMwM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T17:55:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T17:55:28Z"}, "message": "Auto merge of #7578 - xFrednet:7172-update-some-docs, r=camsteffen\n\nSmall documentation update for the new metadata_collector\n\nJust small documentation updates after the merge of the new metadata collection. I'm also here to deliver on the promised fairy tale:\n\n*Once upon a time, there was a world with many languages. One of the oldest was C a very versatile language that gave great power for the cost of great complexity and manual work. C was so powerful that it was able to create new languages. There is Java a versatile language often used by companies and in formal settings. Python that focused on readability and rapid prototyping capabilities. JavaScript which has some interesting edge cases but was still loved and widely used in the world. Together they build the foundation of our world and continue to shape the interactions between kingdoms worldwide.*\n\n*C ruled as the king of Linux and other operating systems alongside the Queen C++. Together they were powerful leaders, in fact so powerful that they have been ruling this world for over 49 years. They remain happy together and loved by the community. However, with great power comes great responsibility! The two of them have a dark secret. To tell the truth, they sometimes suffer from memory loss and even worse in some instances from race conditions.*\n\n*A mystical creature called Firefox lead to the creation of Mozilla, a global organization fighting for privacy and for their market share in the browser marked. As part of this fight, they started to modify parts of Firefox and eventually created Servo. A completely new creature with a new language called Rust. This new form of communication was focussed on correctness, speed and a new model of memory management.*\n\n*Rust grew up over several years with modification to syntax, content among other things. Finally, in 2015 Rust has reached adulthood which enabled it to take part in the global discourse and shape the future of our world. Some even say that this was the start of a new area withing language design.*\n\n*Rust had already started to build its kingdom and was now the head of a complete organization, with teams being in charge of individual tools used for further development. One team focussing on further improving Rust when it comes to complexity, style and performance was **The Clippy Team**. Its members were a friendly bunch, with mages and wizards among them.*\n\n*With the goal of giving more power to Rust, they identified a Python tool inside Clippy that could be rewritten. This led to the creating of the **Metadata collection monster**. This monster soon replaced the old Python tool and allowed for new creative additions inside Clippy's lint list. With the eradication of the old tool, there came a possibility to update the configuration documentation to span over a lager area. This was done, but some doc comments remained until now in memory of the old tool. This is now the PR that removes these doc comments.*\n\n---\n\nI have to stop now, this already took way longer than the actual changes. It probably also contains some spelling mistakes, but oh well. I hope you get the gist of it :upside_down_face:.\n\n---\n\nr? `@camsteffen`\n\nchangelog: none", "tree": {"sha": "c09a274b7451594331bcd60c19d1c1c75732e10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09a274b7451594331bcd60c19d1c1c75732e10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "html_url": "https://github.com/rust-lang/rust/commit/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50e6e42039d345e501e6a2e23ad371e7410f46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50e6e42039d345e501e6a2e23ad371e7410f46b", "html_url": "https://github.com/rust-lang/rust/commit/c50e6e42039d345e501e6a2e23ad371e7410f46b"}, {"sha": "c01aa64591df67b4f4b44c1c946ed56790f83580", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01aa64591df67b4f4b44c1c946ed56790f83580", "html_url": "https://github.com/rust-lang/rust/commit/c01aa64591df67b4f4b44c1c946ed56790f83580"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "ad341fbbda904e9e47430689cce3856dd1682ad2", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "patch": "@@ -31,9 +31,6 @@ impl TryConf {\n     }\n }\n \n-/// Note that the configuration parsing currently doesn't support documentation that will\n-/// that spans over several lines. This will be possible with the new implementation\n-/// See (rust-clippy#7172)\n macro_rules! define_Conf {\n     ($(\n         $(#[doc = $doc:literal])+\n@@ -130,7 +127,6 @@ macro_rules! define_Conf {\n     };\n }\n \n-// N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n     /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_VEC, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///"}, {"sha": "91533695eb309244da09432c806061bf69118009", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "patch": "@@ -82,7 +82,7 @@ This lint has the following configuration variables:\n /// `default`\n macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n     () => {\n-        \"* {name}: `{ty}`: {doc} (defaults to `{default}`)\\n\"\n+        \"* `{name}`: `{ty}`: {doc} (defaults to `{default}`)\\n\"\n     };\n }\n "}, {"sha": "392b70ee3a963cf58ba1181944ee8b5e10e1d9b9", "filename": "doc/adding_lints.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/cde7e6b8d3502f6eb6a11ba85af812161c2ac03a/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=cde7e6b8d3502f6eb6a11ba85af812161c2ac03a", "patch": "@@ -559,11 +559,12 @@ in the following steps:\n 1. Adding a new configuration entry to [clippy_utils::conf](/clippy_utils/src/conf.rs)\n     like this:\n     ```rust\n-    /// Lint: LINT_NAME. <The configuration field doc comment>\n+    /// Lint: LINT_NAME.\n+    ///\n+    /// <The configuration field doc comment>\n     (configuration_ident: Type = DefaultValue),\n     ```\n-    The configuration value and identifier should usually be the same. The doc comment will be\n-    automatically added to the lint documentation.\n+    The doc comment will be automatically added to the lint documentation.\n 2. Adding the configuration value to the lint impl struct:\n     1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n         generated with the `declare_lint_pass!` macro. This struct needs to be defined manually"}]}