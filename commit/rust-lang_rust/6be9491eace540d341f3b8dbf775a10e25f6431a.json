{"sha": "6be9491eace540d341f3b8dbf775a10e25f6431a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTk0OTFlYWNlNTQwZDM0MWYzYjhkYmY3NzVhMTBlMjVmNjQzMWE=", "commit": {"author": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-06-22T17:16:27Z"}, "committer": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-07-06T16:45:43Z"}, "message": "Reclassify powi(2) lint under suboptimal_flops", "tree": {"sha": "9dcdd0893edaea5fcac287e12b02a428a8f60748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dcdd0893edaea5fcac287e12b02a428a8f60748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be9491eace540d341f3b8dbf775a10e25f6431a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be9491eace540d341f3b8dbf775a10e25f6431a", "html_url": "https://github.com/rust-lang/rust/commit/6be9491eace540d341f3b8dbf775a10e25f6431a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be9491eace540d341f3b8dbf775a10e25f6431a/comments", "author": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc066fdb9103122cd918b1b38e26fa6edbc7e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc066fdb9103122cd918b1b38e26fa6edbc7e2e", "html_url": "https://github.com/rust-lang/rust/commit/6dc066fdb9103122cd918b1b38e26fa6edbc7e2e"}], "stats": {"total": 121, "additions": 75, "deletions": 46}, "files": [{"sha": "11bd0ae23aa3ec6c337f106b32b7dd2836ad215d", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6be9491eace540d341f3b8dbf775a10e25f6431a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be9491eace540d341f3b8dbf775a10e25f6431a/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=6be9491eace540d341f3b8dbf775a10e25f6431a", "patch": "@@ -294,37 +294,56 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n }\n \n fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n-    // Check argument\n     if let Some((value, _)) = constant(cx, cx.tables(), &args[1]) {\n-        // TODO: need more specific check. this is too wide. remember also to include tests\n-        if let Some(parent) = get_parent_expr(cx, expr) {\n-            if let Some(grandparent) = get_parent_expr(cx, parent) {\n-                if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n-                    if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n-                        return;\n+        if value == Int(2) {\n+            if let Some(parent) = get_parent_expr(cx, expr) {\n+                if let Some(grandparent) = get_parent_expr(cx, parent) {\n+                    if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n+                        if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                            return;\n+                        }\n                     }\n                 }\n+\n+                if let ExprKind::Binary(\n+                    Spanned {\n+                        node: BinOpKind::Add, ..\n+                    },\n+                    ref lhs,\n+                    ref rhs,\n+                ) = parent.kind\n+                {\n+                    let other_addend = if lhs.hir_id == expr.hir_id { rhs } else { lhs };\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SUBOPTIMAL_FLOPS,\n+                        parent.span,\n+                        \"square can be computed more efficiently\",\n+                        \"consider using\",\n+                        format!(\n+                            \"{}.mul_add({}, {})\",\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &other_addend, \"..\"),\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    return;\n+                }\n             }\n-        }\n \n-        let (lint, help, suggestion) = match value {\n-            Int(2) => (\n-                IMPRECISE_FLOPS,\n-                \"square can be computed more accurately\",\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"square can be computed more efficiently\",\n+                \"consider using\",\n                 format!(\"{} * {}\", Sugg::hir(cx, &args[0], \"..\"), Sugg::hir(cx, &args[0], \"..\")),\n-            ),\n-            _ => return,\n-        };\n-\n-        span_lint_and_sugg(\n-            cx,\n-            lint,\n-            expr.span,\n-            help,\n-            \"consider using\",\n-            suggestion,\n-            Applicability::MachineApplicable,\n-        );\n+                Applicability::MachineApplicable,\n+            );\n+        }\n     }\n }\n "}, {"sha": "56762400593b54fc3806cd7636594698fdf9962a", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=6be9491eace540d341f3b8dbf775a10e25f6431a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::imprecise_flops)]\n+#![warn(clippy::suboptimal_flops)]\n \n fn main() {\n     let one = 1;\n@@ -8,10 +8,12 @@ fn main() {\n     let _ = x * x;\n \n     let y = 4f32;\n-    let _ = (x * x + y).sqrt();\n-    let _ = (x + y * y).sqrt();\n+    let _ = x.mul_add(x, y);\n+    let _ = y.mul_add(y, x);\n+    let _ = x.mul_add(x, y).sqrt();\n+    let _ = y.mul_add(y, x).sqrt();\n     // Cases where the lint shouldn't be applied\n     let _ = x.powi(3);\n     let _ = x.powi(one + 1);\n-    let _ = x.hypot(y);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n }"}, {"sha": "1f800e4628dcae43fa277f5cbabc5897b9b67008", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=6be9491eace540d341f3b8dbf775a10e25f6431a", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::imprecise_flops)]\n+#![warn(clippy::suboptimal_flops)]\n \n fn main() {\n     let one = 1;\n@@ -8,6 +8,8 @@ fn main() {\n     let _ = x.powi(1 + 1);\n \n     let y = 4f32;\n+    let _ = x.powi(2) + y;\n+    let _ = x + y.powi(2);\n     let _ = (x.powi(2) + y).sqrt();\n     let _ = (x + y.powi(2)).sqrt();\n     // Cases where the lint shouldn't be applied"}, {"sha": "d5a5f1bcca1015cb948a125e4c2b09c873b2de0c", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be9491eace540d341f3b8dbf775a10e25f6431a/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=6be9491eace540d341f3b8dbf775a10e25f6431a", "patch": "@@ -1,34 +1,40 @@\n-error: square can be computed more accurately\n+error: square can be computed more efficiently\n   --> $DIR/floating_point_powi.rs:7:13\n    |\n LL |     let _ = x.powi(2);\n    |             ^^^^^^^^^ help: consider using: `x * x`\n    |\n-   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n-error: square can be computed more accurately\n+error: square can be computed more efficiently\n   --> $DIR/floating_point_powi.rs:8:13\n    |\n LL |     let _ = x.powi(1 + 1);\n    |             ^^^^^^^^^^^^^ help: consider using: `x * x`\n \n-error: square can be computed more accurately\n-  --> $DIR/floating_point_powi.rs:11:14\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:11:13\n    |\n-LL |     let _ = (x.powi(2) + y).sqrt();\n-   |              ^^^^^^^^^ help: consider using: `x * x`\n+LL |     let _ = x.powi(2) + y;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n \n-error: square can be computed more accurately\n-  --> $DIR/floating_point_powi.rs:12:18\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:12:13\n    |\n-LL |     let _ = (x + y.powi(2)).sqrt();\n-   |                  ^^^^^^^^^ help: consider using: `y * y`\n+LL |     let _ = x + y.powi(2);\n+   |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:13:13\n+   |\n+LL |     let _ = (x.powi(2) + y).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n \n-error: hypotenuse can be computed more accurately\n-  --> $DIR/floating_point_powi.rs:16:13\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:14:13\n    |\n-LL |     let _ = (x.powi(2) + y.powi(2)).sqrt();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+LL |     let _ = (x + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}