{"sha": "bf1e065371f8e50f84318b45fb21a949faa9449f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMWUwNjUzNzFmOGU1MGY4NDMxOGI0NWZiMjFhOTQ5ZmFhOTQ0OWY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-03T23:11:12Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:21Z"}, "message": "Remove FromIterator impl for ~[T]\n\nAs part of the shift from ~[T] to Vec<T>, recently ~[T] was made\nnon-growable. However, the FromIterator implementation for ~[T] was left\nintact (albeit implemented inefficiently), which basically provided a\nloophole to grow a ~[T] despite its non-growable nature. This is a\nproblem, both for performance reasons and because it encourages APIs to\ncontinue returning ~[T] when they should return Vec<T>. Removing\nFromIterator forces these APIs to adopt the correct type.\n\nFurthermore, during today's weekly meeting it was decided that we should\nremove all instances of ~[T] from the standard libraries in favor of\nVec<T>. Removing the FromIterator impl makes sense to do as a result.\n\nThis commit only includes the removal of the FromIterator impl. The\nsubsequent commits involve handling all of the breakage that results,\nincluding changing APIs to use Vec<T> instead of ~[T]. The precise API\nchanges are documented in the subsequent commit messages, but each\ncommit is not individually marked as a breaking change.\n\nFinally, a new trait FromVec is introduced that provides a mechanism to\nconvert Vec<T> back into ~[T] if truly necessary. It is a bit awkward to\nuse by design, and is anticipated that it will be more useful in a\npost-DST world to convert to an arbitrary Foo<[T]> smart pointer.\n\n[breaking-change]", "tree": {"sha": "44bc8d446e0fa05b767cb4c5245c87510a69576a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bc8d446e0fa05b767cb4c5245c87510a69576a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf1e065371f8e50f84318b45fb21a949faa9449f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e065371f8e50f84318b45fb21a949faa9449f", "html_url": "https://github.com/rust-lang/rust/commit/bf1e065371f8e50f84318b45fb21a949faa9449f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e065371f8e50f84318b45fb21a949faa9449f/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6725407ae0a2cb88458e147e76adf8bcae0961", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6725407ae0a2cb88458e147e76adf8bcae0961", "html_url": "https://github.com/rust-lang/rust/commit/aa6725407ae0a2cb88458e147e76adf8bcae0961"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "e7a1286bafc3be1956c5d2fec67f142ad9076bcc", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bf1e065371f8e50f84318b45fb21a949faa9449f/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf1e065371f8e50f84318b45fb21a949faa9449f/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=bf1e065371f8e50f84318b45fb21a949faa9449f", "patch": "@@ -151,39 +151,6 @@ impl<A: Clone> Clone for ~[A] {\n     }\n }\n \n-impl<A> FromIterator<A> for ~[A] {\n-    fn from_iter<T: Iterator<A>>(mut iterator: T) -> ~[A] {\n-        let (lower, _) = iterator.size_hint();\n-        let cap = if lower == 0 {16} else {lower};\n-        let mut cap = cap.checked_mul(&mem::size_of::<A>()).unwrap();\n-        let mut len = 0;\n-\n-        unsafe {\n-            let mut ptr = alloc(cap) as *mut Vec<A>;\n-            let mut ret = cast::transmute(ptr);\n-            for elt in iterator {\n-                if len * mem::size_of::<A>() >= cap {\n-                    cap = cap.checked_mul(&2).unwrap();\n-                    let ptr2 = alloc(cap) as *mut Vec<A>;\n-                    ptr::copy_nonoverlapping_memory(&mut (*ptr2).data,\n-                                                    &(*ptr).data,\n-                                                    len);\n-                    free(ptr as *u8);\n-                    cast::forget(ret);\n-                    ret = cast::transmute(ptr2);\n-                    ptr = ptr2;\n-                }\n-\n-                let base = &mut (*ptr).data as *mut A;\n-                intrinsics::move_val_init(&mut *base.offset(len as int), elt);\n-                len += 1;\n-                (*ptr).fill = len * mem::nonzero_size_of::<A>();\n-            }\n-            ret\n-        }\n-    }\n-}\n-\n #[cfg(not(test))]\n impl<'a,T:Clone, V: Vector<T>> Add<V, ~[T]> for &'a [T] {\n     #[inline]"}]}